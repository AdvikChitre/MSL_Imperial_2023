
Gateway_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027f1c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ac0  080281ec  080281ec  000381ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802bcac  0802bcac  0003bcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0802bcb0  0802bcb0  0003bcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000530  24000000  0802bcb4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RxDecripSection 00000060  24000530  0802c1e4  00040530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 00000060  24000590  0802c244  00040590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000e714  240005f0  0802c2a4  000405f0  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2400ed04  0802c2a4  0004ed04  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000405f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005fcff  00000000  00000000  0004061e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000cd52  00000000  00000000  000a031d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003b40  00000000  00000000  000ad070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000038c0  00000000  00000000  000b0bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004eaa2  00000000  00000000  000b4470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005ee03  00000000  00000000  00102f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00189516  00000000  00000000  00161d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002eb22b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ffc8  00000000  00000000  002eb27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240005f0 	.word	0x240005f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080281d4 	.word	0x080281d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240005f4 	.word	0x240005f4
 800030c:	080281d4 	.word	0x080281d4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
 80003e8:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	2301      	movs	r3, #1
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
 8000406:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	2304      	movs	r3, #4
}
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800041a:	b480      	push	{r7}
 800041c:	b083      	sub	sp, #12
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d002      	beq.n	800042e <OD_getIndex+0x14>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	e000      	b.n	8000430 <OD_getIndex+0x16>
 800042e:	2300      	movs	r3, #0
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d101      	bne.n	8000450 <OD_extension_init+0x14>
 800044c:	2305      	movs	r3, #5
 800044e:	e003      	b.n	8000458 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	683a      	ldr	r2, [r7, #0]
 8000454:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af02      	add	r7, sp, #8
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	607a      	str	r2, [r7, #4]
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	460b      	mov	r3, r1
 8000472:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000474:	7af9      	ldrb	r1, [r7, #11]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2304      	movs	r3, #4
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f001 fb56 	bl	8001b30 <OD_get_value>
 8000484:	4603      	mov	r3, r0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b086      	sub	sp, #24
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
 800049a:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00c      	beq.n	80004bc <OD_read_1014_default+0x2e>
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	7c5b      	ldrb	r3, [r3, #17]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d108      	bne.n	80004bc <OD_read_1014_default+0x2e>
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d005      	beq.n	80004bc <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	d902      	bls.n	80004bc <OD_read_1014_default+0x2e>
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d101      	bne.n	80004c0 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80004bc:	2309      	movs	r3, #9
 80004be:	e01b      	b.n	80004f8 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <OD_read_1014_default+0x44>
 80004ce:	2300      	movs	r3, #0
 80004d0:	e001      	b.n	80004d6 <OD_read_1014_default+0x48>
 80004d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80004d6:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004de:	3380      	adds	r3, #128	; 0x80
 80004e0:	461a      	mov	r2, r3
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80004e8:	6939      	ldr	r1, [r7, #16]
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f7ff ff86 	bl	80003fc <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	2204      	movs	r2, #4
 80004f4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d00f      	beq.n	8000534 <OD_read_1003+0x34>
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00c      	beq.n	8000534 <OD_read_1003+0x34>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d009      	beq.n	8000534 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b03      	cmp	r3, #3
 8000524:	d803      	bhi.n	800052e <OD_read_1003+0x2e>
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	7c5b      	ldrb	r3, [r3, #17]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <OD_read_1003+0x34>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d101      	bne.n	8000538 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000534:	2309      	movs	r3, #9
 8000536:	e04d      	b.n	80005d4 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	7f1b      	ldrb	r3, [r3, #28]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d801      	bhi.n	800054a <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000546:	2309      	movs	r3, #9
 8000548:	e044      	b.n	80005d4 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	7c5b      	ldrb	r3, [r3, #17]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10b      	bne.n	800056a <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000558:	4619      	mov	r1, r3
 800055a:	68b8      	ldr	r0, [r7, #8]
 800055c:	f7ff ff3e 	bl	80003dc <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000566:	2300      	movs	r3, #0
 8000568:	e034      	b.n	80005d4 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	7c5a      	ldrb	r2, [r3, #17]
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000574:	429a      	cmp	r2, r3
 8000576:	d82c      	bhi.n	80005d2 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	7f5b      	ldrb	r3, [r3, #29]
 800057c:	b29a      	uxth	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	7c5b      	ldrb	r3, [r3, #17]
 8000582:	b29b      	uxth	r3, r3
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	b29b      	uxth	r3, r3
 8000588:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800058a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800058e:	2b00      	cmp	r3, #0
 8000590:	da07      	bge.n	80005a2 <OD_read_1003+0xa2>
            index += em->fifoSize;
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	7f1b      	ldrb	r3, [r3, #28]
 8000596:	b29a      	uxth	r2, r3
 8000598:	8afb      	ldrh	r3, [r7, #22]
 800059a:	4413      	add	r3, r2
 800059c:	b29b      	uxth	r3, r3
 800059e:	82fb      	strh	r3, [r7, #22]
 80005a0:	e007      	b.n	80005b2 <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 80005a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	7f12      	ldrb	r2, [r2, #28]
 80005aa:	4293      	cmp	r3, r2
 80005ac:	db01      	blt.n	80005b2 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 80005ae:	2309      	movs	r3, #9
 80005b0:	e010      	b.n	80005d4 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	699a      	ldr	r2, [r3, #24]
 80005b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	4413      	add	r3, r2
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	68b8      	ldr	r0, [r7, #8]
 80005c4:	f7ff ff1a 	bl	80003fc <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2204      	movs	r2, #4
 80005cc:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e000      	b.n	80005d4 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 80005d2:	2319      	movs	r3, #25
    }
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00c      	beq.n	800060a <OD_write_1003+0x2e>
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	7c5b      	ldrb	r3, [r3, #17]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d108      	bne.n	800060a <OD_write_1003+0x2e>
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d005      	beq.n	800060a <OD_write_1003+0x2e>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d102      	bne.n	800060a <OD_write_1003+0x2e>
        || countWritten == NULL)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 800060a:	2309      	movs	r3, #9
 800060c:	e012      	b.n	8000634 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 800060e:	68b8      	ldr	r0, [r7, #8]
 8000610:	f7ff fed6 	bl	80003c0 <CO_getUint8>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 800061a:	230f      	movs	r3, #15
 800061c:	e00a      	b.n	8000634 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af02      	add	r7, sp, #8
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800064a:	2300      	movs	r3, #0
 800064c:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d01a      	beq.n	800068a <CO_EM_init+0x4e>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d017      	beq.n	800068a <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d103      	bne.n	8000668 <CO_EM_init+0x2c>
 8000660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d810      	bhi.n	800068a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	2b00      	cmp	r3, #0
 800066c:	d00d      	beq.n	800068a <CO_EM_init+0x4e>
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000674:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <CO_EM_init+0x4e>
 800067c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000680:	2b00      	cmp	r3, #0
 8000682:	db02      	blt.n	800068a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e0a7      	b.n	80007e0 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8000690:	2250      	movs	r2, #80	; 0x50
 8000692:	2100      	movs	r1, #0
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f026 fe11 	bl	80272bc <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80006a0:	2300      	movs	r3, #0
 80006a2:	2201      	movs	r2, #1
 80006a4:	2100      	movs	r1, #0
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f001 faa9 	bl	8001bfe <OD_getPtr>
 80006ac:	4602      	mov	r2, r0
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d10c      	bne.n	80006d4 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80006ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d006      	beq.n	80006ce <CO_EM_init+0x92>
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff feaa 	bl	800041a <OD_getIndex>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006cc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80006ce:	f06f 030b 	mvn.w	r3, #11
 80006d2:	e085      	b.n	80007e0 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006e8:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80006ea:	f107 0210 	add.w	r2, r7, #16
 80006ee:	2301      	movs	r3, #1
 80006f0:	2100      	movs	r1, #0
 80006f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f4:	f7ff feb6 	bl	8000464 <OD_get_u32>
 80006f8:	4603      	mov	r3, r0
 80006fa:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80006fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d104      	bne.n	800070e <CO_EM_init+0xd2>
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <CO_EM_init+0x1ac>)
 8000708:	4013      	ands	r3, r2
 800070a:	2b00      	cmp	r3, #0
 800070c:	d010      	beq.n	8000730 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <CO_EM_init+0xe6>
 8000714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000716:	f7ff fe80 	bl	800041a <OD_getIndex>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000720:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 8000722:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 800072a:	f06f 030b 	mvn.w	r3, #11
 800072e:	e057      	b.n	80007e0 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8000730:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000734:	b29b      	uxth	r3, r3
 8000736:	3380      	adds	r3, #128	; 0x80
 8000738:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	43db      	mvns	r3, r3
 800073e:	0fdb      	lsrs	r3, r3, #31
 8000740:	b2db      	uxtb	r3, r3
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <CO_EM_init+0x1b0>)
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <CO_EM_init+0x1b4>)
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3330      	adds	r3, #48	; 0x30
 800075e:	4619      	mov	r1, r3
 8000760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000762:	f7ff fe6b 	bl	800043c <OD_extension_init>
 8000766:	4603      	mov	r3, r0
 8000768:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800076a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00c      	beq.n	800078c <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000774:	2b00      	cmp	r3, #0
 8000776:	d006      	beq.n	8000786 <CO_EM_init+0x14a>
 8000778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800077a:	f7ff fe4e 	bl	800041a <OD_getIndex>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000784:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000786:	f06f 030b 	mvn.w	r3, #11
 800078a:	e029      	b.n	80007e0 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000796:	8aba      	ldrh	r2, [r7, #20]
 8000798:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800079a:	2300      	movs	r3, #0
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	2308      	movs	r3, #8
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2300      	movs	r3, #0
 80007a4:	68b8      	ldr	r0, [r7, #8]
 80007a6:	f005 fcf7 	bl	8006198 <CO_CANtxBufferInit>
 80007aa:	4602      	mov	r2, r0
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	e010      	b.n	80007e0 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <CO_EM_init+0x1b8>)
 80007c8:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <CO_EM_init+0x1bc>)
 80007ce:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3340      	adds	r3, #64	; 0x40
 80007d4:	4619      	mov	r1, r3
 80007d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80007d8:	f7ff fe30 	bl	800043c <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80007dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	7ffff800 	.word	0x7ffff800
 80007ec:	0800048f 	.word	0x0800048f
 80007f0:	08001765 	.word	0x08001765
 80007f4:	08000501 	.word	0x08000501
 80007f8:	080005dd 	.word	0x080005dd

080007fc <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af02      	add	r7, sp, #8
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	8a5b      	ldrh	r3, [r3, #18]
 8000810:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	8a1b      	ldrh	r3, [r3, #16]
 8000816:	8aba      	ldrh	r2, [r7, #20]
 8000818:	429a      	cmp	r2, r3
 800081a:	f000 80a2 	beq.w	8000962 <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	8a1a      	ldrh	r2, [r3, #16]
 8000822:	8abb      	ldrh	r3, [r7, #20]
 8000824:	4053      	eors	r3, r2
 8000826:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	8aba      	ldrh	r2, [r7, #20]
 800082c:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 800082e:	8a7a      	ldrh	r2, [r7, #18]
 8000830:	f240 1301 	movw	r3, #257	; 0x101
 8000834:	4013      	ands	r3, r2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d010      	beq.n	800085c <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 800083a:	8aba      	ldrh	r2, [r7, #20]
 800083c:	f240 1301 	movw	r3, #257	; 0x101
 8000840:	4013      	ands	r3, r2
            CO_error(em,
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4619      	mov	r1, r3
 800084e:	2300      	movs	r3, #0
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	2201      	movs	r2, #1
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f000 f91a 	bl	8000a90 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 800085c:	8a7b      	ldrh	r3, [r7, #18]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d010      	beq.n	8000888 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000866:	8abb      	ldrh	r3, [r7, #20]
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	2300      	movs	r3, #0
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	f248 1320 	movw	r3, #33056	; 0x8120
 8000880:	2207      	movs	r2, #7
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f000 f904 	bl	8000a90 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8000888:	8a7b      	ldrh	r3, [r7, #18]
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	2b00      	cmp	r3, #0
 8000890:	d010      	beq.n	80008b4 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000892:	8abb      	ldrh	r3, [r7, #20]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf14      	ite	ne
 800089c:	2301      	movne	r3, #1
 800089e:	2300      	moveq	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	f248 1340 	movw	r3, #33088	; 0x8140
 80008ac:	2212      	movs	r2, #18
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 f8ee 	bl	8000a90 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 80008b4:	8a7b      	ldrh	r3, [r7, #18]
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d010      	beq.n	80008e0 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 80008be:	8abb      	ldrh	r3, [r7, #20]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4619      	mov	r1, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f248 1310 	movw	r3, #33040	; 0x8110
 80008d8:	2214      	movs	r2, #20
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f000 f8d8 	bl	8000a90 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 80008e0:	8a7b      	ldrh	r3, [r7, #18]
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d010      	beq.n	800090c <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 80008ea:	8abb      	ldrh	r3, [r7, #20]
 80008ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bf14      	ite	ne
 80008f4:	2301      	movne	r3, #1
 80008f6:	2300      	moveq	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	2300      	movs	r3, #0
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000904:	2215      	movs	r2, #21
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f000 f8c2 	bl	8000a90 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 800090c:	8a7b      	ldrh	r3, [r7, #18]
 800090e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000912:	2b00      	cmp	r3, #0
 8000914:	d010      	beq.n	8000938 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800091c:	2b00      	cmp	r3, #0
 800091e:	bf14      	ite	ne
 8000920:	2301      	movne	r3, #1
 8000922:	2300      	moveq	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4619      	mov	r1, r3
 8000928:	2300      	movs	r3, #0
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	f248 1320 	movw	r3, #33056	; 0x8120
 8000930:	2206      	movs	r2, #6
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f000 f8ac 	bl	8000a90 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8000938:	8a7b      	ldrh	r3, [r7, #18]
 800093a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800093e:	2b00      	cmp	r3, #0
 8000940:	d00f      	beq.n	8000962 <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000942:	8abb      	ldrh	r3, [r7, #20]
 8000944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4619      	mov	r1, r3
 8000954:	2300      	movs	r3, #0
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2313      	movs	r3, #19
 800095a:	2213      	movs	r2, #19
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f000 f897 	bl	8000a90 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000962:	2300      	movs	r3, #0
 8000964:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <CO_EM_process+0x18a>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	78db      	ldrb	r3, [r3, #3]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	7a1b      	ldrb	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <CO_EM_process+0x1a2>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	7a5b      	ldrb	r3, [r3, #9]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 800099e:	7dfb      	ldrb	r3, [r7, #23]
 80009a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009a4:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	7dfa      	ldrb	r2, [r7, #23]
 80009ac:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d067      	beq.n	8000a84 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	7f1b      	ldrb	r3, [r3, #28]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d965      	bls.n	8000a88 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	7f9b      	ldrb	r3, [r3, #30]
 80009c0:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	7f5b      	ldrb	r3, [r3, #29]
 80009c6:	7c7a      	ldrb	r2, [r7, #17]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d05d      	beq.n	8000a88 <CO_EM_process+0x28c>
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d158      	bne.n	8000a88 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	699a      	ldr	r2, [r3, #24]
 80009da:	7c7b      	ldrb	r3, [r7, #17]
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	4413      	add	r3, r2
 80009e0:	6819      	ldr	r1, [r3, #0]
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	041a      	lsls	r2, r3, #16
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6998      	ldr	r0, [r3, #24]
 80009ea:	7c7b      	ldrb	r3, [r7, #17]
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	4403      	add	r3, r0
 80009f0:	430a      	orrs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	1d58      	adds	r0, r3, #5
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	7c7b      	ldrb	r3, [r7, #17]
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	2208      	movs	r2, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	f026 fc30 	bl	802726c <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a14:	4619      	mov	r1, r3
 8000a16:	4610      	mov	r0, r2
 8000a18:	f005 fc84 	bl	8006324 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000a1c:	7c7b      	ldrb	r3, [r7, #17]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	747b      	strb	r3, [r7, #17]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	7f1b      	ldrb	r3, [r3, #28]
 8000a26:	7c7a      	ldrb	r2, [r7, #17]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d201      	bcs.n	8000a30 <CO_EM_process+0x234>
 8000a2c:	7c7a      	ldrb	r2, [r7, #17]
 8000a2e:	e000      	b.n	8000a32 <CO_EM_process+0x236>
 8000a30:	2200      	movs	r2, #0
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	7fdb      	ldrb	r3, [r3, #31]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10c      	bne.n	8000a58 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2202      	movs	r2, #2
 8000a42:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000a44:	2300      	movs	r3, #0
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2101      	movs	r1, #1
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f000 f81d 	bl	8000a90 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000a56:	e017      	b.n	8000a88 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	7fdb      	ldrb	r3, [r3, #31]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d113      	bne.n	8000a88 <CO_EM_process+0x28c>
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	7f9a      	ldrb	r2, [r3, #30]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	7f5b      	ldrb	r3, [r3, #29]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d10d      	bne.n	8000a88 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000a72:	2300      	movs	r3, #0
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	2220      	movs	r2, #32
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f000 f807 	bl	8000a90 <CO_error>
    return;
 8000a82:	e001      	b.n	8000a88 <CO_EM_process+0x28c>
        return;
 8000a84:	bf00      	nop
 8000a86:	e000      	b.n	8000a8a <CO_EM_process+0x28e>
    return;
 8000a88:	bf00      	nop
}
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b08d      	sub	sp, #52	; 0x34
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 80a6 	beq.w	8000bfa <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	2201      	movs	r2, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	d90a      	bls.n	8000ae4 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000ada:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000ade:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000af6:	4013      	ands	r3, r2
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <CO_error+0x88>
            return;
 8000b0a:	e079      	b.n	8000c00 <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d074      	beq.n	8000bfe <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000b14:	2300      	movs	r3, #0
 8000b16:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	061a      	lsls	r2, r3, #24
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b24:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b2a:	f3ef 8210 	mrs	r2, PRIMASK
 8000b2e:	617a      	str	r2, [r7, #20]
  return(result);
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <CO_error+0xc0>
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e00b      	b.n	8000b68 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8000b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	4013      	ands	r3, r2
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b66:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	7f1b      	ldrb	r3, [r3, #28]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d93c      	bls.n	8000bea <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	7f5b      	ldrb	r3, [r3, #29]
 8000b74:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000b76:	7efb      	ldrb	r3, [r7, #27]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	7f1b      	ldrb	r3, [r3, #28]
 8000b82:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d302      	bcc.n	8000b90 <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	7f9b      	ldrb	r3, [r3, #30]
 8000b94:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d103      	bne.n	8000ba4 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	77da      	strb	r2, [r3, #31]
 8000ba2:	e022      	b.n	8000bea <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	7efb      	ldrb	r3, [r7, #27]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4413      	add	r3, r2
 8000bae:	6a3a      	ldr	r2, [r7, #32]
 8000bb0:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	7efb      	ldrb	r3, [r7, #27]
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	4413      	add	r3, r2
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000bc6:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	7f1b      	ldrb	r3, [r3, #28]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	da07      	bge.n	8000bea <CO_error+0x15a>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	f383 8810 	msr	PRIMASK, r3
}
 8000bf8:	e002      	b.n	8000c00 <CO_error+0x170>
    if (em == NULL) return;
 8000bfa:	bf00      	nop
 8000bfc:	e000      	b.n	8000c00 <CO_error+0x170>
            return;
 8000bfe:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000c00:	3734      	adds	r7, #52	; 0x34
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000c0a:	b480      	push	{r7}
 8000c0c:	b085      	sub	sp, #20
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <OD_getIndex+0x14>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	e000      	b.n	8000c3c <OD_getIndex+0x16>
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <OD_extension_init>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <OD_extension_init+0x14>
 8000c58:	2305      	movs	r3, #5
 8000c5a:	e003      	b.n	8000c64 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <OD_get_u32>:
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000c80:	7af9      	ldrb	r1, [r7, #11]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2304      	movs	r3, #4
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f000 ff50 	bl	8001b30 <OD_get_value>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000c9a:	b480      	push	{r7}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	3305      	adds	r3, #5
 8000cb2:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d107      	bne.n	8000cca <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25a      	sxtb	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b088      	sub	sp, #32
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d012      	beq.n	8000d16 <OD_write_1016+0x40>
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00f      	beq.n	8000d16 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	7c5b      	ldrb	r3, [r3, #17]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	7c5a      	ldrb	r2, [r3, #17]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	7a1b      	ldrb	r3, [r3, #8]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d805      	bhi.n	8000d16 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d102      	bne.n	8000d16 <OD_write_1016+0x40>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000d16:	2309      	movs	r3, #9
 8000d18:	e020      	b.n	8000d5c <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000d1a:	68b8      	ldr	r0, [r7, #8]
 8000d1c:	f7ff ff75 	bl	8000c0a <CO_getUint32>
 8000d20:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	0c1b      	lsrs	r3, r3, #16
 8000d26:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	7c5b      	ldrb	r3, [r3, #17]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	b2d9      	uxtb	r1, r3
 8000d34:	8abb      	ldrh	r3, [r7, #20]
 8000d36:	7dfa      	ldrb	r2, [r7, #23]
 8000d38:	69f8      	ldr	r0, [r7, #28]
 8000d3a:	f000 f8bf 	bl	8000ebc <CO_HBconsumer_initEntry>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000d42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	e006      	b.n	8000d5c <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 fd05 	bl	8001764 <OD_writeOriginal>
 8000d5a:	4603      	mov	r3, r0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00b      	beq.n	8000d90 <CO_HBconsumer_init+0x2c>
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d008      	beq.n	8000d90 <CO_HBconsumer_init+0x2c>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d005      	beq.n	8000d90 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <CO_HBconsumer_init+0x2c>
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	e08a      	b.n	8000eac <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000d96:	2230      	movs	r2, #48	; 0x30
 8000d98:	2100      	movs	r1, #0
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f026 fa8e 	bl	80272bc <memset>
    HBcons->em = em;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000db0:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000db6:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d304      	bcc.n	8000dcc <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc4:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	e000      	b.n	8000dce <CO_HBconsumer_init+0x6a>
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	77fb      	strb	r3, [r7, #31]
 8000dd6:	e041      	b.n	8000e5c <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000dd8:	7ffb      	ldrb	r3, [r7, #31]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2d9      	uxtb	r1, r3
 8000dde:	f107 0214 	add.w	r2, r7, #20
 8000de2:	2301      	movs	r3, #1
 8000de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000de6:	f7ff ff43 	bl	8000c70 <OD_get_u32>
 8000dea:	4603      	mov	r3, r0
 8000dec:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000dee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d00c      	beq.n	8000e10 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <CO_HBconsumer_init+0xa6>
 8000dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dfe:	f7ff ff12 	bl	8000c26 <OD_getIndex>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e08:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000e0a:	f06f 030b 	mvn.w	r3, #11
 8000e0e:	e04d      	b.n	8000eac <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8000e1a:	8b7b      	ldrh	r3, [r7, #26]
 8000e1c:	7f7a      	ldrb	r2, [r7, #29]
 8000e1e:	7ff9      	ldrb	r1, [r7, #31]
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f000 f84b 	bl	8000ebc <CO_HBconsumer_initEntry>
 8000e26:	4603      	mov	r3, r0
 8000e28:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000e2a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d011      	beq.n	8000e56 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <CO_HBconsumer_init+0xe2>
 8000e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e3a:	f7ff fef4 	bl	8000c26 <OD_getIndex>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e44:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8000e46:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000e4a:	f113 0f0c 	cmn.w	r3, #12
 8000e4e:	d002      	beq.n	8000e56 <CO_HBconsumer_init+0xf2>
                return ret;
 8000e50:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000e54:	e02a      	b.n	8000eac <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e56:	7ffb      	ldrb	r3, [r7, #31]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	77fb      	strb	r3, [r7, #31]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	7a1b      	ldrb	r3, [r3, #8]
 8000e60:	7ffa      	ldrb	r2, [r7, #31]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3b8      	bcc.n	8000dd8 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <CO_HBconsumer_init+0x150>)
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <CO_HBconsumer_init+0x154>)
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3320      	adds	r3, #32
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e80:	f7ff fee2 	bl	8000c48 <OD_extension_init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8000e88:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00c      	beq.n	8000eaa <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <CO_HBconsumer_init+0x140>
 8000e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e98:	f7ff fec5 	bl	8000c26 <OD_getIndex>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000ea4:	f06f 030b 	mvn.w	r3, #11
 8000ea8:	e000      	b.n	8000eac <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	080016b5 	.word	0x080016b5
 8000eb8:	08000cd7 	.word	0x08000cd7

08000ebc <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b08d      	sub	sp, #52	; 0x34
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4603      	mov	r3, r0
 8000ecc:	70fb      	strb	r3, [r7, #3]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	70bb      	strb	r3, [r7, #2]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <CO_HBconsumer_initEntry+0x2e>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7a1b      	ldrb	r3, [r3, #8]
 8000ee4:	78fa      	ldrb	r2, [r7, #3]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d302      	bcc.n	8000ef0 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e077      	b.n	8000fe0 <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8000ef0:	883b      	ldrh	r3, [r7, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d024      	beq.n	8000f40 <CO_HBconsumer_initEntry+0x84>
 8000ef6:	78bb      	ldrb	r3, [r7, #2]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d021      	beq.n	8000f40 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	77bb      	strb	r3, [r7, #30]
 8000f00:	e019      	b.n	8000f36 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	7fbb      	ldrb	r3, [r7, #30]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f107 0408 	add.w	r4, r7, #8
 8000f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	7fbb      	ldrb	r3, [r7, #30]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d008      	beq.n	8000f30 <CO_HBconsumer_initEntry+0x74>
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d005      	beq.n	8000f30 <CO_HBconsumer_initEntry+0x74>
 8000f24:	7a3b      	ldrb	r3, [r7, #8]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d101      	bne.n	8000f30 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8000f2c:	23f4      	movs	r3, #244	; 0xf4
 8000f2e:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f30:	7fbb      	ldrb	r3, [r7, #30]
 8000f32:	3301      	adds	r3, #1
 8000f34:	77bb      	strb	r3, [r7, #30]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7a1b      	ldrb	r3, [r3, #8]
 8000f3a:	7fba      	ldrb	r2, [r7, #30]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3e0      	bcc.n	8000f02 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000f40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d149      	bne.n	8000fdc <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	4413      	add	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8000f5a:	883b      	ldrh	r3, [r7, #0]
 8000f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	22ff      	movs	r2, #255	; 0xff
 8000f6e:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00d      	beq.n	8000f9a <CO_HBconsumer_initEntry+0xde>
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d009      	beq.n	8000f9a <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000f90:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	2201      	movs	r2, #1
 8000f96:	709a      	strb	r2, [r3, #2]
 8000f98:	e007      	b.n	8000faa <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000fc4:	8bba      	ldrh	r2, [r7, #28]
 8000fc6:	4c08      	ldr	r4, [pc, #32]	; (8000fe8 <CO_HBconsumer_initEntry+0x12c>)
 8000fc8:	9402      	str	r4, [sp, #8]
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fd4:	f005 f884 	bl	80060e0 <CO_CANrxBufferInit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8000fdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3724      	adds	r7, #36	; 0x24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	08000c9b 	.word	0x08000c9b

08000fec <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8000ffe:	2301      	movs	r3, #1
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d077      	beq.n	80010f8 <CO_HBconsumer_process+0x10c>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d073      	beq.n	80010f8 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001016:	e068      	b.n	80010ea <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	789b      	ldrb	r3, [r3, #2]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d055      	beq.n	80010de <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d022      	beq.n	8001080 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d112      	bne.n	800106a <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d10a      	bne.n	8001062 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	f248 1330 	movw	r3, #33072	; 0x8130
 800105a:	221c      	movs	r2, #28
 800105c:	2101      	movs	r1, #1
 800105e:	f7ff fd17 	bl	8000a90 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2201      	movs	r2, #1
 8001066:	709a      	strb	r2, [r3, #2]
 8001068:	e007      	b.n	800107a <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2202      	movs	r2, #2
 800106e:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	789b      	ldrb	r3, [r3, #2]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d11c      	bne.n	80010c2 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	441a      	add	r2, r3
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	429a      	cmp	r2, r3
 800109e:	d310      	bcc.n	80010c2 <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	f248 1330 	movw	r3, #33072	; 0x8130
 80010ae:	221b      	movs	r2, #27
 80010b0:	2101      	movs	r1, #1
 80010b2:	f7ff fced 	bl	8000a90 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2203      	movs	r2, #3
 80010c0:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	789b      	ldrb	r3, [r3, #2]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d001      	beq.n	80010ce <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d003      	beq.n	80010e0 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
 80010dc:	e000      	b.n	80010e0 <CO_HBconsumer_process+0xf4>
                continue;
 80010de:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80010e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e4:	3301      	adds	r3, #1
 80010e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	7a1b      	ldrb	r3, [r3, #8]
 80010ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d390      	bcc.n	8001018 <CO_HBconsumer_process+0x2c>
 80010f6:	e028      	b.n	800114a <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d103      	bne.n	8001106 <CO_HBconsumer_process+0x11a>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d021      	beq.n	800114a <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	77fb      	strb	r3, [r7, #31]
 800110a:	e015      	b.n	8001138 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	789b      	ldrb	r3, [r3, #2]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2201      	movs	r2, #1
 8001130:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	3301      	adds	r3, #1
 8001136:	77fb      	strb	r3, [r7, #31]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	7a1b      	ldrb	r3, [r3, #8]
 800113c:	7ffa      	ldrb	r2, [r7, #31]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3e4      	bcc.n	800110c <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d114      	bne.n	800117c <CO_HBconsumer_process+0x190>
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d011      	beq.n	800117c <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	2300      	movs	r3, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	221b      	movs	r2, #27
 8001164:	2100      	movs	r1, #0
 8001166:	f7ff fc93 	bl	8000a90 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	221c      	movs	r2, #28
 8001176:	2100      	movs	r1, #0
 8001178:	f7ff fc8a 	bl	8000a90 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001180:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001186:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	615a      	str	r2, [r3, #20]
}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80011a4:	81fb      	strh	r3, [r7, #14]
 80011a6:	89fb      	ldrh	r3, [r7, #14]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <OD_getIndex+0x14>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	e000      	b.n	80011ca <OD_getIndex+0x16>
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <OD_extension_init>:
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <OD_extension_init+0x14>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e003      	b.n	80011f2 <OD_extension_init+0x1c>
    entry->extension = extension;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <OD_get_u16>:
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af02      	add	r7, sp, #8
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	460b      	mov	r3, r1
 800120c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800120e:	7af9      	ldrb	r1, [r7, #11]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2302      	movs	r3, #2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fc89 	bl	8001b30 <OD_get_value>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	2201      	movs	r2, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00a      	beq.n	8001264 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b09      	cmp	r3, #9
 8001252:	d807      	bhi.n	8001264 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	5cd2      	ldrb	r2, [r2, r3]
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	4013      	ands	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <CO_isError+0x40>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <CO_isError+0x42>
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <CO_getErrorRegister+0x1e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <CO_getErrorRegister+0x1e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	e000      	b.n	8001296 <CO_getErrorRegister+0x20>
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 80012a2:	b480      	push	{r7}
 80012a4:	b087      	sub	sp, #28
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3305      	adds	r3, #5
 80012b6:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d10a      	bne.n	80012e4 <CO_NMT_receive+0x42>
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <CO_NMT_receive+0x3c>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	7bba      	ldrb	r2, [r7, #14]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d102      	bne.n	80012e4 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00c      	beq.n	800131e <OD_write_1017+0x2e>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	7c5b      	ldrb	r3, [r3, #17]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d108      	bne.n	800131e <OD_write_1017+0x2e>
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d102      	bne.n	800131e <OD_write_1017+0x2e>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800131e:	2309      	movs	r3, #9
 8001320:	e017      	b.n	8001352 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001328:	68b8      	ldr	r0, [r7, #8]
 800132a:	f7ff ff34 	bl	8001196 <CO_getUint16>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fb03 f202 	mul.w	r2, r3, r2
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 fa0a 	bl	8001764 <OD_writeOriginal>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af04      	add	r7, sp, #16
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <CO_NMT_init+0x30>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d008      	beq.n	800138c <CO_NMT_init+0x30>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <CO_NMT_init+0x30>
 8001386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	e098      	b.n	80014c4 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001392:	222c      	movs	r2, #44	; 0x2c
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f025 ff90 	bl	80272bc <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8c3a      	ldrh	r2, [r7, #32]
 80013b2:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 80013ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 80013ca:	f107 0214 	add.w	r2, r7, #20
 80013ce:	2301      	movs	r3, #1
 80013d0:	2100      	movs	r1, #0
 80013d2:	68b8      	ldr	r0, [r7, #8]
 80013d4:	f7ff ff13 	bl	80011fe <OD_get_u16>
 80013d8:	4603      	mov	r3, r0
 80013da:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80013dc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00c      	beq.n	80013fe <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80013e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <CO_NMT_init+0x9c>
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f7ff fee2 	bl	80011b4 <OD_getIndex>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80013f8:	f06f 030b 	mvn.w	r3, #11
 80013fc:	e062      	b.n	80014c4 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80013fe:	8abb      	ldrh	r3, [r7, #20]
 8001400:	461a      	mov	r2, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fb03 f202 	mul.w	r2, r3, r2
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <CO_NMT_init+0x170>)
 8001418:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <CO_NMT_init+0x174>)
 800141e:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3310      	adds	r3, #16
 8001424:	4619      	mov	r1, r3
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f7ff fed5 	bl	80011d6 <OD_extension_init>
 800142c:	4603      	mov	r3, r0
 800142e:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001430:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00c      	beq.n	8001452 <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <CO_NMT_init+0xf0>
 800143e:	68b8      	ldr	r0, [r7, #8]
 8001440:	f7ff feb8 	bl	80011b4 <OD_getIndex>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800144a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800144c:	f06f 030b 	mvn.w	r3, #11
 8001450:	e038      	b.n	80014c4 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	429a      	cmp	r2, r3
 800145c:	d903      	bls.n	8001466 <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001466:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001468:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <CO_NMT_init+0x178>)
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800147a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800147c:	f004 fe30 	bl	80060e0 <CO_CANrxBufferInit>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <CO_NMT_init+0x136>
        return ret;
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001490:	e018      	b.n	80014c4 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001498:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800149a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800149c:	2300      	movs	r3, #0
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014a8:	f004 fe76 	bl	8006198 <CO_CANtxBufferInit>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e001      	b.n	80014c4 <CO_NMT_init+0x168>
    }

    return ret;
 80014c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	080016b5 	.word	0x080016b5
 80014d0:	080012f1 	.word	0x080012f1
 80014d4:	080012a3 	.word	0x080012a3

080014d8 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80014f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d204      	bcs.n	8001514 <CO_NMT_process+0x3c>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	e000      	b.n	8001516 <CO_NMT_process+0x3e>
 8001514:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10e      	bne.n	800153e <CO_NMT_process+0x66>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d029      	beq.n	800157c <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001536:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800153a:	429a      	cmp	r2, r3
 800153c:	d01e      	beq.n	800157c <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	7ffa      	ldrb	r2, [r7, #31]
 8001544:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f004 fee7 	bl	8006324 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10a      	bne.n	8001574 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	889b      	ldrh	r3, [r3, #4]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <CO_NMT_process+0x96>
 800156a:	2305      	movs	r3, #5
 800156c:	e000      	b.n	8001570 <CO_NMT_process+0x98>
 800156e:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001570:	77fb      	strb	r3, [r7, #31]
 8001572:	e003      	b.n	800157c <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d025      	beq.n	80015d6 <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	789b      	ldrb	r3, [r3, #2]
 800158e:	2b82      	cmp	r3, #130	; 0x82
 8001590:	d01a      	beq.n	80015c8 <CO_NMT_process+0xf0>
 8001592:	2b82      	cmp	r3, #130	; 0x82
 8001594:	dc1b      	bgt.n	80015ce <CO_NMT_process+0xf6>
 8001596:	2b81      	cmp	r3, #129	; 0x81
 8001598:	d013      	beq.n	80015c2 <CO_NMT_process+0xea>
 800159a:	2b81      	cmp	r3, #129	; 0x81
 800159c:	dc17      	bgt.n	80015ce <CO_NMT_process+0xf6>
 800159e:	2b80      	cmp	r3, #128	; 0x80
 80015a0:	d00c      	beq.n	80015bc <CO_NMT_process+0xe4>
 80015a2:	2b80      	cmp	r3, #128	; 0x80
 80015a4:	dc13      	bgt.n	80015ce <CO_NMT_process+0xf6>
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d002      	beq.n	80015b0 <CO_NMT_process+0xd8>
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d003      	beq.n	80015b6 <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80015ae:	e00e      	b.n	80015ce <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 80015b0:	2305      	movs	r3, #5
 80015b2:	77fb      	strb	r3, [r7, #31]
                break;
 80015b4:	e00c      	b.n	80015d0 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 80015b6:	2304      	movs	r3, #4
 80015b8:	77fb      	strb	r3, [r7, #31]
                break;
 80015ba:	e009      	b.n	80015d0 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 80015bc:	237f      	movs	r3, #127	; 0x7f
 80015be:	77fb      	strb	r3, [r7, #31]
                break;
 80015c0:	e006      	b.n	80015d0 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	77bb      	strb	r3, [r7, #30]
                break;
 80015c6:	e003      	b.n	80015d0 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 80015c8:	2301      	movs	r3, #1
 80015ca:	77bb      	strb	r3, [r7, #30]
                break;
 80015cc:	e000      	b.n	80015d0 <CO_NMT_process+0xf8>
                break;
 80015ce:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	889b      	ldrh	r3, [r3, #4]
 80015da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01c      	beq.n	800161c <CO_NMT_process+0x144>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	2112      	movs	r1, #18
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fe1d 	bl	8001228 <CO_isError>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d111      	bne.n	8001618 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	211b      	movs	r1, #27
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe14 	bl	8001228 <CO_isError>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d108      	bne.n	8001618 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	211c      	movs	r1, #28
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe0b 	bl	8001228 <CO_isError>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <CO_NMT_process+0x146>
 800161c:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 800161e:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00d      	beq.n	8001648 <CO_NMT_process+0x170>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe20 	bl	8001276 <CO_getErrorRegister>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	889b      	ldrh	r3, [r3, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <CO_NMT_process+0x170>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <CO_NMT_process+0x172>
 8001648:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 800164a:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 800164c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d110      	bne.n	8001676 <CO_NMT_process+0x19e>
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <CO_NMT_process+0x188>
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00a      	beq.n	8001676 <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	889b      	ldrh	r3, [r3, #4]
 8001664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <CO_NMT_process+0x198>
 800166c:	2304      	movs	r3, #4
 800166e:	e000      	b.n	8001672 <CO_NMT_process+0x19a>
 8001670:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001672:	77fb      	strb	r3, [r7, #31]
 8001674:	e010      	b.n	8001698 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	889b      	ldrh	r3, [r3, #4]
 800167a:	b21b      	sxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	da0b      	bge.n	8001698 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8001680:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001684:	2b7f      	cmp	r3, #127	; 0x7f
 8001686:	d107      	bne.n	8001698 <CO_NMT_process+0x1c0>
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <CO_NMT_process+0x1c0>
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001694:	2305      	movs	r3, #5
 8001696:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	7ffa      	ldrb	r2, [r7, #31]
 800169c:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <CO_NMT_process+0x1d2>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	7ffa      	ldrb	r2, [r7, #31]
 80016a8:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 80016aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <OD_readOriginal+0x20>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <OD_readOriginal+0x20>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80016d4:	2309      	movs	r3, #9
 80016d6:	e041      	b.n	800175c <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80016ea:	230e      	movs	r3, #14
 80016ec:	e036      	b.n	800175c <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <OD_readOriginal+0x4e>
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d922      	bls.n	8001748 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	d801      	bhi.n	8001710 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 800170c:	2309      	movs	r3, #9
 800170e:	e025      	b.n	800175c <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4413      	add	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	d90a      	bls.n	8001742 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	441a      	add	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 800173c:	23ff      	movs	r3, #255	; 0xff
 800173e:	75fb      	strb	r3, [r7, #23]
 8001740:	e002      	b.n	8001748 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	69b9      	ldr	r1, [r7, #24]
 800174c:	68b8      	ldr	r0, [r7, #8]
 800174e:	f025 fd8d 	bl	802726c <memcpy>

    *countRead = dataLenToCopy;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001758:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <OD_writeOriginal+0x20>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <OD_writeOriginal+0x20>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001784:	2309      	movs	r3, #9
 8001786:	e047      	b.n	8001818 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 800179a:	230e      	movs	r3, #14
 800179c:	e03c      	b.n	8001818 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <OD_writeOriginal+0x4e>
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d922      	bls.n	80017f8 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d801      	bhi.n	80017c0 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80017bc:	2309      	movs	r3, #9
 80017be:	e02b      	b.n	8001818 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4413      	add	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d90a      	bls.n	80017f2 <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	441a      	add	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80017ec:	23ff      	movs	r3, #255	; 0xff
 80017ee:	75fb      	strb	r3, [r7, #23]
 80017f0:	e002      	b.n	80017f8 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d201      	bcs.n	8001804 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001800:	230c      	movs	r3, #12
 8001802:	e009      	b.n	8001818 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f025 fd2f 	bl	802726c <memcpy>

    *countWritten = dataLenToCopy;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 800182e:	2302      	movs	r3, #2
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 800184a:	2302      	movs	r3, #2
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <OD_find+0x1a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <OD_find+0x1e>
        return NULL;
 8001872:	2300      	movs	r3, #0
 8001874:	e046      	b.n	8001904 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001882:	e026      	b.n	80018d2 <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001884:	8afa      	ldrh	r2, [r7, #22]
 8001886:	8abb      	ldrh	r3, [r7, #20]
 8001888:	4413      	add	r3, r2
 800188a:	105b      	asrs	r3, r3, #1
 800188c:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	89fa      	ldrh	r2, [r7, #14]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d101      	bne.n	80018ae <OD_find+0x56>
            return entry;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	e02a      	b.n	8001904 <OD_find+0xac>
        }

        if (index < entry->index) {
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d209      	bcs.n	80018cc <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <OD_find+0x6e>
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	e000      	b.n	80018c8 <OD_find+0x70>
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	82bb      	strh	r3, [r7, #20]
 80018ca:	e002      	b.n	80018d2 <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	3301      	adds	r3, #1
 80018d0:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 80018d2:	8afa      	ldrh	r2, [r7, #22]
 80018d4:	8abb      	ldrh	r3, [r7, #20]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3d4      	bcc.n	8001884 <OD_find+0x2c>
        }
    }

    if (min == max) {
 80018da:	8afa      	ldrh	r2, [r7, #22]
 80018dc:	8abb      	ldrh	r3, [r7, #20]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d10f      	bne.n	8001902 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	8afa      	ldrh	r2, [r7, #22]
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	887a      	ldrh	r2, [r7, #2]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d101      	bne.n	8001902 <OD_find+0xaa>
            return entry;
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	e000      	b.n	8001904 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001910:	b480      	push	{r7}
 8001912:	b08d      	sub	sp, #52	; 0x34
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	460b      	mov	r3, r1
 800191e:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <OD_getSub+0x1e>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <OD_getSub+0x22>
 800192e:	2305      	movs	r3, #5
 8001930:	e0d2      	b.n	8001ad8 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <OD_getSub+0x2c>
 8001938:	2309      	movs	r3, #9
 800193a:	e0cd      	b.n	8001ad8 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	78db      	ldrb	r3, [r3, #3]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	2b03      	cmp	r3, #3
 800194a:	d050      	beq.n	80019ee <OD_getSub+0xde>
 800194c:	2b03      	cmp	r3, #3
 800194e:	f300 808c 	bgt.w	8001a6a <OD_getSub+0x15a>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d002      	beq.n	800195c <OD_getSub+0x4c>
 8001956:	2b02      	cmp	r3, #2
 8001958:	d015      	beq.n	8001986 <OD_getSub+0x76>
 800195a:	e086      	b.n	8001a6a <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <OD_getSub+0x56>
 8001962:	230e      	movs	r3, #14
 8001964:	e0b8      	b.n	8001ad8 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	791a      	ldrb	r2, [r3, #4]
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	609a      	str	r2, [r3, #8]
        break;
 8001984:	e073      	b.n	8001a6e <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	789b      	ldrb	r3, [r3, #2]
 800198a:	7afa      	ldrb	r2, [r7, #11]
 800198c:	429a      	cmp	r2, r3
 800198e:	d301      	bcc.n	8001994 <OD_getSub+0x84>
 8001990:	230e      	movs	r3, #14
 8001992:	e0a1      	b.n	8001ad8 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	7a1a      	ldrb	r2, [r3, #8]
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	2201      	movs	r2, #1
 80019b4:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 80019b6:	e05a      	b.n	8001a6e <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	7a5a      	ldrb	r2, [r3, #9]
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	7afa      	ldrb	r2, [r7, #11]
 80019d2:	3a01      	subs	r2, #1
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4413      	add	r3, r2
 80019dc:	e000      	b.n	80019e0 <OD_getSub+0xd0>
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e2:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	609a      	str	r2, [r3, #8]
        break;
 80019ec:	e03f      	b.n	8001a6e <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019fe:	e01c      	b.n	8001a3a <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001a00:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	4413      	add	r3, r2
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	7afa      	ldrb	r2, [r7, #11]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10a      	bne.n	8001a30 <OD_getSub+0x120>
                odo = &odoArr[i];
 8001a1a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8001a2e:	e00a      	b.n	8001a46 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001a30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a34:	3301      	adds	r3, #1
 8001a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3dc      	bcc.n	8001a00 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <OD_getSub+0x140>
 8001a4c:	230e      	movs	r3, #14
 8001a4e:	e043      	b.n	8001ad8 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8001a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a52:	795a      	ldrb	r2, [r3, #5]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	609a      	str	r2, [r3, #8]
        break;
 8001a68:	e001      	b.n	8001a6e <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	e034      	b.n	8001ad8 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <OD_getSub+0x16c>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <OD_getSub+0x1d4>)
 8001a80:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <OD_getSub+0x1d8>)
 8001a86:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	e01c      	b.n	8001aca <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <OD_getSub+0x192>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	e000      	b.n	8001aa4 <OD_getSub+0x194>
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <OD_getSub+0x1aa>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	e000      	b.n	8001abc <OD_getSub+0x1ac>
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	7afa      	ldrb	r2, [r7, #11]
 8001ad4:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3734      	adds	r7, #52	; 0x34
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	080016b5 	.word	0x080016b5
 8001ae8:	08001765 	.word	0x08001765
 8001aec:	08001821 	.word	0x08001821
 8001af0:	0800183d 	.word	0x0800183d

08001af4 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db03      	blt.n	8001b0e <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b19      	cmp	r3, #25
 8001b0c:	dd02      	ble.n	8001b14 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <OD_getSDOabCode+0x38>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	e004      	b.n	8001b1e <OD_getSDOabCode+0x2a>
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <OD_getSDOabCode+0x38>)
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	0802b2fc 	.word	0x0802b2fc

08001b30 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b08f      	sub	sp, #60	; 0x3c
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <OD_get_value+0x1a>
 8001b46:	2309      	movs	r3, #9
 8001b48:	e024      	b.n	8001b94 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001b54:	f107 0214 	add.w	r2, r7, #20
 8001b58:	7af9      	ldrb	r1, [r7, #11]
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fed7 	bl	8001910 <OD_getSub>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001b68:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <OD_get_value+0x46>
 8001b70:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001b74:	e00e      	b.n	8001b94 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <OD_get_value+0x54>
 8001b80:	230b      	movs	r3, #11
 8001b82:	e007      	b.n	8001b94 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001b84:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b90:	47a0      	blx	r4
 8001b92:	4603      	mov	r3, r0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	373c      	adds	r7, #60	; 0x3c
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}

08001b9c <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b08f      	sub	sp, #60	; 0x3c
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001bb6:	f107 0214 	add.w	r2, r7, #20
 8001bba:	7af9      	ldrb	r1, [r7, #11]
 8001bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fea6 	bl	8001910 <OD_getSub>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001bca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <OD_set_value+0x3c>
 8001bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001bd6:	e00e      	b.n	8001bf6 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <OD_set_value+0x4a>
 8001be2:	230b      	movs	r3, #11
 8001be4:	e007      	b.n	8001bf6 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001be6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001bf2:	47a0      	blx	r4
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	373c      	adds	r7, #60	; 0x3c
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}

08001bfe <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b08e      	sub	sp, #56	; 0x38
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001c14:	f107 0214 	add.w	r2, r7, #20
 8001c18:	7af9      	ldrb	r1, [r7, #11]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff fe77 	bl	8001910 <OD_getSub>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001c28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d116      	bne.n	8001c5e <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <OD_getPtr+0x42>
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001c40:	2309      	movs	r3, #9
 8001c42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c46:	e00a      	b.n	8001c5e <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <OD_getPtr+0x60>
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d002      	beq.n	8001c5e <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001c58:	230b      	movs	r3, #11
 8001c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <OD_getPtr+0x6e>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c6a:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001c6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <OD_getPtr+0x7c>
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e000      	b.n	8001c7c <OD_getPtr+0x7e>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3738      	adds	r7, #56	; 0x38
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001cae:	81fb      	strh	r3, [r7, #14]
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
 8001ce4:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	2304      	movs	r3, #4
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <OD_getIndex+0x14>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	e000      	b.n	8001d0e <OD_getIndex+0x16>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <OD_extension_init>:
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <OD_extension_init+0x14>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e003      	b.n	8001d36 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <OD_get_u8>:
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af02      	add	r7, sp, #8
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001d52:	7af9      	ldrb	r1, [r7, #11]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fee7 	bl	8001b30 <OD_get_value>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <OD_get_u16>:
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001d7c:	7af9      	ldrb	r1, [r7, #11]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7ff fed2 	bl	8001b30 <OD_get_value>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <OD_get_u32>:
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af02      	add	r7, sp, #8
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	460b      	mov	r3, r1
 8001da4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001da6:	7af9      	ldrb	r1, [r7, #11]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2304      	movs	r3, #4
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff febd 	bl	8001b30 <OD_get_value>
 8001db6:	4603      	mov	r3, r0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <OD_write_dummy+0x1a>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <OD_read_dummy+0x20>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <OD_read_dummy+0x20>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001e08:	2309      	movs	r3, #9
 8001e0a:	e010      	b.n	8001e2e <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d902      	bls.n	8001e1c <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	2100      	movs	r1, #0
 8001e20:	68b8      	ldr	r0, [r7, #8]
 8001e22:	f025 fa4b 	bl	80272bc <memset>

    *countRead = count;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b092      	sub	sp, #72	; 0x48
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8001e5e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	3310      	adds	r3, #16
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8001e7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d901      	bls.n	8001e86 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8001e82:	2307      	movs	r3, #7
 8001e84:	e090      	b.n	8001fa8 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8001e86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001e8a:	2b1f      	cmp	r3, #31
 8001e8c:	d81a      	bhi.n	8001ec4 <PDOconfigMap+0x8c>
 8001e8e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8001e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8001e9a:	2214      	movs	r2, #20
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ea0:	f025 fa0c 	bl	80272bc <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8001ea4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb2:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8001eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <PDOconfigMap+0x178>)
 8001eb8:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8001eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ebc:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <PDOconfigMap+0x17c>)
 8001ebe:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e071      	b.n	8001fa8 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8001ec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ecc:	f7ff fcc4 	bl	8001858 <OD_find>
 8001ed0:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8001ed2:	f107 0214 	add.w	r2, r7, #20
 8001ed6:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8001eda:	2300      	movs	r3, #0
 8001edc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ede:	f7ff fd17 	bl	8001910 <OD_getSub>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8001ee8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <PDOconfigMap+0xbe>
        return odRet;
 8001ef0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ef4:	e058      	b.n	8001fa8 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <PDOconfigMap+0xc8>
 8001efc:	2308      	movs	r3, #8
 8001efe:	e000      	b.n	8001f02 <PDOconfigMap+0xca>
 8001f00:	2304      	movs	r3, #4
 8001f02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8001f06:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 8001f16:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d104      	bne.n	8001f2c <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d201      	bcs.n	8001f30 <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	e03b      	b.n	8001fa8 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8001f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f32:	461d      	mov	r5, r3
 8001f34:	f107 0414 	add.w	r4, r7, #20
 8001f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8001f44:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4a:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d129      	bne.n	8001fa6 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8001f52:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001f56:	2b1f      	cmp	r3, #31
 8001f58:	d81f      	bhi.n	8001f9a <PDOconfigMap+0x162>
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01b      	beq.n	8001f9a <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 8001f6e:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8001f70:	3308      	adds	r3, #8
 8001f72:	440b      	add	r3, r1
 8001f74:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	323c      	adds	r2, #60	; 0x3c
 8001f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 8001f7e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	2201      	movs	r2, #1
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	b2d1      	uxtb	r1, r2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	460a      	mov	r2, r1
 8001f94:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8001f98:	e005      	b.n	8001fa6 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8001f9a:	79fa      	ldrb	r2, [r7, #7]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	323c      	adds	r2, #60	; 0x3c
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3748      	adds	r7, #72	; 0x48
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	08001de9 	.word	0x08001de9
 8001fb4:	08001dc1 	.word	0x08001dc1

08001fb8 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8001fce:	f107 021b 	add.w	r2, r7, #27
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff feb3 	bl	8001d42 <OD_get_u8>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8001fe2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00c      	beq.n	8002004 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fe81 	bl	8001cf8 <OD_getIndex>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	021a      	lsls	r2, r3, #8
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001ffe:	f06f 030b 	mvn.w	r3, #11
 8002002:	e082      	b.n	800210a <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800200a:	e05e      	b.n	80020ca <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800200c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3310      	adds	r3, #16
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8002024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002028:	3301      	adds	r3, #1
 800202a:	b2d9      	uxtb	r1, r3
 800202c:	f107 0214 	add.w	r2, r7, #20
 8002030:	2301      	movs	r3, #1
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff feaf 	bl	8001d96 <OD_get_u32>
 8002038:	4603      	mov	r3, r0
 800203a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 800203e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002042:	2b0e      	cmp	r3, #14
 8002044:	d03b      	beq.n	80020be <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8002046:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00f      	beq.n	800206e <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff fe4f 	bl	8001cf8 <OD_getIndex>
 800205a:	4603      	mov	r3, r0
 800205c:	021a      	lsls	r2, r3, #8
 800205e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002062:	431a      	orrs	r2, r3
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002066:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002068:	f06f 030b 	mvn.w	r3, #11
 800206c:	e04d      	b.n	800210a <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800206e:	6979      	ldr	r1, [r7, #20]
 8002070:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff fedc 	bl	8001e38 <PDOconfigMap>
 8002080:	4603      	mov	r3, r0
 8002082:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002086:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <PDO_initMapping+0xf0>
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 80020a8:	7efb      	ldrb	r3, [r7, #27]
 80020aa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d206      	bcs.n	80020c0 <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b8:	4413      	add	r3, r2
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
 80020bc:	e000      	b.n	80020c0 <PDO_initMapping+0x108>
            continue;
 80020be:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c4:	3301      	adds	r3, #1
 80020c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	d99c      	bls.n	800200c <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d805      	bhi.n	80020e4 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <PDO_initMapping+0x13a>
 80020de:	7efb      	ldrb	r3, [r7, #27]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 80020e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <PDO_initMapping+0x13a>
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002102:	7efa      	ldrb	r2, [r7, #27]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3728      	adds	r7, #40	; 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08e      	sub	sp, #56	; 0x38
 8002116:	af02      	add	r7, sp, #8
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <OD_write_PDO_mapping+0x28>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <OD_write_PDO_mapping+0x28>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	7c5b      	ldrb	r3, [r3, #17]
 8002136:	2b08      	cmp	r3, #8
 8002138:	d901      	bls.n	800213e <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 800213a:	2309      	movs	r3, #9
 800213c:	e081      	b.n	8002242 <OD_write_PDO_mapping+0x130>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <OD_write_PDO_mapping+0x4a>
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	7b5b      	ldrb	r3, [r3, #13]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <OD_write_PDO_mapping+0x4e>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	7c5b      	ldrb	r3, [r3, #17]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 800215c:	2302      	movs	r3, #2
 800215e:	e070      	b.n	8002242 <OD_write_PDO_mapping+0x130>
    }

    if (stream->subIndex == 0) {
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	7c5b      	ldrb	r3, [r3, #17]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d148      	bne.n	80021fa <OD_write_PDO_mapping+0xe8>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002168:	68b8      	ldr	r0, [r7, #8]
 800216a:	f7ff fd8b 	bl	8001c84 <CO_getUint8>
 800216e:	4603      	mov	r3, r0
 8002170:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002176:	7fbb      	ldrb	r3, [r7, #30]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d901      	bls.n	8002180 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 800217c:	2307      	movs	r3, #7
 800217e:	e060      	b.n	8002242 <OD_write_PDO_mapping+0x130>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002180:	2300      	movs	r3, #0
 8002182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002186:	e01e      	b.n	80021c6 <OD_write_PDO_mapping+0xb4>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002188:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	3310      	adds	r3, #16
 8002196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002198:	4413      	add	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d901      	bls.n	80021b4 <OD_write_PDO_mapping+0xa2>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80021b0:	2306      	movs	r3, #6
 80021b2:	e046      	b.n	8002242 <OD_write_PDO_mapping+0x130>
            }
            pdoDataLength += mappedLength;
 80021b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80021bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021c0:	3301      	adds	r3, #1
 80021c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021c6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80021ca:	7fbb      	ldrb	r3, [r7, #30]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3db      	bcc.n	8002188 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d901      	bls.n	80021da <OD_write_PDO_mapping+0xc8>
            return ODR_MAP_LEN;
 80021d6:	2307      	movs	r3, #7
 80021d8:	e033      	b.n	8002242 <OD_write_PDO_mapping+0x130>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d104      	bne.n	80021ea <OD_write_PDO_mapping+0xd8>
 80021e0:	7fbb      	ldrb	r3, [r7, #30]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <OD_write_PDO_mapping+0xd8>
            return ODR_INVALID_VALUE;
 80021e6:	230f      	movs	r3, #15
 80021e8:	e02b      	b.n	8002242 <OD_write_PDO_mapping+0x130>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	7fba      	ldrb	r2, [r7, #30]
 80021f6:	735a      	strb	r2, [r3, #13]
 80021f8:	e01c      	b.n	8002234 <OD_write_PDO_mapping+0x122>
    }
    else {
        uint32_t val = CO_getUint32(buf);
 80021fa:	68b8      	ldr	r0, [r7, #8]
 80021fc:	f7ff fd5f 	bl	8001cbe <CO_getUint32>
 8002200:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex-1,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	7c5b      	ldrb	r3, [r3, #17]
 8002206:	3b01      	subs	r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	460b      	mov	r3, r1
 800221a:	6a39      	ldr	r1, [r7, #32]
 800221c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800221e:	f7ff fe0b 	bl	8001e38 <PDOconfigMap>
 8002222:	4603      	mov	r3, r0
 8002224:	77fb      	strb	r3, [r7, #31]
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8002226:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <OD_write_PDO_mapping+0x122>
            return odRet;
 800222e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002232:	e006      	b.n	8002242 <OD_write_PDO_mapping+0x130>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff fa92 	bl	8001764 <OD_writeOriginal>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3730      	adds	r7, #48	; 0x30
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fa27 	bl	80016b4 <OD_readOriginal>
 8002266:	4603      	mov	r3, r0
 8002268:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 800226a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d134      	bne.n	80022dc <OD_read_PDO_commParam+0x90>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	7c5b      	ldrb	r3, [r3, #17]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d130      	bne.n	80022dc <OD_read_PDO_commParam+0x90>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d12c      	bne.n	80022dc <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f7ff fd18 	bl	8001cbe <CO_getUint32>
 800228e:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	b29b      	uxth	r3, r3
 8002294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002298:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 800229a:	8a7b      	ldrh	r3, [r7, #18]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d011      	beq.n	80022c4 <OD_read_PDO_commParam+0x78>
 80022a0:	8a7a      	ldrh	r2, [r7, #18]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 80022a8:	4619      	mov	r1, r3
 80022aa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80022ae:	400b      	ands	r3, r1
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <OD_read_PDO_commParam+0x9c>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <OD_read_PDO_commParam+0x88>
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d2:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 80022d4:	69f9      	ldr	r1, [r7, #28]
 80022d6:	68b8      	ldr	r0, [r7, #8]
 80022d8:	f7ff fcff 	bl	8001cda <CO_setUint32>
    }

    return returnCode;
 80022dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	ffff0000 	.word	0xffff0000

080022ec <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b093      	sub	sp, #76	; 0x4c
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <OD_write_18xx+0x26>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <OD_write_18xx+0x26>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <OD_write_18xx+0x26>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d901      	bls.n	8002316 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002312:	2309      	movs	r3, #9
 8002314:	e136      	b.n	8002584 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	4618      	mov	r0, r3
 800232a:	f024 ff9f 	bl	802726c <memcpy>

    switch (stream->subIndex) {
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	7c5b      	ldrb	r3, [r3, #17]
 8002332:	3b01      	subs	r3, #1
 8002334:	2b05      	cmp	r3, #5
 8002336:	f200 811d 	bhi.w	8002574 <OD_write_18xx+0x288>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <OD_write_18xx+0x54>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002359 	.word	0x08002359
 8002344:	0800248f 	.word	0x0800248f
 8002348:	080024f5 	.word	0x080024f5
 800234c:	08002575 	.word	0x08002575
 8002350:	08002523 	.word	0x08002523
 8002354:	08002547 	.word	0x08002547
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002358:	68b8      	ldr	r0, [r7, #8]
 800235a:	f7ff fcb0 	bl	8001cbe <CO_getUint32>
 800235e:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002368:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	43db      	mvns	r3, r3
 800236e:	0fdb      	lsrs	r3, r3, #31
 8002370:	b2db      	uxtb	r3, r3
 8002372:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	4b85      	ldr	r3, [pc, #532]	; (800258c <OD_write_18xx+0x2a0>)
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d13d      	bne.n	80023fa <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <OD_write_18xx+0xac>
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <OD_write_18xx+0xac>
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002392:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002394:	429a      	cmp	r2, r3
 8002396:	d130      	bne.n	80023fa <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d026      	beq.n	80023ec <OD_write_18xx+0x100>
 800239e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023a0:	2b7f      	cmp	r3, #127	; 0x7f
 80023a2:	d92a      	bls.n	80023fa <OD_write_18xx+0x10e>
 80023a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023aa:	d903      	bls.n	80023b4 <OD_write_18xx+0xc8>
 80023ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023ae:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80023b2:	d922      	bls.n	80023fa <OD_write_18xx+0x10e>
 80023b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023b6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80023ba:	d903      	bls.n	80023c4 <OD_write_18xx+0xd8>
 80023bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023c2:	d31a      	bcc.n	80023fa <OD_write_18xx+0x10e>
 80023c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023ca:	d903      	bls.n	80023d4 <OD_write_18xx+0xe8>
 80023cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023ce:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80023d2:	d312      	bcc.n	80023fa <OD_write_18xx+0x10e>
 80023d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023d6:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80023da:	d303      	bcc.n	80023e4 <OD_write_18xx+0xf8>
 80023dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023e2:	d30a      	bcc.n	80023fa <OD_write_18xx+0x10e>
 80023e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80023e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023ea:	d806      	bhi.n	80023fa <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <OD_write_18xx+0x112>
 80023f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f4:	7b5b      	ldrb	r3, [r3, #13]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 80023fa:	230f      	movs	r3, #15
 80023fc:	e0c2      	b.n	8002584 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80023fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	429a      	cmp	r2, r3
 8002406:	d106      	bne.n	8002416 <OD_write_18xx+0x12a>
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800240e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002410:	429a      	cmp	r2, r3
 8002412:	f000 80ae 	beq.w	8002572 <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800241c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800241e:	429a      	cmp	r2, r3
 8002420:	d108      	bne.n	8002434 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fc53 	bl	8001cda <CO_setUint32>
            }
            if (!valid) {
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <OD_write_18xx+0x152>
                CAN_ID = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 800243e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002440:	6858      	ldr	r0, [r3, #4]
 8002442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002444:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 800244c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800244e:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002452:	2af0      	cmp	r2, #240	; 0xf0
 8002454:	bf94      	ite	ls
 8002456:	2201      	movls	r2, #1
 8002458:	2200      	movhi	r2, #0
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	4614      	mov	r4, r2
 800245e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002460:	9401      	str	r4, [sp, #4]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	f003 fe97 	bl	8006198 <CO_CANtxBufferInit>
 800246a:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8002472:	2309      	movs	r3, #9
 8002474:	e086      	b.n	8002584 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002488:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 800248c:	e071      	b.n	8002572 <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800248e:	68b8      	ldr	r0, [r7, #8]
 8002490:	f7ff fbf8 	bl	8001c84 <CO_getUint8>
 8002494:	4603      	mov	r3, r0
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800249a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249e:	2bf0      	cmp	r3, #240	; 0xf0
 80024a0:	d905      	bls.n	80024ae <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80024a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a6:	2bfd      	cmp	r3, #253	; 0xfd
 80024a8:	d801      	bhi.n	80024ae <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 80024aa:	230f      	movs	r3, #15
 80024ac:	e06a      	b.n	8002584 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80024ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024b2:	2bf0      	cmp	r3, #240	; 0xf0
 80024b4:	bf94      	ite	ls
 80024b6:	2301      	movls	r3, #1
 80024b8:	2300      	movhi	r3, #0
 80024ba:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80024c2:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	22ff      	movs	r2, #255	; 0xff
 80024c8:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024d2:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	2201      	movs	r2, #1
 80024da:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80024e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 80024f2:	e03f      	b.n	8002574 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 80024fc:	230f      	movs	r3, #15
 80024fe:	e041      	b.n	8002584 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002500:	68b8      	ldr	r0, [r7, #8]
 8002502:	f7ff fbcd 	bl	8001ca0 <CO_getUint16>
 8002506:	4603      	mov	r3, r0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	2264      	movs	r2, #100	; 0x64
 800250e:	fb03 f202 	mul.w	r2, r3, r2
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	2200      	movs	r2, #0
 800251c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 8002520:	e028      	b.n	8002574 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002522:	68b8      	ldr	r0, [r7, #8]
 8002524:	f7ff fbbc 	bl	8001ca0 <CO_getUint16>
 8002528:	4603      	mov	r3, r0
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	2200      	movs	r2, #0
 8002540:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 8002544:	e016      	b.n	8002574 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8002546:	68b8      	ldr	r0, [r7, #8]
 8002548:	f7ff fb9c 	bl	8001c84 <CO_getUint8>
 800254c:	4603      	mov	r3, r0
 800254e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <OD_write_18xx+0x276>
 800255a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800255e:	2bf0      	cmp	r3, #240	; 0xf0
 8002560:	d901      	bls.n	8002566 <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8002562:	230f      	movs	r3, #15
 8002564:	e00e      	b.n	8002584 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800256c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 8002570:	e000      	b.n	8002574 <OD_write_18xx+0x288>
        break;
 8002572:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002574:	f107 0114 	add.w	r1, r7, #20
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff f8f1 	bl	8001764 <OD_writeOriginal>
 8002582:	4603      	mov	r3, r0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3744      	adds	r7, #68	; 0x44
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	3ffff800 	.word	0x3ffff800

08002590 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00e      	beq.n	80025c6 <CO_TPDO_init+0x36>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <CO_TPDO_init+0x36>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <CO_TPDO_init+0x36>
 80025b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <CO_TPDO_init+0x36>
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e14d      	b.n	8002868 <CO_TPDO_init+0x2d8>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 80025cc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80025d0:	2100      	movs	r1, #0
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f024 fe72 	bl	80272bc <memset>

    /* Configure object variables */
    PDO->em = em;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025e2:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2300      	movs	r3, #0
 80025f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025fa:	f7ff fcdd 	bl	8001fb8 <PDO_initMapping>
 80025fe:	4603      	mov	r3, r0
 8002600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002604:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <CO_TPDO_init+0x82>
        return ret;
 800260c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002610:	e12a      	b.n	8002868 <CO_TPDO_init+0x2d8>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002612:	23fe      	movs	r3, #254	; 0xfe
 8002614:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002616:	f107 021b 	add.w	r2, r7, #27
 800261a:	2301      	movs	r3, #1
 800261c:	2102      	movs	r1, #2
 800261e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002620:	f7ff fb8f 	bl	8001d42 <OD_get_u8>
 8002624:	4603      	mov	r3, r0
 8002626:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800262a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00e      	beq.n	8002650 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8002632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8002638:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800263a:	f7ff fb5d 	bl	8001cf8 <OD_getIndex>
 800263e:	4603      	mov	r3, r0
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	f043 0202 	orr.w	r2, r3, #2
 8002646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002648:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800264a:	f06f 030b 	mvn.w	r3, #11
 800264e:	e10b      	b.n	8002868 <CO_TPDO_init+0x2d8>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002650:	7efb      	ldrb	r3, [r7, #27]
 8002652:	2bfd      	cmp	r3, #253	; 0xfd
 8002654:	d804      	bhi.n	8002660 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002656:	7efb      	ldrb	r3, [r7, #27]
 8002658:	2bf0      	cmp	r3, #240	; 0xf0
 800265a:	d901      	bls.n	8002660 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800265c:	23fe      	movs	r3, #254	; 0xfe
 800265e:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8002660:	7efa      	ldrb	r2, [r7, #27]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8002674:	f107 0214 	add.w	r2, r7, #20
 8002678:	2301      	movs	r3, #1
 800267a:	2101      	movs	r1, #1
 800267c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800267e:	f7ff fb8a 	bl	8001d96 <OD_get_u32>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002688:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8002690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8002696:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002698:	f7ff fb2e 	bl	8001cf8 <OD_getIndex>
 800269c:	4603      	mov	r3, r0
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80026a8:	f06f 030b 	mvn.w	r3, #11
 80026ac:	e0dc      	b.n	8002868 <CO_TPDO_init+0x2d8>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	0fdb      	lsrs	r3, r3, #31
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c0:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <CO_TPDO_init+0x154>
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	7b5b      	ldrb	r3, [r3, #13]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <CO_TPDO_init+0x146>
 80026d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <CO_TPDO_init+0x154>
        valid = false;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <CO_TPDO_init+0x154>
 80026e0:	2301      	movs	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00e      	beq.n	8002708 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d001      	beq.n	80026f8 <CO_TPDO_init+0x168>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	e000      	b.n	80026fa <CO_TPDO_init+0x16a>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002700:	221a      	movs	r2, #26
 8002702:	2101      	movs	r1, #1
 8002704:	f7fe f9c4 	bl	8000a90 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <CO_TPDO_init+0x19a>
 8002718:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800271a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800271c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002720:	400b      	ands	r3, r1
 8002722:	429a      	cmp	r2, r3
 8002724:	d101      	bne.n	800272a <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8002726:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002728:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8002734:	2af0      	cmp	r2, #240	; 0xf0
 8002736:	bf94      	ite	ls
 8002738:	2201      	movls	r2, #1
 800273a:	2200      	movhi	r2, #0
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	4610      	mov	r0, r2
 8002740:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002742:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8002746:	9001      	str	r0, [sp, #4]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800274e:	f003 fd23 	bl	8006198 <CO_CANtxBufferInit>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	e07e      	b.n	8002868 <CO_TPDO_init+0x2d8>
    }

    PDO->valid = valid;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276e:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002778:	f107 0212 	add.w	r2, r7, #18
 800277c:	2301      	movs	r3, #1
 800277e:	2103      	movs	r1, #3
 8002780:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002782:	f7ff faf3 	bl	8001d6c <OD_get_u16>
 8002786:	4603      	mov	r3, r0
 8002788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 800278c:	f107 0210 	add.w	r2, r7, #16
 8002790:	2301      	movs	r3, #1
 8002792:	2105      	movs	r1, #5
 8002794:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002796:	f7ff fae9 	bl	8001d6c <OD_get_u16>
 800279a:	4603      	mov	r3, r0
 800279c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100;
 80027a0:	8a7b      	ldrh	r3, [r7, #18]
 80027a2:	461a      	mov	r2, r3
 80027a4:	2364      	movs	r3, #100	; 0x64
 80027a6:	fb03 f202 	mul.w	r2, r3, r2
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000;
 80027b0:	8a3b      	ldrh	r3, [r7, #16]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b8:	fb03 f202 	mul.w	r2, r3, r2
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80027d0:	2301      	movs	r3, #1
 80027d2:	2106      	movs	r1, #6
 80027d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027d6:	f7ff fab4 	bl	8001d42 <OD_get_u8>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	22ff      	movs	r2, #255	; 0xff
 80027ec:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002806:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800280e:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002816:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <CO_TPDO_init+0x2e0>)
 8002826:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <CO_TPDO_init+0x2e4>)
 800282e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <CO_TPDO_init+0x2e8>)
 800283e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <CO_TPDO_init+0x2ec>)
 8002846:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002850:	4619      	mov	r1, r3
 8002852:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002854:	f7ff fa61 	bl	8001d1a <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800285e:	4619      	mov	r1, r3
 8002860:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002862:	f7ff fa5a 	bl	8001d1a <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	0800224d 	.word	0x0800224d
 8002874:	080022ed 	.word	0x080022ed
 8002878:	080016b5 	.word	0x080016b5
 800287c:	08002113 	.word	0x08002113

08002880 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <OD_getIndex+0x14>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	e000      	b.n	80028ce <OD_getIndex+0x16>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <OD_extension_init>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <OD_extension_init+0x14>
 80028ea:	2305      	movs	r3, #5
 80028ec:	e003      	b.n	80028f6 <OD_extension_init+0x1c>
    entry->extension = extension;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <OD_get_u8>:
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af02      	add	r7, sp, #8
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	460b      	mov	r3, r1
 8002910:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002912:	7af9      	ldrb	r1, [r7, #11]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2301      	movs	r3, #1
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff f907 	bl	8001b30 <OD_get_value>
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <OD_get_u32>:
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	460b      	mov	r3, r1
 800293a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800293c:	7af9      	ldrb	r1, [r7, #11]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2304      	movs	r3, #4
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff f8f2 	bl	8001b30 <OD_get_value>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af02      	add	r7, sp, #8
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	460b      	mov	r3, r1
 8002964:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8002966:	1d3a      	adds	r2, r7, #4
 8002968:	7af9      	ldrb	r1, [r7, #11]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2304      	movs	r3, #4
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff f913 	bl	8001b9c <OD_set_value>
 8002976:	4603      	mov	r3, r0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	791b      	ldrb	r3, [r3, #4]
 8002992:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	3305      	adds	r3, #5
 8002998:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d115      	bne.n	80029cc <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d103      	bne.n	80029b0 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 80029ae:	e00d      	b.n	80029cc <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	333c      	adds	r3, #60	; 0x3c
 80029bc:	7cfa      	ldrb	r2, [r7, #19]
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f024 fc53 	bl	802726c <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2201      	movs	r2, #1
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af04      	add	r7, sp, #16
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	460b      	mov	r3, r1
 80029e4:	80fb      	strh	r3, [r7, #6]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d106      	bne.n	8002a02 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d101      	bne.n	8002a02 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e04e      	b.n	8002aa0 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	db02      	blt.n	8002a1a <CO_SDOserver_init_canRxTx+0x46>
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	e000      	b.n	8002a1c <CO_SDOserver_init_canRxTx+0x48>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db02      	blt.n	8002a2a <CO_SDOserver_init_canRxTx+0x56>
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	e000      	b.n	8002a2c <CO_SDOserver_init_canRxTx+0x58>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8002a2e:	8afb      	ldrh	r3, [r7, #22]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <CO_SDOserver_init_canRxTx+0x6e>
 8002a34:	8abb      	ldrh	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	e006      	b.n	8002a50 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002a50:	8afa      	ldrh	r2, [r7, #22]
 8002a52:	88f9      	ldrh	r1, [r7, #6]
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <CO_SDOserver_init_canRxTx+0xd4>)
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002a64:	68b8      	ldr	r0, [r7, #8]
 8002a66:	f003 fb3b 	bl	80060e0 <CO_CANrxBufferInit>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	8aba      	ldrh	r2, [r7, #20]
 8002a74:	88b9      	ldrh	r1, [r7, #4]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f003 fb8a 	bl	8006198 <CO_CANtxBufferInit>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002a92:	23ff      	movs	r3, #255	; 0xff
 8002a94:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8002a9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	08002981 	.word	0x08002981

08002aac <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08f      	sub	sp, #60	; 0x3c
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <OD_write_1201_additional+0x20>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <OD_write_1201_additional+0x20>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8002acc:	2309      	movs	r3, #9
 8002ace:	e0f9      	b.n	8002cc4 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	7c5b      	ldrb	r3, [r3, #17]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	f200 80e8 	bhi.w	8002cb0 <OD_write_1201_additional+0x204>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <OD_write_1201_additional+0x3c>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002bc1 	.word	0x08002bc1
 8002af4:	08002c87 	.word	0x08002c87
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 8002af8:	2304      	movs	r3, #4
 8002afa:	e0e3      	b.n	8002cc4 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8002afc:	68b8      	ldr	r0, [r7, #8]
 8002afe:	f7ff fecd 	bl	800289c <CO_getUint32>
 8002b02:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0c:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b18:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	0fdb      	lsrs	r3, r3, #31
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4b69      	ldr	r3, [pc, #420]	; (8002ccc <OD_write_1201_additional+0x220>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d134      	bne.n	8002b98 <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <OD_write_1201_additional+0x98>
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <OD_write_1201_additional+0x98>
 8002b3c:	8afa      	ldrh	r2, [r7, #22]
 8002b3e:	8abb      	ldrh	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d129      	bne.n	8002b98 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d028      	beq.n	8002b9c <OD_write_1201_additional+0xf0>
 8002b4a:	8afb      	ldrh	r3, [r7, #22]
 8002b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b4e:	d923      	bls.n	8002b98 <OD_write_1201_additional+0xec>
 8002b50:	8afb      	ldrh	r3, [r7, #22]
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d903      	bls.n	8002b60 <OD_write_1201_additional+0xb4>
 8002b58:	8afb      	ldrh	r3, [r7, #22]
 8002b5a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002b5e:	d91b      	bls.n	8002b98 <OD_write_1201_additional+0xec>
 8002b60:	8afb      	ldrh	r3, [r7, #22]
 8002b62:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002b66:	d903      	bls.n	8002b70 <OD_write_1201_additional+0xc4>
 8002b68:	8afb      	ldrh	r3, [r7, #22]
 8002b6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b6e:	d313      	bcc.n	8002b98 <OD_write_1201_additional+0xec>
 8002b70:	8afb      	ldrh	r3, [r7, #22]
 8002b72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b76:	d903      	bls.n	8002b80 <OD_write_1201_additional+0xd4>
 8002b78:	8afb      	ldrh	r3, [r7, #22]
 8002b7a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002b7e:	d30b      	bcc.n	8002b98 <OD_write_1201_additional+0xec>
 8002b80:	8afb      	ldrh	r3, [r7, #22]
 8002b82:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002b86:	d303      	bcc.n	8002b90 <OD_write_1201_additional+0xe4>
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b8e:	d303      	bcc.n	8002b98 <OD_write_1201_additional+0xec>
 8002b90:	8afb      	ldrh	r3, [r7, #22]
 8002b92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b96:	d901      	bls.n	8002b9c <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 8002b98:	230f      	movs	r3, #15
 8002b9a:	e093      	b.n	8002cc4 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bba:	f7ff ff0b 	bl	80029d4 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8002bbe:	e07a      	b.n	8002cb6 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8002bc0:	68b8      	ldr	r0, [r7, #8]
 8002bc2:	f7ff fe6b 	bl	800289c <CO_getUint32>
 8002bc6:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd0:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bdc:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	43db      	mvns	r3, r3
 8002be2:	0fdb      	lsrs	r3, r3, #31
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <OD_write_1201_additional+0x220>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d134      	bne.n	8002c5c <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <OD_write_1201_additional+0x15c>
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <OD_write_1201_additional+0x15c>
 8002c00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002c02:	8c3b      	ldrh	r3, [r7, #32]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d129      	bne.n	8002c5c <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d028      	beq.n	8002c60 <OD_write_1201_additional+0x1b4>
 8002c0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c10:	2b7f      	cmp	r3, #127	; 0x7f
 8002c12:	d923      	bls.n	8002c5c <OD_write_1201_additional+0x1b0>
 8002c14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1a:	d903      	bls.n	8002c24 <OD_write_1201_additional+0x178>
 8002c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c1e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c22:	d91b      	bls.n	8002c5c <OD_write_1201_additional+0x1b0>
 8002c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c26:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002c2a:	d903      	bls.n	8002c34 <OD_write_1201_additional+0x188>
 8002c2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c32:	d313      	bcc.n	8002c5c <OD_write_1201_additional+0x1b0>
 8002c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c3a:	d903      	bls.n	8002c44 <OD_write_1201_additional+0x198>
 8002c3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c3e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002c42:	d30b      	bcc.n	8002c5c <OD_write_1201_additional+0x1b0>
 8002c44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c46:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002c4a:	d303      	bcc.n	8002c54 <OD_write_1201_additional+0x1a8>
 8002c4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c52:	d303      	bcc.n	8002c5c <OD_write_1201_additional+0x1b0>
 8002c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c5a:	d901      	bls.n	8002c60 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	e031      	b.n	8002cc4 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	9201      	str	r2, [sp, #4]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c80:	f7ff fea8 	bl	80029d4 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8002c84:	e017      	b.n	8002cb6 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8002c8c:	230b      	movs	r3, #11
 8002c8e:	e019      	b.n	8002cc4 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8002c90:	68b8      	ldr	r0, [r7, #8]
 8002c92:	f7ff fdf5 	bl	8002880 <CO_getUint8>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 8002c9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <OD_write_1201_additional+0x200>
 8002ca4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	da03      	bge.n	8002cb4 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8002cac:	230f      	movs	r3, #15
 8002cae:	e009      	b.n	8002cc4 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8002cb0:	230e      	movs	r3, #14
 8002cb2:	e007      	b.n	8002cc4 <OD_write_1201_additional+0x218>
            break;
 8002cb4:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7fe fd51 	bl	8001764 <OD_writeOriginal>
 8002cc2:	4603      	mov	r3, r0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3734      	adds	r7, #52	; 0x34
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	3ffff800 	.word	0x3ffff800

08002cd0 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	; 0x30
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <CO_SDOserver_init+0x26>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <CO_SDOserver_init+0x26>
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <CO_SDOserver_init+0x26>
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e0f5      	b.n	8002ee8 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8002d08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d0e:	fb03 f202 	mul.w	r2, r3, r2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d117      	bne.n	8002d52 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <CO_SDOserver_init+0x60>
 8002d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da02      	bge.n	8002d36 <CO_SDOserver_init+0x66>
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	e0d8      	b.n	8002ee8 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002d3e:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002d48:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	611a      	str	r2, [r3, #16]
 8002d50:	e0a4      	b.n	8002e9c <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fdb0 	bl	80028b8 <OD_getIndex>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8002d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d5e:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002d62:	d123      	bne.n	8002dac <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <CO_SDOserver_init+0xa2>
 8002d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	da02      	bge.n	8002d78 <CO_SDOserver_init+0xa8>
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
 8002d76:	e0b7      	b.n	8002ee8 <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002d80:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002d8a:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8002d92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d94:	2301      	movs	r3, #1
 8002d96:	2101      	movs	r1, #1
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fddc 	bl	8002956 <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8002d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002da0:	2301      	movs	r3, #1
 8002da2:	2102      	movs	r1, #2
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff fdd6 	bl	8002956 <OD_set_u32>
 8002daa:	e077      	b.n	8002e9c <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8002dac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dae:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002db2:	d96f      	bls.n	8002e94 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8002db4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002db6:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8002dba:	d26b      	bcs.n	8002e94 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8002dbc:	f107 021d 	add.w	r2, r7, #29
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fd9c 	bl	8002902 <OD_get_u8>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8002dd0:	f107 0218 	add.w	r2, r7, #24
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fda7 	bl	800292c <OD_get_u32>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8002de4:	f107 0214 	add.w	r2, r7, #20
 8002de8:	2301      	movs	r3, #1
 8002dea:	2102      	movs	r1, #2
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff fd9d 	bl	800292c <OD_get_u32>
 8002df2:	4603      	mov	r3, r0
 8002df4:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8002df6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <CO_SDOserver_init+0x14a>
 8002dfe:	7f7b      	ldrb	r3, [r7, #29]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d002      	beq.n	8002e0a <CO_SDOserver_init+0x13a>
 8002e04:	7f7b      	ldrb	r3, [r7, #29]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 8002e0a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <CO_SDOserver_init+0x14a>
 8002e12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8002e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <CO_SDOserver_init+0x156>
 8002e20:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e24:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8002e26:	f06f 030b 	mvn.w	r3, #11
 8002e2a:	e05d      	b.n	8002ee8 <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db05      	blt.n	8002e3e <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8002e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	e000      	b.n	8002e40 <CO_SDOserver_init+0x170>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db05      	blt.n	8002e54 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8002e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	e000      	b.n	8002e56 <CO_SDOserver_init+0x186>
 8002e54:	2300      	movs	r3, #0
 8002e56:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <CO_SDOserver_init+0x220>)
 8002e62:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <CO_SDOserver_init+0x224>)
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3354      	adds	r3, #84	; 0x54
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff fd32 	bl	80028da <OD_extension_init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 8002e7a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8002e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <CO_SDOserver_init+0x1be>
 8002e88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8002e8e:	f06f 030b 	mvn.w	r3, #11
 8002e92:	e029      	b.n	8002ee8 <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	e026      	b.n	8002ee8 <CO_SDOserver_init+0x218>
        ) {
 8002e9a:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002eac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002eb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eca:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8002ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ed0:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8002ed4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002ed6:	9201      	str	r2, [sp, #4]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4603      	mov	r3, r0
 8002edc:	460a      	mov	r2, r1
 8002ede:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fd77 	bl	80029d4 <CO_SDOserver_init_canRxTx>
 8002ee6:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3728      	adds	r7, #40	; 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	080016b5 	.word	0x080016b5
 8002ef4:	08002aad 	.word	0x08002aad

08002ef8 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b08b      	sub	sp, #44	; 0x2c
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	460b      	mov	r3, r1
 8002f08:	71fb      	strb	r3, [r7, #7]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d07b      	beq.n	8003016 <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d015      	beq.n	8002f52 <validateAndWriteToOD+0x5a>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d00f      	beq.n	8002f52 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d901      	bls.n	8002f42 <validateAndWriteToOD+0x4a>
 8002f3e:	4a70      	ldr	r2, [pc, #448]	; (8003100 <validateAndWriteToOD+0x208>)
 8002f40:	e000      	b.n	8002f44 <validateAndWriteToOD+0x4c>
 8002f42:	4a70      	ldr	r2, [pc, #448]	; (8003104 <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	751a      	strb	r2, [r3, #20]
            return false;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e0d2      	b.n	80030f8 <validateAndWriteToOD+0x200>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	da3c      	bge.n	8002fde <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <validateAndWriteToOD+0x7c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d934      	bls.n	8002fde <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d82e      	bhi.n	8002fde <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4413      	add	r3, r2
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <validateAndWriteToOD+0xba>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d910      	bls.n	8002fd4 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fb8:	1c59      	adds	r1, r3, #1
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	e02d      	b.n	800303a <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	621a      	str	r2, [r3, #32]
 8002fec:	e025      	b.n	800303a <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff2:	6a3a      	ldr	r2, [r7, #32]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d020      	beq.n	800303a <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d201      	bcs.n	8003006 <validateAndWriteToOD+0x10e>
 8003002:	4a3f      	ldr	r2, [pc, #252]	; (8003100 <validateAndWriteToOD+0x208>)
 8003004:	e000      	b.n	8003008 <validateAndWriteToOD+0x110>
 8003006:	4a3f      	ldr	r2, [pc, #252]	; (8003104 <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	751a      	strb	r2, [r3, #20]
            return false;
 8003012:	2300      	movs	r3, #0
 8003014:	e070      	b.n	80030f8 <validateAndWriteToOD+0x200>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <validateAndWriteToOD+0x142>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003026:	429a      	cmp	r2, r3
 8003028:	d907      	bls.n	800303a <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4a34      	ldr	r2, [pc, #208]	; (8003100 <validateAndWriteToOD+0x208>)
 800302e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	751a      	strb	r2, [r3, #20]
            return false;
 8003036:	2300      	movs	r3, #0
 8003038:	e05e      	b.n	80030f8 <validateAndWriteToOD+0x200>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003042:	f3ef 8210 	mrs	r2, PRIMASK
 8003046:	617a      	str	r2, [r7, #20]
  return(result);
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
}
 800304e:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f103 0018 	add.w	r0, r3, #24
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003066:	f107 0310 	add.w	r3, r7, #16
 800306a:	47a0      	blx	r4
 800306c:	4603      	mov	r3, r0
 800306e:	77fb      	strb	r3, [r7, #31]
                                   SDO->bufOffsetWr, &countWritten);
    CO_UNLOCK_OD(SDO->CANdevTx);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f383 8810 	msr	PRIMASK, r3
}
 800307e:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003088:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d011      	beq.n	80030b4 <validateAndWriteToOD+0x1bc>
 8003090:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d00c      	beq.n	80030b4 <validateAndWriteToOD+0x1bc>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800309a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fd28 	bl	8001af4 <OD_getSDOabCode>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	751a      	strb	r2, [r3, #20]
        return false;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e021      	b.n	80030f8 <validateAndWriteToOD+0x200>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00c      	beq.n	80030d6 <validateAndWriteToOD+0x1de>
 80030bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d107      	bne.n	80030d6 <validateAndWriteToOD+0x1de>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <validateAndWriteToOD+0x20c>)
 80030ca:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	751a      	strb	r2, [r3, #20]
        return false;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e010      	b.n	80030f8 <validateAndWriteToOD+0x200>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <validateAndWriteToOD+0x1fe>
 80030de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <validateAndWriteToOD+0x1fe>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4a05      	ldr	r2, [pc, #20]	; (8003100 <validateAndWriteToOD+0x208>)
 80030ea:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	751a      	strb	r2, [r3, #20]
        return false;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <validateAndWriteToOD+0x200>
    }

    return true;
 80030f6:	2301      	movs	r3, #1
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	372c      	adds	r7, #44	; 0x2c
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd90      	pop	{r4, r7, pc}
 8003100:	06070012 	.word	0x06070012
 8003104:	06070013 	.word	0x06070013

08003108 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b08d      	sub	sp, #52	; 0x34
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && countRemain < countMinimum) {
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 80a5 	bne.w	800327a <readFromOd+0x172>
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	f080 80a0 	bcs.w	800327a <readFromOd+0x172>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800314c:	4413      	add	r3, r2
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	4619      	mov	r1, r3
 8003152:	f024 f899 	bl	8027288 <memmove>
        SDO->bufOffsetRd = 0;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	f1c3 0320 	rsb	r3, r3, #32
 800316c:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	4413      	add	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]

        CO_LOCK_OD(SDO->CANdevTx);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003182:	f3ef 8210 	mrs	r2, PRIMASK
 8003186:	617a      	str	r2, [r7, #20]
  return(result);
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800318c:	b672      	cpsid	i
}
 800318e:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f103 0018 	add.w	r0, r3, #24
 800319a:	f107 0310 	add.w	r3, r7, #16
 800319e:	6a3a      	ldr	r2, [r7, #32]
 80031a0:	69f9      	ldr	r1, [r7, #28]
 80031a2:	47a0      	blx	r4
 80031a4:	4603      	mov	r3, r0
 80031a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                      countRdRequest, &countRd);
        CO_UNLOCK_OD(SDO->CANdevTx);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f383 8810 	msr	PRIMASK, r3
}
 80031b8:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 80031ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <readFromOd+0xde>
 80031c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d00c      	beq.n	80031e6 <readFromOd+0xde>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80031cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fc8f 	bl	8001af4 <OD_getSDOabCode>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	751a      	strb	r2, [r3, #20]
            return false;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e04a      	b.n	800327c <readFromOd+0x174>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d022      	beq.n	8003232 <readFromOd+0x12a>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da1c      	bge.n	8003232 <readFromOd+0x12a>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	4413      	add	r3, r2
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8003202:	69f8      	ldr	r0, [r7, #28]
 8003204:	f7fd f884 	bl	8000310 <strlen>
 8003208:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <readFromOd+0x10c>
 8003210:	2301      	movs	r3, #1
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
            if (countStr < countRd) {
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003218:	429a      	cmp	r2, r3
 800321a:	d20a      	bcs.n	8003232 <readFromOd+0x12a>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	441a      	add	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <readFromOd+0x14a>
 8003248:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d110      	bne.n	8003274 <readFromOd+0x16c>
            SDO->finished = false;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	d90a      	bls.n	800327a <readFromOd+0x172>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <readFromOd+0x17c>)
 8003268:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	751a      	strb	r2, [r3, #20]
                return false;
 8003270:	2300      	movs	r3, #0
 8003272:	e003      	b.n	800327c <readFromOd+0x174>
            }
        }
        else {
            SDO->finished = true;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 800327a:	2301      	movs	r3, #1
}
 800327c:	4618      	mov	r0, r3
 800327e:	3734      	adds	r7, #52	; 0x34
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	06040047 	.word	0x06040047

08003288 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b09b      	sub	sp, #108	; 0x6c
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d103      	bne.n	80032a4 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 800329c:	f06f 0301 	mvn.w	r3, #1
 80032a0:	f000 bcf2 	b.w	8003c88 <CO_SDOserver_process+0xa00>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <CO_SDOserver_process+0x56>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	7d1b      	ldrb	r3, [r3, #20]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <CO_SDOserver_process+0x56>
 80032d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80032dc:	e2c7      	b.n	800386e <CO_SDOserver_process+0x5e6>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <CO_SDOserver_process+0x64>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80032fe:	e2b6      	b.n	800386e <CO_SDOserver_process+0x5e6>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8003300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 82b3 	beq.w	800386e <CO_SDOserver_process+0x5e6>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	7d1b      	ldrb	r3, [r3, #20]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 80ce 	bne.w	80034b0 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8003314:	2300      	movs	r3, #0
 8003316:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003322:	2b20      	cmp	r3, #32
 8003324:	d103      	bne.n	800332e <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2211      	movs	r2, #17
 800332a:	751a      	strb	r2, [r3, #20]
 800332c:	e00f      	b.n	800334e <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d105      	bne.n	8003344 <CO_SDOserver_process+0xbc>
                upload = true;
 8003338:	2301      	movs	r3, #1
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2221      	movs	r2, #33	; 0x21
 8003340:	751a      	strb	r2, [r3, #20]
 8003342:	e004      	b.n	800334e <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8003344:	4ba5      	ldr	r3, [pc, #660]	; (80035dc <CO_SDOserver_process+0x354>)
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d162      	bne.n	800341a <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335a:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 800335c:	b21a      	sxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b21b      	sxth	r3, r3
 8003366:	4313      	orrs	r3, r2
 8003368:	b21b      	sxth	r3, r3
 800336a:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7fe fa66 	bl	8001858 <OD_find>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f103 0218 	add.w	r2, r3, #24
 8003398:	2300      	movs	r3, #0
 800339a:	f7fe fab9 	bl	8001910 <OD_getSub>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 80033a4:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80033ac:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fb9f 	bl	8001af4 <OD_getSDOabCode>
 80033b6:	4603      	mov	r3, r0
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	751a      	strb	r2, [r3, #20]
 80033c0:	e02b      	b.n	800341a <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80033d0:	4b83      	ldr	r3, [pc, #524]	; (80035e0 <CO_SDOserver_process+0x358>)
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	751a      	strb	r2, [r3, #20]
 80033da:	e01e      	b.n	800341a <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 80033dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 80033f0:	4b7c      	ldr	r3, [pc, #496]	; (80035e4 <CO_SDOserver_process+0x35c>)
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	751a      	strb	r2, [r3, #20]
 80033fa:	e00e      	b.n	800341a <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 80033fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8003410:	4b75      	ldr	r3, [pc, #468]	; (80035e8 <CO_SDOserver_process+0x360>)
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 800341a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800341c:	2b00      	cmp	r3, #0
 800341e:	d047      	beq.n	80034b0 <CO_SDOserver_process+0x228>
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d144      	bne.n	80034b0 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8003446:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800344a:	2300      	movs	r3, #0
 800344c:	2207      	movs	r2, #7
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f7ff fe5a 	bl	8003108 <readFromOd>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02a      	beq.n	80034b0 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01a      	beq.n	8003498 <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1a      	ldr	r2, [r3, #32]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	665a      	str	r2, [r3, #100]	; 0x64
 800347c:	e018      	b.n	80034b0 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003488:	429a      	cmp	r2, r3
 800348a:	d011      	beq.n	80034b0 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800348c:	4b57      	ldr	r3, [pc, #348]	; (80035ec <CO_SDOserver_process+0x364>)
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	751a      	strb	r2, [r3, #20]
 8003496:	e00b      	b.n	80034b0 <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800349e:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db02      	blt.n	80034aa <CO_SDOserver_process+0x222>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	e000      	b.n	80034ac <CO_SDOserver_process+0x224>
 80034aa:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	7d1b      	ldrb	r3, [r3, #20]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 81c5 	beq.w	8003846 <CO_SDOserver_process+0x5be>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	7d1b      	ldrb	r3, [r3, #20]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	f000 81bf 	beq.w	8003846 <CO_SDOserver_process+0x5be>
        switch (SDO->state) {
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	7d1b      	ldrb	r3, [r3, #20]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	3b11      	subs	r3, #17
 80034d0:	2b12      	cmp	r3, #18
 80034d2:	f200 81b2 	bhi.w	800383a <CO_SDOserver_process+0x5b2>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <CO_SDOserver_process+0x254>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003529 	.word	0x08003529
 80034e0:	0800383b 	.word	0x0800383b
 80034e4:	080036f3 	.word	0x080036f3
 80034e8:	0800383b 	.word	0x0800383b
 80034ec:	0800383b 	.word	0x0800383b
 80034f0:	0800383b 	.word	0x0800383b
 80034f4:	0800383b 	.word	0x0800383b
 80034f8:	0800383b 	.word	0x0800383b
 80034fc:	0800383b 	.word	0x0800383b
 8003500:	0800383b 	.word	0x0800383b
 8003504:	0800383b 	.word	0x0800383b
 8003508:	0800383b 	.word	0x0800383b
 800350c:	0800383b 	.word	0x0800383b
 8003510:	0800383b 	.word	0x0800383b
 8003514:	0800383b 	.word	0x0800383b
 8003518:	0800383b 	.word	0x0800383b
 800351c:	080037e9 	.word	0x080037e9
 8003520:	0800383b 	.word	0x0800383b
 8003524:	080037f1 	.word	0x080037f1
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a3 	beq.w	800367e <CO_SDOserver_process+0x3f6>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	647b      	str	r3, [r7, #68]	; 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 800353e:	2304      	movs	r3, #4
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003564:	e007      	b.n	8003576 <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8003566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <CO_SDOserver_process+0x2ee>
 800356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356e:	2b03      	cmp	r3, #3
 8003570:	d801      	bhi.n	8003576 <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 8003572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003574:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	2300      	movs	r3, #0
 800357c:	853b      	strh	r3, [r7, #40]	; 0x28
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800358a:	4618      	mov	r0, r3
 800358c:	f023 fe6e 	bl	802726c <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003596:	b25b      	sxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	da17      	bge.n	80035cc <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 800359c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <CO_SDOserver_process+0x322>
 80035a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d210      	bcs.n	80035cc <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 80035aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 80035b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <CO_SDOserver_process+0x334>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <CO_SDOserver_process+0x336>
 80035bc:	2302      	movs	r3, #2
 80035be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035c0:	4413      	add	r3, r2
 80035c2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035c8:	621a      	str	r2, [r3, #32]
                ) {
 80035ca:	e021      	b.n	8003610 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10e      	bne.n	80035f0 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035d6:	621a      	str	r2, [r3, #32]
 80035d8:	e01a      	b.n	8003610 <CO_SDOserver_process+0x388>
 80035da:	bf00      	nop
 80035dc:	05040001 	.word	0x05040001
 80035e0:	06010000 	.word	0x06010000
 80035e4:	06010001 	.word	0x06010001
 80035e8:	06010002 	.word	0x06010002
 80035ec:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 80035f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d00b      	beq.n	8003610 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80035f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d901      	bls.n	8003604 <CO_SDOserver_process+0x37c>
 8003600:	4b92      	ldr	r3, [pc, #584]	; (800384c <CO_SDOserver_process+0x5c4>)
 8003602:	e000      	b.n	8003606 <CO_SDOserver_process+0x37e>
 8003604:	4b92      	ldr	r3, [pc, #584]	; (8003850 <CO_SDOserver_process+0x5c8>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	751a      	strb	r2, [r3, #20]
                    break;
 800360e:	e126      	b.n	800385e <CO_SDOserver_process+0x5d6>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	623b      	str	r3, [r7, #32]

                CO_LOCK_OD(SDO->CANdevTx);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003618:	f3ef 8210 	mrs	r2, PRIMASK
 800361c:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 800361e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003622:	b672      	cpsid	i
}
 8003624:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f103 0018 	add.w	r0, r3, #24
 8003630:	f107 0320 	add.w	r3, r7, #32
 8003634:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800363a:	47a0      	blx	r4
 800363c:	4603      	mov	r3, r0
 800363e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                               dataSizeToWrite, &countWritten);
                CO_UNLOCK_OD(SDO->CANdevTx);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	f383 8810 	msr	PRIMASK, r3
}
 8003650:	bf00      	nop

                if (odRet != ODR_OK) {
 8003652:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <CO_SDOserver_process+0x3e8>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800365a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fa48 	bl	8001af4 <OD_getSDOabCode>
 8003664:	4603      	mov	r3, r0
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	751a      	strb	r2, [r3, #20]
                    break;
 800366e:	e0f6      	b.n	800385e <CO_SDOserver_process+0x5d6>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2212      	movs	r2, #18
 8003674:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 800367c:	e0ef      	b.n	800385e <CO_SDOserver_process+0x5d6>
                if (SDO->CANrxData[0] & 0x01) {
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d028      	beq.n	80036de <CO_SDOserver_process+0x456>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	64bb      	str	r3, [r7, #72]	; 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3340      	adds	r3, #64	; 0x40
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	61fb      	str	r3, [r7, #28]
                    SDO->sizeInd = CO_SWAP_32(size);
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 80036a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01e      	beq.n	80036e4 <CO_SDOserver_process+0x45c>
                        if (SDO->sizeInd > sizeInOd) {
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d205      	bcs.n	80036bc <CO_SDOserver_process+0x434>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <CO_SDOserver_process+0x5c4>)
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	751a      	strb	r2, [r3, #20]
                            break;
 80036ba:	e0d0      	b.n	800385e <CO_SDOserver_process+0x5d6>
                        else if (SDO->sizeInd < sizeInOd
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90e      	bls.n	80036e4 <CO_SDOserver_process+0x45c>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db08      	blt.n	80036e4 <CO_SDOserver_process+0x45c>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 80036d2:	4b5f      	ldr	r3, [pc, #380]	; (8003850 <CO_SDOserver_process+0x5c8>)
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	751a      	strb	r2, [r3, #20]
                            break;
 80036dc:	e0bf      	b.n	800385e <CO_SDOserver_process+0x5d6>
                    SDO->sizeInd = 0;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2212      	movs	r2, #18
 80036e8:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 80036f0:	e0b5      	b.n	800385e <CO_SDOserver_process+0x5d6>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d16d      	bne.n	80037dc <CO_SDOserver_process+0x554>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                if (toggle != SDO->toggle) {
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800372e:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8003732:	429a      	cmp	r2, r3
 8003734:	d005      	beq.n	8003742 <CO_SDOserver_process+0x4ba>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <CO_SDOserver_process+0x5cc>)
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	751a      	strb	r2, [r3, #20]
                    break;
 8003740:	e08d      	b.n	800385e <CO_SDOserver_process+0x5d6>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003760:	18d0      	adds	r0, r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	333d      	adds	r3, #61	; 0x3d
 8003766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003768:	4619      	mov	r1, r3
 800376a:	f023 fd7f 	bl	802726c <memcpy>
                SDO->bufOffsetWr += count;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003776:	441a      	add	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	441a      	add	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <CO_SDOserver_process+0x522>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	429a      	cmp	r2, r3
 800379c:	d905      	bls.n	80037aa <CO_SDOserver_process+0x522>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 800379e:	4b2b      	ldr	r3, [pc, #172]	; (800384c <CO_SDOserver_process+0x5c4>)
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	751a      	strb	r2, [r3, #20]
                    break;
 80037a8:	e059      	b.n	800385e <CO_SDOserver_process+0x5d6>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <CO_SDOserver_process+0x538>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037b8:	f1c3 0320 	rsb	r3, r3, #32
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d809      	bhi.n	80037d4 <CO_SDOserver_process+0x54c>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 80037c0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80037c4:	2300      	movs	r3, #0
 80037c6:	2200      	movs	r2, #0
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff fb95 	bl	8002ef8 <validateAndWriteToOD>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d043      	beq.n	800385c <CO_SDOserver_process+0x5d4>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2214      	movs	r2, #20
 80037d8:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 80037da:	e040      	b.n	800385e <CO_SDOserver_process+0x5d6>
                abortCode = CO_SDO_AB_CMD;
 80037dc:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <CO_SDOserver_process+0x5d0>)
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	751a      	strb	r2, [r3, #20]
            break;
 80037e6:	e03a      	b.n	800385e <CO_SDOserver_process+0x5d6>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2222      	movs	r2, #34	; 0x22
 80037ec:	751a      	strb	r2, [r3, #20]
            break;
 80037ee:	e036      	b.n	800385e <CO_SDOserver_process+0x5d6>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80037fa:	2b60      	cmp	r3, #96	; 0x60
 80037fc:	d117      	bne.n	800382e <CO_SDOserver_process+0x5a6>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                if (toggle != SDO->toggle) {
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003812:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8003816:	429a      	cmp	r2, r3
 8003818:	d005      	beq.n	8003826 <CO_SDOserver_process+0x59e>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <CO_SDOserver_process+0x5cc>)
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	751a      	strb	r2, [r3, #20]
                    break;
 8003824:	e01b      	b.n	800385e <CO_SDOserver_process+0x5d6>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2224      	movs	r2, #36	; 0x24
 800382a:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 800382c:	e017      	b.n	800385e <CO_SDOserver_process+0x5d6>
                abortCode = CO_SDO_AB_CMD;
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <CO_SDOserver_process+0x5d0>)
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	751a      	strb	r2, [r3, #20]
            break;
 8003838:	e011      	b.n	800385e <CO_SDOserver_process+0x5d6>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <CO_SDOserver_process+0x5d0>)
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	751a      	strb	r2, [r3, #20]
 8003844:	e00b      	b.n	800385e <CO_SDOserver_process+0x5d6>
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8003846:	bf00      	nop
 8003848:	e009      	b.n	800385e <CO_SDOserver_process+0x5d6>
 800384a:	bf00      	nop
 800384c:	06070012 	.word	0x06070012
 8003850:	06070013 	.word	0x06070013
 8003854:	05030000 	.word	0x05030000
 8003858:	05040001 	.word	0x05040001
                        break;
 800385c:	bf00      	nop
        SDO->timeoutTimer = 0;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 800386e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003872:	2b01      	cmp	r3, #1
 8003874:	d11e      	bne.n	80038b4 <CO_SDOserver_process+0x62c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	429a      	cmp	r2, r3
 8003880:	d205      	bcs.n	800388e <CO_SDOserver_process+0x606>
            SDO->timeoutTimer += timeDifference_us;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	441a      	add	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003896:	429a      	cmp	r2, r3
 8003898:	d304      	bcc.n	80038a4 <CO_SDOserver_process+0x61c>
            abortCode = CO_SDO_AB_TIMEOUT;
 800389a:	4b9c      	ldr	r3, [pc, #624]	; (8003b0c <CO_SDOserver_process+0x884>)
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <CO_SDOserver_process+0x62c>
            ret = CO_SDO_RT_transmittBufferFull;
 80038ae:	2304      	movs	r3, #4
 80038b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80038b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 81a8 	bne.w	8003c0e <CO_SDOserver_process+0x986>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	3305      	adds	r3, #5
 80038c4:	2208      	movs	r2, #8
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f023 fcf7 	bl	80272bc <memset>

        switch (SDO->state) {
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	7d1b      	ldrb	r3, [r3, #20]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3b12      	subs	r3, #18
 80038d6:	2b12      	cmp	r3, #18
 80038d8:	f200 819b 	bhi.w	8003c12 <CO_SDOserver_process+0x98a>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <CO_SDOserver_process+0x65c>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003931 	.word	0x08003931
 80038e8:	08003c13 	.word	0x08003c13
 80038ec:	080039b3 	.word	0x080039b3
 80038f0:	08003c13 	.word	0x08003c13
 80038f4:	08003c13 	.word	0x08003c13
 80038f8:	08003c13 	.word	0x08003c13
 80038fc:	08003c13 	.word	0x08003c13
 8003900:	08003c13 	.word	0x08003c13
 8003904:	08003c13 	.word	0x08003c13
 8003908:	08003c13 	.word	0x08003c13
 800390c:	08003c13 	.word	0x08003c13
 8003910:	08003c13 	.word	0x08003c13
 8003914:	08003c13 	.word	0x08003c13
 8003918:	08003c13 	.word	0x08003c13
 800391c:	08003c13 	.word	0x08003c13
 8003920:	08003c13 	.word	0x08003c13
 8003924:	08003a0f 	.word	0x08003a0f
 8003928:	08003c13 	.word	0x08003c13
 800392c:	08003add 	.word	0x08003add
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2260      	movs	r2, #96	; 0x60
 8003936:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800395e:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f002 fcd7 	bl	8006324 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <CO_SDOserver_process+0x704>
                SDO->state = CO_SDO_ST_IDLE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8003984:	2300      	movs	r3, #0
 8003986:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 800398a:	e145      	b.n	8003c18 <CO_SDOserver_process+0x990>
                SDO->toggle = 0x00;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2213      	movs	r2, #19
 80039ae:	751a      	strb	r2, [r3, #20]
            break;
 80039b0:	e132      	b.n	8003c18 <CO_SDOserver_process+0x990>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <CO_SDOserver_process+0x74a>
 80039ce:	2210      	movs	r2, #16
 80039d0:	e000      	b.n	80039d4 <CO_SDOserver_process+0x74c>
 80039d2:	2200      	movs	r2, #0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f002 fc9a 	bl	8006324 <CO_CANsend>
            if (SDO->finished) {
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d006      	beq.n	8003a06 <CO_SDOserver_process+0x77e>
                SDO->state = CO_SDO_ST_IDLE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8003a04:	e108      	b.n	8003c18 <CO_SDOserver_process+0x990>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2213      	movs	r2, #19
 8003a0a:	751a      	strb	r2, [r3, #20]
            break;
 8003a0c:	e104      	b.n	8003c18 <CO_SDOserver_process+0x990>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d024      	beq.n	8003a60 <CO_SDOserver_process+0x7d8>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d820      	bhi.n	8003a60 <CO_SDOserver_process+0x7d8>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f1c3 0304 	rsb	r3, r3, #4
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f103 0009 	add.w	r0, r3, #9
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f023 fc0d 	bl	802726c <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003a5e:	e020      	b.n	8003aa2 <CO_SDOserver_process+0x81a>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <CO_SDOserver_process+0x7fe>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6c:	63bb      	str	r3, [r7, #56]	; 0x38
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	61bb      	str	r3, [r7, #24]
                    SDO->CANtxBuff->data[0] = 0x41;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2241      	movs	r2, #65	; 0x41
 8003a78:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	3309      	adds	r3, #9
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e003      	b.n	8003a8e <CO_SDOserver_process+0x806>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2223      	movs	r2, #35	; 0x23
 8003aa0:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003ac8:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f002 fc25 	bl	8006324 <CO_CANsend>
            break;
 8003ada:	e09d      	b.n	8003c18 <CO_SDOserver_process+0x990>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 8003adc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2207      	movs	r2, #7
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f7ff fb0f 	bl	8003108 <readFromOd>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8092 	beq.w	8003c16 <CO_SDOserver_process+0x98e>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8003afc:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <CO_SDOserver_process+0x888>
 8003b08:	2210      	movs	r2, #16
 8003b0a:	e002      	b.n	8003b12 <CO_SDOserver_process+0x88a>
 8003b0c:	05040000 	.word	0x05040000
 8003b10:	2200      	movs	r2, #0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	65bb      	str	r3, [r7, #88]	; 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8003b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d906      	bls.n	8003b3c <CO_SDOserver_process+0x8b4>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d01b      	beq.n	8003b6e <CO_SDOserver_process+0x8e6>
 8003b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d118      	bne.n	8003b6e <CO_SDOserver_process+0x8e6>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	795a      	ldrb	r2, [r3, #5]
 8003b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f1c3 0307 	rsb	r3, r3, #7
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4313      	orrs	r3, r2
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b6c:	e007      	b.n	8003b7e <CO_SDOserver_process+0x8f6>
            }
            else {
                SDO->timeoutTimer = 0;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2223      	movs	r2, #35	; 0x23
 8003b78:	751a      	strb	r2, [r3, #20]
                count = 7;
 8003b7a:	2307      	movs	r3, #7
 8003b7c:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	1d98      	adds	r0, r3, #6
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b90:	4413      	add	r3, r2
 8003b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b94:	4619      	mov	r1, r3
 8003b96:	f023 fb69 	bl	802726c <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ba2:	441a      	add	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	441a      	add	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01e      	beq.n	8003bfc <CO_SDOserver_process+0x974>
                if (SDO->sizeTran > SDO->sizeInd) {
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d905      	bls.n	8003bd6 <CO_SDOserver_process+0x94e>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <CO_SDOserver_process+0xa08>)
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	751a      	strb	r2, [r3, #20]
                    break;
 8003bd4:	e020      	b.n	8003c18 <CO_SDOserver_process+0x990>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8003bd6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10e      	bne.n	8003bfc <CO_SDOserver_process+0x974>
                         && SDO->sizeTran < SDO->sizeInd
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d208      	bcs.n	8003bfc <CO_SDOserver_process+0x974>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8003bea:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <CO_SDOserver_process+0xa0c>)
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
                    ret = CO_SDO_RT_waitingResponse;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	751a      	strb	r2, [r3, #20]
                    break;
 8003bfa:	e00d      	b.n	8003c18 <CO_SDOserver_process+0x990>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f002 fb8c 	bl	8006324 <CO_CANsend>
            break;
 8003c0c:	e004      	b.n	8003c18 <CO_SDOserver_process+0x990>

        default: {
            break;
        }
        } /* switch (SDO->state) */
    }
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <CO_SDOserver_process+0x990>
            break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <CO_SDOserver_process+0x990>
                break;
 8003c16:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 8003c18:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d131      	bne.n	8003c84 <CO_SDOserver_process+0x9fc>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	7d1b      	ldrb	r3, [r3, #20]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d12c      	bne.n	8003c84 <CO_SDOserver_process+0x9fc>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003c5c:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	3309      	adds	r3, #9
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f002 fb56 	bl	8006324 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8003c7e:	23f6      	movs	r3, #246	; 0xf6
 8003c80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8003c84:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	376c      	adds	r7, #108	; 0x6c
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd90      	pop	{r4, r7, pc}
 8003c90:	06070012 	.word	0x06070012
 8003c94:	06070013 	.word	0x06070013

08003c98 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003ca4:	73fb      	strb	r3, [r7, #15]
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <OD_getIndex+0x14>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	e000      	b.n	8003ce6 <OD_getIndex+0x16>
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <OD_extension_init>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <OD_extension_init+0x14>
 8003d02:	2305      	movs	r3, #5
 8003d04:	e003      	b.n	8003d0e <OD_extension_init+0x1c>
    entry->extension = extension;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <OD_get_u8>:
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af02      	add	r7, sp, #8
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	460b      	mov	r3, r1
 8003d28:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003d2a:	7af9      	ldrb	r1, [r7, #11]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2301      	movs	r3, #1
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7fd fefb 	bl	8001b30 <OD_get_value>
 8003d3a:	4603      	mov	r3, r0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <OD_get_u32>:
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	460b      	mov	r3, r1
 8003d52:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003d54:	7af9      	ldrb	r1, [r7, #11]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7fd fee6 	bl	8001b30 <OD_get_value>
 8003d64:	4603      	mov	r3, r0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	791b      	ldrb	r3, [r3, #4]
 8003d80:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	7c5b      	ldrb	r3, [r3, #17]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8003d94:	2301      	movs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e019      	b.n	8003dce <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	721a      	strb	r2, [r3, #8]
 8003da6:	e012      	b.n	8003dce <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d109      	bne.n	8003dc2 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	3305      	adds	r3, #5
 8003db2:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e005      	b.n	8003dce <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00c      	beq.n	8003dee <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2201      	movs	r2, #1
 8003dec:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b08f      	sub	sp, #60	; 0x3c
 8003e00:	af04      	add	r7, sp, #16
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00c      	beq.n	8003e2a <OD_write_1005+0x2e>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	7c5b      	ldrb	r3, [r3, #17]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <OD_write_1005+0x2e>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d102      	bne.n	8003e2a <OD_write_1005+0x2e>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8003e2a:	2309      	movs	r3, #9
 8003e2c:	e0a3      	b.n	8003f76 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8003e34:	68b8      	ldr	r0, [r7, #8]
 8003e36:	f7ff ff3d 	bl	8003cb4 <CO_getUint32>
 8003e3a:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e44:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8003e58:	6a3a      	ldr	r2, [r7, #32]
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <OD_write_1005+0x184>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d133      	bne.n	8003eca <OD_write_1005+0xce>
 8003e62:	8bfb      	ldrh	r3, [r7, #30]
 8003e64:	2b7f      	cmp	r3, #127	; 0x7f
 8003e66:	d930      	bls.n	8003eca <OD_write_1005+0xce>
 8003e68:	8bfb      	ldrh	r3, [r7, #30]
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6e:	d903      	bls.n	8003e78 <OD_write_1005+0x7c>
 8003e70:	8bfb      	ldrh	r3, [r7, #30]
 8003e72:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003e76:	d928      	bls.n	8003eca <OD_write_1005+0xce>
 8003e78:	8bfb      	ldrh	r3, [r7, #30]
 8003e7a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003e7e:	d903      	bls.n	8003e88 <OD_write_1005+0x8c>
 8003e80:	8bfb      	ldrh	r3, [r7, #30]
 8003e82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e86:	d320      	bcc.n	8003eca <OD_write_1005+0xce>
 8003e88:	8bfb      	ldrh	r3, [r7, #30]
 8003e8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e8e:	d903      	bls.n	8003e98 <OD_write_1005+0x9c>
 8003e90:	8bfb      	ldrh	r3, [r7, #30]
 8003e92:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003e96:	d318      	bcc.n	8003eca <OD_write_1005+0xce>
 8003e98:	8bfb      	ldrh	r3, [r7, #30]
 8003e9a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003e9e:	d303      	bcc.n	8003ea8 <OD_write_1005+0xac>
 8003ea0:	8bfb      	ldrh	r3, [r7, #30]
 8003ea2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea6:	d310      	bcc.n	8003eca <OD_write_1005+0xce>
 8003ea8:	8bfb      	ldrh	r3, [r7, #30]
 8003eaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eae:	d80c      	bhi.n	8003eca <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <OD_write_1005+0xd2>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <OD_write_1005+0xd2>
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ec4:	8bfa      	ldrh	r2, [r7, #30]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8003eca:	230f      	movs	r3, #15
 8003ecc:	e053      	b.n	8003f76 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ed4:	8bfa      	ldrh	r2, [r7, #30]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d03a      	beq.n	8003f50 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8003ee2:	8bfa      	ldrh	r2, [r7, #30]
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <OD_write_1005+0x188>)
 8003ee6:	9302      	str	r3, [sp, #8]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003ef4:	f002 f8f4 	bl	80060e0 <CO_CANrxBufferInit>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8003efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8003f04:	2309      	movs	r3, #9
 8003f06:	e036      	b.n	8003f76 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bf14      	ite	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	2300      	moveq	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461c      	mov	r4, r3
 8003f22:	8bfa      	ldrh	r2, [r7, #30]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	9400      	str	r4, [sp, #0]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f002 f934 	bl	8006198 <CO_CANtxBufferInit>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	2200      	movs	r2, #0
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8003f44:	2309      	movs	r3, #9
 8003f46:	e016      	b.n	8003f76 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	8bfa      	ldrh	r2, [r7, #30]
 8003f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2200      	movs	r2, #0
 8003f60:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7fd fbf8 	bl	8001764 <OD_writeOriginal>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	372c      	adds	r7, #44	; 0x2c
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd90      	pop	{r4, r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	bffff800 	.word	0xbffff800
 8003f84:	08003d6f 	.word	0x08003d6f

08003f88 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00c      	beq.n	8003fb6 <OD_write_1019+0x2e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	7c5b      	ldrb	r3, [r3, #17]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d108      	bne.n	8003fb6 <OD_write_1019+0x2e>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <OD_write_1019+0x2e>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8003fb6:	2309      	movs	r3, #9
 8003fb8:	e041      	b.n	800403e <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8003fc0:	68b8      	ldr	r0, [r7, #8]
 8003fc2:	f7ff fe69 	bl	8003c98 <CO_getUint8>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d002      	beq.n	8003fd6 <OD_write_1019+0x4e>
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2bf0      	cmp	r3, #240	; 0xf0
 8003fd4:	d901      	bls.n	8003fda <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8003fd6:	230f      	movs	r3, #15
 8003fd8:	e031      	b.n	800403e <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8003fe4:	2317      	movs	r3, #23
 8003fe6:	e02a      	b.n	800403e <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461c      	mov	r4, r3
 8004006:	2300      	movs	r3, #0
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	9400      	str	r4, [sp, #0]
 800400c:	2300      	movs	r3, #0
 800400e:	f002 f8c3 	bl	8006198 <CO_CANtxBufferInit>
 8004012:	4602      	mov	r2, r0
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2200      	movs	r2, #0
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8004026:	2309      	movs	r3, #9
 8004028:	e009      	b.n	800403e <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	7cfa      	ldrb	r2, [r7, #19]
 800402e:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7fd fb94 	bl	8001764 <OD_writeOriginal>
 800403c:	4603      	mov	r3, r0
}
 800403e:	4618      	mov	r0, r3
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd90      	pop	{r4, r7, pc}
	...

08004048 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	; 0x30
 800404c:	af04      	add	r7, sp, #16
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00e      	beq.n	800407a <CO_SYNC_init+0x32>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <CO_SYNC_init+0x32>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <CO_SYNC_init+0x32>
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	e0fe      	b.n	800427e <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004080:	2260      	movs	r2, #96	; 0x60
 8004082:	2100      	movs	r1, #0
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f023 f919 	bl	80272bc <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 800408e:	f107 0218 	add.w	r2, r7, #24
 8004092:	2301      	movs	r3, #1
 8004094:	2100      	movs	r1, #0
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fe54 	bl	8003d44 <OD_get_u32>
 800409c:	4603      	mov	r3, r0
 800409e:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80040a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 80040a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d006      	beq.n	80040bc <CO_SYNC_init+0x74>
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fe0e 	bl	8003cd0 <OD_getIndex>
 80040b4:	4603      	mov	r3, r0
 80040b6:	461a      	mov	r2, r3
 80040b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ba:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80040bc:	f06f 030b 	mvn.w	r3, #11
 80040c0:	e0dd      	b.n	800427e <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a6f      	ldr	r2, [pc, #444]	; (8004288 <CO_SYNC_init+0x240>)
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a6e      	ldr	r2, [pc, #440]	; (800428c <CO_SYNC_init+0x244>)
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3334      	adds	r3, #52	; 0x34
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fe09 	bl	8003cf2 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 80040e0:	2300      	movs	r3, #0
 80040e2:	2204      	movs	r2, #4
 80040e4:	2100      	movs	r1, #0
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f7fd fd89 	bl	8001bfe <OD_getPtr>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80040fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d006      	beq.n	800410e <CO_SYNC_init+0xc6>
 8004100:	6838      	ldr	r0, [r7, #0]
 8004102:	f7ff fde5 	bl	8003cd0 <OD_getIndex>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800410e:	f06f 030b 	mvn.w	r3, #11
 8004112:	e0b4      	b.n	800427e <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8004114:	2300      	movs	r3, #0
 8004116:	2204      	movs	r2, #4
 8004118:	2100      	movs	r1, #0
 800411a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411c:	f7fd fd6f 	bl	8001bfe <OD_getPtr>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <CO_SYNC_init+0x106>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10c      	bne.n	800414e <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <CO_SYNC_init+0x100>
 800413a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800413c:	f7ff fdc8 	bl	8003cd0 <OD_getIndex>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004146:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004148:	f06f 030b 	mvn.w	r3, #11
 800414c:	e097      	b.n	800427e <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d033      	beq.n	80041c0 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004158:	f107 0217 	add.w	r2, r7, #23
 800415c:	2301      	movs	r3, #1
 800415e:	2100      	movs	r1, #0
 8004160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004162:	f7ff fdda 	bl	8003d1a <OD_get_u8>
 8004166:	4603      	mov	r3, r0
 8004168:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 800416a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <CO_SYNC_init+0x13e>
 8004178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800417a:	f7ff fda9 	bl	8003cd0 <OD_getIndex>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004184:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8004186:	f06f 030b 	mvn.w	r3, #11
 800418a:	e078      	b.n	800427e <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d102      	bne.n	8004198 <CO_SYNC_init+0x150>
 8004192:	2302      	movs	r3, #2
 8004194:	75fb      	strb	r3, [r7, #23]
 8004196:	e004      	b.n	80041a2 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8004198:	7dfb      	ldrb	r3, [r7, #23]
 800419a:	2bf0      	cmp	r3, #240	; 0xf0
 800419c:	d901      	bls.n	80041a2 <CO_SYNC_init+0x15a>
 800419e:	23f0      	movs	r3, #240	; 0xf0
 80041a0:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a37      	ldr	r2, [pc, #220]	; (8004288 <CO_SYNC_init+0x240>)
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a37      	ldr	r2, [pc, #220]	; (8004290 <CO_SYNC_init+0x248>)
 80041b2:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3350      	adds	r3, #80	; 0x50
 80041b8:	4619      	mov	r1, r3
 80041ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041bc:	f7ff fd99 	bl	8003cf2 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 80041c0:	7dfa      	ldrb	r2, [r7, #23]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041fc:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004202:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004208:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004214:	b29a      	uxth	r2, r3
 8004216:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <CO_SYNC_init+0x24c>)
 800421a:	9302      	str	r3, [sp, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800422a:	f001 ff59 	bl	80060e0 <CO_CANrxBufferInit>
 800422e:	4603      	mov	r3, r0
 8004230:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8004232:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <CO_SYNC_init+0x1f8>
        return ret;
 800423a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800423e:	e01e      	b.n	800427e <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004248:	b29a      	uxth	r2, r3
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4618      	mov	r0, r3
 8004258:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800425a:	2300      	movs	r3, #0
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	9000      	str	r0, [sp, #0]
 8004260:	2300      	movs	r3, #0
 8004262:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004264:	f001 ff98 	bl	8006198 <CO_CANtxBufferInit>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	e000      	b.n	800427e <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	080016b5 	.word	0x080016b5
 800428c:	08003dfd 	.word	0x08003dfd
 8004290:	08003f89 	.word	0x08003f89
 8004294:	08003d6f 	.word	0x08003d6f

08004298 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80042a6:	81fb      	strh	r3, [r7, #14]
 80042a8:	89fb      	ldrh	r3, [r7, #14]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <OD_getIndex+0x14>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	e000      	b.n	80042e8 <OD_getIndex+0x16>
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <OD_extension_init>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <OD_extension_init+0x14>
 8004304:	2305      	movs	r3, #5
 8004306:	e003      	b.n	8004310 <OD_extension_init+0x1c>
    entry->extension = extension;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <OD_get_u32>:
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	460b      	mov	r3, r1
 800432a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800432c:	7af9      	ldrb	r1, [r7, #11]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2304      	movs	r3, #4
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7fd fbfa 	bl	8001b30 <OD_get_value>
 800433c:	4603      	mov	r3, r0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	3305      	adds	r3, #5
 800435e:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b06      	cmp	r3, #6
 8004364:	d108      	bne.n	8004378 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2206      	movs	r2, #6
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	4618      	mov	r0, r3
 800436e:	f022 ff7d 	bl	802726c <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2201      	movs	r2, #1
 8004376:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8004378:	bf00      	nop
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <OD_write_1012+0x2e>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	7c5b      	ldrb	r3, [r3, #17]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <OD_write_1012+0x2e>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d102      	bne.n	80043ae <OD_write_1012+0x2e>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80043ae:	2309      	movs	r3, #9
 80043b0:	e051      	b.n	8004456 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80043b8:	68b8      	ldr	r0, [r7, #8]
 80043ba:	f7ff ff7c 	bl	80042b6 <CO_getUint32>
 80043be:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c8:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4b24      	ldr	r3, [pc, #144]	; (8004460 <OD_write_1012+0xe0>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d126      	bne.n	8004422 <OD_write_1012+0xa2>
 80043d4:	8afb      	ldrh	r3, [r7, #22]
 80043d6:	2b7f      	cmp	r3, #127	; 0x7f
 80043d8:	d923      	bls.n	8004422 <OD_write_1012+0xa2>
 80043da:	8afb      	ldrh	r3, [r7, #22]
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e0:	d903      	bls.n	80043ea <OD_write_1012+0x6a>
 80043e2:	8afb      	ldrh	r3, [r7, #22]
 80043e4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80043e8:	d91b      	bls.n	8004422 <OD_write_1012+0xa2>
 80043ea:	8afb      	ldrh	r3, [r7, #22]
 80043ec:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80043f0:	d903      	bls.n	80043fa <OD_write_1012+0x7a>
 80043f2:	8afb      	ldrh	r3, [r7, #22]
 80043f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043f8:	d313      	bcc.n	8004422 <OD_write_1012+0xa2>
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004400:	d903      	bls.n	800440a <OD_write_1012+0x8a>
 8004402:	8afb      	ldrh	r3, [r7, #22]
 8004404:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004408:	d30b      	bcc.n	8004422 <OD_write_1012+0xa2>
 800440a:	8afb      	ldrh	r3, [r7, #22]
 800440c:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8004410:	d303      	bcc.n	800441a <OD_write_1012+0x9a>
 8004412:	8afb      	ldrh	r3, [r7, #22]
 8004414:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004418:	d303      	bcc.n	8004422 <OD_write_1012+0xa2>
 800441a:	8afb      	ldrh	r3, [r7, #22]
 800441c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004420:	d901      	bls.n	8004426 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8004422:	230f      	movs	r3, #15
 8004424:	e017      	b.n	8004456 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	0fdb      	lsrs	r3, r3, #31
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7fd f988 	bl	8001764 <OD_writeOriginal>
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	3ffff800 	.word	0x3ffff800

08004464 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af04      	add	r7, sp, #16
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <CO_TIME_init+0x20>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <CO_TIME_init+0x20>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	e061      	b.n	800454e <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 800448a:	222c      	movs	r2, #44	; 0x2c
 800448c:	2100      	movs	r1, #0
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f022 ff14 	bl	80272bc <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8004494:	f107 0214 	add.w	r2, r7, #20
 8004498:	2301      	movs	r3, #1
 800449a:	2100      	movs	r1, #0
 800449c:	68b8      	ldr	r0, [r7, #8]
 800449e:	f7ff ff3d 	bl	800431c <OD_get_u32>
 80044a2:	4603      	mov	r3, r0
 80044a4:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80044a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d006      	beq.n	80044c2 <CO_TIME_init+0x5e>
 80044b4:	68b8      	ldr	r0, [r7, #8]
 80044b6:	f7ff ff0c 	bl	80042d2 <OD_getIndex>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80044c2:	f06f 030b 	mvn.w	r3, #11
 80044c6:	e042      	b.n	800454e <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a21      	ldr	r2, [pc, #132]	; (8004558 <CO_TIME_init+0xf4>)
 80044d2:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <CO_TIME_init+0xf8>)
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	331c      	adds	r3, #28
 80044de:	4619      	mov	r1, r3
 80044e0:	68b8      	ldr	r0, [r7, #8]
 80044e2:	f7ff ff07 	bl	80042f4 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ee:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	0fdb      	lsrs	r3, r3, #31
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d015      	beq.n	800454c <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004520:	8bba      	ldrh	r2, [r7, #28]
 8004522:	8879      	ldrh	r1, [r7, #2]
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <CO_TIME_init+0xfc>)
 8004526:	9302      	str	r3, [sp, #8]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	2300      	movs	r3, #0
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f001 fdd3 	bl	80060e0 <CO_CANrxBufferInit>
 800453a:	4603      	mov	r3, r0
 800453c:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 800453e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <CO_TIME_init+0xe8>
            return ret;
 8004546:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800454a:	e000      	b.n	800454e <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	080016b5 	.word	0x080016b5
 800455c:	08004381 	.word	0x08004381
 8004560:	08004347 	.word	0x08004347

08004564 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8004570:	2300      	movs	r3, #0
 8004572:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d024      	beq.n	80045c4 <CO_TIME_process+0x60>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01f      	beq.n	80045ca <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fe92 	bl	80042b6 <CO_getUint32>
 8004592:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fe7d 	bl	8004298 <CO_getUint16>
 800459e:	4603      	mov	r3, r0
 80045a0:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8bfa      	ldrh	r2, [r7, #30]
 80045b0:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80045b8:	2301      	movs	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 80045c2:	e002      	b.n	80045ca <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d132      	bne.n	800463a <CO_TIME_process+0xd6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02f      	beq.n	800463a <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	89db      	ldrh	r3, [r3, #14]
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <CO_TIME_process+0xe0>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <CO_TIME_process+0xe0>)
 80045f6:	fba3 1302 	umull	r1, r3, r3, r2
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	441a      	add	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <CO_TIME_process+0xe4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d90b      	bls.n	800463a <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <CO_TIME_process+0xe8>)
 8004628:	4413      	add	r3, r2
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	899b      	ldrh	r3, [r3, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800463c:	4618      	mov	r0, r3
 800463e:	3728      	adds	r7, #40	; 0x28
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	10624dd3 	.word	0x10624dd3
 8004648:	05265bff 	.word	0x05265bff
 800464c:	fad9a400 	.word	0xfad9a400

08004650 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004662:	f04f 33ff 	mov.w	r3, #4294967295
 8004666:	e006      	b.n	8004676 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8004668:	220c      	movs	r2, #12
 800466a:	2100      	movs	r1, #0
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f022 fe25 	bl	80272bc <memset>

    return ret;
 8004672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8004698:	2300      	movs	r3, #0
 800469a:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	441a      	add	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 80046a8:	e0fe      	b.n	80048a8 <CO_LEDs_process+0x228>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	7a5b      	ldrb	r3, [r3, #9]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	613b      	str	r3, [r7, #16]

        tick = true;
 80046be:	2301      	movs	r3, #1
 80046c0:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4bae      	ldr	r3, [pc, #696]	; (8004980 <CO_LEDs_process+0x300>)
 80046c8:	4413      	add	r3, r2
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	791b      	ldrb	r3, [r3, #4]
 80046d2:	3301      	adds	r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	711a      	strb	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	791b      	ldrb	r3, [r3, #4]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	f240 80ca 	bls.w	8004878 <CO_LEDs_process+0x1f8>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	77bb      	strb	r3, [r7, #30]
 80046ee:	7fbb      	ldrb	r3, [r7, #30]
 80046f0:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	7a5b      	ldrb	r3, [r3, #9]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <CO_LEDs_process+0x88>
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e003      	b.n	8004710 <CO_LEDs_process+0x90>
            else                                    gr |= CO_LED_blink;
 8004708:	7fbb      	ldrb	r3, [r7, #30]
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	795b      	ldrb	r3, [r3, #5]
 8004714:	3301      	adds	r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	715a      	strb	r2, [r3, #5]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	795b      	ldrb	r3, [r3, #5]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d010      	beq.n	8004746 <CO_LEDs_process+0xc6>
 8004724:	2b06      	cmp	r3, #6
 8004726:	dc12      	bgt.n	800474e <CO_LEDs_process+0xce>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d002      	beq.n	8004732 <CO_LEDs_process+0xb2>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d005      	beq.n	800473c <CO_LEDs_process+0xbc>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 8004730:	e00d      	b.n	800474e <CO_LEDs_process+0xce>
                case 1: rd |= CO_LED_flash_1; break;
 8004732:	7ffb      	ldrb	r3, [r7, #31]
 8004734:	f043 0304 	orr.w	r3, r3, #4
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e009      	b.n	8004750 <CO_LEDs_process+0xd0>
                case 2: gr |= CO_LED_flash_1; break;
 800473c:	7fbb      	ldrb	r3, [r7, #30]
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	77bb      	strb	r3, [r7, #30]
 8004744:	e004      	b.n	8004750 <CO_LEDs_process+0xd0>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	715a      	strb	r2, [r3, #5]
 800474c:	e000      	b.n	8004750 <CO_LEDs_process+0xd0>
                default: break;
 800474e:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	799b      	ldrb	r3, [r3, #6]
 8004754:	3301      	adds	r3, #1
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	719a      	strb	r2, [r3, #6]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	799b      	ldrb	r3, [r3, #6]
 8004760:	3b01      	subs	r3, #1
 8004762:	2b07      	cmp	r3, #7
 8004764:	d820      	bhi.n	80047a8 <CO_LEDs_process+0x128>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <CO_LEDs_process+0xec>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004797 	.word	0x08004797
 8004774:	0800478d 	.word	0x0800478d
 8004778:	08004797 	.word	0x08004797
 800477c:	080047a9 	.word	0x080047a9
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047a1 	.word	0x080047a1
                case 1: case 3: rd |= CO_LED_flash_2; break;
 800478c:	7ffb      	ldrb	r3, [r7, #31]
 800478e:	f043 0308 	orr.w	r3, r3, #8
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e009      	b.n	80047aa <CO_LEDs_process+0x12a>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 8004796:	7fbb      	ldrb	r3, [r7, #30]
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	77bb      	strb	r3, [r7, #30]
 800479e:	e004      	b.n	80047aa <CO_LEDs_process+0x12a>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	719a      	strb	r2, [r3, #6]
 80047a6:	e000      	b.n	80047aa <CO_LEDs_process+0x12a>
                default: break;
 80047a8:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	79db      	ldrb	r3, [r3, #7]
 80047ae:	3301      	adds	r3, #1
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	71da      	strb	r2, [r3, #7]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	79db      	ldrb	r3, [r3, #7]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	2b09      	cmp	r3, #9
 80047be:	d825      	bhi.n	800480c <CO_LEDs_process+0x18c>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <CO_LEDs_process+0x148>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047f1 	.word	0x080047f1
 80047d4:	080047fb 	.word	0x080047fb
 80047d8:	080047f1 	.word	0x080047f1
 80047dc:	080047fb 	.word	0x080047fb
 80047e0:	0800480d 	.word	0x0800480d
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004805 	.word	0x08004805
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 80047f0:	7ffb      	ldrb	r3, [r7, #31]
 80047f2:	f043 0310 	orr.w	r3, r3, #16
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e009      	b.n	800480e <CO_LEDs_process+0x18e>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 80047fa:	7fbb      	ldrb	r3, [r7, #30]
 80047fc:	f043 0310 	orr.w	r3, r3, #16
 8004800:	77bb      	strb	r3, [r7, #30]
 8004802:	e004      	b.n	800480e <CO_LEDs_process+0x18e>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	71da      	strb	r2, [r3, #7]
 800480a:	e000      	b.n	800480e <CO_LEDs_process+0x18e>
                default: break;
 800480c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	7a1b      	ldrb	r3, [r3, #8]
 8004812:	3301      	adds	r3, #1
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	721a      	strb	r2, [r3, #8]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	7a1b      	ldrb	r3, [r3, #8]
 800481e:	3b01      	subs	r3, #1
 8004820:	2b0b      	cmp	r3, #11
 8004822:	d834      	bhi.n	800488e <CO_LEDs_process+0x20e>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <CO_LEDs_process+0x1ac>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	0800485d 	.word	0x0800485d
 8004830:	08004867 	.word	0x08004867
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004867 	.word	0x08004867
 800483c:	0800485d 	.word	0x0800485d
 8004840:	08004867 	.word	0x08004867
 8004844:	0800485d 	.word	0x0800485d
 8004848:	08004867 	.word	0x08004867
 800484c:	0800488f 	.word	0x0800488f
 8004850:	0800488f 	.word	0x0800488f
 8004854:	0800488f 	.word	0x0800488f
 8004858:	08004871 	.word	0x08004871
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 800485c:	7ffb      	ldrb	r3, [r7, #31]
 800485e:	f043 0320 	orr.w	r3, r3, #32
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e014      	b.n	8004890 <CO_LEDs_process+0x210>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 8004866:	7fbb      	ldrb	r3, [r7, #30]
 8004868:	f043 0320 	orr.w	r3, r3, #32
 800486c:	77bb      	strb	r3, [r7, #30]
 800486e:	e00f      	b.n	8004890 <CO_LEDs_process+0x210>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	721a      	strb	r2, [r3, #8]
 8004876:	e00b      	b.n	8004890 <CO_LEDs_process+0x210>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	7a5b      	ldrb	r3, [r3, #9]
 800487c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004880:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	7a9b      	ldrb	r3, [r3, #10]
 8004886:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800488a:	77bb      	strb	r3, [r7, #30]
 800488c:	e000      	b.n	8004890 <CO_LEDs_process+0x210>
                default: break;
 800488e:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <CO_LEDs_process+0x220>
 8004896:	7ffb      	ldrb	r3, [r7, #31]
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e003      	b.n	80048a8 <CO_LEDs_process+0x228>
        else               gr |= CO_LED_flicker;
 80048a0:	7fbb      	ldrb	r3, [r7, #30]
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80048b0:	4293      	cmp	r3, r2
 80048b2:	f63f aefa 	bhi.w	80046aa <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d079      	beq.n	80049b0 <CO_LEDs_process+0x330>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <CO_LEDs_process+0x248>
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
 80048c6:	e032      	b.n	800492e <CO_LEDs_process+0x2ae>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 80048c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <CO_LEDs_process+0x25a>
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
 80048d8:	e029      	b.n	800492e <CO_LEDs_process+0x2ae>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <CO_LEDs_process+0x26a>
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	75fb      	strb	r3, [r7, #23]
 80048e8:	e021      	b.n	800492e <CO_LEDs_process+0x2ae>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 80048ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <CO_LEDs_process+0x27a>
 80048f0:	7ffb      	ldrb	r3, [r7, #31]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	75fb      	strb	r3, [r7, #23]
 80048f8:	e019      	b.n	800492e <CO_LEDs_process+0x2ae>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <CO_LEDs_process+0x28a>
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	75fb      	strb	r3, [r7, #23]
 8004908:	e011      	b.n	800492e <CO_LEDs_process+0x2ae>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <CO_LEDs_process+0x29a>
 8004910:	7ffb      	ldrb	r3, [r7, #31]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	75fb      	strb	r3, [r7, #23]
 8004918:	e009      	b.n	800492e <CO_LEDs_process+0x2ae>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 800491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <CO_LEDs_process+0x2aa>
 8004920:	7ffb      	ldrb	r3, [r7, #31]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	75fb      	strb	r3, [r7, #23]
 8004928:	e001      	b.n	800492e <CO_LEDs_process+0x2ae>
        else                                        rd_co = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <CO_LEDs_process+0x2be>
 8004934:	7fbb      	ldrb	r3, [r7, #30]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	75bb      	strb	r3, [r7, #22]
 800493c:	e024      	b.n	8004988 <CO_LEDs_process+0x308>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 800493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <CO_LEDs_process+0x2ce>
 8004944:	7fbb      	ldrb	r3, [r7, #30]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	75bb      	strb	r3, [r7, #22]
 800494c:	e01c      	b.n	8004988 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	2b04      	cmp	r3, #4
 8004954:	d104      	bne.n	8004960 <CO_LEDs_process+0x2e0>
 8004956:	7fbb      	ldrb	r3, [r7, #30]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	75bb      	strb	r3, [r7, #22]
 800495e:	e013      	b.n	8004988 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8004960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004964:	2b7f      	cmp	r3, #127	; 0x7f
 8004966:	d104      	bne.n	8004972 <CO_LEDs_process+0x2f2>
 8004968:	7fbb      	ldrb	r3, [r7, #30]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	75bb      	strb	r3, [r7, #22]
 8004970:	e00a      	b.n	8004988 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	2b05      	cmp	r3, #5
 8004978:	d104      	bne.n	8004984 <CO_LEDs_process+0x304>
 800497a:	2301      	movs	r3, #1
 800497c:	75bb      	strb	r3, [r7, #22]
 800497e:	e003      	b.n	8004988 <CO_LEDs_process+0x308>
 8004980:	ffff3cb0 	.word	0xffff3cb0
        else                                        gr_co = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <CO_LEDs_process+0x316>
 800498e:	7ffb      	ldrb	r3, [r7, #31]
 8004990:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004994:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 8004996:	7dbb      	ldrb	r3, [r7, #22]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <CO_LEDs_process+0x324>
 800499c:	7fbb      	ldrb	r3, [r7, #30]
 800499e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a2:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	7ffa      	ldrb	r2, [r7, #31]
 80049a8:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	7fba      	ldrb	r2, [r7, #30]
 80049ae:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 80049b0:	bf00      	nop
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b090      	sub	sp, #64	; 0x40
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	791b      	ldrb	r3, [r3, #4]
 80049ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 80049d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	f040 814c 	bne.w	8004c74 <CO_LSSslave_receive+0x2b8>
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 8147 	bne.w	8004c74 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 80049e6:	2300      	movs	r3, #0
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	3305      	adds	r3, #5
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 80049f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d12c      	bne.n	8004a5a <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8004a06:	7ffb      	ldrb	r3, [r7, #31]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <CO_LSSslave_receive+0x56>
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d020      	beq.n	8004a52 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8004a10:	e12a      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a14:	7c1b      	ldrb	r3, [r3, #16]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d110      	bne.n	8004a3c <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8004a20:	2bff      	cmp	r3, #255	; 0xff
 8004a22:	d10b      	bne.n	8004a3c <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	d006      	beq.n	8004a3c <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	2200      	movs	r2, #0
 8004a40:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	3314      	adds	r3, #20
 8004a46:	2210      	movs	r2, #16
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f022 fc36 	bl	80272bc <memset>
                    break;
 8004a50:	e10a      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	2201      	movs	r2, #1
 8004a56:	741a      	strb	r2, [r3, #16]
                    break;
 8004a58:	e106      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5c:	7c1b      	ldrb	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 80ee 	bne.w	8004c40 <CO_LSSslave_receive+0x284>
            switch (cs) {
 8004a64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a68:	3b40      	subs	r3, #64	; 0x40
 8004a6a:	2b11      	cmp	r3, #17
 8004a6c:	f200 80f7 	bhi.w	8004c5e <CO_LSSslave_receive+0x2a2>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <CO_LSSslave_receive+0xbc>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004ac1 	.word	0x08004ac1
 8004a7c:	08004ad1 	.word	0x08004ad1
 8004a80:	08004ae1 	.word	0x08004ae1
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004c5f 	.word	0x08004c5f
 8004a8c:	08004c5f 	.word	0x08004c5f
 8004a90:	08004c5f 	.word	0x08004c5f
 8004a94:	08004c5f 	.word	0x08004c5f
 8004a98:	08004c5f 	.word	0x08004c5f
 8004a9c:	08004c5f 	.word	0x08004c5f
 8004aa0:	08004c5f 	.word	0x08004c5f
 8004aa4:	08004c5f 	.word	0x08004c5f
 8004aa8:	08004c5f 	.word	0x08004c5f
 8004aac:	08004c5f 	.word	0x08004c5f
 8004ab0:	08004c5f 	.word	0x08004c5f
 8004ab4:	08004c5f 	.word	0x08004c5f
 8004ab8:	08004c5f 	.word	0x08004c5f
 8004abc:	08004b4d 	.word	0x08004b4d
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	615a      	str	r2, [r3, #20]
                break;
 8004ace:	e0cb      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004adc:	619a      	str	r2, [r3, #24]
                break;
 8004ade:	e0c3      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	61da      	str	r2, [r3, #28]
                break;
 8004aee:	e0bb      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	3301      	adds	r3, #1
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afc:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	f040 80ab 	bne.w	8004c62 <CO_LSSslave_receive+0x2a6>
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	f040 80a4 	bne.w	8004c62 <CO_LSSslave_receive+0x2a6>
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	f040 809d 	bne.w	8004c62 <CO_LSSslave_receive+0x2a6>
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	f040 8096 	bne.w	8004c62 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2201      	movs	r2, #1
 8004b3a:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004b42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 8004b46:	2301      	movs	r3, #1
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 8004b4a:	e08a      	b.n	8004c62 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2bff      	cmp	r3, #255	; 0xff
 8004b54:	f040 8087 	bne.w	8004c66 <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8004b5e:	2bff      	cmp	r3, #255	; 0xff
 8004b60:	f040 8081 	bne.w	8004c66 <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	795b      	ldrb	r3, [r3, #5]
 8004b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	799b      	ldrb	r3, [r3, #6]
 8004b70:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	79db      	ldrb	r3, [r3, #7]
 8004b78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8004b7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b80:	2b1f      	cmp	r3, #31
 8004b82:	d903      	bls.n	8004b8c <CO_LSSslave_receive+0x1d0>
 8004b84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d16d      	bne.n	8004c68 <CO_LSSslave_receive+0x2ac>
 8004b8c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d869      	bhi.n	8004c68 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8004b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d865      	bhi.n	8004c68 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8004bac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d10d      	bne.n	8004bd0 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	3324      	adds	r3, #36	; 0x24
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f022 fb77 	bl	80272bc <memset>
 8004bce:	e02c      	b.n	8004c2a <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bd6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d125      	bne.n	8004c2a <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8004bde:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8004bec:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	405a      	eors	r2, r3
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d113      	bne.n	8004c2a <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8004c02:	2301      	movs	r3, #1
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8004c10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <CO_LSSslave_receive+0x26e>
 8004c18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004c1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d202      	bcs.n	8004c2a <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	2201      	movs	r2, #1
 8004c28:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01a      	beq.n	8004c66 <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 8004c3e:	e012      	b.n	8004c66 <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	3349      	adds	r3, #73	; 0x49
 8004c44:	2208      	movs	r2, #8
 8004c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f022 fb0f 	bl	802726c <memcpy>
            LSSslave->service = cs;
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c5c:	e004      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
                break;
 8004c5e:	bf00      	nop
 8004c60:	e002      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
                break;
 8004c62:	bf00      	nop
 8004c64:	e000      	b.n	8004c68 <CO_LSSslave_receive+0x2ac>
                break;
 8004c66:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	2201      	movs	r2, #1
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8004c74:	bf00      	nop
 8004c76:	3740      	adds	r7, #64	; 0x40
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af04      	add	r7, sp, #16
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d018      	beq.n	8004cc6 <CO_LSSslave_init+0x4a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d015      	beq.n	8004cc6 <CO_LSSslave_init+0x4a>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <CO_LSSslave_init+0x4a>
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00f      	beq.n	8004cc6 <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	b25b      	sxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da06      	bge.n	8004ccc <CO_LSSslave_init+0x50>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2bff      	cmp	r3, #255	; 0xff
 8004cc4:	d002      	beq.n	8004ccc <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e046      	b.n	8004d5a <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8004ccc:	2274      	movs	r2, #116	; 0x74
 8004cce:	2100      	movs	r1, #0
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f022 faf3 	bl	80272bc <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2210      	movs	r2, #16
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f022 fac5 	bl	802726c <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8004d0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d0e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004d10:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <CO_LSSslave_init+0xe8>)
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004d20:	6a38      	ldr	r0, [r7, #32]
 8004d22:	f001 f9dd 	bl	80060e0 <CO_CANrxBufferInit>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2e:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8004d30:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d32:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004d34:	2300      	movs	r3, #0
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	2308      	movs	r3, #8
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d40:	f001 fa2a 	bl	8006198 <CO_CANtxBufferInit>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8004d52:	23ff      	movs	r3, #255	; 0xff
 8004d54:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8004d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	080049bd 	.word	0x080049bd

08004d68 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	; 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8004d70:	2300      	movs	r3, #0
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8203 	beq.w	8005184 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	3305      	adds	r3, #5
 8004d88:	2208      	movs	r2, #8
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f022 fa95 	bl	80272bc <memset>

        switch (LSSslave->service) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004d98:	3b04      	subs	r3, #4
 8004d9a:	2b5a      	cmp	r3, #90	; 0x5a
 8004d9c:	f200 81dd 	bhi.w	800515a <CO_LSSslave_process+0x3f2>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <CO_LSSslave_process+0x40>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004f15 	.word	0x08004f15
 8004dac:	0800515b 	.word	0x0800515b
 8004db0:	0800515b 	.word	0x0800515b
 8004db4:	0800515b 	.word	0x0800515b
 8004db8:	0800515b 	.word	0x0800515b
 8004dbc:	0800515b 	.word	0x0800515b
 8004dc0:	0800515b 	.word	0x0800515b
 8004dc4:	0800515b 	.word	0x0800515b
 8004dc8:	0800515b 	.word	0x0800515b
 8004dcc:	0800515b 	.word	0x0800515b
 8004dd0:	0800515b 	.word	0x0800515b
 8004dd4:	0800515b 	.word	0x0800515b
 8004dd8:	0800515b 	.word	0x0800515b
 8004ddc:	08004f29 	.word	0x08004f29
 8004de0:	0800515b 	.word	0x0800515b
 8004de4:	08004f77 	.word	0x08004f77
 8004de8:	0800515b 	.word	0x0800515b
 8004dec:	08005013 	.word	0x08005013
 8004df0:	0800515b 	.word	0x0800515b
 8004df4:	08005051 	.word	0x08005051
 8004df8:	0800515b 	.word	0x0800515b
 8004dfc:	0800515b 	.word	0x0800515b
 8004e00:	0800515b 	.word	0x0800515b
 8004e04:	0800515b 	.word	0x0800515b
 8004e08:	0800515b 	.word	0x0800515b
 8004e0c:	0800515b 	.word	0x0800515b
 8004e10:	0800515b 	.word	0x0800515b
 8004e14:	0800515b 	.word	0x0800515b
 8004e18:	0800515b 	.word	0x0800515b
 8004e1c:	0800515b 	.word	0x0800515b
 8004e20:	0800515b 	.word	0x0800515b
 8004e24:	0800515b 	.word	0x0800515b
 8004e28:	0800515b 	.word	0x0800515b
 8004e2c:	0800515b 	.word	0x0800515b
 8004e30:	0800515b 	.word	0x0800515b
 8004e34:	0800515b 	.word	0x0800515b
 8004e38:	0800515b 	.word	0x0800515b
 8004e3c:	0800515b 	.word	0x0800515b
 8004e40:	0800515b 	.word	0x0800515b
 8004e44:	0800515b 	.word	0x0800515b
 8004e48:	0800515b 	.word	0x0800515b
 8004e4c:	0800515b 	.word	0x0800515b
 8004e50:	0800515b 	.word	0x0800515b
 8004e54:	0800515b 	.word	0x0800515b
 8004e58:	0800515b 	.word	0x0800515b
 8004e5c:	0800515b 	.word	0x0800515b
 8004e60:	0800515b 	.word	0x0800515b
 8004e64:	0800515b 	.word	0x0800515b
 8004e68:	0800515b 	.word	0x0800515b
 8004e6c:	0800515b 	.word	0x0800515b
 8004e70:	0800515b 	.word	0x0800515b
 8004e74:	0800515b 	.word	0x0800515b
 8004e78:	0800515b 	.word	0x0800515b
 8004e7c:	0800515b 	.word	0x0800515b
 8004e80:	0800515b 	.word	0x0800515b
 8004e84:	0800515b 	.word	0x0800515b
 8004e88:	0800515b 	.word	0x0800515b
 8004e8c:	0800515b 	.word	0x0800515b
 8004e90:	0800515b 	.word	0x0800515b
 8004e94:	0800515b 	.word	0x0800515b
 8004e98:	0800515b 	.word	0x0800515b
 8004e9c:	0800515b 	.word	0x0800515b
 8004ea0:	0800515b 	.word	0x0800515b
 8004ea4:	08004f1b 	.word	0x08004f1b
 8004ea8:	0800515b 	.word	0x0800515b
 8004eac:	0800515b 	.word	0x0800515b
 8004eb0:	0800515b 	.word	0x0800515b
 8004eb4:	0800515b 	.word	0x0800515b
 8004eb8:	0800515b 	.word	0x0800515b
 8004ebc:	0800515b 	.word	0x0800515b
 8004ec0:	0800515b 	.word	0x0800515b
 8004ec4:	0800515b 	.word	0x0800515b
 8004ec8:	0800515b 	.word	0x0800515b
 8004ecc:	0800515b 	.word	0x0800515b
 8004ed0:	0800515b 	.word	0x0800515b
 8004ed4:	0800515b 	.word	0x0800515b
 8004ed8:	0800515b 	.word	0x0800515b
 8004edc:	0800514d 	.word	0x0800514d
 8004ee0:	0800515b 	.word	0x0800515b
 8004ee4:	0800515b 	.word	0x0800515b
 8004ee8:	0800515b 	.word	0x0800515b
 8004eec:	0800515b 	.word	0x0800515b
 8004ef0:	0800515b 	.word	0x0800515b
 8004ef4:	0800515b 	.word	0x0800515b
 8004ef8:	0800515b 	.word	0x0800515b
 8004efc:	0800515b 	.word	0x0800515b
 8004f00:	080050a7 	.word	0x080050a7
 8004f04:	080050c9 	.word	0x080050c9
 8004f08:	080050eb 	.word	0x080050eb
 8004f0c:	0800510d 	.word	0x0800510d
 8004f10:	0800512f 	.word	0x0800512f
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8004f14:	2301      	movs	r3, #1
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8004f18:	e126      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	2244      	movs	r2, #68	; 0x44
 8004f20:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8004f22:	2301      	movs	r3, #1
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f26:	e11f      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004f2e:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <CO_LSSslave_process+0x1dc>
 8004f3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	da02      	bge.n	8004f4a <CO_LSSslave_process+0x1e2>
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	2bff      	cmp	r3, #255	; 0xff
 8004f48:	d104      	bne.n	8004f54 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	7cfa      	ldrb	r2, [r7, #19]
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e002      	b.n	8004f5a <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004f64:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004f6e:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8004f70:	2301      	movs	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f74:	e0f8      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80ef 	beq.w	800515e <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004f86:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004f8e:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004f9c:	7f7b      	ldrb	r3, [r7, #29]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d121      	bne.n	8004fe6 <CO_LSSslave_process+0x27e>
 8004fa2:	7f3b      	ldrb	r3, [r7, #28]
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d01e      	beq.n	8004fe6 <CO_LSSslave_process+0x27e>
 8004fa8:	7f3b      	ldrb	r3, [r7, #28]
 8004faa:	2b09      	cmp	r3, #9
 8004fac:	d81b      	bhi.n	8004fe6 <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8004fae:	7f3b      	ldrb	r3, [r7, #28]
 8004fb0:	4a77      	ldr	r2, [pc, #476]	; (8005190 <CO_LSSslave_process+0x428>)
 8004fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fb6:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004fc0:	8b79      	ldrh	r1, [r7, #26]
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4798      	blx	r3
 8004fc6:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	8b7a      	ldrh	r2, [r7, #26]
 8004fd4:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004fd6:	e009      	b.n	8004fec <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8004fd8:	23ff      	movs	r3, #255	; 0xff
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8004fe4:	e002      	b.n	8004fec <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8004ff6:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005000:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800500a:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 800500c:	2301      	movs	r3, #1
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005010:	e0aa      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80a3 	beq.w	8005162 <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a0 	beq.w	8005166 <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800502c:	b29b      	uxth	r3, r3
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005038:	b29a      	uxth	r2, r3
 800503a:	8bfb      	ldrh	r3, [r7, #30]
 800503c:	4313      	orrs	r3, r2
 800503e:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005048:	8bf9      	ldrh	r1, [r7, #30]
 800504a:	4610      	mov	r0, r2
 800504c:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 800504e:	e08a      	b.n	8005166 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005064:	e011      	b.n	800508a <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005072:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005078:	8812      	ldrh	r2, [r2, #0]
 800507a:	4798      	blx	r3
 800507c:	6238      	str	r0, [r7, #32]
                if (!result) {
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8005084:	2302      	movs	r3, #2
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005094:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800509e:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80050a0:	2301      	movs	r3, #1
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050a4:	e060      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80050b0:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	3306      	adds	r3, #6
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]
            CANsend = true;
 80050c2:	2301      	movs	r3, #1
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050c6:	e04f      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80050d2:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	3306      	adds	r3, #6
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]
            CANsend = true;
 80050e4:	2301      	movs	r3, #1
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050e8:	e03e      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80050f4:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	3306      	adds	r3, #6
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8005106:	2301      	movs	r3, #1
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800510a:	e02d      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005116:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	3306      	adds	r3, #6
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8005128:	2301      	movs	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800512c:	e01c      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005138:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8005144:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8005146:	2301      	movs	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800514a:	e00d      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	224f      	movs	r2, #79	; 0x4f
 8005152:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8005154:	2301      	movs	r3, #1
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005158:	e006      	b.n	8005168 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 800515a:	bf00      	nop
 800515c:	e004      	b.n	8005168 <CO_LSSslave_process+0x400>
                break;
 800515e:	bf00      	nop
 8005160:	e002      	b.n	8005168 <CO_LSSslave_process+0x400>
                break;
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <CO_LSSslave_process+0x400>
            break;
 8005166:	bf00      	nop
        }
        }

        if(CANsend) {
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f001 f8d3 	bl	8006324 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005186:	4618      	mov	r0, r3
 8005188:	3730      	adds	r7, #48	; 0x30
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	0802b364 	.word	0x0802b364

08005194 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	08db      	lsrs	r3, r3, #3
 80051a4:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	2201      	movs	r2, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b09      	cmp	r3, #9
 80051be:	d807      	bhi.n	80051d0 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	5cd2      	ldrb	r2, [r2, r3]
 80051c6:	7bbb      	ldrb	r3, [r7, #14]
 80051c8:	4013      	ands	r3, r2
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <CO_isError+0x40>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <CO_isError+0x42>
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <CO_getErrorRegister+0x1e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <CO_getErrorRegister+0x1e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	e000      	b.n	8005202 <CO_getErrorRegister+0x20>
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <CO_NMT_getInternalState+0x16>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f993 3000 	ldrsb.w	r3, [r3]
 8005222:	e000      	b.n	8005226 <CO_NMT_getInternalState+0x18>
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <CO_LSSslave_getState+0x14>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	7c1b      	ldrb	r3, [r3, #16]
 8005244:	e000      	b.n	8005248 <CO_LSSslave_getState+0x16>
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 800526a:	2140      	movs	r1, #64	; 0x40
 800526c:	2001      	movs	r0, #1
 800526e:	f021 fde3 	bl	8026e38 <calloc>
 8005272:	4603      	mov	r3, r0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80f2 	beq.w	8005462 <CO_new+0x20e>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3340      	adds	r3, #64	; 0x40
 8005282:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8005284:	212c      	movs	r1, #44	; 0x2c
 8005286:	2001      	movs	r0, #1
 8005288:	f021 fdd6 	bl	8026e38 <calloc>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	611a      	str	r2, [r3, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80e4 	beq.w	8005466 <CO_new+0x212>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	332c      	adds	r3, #44	; 0x2c
 80052a2:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 80052a4:	2308      	movs	r3, #8
 80052a6:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80052a8:	2130      	movs	r1, #48	; 0x30
 80052aa:	2001      	movs	r0, #1
 80052ac:	f021 fdc4 	bl	8026e38 <calloc>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	615a      	str	r2, [r3, #20]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80d4 	beq.w	800546a <CO_new+0x216>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3330      	adds	r3, #48	; 0x30
 80052c6:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80052c8:	7afb      	ldrb	r3, [r7, #11]
 80052ca:	2110      	movs	r1, #16
 80052cc:	4618      	mov	r0, r3
 80052ce:	f021 fdb3 	bl	8026e38 <calloc>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	619a      	str	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80c5 	beq.w	800546e <CO_new+0x21a>
 80052e4:	7afb      	ldrb	r3, [r7, #11]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80052ee:	2150      	movs	r1, #80	; 0x50
 80052f0:	2001      	movs	r0, #1
 80052f2:	f021 fda1 	bl	8026e38 <calloc>
 80052f6:	4603      	mov	r3, r0
 80052f8:	461a      	mov	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	61da      	str	r2, [r3, #28]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80b5 	beq.w	8005472 <CO_new+0x21e>
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3350      	adds	r3, #80	; 0x50
 800530c:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 800530e:	2311      	movs	r3, #17
 8005310:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8005312:	7abb      	ldrb	r3, [r7, #10]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d912      	bls.n	800533e <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005318:	7abb      	ldrb	r3, [r7, #10]
 800531a:	2108      	movs	r1, #8
 800531c:	4618      	mov	r0, r3
 800531e:	f021 fd8b 	bl	8026e38 <calloc>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80a1 	beq.w	8005476 <CO_new+0x222>
 8005334:	7abb      	ldrb	r3, [r7, #10]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800533e:	21a8      	movs	r1, #168	; 0xa8
 8005340:	2001      	movs	r0, #1
 8005342:	f021 fd79 	bl	8026e38 <calloc>
 8005346:	4603      	mov	r3, r0
 8005348:	461a      	mov	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	625a      	str	r2, [r3, #36]	; 0x24
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8091 	beq.w	800547a <CO_new+0x226>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	33a8      	adds	r3, #168	; 0xa8
 800535c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	2001      	movs	r0, #1
 8005362:	f021 fd69 	bl	8026e38 <calloc>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8083 	beq.w	800547e <CO_new+0x22a>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	332c      	adds	r3, #44	; 0x2c
 800537c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 800537e:	2160      	movs	r1, #96	; 0x60
 8005380:	2001      	movs	r0, #1
 8005382:	f021 fd59 	bl	8026e38 <calloc>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	62da      	str	r2, [r3, #44]	; 0x2c
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d075      	beq.n	8005482 <CO_new+0x22e>
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	3360      	adds	r3, #96	; 0x60
 800539a:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 800539c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80053a0:	2007      	movs	r0, #7
 80053a2:	f021 fd49 	bl	8026e38 <calloc>
 80053a6:	4603      	mov	r3, r0
 80053a8:	461a      	mov	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d067      	beq.n	8005486 <CO_new+0x232>
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80053bc:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80053be:	210c      	movs	r1, #12
 80053c0:	2001      	movs	r0, #1
 80053c2:	f021 fd39 	bl	8026e38 <calloc>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d059      	beq.n	800548a <CO_new+0x236>
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	330c      	adds	r3, #12
 80053da:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 80053dc:	2174      	movs	r1, #116	; 0x74
 80053de:	2001      	movs	r0, #1
 80053e0:	f021 fd2a 	bl	8026e38 <calloc>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d04c      	beq.n	800548e <CO_new+0x23a>
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	3374      	adds	r3, #116	; 0x74
 80053f8:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 80053fa:	2138      	movs	r1, #56	; 0x38
 80053fc:	2001      	movs	r0, #1
 80053fe:	f021 fd1b 	bl	8026e38 <calloc>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d03f      	beq.n	8005492 <CO_new+0x23e>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3338      	adds	r3, #56	; 0x38
 8005416:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8005418:	210c      	movs	r1, #12
 800541a:	200d      	movs	r0, #13
 800541c:	f021 fd0c 	bl	8026e38 <calloc>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d032      	beq.n	8005496 <CO_new+0x242>
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	339c      	adds	r3, #156	; 0x9c
 8005434:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8005436:	2118      	movs	r1, #24
 8005438:	200c      	movs	r0, #12
 800543a:	f021 fcfd 	bl	8026e38 <calloc>
 800543e:	4603      	mov	r3, r0
 8005440:	461a      	mov	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d025      	beq.n	800549a <CO_new+0x246>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005454:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]
        coFinal = co;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e01c      	b.n	800549c <CO_new+0x248>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8005462:	bf00      	nop
 8005464:	e01a      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8005466:	bf00      	nop
 8005468:	e018      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 800546a:	bf00      	nop
 800546c:	e016      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 800546e:	bf00      	nop
 8005470:	e014      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8005472:	bf00      	nop
 8005474:	e012      	b.n	800549c <CO_new+0x248>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8005476:	bf00      	nop
 8005478:	e010      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800547a:	bf00      	nop
 800547c:	e00e      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800547e:	bf00      	nop
 8005480:	e00c      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8005482:	bf00      	nop
 8005484:	e00a      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8005486:	bf00      	nop
 8005488:	e008      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800548a:	bf00      	nop
 800548c:	e006      	b.n	800549c <CO_new+0x248>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800548e:	bf00      	nop
 8005490:	e004      	b.n	800549c <CO_new+0x248>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <CO_new+0x248>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <CO_new+0x248>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 800549a:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <CO_new+0x254>
        CO_delete(co);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f80b 	bl	80054be <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <CO_new+0x260>
        *heapMemoryUsed = mem;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 80054b4:	697b      	ldr	r3, [r7, #20]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <CO_delete>:

void CO_delete(CO_t *co) {
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d053      	beq.n	8005574 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fdef 	bl	80060b4 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4618      	mov	r0, r3
 80054dc:	f021 feae 	bl	802723c <free>
    CO_free(co->CANrx);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f021 fea9 	bl	802723c <free>
    CO_free(co->CANmodule);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f021 fea4 	bl	802723c <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	4618      	mov	r0, r3
 80054fa:	f021 fe9f 	bl	802723c <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	4618      	mov	r0, r3
 8005504:	f021 fe9a 	bl	802723c <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	4618      	mov	r0, r3
 800550e:	f021 fe95 	bl	802723c <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	4618      	mov	r0, r3
 8005518:	f021 fe90 	bl	802723c <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4618      	mov	r0, r3
 8005522:	f021 fe8b 	bl	802723c <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	4618      	mov	r0, r3
 800552c:	f021 fe86 	bl	802723c <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	4618      	mov	r0, r3
 8005536:	f021 fe81 	bl	802723c <free>

    /* Emergency */
    CO_free(co->em);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	4618      	mov	r0, r3
 8005540:	f021 fe7c 	bl	802723c <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	4618      	mov	r0, r3
 800554a:	f021 fe77 	bl	802723c <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	4618      	mov	r0, r3
 8005554:	f021 fe72 	bl	802723c <free>
    CO_free(co->HBcons);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	4618      	mov	r0, r3
 800555e:	f021 fe6d 	bl	802723c <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	4618      	mov	r0, r3
 8005568:	f021 fe68 	bl	802723c <free>

    /* CANopen object */
    CO_free(co);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f021 fe65 	bl	802723c <free>
 8005572:	e000      	b.n	8005576 <CO_delete+0xb8>
        return;
 8005574:	bf00      	nop
}
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af04      	add	r7, sp, #16
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <CO_CANinit+0x1a>
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	e01a      	b.n	80055cc <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800559e:	68b8      	ldr	r0, [r7, #8]
 80055a0:	f000 fcb6 	bl	8005f10 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6858      	ldr	r0, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6899      	ldr	r1, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	9202      	str	r2, [sp, #8]
 80055b4:	220c      	movs	r2, #12
 80055b6:	9201      	str	r2, [sp, #4]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	230d      	movs	r3, #13
 80055bc:	460a      	mov	r2, r1
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	f000 fcce 	bl	8005f60 <CO_CANmodule_init>
 80055c4:	4603      	mov	r3, r0
 80055c6:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 80055c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08c      	sub	sp, #48	; 0x30
 80055d8:	af06      	add	r7, sp, #24
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ec:	e01a      	b.n	8005624 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	6852      	ldr	r2, [r2, #4]
 80055fa:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80055fe:	9105      	str	r1, [sp, #20]
 8005600:	210b      	movs	r1, #11
 8005602:	9104      	str	r1, [sp, #16]
 8005604:	9203      	str	r2, [sp, #12]
 8005606:	f240 72e5 	movw	r2, #2021	; 0x7e5
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	220c      	movs	r2, #12
 800560e:	9201      	str	r2, [sp, #4]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	f7ff fb30 	bl	8004c7c <CO_LSSslave_init>
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8005620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 800562c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800562e:	b091      	sub	sp, #68	; 0x44
 8005630:	af0a      	add	r7, sp, #40	; 0x28
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005640:	f04f 33ff 	mov.w	r3, #4294967295
 8005644:	e134      	b.n	80058b0 <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <CO_CANopenInit+0x26>
        em = co->em;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8005658:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800565c:	2bff      	cmp	r3, #255	; 0xff
 800565e:	d103      	bne.n	8005668 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e00a      	b.n	800567e <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8005668:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <CO_CANopenInit+0x4c>
 8005670:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8005674:	2b00      	cmp	r3, #0
 8005676:	da02      	bge.n	800567e <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	e118      	b.n	80058b0 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe ffe4 	bl	8004650 <CO_LEDs_init>
 8005688:	4603      	mov	r3, r0
 800568a:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 800568c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <CO_CANopenInit+0x6e>
 8005694:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005698:	e10a      	b.n	80058b0 <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 80056a2:	f06f 0312 	mvn.w	r3, #18
 80056a6:	e103      	b.n	80058b0 <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	69d8      	ldr	r0, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80056b0:	4b81      	ldr	r3, [pc, #516]	; (80058b8 <CO_CANopenInit+0x28c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 80056be:	4b7e      	ldr	r3, [pc, #504]	; (80058b8 <CO_CANopenInit+0x28c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 80056c4:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 80056c6:	4a7c      	ldr	r2, [pc, #496]	; (80058b8 <CO_CANopenInit+0x28c>)
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 80056cc:	3218      	adds	r2, #24
 80056ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80056d0:	9105      	str	r1, [sp, #20]
 80056d2:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80056d6:	9104      	str	r1, [sp, #16]
 80056d8:	9203      	str	r2, [sp, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	9202      	str	r2, [sp, #8]
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	2311      	movs	r3, #17
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4633      	mov	r3, r6
 80056e6:	462a      	mov	r2, r5
 80056e8:	4621      	mov	r1, r4
 80056ea:	f7fa ffa7 	bl	800063c <CO_EM_init>
 80056ee:	4603      	mov	r3, r0
 80056f0:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 80056f2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <CO_CANopenInit+0xd4>
 80056fa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80056fe:	e0d7      	b.n	80058b0 <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8005704:	4b6c      	ldr	r3, [pc, #432]	; (80058b8 <CO_CANopenInit+0x28c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 800570a:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	6852      	ldr	r2, [r2, #4]
 8005716:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 800571a:	b289      	uxth	r1, r1
 800571c:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 8005720:	b289      	uxth	r1, r1
 8005722:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8005726:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005728:	9008      	str	r0, [sp, #32]
 800572a:	9107      	str	r1, [sp, #28]
 800572c:	210a      	movs	r1, #10
 800572e:	9106      	str	r1, [sp, #24]
 8005730:	9205      	str	r2, [sp, #20]
 8005732:	2200      	movs	r2, #0
 8005734:	9204      	str	r2, [sp, #16]
 8005736:	2200      	movs	r2, #0
 8005738:	9203      	str	r2, [sp, #12]
 800573a:	9302      	str	r3, [sp, #8]
 800573c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4633      	mov	r3, r6
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4629      	mov	r1, r5
 800574a:	4620      	mov	r0, r4
 800574c:	f7fb fe06 	bl	800135c <CO_NMT_init>
 8005750:	4603      	mov	r3, r0
 8005752:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 8005754:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <CO_CANopenInit+0x136>
 800575c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005760:	e0a6      	b.n	80058b0 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6958      	ldr	r0, [r3, #20]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 800576a:	4b53      	ldr	r3, [pc, #332]	; (80058b8 <CO_CANopenInit+0x28c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 8005770:	3384      	adds	r3, #132	; 0x84
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	6852      	ldr	r2, [r2, #4]
 8005776:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005778:	9103      	str	r1, [sp, #12]
 800577a:	2104      	movs	r1, #4
 800577c:	9102      	str	r1, [sp, #8]
 800577e:	9201      	str	r2, [sp, #4]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2308      	movs	r3, #8
 8005784:	4622      	mov	r2, r4
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	f7fb faec 	bl	8000d64 <CO_HBconsumer_init>
 800578c:	4603      	mov	r3, r0
 800578e:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8005790:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <CO_CANopenInit+0x172>
 8005798:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800579c:	e088      	b.n	80058b0 <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800579e:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <CO_CANopenInit+0x28c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	33b4      	adds	r3, #180	; 0xb4
 80057a6:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80057a8:	2300      	movs	r3, #0
 80057aa:	827b      	strh	r3, [r7, #18]
 80057ac:	e033      	b.n	8005816 <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057b6:	21a8      	movs	r1, #168	; 0xa8
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	18d6      	adds	r6, r2, r3
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	f102 030c 	add.w	r3, r2, #12
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	8a79      	ldrh	r1, [r7, #18]
 80057cc:	3103      	adds	r1, #3
 80057ce:	b289      	uxth	r1, r1
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	6840      	ldr	r0, [r0, #4]
 80057d4:	8a7c      	ldrh	r4, [r7, #18]
 80057d6:	3409      	adds	r4, #9
 80057d8:	b2a4      	uxth	r4, r4
 80057da:	f897 c048 	ldrb.w	ip, [r7, #72]	; 0x48
 80057de:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80057e0:	9505      	str	r5, [sp, #20]
 80057e2:	9404      	str	r4, [sp, #16]
 80057e4:	9003      	str	r0, [sp, #12]
 80057e6:	9102      	str	r1, [sp, #8]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4663      	mov	r3, ip
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7fd fa6c 	bl	8002cd0 <CO_SDOserver_init>
 80057f8:	4603      	mov	r3, r0
 80057fa:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 80057fc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <CO_CANopenInit+0x1de>
 8005804:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005808:	e052      	b.n	80058b0 <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800580a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800580e:	b29b      	uxth	r3, r3
 8005810:	3301      	adds	r3, #1
 8005812:	b29b      	uxth	r3, r3
 8005814:	827b      	strh	r3, [r7, #18]
 8005816:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800581a:	2b00      	cmp	r3, #0
 800581c:	ddc7      	ble.n	80057ae <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <CO_CANopenInit+0x28c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8005828:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2302      	movs	r3, #2
 8005836:	f7fe fe15 	bl	8004464 <CO_TIME_init>
 800583a:	4603      	mov	r3, r0
 800583c:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 800583e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <CO_CANopenInit+0x220>
 8005846:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800584a:	e031      	b.n	80058b0 <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6add      	ldr	r5, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <CO_CANopenInit+0x28c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8005856:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 800585a:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <CO_CANopenInit+0x28c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8005860:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <CO_CANopenInit+0x28c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800586a:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 800586c:	4a12      	ldr	r2, [pc, #72]	; (80058b8 <CO_CANopenInit+0x28c>)
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 8005872:	32a8      	adds	r2, #168	; 0xa8
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	6849      	ldr	r1, [r1, #4]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	6840      	ldr	r0, [r0, #4]
 800587c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800587e:	9406      	str	r4, [sp, #24]
 8005880:	2400      	movs	r4, #0
 8005882:	9405      	str	r4, [sp, #20]
 8005884:	9004      	str	r0, [sp, #16]
 8005886:	2001      	movs	r0, #1
 8005888:	9003      	str	r0, [sp, #12]
 800588a:	9102      	str	r1, [sp, #8]
 800588c:	9201      	str	r2, [sp, #4]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4663      	mov	r3, ip
 8005892:	4632      	mov	r2, r6
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4628      	mov	r0, r5
 8005898:	f7fe fbd6 	bl	8004048 <CO_SYNC_init>
 800589c:	4603      	mov	r3, r0
 800589e:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 80058a0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <CO_CANopenInit+0x282>
 80058a8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80058ac:	e000      	b.n	80058b0 <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b8:	240003a0 	.word	0x240003a0

080058bc <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	b08f      	sub	sp, #60	; 0x3c
 80058c0:	af06      	add	r7, sp, #24
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d102      	bne.n	80058d6 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	e06c      	b.n	80059b0 <CO_CANopenInitPDO+0xf4>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <CO_CANopenInitPDO+0x30>
 80058dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db03      	blt.n	80058ec <CO_CANopenInitPDO+0x30>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <CO_CANopenInitPDO+0x3e>
 80058f4:	f06f 0312 	mvn.w	r3, #18
 80058f8:	e05a      	b.n	80059b0 <CO_CANopenInitPDO+0xf4>
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
 80058fe:	e057      	b.n	80059b0 <CO_CANopenInitPDO+0xf4>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8005900:	4b2d      	ldr	r3, [pc, #180]	; (80059b8 <CO_CANopenInitPDO+0xfc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	33cc      	adds	r3, #204	; 0xcc
 8005908:	61bb      	str	r3, [r7, #24]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 800590a:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <CO_CANopenInitPDO+0xfc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005914:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8005916:	2300      	movs	r3, #0
 8005918:	83fb      	strh	r3, [r7, #30]
 800591a:	e044      	b.n	80059a6 <CO_CANopenInitPDO+0xea>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	83bb      	strh	r3, [r7, #28]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8005920:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005924:	2b03      	cmp	r3, #3
 8005926:	dc09      	bgt.n	800593c <CO_CANopenInitPDO+0x80>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8005928:	8bfb      	ldrh	r3, [r7, #30]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	b29a      	uxth	r2, r3
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	b29b      	uxth	r3, r3
 8005932:	4413      	add	r3, r2
 8005934:	b29b      	uxth	r3, r3
 8005936:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800593a:	83bb      	strh	r3, [r7, #28]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005940:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005944:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	18d5      	adds	r5, r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f103 020c 	add.w	r2, r3, #12
 8005958:	61ba      	str	r2, [r7, #24]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	f102 010c 	add.w	r1, r2, #12
 8005960:	6179      	str	r1, [r7, #20]
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	6849      	ldr	r1, [r1, #4]
 8005966:	8bf8      	ldrh	r0, [r7, #30]
 8005968:	3002      	adds	r0, #2
 800596a:	b280      	uxth	r0, r0
 800596c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800596e:	9405      	str	r4, [sp, #20]
 8005970:	9004      	str	r0, [sp, #16]
 8005972:	9103      	str	r1, [sp, #12]
 8005974:	9202      	str	r2, [sp, #8]
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	8bbb      	ldrh	r3, [r7, #28]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	4633      	mov	r3, r6
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4628      	mov	r0, r5
 8005984:	f7fc fe04 	bl	8002590 <CO_TPDO_init>
 8005988:	4603      	mov	r3, r0
 800598a:	74fb      	strb	r3, [r7, #19]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 800598c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <CO_CANopenInitPDO+0xde>
 8005994:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005998:	e00a      	b.n	80059b0 <CO_CANopenInitPDO+0xf4>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800599a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3301      	adds	r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	83fb      	strh	r3, [r7, #30]
 80059a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	ddb6      	ble.n	800591c <CO_CANopenInitPDO+0x60>
        }
    }
#endif

    return CO_ERROR_NO;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3724      	adds	r7, #36	; 0x24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	240003a0 	.word	0x240003a0

080059bc <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059be:	b097      	sub	sp, #92	; 0x5c
 80059c0:	af08      	add	r7, sp, #32
 80059c2:	61f8      	str	r0, [r7, #28]
 80059c4:	61b9      	str	r1, [r7, #24]
 80059c6:	617a      	str	r2, [r7, #20]
 80059c8:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fc1a 	bl	800520e <CO_NMT_getInternalState>
 80059da:	4603      	mov	r3, r0
 80059dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80059e0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d003      	beq.n	80059f0 <CO_process+0x34>
 80059e8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80059ec:	2b05      	cmp	r3, #5
 80059ee:	d101      	bne.n	80059f4 <CO_process+0x38>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <CO_process+0x3a>
 80059f4:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fcd4 	bl	80063aa <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff f9ae 	bl	8004d68 <CO_LSSslave_process>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	8a5b      	ldrh	r3, [r3, #18]
 8005a24:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 8005a26:	2300      	movs	r3, #0
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fbff 	bl	8005232 <CO_LSSslave_getState>
 8005a34:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <CO_process+0x92>
 8005a48:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 8005a4c:	e000      	b.n	8005a50 <CO_process+0x94>
 8005a4e:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8005a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a52:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8005a62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a64:	f240 3303 	movw	r3, #771	; 0x303
 8005a68:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	2300      	moveq	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	2118      	movs	r1, #24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fb86 	bl	8005194 <CO_isError>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	e000      	b.n	8005a8e <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 8005a8c:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d113      	bne.n	8005abc <CO_process+0x100>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	211b      	movs	r1, #27
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fb7a 	bl	8005194 <CO_isError>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	211c      	movs	r1, #28
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fb71 	bl	8005194 <CO_isError>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <CO_process+0x102>
 8005abc:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8005abe:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fb8c 	bl	80051e2 <CO_getErrorRegister>
 8005aca:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	9307      	str	r3, [sp, #28]
 8005adc:	2300      	movs	r3, #0
 8005ade:	9306      	str	r3, [sp, #24]
 8005ae0:	9205      	str	r2, [sp, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	9503      	str	r5, [sp, #12]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9302      	str	r3, [sp, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	4622      	mov	r2, r4
 8005af8:	6979      	ldr	r1, [r7, #20]
 8005afa:	4630      	mov	r0, r6
 8005afc:	f7fe fdc0 	bl	8004680 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <CO_process+0x152>
        return reset;
 8005b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b0c:	e047      	b.n	8005b9e <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	69d8      	ldr	r0, [r3, #28]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b18:	f7fa fe70 	bl	80007fc <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	6918      	ldr	r0, [r3, #16]
 8005b20:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	f7fb fcd6 	bl	80014d8 <CO_NMT_process>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8005b32:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8005b36:	2b7f      	cmp	r3, #127	; 0x7f
 8005b38:	d003      	beq.n	8005b42 <CO_process+0x186>
 8005b3a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d101      	bne.n	8005b46 <CO_process+0x18a>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <CO_process+0x18c>
 8005b46:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b50:	e011      	b.n	8005b76 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b5a:	21a8      	movs	r1, #168	; 0xa8
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	18d0      	adds	r0, r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b68:	f7fd fb8e 	bl	8003288 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b70:	3301      	adds	r3, #1
 8005b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0e9      	beq.n	8005b52 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	6958      	ldr	r0, [r3, #20]
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b88:	f7fb fa30 	bl	8000fec <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe fce5 	bl	8004564 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 8005b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	373c      	adds	r7, #60	; 0x3c
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005ba8 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8005bb0:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <canopen_app_init+0x58>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8005bba:	f107 0308 	add.w	r3, r7, #8
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fb47 	bl	8005254 <CO_new>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4a0e      	ldr	r2, [pc, #56]	; (8005c04 <canopen_app_init+0x5c>)
 8005bca:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <canopen_app_init+0x5c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8005bd4:	480c      	ldr	r0, [pc, #48]	; (8005c08 <canopen_app_init+0x60>)
 8005bd6:	f021 fcf5 	bl	80275c4 <puts>
        return 1;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e00c      	b.n	8005bf8 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %lu bytes for CANopen objects\n", heapMemoryUsed);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4619      	mov	r1, r3
 8005be2:	480a      	ldr	r0, [pc, #40]	; (8005c0c <canopen_app_init+0x64>)
 8005be4:	f021 fc68 	bl	80274b8 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <canopen_app_init+0x58>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <canopen_app_init+0x5c>)
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8005bf2:	f000 f80d 	bl	8005c10 <canopen_app_resetCommunication>
    return 0;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	2400060c 	.word	0x2400060c
 8005c04:	24000610 	.word	0x24000610
 8005c08:	080281ec 	.word	0x080281ec
 8005c0c:	0802820c 	.word	0x0802820c

08005c10 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b08f      	sub	sp, #60	; 0x3c
 8005c14:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8005c16:	487d      	ldr	r0, [pc, #500]	; (8005e0c <canopen_app_resetCommunication+0x1fc>)
 8005c18:	f021 fcd4 	bl	80275c4 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8005c1c:	4b7c      	ldr	r3, [pc, #496]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8005c26:	4b7b      	ldr	r3, [pc, #492]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f970 	bl	8005f10 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8005c30:	4b77      	ldr	r3, [pc, #476]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fa3c 	bl	80060b4 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8005c3c:	4b74      	ldr	r3, [pc, #464]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a74      	ldr	r2, [pc, #464]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005c42:	6811      	ldr	r1, [r2, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fc98 	bl	800557c <CO_CANinit>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4b71      	ldr	r3, [pc, #452]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005c52:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005c54:	4b70      	ldr	r3, [pc, #448]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005c56:	f993 3000 	ldrsb.w	r3, [r3]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8005c5e:	4b6e      	ldr	r3, [pc, #440]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005c60:	f993 3000 	ldrsb.w	r3, [r3]
 8005c64:	4619      	mov	r1, r3
 8005c66:	486d      	ldr	r0, [pc, #436]	; (8005e1c <canopen_app_resetCommunication+0x20c>)
 8005c68:	f021 fc26 	bl	80274b8 <iprintf>
        return 1;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0c8      	b.n	8005e02 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8005c70:	4b6b      	ldr	r3, [pc, #428]	; (8005e20 <canopen_app_resetCommunication+0x210>)
 8005c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c74:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8005c76:	4b6a      	ldr	r3, [pc, #424]	; (8005e20 <canopen_app_resetCommunication+0x210>)
 8005c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8005c7a:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8005c7c:	4b68      	ldr	r3, [pc, #416]	; (8005e20 <canopen_app_resetCommunication+0x210>)
 8005c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8005c80:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8005c82:	4b67      	ldr	r3, [pc, #412]	; (8005e20 <canopen_app_resetCommunication+0x210>)
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8005c86:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8005c88:	4b61      	ldr	r3, [pc, #388]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4b61      	ldr	r3, [pc, #388]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	4b60      	ldr	r3, [pc, #384]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3302      	adds	r3, #2
 8005c98:	f107 0108 	add.w	r1, r7, #8
 8005c9c:	f7ff fc9a 	bl	80055d4 <CO_LSSinit>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4b5c      	ldr	r3, [pc, #368]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005ca6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005ca8:	4b5b      	ldr	r3, [pc, #364]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005caa:	f993 3000 	ldrsb.w	r3, [r3]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8005cb2:	4b59      	ldr	r3, [pc, #356]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	485a      	ldr	r0, [pc, #360]	; (8005e24 <canopen_app_resetCommunication+0x214>)
 8005cbc:	f021 fbfc 	bl	80274b8 <iprintf>
        return 2;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e09e      	b.n	8005e02 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8005cc4:	4b53      	ldr	r3, [pc, #332]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b52      	ldr	r3, [pc, #328]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	7812      	ldrb	r2, [r2, #0]
 8005cce:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8005cd4:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	4b53      	ldr	r3, [pc, #332]	; (8005e28 <canopen_app_resetCommunication+0x218>)
 8005cda:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8005cdc:	4b4d      	ldr	r3, [pc, #308]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005cde:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	1d3a      	adds	r2, r7, #4
 8005ce4:	9207      	str	r2, [sp, #28]
 8005ce6:	9306      	str	r3, [sp, #24]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9305      	str	r3, [sp, #20]
 8005cec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf6:	9303      	str	r3, [sp, #12]
 8005cf8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005cfc:	9302      	str	r3, [sp, #8]
 8005cfe:	f242 1311 	movw	r3, #8465	; 0x2111
 8005d02:	9301      	str	r3, [sp, #4]
 8005d04:	2300      	movs	r3, #0
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f7ff fc8d 	bl	800562c <CO_CANopenInit>
 8005d12:	4603      	mov	r3, r0
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d18:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01a      	beq.n	8005d5a <canopen_app_resetCommunication+0x14a>
 8005d24:	4b3c      	ldr	r3, [pc, #240]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d26:	f993 3000 	ldrsb.w	r3, [r3]
 8005d2a:	f113 0f13 	cmn.w	r3, #19
 8005d2e:	d014      	beq.n	8005d5a <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8005d30:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d32:	f993 3000 	ldrsb.w	r3, [r3]
 8005d36:	f113 0f0c 	cmn.w	r3, #12
 8005d3a:	d105      	bne.n	8005d48 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	483a      	ldr	r0, [pc, #232]	; (8005e2c <canopen_app_resetCommunication+0x21c>)
 8005d42:	f021 fbb9 	bl	80274b8 <iprintf>
 8005d46:	e006      	b.n	8005d56 <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8005d48:	4b33      	ldr	r3, [pc, #204]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d4a:	f993 3000 	ldrsb.w	r3, [r3]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4837      	ldr	r0, [pc, #220]	; (8005e30 <canopen_app_resetCommunication+0x220>)
 8005d52:	f021 fbb1 	bl	80274b8 <iprintf>
        }
        return 3;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e053      	b.n	8005e02 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8005d5a:	4b2d      	ldr	r3, [pc, #180]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69d9      	ldr	r1, [r3, #28]
 8005d64:	4b30      	ldr	r3, [pc, #192]	; (8005e28 <canopen_app_resetCommunication+0x218>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	785c      	ldrb	r4, [r3, #1]
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	4623      	mov	r3, r4
 8005d74:	f7ff fda2 	bl	80058bc <CO_CANopenInitPDO>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d7e:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d82:	f993 3000 	ldrsb.w	r3, [r3]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d014      	beq.n	8005db4 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8005d90:	f113 0f0c 	cmn.w	r3, #12
 8005d94:	d105      	bne.n	8005da2 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4824      	ldr	r0, [pc, #144]	; (8005e2c <canopen_app_resetCommunication+0x21c>)
 8005d9c:	f021 fb8c 	bl	80274b8 <iprintf>
 8005da0:	e006      	b.n	8005db0 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8005da2:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <canopen_app_resetCommunication+0x208>)
 8005da4:	f993 3000 	ldrsb.w	r3, [r3]
 8005da8:	4619      	mov	r1, r3
 8005daa:	4822      	ldr	r0, [pc, #136]	; (8005e34 <canopen_app_resetCommunication+0x224>)
 8005dac:	f021 fb84 	bl	80274b8 <iprintf>
        }
        return 4;
 8005db0:	2304      	movs	r3, #4
 8005db2:	e026      	b.n	8005e02 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8005db4:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <canopen_app_resetCommunication+0x204>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f00a ff6a 	bl	8010c94 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8005dca:	481b      	ldr	r0, [pc, #108]	; (8005e38 <canopen_app_resetCommunication+0x228>)
 8005dcc:	f021 fbfa 	bl	80275c4 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <canopen_app_resetCommunication+0x200>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f8aa 	bl	8005f30 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8005ddc:	4817      	ldr	r0, [pc, #92]	; (8005e3c <canopen_app_resetCommunication+0x22c>)
 8005dde:	f021 fbf1 	bl	80275c4 <puts>
    fflush(stdout);
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <canopen_app_resetCommunication+0x230>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f021 f8ef 	bl	8026fcc <fflush>
    time_old = time_current = HAL_GetTick();
 8005dee:	f001 fcd9 	bl	80077a4 <HAL_GetTick>
 8005df2:	4603      	mov	r3, r0
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <canopen_app_resetCommunication+0x234>)
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <canopen_app_resetCommunication+0x234>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <canopen_app_resetCommunication+0x238>)
 8005dfe:	6013      	str	r3, [r2, #0]
    return 0;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd90      	pop	{r4, r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08028238 	.word	0x08028238
 8005e10:	24000610 	.word	0x24000610
 8005e14:	2400060c 	.word	0x2400060c
 8005e18:	2400061c 	.word	0x2400061c
 8005e1c:	08028260 	.word	0x08028260
 8005e20:	24000000 	.word	0x24000000
 8005e24:	08028288 	.word	0x08028288
 8005e28:	240003a0 	.word	0x240003a0
 8005e2c:	080282b4 	.word	0x080282b4
 8005e30:	080282dc 	.word	0x080282dc
 8005e34:	08028308 	.word	0x08028308
 8005e38:	08028330 	.word	0x08028330
 8005e3c:	08028358 	.word	0x08028358
 8005e40:	240004cc 	.word	0x240004cc
 8005e44:	24000618 	.word	0x24000618
 8005e48:	24000614 	.word	0x24000614

08005e4c <canopen_app_process>:

void
canopen_app_process() {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8005e52:	f001 fca7 	bl	80077a4 <HAL_GetTick>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <canopen_app_process+0xac>)
 8005e5a:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8005e5c:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <canopen_app_process+0xac>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <canopen_app_process+0xb0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d043      	beq.n	8005ef0 <canopen_app_process+0xa4>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8005e68:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <canopen_app_process+0xac>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b23      	ldr	r3, [pc, #140]	; (8005efc <canopen_app_process+0xb0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <canopen_app_process+0xac>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <canopen_app_process+0xb0>)
 8005e82:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8005e84:	4b1e      	ldr	r3, [pc, #120]	; (8005f00 <canopen_app_process+0xb4>)
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	f7ff fd95 	bl	80059bc <CO_process>
 8005e92:	4603      	mov	r3, r0
 8005e94:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8005e96:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <canopen_app_process+0xb4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	7a5a      	ldrb	r2, [r3, #9]
 8005e9e:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <canopen_app_process+0xb8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	09d2      	lsrs	r2, r2, #7
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8005ea8:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <canopen_app_process+0xb4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	7a9a      	ldrb	r2, [r3, #10]
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <canopen_app_process+0xb8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	09d2      	lsrs	r2, r2, #7
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10f      	bne.n	8005ee0 <canopen_app_process+0x94>
            /* delete objects from memory */
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <canopen_app_process+0xb8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 f823 	bl	8005f10 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8005eca:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <canopen_app_process+0xb4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff faf5 	bl	80054be <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8005ed4:	480c      	ldr	r0, [pc, #48]	; (8005f08 <canopen_app_process+0xbc>)
 8005ed6:	f021 fb75 	bl	80275c4 <puts>
            canopen_app_resetCommunication(); // Reset Communication routine
 8005eda:	f7ff fe99 	bl	8005c10 <canopen_app_resetCommunication>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8005ede:	e007      	b.n	8005ef0 <canopen_app_process+0xa4>
        } else if (reset_status == CO_RESET_APP) {
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d104      	bne.n	8005ef0 <canopen_app_process+0xa4>
            log_printf("CANopenNode Device Reset\n");
 8005ee6:	4809      	ldr	r0, [pc, #36]	; (8005f0c <canopen_app_process+0xc0>)
 8005ee8:	f021 fb6c 	bl	80275c4 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8005eec:	f001 fd95 	bl	8007a1a <HAL_NVIC_SystemReset>
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	24000618 	.word	0x24000618
 8005efc:	24000614 	.word	0x24000614
 8005f00:	24000610 	.word	0x24000610
 8005f04:	2400060c 	.word	0x2400060c
 8005f08:	08028374 	.word	0x08028374
 8005f0c:	0802839c 	.word	0x0802839c

08005f10 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f003 fc74 	bl	8009810 <HAL_FDCAN_Stop>
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#endif
    }
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f003 fc37 	bl	80097ba <HAL_FDCAN_Start>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <CO_CANsetNormalMode+0x28>
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#endif
        {
            CANmodule->CANnormal = true;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	615a      	str	r2, [r3, #20]
        }
    }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <CO_CANmodule_init+0x20>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <CO_CANmodule_init+0x20>
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	e08e      	b.n	80060a4 <CO_CANmodule_init+0x144>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8005f8c:	4a47      	ldr	r2, [pc, #284]	; (80060ac <CO_CANmodule_init+0x14c>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	887a      	ldrh	r2, [r7, #2]
 8005f9c:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fa8:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	82fb      	strh	r3, [r7, #22]
 8005fd8:	e02b      	b.n	8006032 <CO_CANmodule_init+0xd2>
        rxArray[i].ident = 0U;
 8005fda:	8afa      	ldrh	r2, [r7, #22]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8005fee:	8afa      	ldrh	r2, [r7, #22]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006002:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8006004:	8afa      	ldrh	r2, [r7, #22]
 8006006:	4613      	mov	r3, r2
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8006018:	8afa      	ldrh	r2, [r7, #22]
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	2200      	movs	r2, #0
 800602a:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 800602c:	8afb      	ldrh	r3, [r7, #22]
 800602e:	3301      	adds	r3, #1
 8006030:	82fb      	strh	r3, [r7, #22]
 8006032:	8afa      	ldrh	r2, [r7, #22]
 8006034:	887b      	ldrh	r3, [r7, #2]
 8006036:	429a      	cmp	r2, r3
 8006038:	d3cf      	bcc.n	8005fda <CO_CANmodule_init+0x7a>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 800603a:	2300      	movs	r3, #0
 800603c:	82bb      	strh	r3, [r7, #20]
 800603e:	e00c      	b.n	800605a <CO_CANmodule_init+0xfa>
        txArray[i].bufferFull = false;
 8006040:	8aba      	ldrh	r2, [r7, #20]
 8006042:	4613      	mov	r3, r2
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	461a      	mov	r2, r3
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	4413      	add	r3, r2
 8006050:	2200      	movs	r2, #0
 8006052:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8006054:	8abb      	ldrh	r3, [r7, #20]
 8006056:	3301      	adds	r3, #1
 8006058:	82bb      	strh	r3, [r7, #20]
 800605a:	8aba      	ldrh	r2, [r7, #20]
 800605c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800605e:	429a      	cmp	r2, r3
 8006060:	d3ee      	bcc.n	8006040 <CO_CANmodule_init+0xe0>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	4798      	blx	r3
     * Accept non-matching standard ID messages
     * Reject non-matching extended ID messages
     */

#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ConfigGlobalFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT,
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6898      	ldr	r0, [r3, #8]
 800606c:	2300      	movs	r3, #0
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2300      	movs	r3, #0
 8006072:	2202      	movs	r2, #2
 8006074:	2100      	movs	r1, #0
 8006076:	f003 fb73 	bl	8009760 <HAL_FDCAN_ConfigGlobalFilter>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <CO_CANmodule_init+0x126>
                                     FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006080:	f04f 33ff 	mov.w	r3, #4294967295
 8006084:	e00e      	b.n	80060a4 <CO_CANmodule_init+0x144>
    }
#endif
    /* Enable notifications */
    /* Activate the CAN notification interrupts */
#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle,
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f04f 32ff 	mov.w	r2, #4294967295
 800608e:	4908      	ldr	r1, [pc, #32]	; (80060b0 <CO_CANmodule_init+0x150>)
 8006090:	4618      	mov	r0, r3
 8006092:	f003 fe0f 	bl	8009cb4 <HAL_FDCAN_ActivateNotification>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <CO_CANmodule_init+0x142>
                                           | FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_FIFO_EMPTY | FDCAN_IT_BUS_OFF
                                           | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
                                           | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING,
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800609c:	f04f 33ff 	mov.w	r3, #4294967295
 80060a0:	e000      	b.n	80060a4 <CO_CANmodule_init+0x144>
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	24000620 	.word	0x24000620
 80060b0:	1b800a11 	.word	0x1b800a11

080060b4 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <CO_CANmodule_disable+0x22>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f003 fb9d 	bl	8009810 <HAL_FDCAN_Stop>

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
#endif
    }
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	4608      	mov	r0, r1
 80060ea:	4611      	mov	r1, r2
 80060ec:	461a      	mov	r2, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	817b      	strh	r3, [r7, #10]
 80060f2:	460b      	mov	r3, r1
 80060f4:	813b      	strh	r3, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d03a      	beq.n	800617a <CO_CANrxBufferInit+0x9a>
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	d037      	beq.n	800617a <CO_CANrxBufferInit+0x9a>
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	d034      	beq.n	800617a <CO_CANrxBufferInit+0x9a>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	891b      	ldrh	r3, [r3, #8]
 8006114:	897a      	ldrh	r2, [r7, #10]
 8006116:	429a      	cmp	r2, r3
 8006118:	d22f      	bcs.n	800617a <CO_CANrxBufferInit+0x9a>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	897a      	ldrh	r2, [r7, #10]
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006130:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006136:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8006138:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800613c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006140:	b21b      	sxth	r3, r3
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	2a00      	cmp	r2, #0
 8006146:	d001      	beq.n	800614c <CO_CANrxBufferInit+0x6c>
 8006148:	4a12      	ldr	r2, [pc, #72]	; (8006194 <CO_CANrxBufferInit+0xb4>)
 800614a:	e000      	b.n	800614e <CO_CANrxBufferInit+0x6e>
 800614c:	2200      	movs	r2, #0
 800614e:	4313      	orrs	r3, r2
 8006150:	b21b      	sxth	r3, r3
 8006152:	b29a      	uxth	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8006158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800615c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006160:	b21a      	sxth	r2, r3
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <CO_CANrxBufferInit+0xb4>)
 8006164:	4313      	orrs	r3, r2
 8006166:	b21b      	sxth	r3, r3
 8006168:	b29a      	uxth	r2, r3
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <CO_CANrxBufferInit+0xa0>
            __NOP();
 8006176:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006178:	e002      	b.n	8006180 <CO_CANrxBufferInit+0xa0>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800617a:	23ff      	movs	r3, #255	; 0xff
 800617c:	75fb      	strb	r3, [r7, #23]
 800617e:	e000      	b.n	8006182 <CO_CANrxBufferInit+0xa2>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006180:	bf00      	nop
    }

    return ret;
 8006182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	ffff8000 	.word	0xffff8000

08006198 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	817b      	strh	r3, [r7, #10]
 80061a6:	4613      	mov	r3, r2
 80061a8:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d024      	beq.n	80061fe <CO_CANtxBufferInit+0x66>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8a1b      	ldrh	r3, [r3, #16]
 80061b8:	897a      	ldrh	r2, [r7, #10]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d21f      	bcs.n	80061fe <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	897a      	ldrh	r2, [r7, #10]
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	440b      	add	r3, r1
 80061ce:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80061d0:	893b      	ldrh	r3, [r7, #8]
 80061d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	2a00      	cmp	r2, #0
 80061da:	d002      	beq.n	80061e2 <CO_CANtxBufferInit+0x4a>
 80061dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80061e0:	e000      	b.n	80061e4 <CO_CANtxBufferInit+0x4c>
 80061e2:	2200      	movs	r2, #0
 80061e4:	431a      	orrs	r2, r3
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80061f0:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fc:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	4618      	mov	r0, r3
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_TxHeaderTypeDef tx_hdr;
    if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f003 fd35 	bl	8009c90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d074      	beq.n	8006316 <prv_send_can_message+0x10a>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006234:	4a3a      	ldr	r2, [pc, #232]	; (8006320 <prv_send_can_message+0x114>)
 8006236:	6013      	str	r3, [r2, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	039b      	lsls	r3, r3, #14
 800623e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006242:	4a37      	ldr	r2, [pc, #220]	; (8006320 <prv_send_can_message+0x114>)
 8006244:	6093      	str	r3, [r2, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 8006246:	4b36      	ldr	r3, [pc, #216]	; (8006320 <prv_send_can_message+0x114>)
 8006248:	2200      	movs	r2, #0
 800624a:	605a      	str	r2, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 800624c:	4b34      	ldr	r3, [pc, #208]	; (8006320 <prv_send_can_message+0x114>)
 800624e:	2200      	movs	r2, #0
 8006250:	619a      	str	r2, [r3, #24]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 8006252:	4b33      	ldr	r3, [pc, #204]	; (8006320 <prv_send_can_message+0x114>)
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]
        tx_hdr.MessageMarker = 0;
 8006258:	4b31      	ldr	r3, [pc, #196]	; (8006320 <prv_send_can_message+0x114>)
 800625a:	2200      	movs	r2, #0
 800625c:	621a      	str	r2, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800625e:	4b30      	ldr	r3, [pc, #192]	; (8006320 <prv_send_can_message+0x114>)
 8006260:	2200      	movs	r2, #0
 8006262:	611a      	str	r2, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8006264:	4b2e      	ldr	r3, [pc, #184]	; (8006320 <prv_send_can_message+0x114>)
 8006266:	2200      	movs	r2, #0
 8006268:	61da      	str	r2, [r3, #28]

        switch (buffer->DLC) {
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	2b08      	cmp	r3, #8
 8006270:	d840      	bhi.n	80062f4 <prv_send_can_message+0xe8>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <prv_send_can_message+0x6c>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062af 	.word	0x080062af
 8006284:	080062b9 	.word	0x080062b9
 8006288:	080062c3 	.word	0x080062c3
 800628c:	080062cd 	.word	0x080062cd
 8006290:	080062d7 	.word	0x080062d7
 8006294:	080062e1 	.word	0x080062e1
 8006298:	080062eb 	.word	0x080062eb
            case 0:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 800629c:	4b20      	ldr	r3, [pc, #128]	; (8006320 <prv_send_can_message+0x114>)
 800629e:	2200      	movs	r2, #0
 80062a0:	60da      	str	r2, [r3, #12]
                break;
 80062a2:	e028      	b.n	80062f6 <prv_send_can_message+0xea>
            case 1:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 80062a4:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <prv_send_can_message+0x114>)
 80062a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80062aa:	60da      	str	r2, [r3, #12]
                break;
 80062ac:	e023      	b.n	80062f6 <prv_send_can_message+0xea>
            case 2:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 80062ae:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <prv_send_can_message+0x114>)
 80062b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062b4:	60da      	str	r2, [r3, #12]
                break;
 80062b6:	e01e      	b.n	80062f6 <prv_send_can_message+0xea>
            case 3:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 80062b8:	4b19      	ldr	r3, [pc, #100]	; (8006320 <prv_send_can_message+0x114>)
 80062ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80062be:	60da      	str	r2, [r3, #12]
                break;
 80062c0:	e019      	b.n	80062f6 <prv_send_can_message+0xea>
            case 4:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 80062c2:	4b17      	ldr	r3, [pc, #92]	; (8006320 <prv_send_can_message+0x114>)
 80062c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80062c8:	60da      	str	r2, [r3, #12]
                break;
 80062ca:	e014      	b.n	80062f6 <prv_send_can_message+0xea>
            case 5:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 80062cc:	4b14      	ldr	r3, [pc, #80]	; (8006320 <prv_send_can_message+0x114>)
 80062ce:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80062d2:	60da      	str	r2, [r3, #12]
                break;
 80062d4:	e00f      	b.n	80062f6 <prv_send_can_message+0xea>
            case 6:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 80062d6:	4b12      	ldr	r3, [pc, #72]	; (8006320 <prv_send_can_message+0x114>)
 80062d8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80062dc:	60da      	str	r2, [r3, #12]
                break;
 80062de:	e00a      	b.n	80062f6 <prv_send_can_message+0xea>
            case 7:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <prv_send_can_message+0x114>)
 80062e2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80062e6:	60da      	str	r2, [r3, #12]
                break;
 80062e8:	e005      	b.n	80062f6 <prv_send_can_message+0xea>
            case 8:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <prv_send_can_message+0x114>)
 80062ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80062f0:	60da      	str	r2, [r3, #12]
                break;
 80062f2:	e000      	b.n	80062f6 <prv_send_can_message+0xea>
            default: /* Hard error... */
                break;
 80062f4:	bf00      	nop
        }

        /* Now add message to FIFO. Should not fail */
        success =
            HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6898      	ldr	r0, [r3, #8]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	3305      	adds	r3, #5
 8006300:	461a      	mov	r2, r3
 8006302:	4907      	ldr	r1, [pc, #28]	; (8006320 <prv_send_can_message+0x114>)
 8006304:	f003 fafb 	bl	80098fe <HAL_FDCAN_AddMessageToTxFifoQ>
 8006308:	4603      	mov	r3, r0
            == HAL_OK;
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	b2db      	uxtb	r3, r3
        success =
 8006314:	73fb      	strb	r3, [r7, #15]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	24000624 	.word	0x24000624

08006324 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 800632e:	2300      	movs	r3, #0
 8006330:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8a5b      	ldrh	r3, [r3, #18]
 8006346:	f043 0308 	orr.w	r3, r3, #8
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8006350:	23f7      	movs	r3, #247	; 0xf7
 8006352:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006354:	f3ef 8310 	mrs	r3, PRIMASK
 8006358:	613b      	str	r3, [r7, #16]
  return(result);
 800635a:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006360:	b672      	cpsid	i
}
 8006362:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff ff50 	bl	800620c <prv_send_can_message>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	61da      	str	r2, [r3, #28]
 800637a:	e009      	b.n	8006390 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006386:	b29b      	uxth	r3, r3
 8006388:	3301      	adds	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f383 8810 	msr	PRIMASK, r3
}
 800639c:	bf00      	nop

    return err;
 800639e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
//static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60bb      	str	r3, [r7, #8]
    // CANOpen just care about Bus_off, Warning, Passive and Overflow
    // I didn't find overflow error register in STM32, if you find it please let me know

#ifdef CO_STM32_FDCAN_Driver

    err = ((FDCAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->PSR
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80063c4:	60bb      	str	r3, [r7, #8]
          & (FDCAN_PSR_BO | FDCAN_PSR_EW | FDCAN_PSR_EP);

    if (CANmodule->errOld != err) {
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d02e      	beq.n	800642e <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8a5b      	ldrh	r3, [r3, #18]
 80063d4:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & FDCAN_PSR_BO) {
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80063e6:	89fb      	ldrh	r3, [r7, #14]
 80063e8:	f043 0304 	orr.w	r3, r3, #4
 80063ec:	81fb      	strh	r3, [r7, #14]
 80063ee:	e01b      	b.n	8006428 <CO_CANmodule_process+0x7e>
            // In this driver we expect that the controller is automatically handling the protocol exceptions.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80063f0:	89fb      	ldrh	r3, [r7, #14]
 80063f2:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & FDCAN_PSR_EW) {
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8006406:	89fb      	ldrh	r3, [r7, #14]
 8006408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	81fb      	strh	r3, [r7, #14]
            }

            if (err & FDCAN_PSR_EP) {
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 800641c:	89fb      	ldrh	r3, [r7, #14]
 800641e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006422:	f043 0302 	orr.w	r3, r3, #2
 8006426:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	89fa      	ldrh	r2, [r7, #14]
 800642c:	825a      	strh	r2, [r3, #18]

        CANmodule->CANerrorStatus = status;
    }

#endif
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	; 0x30
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8006448:	2300      	movs	r3, #0
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8006452:	f107 0314 	add.w	r3, r7, #20
 8006456:	3305      	adds	r3, #5
 8006458:	4a53      	ldr	r2, [pc, #332]	; (80065a8 <prv_read_can_received_msg+0x16c>)
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f003 faa9 	bl	80099b4 <HAL_FDCAN_GetRxMessage>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 809a 	bne.w	800659e <prv_read_can_received_msg+0x162>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 800646a:	4b4f      	ldr	r3, [pc, #316]	; (80065a8 <prv_read_can_received_msg+0x16c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a4e      	ldr	r2, [pc, #312]	; (80065a8 <prv_read_can_received_msg+0x16c>)
 8006470:	6892      	ldr	r2, [r2, #8]
 8006472:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006476:	d102      	bne.n	800647e <prv_read_can_received_msg+0x42>
 8006478:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800647c:	e000      	b.n	8006480 <prv_read_can_received_msg+0x44>
 800647e:	2200      	movs	r2, #0
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
    switch (rx_hdr.DataLength) {
 8006484:	4b48      	ldr	r3, [pc, #288]	; (80065a8 <prv_read_can_received_msg+0x16c>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800648c:	d044      	beq.n	8006518 <prv_read_can_received_msg+0xdc>
 800648e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006492:	d844      	bhi.n	800651e <prv_read_can_received_msg+0xe2>
 8006494:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8006498:	d03b      	beq.n	8006512 <prv_read_can_received_msg+0xd6>
 800649a:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800649e:	d83e      	bhi.n	800651e <prv_read_can_received_msg+0xe2>
 80064a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80064a4:	d032      	beq.n	800650c <prv_read_can_received_msg+0xd0>
 80064a6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80064aa:	d838      	bhi.n	800651e <prv_read_can_received_msg+0xe2>
 80064ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b0:	d029      	beq.n	8006506 <prv_read_can_received_msg+0xca>
 80064b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b6:	d832      	bhi.n	800651e <prv_read_can_received_msg+0xe2>
 80064b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064bc:	d020      	beq.n	8006500 <prv_read_can_received_msg+0xc4>
 80064be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064c2:	d82c      	bhi.n	800651e <prv_read_can_received_msg+0xe2>
 80064c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064c8:	d017      	beq.n	80064fa <prv_read_can_received_msg+0xbe>
 80064ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064ce:	d826      	bhi.n	800651e <prv_read_can_received_msg+0xe2>
 80064d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064d4:	d00e      	beq.n	80064f4 <prv_read_can_received_msg+0xb8>
 80064d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064da:	d820      	bhi.n	800651e <prv_read_can_received_msg+0xe2>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <prv_read_can_received_msg+0xac>
 80064e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e4:	d003      	beq.n	80064ee <prv_read_can_received_msg+0xb2>
 80064e6:	e01a      	b.n	800651e <prv_read_can_received_msg+0xe2>
        case FDCAN_DLC_BYTES_0:
            rcvMsg.dlc = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	763b      	strb	r3, [r7, #24]
            break;
 80064ec:	e01a      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_1:
            rcvMsg.dlc = 1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	763b      	strb	r3, [r7, #24]
            break;
 80064f2:	e017      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_2:
            rcvMsg.dlc = 2;
 80064f4:	2302      	movs	r3, #2
 80064f6:	763b      	strb	r3, [r7, #24]
            break;
 80064f8:	e014      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_3:
            rcvMsg.dlc = 3;
 80064fa:	2303      	movs	r3, #3
 80064fc:	763b      	strb	r3, [r7, #24]
            break;
 80064fe:	e011      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_4:
            rcvMsg.dlc = 4;
 8006500:	2304      	movs	r3, #4
 8006502:	763b      	strb	r3, [r7, #24]
            break;
 8006504:	e00e      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_5:
            rcvMsg.dlc = 5;
 8006506:	2305      	movs	r3, #5
 8006508:	763b      	strb	r3, [r7, #24]
            break;
 800650a:	e00b      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_6:
            rcvMsg.dlc = 6;
 800650c:	2306      	movs	r3, #6
 800650e:	763b      	strb	r3, [r7, #24]
            break;
 8006510:	e008      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_7:
            rcvMsg.dlc = 7;
 8006512:	2307      	movs	r3, #7
 8006514:	763b      	strb	r3, [r7, #24]
            break;
 8006516:	e005      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_8:
            rcvMsg.dlc = 8;
 8006518:	2308      	movs	r3, #8
 800651a:	763b      	strb	r3, [r7, #24]
            break;
 800651c:	e002      	b.n	8006524 <prv_read_can_received_msg+0xe8>
        default:
            rcvMsg.dlc = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	763b      	strb	r3, [r7, #24]
            break; /* Invalid length when more than 8 */
 8006522:	bf00      	nop
    }
    rcvMsgIdent = rcvMsg.ident;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <prv_read_can_received_msg+0x170>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <prv_read_can_received_msg+0xfa>
        __BKPT(0);
 8006532:	be00      	bkpt	0x0000
 8006534:	e01f      	b.n	8006576 <prv_read_can_received_msg+0x13a>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8006536:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <prv_read_can_received_msg+0x170>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800653e:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <prv_read_can_received_msg+0x170>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	891b      	ldrh	r3, [r3, #8]
 8006544:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006546:	e013      	b.n	8006570 <prv_read_can_received_msg+0x134>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	4053      	eors	r3, r2
 8006552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006554:	8852      	ldrh	r2, [r2, #2]
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <prv_read_can_received_msg+0x128>
                messageFound = 1;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8006562:	e008      	b.n	8006576 <prv_read_can_received_msg+0x13a>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006564:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006566:	3b01      	subs	r3, #1
 8006568:	857b      	strh	r3, [r7, #42]	; 0x2a
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	330c      	adds	r3, #12
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006570:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e8      	bne.n	8006548 <prv_read_can_received_msg+0x10c>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8006576:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800657a:	2b00      	cmp	r3, #0
 800657c:	d010      	beq.n	80065a0 <prv_read_can_received_msg+0x164>
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <prv_read_can_received_msg+0x164>
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <prv_read_can_received_msg+0x164>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006592:	6852      	ldr	r2, [r2, #4]
 8006594:	f107 0114 	add.w	r1, r7, #20
 8006598:	4610      	mov	r0, r2
 800659a:	4798      	blx	r3
 800659c:	e000      	b.n	80065a0 <prv_read_can_received_msg+0x164>
        return;
 800659e:	bf00      	nop
    }
}
 80065a0:	3730      	adds	r7, #48	; 0x30
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	24000648 	.word	0x24000648
 80065ac:	24000620 	.word	0x24000620

080065b0 <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <HAL_FDCAN_RxFifo0Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	2140      	movs	r1, #64	; 0x40
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff ff37 	bl	800643c <prv_read_can_received_msg>
    }
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_FDCAN_RxFifo1Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo1ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo1ITs) {
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
    if (RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) {
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <HAL_FDCAN_RxFifo1Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO1, RxFifo1ITs);
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	2141      	movs	r1, #65	; 0x41
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ff24 	bl	800643c <prv_read_can_received_msg>
    }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
    CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8006606:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	621a      	str	r2, [r3, #32]
    CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 800660e:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	61da      	str	r2, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8006616:	4b28      	ldr	r3, [pc, #160]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d045      	beq.n	80066ae <HAL_FDCAN_TxBufferCompleteCallback+0xb2>
        CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 8006622:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	617b      	str	r3, [r7, #20]
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 800662a:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800662c:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662e:	f3ef 8210 	mrs	r2, PRIMASK
 8006632:	60fa      	str	r2, [r7, #12]
  return(result);
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006638:	b672      	cpsid	i
}
 800663a:	bf00      	nop
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 800663c:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	8a1b      	ldrh	r3, [r3, #16]
 8006642:	827b      	strh	r3, [r7, #18]
 8006644:	e021      	b.n	800668a <HAL_FDCAN_TxBufferCompleteCallback+0x8e>
            /* Try to send message */
            if (buffer->bufferFull) {
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d017      	beq.n	800667e <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                if (prv_send_can_message(CANModule_local, buffer)) {
 800664e:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6979      	ldr	r1, [r7, #20]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fdd9 	bl	800620c <prv_send_can_message>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                    buffer->bufferFull = false;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	611a      	str	r2, [r3, #16]
                    CANModule_local->CANtxCount--;
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800666c:	b292      	uxth	r2, r2
 800666e:	3a01      	subs	r2, #1
 8006670:	b292      	uxth	r2, r2
 8006672:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	6952      	ldr	r2, [r2, #20]
 800667c:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 800667e:	8a7b      	ldrh	r3, [r7, #18]
 8006680:	3b01      	subs	r3, #1
 8006682:	827b      	strh	r3, [r7, #18]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3318      	adds	r3, #24
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	8a7b      	ldrh	r3, [r7, #18]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1da      	bne.n	8006646 <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8006690:	8a7b      	ldrh	r3, [r7, #18]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_FDCAN_TxBufferCompleteCallback+0xa2>
            CANModule_local->CANtxCount = 0U;
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2200      	movs	r2, #0
 800669c:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f383 8810 	msr	PRIMASK, r3
}
 80066ac:	bf00      	nop
    }
}
 80066ae:	bf00      	nop
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	24000620 	.word	0x24000620

080066bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80066c2:	4b49      	ldr	r3, [pc, #292]	; (80067e8 <main+0x12c>)
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d11b      	bne.n	8006706 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80066ce:	f3bf 8f4f 	dsb	sy
}
 80066d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066d4:	f3bf 8f6f 	isb	sy
}
 80066d8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80066da:	4b43      	ldr	r3, [pc, #268]	; (80067e8 <main+0x12c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80066e2:	f3bf 8f4f 	dsb	sy
}
 80066e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066e8:	f3bf 8f6f 	isb	sy
}
 80066ec:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80066ee:	4b3e      	ldr	r3, [pc, #248]	; (80067e8 <main+0x12c>)
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	4a3d      	ldr	r2, [pc, #244]	; (80067e8 <main+0x12c>)
 80066f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80066fa:	f3bf 8f4f 	dsb	sy
}
 80066fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006700:	f3bf 8f6f 	isb	sy
}
 8006704:	e000      	b.n	8006708 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8006706:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8006708:	4b37      	ldr	r3, [pc, #220]	; (80067e8 <main+0x12c>)
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d138      	bne.n	8006786 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006714:	4b34      	ldr	r3, [pc, #208]	; (80067e8 <main+0x12c>)
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800671c:	f3bf 8f4f 	dsb	sy
}
 8006720:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8006722:	4b31      	ldr	r3, [pc, #196]	; (80067e8 <main+0x12c>)
 8006724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006728:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	0b5b      	lsrs	r3, r3, #13
 800672e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006732:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	08db      	lsrs	r3, r3, #3
 8006738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800673c:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006746:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800674c:	4926      	ldr	r1, [pc, #152]	; (80067e8 <main+0x12c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	1e5a      	subs	r2, r3, #1
 8006758:	61fa      	str	r2, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ef      	bne.n	800673e <main+0x82>
    } while(sets-- != 0U);
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	623a      	str	r2, [r7, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e5      	bne.n	8006734 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8006768:	f3bf 8f4f 	dsb	sy
}
 800676c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800676e:	4b1e      	ldr	r3, [pc, #120]	; (80067e8 <main+0x12c>)
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <main+0x12c>)
 8006774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006778:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800677a:	f3bf 8f4f 	dsb	sy
}
 800677e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006780:	f3bf 8f6f 	isb	sy
}
 8006784:	e000      	b.n	8006788 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8006786:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006788:	f000 ffbc 	bl	8007704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800678c:	f000 f83a 	bl	8006804 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006790:	f000 f8a6 	bl	80068e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006794:	f000 fa08 	bl	8006ba8 <MX_GPIO_Init>
  MX_DTS_Init();
 8006798:	f000 f8d2 	bl	8006940 <MX_DTS_Init>
  MX_FDCAN1_Init();
 800679c:	f000 f8fa 	bl	8006994 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80067a0:	f000 f95c 	bl	8006a5c <MX_FDCAN2_Init>
  MX_SDMMC1_SD_Init();
 80067a4:	f000 f9be 	bl	8006b24 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80067a8:	f00c fdd6 	bl	8013358 <MX_FATFS_Init>
  MX_TIM14_Init();
 80067ac:	f000 f9d8 	bl	8006b60 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hfdcan1;
 80067b0:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <main+0x130>)
 80067b2:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.HWInitFunction = MX_FDCAN1_Init;
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <main+0x134>)
 80067b6:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.timerHandle = &htim14;
 80067b8:	4b0e      	ldr	r3, [pc, #56]	; (80067f4 <main+0x138>)
 80067ba:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.desiredNodeID = CAN_OPEN_ID;
 80067bc:	2301      	movs	r3, #1
 80067be:	713b      	strb	r3, [r7, #4]
  canOpenNodeSTM32.baudrate = CAN_OPEN_BAUDRATE;
 80067c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067c4:	80fb      	strh	r3, [r7, #6]
  canopen_app_init(&canOpenNodeSTM32);
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff f9ed 	bl	8005ba8 <canopen_app_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80067ce:	f00f fd11 	bl	80161f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <main+0x13c>)
 80067d4:	2100      	movs	r1, #0
 80067d6:	4809      	ldr	r0, [pc, #36]	; (80067fc <main+0x140>)
 80067d8:	f00f fd8d 	bl	80162f6 <osThreadNew>
 80067dc:	4603      	mov	r3, r0
 80067de:	4a08      	ldr	r2, [pc, #32]	; (8006800 <main+0x144>)
 80067e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80067e2:	f00f fd4d 	bl	8016280 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80067e6:	e7fe      	b.n	80067e6 <main+0x12a>
 80067e8:	e000ed00 	.word	0xe000ed00
 80067ec:	24000694 	.word	0x24000694
 80067f0:	08006995 	.word	0x08006995
 80067f4:	24000850 	.word	0x24000850
 80067f8:	0802b9c8 	.word	0x0802b9c8
 80067fc:	08006c81 	.word	0x08006c81
 8006800:	2400089c 	.word	0x2400089c

08006804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b09c      	sub	sp, #112	; 0x70
 8006808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800680a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800680e:	224c      	movs	r2, #76	; 0x4c
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f020 fd52 	bl	80272bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	2220      	movs	r2, #32
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f020 fd4c 	bl	80272bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006824:	2002      	movs	r0, #2
 8006826:	f005 fc31 	bl	800c08c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800682a:	2300      	movs	r3, #0
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	4b2b      	ldr	r3, [pc, #172]	; (80068dc <SystemClock_Config+0xd8>)
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <SystemClock_Config+0xd8>)
 8006834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006838:	6193      	str	r3, [r2, #24]
 800683a:	4b28      	ldr	r3, [pc, #160]	; (80068dc <SystemClock_Config+0xd8>)
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006846:	bf00      	nop
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <SystemClock_Config+0xd8>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006854:	d1f8      	bne.n	8006848 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006856:	2301      	movs	r3, #1
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800685a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006860:	2302      	movs	r3, #2
 8006862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006864:	2302      	movs	r3, #2
 8006866:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8006868:	2302      	movs	r3, #2
 800686a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800686c:	232c      	movs	r3, #44	; 0x2c
 800686e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8006870:	2301      	movs	r3, #1
 8006872:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006874:	2305      	movs	r3, #5
 8006876:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006878:	2302      	movs	r3, #2
 800687a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800687c:	230c      	movs	r3, #12
 800687e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006880:	2300      	movs	r3, #0
 8006882:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800688c:	4618      	mov	r0, r3
 800688e:	f005 fc47 	bl	800c120 <HAL_RCC_OscConfig>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8006898:	f000 fa12 	bl	8006cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800689c:	233f      	movs	r3, #63	; 0x3f
 800689e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80068a0:	2303      	movs	r3, #3
 80068a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80068a8:	2308      	movs	r3, #8
 80068aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80068b0:	2340      	movs	r3, #64	; 0x40
 80068b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80068b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	2103      	movs	r1, #3
 80068c2:	4618      	mov	r0, r3
 80068c4:	f006 f806 	bl	800c8d4 <HAL_RCC_ClockConfig>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80068ce:	f000 f9f7 	bl	8006cc0 <Error_Handler>
  }
}
 80068d2:	bf00      	nop
 80068d4:	3770      	adds	r7, #112	; 0x70
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	58024800 	.word	0x58024800

080068e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b0ae      	sub	sp, #184	; 0xb8
 80068e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068e6:	463b      	mov	r3, r7
 80068e8:	22b8      	movs	r2, #184	; 0xb8
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f020 fce5 	bl	80272bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80068f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80068fe:	2305      	movs	r3, #5
 8006900:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8006902:	2380      	movs	r3, #128	; 0x80
 8006904:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006906:	2302      	movs	r3, #2
 8006908:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 5;
 800690a:	2305      	movs	r3, #5
 800690c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800690e:	2302      	movs	r3, #2
 8006910:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8006912:	2380      	movs	r3, #128	; 0x80
 8006914:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006916:	2300      	movs	r3, #0
 8006918:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800691e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006922:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006924:	463b      	mov	r3, r7
 8006926:	4618      	mov	r0, r3
 8006928:	f006 fb8c 	bl	800d044 <HAL_RCCEx_PeriphCLKConfig>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8006932:	f000 f9c5 	bl	8006cc0 <Error_Handler>
  }
}
 8006936:	bf00      	nop
 8006938:	37b8      	adds	r7, #184	; 0xb8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8006944:	4b11      	ldr	r3, [pc, #68]	; (800698c <MX_DTS_Init+0x4c>)
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <MX_DTS_Init+0x50>)
 8006948:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <MX_DTS_Init+0x4c>)
 800694c:	2200      	movs	r2, #0
 800694e:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 8006950:	4b0e      	ldr	r3, [pc, #56]	; (800698c <MX_DTS_Init+0x4c>)
 8006952:	2200      	movs	r2, #0
 8006954:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8006956:	4b0d      	ldr	r3, [pc, #52]	; (800698c <MX_DTS_Init+0x4c>)
 8006958:	2200      	movs	r2, #0
 800695a:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_1_CYCLE;
 800695c:	4b0b      	ldr	r3, [pc, #44]	; (800698c <MX_DTS_Init+0x4c>)
 800695e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006962:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8006964:	4b09      	ldr	r3, [pc, #36]	; (800698c <MX_DTS_Init+0x4c>)
 8006966:	2200      	movs	r2, #0
 8006968:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 800696a:	4b08      	ldr	r3, [pc, #32]	; (800698c <MX_DTS_Init+0x4c>)
 800696c:	2200      	movs	r2, #0
 800696e:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 8006970:	4b06      	ldr	r3, [pc, #24]	; (800698c <MX_DTS_Init+0x4c>)
 8006972:	2200      	movs	r2, #0
 8006974:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8006976:	4805      	ldr	r0, [pc, #20]	; (800698c <MX_DTS_Init+0x4c>)
 8006978:	f001 f854 	bl	8007a24 <HAL_DTS_Init>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 8006982:	f000 f99d 	bl	8006cc0 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8006986:	bf00      	nop
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	24000670 	.word	0x24000670
 8006990:	58006800 	.word	0x58006800

08006994 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8006998:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 800699a:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <MX_FDCAN1_Init+0xc4>)
 800699c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800699e:	4b2d      	ldr	r3, [pc, #180]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80069aa:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80069b6:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 80069bc:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069be:	2208      	movs	r2, #8
 80069c0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80069c8:	4b22      	ldr	r3, [pc, #136]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069ca:	220d      	movs	r2, #13
 80069cc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80069ce:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069d0:	2202      	movs	r2, #2
 80069d2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 80069d4:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069d6:	2208      	movs	r2, #8
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80069da:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069dc:	2201      	movs	r2, #1
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80069e0:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069e2:	220d      	movs	r2, #13
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80069e6:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069e8:	2202      	movs	r2, #2
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80069ec:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80069f2:	4b18      	ldr	r3, [pc, #96]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80069f8:	4b16      	ldr	r3, [pc, #88]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80069fe:	4b15      	ldr	r3, [pc, #84]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8006a04:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a06:	2204      	movs	r2, #4
 8006a08:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8006a0a:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8006a10:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a12:	2204      	movs	r2, #4
 8006a14:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a1e:	2204      	movs	r2, #4
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8006a3a:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8006a40:	4804      	ldr	r0, [pc, #16]	; (8006a54 <MX_FDCAN1_Init+0xc0>)
 8006a42:	f002 fcaf 	bl	80093a4 <HAL_FDCAN_Init>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8006a4c:	f000 f938 	bl	8006cc0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	24000694 	.word	0x24000694
 8006a58:	4000a000 	.word	0x4000a000

08006a5c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8006a60:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a62:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <MX_FDCAN2_Init+0xc4>)
 8006a64:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8006a66:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8006a72:	4b2a      	ldr	r3, [pc, #168]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8006a78:	4b28      	ldr	r3, [pc, #160]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8006a7e:	4b27      	ldr	r3, [pc, #156]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a86:	2210      	movs	r2, #16
 8006a88:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8006a8a:	4b24      	ldr	r3, [pc, #144]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8006a90:	4b22      	ldr	r3, [pc, #136]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a92:	2202      	movs	r2, #2
 8006a94:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8006a96:	4b21      	ldr	r3, [pc, #132]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a98:	2202      	movs	r2, #2
 8006a9a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8006a9c:	4b1f      	ldr	r3, [pc, #124]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8006aa2:	4b1e      	ldr	r3, [pc, #120]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8006aa8:	4b1c      	ldr	r3, [pc, #112]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8006aae:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8006ab4:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8006aba:	4b18      	ldr	r3, [pc, #96]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8006ac0:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8006acc:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ace:	2204      	movs	r2, #4
 8006ad0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8006ad2:	4b12      	ldr	r3, [pc, #72]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8006ad8:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ada:	2204      	movs	r2, #4
 8006adc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8006af0:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8006afc:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006b04:	2204      	movs	r2, #4
 8006b06:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8006b08:	4804      	ldr	r0, [pc, #16]	; (8006b1c <MX_FDCAN2_Init+0xc0>)
 8006b0a:	f002 fc4b 	bl	80093a4 <HAL_FDCAN_Init>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8006b14:	f000 f8d4 	bl	8006cc0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8006b18:	bf00      	nop
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	24000734 	.word	0x24000734
 8006b20:	4000a400 	.word	0x4000a400

08006b24 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8006b28:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <MX_SDMMC1_SD_Init+0x34>)
 8006b2a:	4a0c      	ldr	r2, [pc, #48]	; (8006b5c <MX_SDMMC1_SD_Init+0x38>)
 8006b2c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <MX_SDMMC1_SD_Init+0x34>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006b34:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <MX_SDMMC1_SD_Init+0x34>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <MX_SDMMC1_SD_Init+0x34>)
 8006b3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b40:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <MX_SDMMC1_SD_Init+0x34>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <MX_SDMMC1_SD_Init+0x34>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8006b4e:	bf00      	nop
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	240007d4 	.word	0x240007d4
 8006b5c:	52007000 	.word	0x52007000

08006b60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <MX_TIM14_Init+0x40>)
 8006b66:	4a0f      	ldr	r2, [pc, #60]	; (8006ba4 <MX_TIM14_Init+0x44>)
 8006b68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1374;
 8006b6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <MX_TIM14_Init+0x40>)
 8006b6c:	f240 525e 	movw	r2, #1374	; 0x55e
 8006b70:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <MX_TIM14_Init+0x40>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <MX_TIM14_Init+0x40>)
 8006b7a:	2264      	movs	r2, #100	; 0x64
 8006b7c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <MX_TIM14_Init+0x40>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <MX_TIM14_Init+0x40>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006b8a:	4805      	ldr	r0, [pc, #20]	; (8006ba0 <MX_TIM14_Init+0x40>)
 8006b8c:	f00a f82a 	bl	8010be4 <HAL_TIM_Base_Init>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8006b96:	f000 f893 	bl	8006cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	24000850 	.word	0x24000850
 8006ba4:	40002000 	.word	0x40002000

08006ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bae:	f107 0314 	add.w	r3, r7, #20
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	605a      	str	r2, [r3, #4]
 8006bb8:	609a      	str	r2, [r3, #8]
 8006bba:	60da      	str	r2, [r3, #12]
 8006bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bc4:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006bc6:	f043 0304 	orr.w	r3, r3, #4
 8006bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006bce:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006bdc:	4b26      	ldr	r3, [pc, #152]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006be2:	4a25      	ldr	r2, [pc, #148]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006bec:	4b22      	ldr	r3, [pc, #136]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c0a:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c18:	4b17      	ldr	r3, [pc, #92]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c1e:	4a16      	ldr	r2, [pc, #88]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c20:	f043 0302 	orr.w	r3, r3, #2
 8006c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c28:	4b13      	ldr	r3, [pc, #76]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c36:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c3c:	4a0e      	ldr	r2, [pc, #56]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c3e:	f043 0308 	orr.w	r3, r3, #8
 8006c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <MX_GPIO_Init+0xd0>)
 8006c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c4c:	f003 0308 	and.w	r3, r3, #8
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SDMMC1_CD_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin;
 8006c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_CD_GPIO_Port, &GPIO_InitStruct);
 8006c62:	f107 0314 	add.w	r3, r7, #20
 8006c66:	4619      	mov	r1, r3
 8006c68:	4804      	ldr	r0, [pc, #16]	; (8006c7c <MX_GPIO_Init+0xd4>)
 8006c6a:	f003 fd95 	bl	800a798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006c6e:	bf00      	nop
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	58024400 	.word	0x58024400
 8006c7c:	58020000 	.word	0x58020000

08006c80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8006c88:	f00c fd8e 	bl	80137a8 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8006c8c:	f01f fbe6 	bl	802645c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006c90:	2001      	movs	r0, #1
 8006c92:	f00f fbc2 	bl	801641a <osDelay>
    canopen_app_process();
 8006c96:	f7ff f8d9 	bl	8005e4c <canopen_app_process>
    osDelay(1);
 8006c9a:	e7f9      	b.n	8006c90 <StartDefaultTask+0x10>

08006c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d101      	bne.n	8006cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006cae:	f000 fd65 	bl	800777c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40001000 	.word	0x40001000

08006cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006cc4:	b672      	cpsid	i
}
 8006cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006cc8:	e7fe      	b.n	8006cc8 <Error_Handler+0x8>
	...

08006ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <HAL_MspInit+0x38>)
 8006cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <HAL_MspInit+0x38>)
 8006cda:	f043 0302 	orr.w	r3, r3, #2
 8006cde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <HAL_MspInit+0x38>)
 8006ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	607b      	str	r3, [r7, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	210f      	movs	r1, #15
 8006cf4:	f06f 0001 	mvn.w	r0, #1
 8006cf8:	f000 fe67 	bl	80079ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	58024400 	.word	0x58024400

08006d08 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a0b      	ldr	r2, [pc, #44]	; (8006d44 <HAL_DTS_MspInit+0x3c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d10e      	bne.n	8006d38 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 8006d1a:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <HAL_DTS_MspInit+0x40>)
 8006d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d20:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <HAL_DTS_MspInit+0x40>)
 8006d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d2a:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <HAL_DTS_MspInit+0x40>)
 8006d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	58006800 	.word	0x58006800
 8006d48:	58024400 	.word	0x58024400

08006d4c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	; 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d54:	f107 031c 	add.w	r3, r7, #28
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a45      	ldr	r2, [pc, #276]	; (8006e80 <HAL_FDCAN_MspInit+0x134>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d147      	bne.n	8006dfe <HAL_FDCAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8006d6e:	4b45      	ldr	r3, [pc, #276]	; (8006e84 <HAL_FDCAN_MspInit+0x138>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	4a43      	ldr	r2, [pc, #268]	; (8006e84 <HAL_FDCAN_MspInit+0x138>)
 8006d76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8006d78:	4b42      	ldr	r3, [pc, #264]	; (8006e84 <HAL_FDCAN_MspInit+0x138>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d10e      	bne.n	8006d9e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8006d80:	4b41      	ldr	r3, [pc, #260]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006d82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006d86:	4a40      	ldr	r2, [pc, #256]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006d90:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006d92:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d9e:	4b3a      	ldr	r3, [pc, #232]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006da4:	4a38      	ldr	r2, [pc, #224]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006da6:	f043 0308 	orr.w	r3, r3, #8
 8006daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dae:	4b36      	ldr	r3, [pc, #216]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8006dcc:	2309      	movs	r3, #9
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dd0:	f107 031c 	add.w	r3, r7, #28
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	482d      	ldr	r0, [pc, #180]	; (8006e8c <HAL_FDCAN_MspInit+0x140>)
 8006dd8:	f003 fcde 	bl	800a798 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2105      	movs	r1, #5
 8006de0:	2013      	movs	r0, #19
 8006de2:	f000 fdf2 	bl	80079ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8006de6:	2013      	movs	r0, #19
 8006de8:	f000 fe09 	bl	80079fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8006dec:	2200      	movs	r2, #0
 8006dee:	2105      	movs	r1, #5
 8006df0:	2015      	movs	r0, #21
 8006df2:	f000 fdea 	bl	80079ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8006df6:	2015      	movs	r0, #21
 8006df8:	f000 fe01 	bl	80079fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8006dfc:	e03b      	b.n	8006e76 <HAL_FDCAN_MspInit+0x12a>
  else if(hfdcan->Instance==FDCAN2)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <HAL_FDCAN_MspInit+0x144>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d136      	bne.n	8006e76 <HAL_FDCAN_MspInit+0x12a>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8006e08:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <HAL_FDCAN_MspInit+0x138>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <HAL_FDCAN_MspInit+0x138>)
 8006e10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <HAL_FDCAN_MspInit+0x138>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d10e      	bne.n	8006e38 <HAL_FDCAN_MspInit+0xec>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006e1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e26:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006e2a:	4b17      	ldr	r3, [pc, #92]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006e2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e38:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e3e:	4a12      	ldr	r2, [pc, #72]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e48:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <HAL_FDCAN_MspInit+0x13c>)
 8006e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006e56:	2360      	movs	r3, #96	; 0x60
 8006e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e62:	2300      	movs	r3, #0
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8006e66:	2309      	movs	r3, #9
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e6a:	f107 031c 	add.w	r3, r7, #28
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4808      	ldr	r0, [pc, #32]	; (8006e94 <HAL_FDCAN_MspInit+0x148>)
 8006e72:	f003 fc91 	bl	800a798 <HAL_GPIO_Init>
}
 8006e76:	bf00      	nop
 8006e78:	3730      	adds	r7, #48	; 0x30
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	4000a000 	.word	0x4000a000
 8006e84:	240008a0 	.word	0x240008a0
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	58020c00 	.word	0x58020c00
 8006e90:	4000a400 	.word	0x4000a400
 8006e94:	58020400 	.word	0x58020400

08006e98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b0ba      	sub	sp, #232	; 0xe8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	605a      	str	r2, [r3, #4]
 8006eaa:	609a      	str	r2, [r3, #8]
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006eb0:	f107 0318 	add.w	r3, r7, #24
 8006eb4:	22b8      	movs	r2, #184	; 0xb8
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f020 f9ff 	bl	80272bc <memset>
  if(hsd->Instance==SDMMC1)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a38      	ldr	r2, [pc, #224]	; (8006fa4 <HAL_SD_MspInit+0x10c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d169      	bne.n	8006f9c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8006ec8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ed8:	f107 0318 	add.w	r3, r7, #24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f006 f8b1 	bl	800d044 <HAL_RCCEx_PeriphCLKConfig>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8006ee8:	f7ff feea 	bl	8006cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006eec:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006eee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006ef2:	4a2d      	ldr	r2, [pc, #180]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006efc:	4b2a      	ldr	r3, [pc, #168]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006efe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f10:	4a25      	ldr	r2, [pc, #148]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006f12:	f043 0304 	orr.w	r3, r3, #4
 8006f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f1a:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f28:	4b1f      	ldr	r3, [pc, #124]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f2e:	4a1e      	ldr	r2, [pc, #120]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006f30:	f043 0308 	orr.w	r3, r3, #8
 8006f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <HAL_SD_MspInit+0x110>)
 8006f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006f46:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006f60:	230c      	movs	r3, #12
 8006f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	480f      	ldr	r0, [pc, #60]	; (8006fac <HAL_SD_MspInit+0x114>)
 8006f6e:	f003 fc13 	bl	800a798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f72:	2304      	movs	r3, #4
 8006f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f84:	2303      	movs	r3, #3
 8006f86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4806      	ldr	r0, [pc, #24]	; (8006fb0 <HAL_SD_MspInit+0x118>)
 8006f98:	f003 fbfe 	bl	800a798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8006f9c:	bf00      	nop
 8006f9e:	37e8      	adds	r7, #232	; 0xe8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	52007000 	.word	0x52007000
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	58020800 	.word	0x58020800
 8006fb0:	58020c00 	.word	0x58020c00

08006fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0e      	ldr	r2, [pc, #56]	; (8006ffc <HAL_TIM_Base_MspInit+0x48>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d116      	bne.n	8006ff4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <HAL_TIM_Base_MspInit+0x4c>)
 8006fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fcc:	4a0c      	ldr	r2, [pc, #48]	; (8007000 <HAL_TIM_Base_MspInit+0x4c>)
 8006fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006fd6:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <HAL_TIM_Base_MspInit+0x4c>)
 8006fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2105      	movs	r1, #5
 8006fe8:	202d      	movs	r0, #45	; 0x2d
 8006fea:	f000 fcee 	bl	80079ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006fee:	202d      	movs	r0, #45	; 0x2d
 8006ff0:	f000 fd05 	bl	80079fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006ff4:	bf00      	nop
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40002000 	.word	0x40002000
 8007000:	58024400 	.word	0x58024400

08007004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b090      	sub	sp, #64	; 0x40
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b0f      	cmp	r3, #15
 8007010:	d827      	bhi.n	8007062 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8007012:	2200      	movs	r2, #0
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	2036      	movs	r0, #54	; 0x36
 8007018:	f000 fcd7 	bl	80079ca <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800701c:	2036      	movs	r0, #54	; 0x36
 800701e:	f000 fcee 	bl	80079fe <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8007022:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <HAL_InitTick+0xc4>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007028:	4b28      	ldr	r3, [pc, #160]	; (80070cc <HAL_InitTick+0xc8>)
 800702a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800702e:	4a27      	ldr	r2, [pc, #156]	; (80070cc <HAL_InitTick+0xc8>)
 8007030:	f043 0310 	orr.w	r3, r3, #16
 8007034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007038:	4b24      	ldr	r3, [pc, #144]	; (80070cc <HAL_InitTick+0xc8>)
 800703a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007046:	f107 0210 	add.w	r2, r7, #16
 800704a:	f107 0314 	add.w	r3, r7, #20
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f005 ffb5 	bl	800cfc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <HAL_InitTick+0x6a>
 8007060:	e001      	b.n	8007066 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e02b      	b.n	80070be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007066:	f005 ff95 	bl	800cf94 <HAL_RCC_GetPCLK1Freq>
 800706a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800706c:	e004      	b.n	8007078 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800706e:	f005 ff91 	bl	800cf94 <HAL_RCC_GetPCLK1Freq>
 8007072:	4603      	mov	r3, r0
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707a:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <HAL_InitTick+0xcc>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	0c9b      	lsrs	r3, r3, #18
 8007082:	3b01      	subs	r3, #1
 8007084:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007086:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <HAL_InitTick+0xd0>)
 8007088:	4a13      	ldr	r2, [pc, #76]	; (80070d8 <HAL_InitTick+0xd4>)
 800708a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <HAL_InitTick+0xd0>)
 800708e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007092:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007094:	4a0f      	ldr	r2, [pc, #60]	; (80070d4 <HAL_InitTick+0xd0>)
 8007096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007098:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800709a:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <HAL_InitTick+0xd0>)
 800709c:	2200      	movs	r2, #0
 800709e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <HAL_InitTick+0xd0>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80070a6:	480b      	ldr	r0, [pc, #44]	; (80070d4 <HAL_InitTick+0xd0>)
 80070a8:	f009 fd9c 	bl	8010be4 <HAL_TIM_Base_Init>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80070b2:	4808      	ldr	r0, [pc, #32]	; (80070d4 <HAL_InitTick+0xd0>)
 80070b4:	f009 fdee 	bl	8010c94 <HAL_TIM_Base_Start_IT>
 80070b8:	4603      	mov	r3, r0
 80070ba:	e000      	b.n	80070be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3740      	adds	r7, #64	; 0x40
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	240003ac 	.word	0x240003ac
 80070cc:	58024400 	.word	0x58024400
 80070d0:	431bde83 	.word	0x431bde83
 80070d4:	240008a4 	.word	0x240008a4
 80070d8:	40001000 	.word	0x40001000

080070dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80070e0:	e7fe      	b.n	80070e0 <NMI_Handler+0x4>

080070e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070e2:	b480      	push	{r7}
 80070e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070e6:	e7fe      	b.n	80070e6 <HardFault_Handler+0x4>

080070e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070ec:	e7fe      	b.n	80070ec <MemManage_Handler+0x4>

080070ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070ee:	b480      	push	{r7}
 80070f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070f2:	e7fe      	b.n	80070f2 <BusFault_Handler+0x4>

080070f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070f8:	e7fe      	b.n	80070f8 <UsageFault_Handler+0x4>

080070fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070fa:	b480      	push	{r7}
 80070fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070fe:	bf00      	nop
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800710c:	4802      	ldr	r0, [pc, #8]	; (8007118 <FDCAN1_IT0_IRQHandler+0x10>)
 800710e:	f002 fe4b 	bl	8009da8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8007112:	bf00      	nop
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	24000694 	.word	0x24000694

0800711c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007120:	4802      	ldr	r0, [pc, #8]	; (800712c <FDCAN1_IT1_IRQHandler+0x10>)
 8007122:	f002 fe41 	bl	8009da8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8007126:	bf00      	nop
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	24000694 	.word	0x24000694

08007130 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007134:	4802      	ldr	r0, [pc, #8]	; (8007140 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8007136:	f009 fe33 	bl	8010da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	24000850 	.word	0x24000850

08007144 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007148:	4802      	ldr	r0, [pc, #8]	; (8007154 <TIM6_DAC_IRQHandler+0x10>)
 800714a:	f009 fe29 	bl	8010da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	240008a4 	.word	0x240008a4

08007158 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800715c:	4802      	ldr	r0, [pc, #8]	; (8007168 <OTG_HS_IRQHandler+0x10>)
 800715e:	f003 fe34 	bl	800adca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8007162:	bf00      	nop
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	2400e5c8 	.word	0x2400e5c8

0800716c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  return 1;
 8007170:	2301      	movs	r3, #1
}
 8007172:	4618      	mov	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <_kill>:

int _kill(int pid, int sig)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <_kill+0x20>)
 8007188:	2216      	movs	r2, #22
 800718a:	601a      	str	r2, [r3, #0]
  return -1;
 800718c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	2400ed00 	.word	0x2400ed00

080071a0 <_exit>:

void _exit (int status)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80071a8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ffe5 	bl	800717c <_kill>
  while (1) {}    /* Make sure we hang here */
 80071b2:	e7fe      	b.n	80071b2 <_exit+0x12>

080071b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	e00a      	b.n	80071dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80071c6:	f3af 8000 	nop.w
 80071ca:	4601      	mov	r1, r0
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	60ba      	str	r2, [r7, #8]
 80071d2:	b2ca      	uxtb	r2, r1
 80071d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	3301      	adds	r3, #1
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	dbf0      	blt.n	80071c6 <_read+0x12>
  }

  return len;
 80071e4:	687b      	ldr	r3, [r7, #4]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e009      	b.n	8007214 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	60ba      	str	r2, [r7, #8]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	3301      	adds	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	dbf1      	blt.n	8007200 <_write+0x12>
  }
  return len;
 800721c:	687b      	ldr	r3, [r7, #4]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <_close>:

int _close(int file)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800722e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800724e:	605a      	str	r2, [r3, #4]
  return 0;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <_isatty>:

int _isatty(int file)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007266:	2301      	movs	r3, #1
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007298:	4a14      	ldr	r2, [pc, #80]	; (80072ec <_sbrk+0x5c>)
 800729a:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <_sbrk+0x60>)
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80072a4:	4b13      	ldr	r3, [pc, #76]	; (80072f4 <_sbrk+0x64>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80072ac:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <_sbrk+0x64>)
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <_sbrk+0x68>)
 80072b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <_sbrk+0x64>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4413      	add	r3, r2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d205      	bcs.n	80072cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80072c0:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <_sbrk+0x6c>)
 80072c2:	220c      	movs	r2, #12
 80072c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ca:	e009      	b.n	80072e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <_sbrk+0x64>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <_sbrk+0x64>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4413      	add	r3, r2
 80072da:	4a06      	ldr	r2, [pc, #24]	; (80072f4 <_sbrk+0x64>)
 80072dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	24050000 	.word	0x24050000
 80072f0:	00000400 	.word	0x00000400
 80072f4:	240008f0 	.word	0x240008f0
 80072f8:	2400ed08 	.word	0x2400ed08
 80072fc:	2400ed00 	.word	0x2400ed00

08007300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007304:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <SystemInit+0xd0>)
 8007306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730a:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <SystemInit+0xd0>)
 800730c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007314:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <SystemInit+0xd4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	2b06      	cmp	r3, #6
 800731e:	d807      	bhi.n	8007330 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007320:	4b2c      	ldr	r3, [pc, #176]	; (80073d4 <SystemInit+0xd4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f023 030f 	bic.w	r3, r3, #15
 8007328:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <SystemInit+0xd4>)
 800732a:	f043 0307 	orr.w	r3, r3, #7
 800732e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007330:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <SystemInit+0xd8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a28      	ldr	r2, [pc, #160]	; (80073d8 <SystemInit+0xd8>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800733c:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <SystemInit+0xd8>)
 800733e:	2200      	movs	r2, #0
 8007340:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007342:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <SystemInit+0xd8>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4924      	ldr	r1, [pc, #144]	; (80073d8 <SystemInit+0xd8>)
 8007348:	4b24      	ldr	r3, [pc, #144]	; (80073dc <SystemInit+0xdc>)
 800734a:	4013      	ands	r3, r2
 800734c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <SystemInit+0xd4>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800735a:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <SystemInit+0xd4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 030f 	bic.w	r3, r3, #15
 8007362:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <SystemInit+0xd4>)
 8007364:	f043 0307 	orr.w	r3, r3, #7
 8007368:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <SystemInit+0xd8>)
 800736c:	2200      	movs	r2, #0
 800736e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007370:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <SystemInit+0xd8>)
 8007372:	2200      	movs	r2, #0
 8007374:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <SystemInit+0xd8>)
 8007378:	2200      	movs	r2, #0
 800737a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800737c:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <SystemInit+0xd8>)
 800737e:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <SystemInit+0xe0>)
 8007380:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <SystemInit+0xd8>)
 8007384:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <SystemInit+0xe4>)
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007388:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <SystemInit+0xd8>)
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <SystemInit+0xe8>)
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <SystemInit+0xd8>)
 8007390:	2200      	movs	r2, #0
 8007392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007394:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <SystemInit+0xd8>)
 8007396:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <SystemInit+0xe8>)
 8007398:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <SystemInit+0xd8>)
 800739c:	2200      	movs	r2, #0
 800739e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <SystemInit+0xd8>)
 80073a2:	4a11      	ldr	r2, [pc, #68]	; (80073e8 <SystemInit+0xe8>)
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <SystemInit+0xd8>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <SystemInit+0xd8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <SystemInit+0xd8>)
 80073b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <SystemInit+0xd8>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80073be:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <SystemInit+0xec>)
 80073c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80073c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80073c6:	bf00      	nop
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	e000ed00 	.word	0xe000ed00
 80073d4:	52002000 	.word	0x52002000
 80073d8:	58024400 	.word	0x58024400
 80073dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80073e0:	02020200 	.word	0x02020200
 80073e4:	01ff0000 	.word	0x01ff0000
 80073e8:	01010280 	.word	0x01010280
 80073ec:	52004000 	.word	0x52004000

080073f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80073f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007428 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80073f4:	f7ff ff84 	bl	8007300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80073f8:	480c      	ldr	r0, [pc, #48]	; (800742c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80073fa:	490d      	ldr	r1, [pc, #52]	; (8007430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80073fc:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80073fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007400:	e002      	b.n	8007408 <LoopCopyDataInit>

08007402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007406:	3304      	adds	r3, #4

08007408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800740a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800740c:	d3f9      	bcc.n	8007402 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007410:	4c0a      	ldr	r4, [pc, #40]	; (800743c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007414:	e001      	b.n	800741a <LoopFillZerobss>

08007416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007418:	3204      	adds	r2, #4

0800741a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800741a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800741c:	d3fb      	bcc.n	8007416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800741e:	f01f fedd 	bl	80271dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007422:	f7ff f94b 	bl	80066bc <main>
  bx  lr
 8007426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007428:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800742c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007430:	24000530 	.word	0x24000530
  ldr r2, =_sidata
 8007434:	0802bcb4 	.word	0x0802bcb4
  ldr r2, =_sbss
 8007438:	240005f0 	.word	0x240005f0
  ldr r4, =_ebss
 800743c:	2400ed04 	.word	0x2400ed04

08007440 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007440:	e7fe      	b.n	8007440 <ADC3_IRQHandler>

08007442 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <LAN8742_RegisterBusIO+0x28>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <LAN8742_RegisterBusIO+0x28>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <LAN8742_RegisterBusIO+0x28>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d102      	bne.n	8007470 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800746a:	f04f 33ff 	mov.w	r3, #4294967295
 800746e:	e014      	b.n	800749a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	2300      	movs	r3, #0
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d17c      	bne.n	80075c0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e01c      	b.n	800751a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f107 0208 	add.w	r2, r7, #8
 80074e8:	2112      	movs	r1, #18
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	4798      	blx	r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da03      	bge.n	80074fc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80074f4:	f06f 0304 	mvn.w	r3, #4
 80074f8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80074fa:	e00b      	b.n	8007514 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	429a      	cmp	r2, r3
 8007506:	d105      	bne.n	8007514 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
         break;
 8007512:	e005      	b.n	8007520 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	3301      	adds	r3, #1
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b1f      	cmp	r3, #31
 800751e:	d9df      	bls.n	80074e0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b1f      	cmp	r3, #31
 8007526:	d902      	bls.n	800752e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8007528:	f06f 0302 	mvn.w	r3, #2
 800752c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d145      	bne.n	80075c0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6810      	ldr	r0, [r2, #0]
 800753c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007540:	2100      	movs	r1, #0
 8007542:	4798      	blx	r3
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	db37      	blt.n	80075ba <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6810      	ldr	r0, [r2, #0]
 8007552:	f107 0208 	add.w	r2, r7, #8
 8007556:	2100      	movs	r1, #0
 8007558:	4798      	blx	r3
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	db28      	blt.n	80075b2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	4798      	blx	r3
 8007566:	4603      	mov	r3, r0
 8007568:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800756a:	e01c      	b.n	80075a6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	4798      	blx	r3
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800757e:	d80e      	bhi.n	800759e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6810      	ldr	r0, [r2, #0]
 8007588:	f107 0208 	add.w	r2, r7, #8
 800758c:	2100      	movs	r1, #0
 800758e:	4798      	blx	r3
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	da07      	bge.n	80075a6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8007596:	f06f 0304 	mvn.w	r3, #4
 800759a:	613b      	str	r3, [r7, #16]
                 break;
 800759c:	e010      	b.n	80075c0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800759e:	f06f 0301 	mvn.w	r3, #1
 80075a2:	613b      	str	r3, [r7, #16]
               break;
 80075a4:	e00c      	b.n	80075c0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1dd      	bne.n	800756c <LAN8742_Init+0xc6>
 80075b0:	e006      	b.n	80075c0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80075b2:	f06f 0304 	mvn.w	r3, #4
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	e002      	b.n	80075c0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80075ba:	f06f 0303 	mvn.w	r3, #3
 80075be:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d112      	bne.n	80075ec <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	4798      	blx	r3
 80075cc:	4603      	mov	r3, r0
 80075ce:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80075d0:	bf00      	nop
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	4798      	blx	r3
 80075d8:	4603      	mov	r3, r0
 80075da:	461a      	mov	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80075e4:	d9f5      	bls.n	80075d2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80075ec:	693b      	ldr	r3, [r7, #16]
 }
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	6810      	ldr	r0, [r2, #0]
 800760a:	f107 020c 	add.w	r2, r7, #12
 800760e:	2101      	movs	r1, #1
 8007610:	4798      	blx	r3
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	da02      	bge.n	800761e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8007618:	f06f 0304 	mvn.w	r3, #4
 800761c:	e06e      	b.n	80076fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6810      	ldr	r0, [r2, #0]
 8007626:	f107 020c 	add.w	r2, r7, #12
 800762a:	2101      	movs	r1, #1
 800762c:	4798      	blx	r3
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	da02      	bge.n	800763a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8007634:	f06f 0304 	mvn.w	r3, #4
 8007638:	e060      	b.n	80076fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8007644:	2301      	movs	r3, #1
 8007646:	e059      	b.n	80076fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6810      	ldr	r0, [r2, #0]
 8007650:	f107 020c 	add.w	r2, r7, #12
 8007654:	2100      	movs	r1, #0
 8007656:	4798      	blx	r3
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	da02      	bge.n	8007664 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800765e:	f06f 0304 	mvn.w	r3, #4
 8007662:	e04b      	b.n	80076fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d11b      	bne.n	80076a6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d006      	beq.n	8007686 <LAN8742_GetLinkState+0x90>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8007682:	2302      	movs	r3, #2
 8007684:	e03a      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8007690:	2303      	movs	r3, #3
 8007692:	e033      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800769e:	2304      	movs	r3, #4
 80076a0:	e02c      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80076a2:	2305      	movs	r3, #5
 80076a4:	e02a      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6810      	ldr	r0, [r2, #0]
 80076ae:	f107 020c 	add.w	r2, r7, #12
 80076b2:	211f      	movs	r1, #31
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da02      	bge.n	80076c2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80076bc:	f06f 0304 	mvn.w	r3, #4
 80076c0:	e01c      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80076cc:	2306      	movs	r3, #6
 80076ce:	e015      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 031c 	and.w	r3, r3, #28
 80076d6:	2b18      	cmp	r3, #24
 80076d8:	d101      	bne.n	80076de <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80076da:	2302      	movs	r3, #2
 80076dc:	e00e      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f003 031c 	and.w	r3, r3, #28
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d101      	bne.n	80076ec <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e007      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f003 031c 	and.w	r3, r3, #28
 80076f2:	2b14      	cmp	r3, #20
 80076f4:	d101      	bne.n	80076fa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80076f6:	2304      	movs	r3, #4
 80076f8:	e000      	b.n	80076fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80076fa:	2305      	movs	r3, #5
    }				
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800770a:	2003      	movs	r0, #3
 800770c:	f000 f952 	bl	80079b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007710:	f005 fa96 	bl	800cc40 <HAL_RCC_GetSysClockFreq>
 8007714:	4602      	mov	r2, r0
 8007716:	4b15      	ldr	r3, [pc, #84]	; (800776c <HAL_Init+0x68>)
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	4913      	ldr	r1, [pc, #76]	; (8007770 <HAL_Init+0x6c>)
 8007722:	5ccb      	ldrb	r3, [r1, r3]
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
 800772c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <HAL_Init+0x68>)
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	4a0e      	ldr	r2, [pc, #56]	; (8007770 <HAL_Init+0x6c>)
 8007738:	5cd3      	ldrb	r3, [r2, r3]
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
 8007744:	4a0b      	ldr	r2, [pc, #44]	; (8007774 <HAL_Init+0x70>)
 8007746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007748:	4a0b      	ldr	r2, [pc, #44]	; (8007778 <HAL_Init+0x74>)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800774e:	200f      	movs	r0, #15
 8007750:	f7ff fc58 	bl	8007004 <HAL_InitTick>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e002      	b.n	8007764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800775e:	f7ff fab5 	bl	8006ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	58024400 	.word	0x58024400
 8007770:	0802b9ec 	.word	0x0802b9ec
 8007774:	240003a8 	.word	0x240003a8
 8007778:	240003a4 	.word	0x240003a4

0800777c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007780:	4b06      	ldr	r3, [pc, #24]	; (800779c <HAL_IncTick+0x20>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <HAL_IncTick+0x24>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4413      	add	r3, r2
 800778c:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <HAL_IncTick+0x24>)
 800778e:	6013      	str	r3, [r2, #0]
}
 8007790:	bf00      	nop
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	240003b0 	.word	0x240003b0
 80077a0:	240008f4 	.word	0x240008f4

080077a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return uwTick;
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <HAL_GetTick+0x14>)
 80077aa:	681b      	ldr	r3, [r3, #0]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	240008f4 	.word	0x240008f4

080077bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077c4:	f7ff ffee 	bl	80077a4 <HAL_GetTick>
 80077c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d005      	beq.n	80077e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <HAL_Delay+0x44>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80077e2:	bf00      	nop
 80077e4:	f7ff ffde 	bl	80077a4 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d8f7      	bhi.n	80077e4 <HAL_Delay+0x28>
  {
  }
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	240003b0 	.word	0x240003b0

08007804 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4313      	orrs	r3, r2
 800781a:	604b      	str	r3, [r1, #4]
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	58000400 	.word	0x58000400

0800782c <__NVIC_SetPriorityGrouping>:
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <__NVIC_SetPriorityGrouping+0x40>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007848:	4013      	ands	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007854:	4b06      	ldr	r3, [pc, #24]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 8007856:	4313      	orrs	r3, r2
 8007858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800785a:	4a04      	ldr	r2, [pc, #16]	; (800786c <__NVIC_SetPriorityGrouping+0x40>)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	60d3      	str	r3, [r2, #12]
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	e000ed00 	.word	0xe000ed00
 8007870:	05fa0000 	.word	0x05fa0000

08007874 <__NVIC_GetPriorityGrouping>:
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <__NVIC_GetPriorityGrouping+0x18>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	f003 0307 	and.w	r3, r3, #7
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <__NVIC_EnableIRQ>:
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800789a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db0b      	blt.n	80078ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	f003 021f 	and.w	r2, r3, #31
 80078a8:	4907      	ldr	r1, [pc, #28]	; (80078c8 <__NVIC_EnableIRQ+0x38>)
 80078aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2001      	movs	r0, #1
 80078b2:	fa00 f202 	lsl.w	r2, r0, r2
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	e000e100 	.word	0xe000e100

080078cc <__NVIC_SetPriority>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80078d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	db0a      	blt.n	80078f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	490c      	ldr	r1, [pc, #48]	; (8007918 <__NVIC_SetPriority+0x4c>)
 80078e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078ea:	0112      	lsls	r2, r2, #4
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	440b      	add	r3, r1
 80078f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078f4:	e00a      	b.n	800790c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4908      	ldr	r1, [pc, #32]	; (800791c <__NVIC_SetPriority+0x50>)
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	3b04      	subs	r3, #4
 8007904:	0112      	lsls	r2, r2, #4
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	440b      	add	r3, r1
 800790a:	761a      	strb	r2, [r3, #24]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000e100 	.word	0xe000e100
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <NVIC_EncodePriority>:
{
 8007920:	b480      	push	{r7}
 8007922:	b089      	sub	sp, #36	; 0x24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f1c3 0307 	rsb	r3, r3, #7
 800793a:	2b04      	cmp	r3, #4
 800793c:	bf28      	it	cs
 800793e:	2304      	movcs	r3, #4
 8007940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3304      	adds	r3, #4
 8007946:	2b06      	cmp	r3, #6
 8007948:	d902      	bls.n	8007950 <NVIC_EncodePriority+0x30>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3b03      	subs	r3, #3
 800794e:	e000      	b.n	8007952 <NVIC_EncodePriority+0x32>
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	401a      	ands	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007968:	f04f 31ff 	mov.w	r1, #4294967295
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	43d9      	mvns	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007978:	4313      	orrs	r3, r2
}
 800797a:	4618      	mov	r0, r3
 800797c:	3724      	adds	r7, #36	; 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <__NVIC_SystemReset>:
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800798c:	f3bf 8f4f 	dsb	sy
}
 8007990:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <__NVIC_SystemReset+0x24>)
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800799a:	4904      	ldr	r1, [pc, #16]	; (80079ac <__NVIC_SystemReset+0x24>)
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <__NVIC_SystemReset+0x28>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80079a2:	f3bf 8f4f 	dsb	sy
}
 80079a6:	bf00      	nop
    __NOP();
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <__NVIC_SystemReset+0x20>
 80079ac:	e000ed00 	.word	0xe000ed00
 80079b0:	05fa0004 	.word	0x05fa0004

080079b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff35 	bl	800782c <__NVIC_SetPriorityGrouping>
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b086      	sub	sp, #24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	4603      	mov	r3, r0
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079d8:	f7ff ff4c 	bl	8007874 <__NVIC_GetPriorityGrouping>
 80079dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	6978      	ldr	r0, [r7, #20]
 80079e4:	f7ff ff9c 	bl	8007920 <NVIC_EncodePriority>
 80079e8:	4602      	mov	r2, r0
 80079ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff ff6b 	bl	80078cc <__NVIC_SetPriority>
}
 80079f6:	bf00      	nop
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	4603      	mov	r3, r0
 8007a06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff ff3f 	bl	8007890 <__NVIC_EnableIRQ>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007a1e:	f7ff ffb3 	bl	8007988 <__NVIC_SystemReset>
	...

08007a24 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e089      	b.n	8007b4a <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff f960 	bl	8006d08 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e075      	b.n	8007b4a <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e06e      	b.n	8007b4a <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d108      	bne.n	8007a86 <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e00e      	b.n	8007aa4 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a8e:	d001      	beq.n	8007a94 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e05a      	b.n	8007b4a <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8007aa2:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aac:	d108      	bne.n	8007ac0 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e007      	b.n	8007ad0 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007ace:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	061a      	lsls	r2, r3, #24
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	041a      	lsls	r2, r3, #16
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695a      	ldr	r2, [r3, #20]
 8007b30:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <HAL_DTS_Init+0x130>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	69d1      	ldr	r1, [r2, #28]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	ffff0000 	.word	0xffff0000

08007b58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e0cf      	b.n	8007d0a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2223      	movs	r2, #35	; 0x23
 8007b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f00c f8e5 	bl	8013d4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b82:	4b64      	ldr	r3, [pc, #400]	; (8007d14 <HAL_ETH_Init+0x1bc>)
 8007b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b88:	4a62      	ldr	r2, [pc, #392]	; (8007d14 <HAL_ETH_Init+0x1bc>)
 8007b8a:	f043 0302 	orr.w	r3, r3, #2
 8007b8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b92:	4b60      	ldr	r3, [pc, #384]	; (8007d14 <HAL_ETH_Init+0x1bc>)
 8007b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	60bb      	str	r3, [r7, #8]
 8007b9e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7a1b      	ldrb	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f7ff fe2b 	bl	8007804 <HAL_SYSCFG_ETHInterfaceSelect>
 8007bae:	e003      	b.n	8007bb8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007bb0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007bb4:	f7ff fe26 	bl	8007804 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8007bb8:	4b57      	ldr	r3, [pc, #348]	; (8007d18 <HAL_ETH_Init+0x1c0>)
 8007bba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007bd4:	f7ff fde6 	bl	80077a4 <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007bda:	e011      	b.n	8007c00 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007bdc:	f7ff fde2 	bl	80077a4 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007bea:	d909      	bls.n	8007c00 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	22e0      	movs	r2, #224	; 0xe0
 8007bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e084      	b.n	8007d0a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e4      	bne.n	8007bdc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fdfa 	bl	800880c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007c18:	f005 f98c 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	4a3f      	ldr	r2, [pc, #252]	; (8007d1c <HAL_ETH_Init+0x1c4>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	0c9a      	lsrs	r2, r3, #18
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3a01      	subs	r2, #1
 8007c2c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 ffe5 	bl	8008c00 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007c42:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c52:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d009      	beq.n	8007c76 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	22e0      	movs	r2, #224	; 0xe0
 8007c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e049      	b.n	8007d0a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007c82:	4b27      	ldr	r3, [pc, #156]	; (8007d20 <HAL_ETH_Init+0x1c8>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6952      	ldr	r2, [r2, #20]
 8007c8a:	0051      	lsls	r1, r2, #1
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	430b      	orrs	r3, r1
 8007c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c96:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 f84d 	bl	8008d3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f893 	bl	8008dcc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	3305      	adds	r3, #5
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	021a      	lsls	r2, r3, #8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	3303      	adds	r3, #3
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	061a      	lsls	r2, r3, #24
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	041b      	lsls	r3, r3, #16
 8007cd8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007ce4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007cf2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007cf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2210      	movs	r2, #16
 8007d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	58024400 	.word	0x58024400
 8007d18:	58000400 	.word	0x58000400
 8007d1c:	431bde83 	.word	0x431bde83
 8007d20:	ffff8001 	.word	0xffff8001

08007d24 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d32:	2b10      	cmp	r3, #16
 8007d34:	d179      	bne.n	8007e2a <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2223      	movs	r2, #35	; 0x23
 8007d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <HAL_ETH_Start_IT+0x110>)
 8007d52:	430b      	orrs	r3, r1
 8007d54:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	4b34      	ldr	r3, [pc, #208]	; (8007e38 <HAL_ETH_Start_IT+0x114>)
 8007d66:	430b      	orrs	r3, r1
 8007d68:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2204      	movs	r2, #4
 8007d70:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f9eb 	bl	800814e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0202 	orr.w	r2, r2, #2
 8007d86:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0201 	orr.w	r2, r2, #1
 8007da8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dc4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007de0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dec:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6812      	ldr	r2, [r2, #0]
 8007df4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8007df8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dfc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e08:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8007e14:	430b      	orrs	r3, r1
 8007e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e1a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2223      	movs	r2, #35	; 0x23
 8007e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e000      	b.n	8007e2c <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
  }
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	0c020060 	.word	0x0c020060
 8007e38:	0c20c000 	.word	0x0c20c000

08007e3c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4a:	2b23      	cmp	r3, #35	; 0x23
 8007e4c:	d165      	bne.n	8007f1a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2223      	movs	r2, #35	; 0x23
 8007e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5e:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	4b30      	ldr	r3, [pc, #192]	; (8007f28 <HAL_ETH_Stop_IT+0xec>)
 8007e68:	400b      	ands	r3, r1
 8007e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e6e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	f023 0301 	bic.w	r3, r3, #1
 8007e86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e8a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	f023 0301 	bic.w	r3, r3, #1
 8007ea2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ea6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0202 	bic.w	r2, r2, #2
 8007edc:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	e00e      	b.n	8007f02 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	3212      	adds	r2, #18
 8007eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eee:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d9ed      	bls.n	8007ee4 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2210      	movs	r2, #16
 8007f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e000      	b.n	8007f1c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	ffff2f3e 	.word	0xffff2f3e

08007f2c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d109      	bne.n	8007f50 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f42:	f043 0201 	orr.w	r2, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e03a      	b.n	8007fc6 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f56:	2b23      	cmp	r3, #35	; 0x23
 8007f58:	d134      	bne.n	8007fc4 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8007f62:	2201      	movs	r2, #1
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 ff8e 	bl	8008e88 <ETH_Prepare_Tx_Descriptors>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f78:	f043 0202 	orr.w	r2, r3, #2
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e01f      	b.n	8007fc6 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8007f86:	f3bf 8f4f 	dsb	sy
}
 8007f8a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	629a      	str	r2, [r3, #40]	; 0x28
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d904      	bls.n	8007fa8 <HAL_ETH_Transmit_IT+0x7c>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	1f1a      	subs	r2, r3, #4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3106      	adds	r1, #6
 8007fb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fbc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e000      	b.n	8007fc6 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
  }
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b088      	sub	sp, #32
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	f043 0201 	orr.w	r2, r3, #1
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e0a5      	b.n	8008146 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008000:	2b23      	cmp	r3, #35	; 0x23
 8008002:	d001      	beq.n	8008008 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e09e      	b.n	8008146 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	3212      	adds	r2, #18
 8008014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008018:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801e:	f1c3 0304 	rsb	r3, r3, #4
 8008022:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8008024:	e067      	b.n	80080f6 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d103      	bne.n	8008056 <HAL_ETH_ReadData+0x88>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d03d      	beq.n	80080d2 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80080ac:	461a      	mov	r2, r3
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	f00c f803 	bl	80140bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	441a      	add	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2200      	movs	r2, #0
 80080d0:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3301      	adds	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d902      	bls.n	80080e4 <HAL_ETH_ReadData+0x116>
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3b04      	subs	r3, #4
 80080e2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	3212      	adds	r2, #18
 80080ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ee:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	3301      	adds	r3, #1
 80080f4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	db06      	blt.n	800810c <HAL_ETH_ReadData+0x13e>
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	429a      	cmp	r2, r3
 8008104:	d202      	bcs.n	800810c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d08c      	beq.n	8008026 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	441a      	add	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f814 	bl	800814e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d108      	bne.n	8008144 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	e000      	b.n	8008146 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
}
 8008146:	4618      	mov	r0, r3
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b088      	sub	sp, #32
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800815a:	2301      	movs	r3, #1
 800815c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008162:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	3212      	adds	r2, #18
 800816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008174:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8008176:	e03b      	b.n	80081f0 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d112      	bne.n	80081a6 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8008180:	f107 030c 	add.w	r3, r7, #12
 8008184:	4618      	mov	r0, r3
 8008186:	f00b ff69 	bl	801405c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	74fb      	strb	r3, [r7, #19]
 8008194:	e007      	b.n	80081a6 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	461a      	mov	r2, r3
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	461a      	mov	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80081a6:	7cfb      	ldrb	r3, [r7, #19]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d021      	beq.n	80081f0 <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80081ac:	f3bf 8f5f 	dmb	sy
}
 80081b0:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d004      	beq.n	80081c4 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	e003      	b.n	80081cc <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80081ca:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d902      	bls.n	80081de <ETH_UpdateDescriptor+0x90>
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3b04      	subs	r3, #4
 80081dc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	3212      	adds	r2, #18
 80081e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e8:	617b      	str	r3, [r7, #20]
      desccount--;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <ETH_UpdateDescriptor+0xae>
 80081f6:	7cfb      	ldrb	r3, [r7, #19]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1bd      	bne.n	8008178 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	429a      	cmp	r2, r3
 8008204:	d00d      	beq.n	8008222 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820e:	461a      	mov	r2, r3
 8008210:	2300      	movs	r3, #0
 8008212:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8008222:	bf00      	nop
 8008224:	3720      	adds	r7, #32
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3318      	adds	r3, #24
 8008236:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8008248:	e03f      	b.n	80082ca <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800824a:	2301      	movs	r3, #1
 800824c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	3b01      	subs	r3, #1
 8008252:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	3304      	adds	r3, #4
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	3301      	adds	r3, #1
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d028      	beq.n	80082ca <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68d9      	ldr	r1, [r3, #12]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	4613      	mov	r3, r2
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	4413      	add	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	440b      	add	r3, r1
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	db1b      	blt.n	80082c6 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	3304      	adds	r3, #4
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4618      	mov	r0, r3
 800829c:	f00b ff76 	bl	801418c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3304      	adds	r3, #4
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3301      	adds	r3, #1
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80082c4:	e001      	b.n	80082ca <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <HAL_ETH_ReleaseTxPacket+0xac>
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1b9      	bne.n	800824a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e03e      	b.n	8008380 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800830a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	055b      	lsls	r3, r3, #21
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	041b      	lsls	r3, r3, #16
 8008324:	4313      	orrs	r3, r2
 8008326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f043 030c 	orr.w	r3, r3, #12
 800832e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8008342:	f7ff fa2f 	bl	80077a4 <HAL_GetTick>
 8008346:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008348:	e009      	b.n	800835e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800834a:	f7ff fa2b 	bl	80077a4 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008358:	d901      	bls.n	800835e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e010      	b.n	8008380 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1ed      	bne.n	800834a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008376:	b29b      	uxth	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e03c      	b.n	8008424 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083b2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	055b      	lsls	r3, r3, #21
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	041b      	lsls	r3, r3, #16
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f023 030c 	bic.w	r3, r3, #12
 80083d6:	f043 0304 	orr.w	r3, r3, #4
 80083da:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	4b10      	ldr	r3, [pc, #64]	; (800842c <HAL_ETH_WritePHYRegister+0xa4>)
 80083ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80083ee:	4a0f      	ldr	r2, [pc, #60]	; (800842c <HAL_ETH_WritePHYRegister+0xa4>)
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80083f6:	f7ff f9d5 	bl	80077a4 <HAL_GetTick>
 80083fa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80083fc:	e009      	b.n	8008412 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80083fe:	f7ff f9d1 	bl	80077a4 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800840c:	d901      	bls.n	8008412 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e008      	b.n	8008424 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1ed      	bne.n	80083fe <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40028000 	.word	0x40028000

08008430 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e1c3      	b.n	80087cc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 020c 	and.w	r2, r3, #12
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b00      	cmp	r3, #0
 800845e:	bf14      	ite	ne
 8008460:	2301      	movne	r3, #1
 8008462:	2300      	moveq	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008486:	2b00      	cmp	r3, #0
 8008488:	bf0c      	ite	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	2300      	movne	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bf14      	ite	ne
 80084a6:	2301      	movne	r3, #1
 80084a8:	2300      	moveq	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bf0c      	ite	eq
 80084c0:	2301      	moveq	r3, #1
 80084c2:	2300      	movne	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80084d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bf14      	ite	ne
 80084da:	2301      	movne	r3, #1
 80084dc:	2300      	moveq	r3, #0
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bf14      	ite	ne
 80084f4:	2301      	movne	r3, #1
 80084f6:	2300      	moveq	r3, #0
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	461a      	mov	r2, r3
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008526:	2b00      	cmp	r3, #0
 8008528:	bf14      	ite	ne
 800852a:	2301      	movne	r3, #1
 800852c:	2300      	moveq	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf0c      	ite	eq
 8008544:	2301      	moveq	r3, #1
 8008546:	2300      	movne	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	461a      	mov	r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800855a:	2b00      	cmp	r3, #0
 800855c:	bf0c      	ite	eq
 800855e:	2301      	moveq	r3, #1
 8008560:	2300      	movne	r3, #0
 8008562:	b2db      	uxtb	r3, r3
 8008564:	461a      	mov	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008574:	2b00      	cmp	r3, #0
 8008576:	bf14      	ite	ne
 8008578:	2301      	movne	r3, #1
 800857a:	2300      	moveq	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	461a      	mov	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800858e:	2b00      	cmp	r3, #0
 8008590:	bf14      	ite	ne
 8008592:	2301      	movne	r3, #1
 8008594:	2300      	moveq	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bf14      	ite	ne
 80085ac:	2301      	movne	r3, #1
 80085ae:	2300      	moveq	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	461a      	mov	r2, r3
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80085be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bf14      	ite	ne
 80085c6:	2301      	movne	r3, #1
 80085c8:	2300      	moveq	r3, #0
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf14      	ite	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	2300      	moveq	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008620:	2b00      	cmp	r3, #0
 8008622:	bf0c      	ite	eq
 8008624:	2301      	moveq	r3, #1
 8008626:	2300      	movne	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	461a      	mov	r2, r3
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800863c:	2b00      	cmp	r3, #0
 800863e:	bf14      	ite	ne
 8008640:	2301      	movne	r3, #1
 8008642:	2300      	moveq	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	461a      	mov	r2, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8008654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008658:	2b00      	cmp	r3, #0
 800865a:	bf14      	ite	ne
 800865c:	2301      	movne	r3, #1
 800865e:	2300      	moveq	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8008674:	2b00      	cmp	r3, #0
 8008676:	bf14      	ite	ne
 8008678:	2301      	movne	r3, #1
 800867a:	2300      	moveq	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	0e5b      	lsrs	r3, r3, #25
 800868e:	f003 021f 	and.w	r2, r3, #31
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bf14      	ite	ne
 80086a4:	2301      	movne	r3, #1
 80086a6:	2300      	moveq	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 020f 	and.w	r2, r3, #15
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bf14      	ite	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	2300      	moveq	r3, #0
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bf0c      	ite	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	2300      	movne	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870c:	0c1b      	lsrs	r3, r3, #16
 800870e:	b29a      	uxth	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	bf14      	ite	ne
 8008724:	2301      	movne	r3, #1
 8008726:	2300      	moveq	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800873e:	2b00      	cmp	r3, #0
 8008740:	bf14      	ite	ne
 8008742:	2301      	movne	r3, #1
 8008744:	2300      	moveq	r3, #0
 8008746:	b2db      	uxtb	r3, r3
 8008748:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008758:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008768:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	bf14      	ite	ne
 8008780:	2301      	movne	r3, #1
 8008782:	2300      	moveq	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	2b00      	cmp	r3, #0
 800879c:	bf14      	ite	ne
 800879e:	2301      	movne	r3, #1
 80087a0:	2300      	moveq	r3, #0
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80087b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf0c      	ite	eq
 80087bc:	2301      	moveq	r3, #1
 80087be:	2300      	movne	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e00b      	b.n	8008804 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d105      	bne.n	8008802 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f85f 	bl	80088bc <ETH_SetMACConfig>

    return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800881c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008824:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008826:	f004 fb85 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800882a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d908      	bls.n	8008846 <HAL_ETH_SetMDIOClockRange+0x3a>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d804      	bhi.n	8008846 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	e027      	b.n	8008896 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4a18      	ldr	r2, [pc, #96]	; (80088ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d908      	bls.n	8008860 <HAL_ETH_SetMDIOClockRange+0x54>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	4a17      	ldr	r2, [pc, #92]	; (80088b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d204      	bcs.n	8008860 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	e01a      	b.n	8008896 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d303      	bcc.n	8008870 <HAL_ETH_SetMDIOClockRange+0x64>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4a12      	ldr	r2, [pc, #72]	; (80088b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d911      	bls.n	8008894 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d908      	bls.n	800888a <HAL_ETH_SetMDIOClockRange+0x7e>
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d804      	bhi.n	800888a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e005      	b.n	8008896 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	e000      	b.n	8008896 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008894:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80088a0:	bf00      	nop
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	01312cff 	.word	0x01312cff
 80088ac:	02160ebf 	.word	0x02160ebf
 80088b0:	03938700 	.word	0x03938700
 80088b4:	05f5e0ff 	.word	0x05f5e0ff
 80088b8:	08f0d17f 	.word	0x08f0d17f

080088bc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80088ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	791b      	ldrb	r3, [r3, #4]
 80088d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80088d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	7b1b      	ldrb	r3, [r3, #12]
 80088dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80088de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	7b5b      	ldrb	r3, [r3, #13]
 80088e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80088e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	7b9b      	ldrb	r3, [r3, #14]
 80088ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80088ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	7bdb      	ldrb	r3, [r3, #15]
 80088f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80088f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	d102      	bne.n	8008906 <ETH_SetMACConfig+0x4a>
 8008900:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008904:	e000      	b.n	8008908 <ETH_SetMACConfig+0x4c>
 8008906:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008908:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	7c52      	ldrb	r2, [r2, #17]
 800890e:	2a00      	cmp	r2, #0
 8008910:	d102      	bne.n	8008918 <ETH_SetMACConfig+0x5c>
 8008912:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008916:	e000      	b.n	800891a <ETH_SetMACConfig+0x5e>
 8008918:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800891a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	7c9b      	ldrb	r3, [r3, #18]
 8008920:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008922:	431a      	orrs	r2, r3
               macconf->Speed |
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8008928:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800892e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	7f1b      	ldrb	r3, [r3, #28]
 8008934:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8008936:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	7f5b      	ldrb	r3, [r3, #29]
 800893c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800893e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	7f92      	ldrb	r2, [r2, #30]
 8008944:	2a00      	cmp	r2, #0
 8008946:	d102      	bne.n	800894e <ETH_SetMACConfig+0x92>
 8008948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800894c:	e000      	b.n	8008950 <ETH_SetMACConfig+0x94>
 800894e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8008950:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	7fdb      	ldrb	r3, [r3, #31]
 8008956:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8008958:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008960:	2a00      	cmp	r2, #0
 8008962:	d102      	bne.n	800896a <ETH_SetMACConfig+0xae>
 8008964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008968:	e000      	b.n	800896c <ETH_SetMACConfig+0xb0>
 800896a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800896c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8008972:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800897a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800897c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	4b56      	ldr	r3, [pc, #344]	; (8008ae8 <ETH_SetMACConfig+0x22c>)
 800898e:	4013      	ands	r3, r2
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6812      	ldr	r2, [r2, #0]
 8008994:	68f9      	ldr	r1, [r7, #12]
 8008996:	430b      	orrs	r3, r1
 8008998:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80089a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80089b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80089ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80089bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d102      	bne.n	80089ce <ETH_SetMACConfig+0x112>
 80089c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089cc:	e000      	b.n	80089d0 <ETH_SetMACConfig+0x114>
 80089ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80089d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	4b42      	ldr	r3, [pc, #264]	; (8008aec <ETH_SetMACConfig+0x230>)
 80089e2:	4013      	ands	r3, r2
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	68f9      	ldr	r1, [r7, #12]
 80089ea:	430b      	orrs	r3, r1
 80089ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68da      	ldr	r2, [r3, #12]
 8008a04:	4b3a      	ldr	r3, [pc, #232]	; (8008af0 <ETH_SetMACConfig+0x234>)
 8008a06:	4013      	ands	r3, r2
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	6812      	ldr	r2, [r2, #0]
 8008a0c:	68f9      	ldr	r1, [r7, #12]
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008a18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008a1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	d101      	bne.n	8008a2e <ETH_SetMACConfig+0x172>
 8008a2a:	2280      	movs	r2, #128	; 0x80
 8008a2c:	e000      	b.n	8008a30 <ETH_SetMACConfig+0x174>
 8008a2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008a30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a42:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8008a46:	4013      	ands	r3, r2
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	68f9      	ldr	r1, [r7, #12]
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008a60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a6e:	f023 0103 	bic.w	r1, r3, #3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008a86:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	d101      	bne.n	8008aaa <ETH_SetMACConfig+0x1ee>
 8008aa6:	2240      	movs	r2, #64	; 0x40
 8008aa8:	e000      	b.n	8008aac <ETH_SetMACConfig+0x1f0>
 8008aaa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008aac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008ab4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008abe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008acc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008adc:	bf00      	nop
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	00048083 	.word	0x00048083
 8008aec:	c0f88000 	.word	0xc0f88000
 8008af0:	fffffef0 	.word	0xfffffef0

08008af4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4b38      	ldr	r3, [pc, #224]	; (8008bec <ETH_SetDMAConfig+0xf8>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	6811      	ldr	r1, [r2, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	430b      	orrs	r3, r1
 8008b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b1a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	791b      	ldrb	r3, [r3, #4]
 8008b20:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008b26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	7b1b      	ldrb	r3, [r3, #12]
 8008b2c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	4b2c      	ldr	r3, [pc, #176]	; (8008bf0 <ETH_SetDMAConfig+0xfc>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	430b      	orrs	r3, r1
 8008b48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	7b5b      	ldrb	r3, [r3, #13]
 8008b52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008b68:	4b22      	ldr	r3, [pc, #136]	; (8008bf4 <ETH_SetDMAConfig+0x100>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	430b      	orrs	r3, r1
 8008b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b78:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	7d1b      	ldrb	r3, [r3, #20]
 8008b84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008b86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	7f5b      	ldrb	r3, [r3, #29]
 8008b8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8008b9e:	4b16      	ldr	r3, [pc, #88]	; (8008bf8 <ETH_SetDMAConfig+0x104>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	7f1b      	ldrb	r3, [r3, #28]
 8008bb6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008bcc:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <ETH_SetDMAConfig+0x108>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	68f9      	ldr	r1, [r7, #12]
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bdc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	ffff87fd 	.word	0xffff87fd
 8008bf0:	ffff2ffe 	.word	0xffff2ffe
 8008bf4:	fffec000 	.word	0xfffec000
 8008bf8:	ffc0efef 	.word	0xffc0efef
 8008bfc:	7fc0ffff 	.word	0x7fc0ffff

08008c00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b0a4      	sub	sp, #144	; 0x90
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008c24:	2301      	movs	r3, #1
 8008c26:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008c36:	2301      	movs	r3, #1
 8008c38:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c40:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008c58:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008c5c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008c64:	2300      	movs	r3, #0
 8008c66:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008c82:	2300      	movs	r3, #0
 8008c84:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008c86:	2300      	movs	r3, #0
 8008c88:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008c92:	2301      	movs	r3, #1
 8008c94:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008c98:	2320      	movs	r3, #32
 8008c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008caa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008cb4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff fde6 	bl	80088bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008d0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008d10:	2300      	movs	r3, #0
 8008d12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008d14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8008d20:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008d26:	f107 0308 	add.w	r3, r7, #8
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff fee1 	bl	8008af4 <ETH_SetDMAConfig>
}
 8008d32:	bf00      	nop
 8008d34:	3790      	adds	r7, #144	; 0x90
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	e01d      	b.n	8008d84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68d9      	ldr	r1, [r3, #12]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	4413      	add	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	440b      	add	r3, r1
 8008d58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2200      	movs	r2, #0
 8008d64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	3206      	adds	r2, #6
 8008d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d9de      	bls.n	8008d48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dbc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8008dc0:	bf00      	nop
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	e023      	b.n	8008e22 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6919      	ldr	r1, [r3, #16]
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	4613      	mov	r3, r2
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	4413      	add	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	440b      	add	r3, r1
 8008dea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2200      	movs	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2200      	movs	r2, #0
 8008df6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2200      	movs	r2, #0
 8008e02:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2200      	movs	r2, #0
 8008e08:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	3212      	adds	r2, #18
 8008e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d9d8      	bls.n	8008dda <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2303      	movs	r3, #3
 8008e52:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691a      	ldr	r2, [r3, #16]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e62:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e76:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8008e7a:	bf00      	nop
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b08d      	sub	sp, #52	; 0x34
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3318      	adds	r3, #24
 8008e98:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eca:	d007      	beq.n	8008edc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8008edc:	2302      	movs	r3, #2
 8008ede:	e259      	b.n	8009394 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d044      	beq.n	8008f76 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	4b75      	ldr	r3, [pc, #468]	; (80090c8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008f18:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0308 	and.w	r3, r3, #8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d027      	beq.n	8008f76 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	041b      	lsls	r3, r3, #16
 8008f32:	431a      	orrs	r2, r3
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	431a      	orrs	r2, r3
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008f64:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008f74:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0310 	and.w	r3, r3, #16
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00e      	beq.n	8008fa0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	4b51      	ldr	r3, [pc, #324]	; (80090cc <ETH_Prepare_Tx_Descriptors+0x244>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	6992      	ldr	r2, [r2, #24]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d105      	bne.n	8008fb8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d036      	beq.n	8009026 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8008fc4:	f3bf 8f5f 	dmb	sy
}
 8008fc8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	3301      	adds	r3, #1
 8008fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d902      	bls.n	8008fe8 <ETH_Prepare_Tx_Descriptors+0x160>
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	3b04      	subs	r3, #4
 8008fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff0:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009004:	d10f      	bne.n	8009026 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8009010:	f3bf 8f5f 	dmb	sy
}
 8009014:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8009022:	2302      	movs	r3, #2
 8009024:	e1b6      	b.n	8009394 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	3301      	adds	r3, #1
 800902a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	4b24      	ldr	r3, [pc, #144]	; (80090cc <ETH_Prepare_Tx_Descriptors+0x244>)
 800903c:	4013      	ands	r3, r2
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	6852      	ldr	r2, [r2, #4]
 8009042:	431a      	orrs	r2, r3
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d012      	beq.n	8009076 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	4b1a      	ldr	r3, [pc, #104]	; (80090d0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8009066:	4013      	ands	r3, r2
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	6852      	ldr	r2, [r2, #4]
 800906c:	0412      	lsls	r2, r2, #16
 800906e:	431a      	orrs	r2, r3
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	609a      	str	r2, [r3, #8]
 8009074:	e008      	b.n	8009088 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	2200      	movs	r2, #0
 800907a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	4b13      	ldr	r3, [pc, #76]	; (80090d0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8009082:	4013      	ands	r3, r2
 8009084:	6a3a      	ldr	r2, [r7, #32]
 8009086:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0310 	and.w	r3, r3, #16
 8009090:	2b00      	cmp	r3, #0
 8009092:	d021      	beq.n	80090d8 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	04db      	lsls	r3, r3, #19
 80090a2:	431a      	orrs	r2, r3
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	69d2      	ldr	r2, [r2, #28]
 80090b4:	431a      	orrs	r2, r3
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	e02e      	b.n	8009126 <ETH_Prepare_Tx_Descriptors+0x29e>
 80090c8:	ffff0000 	.word	0xffff0000
 80090cc:	ffffc000 	.word	0xffffc000
 80090d0:	c000ffff 	.word	0xc000ffff
 80090d4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	4b7b      	ldr	r3, [pc, #492]	; (80092cc <ETH_Prepare_Tx_Descriptors+0x444>)
 80090de:	4013      	ands	r3, r2
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	6852      	ldr	r2, [r2, #4]
 80090e4:	431a      	orrs	r2, r3
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d008      	beq.n	8009108 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	431a      	orrs	r2, r3
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	431a      	orrs	r2, r3
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d008      	beq.n	8009144 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	431a      	orrs	r2, r3
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800915c:	f3bf 8f5f 	dmb	sy
}
 8009160:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 80da 	beq.w	8009330 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	431a      	orrs	r2, r3
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800918e:	e0cf      	b.n	8009330 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	3301      	adds	r3, #1
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d902      	bls.n	80091ae <ETH_Prepare_Tx_Descriptors+0x326>
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	3b04      	subs	r3, #4
 80091ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b6:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d0:	d007      	beq.n	80091e2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	3304      	adds	r3, #4
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d029      	beq.n	8009236 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ee:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80091f0:	2300      	movs	r3, #0
 80091f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80091f4:	e019      	b.n	800922a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80091f6:	f3bf 8f5f 	dmb	sy
}
 80091fa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	3301      	adds	r3, #1
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	2b03      	cmp	r3, #3
 8009212:	d902      	bls.n	800921a <ETH_Prepare_Tx_Descriptors+0x392>
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	3b04      	subs	r3, #4
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800921e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009222:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	3301      	adds	r3, #1
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
 800922a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	429a      	cmp	r2, r3
 8009230:	d3e1      	bcc.n	80091f6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8009232:	2302      	movs	r3, #2
 8009234:	e0ae      	b.n	8009394 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	3301      	adds	r3, #1
 800923a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	4b1f      	ldr	r3, [pc, #124]	; (80092d0 <ETH_Prepare_Tx_Descriptors+0x448>)
 8009252:	4013      	ands	r3, r2
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	6852      	ldr	r2, [r2, #4]
 8009258:	431a      	orrs	r2, r3
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d012      	beq.n	800928c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	461a      	mov	r2, r3
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	689a      	ldr	r2, [r3, #8]
 800927a:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800927c:	4013      	ands	r3, r2
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	6852      	ldr	r2, [r2, #4]
 8009282:	0412      	lsls	r2, r2, #16
 8009284:	431a      	orrs	r2, r3
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	609a      	str	r2, [r3, #8]
 800928a:	e008      	b.n	800929e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	2200      	movs	r2, #0
 8009290:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8009298:	4013      	ands	r3, r2
 800929a:	6a3a      	ldr	r2, [r7, #32]
 800929c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0310 	and.w	r3, r3, #16
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d018      	beq.n	80092dc <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <ETH_Prepare_Tx_Descriptors+0x450>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	69d2      	ldr	r2, [r2, #28]
 80092b6:	431a      	orrs	r2, r3
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	60da      	str	r2, [r3, #12]
 80092c8:	e020      	b.n	800930c <ETH_Prepare_Tx_Descriptors+0x484>
 80092ca:	bf00      	nop
 80092cc:	ffff8000 	.word	0xffff8000
 80092d0:	ffffc000 	.word	0xffffc000
 80092d4:	c000ffff 	.word	0xc000ffff
 80092d8:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	4b2f      	ldr	r3, [pc, #188]	; (80093a0 <ETH_Prepare_Tx_Descriptors+0x518>)
 80092e2:	4013      	ands	r3, r2
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	6852      	ldr	r2, [r2, #4]
 80092e8:	431a      	orrs	r2, r3
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d008      	beq.n	800930c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	431a      	orrs	r2, r3
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	3301      	adds	r3, #1
 8009310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8009312:	f3bf 8f5f 	dmb	sy
}
 8009316:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f47f af2b 	bne.w	8009190 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d006      	beq.n	800934e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	e005      	b.n	800935a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800936a:	6979      	ldr	r1, [r7, #20]
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	3304      	adds	r3, #4
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800937c:	b672      	cpsid	i
}
 800937e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	4413      	add	r3, r2
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800938e:	b662      	cpsie	i
}
 8009390:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3734      	adds	r7, #52	; 0x34
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	ffff8000 	.word	0xffff8000

080093a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b098      	sub	sp, #96	; 0x60
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80093ac:	4a84      	ldr	r2, [pc, #528]	; (80095c0 <HAL_FDCAN_Init+0x21c>)
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	4611      	mov	r1, r2
 80093b4:	224c      	movs	r2, #76	; 0x4c
 80093b6:	4618      	mov	r0, r3
 80093b8:	f01d ff58 	bl	802726c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e1c6      	b.n	8009754 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a7e      	ldr	r2, [pc, #504]	; (80095c4 <HAL_FDCAN_Init+0x220>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d106      	bne.n	80093de <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80093d8:	461a      	mov	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fd fcaa 	bl	8006d4c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699a      	ldr	r2, [r3, #24]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0210 	bic.w	r2, r2, #16
 8009406:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009408:	f7fe f9cc 	bl	80077a4 <HAL_GetTick>
 800940c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800940e:	e014      	b.n	800943a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009410:	f7fe f9c8 	bl	80077a4 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b0a      	cmp	r3, #10
 800941c:	d90d      	bls.n	800943a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009424:	f043 0201 	orr.w	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2203      	movs	r2, #3
 8009432:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e18c      	b.n	8009754 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b08      	cmp	r3, #8
 8009446:	d0e3      	beq.n	8009410 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009458:	f7fe f9a4 	bl	80077a4 <HAL_GetTick>
 800945c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800945e:	e014      	b.n	800948a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009460:	f7fe f9a0 	bl	80077a4 <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	2b0a      	cmp	r3, #10
 800946c:	d90d      	bls.n	800948a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009474:	f043 0201 	orr.w	r2, r3, #1
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2203      	movs	r2, #3
 8009482:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e164      	b.n	8009754 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0e3      	beq.n	8009460 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0202 	orr.w	r2, r2, #2
 80094a6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	7c1b      	ldrb	r3, [r3, #16]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d108      	bne.n	80094c2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094be:	619a      	str	r2, [r3, #24]
 80094c0:	e007      	b.n	80094d2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7c5b      	ldrb	r3, [r3, #17]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d108      	bne.n	80094ec <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699a      	ldr	r2, [r3, #24]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094e8:	619a      	str	r2, [r3, #24]
 80094ea:	e007      	b.n	80094fc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7c9b      	ldrb	r3, [r3, #18]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d108      	bne.n	8009516 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009512:	619a      	str	r2, [r3, #24]
 8009514:	e007      	b.n	8009526 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	699a      	ldr	r2, [r3, #24]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009524:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	699a      	ldr	r2, [r3, #24]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800954a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0210 	bic.w	r2, r2, #16
 800955a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d108      	bne.n	8009576 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699a      	ldr	r2, [r3, #24]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0204 	orr.w	r2, r2, #4
 8009572:	619a      	str	r2, [r3, #24]
 8009574:	e030      	b.n	80095d8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d02c      	beq.n	80095d8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d020      	beq.n	80095c8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009594:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f042 0210 	orr.w	r2, r2, #16
 80095a4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d114      	bne.n	80095d8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0220 	orr.w	r2, r2, #32
 80095bc:	619a      	str	r2, [r3, #24]
 80095be:	e00b      	b.n	80095d8 <HAL_FDCAN_Init+0x234>
 80095c0:	080283c4 	.word	0x080283c4
 80095c4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0220 	orr.w	r2, r2, #32
 80095d6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	3b01      	subs	r3, #1
 80095de:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80095e8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80095f0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009600:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009602:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800960c:	d115      	bne.n	800963a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	3b01      	subs	r3, #1
 800961a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800961c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009622:	3b01      	subs	r3, #1
 8009624:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8009626:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	3b01      	subs	r3, #1
 8009630:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8009636:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8009638:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009660:	4413      	add	r3, r2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d011      	beq.n	800968a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800966e:	f023 0107 	bic.w	r1, r3, #7
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	3360      	adds	r3, #96	; 0x60
 800967a:	443b      	add	r3, r7
 800967c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d011      	beq.n	80096b6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800969a:	f023 0107 	bic.w	r1, r3, #7
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	3360      	adds	r3, #96	; 0x60
 80096a6:	443b      	add	r3, r7
 80096a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d012      	beq.n	80096e4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80096c6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	3360      	adds	r3, #96	; 0x60
 80096d2:	443b      	add	r3, r7
 80096d4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80096d8:	011a      	lsls	r2, r3, #4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d012      	beq.n	8009712 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80096f4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	3360      	adds	r3, #96	; 0x60
 8009700:	443b      	add	r3, r7
 8009702:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009706:	021a      	lsls	r2, r3, #8
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a11      	ldr	r2, [pc, #68]	; (800975c <HAL_FDCAN_Init+0x3b8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d107      	bne.n	800972c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	689a      	ldr	r2, [r3, #8]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f022 0203 	bic.w	r2, r2, #3
 800972a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fe23 	bl	800a390 <FDCAN_CalcultateRamBlockAddresses>
 800974a:	4603      	mov	r3, r0
 800974c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8009750:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8009754:	4618      	mov	r0, r3
 8009756:	3760      	adds	r7, #96	; 0x60
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	4000a000 	.word	0x4000a000

08009760 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b01      	cmp	r3, #1
 8009778:	d110      	bne.n	800979c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8009782:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8009788:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8009794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	e008      	b.n	80097ae <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097a2:	f043 0204 	orr.w	r2, r3, #4
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
  }
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d111      	bne.n	80097f2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699a      	ldr	r2, [r3, #24]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	e008      	b.n	8009804 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097f8:	f043 0204 	orr.w	r2, r3, #4
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
  }
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b02      	cmp	r3, #2
 8009826:	d15b      	bne.n	80098e0 <HAL_FDCAN_Stop+0xd0>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009838:	e013      	b.n	8009862 <HAL_FDCAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b32      	cmp	r3, #50	; 0x32
 800983e:	d90d      	bls.n	800985c <HAL_FDCAN_Stop+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009846:	f043 0201 	orr.w	r2, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2203      	movs	r2, #3
 8009854:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e04a      	b.n	80098f2 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3301      	adds	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0e4      	beq.n	800983a <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	699a      	ldr	r2, [r3, #24]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0210 	bic.w	r2, r2, #16
 8009882:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009884:	e013      	b.n	80098ae <HAL_FDCAN_Stop+0x9e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b32      	cmp	r3, #50	; 0x32
 800988a:	d90d      	bls.n	80098a8 <HAL_FDCAN_Stop+0x98>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009892:	f043 0201 	orr.w	r2, r3, #1
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2203      	movs	r2, #3
 80098a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e024      	b.n	80098f2 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3301      	adds	r3, #1
 80098ac:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	f003 0308 	and.w	r3, r3, #8
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d0e4      	beq.n	8009886 <HAL_FDCAN_Stop+0x76>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699a      	ldr	r2, [r3, #24]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0202 	orr.w	r2, r2, #2
 80098ca:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Return function status */
    return HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	e008      	b.n	80098f2 <HAL_FDCAN_Stop+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098e6:	f043 0208 	orr.w	r2, r3, #8
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
  }
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b086      	sub	sp, #24
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b02      	cmp	r3, #2
 8009914:	d141      	bne.n	800999a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800991e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d109      	bne.n	800993a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800992c:	f043 0220 	orr.w	r2, r3, #32
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e038      	b.n	80099ac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d009      	beq.n	800995e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009950:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e026      	b.n	80099ac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009966:	0c1b      	lsrs	r3, r3, #16
 8009968:	f003 031f 	and.w	r3, r3, #31
 800996c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fe91 	bl	800a69c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2101      	movs	r1, #1
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	fa01 f202 	lsl.w	r2, r1, r2
 8009986:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800998a:	2201      	movs	r2, #1
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	409a      	lsls	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	e008      	b.n	80099ac <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099a0:	f043 0208 	orr.w	r2, r3, #8
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
  }
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b08b      	sub	sp, #44	; 0x2c
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80099cc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80099ce:	7efb      	ldrb	r3, [r7, #27]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	f040 814b 	bne.w	8009c6c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b40      	cmp	r3, #64	; 0x40
 80099da:	d14d      	bne.n	8009a78 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d109      	bne.n	8009a00 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099f2:	f043 0220 	orr.w	r2, r3, #32
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e13e      	b.n	8009c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d109      	bne.n	8009a24 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e12c      	b.n	8009c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a2c:	0e1b      	lsrs	r3, r3, #24
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d10b      	bne.n	8009a4e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a3e:	0fdb      	lsrs	r3, r3, #31
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a48:	d101      	bne.n	8009a4e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a56:	0a1b      	lsrs	r3, r3, #8
 8009a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a5c:	69fa      	ldr	r2, [r7, #28]
 8009a5e:	4413      	add	r3, r2
 8009a60:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6a:	69f9      	ldr	r1, [r7, #28]
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
 8009a76:	e069      	b.n	8009b4c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b41      	cmp	r3, #65	; 0x41
 8009a7c:	d14d      	bne.n	8009b1a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a94:	f043 0220 	orr.w	r2, r3, #32
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e0ed      	b.n	8009c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d109      	bne.n	8009ac6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ab8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e0db      	b.n	8009c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ace:	0e1b      	lsrs	r3, r3, #24
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d10b      	bne.n	8009af0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ae0:	0fdb      	lsrs	r3, r3, #31
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aea:	d101      	bne.n	8009af0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009aec:	2301      	movs	r3, #1
 8009aee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009af8:	0a1b      	lsrs	r3, r3, #8
 8009afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	4413      	add	r3, r2
 8009b02:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0c:	69f9      	ldr	r1, [r7, #28]
 8009b0e:	fb01 f303 	mul.w	r3, r1, r3
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
 8009b18:	e018      	b.n	8009b4c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d309      	bcc.n	8009b38 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b2a:	f043 0220 	orr.w	r2, r3, #32
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0a2      	b.n	8009c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	fb01 f303 	mul.w	r3, r1, r3
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d107      	bne.n	8009b70 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	0c9b      	lsrs	r3, r3, #18
 8009b66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	e005      	b.n	8009b7c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	3304      	adds	r3, #4
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	0e1b      	lsrs	r3, r3, #24
 8009bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	0fda      	lsrs	r2, r3, #31
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	3304      	adds	r3, #4
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8009bea:	2300      	movs	r3, #0
 8009bec:	623b      	str	r3, [r7, #32]
 8009bee:	e00a      	b.n	8009c06 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	441a      	add	r2, r3
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	440b      	add	r3, r1
 8009bfc:	7812      	ldrb	r2, [r2, #0]
 8009bfe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	3301      	adds	r3, #1
 8009c04:	623b      	str	r3, [r7, #32]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	0c1b      	lsrs	r3, r3, #16
 8009c0c:	4a1f      	ldr	r2, [pc, #124]	; (8009c8c <HAL_FDCAN_GetRxMessage+0x2d8>)
 8009c0e:	5cd3      	ldrb	r3, [r2, r3]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d3eb      	bcc.n	8009bf0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b40      	cmp	r3, #64	; 0x40
 8009c1c:	d105      	bne.n	8009c2a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8009c28:	e01e      	b.n	8009c68 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2b41      	cmp	r3, #65	; 0x41
 8009c2e:	d105      	bne.n	8009c3c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009c3a:	e015      	b.n	8009c68 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2b1f      	cmp	r3, #31
 8009c40:	d808      	bhi.n	8009c54 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2101      	movs	r1, #1
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009c52:	e009      	b.n	8009c68 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f003 021f 	and.w	r2, r3, #31
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2101      	movs	r1, #1
 8009c60:	fa01 f202 	lsl.w	r2, r1, r2
 8009c64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e008      	b.n	8009c7e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c72:	f043 0208 	orr.w	r2, r3, #8
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
  }
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	372c      	adds	r7, #44	; 0x2c
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	0802b9fc 	.word	0x0802b9fc

08009c90 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009cc6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d002      	beq.n	8009cd4 <HAL_FDCAN_ActivateNotification+0x20>
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d155      	bne.n	8009d80 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d108      	bne.n	8009cf4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f042 0201 	orr.w	r2, r2, #1
 8009cf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009cf2:	e014      	b.n	8009d1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d108      	bne.n	8009d16 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0202 	orr.w	r2, r2, #2
 8009d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d14:	e003      	b.n	8009d1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2203      	movs	r2, #3
 8009d1c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d009      	beq.n	8009d3c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <HAL_FDCAN_ActivateNotification+0xec>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	6812      	ldr	r2, [r2, #0]
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	6553      	str	r3, [r2, #84]	; 0x54
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009d70:	695a      	ldr	r2, [r3, #20]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	0f9b      	lsrs	r3, r3, #30
 8009d76:	490b      	ldr	r1, [pc, #44]	; (8009da4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e008      	b.n	8009d92 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d86:	f043 0202 	orr.w	r2, r3, #2
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	3fcfffff 	.word	0x3fcfffff
 8009da4:	4000a800 	.word	0x4000a800

08009da8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b096      	sub	sp, #88	; 0x58
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8009db0:	4b9a      	ldr	r3, [pc, #616]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	079b      	lsls	r3, r3, #30
 8009db6:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009db8:	4b98      	ldr	r3, [pc, #608]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	079b      	lsls	r3, r3, #30
 8009dbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009dce:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dd8:	4013      	ands	r3, r2
 8009dda:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009df0:	4013      	ands	r3, r2
 8009df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e08:	4013      	ands	r3, r2
 8009e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e12:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8009e16:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e20:	4013      	ands	r3, r2
 8009e22:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8009e2e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e38:	4013      	ands	r3, r2
 8009e3a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4e:	0a1b      	lsrs	r3, r3, #8
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d010      	beq.n	8009e7a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	0a1b      	lsrs	r3, r3, #8
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e6c:	651a      	str	r2, [r3, #80]	; 0x50
 8009e6e:	4b6b      	ldr	r3, [pc, #428]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fa3e 	bl	800a2f6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7c:	0a9b      	lsrs	r3, r3, #10
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01d      	beq.n	8009ec2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	0a9b      	lsrs	r3, r3, #10
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d017      	beq.n	8009ec2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009e9a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8009eb4:	4b59      	ldr	r3, [pc, #356]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009eba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f9f1 	bl	800a2a4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8009ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00d      	beq.n	8009ee4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ece:	4b54      	ldr	r3, [pc, #336]	; (800a020 <HAL_FDCAN_IRQHandler+0x278>)
 8009ed0:	400b      	ands	r3, r1
 8009ed2:	6513      	str	r3, [r2, #80]	; 0x50
 8009ed4:	4a51      	ldr	r2, [pc, #324]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ed8:	0f9b      	lsrs	r3, r3, #30
 8009eda:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8009edc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f9c0 	bl	800a264 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00d      	beq.n	8009f06 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ef0:	4b4b      	ldr	r3, [pc, #300]	; (800a020 <HAL_FDCAN_IRQHandler+0x278>)
 8009ef2:	400b      	ands	r3, r1
 8009ef4:	6513      	str	r3, [r2, #80]	; 0x50
 8009ef6:	4a49      	ldr	r2, [pc, #292]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efa:	0f9b      	lsrs	r3, r3, #30
 8009efc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009efe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f9ba 	bl	800a27a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00d      	beq.n	8009f28 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f12:	4b43      	ldr	r3, [pc, #268]	; (800a020 <HAL_FDCAN_IRQHandler+0x278>)
 8009f14:	400b      	ands	r3, r1
 8009f16:	6513      	str	r3, [r2, #80]	; 0x50
 8009f18:	4a40      	ldr	r2, [pc, #256]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1c:	0f9b      	lsrs	r3, r3, #30
 8009f1e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009f20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7fc fb44 	bl	80065b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00d      	beq.n	8009f4a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f34:	4b3a      	ldr	r3, [pc, #232]	; (800a020 <HAL_FDCAN_IRQHandler+0x278>)
 8009f36:	400b      	ands	r3, r1
 8009f38:	6513      	str	r3, [r2, #80]	; 0x50
 8009f3a:	4a38      	ldr	r2, [pc, #224]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f3e:	0f9b      	lsrs	r3, r3, #30
 8009f40:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009f42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7fc fb46 	bl	80065d6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4c:	0adb      	lsrs	r3, r3, #11
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d010      	beq.n	8009f78 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	0adb      	lsrs	r3, r3, #11
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8009f6c:	4b2b      	ldr	r3, [pc, #172]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f98c 	bl	800a290 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7a:	0a5b      	lsrs	r3, r3, #9
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01d      	beq.n	8009fc0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	0a5b      	lsrs	r3, r3, #9
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d017      	beq.n	8009fc0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009f98:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb0:	651a      	str	r2, [r3, #80]	; 0x50
 8009fb2:	4b1a      	ldr	r3, [pc, #104]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009fb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7fc fb1e 	bl	80065fc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc2:	0cdb      	lsrs	r3, r3, #19
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d010      	beq.n	8009fee <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	0cdb      	lsrs	r3, r3, #19
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00a      	beq.n	8009fee <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009fe0:	651a      	str	r2, [r3, #80]	; 0x50
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f966 	bl	800a2ba <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff0:	0c1b      	lsrs	r3, r3, #16
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d016      	beq.n	800a028 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	0c1b      	lsrs	r3, r3, #16
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d010      	beq.n	800a028 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a00e:	651a      	str	r2, [r3, #80]	; 0x50
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <HAL_FDCAN_IRQHandler+0x274>)
 800a012:	2200      	movs	r2, #0
 800a014:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	e004      	b.n	800a024 <HAL_FDCAN_IRQHandler+0x27c>
 800a01a:	bf00      	nop
 800a01c:	4000a800 	.word	0x4000a800
 800a020:	3fcfffff 	.word	0x3fcfffff
 800a024:	f000 f953 	bl	800a2ce <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800a028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02a:	0c9b      	lsrs	r3, r3, #18
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d010      	beq.n	800a056 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	0c9b      	lsrs	r3, r3, #18
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00a      	beq.n	800a056 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a048:	651a      	str	r2, [r3, #80]	; 0x50
 800a04a:	4b83      	ldr	r3, [pc, #524]	; (800a258 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f946 	bl	800a2e2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800a056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a058:	0c5b      	lsrs	r3, r3, #17
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d015      	beq.n	800a08e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	0c5b      	lsrs	r3, r3, #17
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00f      	beq.n	800a08e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a076:	651a      	str	r2, [r3, #80]	; 0x50
 800a078:	4b77      	ldr	r3, [pc, #476]	; (800a258 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800a08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00d      	beq.n	800a0b0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a09a:	4b70      	ldr	r3, [pc, #448]	; (800a25c <HAL_FDCAN_IRQHandler+0x4b4>)
 800a09c:	400b      	ands	r3, r1
 800a09e:	6513      	str	r3, [r2, #80]	; 0x50
 800a0a0:	4a6d      	ldr	r2, [pc, #436]	; (800a258 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a4:	0f9b      	lsrs	r3, r3, #30
 800a0a6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800a0a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f937 	bl	800a31e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800a0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d011      	beq.n	800a0da <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0bc:	4b67      	ldr	r3, [pc, #412]	; (800a25c <HAL_FDCAN_IRQHandler+0x4b4>)
 800a0be:	400b      	ands	r3, r1
 800a0c0:	6513      	str	r3, [r2, #80]	; 0x50
 800a0c2:	4a65      	ldr	r2, [pc, #404]	; (800a258 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c6:	0f9b      	lsrs	r3, r3, #30
 800a0c8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a60      	ldr	r2, [pc, #384]	; (800a260 <HAL_FDCAN_IRQHandler+0x4b8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	f040 80ac 	bne.w	800a23e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f003 0303 	and.w	r3, r3, #3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 80a4 	beq.w	800a23e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a10a:	4013      	ands	r3, r2
 800a10c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a118:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a122:	4013      	ands	r3, r2
 800a124:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13a:	4013      	ands	r3, r2
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800a148:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	6a3a      	ldr	r2, [r7, #32]
 800a152:	4013      	ands	r3, r2
 800a154:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800a160:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	4013      	ands	r3, r2
 800a16c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a18a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800a18c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f8d0 	bl	800a334 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800a1a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f8d0 	bl	800a34a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	099b      	lsrs	r3, r3, #6
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01a      	beq.n	800a1ec <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	099b      	lsrs	r3, r3, #6
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d014      	beq.n	800a1ec <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c8:	0c1b      	lsrs	r3, r3, #16
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1d8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	2240      	movs	r2, #64	; 0x40
 800a1e0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	6939      	ldr	r1, [r7, #16]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f8ba 	bl	800a360 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d007      	beq.n	800a202 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800a1fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8bb 	bl	800a378 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	69fa      	ldr	r2, [r7, #28]
 800a22c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f85e 	bl	800a30a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800a24e:	bf00      	nop
 800a250:	3758      	adds	r7, #88	; 0x58
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	4000a800 	.word	0x4000a800
 800a25c:	3fcfffff 	.word	0x3fcfffff
 800a260:	4000a000 	.word	0x4000a000

0800a264 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800a2c2:	bf00      	nop
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800a2d6:	bf00      	nop
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800a2fe:	bf00      	nop
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800a312:	bf00      	nop
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800a33e:	bf00      	nop
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800a382:	bf00      	nop
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
	...

0800a390 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a3a6:	4ba7      	ldr	r3, [pc, #668]	; (800a644 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	0091      	lsls	r1, r2, #2
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	430b      	orrs	r3, r1
 800a3b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	041a      	lsls	r2, r3, #16
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	4413      	add	r3, r2
 800a3dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a3e6:	4b97      	ldr	r3, [pc, #604]	; (800a644 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	0091      	lsls	r1, r2, #2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6812      	ldr	r2, [r2, #0]
 800a3f2:	430b      	orrs	r3, r1
 800a3f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a400:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a408:	041a      	lsls	r2, r3, #16
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a418:	005b      	lsls	r3, r3, #1
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	4413      	add	r3, r2
 800a41e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a428:	4b86      	ldr	r3, [pc, #536]	; (800a644 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a42a:	4013      	ands	r3, r2
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	0091      	lsls	r1, r2, #2
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	6812      	ldr	r2, [r2, #0]
 800a434:	430b      	orrs	r3, r1
 800a436:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a442:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	041a      	lsls	r2, r3, #16
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a45e:	fb02 f303 	mul.w	r3, r2, r3
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	4413      	add	r3, r2
 800a466:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a470:	4b74      	ldr	r3, [pc, #464]	; (800a644 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a472:	4013      	ands	r3, r2
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	0091      	lsls	r1, r2, #2
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	430b      	orrs	r3, r1
 800a47e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a48a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a492:	041a      	lsls	r2, r3, #16
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a4a6:	fb02 f303 	mul.w	r3, r2, r3
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a4b8:	4b62      	ldr	r3, [pc, #392]	; (800a644 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	0091      	lsls	r1, r2, #2
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6812      	ldr	r2, [r2, #0]
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a4d2:	fb02 f303 	mul.w	r3, r2, r3
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a4e4:	4b57      	ldr	r3, [pc, #348]	; (800a644 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	0091      	lsls	r1, r2, #2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6812      	ldr	r2, [r2, #0]
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4fe:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a506:	041a      	lsls	r2, r3, #16
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a516:	005b      	lsls	r3, r3, #1
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	4413      	add	r3, r2
 800a51c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a526:	4b47      	ldr	r3, [pc, #284]	; (800a644 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a528:	4013      	ands	r3, r2
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	0091      	lsls	r1, r2, #2
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6812      	ldr	r2, [r2, #0]
 800a532:	430b      	orrs	r3, r1
 800a534:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a540:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a548:	041a      	lsls	r2, r3, #16
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a55c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a564:	061a      	lsls	r2, r3, #24
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a574:	4b34      	ldr	r3, [pc, #208]	; (800a648 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a576:	4413      	add	r3, r2
 800a578:	009a      	lsls	r2, r3, #2
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	441a      	add	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	441a      	add	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	6879      	ldr	r1, [r7, #4]
 800a5a8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800a5aa:	fb01 f303 	mul.w	r3, r1, r3
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	441a      	add	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800a5c2:	fb01 f303 	mul.w	r3, r1, r3
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	441a      	add	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800a5da:	fb01 f303 	mul.w	r3, r1, r3
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	441a      	add	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a606:	6879      	ldr	r1, [r7, #4]
 800a608:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	441a      	add	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800a626:	fb01 f303 	mul.w	r3, r1, r3
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	441a      	add	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a63a:	4a04      	ldr	r2, [pc, #16]	; (800a64c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d915      	bls.n	800a66c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a640:	e006      	b.n	800a650 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a642:	bf00      	nop
 800a644:	ffff0003 	.word	0xffff0003
 800a648:	10002b00 	.word	0x10002b00
 800a64c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a656:	f043 0220 	orr.w	r2, r3, #32
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2203      	movs	r2, #3
 800a664:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e010      	b.n	800a68e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	e005      	b.n	800a680 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3304      	adds	r3, #4
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d3f3      	bcc.n	800a674 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop

0800a69c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b089      	sub	sp, #36	; 0x24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800a6ba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	e00a      	b.n	800a6de <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800a6d0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800a6d6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6dc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800a6e8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a6ee:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a6f4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	fb01 f303 	mul.w	r3, r1, r3
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	3304      	adds	r3, #4
 800a71e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	3304      	adds	r3, #4
 800a72a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800a72c:	2300      	movs	r3, #0
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	e020      	b.n	800a774 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	3303      	adds	r3, #3
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	4413      	add	r3, r2
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	3302      	adds	r3, #2
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	440b      	add	r3, r1
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800a74a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	3301      	adds	r3, #1
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	440b      	add	r3, r1
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800a758:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	440a      	add	r2, r1
 800a760:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800a762:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	3304      	adds	r3, #4
 800a76c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	3304      	adds	r3, #4
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	0c1b      	lsrs	r3, r3, #16
 800a77a:	4a06      	ldr	r2, [pc, #24]	; (800a794 <FDCAN_CopyMessageToRAM+0xf8>)
 800a77c:	5cd3      	ldrb	r3, [r2, r3]
 800a77e:	461a      	mov	r2, r3
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	4293      	cmp	r3, r2
 800a784:	d3d5      	bcc.n	800a732 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800a786:	bf00      	nop
 800a788:	bf00      	nop
 800a78a:	3724      	adds	r7, #36	; 0x24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	0802b9fc 	.word	0x0802b9fc

0800a798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a798:	b480      	push	{r7}
 800a79a:	b089      	sub	sp, #36	; 0x24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a7a6:	4b86      	ldr	r3, [pc, #536]	; (800a9c0 <HAL_GPIO_Init+0x228>)
 800a7a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a7aa:	e18c      	b.n	800aac6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 817e 	beq.w	800aac0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d005      	beq.n	800a7dc <HAL_GPIO_Init+0x44>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f003 0303 	and.w	r3, r3, #3
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d130      	bne.n	800a83e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	2203      	movs	r2, #3
 800a7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ec:	43db      	mvns	r3, r3
 800a7ee:	69ba      	ldr	r2, [r7, #24]
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a800:	69ba      	ldr	r2, [r7, #24]
 800a802:	4313      	orrs	r3, r2
 800a804:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a812:	2201      	movs	r2, #1
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	fa02 f303 	lsl.w	r3, r2, r3
 800a81a:	43db      	mvns	r3, r3
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	4013      	ands	r3, r2
 800a820:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	091b      	lsrs	r3, r3, #4
 800a828:	f003 0201 	and.w	r2, r3, #1
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	fa02 f303 	lsl.w	r3, r2, r3
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	4313      	orrs	r3, r2
 800a836:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	2b03      	cmp	r3, #3
 800a848:	d017      	beq.n	800a87a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	2203      	movs	r2, #3
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	43db      	mvns	r3, r3
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	4013      	ands	r3, r2
 800a860:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	689a      	ldr	r2, [r3, #8]
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	fa02 f303 	lsl.w	r3, r2, r3
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	4313      	orrs	r3, r2
 800a872:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	69ba      	ldr	r2, [r7, #24]
 800a878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b02      	cmp	r3, #2
 800a884:	d123      	bne.n	800a8ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	08da      	lsrs	r2, r3, #3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3208      	adds	r2, #8
 800a88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	220f      	movs	r2, #15
 800a89e:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a2:	43db      	mvns	r3, r3
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	691a      	ldr	r2, [r3, #16]
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	f003 0307 	and.w	r3, r3, #7
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ba:	69ba      	ldr	r2, [r7, #24]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	08da      	lsrs	r2, r3, #3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3208      	adds	r2, #8
 800a8c8:	69b9      	ldr	r1, [r7, #24]
 800a8ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	2203      	movs	r2, #3
 800a8da:	fa02 f303 	lsl.w	r3, r2, r3
 800a8de:	43db      	mvns	r3, r3
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f003 0203 	and.w	r2, r3, #3
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	005b      	lsls	r3, r3, #1
 800a8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 80d8 	beq.w	800aac0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a910:	4b2c      	ldr	r3, [pc, #176]	; (800a9c4 <HAL_GPIO_Init+0x22c>)
 800a912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a916:	4a2b      	ldr	r2, [pc, #172]	; (800a9c4 <HAL_GPIO_Init+0x22c>)
 800a918:	f043 0302 	orr.w	r3, r3, #2
 800a91c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a920:	4b28      	ldr	r3, [pc, #160]	; (800a9c4 <HAL_GPIO_Init+0x22c>)
 800a922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a92e:	4a26      	ldr	r2, [pc, #152]	; (800a9c8 <HAL_GPIO_Init+0x230>)
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	3302      	adds	r3, #2
 800a936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a93a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	220f      	movs	r2, #15
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	43db      	mvns	r3, r3
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	4013      	ands	r3, r2
 800a950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a1d      	ldr	r2, [pc, #116]	; (800a9cc <HAL_GPIO_Init+0x234>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d04a      	beq.n	800a9f0 <HAL_GPIO_Init+0x258>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a1c      	ldr	r2, [pc, #112]	; (800a9d0 <HAL_GPIO_Init+0x238>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d02b      	beq.n	800a9ba <HAL_GPIO_Init+0x222>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a1b      	ldr	r2, [pc, #108]	; (800a9d4 <HAL_GPIO_Init+0x23c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d025      	beq.n	800a9b6 <HAL_GPIO_Init+0x21e>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a1a      	ldr	r2, [pc, #104]	; (800a9d8 <HAL_GPIO_Init+0x240>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d01f      	beq.n	800a9b2 <HAL_GPIO_Init+0x21a>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a19      	ldr	r2, [pc, #100]	; (800a9dc <HAL_GPIO_Init+0x244>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d019      	beq.n	800a9ae <HAL_GPIO_Init+0x216>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a18      	ldr	r2, [pc, #96]	; (800a9e0 <HAL_GPIO_Init+0x248>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d013      	beq.n	800a9aa <HAL_GPIO_Init+0x212>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a17      	ldr	r2, [pc, #92]	; (800a9e4 <HAL_GPIO_Init+0x24c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00d      	beq.n	800a9a6 <HAL_GPIO_Init+0x20e>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a16      	ldr	r2, [pc, #88]	; (800a9e8 <HAL_GPIO_Init+0x250>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d007      	beq.n	800a9a2 <HAL_GPIO_Init+0x20a>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a15      	ldr	r2, [pc, #84]	; (800a9ec <HAL_GPIO_Init+0x254>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d101      	bne.n	800a99e <HAL_GPIO_Init+0x206>
 800a99a:	2309      	movs	r3, #9
 800a99c:	e029      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a99e:	230a      	movs	r3, #10
 800a9a0:	e027      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9a2:	2307      	movs	r3, #7
 800a9a4:	e025      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9a6:	2306      	movs	r3, #6
 800a9a8:	e023      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9aa:	2305      	movs	r3, #5
 800a9ac:	e021      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9ae:	2304      	movs	r3, #4
 800a9b0:	e01f      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e01d      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e01b      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e019      	b.n	800a9f2 <HAL_GPIO_Init+0x25a>
 800a9be:	bf00      	nop
 800a9c0:	58000080 	.word	0x58000080
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	58000400 	.word	0x58000400
 800a9cc:	58020000 	.word	0x58020000
 800a9d0:	58020400 	.word	0x58020400
 800a9d4:	58020800 	.word	0x58020800
 800a9d8:	58020c00 	.word	0x58020c00
 800a9dc:	58021000 	.word	0x58021000
 800a9e0:	58021400 	.word	0x58021400
 800a9e4:	58021800 	.word	0x58021800
 800a9e8:	58021c00 	.word	0x58021c00
 800a9ec:	58022400 	.word	0x58022400
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	69fa      	ldr	r2, [r7, #28]
 800a9f4:	f002 0203 	and.w	r2, r2, #3
 800a9f8:	0092      	lsls	r2, r2, #2
 800a9fa:	4093      	lsls	r3, r2
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa02:	4938      	ldr	r1, [pc, #224]	; (800aae4 <HAL_GPIO_Init+0x34c>)
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	089b      	lsrs	r3, r3, #2
 800aa08:	3302      	adds	r3, #2
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	43db      	mvns	r3, r3
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800aa2e:	69ba      	ldr	r2, [r7, #24]
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800aa36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800aa3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800aa64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	43db      	mvns	r3, r3
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	43db      	mvns	r3, r3
 800aaa0:	69ba      	ldr	r2, [r7, #24]
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	3301      	adds	r3, #1
 800aac4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	fa22 f303 	lsr.w	r3, r2, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f47f ae6b 	bne.w	800a7ac <HAL_GPIO_Init+0x14>
  }
}
 800aad6:	bf00      	nop
 800aad8:	bf00      	nop
 800aada:	3724      	adds	r7, #36	; 0x24
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	58000400 	.word	0x58000400

0800aae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691a      	ldr	r2, [r3, #16]
 800aaf8:	887b      	ldrh	r3, [r7, #2]
 800aafa:	4013      	ands	r3, r2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab00:	2301      	movs	r3, #1
 800ab02:	73fb      	strb	r3, [r7, #15]
 800ab04:	e001      	b.n	800ab0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1a:	b08f      	sub	sp, #60	; 0x3c
 800ab1c:	af0a      	add	r7, sp, #40	; 0x28
 800ab1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e116      	b.n	800ad58 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d106      	bne.n	800ab4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f01b fe6b 	bl	8026820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f007 f9c0 	bl	8011eee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	687e      	ldr	r6, [r7, #4]
 800ab76:	466d      	mov	r5, sp
 800ab78:	f106 0410 	add.w	r4, r6, #16
 800ab7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab84:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab88:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab8c:	1d33      	adds	r3, r6, #4
 800ab8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab90:	6838      	ldr	r0, [r7, #0]
 800ab92:	f007 f88b 	bl	8011cac <USB_CoreInit>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0d7      	b.n	800ad58 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2100      	movs	r1, #0
 800abae:	4618      	mov	r0, r3
 800abb0:	f007 f9ae 	bl	8011f10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	e04a      	b.n	800ac50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800abba:	7bfa      	ldrb	r2, [r7, #15]
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	4613      	mov	r3, r2
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	4413      	add	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	440b      	add	r3, r1
 800abc8:	333d      	adds	r3, #61	; 0x3d
 800abca:	2201      	movs	r2, #1
 800abcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800abce:	7bfa      	ldrb	r2, [r7, #15]
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	4613      	mov	r3, r2
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	440b      	add	r3, r1
 800abdc:	333c      	adds	r3, #60	; 0x3c
 800abde:	7bfa      	ldrb	r2, [r7, #15]
 800abe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800abe2:	7bfa      	ldrb	r2, [r7, #15]
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
 800abe6:	b298      	uxth	r0, r3
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	4613      	mov	r3, r2
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	3356      	adds	r3, #86	; 0x56
 800abf6:	4602      	mov	r2, r0
 800abf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800abfa:	7bfa      	ldrb	r2, [r7, #15]
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	4613      	mov	r3, r2
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	4413      	add	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	440b      	add	r3, r1
 800ac08:	3340      	adds	r3, #64	; 0x40
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac0e:	7bfa      	ldrb	r2, [r7, #15]
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	4613      	mov	r3, r2
 800ac14:	00db      	lsls	r3, r3, #3
 800ac16:	4413      	add	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3344      	adds	r3, #68	; 0x44
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac22:	7bfa      	ldrb	r2, [r7, #15]
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	440b      	add	r3, r1
 800ac30:	3348      	adds	r3, #72	; 0x48
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac36:	7bfa      	ldrb	r2, [r7, #15]
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	00db      	lsls	r3, r3, #3
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	334c      	adds	r3, #76	; 0x4c
 800ac46:	2200      	movs	r2, #0
 800ac48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	73fb      	strb	r3, [r7, #15]
 800ac50:	7bfa      	ldrb	r2, [r7, #15]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d3af      	bcc.n	800abba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
 800ac5e:	e044      	b.n	800acea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ac60:	7bfa      	ldrb	r2, [r7, #15]
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	4613      	mov	r3, r2
 800ac66:	00db      	lsls	r3, r3, #3
 800ac68:	4413      	add	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	440b      	add	r3, r1
 800ac6e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ac72:	2200      	movs	r2, #0
 800ac74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ac76:	7bfa      	ldrb	r2, [r7, #15]
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800ac88:	7bfa      	ldrb	r2, [r7, #15]
 800ac8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ac8c:	7bfa      	ldrb	r2, [r7, #15]
 800ac8e:	6879      	ldr	r1, [r7, #4]
 800ac90:	4613      	mov	r3, r2
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	4413      	add	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	440b      	add	r3, r1
 800ac9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aca2:	7bfa      	ldrb	r2, [r7, #15]
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	4613      	mov	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800acb8:	7bfa      	ldrb	r2, [r7, #15]
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	4613      	mov	r3, r2
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	440b      	add	r3, r1
 800acc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800acca:	2200      	movs	r2, #0
 800accc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800acce:	7bfa      	ldrb	r2, [r7, #15]
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4613      	mov	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	3301      	adds	r3, #1
 800ace8:	73fb      	strb	r3, [r7, #15]
 800acea:	7bfa      	ldrb	r2, [r7, #15]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d3b5      	bcc.n	800ac60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	603b      	str	r3, [r7, #0]
 800acfa:	687e      	ldr	r6, [r7, #4]
 800acfc:	466d      	mov	r5, sp
 800acfe:	f106 0410 	add.w	r4, r6, #16
 800ad02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad0e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad12:	1d33      	adds	r3, r6, #4
 800ad14:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad16:	6838      	ldr	r0, [r7, #0]
 800ad18:	f007 f946 	bl	8011fa8 <USB_DevInit>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d005      	beq.n	800ad2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2202      	movs	r2, #2
 800ad26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e014      	b.n	800ad58 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d102      	bne.n	800ad4c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f001 f970 	bl	800c02c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f008 f988 	bl	8013066 <USB_DevDisconnect>

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d101      	bne.n	800ad7c <HAL_PCD_Start+0x1c>
 800ad78:	2302      	movs	r3, #2
 800ad7a:	e022      	b.n	800adc2 <HAL_PCD_Start+0x62>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d109      	bne.n	800ada4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d105      	bne.n	800ada4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f007 f88f 	bl	8011ecc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f008 f936 	bl	8013024 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800adca:	b590      	push	{r4, r7, lr}
 800adcc:	b08d      	sub	sp, #52	; 0x34
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f008 f9f4 	bl	80131ce <USB_GetMode>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f040 84b7 	bne.w	800b75c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f008 f958 	bl	80130a8 <USB_ReadInterrupts>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 84ad 	beq.w	800b75a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	0a1b      	lsrs	r3, r3, #8
 800ae0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f008 f945 	bl	80130a8 <USB_ReadInterrupts>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d107      	bne.n	800ae38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	695a      	ldr	r2, [r3, #20]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f002 0202 	and.w	r2, r2, #2
 800ae36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f008 f933 	bl	80130a8 <USB_ReadInterrupts>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f003 0310 	and.w	r3, r3, #16
 800ae48:	2b10      	cmp	r3, #16
 800ae4a:	d161      	bne.n	800af10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	699a      	ldr	r2, [r3, #24]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0210 	bic.w	r2, r2, #16
 800ae5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	f003 020f 	and.w	r2, r3, #15
 800ae68:	4613      	mov	r3, r2
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	4413      	add	r3, r2
 800ae78:	3304      	adds	r3, #4
 800ae7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	0c5b      	lsrs	r3, r3, #17
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d124      	bne.n	800aed2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ae8e:	4013      	ands	r3, r2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d035      	beq.n	800af00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	091b      	lsrs	r3, r3, #4
 800ae9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ae9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	461a      	mov	r2, r3
 800aea6:	6a38      	ldr	r0, [r7, #32]
 800aea8:	f007 ff6a 	bl	8012d80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	68da      	ldr	r2, [r3, #12]
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	091b      	lsrs	r3, r3, #4
 800aeb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aeb8:	441a      	add	r2, r3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	695a      	ldr	r2, [r3, #20]
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	091b      	lsrs	r3, r3, #4
 800aec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aeca:	441a      	add	r2, r3
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	615a      	str	r2, [r3, #20]
 800aed0:	e016      	b.n	800af00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	0c5b      	lsrs	r3, r3, #17
 800aed6:	f003 030f 	and.w	r3, r3, #15
 800aeda:	2b06      	cmp	r3, #6
 800aedc:	d110      	bne.n	800af00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aee4:	2208      	movs	r2, #8
 800aee6:	4619      	mov	r1, r3
 800aee8:	6a38      	ldr	r0, [r7, #32]
 800aeea:	f007 ff49 	bl	8012d80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	695a      	ldr	r2, [r3, #20]
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	091b      	lsrs	r3, r3, #4
 800aef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aefa:	441a      	add	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699a      	ldr	r2, [r3, #24]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f042 0210 	orr.w	r2, r2, #16
 800af0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4618      	mov	r0, r3
 800af16:	f008 f8c7 	bl	80130a8 <USB_ReadInterrupts>
 800af1a:	4603      	mov	r3, r0
 800af1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af24:	f040 80a7 	bne.w	800b076 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4618      	mov	r0, r3
 800af32:	f008 f8cc 	bl	80130ce <USB_ReadDevAllOutEpInterrupt>
 800af36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800af38:	e099      	b.n	800b06e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 808e 	beq.w	800b062 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af4c:	b2d2      	uxtb	r2, r2
 800af4e:	4611      	mov	r1, r2
 800af50:	4618      	mov	r0, r3
 800af52:	f008 f8f0 	bl	8013136 <USB_ReadDevOutEPInterrupt>
 800af56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00c      	beq.n	800af7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	015a      	lsls	r2, r3, #5
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	4413      	add	r3, r2
 800af6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6e:	461a      	mov	r2, r3
 800af70:	2301      	movs	r3, #1
 800af72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800af74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fed2 	bl	800bd20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f003 0308 	and.w	r3, r3, #8
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00c      	beq.n	800afa0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af92:	461a      	mov	r2, r3
 800af94:	2308      	movs	r3, #8
 800af96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800af98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 ffa8 	bl	800bef0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	f003 0310 	and.w	r3, r3, #16
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d008      	beq.n	800afbc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	015a      	lsls	r2, r3, #5
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	4413      	add	r3, r2
 800afb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb6:	461a      	mov	r2, r3
 800afb8:	2310      	movs	r3, #16
 800afba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f003 0302 	and.w	r3, r3, #2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d030      	beq.n	800b028 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afce:	2b80      	cmp	r3, #128	; 0x80
 800afd0:	d109      	bne.n	800afe6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afe4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800afe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe8:	4613      	mov	r3, r2
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	4413      	add	r3, r2
 800aff8:	3304      	adds	r3, #4
 800affa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	78db      	ldrb	r3, [r3, #3]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d108      	bne.n	800b016 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2200      	movs	r2, #0
 800b008:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f01b fcfd 	bl	8026a10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b022:	461a      	mov	r2, r3
 800b024:	2302      	movs	r3, #2
 800b026:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f003 0320 	and.w	r3, r3, #32
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d008      	beq.n	800b044 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03e:	461a      	mov	r2, r3
 800b040:	2320      	movs	r3, #32
 800b042:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	4413      	add	r3, r2
 800b056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05a:	461a      	mov	r2, r3
 800b05c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b060:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	3301      	adds	r3, #1
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	2b00      	cmp	r3, #0
 800b072:	f47f af62 	bne.w	800af3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f008 f814 	bl	80130a8 <USB_ReadInterrupts>
 800b080:	4603      	mov	r3, r0
 800b082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b08a:	f040 80db 	bne.w	800b244 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f008 f835 	bl	8013102 <USB_ReadDevAllInEpInterrupt>
 800b098:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b09e:	e0cd      	b.n	800b23c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 80c2 	beq.w	800b230 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b2:	b2d2      	uxtb	r2, r2
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f008 f85b 	bl	8013172 <USB_ReadDevInEPInterrupt>
 800b0bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d057      	beq.n	800b178 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	f003 030f 	and.w	r3, r3, #15
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	43db      	mvns	r3, r3
 800b0e2:	69f9      	ldr	r1, [r7, #28]
 800b0e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d132      	bne.n	800b16c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b10a:	4613      	mov	r3, r2
 800b10c:	00db      	lsls	r3, r3, #3
 800b10e:	4413      	add	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	440b      	add	r3, r1
 800b114:	3348      	adds	r3, #72	; 0x48
 800b116:	6819      	ldr	r1, [r3, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b11c:	4613      	mov	r3, r2
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4403      	add	r3, r0
 800b126:	3344      	adds	r3, #68	; 0x44
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4419      	add	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b130:	4613      	mov	r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4403      	add	r3, r0
 800b13a:	3348      	adds	r3, #72	; 0x48
 800b13c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	2b00      	cmp	r3, #0
 800b142:	d113      	bne.n	800b16c <HAL_PCD_IRQHandler+0x3a2>
 800b144:	6879      	ldr	r1, [r7, #4]
 800b146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b148:	4613      	mov	r3, r2
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	4413      	add	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	334c      	adds	r3, #76	; 0x4c
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d108      	bne.n	800b16c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6818      	ldr	r0, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b164:	461a      	mov	r2, r3
 800b166:	2101      	movs	r1, #1
 800b168:	f008 f864 	bl	8013234 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f01b fbc7 	bl	8026906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f003 0308 	and.w	r3, r3, #8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d008      	beq.n	800b194 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	015a      	lsls	r2, r3, #5
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	4413      	add	r3, r2
 800b18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18e:	461a      	mov	r2, r3
 800b190:	2308      	movs	r3, #8
 800b192:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f003 0310 	and.w	r3, r3, #16
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d008      	beq.n	800b1b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d008      	beq.n	800b1cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2340      	movs	r3, #64	; 0x40
 800b1ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f003 0302 	and.w	r3, r3, #2
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d023      	beq.n	800b21e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b1d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1d8:	6a38      	ldr	r0, [r7, #32]
 800b1da:	f007 f843 	bl	8012264 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	3338      	adds	r3, #56	; 0x38
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	78db      	ldrb	r3, [r3, #3]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d108      	bne.n	800b20c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	b2db      	uxtb	r3, r3
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f01b fc14 	bl	8026a34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b218:	461a      	mov	r2, r3
 800b21a:	2302      	movs	r3, #2
 800b21c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fcea 	bl	800bc04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	3301      	adds	r3, #1
 800b234:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	085b      	lsrs	r3, r3, #1
 800b23a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f47f af2e 	bne.w	800b0a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f007 ff2d 	bl	80130a8 <USB_ReadInterrupts>
 800b24e:	4603      	mov	r3, r0
 800b250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b258:	d122      	bne.n	800b2a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	69fa      	ldr	r2, [r7, #28]
 800b264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b268:	f023 0301 	bic.w	r3, r3, #1
 800b26c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b274:	2b01      	cmp	r3, #1
 800b276:	d108      	bne.n	800b28a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b280:	2100      	movs	r1, #0
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fef6 	bl	800c074 <HAL_PCDEx_LPM_Callback>
 800b288:	e002      	b.n	800b290 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f01b fbb2 	bl	80269f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	695a      	ldr	r2, [r3, #20]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b29e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f007 feff 	bl	80130a8 <USB_ReadInterrupts>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2b4:	d112      	bne.n	800b2dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d102      	bne.n	800b2cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f01b fb6e 	bl	80269a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	695a      	ldr	r2, [r3, #20]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b2da:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f007 fee1 	bl	80130a8 <USB_ReadInterrupts>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2f0:	d121      	bne.n	800b336 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	695a      	ldr	r2, [r3, #20]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b300:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d111      	bne.n	800b330 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31a:	089b      	lsrs	r3, r3, #2
 800b31c:	f003 020f 	and.w	r2, r3, #15
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b326:	2101      	movs	r1, #1
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fea3 	bl	800c074 <HAL_PCDEx_LPM_Callback>
 800b32e:	e002      	b.n	800b336 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f01b fb39 	bl	80269a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f007 feb4 	bl	80130a8 <USB_ReadInterrupts>
 800b340:	4603      	mov	r3, r0
 800b342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b34a:	f040 80b7 	bne.w	800b4bc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b35c:	f023 0301 	bic.w	r3, r3, #1
 800b360:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2110      	movs	r1, #16
 800b368:	4618      	mov	r0, r3
 800b36a:	f006 ff7b 	bl	8012264 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b36e:	2300      	movs	r3, #0
 800b370:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b372:	e046      	b.n	800b402 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b380:	461a      	mov	r2, r3
 800b382:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b386:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b398:	0151      	lsls	r1, r2, #5
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	440a      	add	r2, r1
 800b39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3ec:	0151      	lsls	r1, r2, #5
 800b3ee:	69fa      	ldr	r2, [r7, #28]
 800b3f0:	440a      	add	r2, r1
 800b3f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	3301      	adds	r3, #1
 800b400:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b408:	429a      	cmp	r2, r3
 800b40a:	d3b3      	bcc.n	800b374 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	69fa      	ldr	r2, [r7, #28]
 800b416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b41a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b41e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b424:	2b00      	cmp	r3, #0
 800b426:	d016      	beq.n	800b456 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b438:	f043 030b 	orr.w	r3, r3, #11
 800b43c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b448:	69fa      	ldr	r2, [r7, #28]
 800b44a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b44e:	f043 030b 	orr.w	r3, r3, #11
 800b452:	6453      	str	r3, [r2, #68]	; 0x44
 800b454:	e015      	b.n	800b482 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b45c:	695a      	ldr	r2, [r3, #20]
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b464:	4619      	mov	r1, r3
 800b466:	f242 032b 	movw	r3, #8235	; 0x202b
 800b46a:	4313      	orrs	r3, r2
 800b46c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	69fa      	ldr	r2, [r7, #28]
 800b478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b47c:	f043 030b 	orr.w	r3, r3, #11
 800b480:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	69fa      	ldr	r2, [r7, #28]
 800b48c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b490:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b494:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f007 fec4 	bl	8013234 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	695a      	ldr	r2, [r3, #20]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b4ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f007 fdf1 	bl	80130a8 <USB_ReadInterrupts>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d0:	d124      	bne.n	800b51c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f007 fe88 	bl	80131ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f006 ff3c 	bl	801235e <USB_GetDevSpeed>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681c      	ldr	r4, [r3, #0]
 800b4f2:	f001 fd1f 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800b4f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	461a      	mov	r2, r3
 800b500:	4620      	mov	r0, r4
 800b502:	f006 fc41 	bl	8011d88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f01b fa25 	bl	8026956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	695a      	ldr	r2, [r3, #20]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b51a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	f007 fdc1 	bl	80130a8 <USB_ReadInterrupts>
 800b526:	4603      	mov	r3, r0
 800b528:	f003 0308 	and.w	r3, r3, #8
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d10a      	bne.n	800b546 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f01b fa02 	bl	802693a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	695a      	ldr	r2, [r3, #20]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f002 0208 	and.w	r2, r2, #8
 800b544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f007 fdac 	bl	80130a8 <USB_ReadInterrupts>
 800b550:	4603      	mov	r3, r0
 800b552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b556:	2b80      	cmp	r3, #128	; 0x80
 800b558:	d122      	bne.n	800b5a0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b566:	2301      	movs	r3, #1
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
 800b56a:	e014      	b.n	800b596 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b570:	4613      	mov	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d105      	bne.n	800b590 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	b2db      	uxtb	r3, r3
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fb09 	bl	800bba2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	3301      	adds	r3, #1
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d3e5      	bcc.n	800b56c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f007 fd7f 	bl	80130a8 <USB_ReadInterrupts>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5b4:	d13b      	bne.n	800b62e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b5ba:	e02b      	b.n	800b614 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b5cc:	6879      	ldr	r1, [r7, #4]
 800b5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	440b      	add	r3, r1
 800b5da:	3340      	adds	r3, #64	; 0x40
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d115      	bne.n	800b60e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b5e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	da12      	bge.n	800b60e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	00db      	lsls	r3, r3, #3
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	440b      	add	r3, r1
 800b5f6:	333f      	adds	r3, #63	; 0x3f
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b604:	b2db      	uxtb	r3, r3
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 faca 	bl	800bba2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	3301      	adds	r3, #1
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d3ce      	bcc.n	800b5bc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	695a      	ldr	r2, [r3, #20]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b62c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4618      	mov	r0, r3
 800b634:	f007 fd38 	bl	80130a8 <USB_ReadInterrupts>
 800b638:	4603      	mov	r3, r0
 800b63a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b63e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b642:	d155      	bne.n	800b6f0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b644:	2301      	movs	r3, #1
 800b646:	627b      	str	r3, [r7, #36]	; 0x24
 800b648:	e045      	b.n	800b6d6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b65e:	4613      	mov	r3, r2
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	440b      	add	r3, r1
 800b668:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d12e      	bne.n	800b6d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b672:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b674:	2b00      	cmp	r3, #0
 800b676:	da2b      	bge.n	800b6d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b684:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b688:	429a      	cmp	r2, r3
 800b68a:	d121      	bne.n	800b6d0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b690:	4613      	mov	r3, r2
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	4413      	add	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	440b      	add	r3, r1
 800b69a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b69e:	2201      	movs	r2, #1
 800b6a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10a      	bne.n	800b6d0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	69fa      	ldr	r2, [r7, #28]
 800b6c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6cc:	6053      	str	r3, [r2, #4]
            break;
 800b6ce:	e007      	b.n	800b6e0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d3b4      	bcc.n	800b64a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	695a      	ldr	r2, [r3, #20]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b6ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f007 fcd7 	bl	80130a8 <USB_ReadInterrupts>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b704:	d10a      	bne.n	800b71c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f01b f9a6 	bl	8026a58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	695a      	ldr	r2, [r3, #20]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b71a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f007 fcc1 	bl	80130a8 <USB_ReadInterrupts>
 800b726:	4603      	mov	r3, r0
 800b728:	f003 0304 	and.w	r3, r3, #4
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d115      	bne.n	800b75c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	f003 0304 	and.w	r3, r3, #4
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f01b f996 	bl	8026a74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6859      	ldr	r1, [r3, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	69ba      	ldr	r2, [r7, #24]
 800b754:	430a      	orrs	r2, r1
 800b756:	605a      	str	r2, [r3, #4]
 800b758:	e000      	b.n	800b75c <HAL_PCD_IRQHandler+0x992>
      return;
 800b75a:	bf00      	nop
    }
  }
}
 800b75c:	3734      	adds	r7, #52	; 0x34
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd90      	pop	{r4, r7, pc}

0800b762 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	460b      	mov	r3, r1
 800b76c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_PCD_SetAddress+0x1a>
 800b778:	2302      	movs	r3, #2
 800b77a:	e013      	b.n	800b7a4 <HAL_PCD_SetAddress+0x42>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	78fa      	ldrb	r2, [r7, #3]
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f007 fc1f 	bl	8012fd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	70fb      	strb	r3, [r7, #3]
 800b7be:	460b      	mov	r3, r1
 800b7c0:	803b      	strh	r3, [r7, #0]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b7ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	da0f      	bge.n	800b7f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	f003 020f 	and.w	r2, r3, #15
 800b7d8:	4613      	mov	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	4413      	add	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	3338      	adds	r3, #56	; 0x38
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	705a      	strb	r2, [r3, #1]
 800b7f0:	e00f      	b.n	800b812 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7f2:	78fb      	ldrb	r3, [r7, #3]
 800b7f4:	f003 020f 	and.w	r2, r3, #15
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	4413      	add	r3, r2
 800b808:	3304      	adds	r3, #4
 800b80a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b81e:	883a      	ldrh	r2, [r7, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	78ba      	ldrb	r2, [r7, #2]
 800b828:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	785b      	ldrb	r3, [r3, #1]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d004      	beq.n	800b83c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	b29a      	uxth	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b83c:	78bb      	ldrb	r3, [r7, #2]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d102      	bne.n	800b848 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d101      	bne.n	800b856 <HAL_PCD_EP_Open+0xaa>
 800b852:	2302      	movs	r3, #2
 800b854:	e00e      	b.n	800b874 <HAL_PCD_EP_Open+0xc8>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68f9      	ldr	r1, [r7, #12]
 800b864:	4618      	mov	r0, r3
 800b866:	f006 fd9f 	bl	80123a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800b872:	7afb      	ldrb	r3, [r7, #11]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	da0f      	bge.n	800b8b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b890:	78fb      	ldrb	r3, [r7, #3]
 800b892:	f003 020f 	and.w	r2, r3, #15
 800b896:	4613      	mov	r3, r2
 800b898:	00db      	lsls	r3, r3, #3
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	3338      	adds	r3, #56	; 0x38
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	705a      	strb	r2, [r3, #1]
 800b8ae:	e00f      	b.n	800b8d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	f003 020f 	and.w	r2, r3, #15
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	00db      	lsls	r3, r3, #3
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	f003 030f 	and.w	r3, r3, #15
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d101      	bne.n	800b8ea <HAL_PCD_EP_Close+0x6e>
 800b8e6:	2302      	movs	r3, #2
 800b8e8:	e00e      	b.n	800b908 <HAL_PCD_EP_Close+0x8c>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68f9      	ldr	r1, [r7, #12]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f006 fddd 	bl	80124b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	607a      	str	r2, [r7, #4]
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	460b      	mov	r3, r1
 800b91e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b920:	7afb      	ldrb	r3, [r7, #11]
 800b922:	f003 020f 	and.w	r2, r3, #15
 800b926:	4613      	mov	r3, r2
 800b928:	00db      	lsls	r3, r3, #3
 800b92a:	4413      	add	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	4413      	add	r3, r2
 800b936:	3304      	adds	r3, #4
 800b938:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2200      	movs	r2, #0
 800b94a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	2200      	movs	r2, #0
 800b950:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b952:	7afb      	ldrb	r3, [r7, #11]
 800b954:	f003 030f 	and.w	r3, r3, #15
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d102      	bne.n	800b96c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	461a      	mov	r2, r3
 800b978:	6979      	ldr	r1, [r7, #20]
 800b97a:	f006 fe79 	bl	8012670 <USB_EPStartXfer>

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b994:	78fb      	ldrb	r3, [r7, #3]
 800b996:	f003 020f 	and.w	r2, r3, #15
 800b99a:	6879      	ldr	r1, [r7, #4]
 800b99c:	4613      	mov	r3, r2
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	4413      	add	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	440b      	add	r3, r1
 800b9a6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800b9aa:	681b      	ldr	r3, [r3, #0]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	607a      	str	r2, [r7, #4]
 800b9c2:	603b      	str	r3, [r7, #0]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9c8:	7afb      	ldrb	r3, [r7, #11]
 800b9ca:	f003 020f 	and.w	r2, r3, #15
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	3338      	adds	r3, #56	; 0x38
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	4413      	add	r3, r2
 800b9dc:	3304      	adds	r3, #4
 800b9de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9f8:	7afb      	ldrb	r3, [r7, #11]
 800b9fa:	f003 030f 	and.w	r3, r3, #15
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d102      	bne.n	800ba12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	6979      	ldr	r1, [r7, #20]
 800ba20:	f006 fe26 	bl	8012670 <USB_EPStartXfer>

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3718      	adds	r7, #24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba3a:	78fb      	ldrb	r3, [r7, #3]
 800ba3c:	f003 020f 	and.w	r2, r3, #15
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d901      	bls.n	800ba4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e050      	b.n	800baee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	da0f      	bge.n	800ba74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	f003 020f 	and.w	r2, r3, #15
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	4413      	add	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	3338      	adds	r3, #56	; 0x38
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	4413      	add	r3, r2
 800ba68:	3304      	adds	r3, #4
 800ba6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	705a      	strb	r2, [r3, #1]
 800ba72:	e00d      	b.n	800ba90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	4613      	mov	r3, r2
 800ba78:	00db      	lsls	r3, r3, #3
 800ba7a:	4413      	add	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	4413      	add	r3, r2
 800ba86:	3304      	adds	r3, #4
 800ba88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba96:	78fb      	ldrb	r3, [r7, #3]
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d101      	bne.n	800bab0 <HAL_PCD_EP_SetStall+0x82>
 800baac:	2302      	movs	r3, #2
 800baae:	e01e      	b.n	800baee <HAL_PCD_EP_SetStall+0xc0>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68f9      	ldr	r1, [r7, #12]
 800babe:	4618      	mov	r0, r3
 800bac0:	f007 f9b6 	bl	8012e30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	f003 030f 	and.w	r3, r3, #15
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	b2d9      	uxtb	r1, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bade:	461a      	mov	r2, r3
 800bae0:	f007 fba8 	bl	8013234 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	460b      	mov	r3, r1
 800bb00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bb02:	78fb      	ldrb	r3, [r7, #3]
 800bb04:	f003 020f 	and.w	r2, r3, #15
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d901      	bls.n	800bb14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e042      	b.n	800bb9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da0f      	bge.n	800bb3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	f003 020f 	and.w	r2, r3, #15
 800bb22:	4613      	mov	r3, r2
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	4413      	add	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	3338      	adds	r3, #56	; 0x38
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	4413      	add	r3, r2
 800bb30:	3304      	adds	r3, #4
 800bb32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2201      	movs	r2, #1
 800bb38:	705a      	strb	r2, [r3, #1]
 800bb3a:	e00f      	b.n	800bb5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb3c:	78fb      	ldrb	r3, [r7, #3]
 800bb3e:	f003 020f 	and.w	r2, r3, #15
 800bb42:	4613      	mov	r3, r2
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	4413      	add	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	4413      	add	r3, r2
 800bb52:	3304      	adds	r3, #4
 800bb54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb62:	78fb      	ldrb	r3, [r7, #3]
 800bb64:	f003 030f 	and.w	r3, r3, #15
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d101      	bne.n	800bb7c <HAL_PCD_EP_ClrStall+0x86>
 800bb78:	2302      	movs	r3, #2
 800bb7a:	e00e      	b.n	800bb9a <HAL_PCD_EP_ClrStall+0xa4>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68f9      	ldr	r1, [r7, #12]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f007 f9be 	bl	8012f0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b084      	sub	sp, #16
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	460b      	mov	r3, r1
 800bbac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bbae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	da0c      	bge.n	800bbd0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbb6:	78fb      	ldrb	r3, [r7, #3]
 800bbb8:	f003 020f 	and.w	r2, r3, #15
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	3338      	adds	r3, #56	; 0x38
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	4413      	add	r3, r2
 800bbca:	3304      	adds	r3, #4
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	e00c      	b.n	800bbea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	f003 020f 	and.w	r2, r3, #15
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	00db      	lsls	r3, r3, #3
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68f9      	ldr	r1, [r7, #12]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f006 ffdd 	bl	8012bb0 <USB_EPStopXfer>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bbfa:	7afb      	ldrb	r3, [r7, #11]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08a      	sub	sp, #40	; 0x28
 800bc08:	af02      	add	r7, sp, #8
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	00db      	lsls	r3, r3, #3
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	3338      	adds	r3, #56	; 0x38
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	4413      	add	r3, r2
 800bc28:	3304      	adds	r3, #4
 800bc2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	695a      	ldr	r2, [r3, #20]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d901      	bls.n	800bc3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e06c      	b.n	800bd16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	691a      	ldr	r2, [r3, #16]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d902      	bls.n	800bc58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	3303      	adds	r3, #3
 800bc5c:	089b      	lsrs	r3, r3, #2
 800bc5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc60:	e02b      	b.n	800bcba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	691a      	ldr	r2, [r3, #16]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	69fa      	ldr	r2, [r7, #28]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d902      	bls.n	800bc7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	3303      	adds	r3, #3
 800bc82:	089b      	lsrs	r3, r3, #2
 800bc84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	68d9      	ldr	r1, [r3, #12]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	6978      	ldr	r0, [r7, #20]
 800bc9e:	f007 f831 	bl	8012d04 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	441a      	add	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	695a      	ldr	r2, [r3, #20]
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	441a      	add	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	015a      	lsls	r2, r3, #5
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	69ba      	ldr	r2, [r7, #24]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d809      	bhi.n	800bce4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	695a      	ldr	r2, [r3, #20]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d203      	bcs.n	800bce4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1be      	bne.n	800bc62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	691a      	ldr	r2, [r3, #16]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d811      	bhi.n	800bd14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcfc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	43db      	mvns	r3, r3
 800bd0a:	6939      	ldr	r1, [r7, #16]
 800bd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd10:	4013      	ands	r3, r2
 800bd12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3720      	adds	r7, #32
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	333c      	adds	r3, #60	; 0x3c
 800bd38:	3304      	adds	r3, #4
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d17b      	bne.n	800be4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	f003 0308 	and.w	r3, r3, #8
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d015      	beq.n	800bd8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	4a61      	ldr	r2, [pc, #388]	; (800bee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	f240 80b9 	bls.w	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80b3 	beq.w	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	461a      	mov	r2, r3
 800bd84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd88:	6093      	str	r3, [r2, #8]
 800bd8a:	e0a7      	b.n	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f003 0320 	and.w	r3, r3, #32
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d009      	beq.n	800bdaa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	015a      	lsls	r2, r3, #5
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda2:	461a      	mov	r2, r3
 800bda4:	2320      	movs	r3, #32
 800bda6:	6093      	str	r3, [r2, #8]
 800bda8:	e098      	b.n	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f040 8093 	bne.w	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	4a4b      	ldr	r2, [pc, #300]	; (800bee8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d90f      	bls.n	800bdde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00a      	beq.n	800bdde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdda:	6093      	str	r3, [r2, #8]
 800bddc:	e07e      	b.n	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	4613      	mov	r3, r2
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	4413      	add	r3, r2
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6a1a      	ldr	r2, [r3, #32]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	0159      	lsls	r1, r3, #5
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	440b      	add	r3, r1
 800be00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d114      	bne.n	800be40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d109      	bne.n	800be32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6818      	ldr	r0, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800be28:	461a      	mov	r2, r3
 800be2a:	2101      	movs	r1, #1
 800be2c:	f007 fa02 	bl	8013234 <USB_EP0_OutStart>
 800be30:	e006      	b.n	800be40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	68da      	ldr	r2, [r3, #12]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	441a      	add	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	4619      	mov	r1, r3
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f01a fd42 	bl	80268d0 <HAL_PCD_DataOutStageCallback>
 800be4c:	e046      	b.n	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	4a26      	ldr	r2, [pc, #152]	; (800beec <PCD_EP_OutXfrComplete_int+0x1cc>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d124      	bne.n	800bea0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00a      	beq.n	800be76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6c:	461a      	mov	r2, r3
 800be6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be72:	6093      	str	r3, [r2, #8]
 800be74:	e032      	b.n	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d008      	beq.n	800be92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8c:	461a      	mov	r2, r3
 800be8e:	2320      	movs	r3, #32
 800be90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f01a fd19 	bl	80268d0 <HAL_PCD_DataOutStageCallback>
 800be9e:	e01d      	b.n	800bedc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d114      	bne.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bea6:	6879      	ldr	r1, [r7, #4]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	4613      	mov	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	4413      	add	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	440b      	add	r3, r1
 800beb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d108      	bne.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bec8:	461a      	mov	r2, r3
 800beca:	2100      	movs	r1, #0
 800becc:	f007 f9b2 	bl	8013234 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f01a fcfa 	bl	80268d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3720      	adds	r7, #32
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	4f54300a 	.word	0x4f54300a
 800beec:	4f54310a 	.word	0x4f54310a

0800bef0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	333c      	adds	r3, #60	; 0x3c
 800bf08:	3304      	adds	r3, #4
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	4a15      	ldr	r2, [pc, #84]	; (800bf78 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d90e      	bls.n	800bf44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	015a      	lsls	r2, r3, #5
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	4413      	add	r3, r2
 800bf38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f01a fcb1 	bl	80268ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	4a0a      	ldr	r2, [pc, #40]	; (800bf78 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d90c      	bls.n	800bf6c <PCD_EP_OutSetupPacket_int+0x7c>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d108      	bne.n	800bf6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6818      	ldr	r0, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf64:	461a      	mov	r2, r3
 800bf66:	2101      	movs	r1, #1
 800bf68:	f007 f964 	bl	8013234 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	4f54300a 	.word	0x4f54300a

0800bf7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d107      	bne.n	800bfaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bf9a:	883b      	ldrh	r3, [r7, #0]
 800bf9c:	0419      	lsls	r1, r3, #16
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	629a      	str	r2, [r3, #40]	; 0x28
 800bfa8:	e028      	b.n	800bffc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	0c1b      	lsrs	r3, r3, #16
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73fb      	strb	r3, [r7, #15]
 800bfbc:	e00d      	b.n	800bfda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	3340      	adds	r3, #64	; 0x40
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	0c1b      	lsrs	r3, r3, #16
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	73fb      	strb	r3, [r7, #15]
 800bfda:	7bfa      	ldrb	r2, [r7, #15]
 800bfdc:	78fb      	ldrb	r3, [r7, #3]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d3ec      	bcc.n	800bfbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bfe4:	883b      	ldrh	r3, [r7, #0]
 800bfe6:	0418      	lsls	r0, r3, #16
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6819      	ldr	r1, [r3, #0]
 800bfec:	78fb      	ldrb	r3, [r7, #3]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	4302      	orrs	r2, r0
 800bff4:	3340      	adds	r3, #64	; 0x40
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	440b      	add	r3, r1
 800bffa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c00a:	b480      	push	{r7}
 800c00c:	b083      	sub	sp, #12
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	887a      	ldrh	r2, [r7, #2]
 800c01c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	699b      	ldr	r3, [r3, #24]
 800c04e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c05a:	4b05      	ldr	r3, [pc, #20]	; (800c070 <HAL_PCDEx_ActivateLPM+0x44>)
 800c05c:	4313      	orrs	r3, r2
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	10000003 	.word	0x10000003

0800c074 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c094:	4b19      	ldr	r3, [pc, #100]	; (800c0fc <HAL_PWREx_ConfigSupply+0x70>)
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d00a      	beq.n	800c0b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c0a0:	4b16      	ldr	r3, [pc, #88]	; (800c0fc <HAL_PWREx_ConfigSupply+0x70>)
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	f003 0307 	and.w	r3, r3, #7
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d001      	beq.n	800c0b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e01f      	b.n	800c0f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e01d      	b.n	800c0f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c0b6:	4b11      	ldr	r3, [pc, #68]	; (800c0fc <HAL_PWREx_ConfigSupply+0x70>)
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	f023 0207 	bic.w	r2, r3, #7
 800c0be:	490f      	ldr	r1, [pc, #60]	; (800c0fc <HAL_PWREx_ConfigSupply+0x70>)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c0c6:	f7fb fb6d 	bl	80077a4 <HAL_GetTick>
 800c0ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c0cc:	e009      	b.n	800c0e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c0ce:	f7fb fb69 	bl	80077a4 <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0dc:	d901      	bls.n	800c0e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e007      	b.n	800c0f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c0e2:	4b06      	ldr	r3, [pc, #24]	; (800c0fc <HAL_PWREx_ConfigSupply+0x70>)
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ee:	d1ee      	bne.n	800c0ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	58024800 	.word	0x58024800

0800c100 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c100:	b480      	push	{r7}
 800c102:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	4a04      	ldr	r2, [pc, #16]	; (800c11c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c10a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c10e:	60d3      	str	r3, [r2, #12]
}
 800c110:	bf00      	nop
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	58024800 	.word	0x58024800

0800c120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08c      	sub	sp, #48	; 0x30
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	e3c8      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f000 8087 	beq.w	800c24e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c140:	4b88      	ldr	r3, [pc, #544]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c148:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c14a:	4b86      	ldr	r3, [pc, #536]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c152:	2b10      	cmp	r3, #16
 800c154:	d007      	beq.n	800c166 <HAL_RCC_OscConfig+0x46>
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	2b18      	cmp	r3, #24
 800c15a:	d110      	bne.n	800c17e <HAL_RCC_OscConfig+0x5e>
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	f003 0303 	and.w	r3, r3, #3
 800c162:	2b02      	cmp	r3, #2
 800c164:	d10b      	bne.n	800c17e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c166:	4b7f      	ldr	r3, [pc, #508]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d06c      	beq.n	800c24c <HAL_RCC_OscConfig+0x12c>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d168      	bne.n	800c24c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e3a2      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c186:	d106      	bne.n	800c196 <HAL_RCC_OscConfig+0x76>
 800c188:	4b76      	ldr	r3, [pc, #472]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a75      	ldr	r2, [pc, #468]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c18e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	e02e      	b.n	800c1f4 <HAL_RCC_OscConfig+0xd4>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10c      	bne.n	800c1b8 <HAL_RCC_OscConfig+0x98>
 800c19e:	4b71      	ldr	r3, [pc, #452]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a70      	ldr	r2, [pc, #448]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	4b6e      	ldr	r3, [pc, #440]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a6d      	ldr	r2, [pc, #436]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	e01d      	b.n	800c1f4 <HAL_RCC_OscConfig+0xd4>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1c0:	d10c      	bne.n	800c1dc <HAL_RCC_OscConfig+0xbc>
 800c1c2:	4b68      	ldr	r3, [pc, #416]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a67      	ldr	r2, [pc, #412]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	4b65      	ldr	r3, [pc, #404]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a64      	ldr	r2, [pc, #400]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1d8:	6013      	str	r3, [r2, #0]
 800c1da:	e00b      	b.n	800c1f4 <HAL_RCC_OscConfig+0xd4>
 800c1dc:	4b61      	ldr	r3, [pc, #388]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a60      	ldr	r2, [pc, #384]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1e6:	6013      	str	r3, [r2, #0]
 800c1e8:	4b5e      	ldr	r3, [pc, #376]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a5d      	ldr	r2, [pc, #372]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c1ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d013      	beq.n	800c224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1fc:	f7fb fad2 	bl	80077a4 <HAL_GetTick>
 800c200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c202:	e008      	b.n	800c216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c204:	f7fb face 	bl	80077a4 <HAL_GetTick>
 800c208:	4602      	mov	r2, r0
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	2b64      	cmp	r3, #100	; 0x64
 800c210:	d901      	bls.n	800c216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e356      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c216:	4b53      	ldr	r3, [pc, #332]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0f0      	beq.n	800c204 <HAL_RCC_OscConfig+0xe4>
 800c222:	e014      	b.n	800c24e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c224:	f7fb fabe 	bl	80077a4 <HAL_GetTick>
 800c228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c22a:	e008      	b.n	800c23e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c22c:	f7fb faba 	bl	80077a4 <HAL_GetTick>
 800c230:	4602      	mov	r2, r0
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	2b64      	cmp	r3, #100	; 0x64
 800c238:	d901      	bls.n	800c23e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	e342      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c23e:	4b49      	ldr	r3, [pc, #292]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1f0      	bne.n	800c22c <HAL_RCC_OscConfig+0x10c>
 800c24a:	e000      	b.n	800c24e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c24c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0302 	and.w	r3, r3, #2
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 808c 	beq.w	800c374 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c25c:	4b41      	ldr	r3, [pc, #260]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c264:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c266:	4b3f      	ldr	r3, [pc, #252]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <HAL_RCC_OscConfig+0x162>
 800c272:	6a3b      	ldr	r3, [r7, #32]
 800c274:	2b18      	cmp	r3, #24
 800c276:	d137      	bne.n	800c2e8 <HAL_RCC_OscConfig+0x1c8>
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	f003 0303 	and.w	r3, r3, #3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d132      	bne.n	800c2e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c282:	4b38      	ldr	r3, [pc, #224]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0304 	and.w	r3, r3, #4
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d005      	beq.n	800c29a <HAL_RCC_OscConfig+0x17a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e314      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c29a:	4b32      	ldr	r3, [pc, #200]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f023 0219 	bic.w	r2, r3, #25
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	492f      	ldr	r1, [pc, #188]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ac:	f7fb fa7a 	bl	80077a4 <HAL_GetTick>
 800c2b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c2b2:	e008      	b.n	800c2c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2b4:	f7fb fa76 	bl	80077a4 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d901      	bls.n	800c2c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e2fe      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c2c6:	4b27      	ldr	r3, [pc, #156]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0304 	and.w	r3, r3, #4
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0f0      	beq.n	800c2b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2d2:	4b24      	ldr	r3, [pc, #144]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	4920      	ldr	r1, [pc, #128]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c2e6:	e045      	b.n	800c374 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d026      	beq.n	800c33e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c2f0:	4b1c      	ldr	r3, [pc, #112]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f023 0219 	bic.w	r2, r3, #25
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	4919      	ldr	r1, [pc, #100]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c302:	f7fb fa4f 	bl	80077a4 <HAL_GetTick>
 800c306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c308:	e008      	b.n	800c31c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c30a:	f7fb fa4b 	bl	80077a4 <HAL_GetTick>
 800c30e:	4602      	mov	r2, r0
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	2b02      	cmp	r3, #2
 800c316:	d901      	bls.n	800c31c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800c318:	2303      	movs	r3, #3
 800c31a:	e2d3      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c31c:	4b11      	ldr	r3, [pc, #68]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d0f0      	beq.n	800c30a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c328:	4b0e      	ldr	r3, [pc, #56]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	061b      	lsls	r3, r3, #24
 800c336:	490b      	ldr	r1, [pc, #44]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c338:	4313      	orrs	r3, r2
 800c33a:	604b      	str	r3, [r1, #4]
 800c33c:	e01a      	b.n	800c374 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c33e:	4b09      	ldr	r3, [pc, #36]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a08      	ldr	r2, [pc, #32]	; (800c364 <HAL_RCC_OscConfig+0x244>)
 800c344:	f023 0301 	bic.w	r3, r3, #1
 800c348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c34a:	f7fb fa2b 	bl	80077a4 <HAL_GetTick>
 800c34e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c350:	e00a      	b.n	800c368 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c352:	f7fb fa27 	bl	80077a4 <HAL_GetTick>
 800c356:	4602      	mov	r2, r0
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d903      	bls.n	800c368 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c360:	2303      	movs	r3, #3
 800c362:	e2af      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
 800c364:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c368:	4b96      	ldr	r3, [pc, #600]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f003 0304 	and.w	r3, r3, #4
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1ee      	bne.n	800c352 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 0310 	and.w	r3, r3, #16
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d06a      	beq.n	800c456 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c380:	4b90      	ldr	r3, [pc, #576]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c388:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c38a:	4b8e      	ldr	r3, [pc, #568]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	2b08      	cmp	r3, #8
 800c394:	d007      	beq.n	800c3a6 <HAL_RCC_OscConfig+0x286>
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	2b18      	cmp	r3, #24
 800c39a:	d11b      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x2b4>
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f003 0303 	and.w	r3, r3, #3
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d116      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c3a6:	4b87      	ldr	r3, [pc, #540]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d005      	beq.n	800c3be <HAL_RCC_OscConfig+0x29e>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	2b80      	cmp	r3, #128	; 0x80
 800c3b8:	d001      	beq.n	800c3be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e282      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c3be:	4b81      	ldr	r3, [pc, #516]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	061b      	lsls	r3, r3, #24
 800c3cc:	497d      	ldr	r1, [pc, #500]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c3d2:	e040      	b.n	800c456 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d023      	beq.n	800c424 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c3dc:	4b79      	ldr	r3, [pc, #484]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a78      	ldr	r2, [pc, #480]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3e8:	f7fb f9dc 	bl	80077a4 <HAL_GetTick>
 800c3ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c3ee:	e008      	b.n	800c402 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c3f0:	f7fb f9d8 	bl	80077a4 <HAL_GetTick>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d901      	bls.n	800c402 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e260      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c402:	4b70      	ldr	r3, [pc, #448]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d0f0      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c40e:	4b6d      	ldr	r3, [pc, #436]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	061b      	lsls	r3, r3, #24
 800c41c:	4969      	ldr	r1, [pc, #420]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c41e:	4313      	orrs	r3, r2
 800c420:	60cb      	str	r3, [r1, #12]
 800c422:	e018      	b.n	800c456 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c424:	4b67      	ldr	r3, [pc, #412]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a66      	ldr	r2, [pc, #408]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c42a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c42e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c430:	f7fb f9b8 	bl	80077a4 <HAL_GetTick>
 800c434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c436:	e008      	b.n	800c44a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c438:	f7fb f9b4 	bl	80077a4 <HAL_GetTick>
 800c43c:	4602      	mov	r2, r0
 800c43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	2b02      	cmp	r3, #2
 800c444:	d901      	bls.n	800c44a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800c446:	2303      	movs	r3, #3
 800c448:	e23c      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c44a:	4b5e      	ldr	r3, [pc, #376]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1f0      	bne.n	800c438 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 0308 	and.w	r3, r3, #8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d036      	beq.n	800c4d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d019      	beq.n	800c49e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c46a:	4b56      	ldr	r3, [pc, #344]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c46c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c46e:	4a55      	ldr	r2, [pc, #340]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c470:	f043 0301 	orr.w	r3, r3, #1
 800c474:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c476:	f7fb f995 	bl	80077a4 <HAL_GetTick>
 800c47a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c47c:	e008      	b.n	800c490 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c47e:	f7fb f991 	bl	80077a4 <HAL_GetTick>
 800c482:	4602      	mov	r2, r0
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d901      	bls.n	800c490 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e219      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c490:	4b4c      	ldr	r3, [pc, #304]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c494:	f003 0302 	and.w	r3, r3, #2
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d0f0      	beq.n	800c47e <HAL_RCC_OscConfig+0x35e>
 800c49c:	e018      	b.n	800c4d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c49e:	4b49      	ldr	r3, [pc, #292]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c4a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4a2:	4a48      	ldr	r2, [pc, #288]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c4a4:	f023 0301 	bic.w	r3, r3, #1
 800c4a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4aa:	f7fb f97b 	bl	80077a4 <HAL_GetTick>
 800c4ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c4b0:	e008      	b.n	800c4c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4b2:	f7fb f977 	bl	80077a4 <HAL_GetTick>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d901      	bls.n	800c4c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e1ff      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c4c4:	4b3f      	ldr	r3, [pc, #252]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4c8:	f003 0302 	and.w	r3, r3, #2
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1f0      	bne.n	800c4b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 0320 	and.w	r3, r3, #32
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d036      	beq.n	800c54a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d019      	beq.n	800c518 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c4e4:	4b37      	ldr	r3, [pc, #220]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a36      	ldr	r2, [pc, #216]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c4ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c4ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c4f0:	f7fb f958 	bl	80077a4 <HAL_GetTick>
 800c4f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c4f6:	e008      	b.n	800c50a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c4f8:	f7fb f954 	bl	80077a4 <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	2b02      	cmp	r3, #2
 800c504:	d901      	bls.n	800c50a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800c506:	2303      	movs	r3, #3
 800c508:	e1dc      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c50a:	4b2e      	ldr	r3, [pc, #184]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0f0      	beq.n	800c4f8 <HAL_RCC_OscConfig+0x3d8>
 800c516:	e018      	b.n	800c54a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c518:	4b2a      	ldr	r3, [pc, #168]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a29      	ldr	r2, [pc, #164]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c51e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c522:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c524:	f7fb f93e 	bl	80077a4 <HAL_GetTick>
 800c528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c52a:	e008      	b.n	800c53e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c52c:	f7fb f93a 	bl	80077a4 <HAL_GetTick>
 800c530:	4602      	mov	r2, r0
 800c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	2b02      	cmp	r3, #2
 800c538:	d901      	bls.n	800c53e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	e1c2      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c53e:	4b21      	ldr	r3, [pc, #132]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1f0      	bne.n	800c52c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 0304 	and.w	r3, r3, #4
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 8086 	beq.w	800c664 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c558:	4b1b      	ldr	r3, [pc, #108]	; (800c5c8 <HAL_RCC_OscConfig+0x4a8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a1a      	ldr	r2, [pc, #104]	; (800c5c8 <HAL_RCC_OscConfig+0x4a8>)
 800c55e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c562:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c564:	f7fb f91e 	bl	80077a4 <HAL_GetTick>
 800c568:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c56a:	e008      	b.n	800c57e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c56c:	f7fb f91a 	bl	80077a4 <HAL_GetTick>
 800c570:	4602      	mov	r2, r0
 800c572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	2b64      	cmp	r3, #100	; 0x64
 800c578:	d901      	bls.n	800c57e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e1a2      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c57e:	4b12      	ldr	r3, [pc, #72]	; (800c5c8 <HAL_RCC_OscConfig+0x4a8>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0f0      	beq.n	800c56c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d106      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x480>
 800c592:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c596:	4a0b      	ldr	r2, [pc, #44]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c598:	f043 0301 	orr.w	r3, r3, #1
 800c59c:	6713      	str	r3, [r2, #112]	; 0x70
 800c59e:	e032      	b.n	800c606 <HAL_RCC_OscConfig+0x4e6>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d111      	bne.n	800c5cc <HAL_RCC_OscConfig+0x4ac>
 800c5a8:	4b06      	ldr	r3, [pc, #24]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ac:	4a05      	ldr	r2, [pc, #20]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c5ae:	f023 0301 	bic.w	r3, r3, #1
 800c5b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c5b4:	4b03      	ldr	r3, [pc, #12]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b8:	4a02      	ldr	r2, [pc, #8]	; (800c5c4 <HAL_RCC_OscConfig+0x4a4>)
 800c5ba:	f023 0304 	bic.w	r3, r3, #4
 800c5be:	6713      	str	r3, [r2, #112]	; 0x70
 800c5c0:	e021      	b.n	800c606 <HAL_RCC_OscConfig+0x4e6>
 800c5c2:	bf00      	nop
 800c5c4:	58024400 	.word	0x58024400
 800c5c8:	58024800 	.word	0x58024800
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	2b05      	cmp	r3, #5
 800c5d2:	d10c      	bne.n	800c5ee <HAL_RCC_OscConfig+0x4ce>
 800c5d4:	4b83      	ldr	r3, [pc, #524]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d8:	4a82      	ldr	r2, [pc, #520]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c5da:	f043 0304 	orr.w	r3, r3, #4
 800c5de:	6713      	str	r3, [r2, #112]	; 0x70
 800c5e0:	4b80      	ldr	r3, [pc, #512]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e4:	4a7f      	ldr	r2, [pc, #508]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c5e6:	f043 0301 	orr.w	r3, r3, #1
 800c5ea:	6713      	str	r3, [r2, #112]	; 0x70
 800c5ec:	e00b      	b.n	800c606 <HAL_RCC_OscConfig+0x4e6>
 800c5ee:	4b7d      	ldr	r3, [pc, #500]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f2:	4a7c      	ldr	r2, [pc, #496]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c5f4:	f023 0301 	bic.w	r3, r3, #1
 800c5f8:	6713      	str	r3, [r2, #112]	; 0x70
 800c5fa:	4b7a      	ldr	r3, [pc, #488]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fe:	4a79      	ldr	r2, [pc, #484]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c600:	f023 0304 	bic.w	r3, r3, #4
 800c604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d015      	beq.n	800c63a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c60e:	f7fb f8c9 	bl	80077a4 <HAL_GetTick>
 800c612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c614:	e00a      	b.n	800c62c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c616:	f7fb f8c5 	bl	80077a4 <HAL_GetTick>
 800c61a:	4602      	mov	r2, r0
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	f241 3288 	movw	r2, #5000	; 0x1388
 800c624:	4293      	cmp	r3, r2
 800c626:	d901      	bls.n	800c62c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e14b      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c62c:	4b6d      	ldr	r3, [pc, #436]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0ee      	beq.n	800c616 <HAL_RCC_OscConfig+0x4f6>
 800c638:	e014      	b.n	800c664 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c63a:	f7fb f8b3 	bl	80077a4 <HAL_GetTick>
 800c63e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c640:	e00a      	b.n	800c658 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c642:	f7fb f8af 	bl	80077a4 <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c650:	4293      	cmp	r3, r2
 800c652:	d901      	bls.n	800c658 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e135      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c658:	4b62      	ldr	r3, [pc, #392]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c65c:	f003 0302 	and.w	r3, r3, #2
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1ee      	bne.n	800c642 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 812a 	beq.w	800c8c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c66e:	4b5d      	ldr	r3, [pc, #372]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c676:	2b18      	cmp	r3, #24
 800c678:	f000 80ba 	beq.w	800c7f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c680:	2b02      	cmp	r3, #2
 800c682:	f040 8095 	bne.w	800c7b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c686:	4b57      	ldr	r3, [pc, #348]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a56      	ldr	r2, [pc, #344]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c68c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c692:	f7fb f887 	bl	80077a4 <HAL_GetTick>
 800c696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c698:	e008      	b.n	800c6ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c69a:	f7fb f883 	bl	80077a4 <HAL_GetTick>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d901      	bls.n	800c6ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e10b      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c6ac:	4b4d      	ldr	r3, [pc, #308]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1f0      	bne.n	800c69a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6b8:	4b4a      	ldr	r3, [pc, #296]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c6ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6bc:	4b4a      	ldr	r3, [pc, #296]	; (800c7e8 <HAL_RCC_OscConfig+0x6c8>)
 800c6be:	4013      	ands	r3, r2
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c6c8:	0112      	lsls	r2, r2, #4
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	4945      	ldr	r1, [pc, #276]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	628b      	str	r3, [r1, #40]	; 0x28
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	025b      	lsls	r3, r3, #9
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	431a      	orrs	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	041b      	lsls	r3, r3, #16
 800c6f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	061b      	lsls	r3, r3, #24
 800c6fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c702:	4938      	ldr	r1, [pc, #224]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c704:	4313      	orrs	r3, r2
 800c706:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c708:	4b36      	ldr	r3, [pc, #216]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70c:	4a35      	ldr	r2, [pc, #212]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c70e:	f023 0301 	bic.w	r3, r3, #1
 800c712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c714:	4b33      	ldr	r3, [pc, #204]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c718:	4b34      	ldr	r3, [pc, #208]	; (800c7ec <HAL_RCC_OscConfig+0x6cc>)
 800c71a:	4013      	ands	r3, r2
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c720:	00d2      	lsls	r2, r2, #3
 800c722:	4930      	ldr	r1, [pc, #192]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c724:	4313      	orrs	r3, r2
 800c726:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c728:	4b2e      	ldr	r3, [pc, #184]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72c:	f023 020c 	bic.w	r2, r3, #12
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c734:	492b      	ldr	r1, [pc, #172]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c736:	4313      	orrs	r3, r2
 800c738:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c73a:	4b2a      	ldr	r3, [pc, #168]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73e:	f023 0202 	bic.w	r2, r3, #2
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c746:	4927      	ldr	r1, [pc, #156]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c748:	4313      	orrs	r3, r2
 800c74a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c74c:	4b25      	ldr	r3, [pc, #148]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c750:	4a24      	ldr	r2, [pc, #144]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c756:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c758:	4b22      	ldr	r3, [pc, #136]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	4a21      	ldr	r2, [pc, #132]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c75e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c764:	4b1f      	ldr	r3, [pc, #124]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c768:	4a1e      	ldr	r2, [pc, #120]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c76a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c76e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c770:	4b1c      	ldr	r3, [pc, #112]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c774:	4a1b      	ldr	r2, [pc, #108]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c776:	f043 0301 	orr.w	r3, r3, #1
 800c77a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c77c:	4b19      	ldr	r3, [pc, #100]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a18      	ldr	r2, [pc, #96]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c788:	f7fb f80c 	bl	80077a4 <HAL_GetTick>
 800c78c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c78e:	e008      	b.n	800c7a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c790:	f7fb f808 	bl	80077a4 <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d901      	bls.n	800c7a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e090      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c7a2:	4b10      	ldr	r3, [pc, #64]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0f0      	beq.n	800c790 <HAL_RCC_OscConfig+0x670>
 800c7ae:	e088      	b.n	800c8c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7b0:	4b0c      	ldr	r3, [pc, #48]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a0b      	ldr	r2, [pc, #44]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c7b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7bc:	f7fa fff2 	bl	80077a4 <HAL_GetTick>
 800c7c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c7c2:	e008      	b.n	800c7d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7c4:	f7fa ffee 	bl	80077a4 <HAL_GetTick>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d901      	bls.n	800c7d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	e076      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c7d6:	4b03      	ldr	r3, [pc, #12]	; (800c7e4 <HAL_RCC_OscConfig+0x6c4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1f0      	bne.n	800c7c4 <HAL_RCC_OscConfig+0x6a4>
 800c7e2:	e06e      	b.n	800c8c2 <HAL_RCC_OscConfig+0x7a2>
 800c7e4:	58024400 	.word	0x58024400
 800c7e8:	fffffc0c 	.word	0xfffffc0c
 800c7ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c7f0:	4b36      	ldr	r3, [pc, #216]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c7f6:	4b35      	ldr	r3, [pc, #212]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c800:	2b01      	cmp	r3, #1
 800c802:	d031      	beq.n	800c868 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f003 0203 	and.w	r2, r3, #3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c80e:	429a      	cmp	r2, r3
 800c810:	d12a      	bne.n	800c868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	091b      	lsrs	r3, r3, #4
 800c816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c81e:	429a      	cmp	r2, r3
 800c820:	d122      	bne.n	800c868 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c82e:	429a      	cmp	r2, r3
 800c830:	d11a      	bne.n	800c868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	0a5b      	lsrs	r3, r3, #9
 800c836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c83e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c840:	429a      	cmp	r2, r3
 800c842:	d111      	bne.n	800c868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	0c1b      	lsrs	r3, r3, #16
 800c848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c850:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c852:	429a      	cmp	r2, r3
 800c854:	d108      	bne.n	800c868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	0e1b      	lsrs	r3, r3, #24
 800c85a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c862:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c864:	429a      	cmp	r2, r3
 800c866:	d001      	beq.n	800c86c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e02b      	b.n	800c8c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c86c:	4b17      	ldr	r3, [pc, #92]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c870:	08db      	lsrs	r3, r3, #3
 800c872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c876:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d01f      	beq.n	800c8c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c882:	4b12      	ldr	r3, [pc, #72]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c886:	4a11      	ldr	r2, [pc, #68]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c888:	f023 0301 	bic.w	r3, r3, #1
 800c88c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c88e:	f7fa ff89 	bl	80077a4 <HAL_GetTick>
 800c892:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c894:	bf00      	nop
 800c896:	f7fa ff85 	bl	80077a4 <HAL_GetTick>
 800c89a:	4602      	mov	r2, r0
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d0f9      	beq.n	800c896 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c8a2:	4b0a      	ldr	r3, [pc, #40]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c8a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a6:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <HAL_RCC_OscConfig+0x7b0>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c8ae:	00d2      	lsls	r2, r2, #3
 800c8b0:	4906      	ldr	r1, [pc, #24]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ba:	4a04      	ldr	r2, [pc, #16]	; (800c8cc <HAL_RCC_OscConfig+0x7ac>)
 800c8bc:	f043 0301 	orr.w	r3, r3, #1
 800c8c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3730      	adds	r7, #48	; 0x30
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	58024400 	.word	0x58024400
 800c8d0:	ffff0007 	.word	0xffff0007

0800c8d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e19c      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8e8:	4b8a      	ldr	r3, [pc, #552]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 030f 	and.w	r3, r3, #15
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d910      	bls.n	800c918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8f6:	4b87      	ldr	r3, [pc, #540]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f023 020f 	bic.w	r2, r3, #15
 800c8fe:	4985      	ldr	r1, [pc, #532]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	4313      	orrs	r3, r2
 800c904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c906:	4b83      	ldr	r3, [pc, #524]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 030f 	and.w	r3, r3, #15
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	429a      	cmp	r2, r3
 800c912:	d001      	beq.n	800c918 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e184      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 0304 	and.w	r3, r3, #4
 800c920:	2b00      	cmp	r3, #0
 800c922:	d010      	beq.n	800c946 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	691a      	ldr	r2, [r3, #16]
 800c928:	4b7b      	ldr	r3, [pc, #492]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c930:	429a      	cmp	r2, r3
 800c932:	d908      	bls.n	800c946 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c934:	4b78      	ldr	r3, [pc, #480]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	4975      	ldr	r1, [pc, #468]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c942:	4313      	orrs	r3, r2
 800c944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f003 0308 	and.w	r3, r3, #8
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d010      	beq.n	800c974 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	695a      	ldr	r2, [r3, #20]
 800c956:	4b70      	ldr	r3, [pc, #448]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c958:	69db      	ldr	r3, [r3, #28]
 800c95a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c95e:	429a      	cmp	r2, r3
 800c960:	d908      	bls.n	800c974 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c962:	4b6d      	ldr	r3, [pc, #436]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	496a      	ldr	r1, [pc, #424]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c970:	4313      	orrs	r3, r2
 800c972:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 0310 	and.w	r3, r3, #16
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d010      	beq.n	800c9a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	699a      	ldr	r2, [r3, #24]
 800c984:	4b64      	ldr	r3, [pc, #400]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c986:	69db      	ldr	r3, [r3, #28]
 800c988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d908      	bls.n	800c9a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c990:	4b61      	ldr	r3, [pc, #388]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c992:	69db      	ldr	r3, [r3, #28]
 800c994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	495e      	ldr	r1, [pc, #376]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 0320 	and.w	r3, r3, #32
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d010      	beq.n	800c9d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	69da      	ldr	r2, [r3, #28]
 800c9b2:	4b59      	ldr	r3, [pc, #356]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c9b4:	6a1b      	ldr	r3, [r3, #32]
 800c9b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d908      	bls.n	800c9d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c9be:	4b56      	ldr	r3, [pc, #344]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	69db      	ldr	r3, [r3, #28]
 800c9ca:	4953      	ldr	r1, [pc, #332]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0302 	and.w	r3, r3, #2
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d010      	beq.n	800c9fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	4b4d      	ldr	r3, [pc, #308]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	f003 030f 	and.w	r3, r3, #15
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d908      	bls.n	800c9fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c9ec:	4b4a      	ldr	r3, [pc, #296]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	f023 020f 	bic.w	r2, r3, #15
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	4947      	ldr	r1, [pc, #284]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d055      	beq.n	800cab6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ca0a:	4b43      	ldr	r3, [pc, #268]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	4940      	ldr	r1, [pc, #256]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d107      	bne.n	800ca34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ca24:	4b3c      	ldr	r3, [pc, #240]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d121      	bne.n	800ca74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e0f6      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	d107      	bne.n	800ca4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ca3c:	4b36      	ldr	r3, [pc, #216]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d115      	bne.n	800ca74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e0ea      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d107      	bne.n	800ca64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ca54:	4b30      	ldr	r3, [pc, #192]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d109      	bne.n	800ca74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e0de      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca64:	4b2c      	ldr	r3, [pc, #176]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 0304 	and.w	r3, r3, #4
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	e0d6      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ca74:	4b28      	ldr	r3, [pc, #160]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	f023 0207 	bic.w	r2, r3, #7
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	4925      	ldr	r1, [pc, #148]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800ca82:	4313      	orrs	r3, r2
 800ca84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca86:	f7fa fe8d 	bl	80077a4 <HAL_GetTick>
 800ca8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca8c:	e00a      	b.n	800caa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca8e:	f7fa fe89 	bl	80077a4 <HAL_GetTick>
 800ca92:	4602      	mov	r2, r0
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d901      	bls.n	800caa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800caa0:	2303      	movs	r3, #3
 800caa2:	e0be      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800caa4:	4b1c      	ldr	r3, [pc, #112]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d1eb      	bne.n	800ca8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f003 0302 	and.w	r3, r3, #2
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d010      	beq.n	800cae4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68da      	ldr	r2, [r3, #12]
 800cac6:	4b14      	ldr	r3, [pc, #80]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800cac8:	699b      	ldr	r3, [r3, #24]
 800caca:	f003 030f 	and.w	r3, r3, #15
 800cace:	429a      	cmp	r2, r3
 800cad0:	d208      	bcs.n	800cae4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cad2:	4b11      	ldr	r3, [pc, #68]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	f023 020f 	bic.w	r2, r3, #15
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	490e      	ldr	r1, [pc, #56]	; (800cb18 <HAL_RCC_ClockConfig+0x244>)
 800cae0:	4313      	orrs	r3, r2
 800cae2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cae4:	4b0b      	ldr	r3, [pc, #44]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 030f 	and.w	r3, r3, #15
 800caec:	683a      	ldr	r2, [r7, #0]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d214      	bcs.n	800cb1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800caf2:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f023 020f 	bic.w	r2, r3, #15
 800cafa:	4906      	ldr	r1, [pc, #24]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <HAL_RCC_ClockConfig+0x240>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 030f 	and.w	r3, r3, #15
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d005      	beq.n	800cb1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800cb10:	2301      	movs	r3, #1
 800cb12:	e086      	b.n	800cc22 <HAL_RCC_ClockConfig+0x34e>
 800cb14:	52002000 	.word	0x52002000
 800cb18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 0304 	and.w	r3, r3, #4
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d010      	beq.n	800cb4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691a      	ldr	r2, [r3, #16]
 800cb2c:	4b3f      	ldr	r3, [pc, #252]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d208      	bcs.n	800cb4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cb38:	4b3c      	ldr	r3, [pc, #240]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	4939      	ldr	r1, [pc, #228]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb46:	4313      	orrs	r3, r2
 800cb48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0308 	and.w	r3, r3, #8
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d010      	beq.n	800cb78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	695a      	ldr	r2, [r3, #20]
 800cb5a:	4b34      	ldr	r3, [pc, #208]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d208      	bcs.n	800cb78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cb66:	4b31      	ldr	r3, [pc, #196]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	492e      	ldr	r1, [pc, #184]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb74:	4313      	orrs	r3, r2
 800cb76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f003 0310 	and.w	r3, r3, #16
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d010      	beq.n	800cba6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	699a      	ldr	r2, [r3, #24]
 800cb88:	4b28      	ldr	r3, [pc, #160]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb8a:	69db      	ldr	r3, [r3, #28]
 800cb8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d208      	bcs.n	800cba6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cb94:	4b25      	ldr	r3, [pc, #148]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	699b      	ldr	r3, [r3, #24]
 800cba0:	4922      	ldr	r1, [pc, #136]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 0320 	and.w	r3, r3, #32
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d010      	beq.n	800cbd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	69da      	ldr	r2, [r3, #28]
 800cbb6:	4b1d      	ldr	r3, [pc, #116]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d208      	bcs.n	800cbd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cbc2:	4b1a      	ldr	r3, [pc, #104]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cbc4:	6a1b      	ldr	r3, [r3, #32]
 800cbc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	69db      	ldr	r3, [r3, #28]
 800cbce:	4917      	ldr	r1, [pc, #92]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cbd4:	f000 f834 	bl	800cc40 <HAL_RCC_GetSysClockFreq>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	4b14      	ldr	r3, [pc, #80]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	0a1b      	lsrs	r3, r3, #8
 800cbe0:	f003 030f 	and.w	r3, r3, #15
 800cbe4:	4912      	ldr	r1, [pc, #72]	; (800cc30 <HAL_RCC_ClockConfig+0x35c>)
 800cbe6:	5ccb      	ldrb	r3, [r1, r3]
 800cbe8:	f003 031f 	and.w	r3, r3, #31
 800cbec:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cbf2:	4b0e      	ldr	r3, [pc, #56]	; (800cc2c <HAL_RCC_ClockConfig+0x358>)
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	f003 030f 	and.w	r3, r3, #15
 800cbfa:	4a0d      	ldr	r2, [pc, #52]	; (800cc30 <HAL_RCC_ClockConfig+0x35c>)
 800cbfc:	5cd3      	ldrb	r3, [r2, r3]
 800cbfe:	f003 031f 	and.w	r3, r3, #31
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	fa22 f303 	lsr.w	r3, r2, r3
 800cc08:	4a0a      	ldr	r2, [pc, #40]	; (800cc34 <HAL_RCC_ClockConfig+0x360>)
 800cc0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cc0c:	4a0a      	ldr	r2, [pc, #40]	; (800cc38 <HAL_RCC_ClockConfig+0x364>)
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800cc12:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <HAL_RCC_ClockConfig+0x368>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fa f9f4 	bl	8007004 <HAL_InitTick>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	58024400 	.word	0x58024400
 800cc30:	0802b9ec 	.word	0x0802b9ec
 800cc34:	240003a8 	.word	0x240003a8
 800cc38:	240003a4 	.word	0x240003a4
 800cc3c:	240003ac 	.word	0x240003ac

0800cc40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b089      	sub	sp, #36	; 0x24
 800cc44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cc46:	4bb3      	ldr	r3, [pc, #716]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc4e:	2b18      	cmp	r3, #24
 800cc50:	f200 8155 	bhi.w	800cefe <HAL_RCC_GetSysClockFreq+0x2be>
 800cc54:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <HAL_RCC_GetSysClockFreq+0x1c>)
 800cc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5a:	bf00      	nop
 800cc5c:	0800ccc1 	.word	0x0800ccc1
 800cc60:	0800ceff 	.word	0x0800ceff
 800cc64:	0800ceff 	.word	0x0800ceff
 800cc68:	0800ceff 	.word	0x0800ceff
 800cc6c:	0800ceff 	.word	0x0800ceff
 800cc70:	0800ceff 	.word	0x0800ceff
 800cc74:	0800ceff 	.word	0x0800ceff
 800cc78:	0800ceff 	.word	0x0800ceff
 800cc7c:	0800cce7 	.word	0x0800cce7
 800cc80:	0800ceff 	.word	0x0800ceff
 800cc84:	0800ceff 	.word	0x0800ceff
 800cc88:	0800ceff 	.word	0x0800ceff
 800cc8c:	0800ceff 	.word	0x0800ceff
 800cc90:	0800ceff 	.word	0x0800ceff
 800cc94:	0800ceff 	.word	0x0800ceff
 800cc98:	0800ceff 	.word	0x0800ceff
 800cc9c:	0800cced 	.word	0x0800cced
 800cca0:	0800ceff 	.word	0x0800ceff
 800cca4:	0800ceff 	.word	0x0800ceff
 800cca8:	0800ceff 	.word	0x0800ceff
 800ccac:	0800ceff 	.word	0x0800ceff
 800ccb0:	0800ceff 	.word	0x0800ceff
 800ccb4:	0800ceff 	.word	0x0800ceff
 800ccb8:	0800ceff 	.word	0x0800ceff
 800ccbc:	0800ccf3 	.word	0x0800ccf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc0:	4b94      	ldr	r3, [pc, #592]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d009      	beq.n	800cce0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cccc:	4b91      	ldr	r3, [pc, #580]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	08db      	lsrs	r3, r3, #3
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	4a90      	ldr	r2, [pc, #576]	; (800cf18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ccd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ccde:	e111      	b.n	800cf04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800cce0:	4b8d      	ldr	r3, [pc, #564]	; (800cf18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cce2:	61bb      	str	r3, [r7, #24]
      break;
 800cce4:	e10e      	b.n	800cf04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800cce6:	4b8d      	ldr	r3, [pc, #564]	; (800cf1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cce8:	61bb      	str	r3, [r7, #24]
      break;
 800ccea:	e10b      	b.n	800cf04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ccec:	4b8c      	ldr	r3, [pc, #560]	; (800cf20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ccee:	61bb      	str	r3, [r7, #24]
      break;
 800ccf0:	e108      	b.n	800cf04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccf2:	4b88      	ldr	r3, [pc, #544]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf6:	f003 0303 	and.w	r3, r3, #3
 800ccfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ccfc:	4b85      	ldr	r3, [pc, #532]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ccfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd00:	091b      	lsrs	r3, r3, #4
 800cd02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cd08:	4b82      	ldr	r3, [pc, #520]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cd12:	4b80      	ldr	r3, [pc, #512]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd16:	08db      	lsrs	r3, r3, #3
 800cd18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	fb02 f303 	mul.w	r3, r2, r3
 800cd22:	ee07 3a90 	vmov	s15, r3
 800cd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f000 80e1 	beq.w	800cef8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	f000 8083 	beq.w	800ce44 <HAL_RCC_GetSysClockFreq+0x204>
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	f200 80a1 	bhi.w	800ce88 <HAL_RCC_GetSysClockFreq+0x248>
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d003      	beq.n	800cd54 <HAL_RCC_GetSysClockFreq+0x114>
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d056      	beq.n	800ce00 <HAL_RCC_GetSysClockFreq+0x1c0>
 800cd52:	e099      	b.n	800ce88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd54:	4b6f      	ldr	r3, [pc, #444]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 0320 	and.w	r3, r3, #32
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d02d      	beq.n	800cdbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd60:	4b6c      	ldr	r3, [pc, #432]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	08db      	lsrs	r3, r3, #3
 800cd66:	f003 0303 	and.w	r3, r3, #3
 800cd6a:	4a6b      	ldr	r2, [pc, #428]	; (800cf18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cd6c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	ee07 3a90 	vmov	s15, r3
 800cd78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	ee07 3a90 	vmov	s15, r3
 800cd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd8a:	4b62      	ldr	r3, [pc, #392]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd92:	ee07 3a90 	vmov	s15, r3
 800cd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cd9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800cf24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800cdba:	e087      	b.n	800cecc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800cf28 <HAL_RCC_GetSysClockFreq+0x2e8>
 800cdca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdce:	4b51      	ldr	r3, [pc, #324]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd6:	ee07 3a90 	vmov	s15, r3
 800cdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdde:	ed97 6a02 	vldr	s12, [r7, #8]
 800cde2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800cf24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cdfe:	e065      	b.n	800cecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cf2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ce0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce12:	4b40      	ldr	r3, [pc, #256]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce1a:	ee07 3a90 	vmov	s15, r3
 800ce1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cf24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ce2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ce42:	e043      	b.n	800cecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	ee07 3a90 	vmov	s15, r3
 800ce4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800cf30 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ce52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce56:	4b2f      	ldr	r3, [pc, #188]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce5e:	ee07 3a90 	vmov	s15, r3
 800ce62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cf24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ce6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ce86:	e021      	b.n	800cecc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	ee07 3a90 	vmov	s15, r3
 800ce8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce92:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cf2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ce96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce9a:	4b1e      	ldr	r3, [pc, #120]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800ceae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800cf24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ceb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ceca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cecc:	4b11      	ldr	r3, [pc, #68]	; (800cf14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced0:	0a5b      	lsrs	r3, r3, #9
 800ced2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ced6:	3301      	adds	r3, #1
 800ced8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	ee07 3a90 	vmov	s15, r3
 800cee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cee4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cef0:	ee17 3a90 	vmov	r3, s15
 800cef4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cef6:	e005      	b.n	800cf04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cef8:	2300      	movs	r3, #0
 800cefa:	61bb      	str	r3, [r7, #24]
      break;
 800cefc:	e002      	b.n	800cf04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cefe:	4b07      	ldr	r3, [pc, #28]	; (800cf1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cf00:	61bb      	str	r3, [r7, #24]
      break;
 800cf02:	bf00      	nop
  }

  return sysclockfreq;
 800cf04:	69bb      	ldr	r3, [r7, #24]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3724      	adds	r7, #36	; 0x24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	58024400 	.word	0x58024400
 800cf18:	03d09000 	.word	0x03d09000
 800cf1c:	003d0900 	.word	0x003d0900
 800cf20:	017d7840 	.word	0x017d7840
 800cf24:	46000000 	.word	0x46000000
 800cf28:	4c742400 	.word	0x4c742400
 800cf2c:	4a742400 	.word	0x4a742400
 800cf30:	4bbebc20 	.word	0x4bbebc20

0800cf34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cf3a:	f7ff fe81 	bl	800cc40 <HAL_RCC_GetSysClockFreq>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <HAL_RCC_GetHCLKFreq+0x50>)
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	0a1b      	lsrs	r3, r3, #8
 800cf46:	f003 030f 	and.w	r3, r3, #15
 800cf4a:	490f      	ldr	r1, [pc, #60]	; (800cf88 <HAL_RCC_GetHCLKFreq+0x54>)
 800cf4c:	5ccb      	ldrb	r3, [r1, r3]
 800cf4e:	f003 031f 	and.w	r3, r3, #31
 800cf52:	fa22 f303 	lsr.w	r3, r2, r3
 800cf56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cf58:	4b0a      	ldr	r3, [pc, #40]	; (800cf84 <HAL_RCC_GetHCLKFreq+0x50>)
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	f003 030f 	and.w	r3, r3, #15
 800cf60:	4a09      	ldr	r2, [pc, #36]	; (800cf88 <HAL_RCC_GetHCLKFreq+0x54>)
 800cf62:	5cd3      	ldrb	r3, [r2, r3]
 800cf64:	f003 031f 	and.w	r3, r3, #31
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6e:	4a07      	ldr	r2, [pc, #28]	; (800cf8c <HAL_RCC_GetHCLKFreq+0x58>)
 800cf70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cf72:	4a07      	ldr	r2, [pc, #28]	; (800cf90 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cf78:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <HAL_RCC_GetHCLKFreq+0x58>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	58024400 	.word	0x58024400
 800cf88:	0802b9ec 	.word	0x0802b9ec
 800cf8c:	240003a8 	.word	0x240003a8
 800cf90:	240003a4 	.word	0x240003a4

0800cf94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cf98:	f7ff ffcc 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	4b06      	ldr	r3, [pc, #24]	; (800cfb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cfa0:	69db      	ldr	r3, [r3, #28]
 800cfa2:	091b      	lsrs	r3, r3, #4
 800cfa4:	f003 0307 	and.w	r3, r3, #7
 800cfa8:	4904      	ldr	r1, [pc, #16]	; (800cfbc <HAL_RCC_GetPCLK1Freq+0x28>)
 800cfaa:	5ccb      	ldrb	r3, [r1, r3]
 800cfac:	f003 031f 	and.w	r3, r3, #31
 800cfb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	58024400 	.word	0x58024400
 800cfbc:	0802b9ec 	.word	0x0802b9ec

0800cfc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	223f      	movs	r2, #63	; 0x3f
 800cfce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cfd0:	4b1a      	ldr	r3, [pc, #104]	; (800d03c <HAL_RCC_GetClockConfig+0x7c>)
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	f003 0207 	and.w	r2, r3, #7
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800cfdc:	4b17      	ldr	r3, [pc, #92]	; (800d03c <HAL_RCC_GetClockConfig+0x7c>)
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800cfe8:	4b14      	ldr	r3, [pc, #80]	; (800d03c <HAL_RCC_GetClockConfig+0x7c>)
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	f003 020f 	and.w	r2, r3, #15
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800cff4:	4b11      	ldr	r3, [pc, #68]	; (800d03c <HAL_RCC_GetClockConfig+0x7c>)
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800d000:	4b0e      	ldr	r3, [pc, #56]	; (800d03c <HAL_RCC_GetClockConfig+0x7c>)
 800d002:	69db      	ldr	r3, [r3, #28]
 800d004:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800d00c:	4b0b      	ldr	r3, [pc, #44]	; (800d03c <HAL_RCC_GetClockConfig+0x7c>)
 800d00e:	69db      	ldr	r3, [r3, #28]
 800d010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800d018:	4b08      	ldr	r3, [pc, #32]	; (800d03c <HAL_RCC_GetClockConfig+0x7c>)
 800d01a:	6a1b      	ldr	r3, [r3, #32]
 800d01c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d024:	4b06      	ldr	r3, [pc, #24]	; (800d040 <HAL_RCC_GetClockConfig+0x80>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f003 020f 	and.w	r2, r3, #15
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	601a      	str	r2, [r3, #0]
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	58024400 	.word	0x58024400
 800d040:	52002000 	.word	0x52002000

0800d044 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d048:	b0c6      	sub	sp, #280	; 0x118
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d050:	2300      	movs	r3, #0
 800d052:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d056:	2300      	movs	r3, #0
 800d058:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d068:	2500      	movs	r5, #0
 800d06a:	ea54 0305 	orrs.w	r3, r4, r5
 800d06e:	d049      	beq.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d076:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d07a:	d02f      	beq.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d07c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d080:	d828      	bhi.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d086:	d01a      	beq.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d08c:	d822      	bhi.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d003      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d096:	d007      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d098:	e01c      	b.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d09a:	4bab      	ldr	r3, [pc, #684]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09e:	4aaa      	ldr	r2, [pc, #680]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d0a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d0a6:	e01a      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0ac:	3308      	adds	r3, #8
 800d0ae:	2102      	movs	r1, #2
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f002 fa49 	bl	800f548 <RCCEx_PLL2_Config>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d0bc:	e00f      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0c2:	3328      	adds	r3, #40	; 0x28
 800d0c4:	2102      	movs	r1, #2
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f002 faf0 	bl	800f6ac <RCCEx_PLL3_Config>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d0d2:	e004      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d0da:	e000      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d0dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10a      	bne.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d0e6:	4b98      	ldr	r3, [pc, #608]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0f4:	4a94      	ldr	r2, [pc, #592]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d0f6:	430b      	orrs	r3, r1
 800d0f8:	6513      	str	r3, [r2, #80]	; 0x50
 800d0fa:	e003      	b.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d100:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d110:	f04f 0900 	mov.w	r9, #0
 800d114:	ea58 0309 	orrs.w	r3, r8, r9
 800d118:	d047      	beq.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d11e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d120:	2b04      	cmp	r3, #4
 800d122:	d82a      	bhi.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d124:	a201      	add	r2, pc, #4	; (adr r2, 800d12c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12a:	bf00      	nop
 800d12c:	0800d141 	.word	0x0800d141
 800d130:	0800d14f 	.word	0x0800d14f
 800d134:	0800d165 	.word	0x0800d165
 800d138:	0800d183 	.word	0x0800d183
 800d13c:	0800d183 	.word	0x0800d183
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d140:	4b81      	ldr	r3, [pc, #516]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	4a80      	ldr	r2, [pc, #512]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d14a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d14c:	e01a      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d152:	3308      	adds	r3, #8
 800d154:	2100      	movs	r1, #0
 800d156:	4618      	mov	r0, r3
 800d158:	f002 f9f6 	bl	800f548 <RCCEx_PLL2_Config>
 800d15c:	4603      	mov	r3, r0
 800d15e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d162:	e00f      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d168:	3328      	adds	r3, #40	; 0x28
 800d16a:	2100      	movs	r1, #0
 800d16c:	4618      	mov	r0, r3
 800d16e:	f002 fa9d 	bl	800f6ac <RCCEx_PLL3_Config>
 800d172:	4603      	mov	r3, r0
 800d174:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d178:	e004      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d180:	e000      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d182:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d184:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d18c:	4b6e      	ldr	r3, [pc, #440]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d190:	f023 0107 	bic.w	r1, r3, #7
 800d194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d19a:	4a6b      	ldr	r2, [pc, #428]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d19c:	430b      	orrs	r3, r1
 800d19e:	6513      	str	r3, [r2, #80]	; 0x50
 800d1a0:	e003      	b.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d1a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800d1b6:	f04f 0b00 	mov.w	fp, #0
 800d1ba:	ea5a 030b 	orrs.w	r3, sl, fp
 800d1be:	d05b      	beq.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d1c8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800d1cc:	d03b      	beq.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800d1ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800d1d2:	d834      	bhi.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d1d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d1d8:	d037      	beq.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800d1da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d1de:	d82e      	bhi.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d1e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d1e4:	d033      	beq.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800d1e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d1ea:	d828      	bhi.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d1ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1f0:	d01a      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800d1f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1f6:	d822      	bhi.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d003      	beq.n	800d204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800d1fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d200:	d007      	beq.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800d202:	e01c      	b.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d204:	4b50      	ldr	r3, [pc, #320]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d208:	4a4f      	ldr	r2, [pc, #316]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d20a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d20e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d210:	e01e      	b.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d216:	3308      	adds	r3, #8
 800d218:	2100      	movs	r1, #0
 800d21a:	4618      	mov	r0, r3
 800d21c:	f002 f994 	bl	800f548 <RCCEx_PLL2_Config>
 800d220:	4603      	mov	r3, r0
 800d222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d226:	e013      	b.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d22c:	3328      	adds	r3, #40	; 0x28
 800d22e:	2100      	movs	r1, #0
 800d230:	4618      	mov	r0, r3
 800d232:	f002 fa3b 	bl	800f6ac <RCCEx_PLL3_Config>
 800d236:	4603      	mov	r3, r0
 800d238:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d23c:	e008      	b.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d244:	e004      	b.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d246:	bf00      	nop
 800d248:	e002      	b.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d24a:	bf00      	nop
 800d24c:	e000      	b.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d24e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d250:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10b      	bne.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d258:	4b3b      	ldr	r3, [pc, #236]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d25c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800d260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d268:	4a37      	ldr	r2, [pc, #220]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d26a:	430b      	orrs	r3, r1
 800d26c:	6593      	str	r3, [r2, #88]	; 0x58
 800d26e:	e003      	b.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d288:	2300      	movs	r3, #0
 800d28a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d28e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d292:	460b      	mov	r3, r1
 800d294:	4313      	orrs	r3, r2
 800d296:	d05d      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d29c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d2a0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800d2a4:	d03b      	beq.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800d2a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800d2aa:	d834      	bhi.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d2ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2b0:	d037      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d2b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d2b6:	d82e      	bhi.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d2b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d2bc:	d033      	beq.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800d2be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d2c2:	d828      	bhi.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d2c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2c8:	d01a      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800d2ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2ce:	d822      	bhi.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d003      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800d2d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d2d8:	d007      	beq.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800d2da:	e01c      	b.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2dc:	4b1a      	ldr	r3, [pc, #104]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e0:	4a19      	ldr	r2, [pc, #100]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d2e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d2e8:	e01e      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f002 f928 	bl	800f548 <RCCEx_PLL2_Config>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d2fe:	e013      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d304:	3328      	adds	r3, #40	; 0x28
 800d306:	2100      	movs	r1, #0
 800d308:	4618      	mov	r0, r3
 800d30a:	f002 f9cf 	bl	800f6ac <RCCEx_PLL3_Config>
 800d30e:	4603      	mov	r3, r0
 800d310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d314:	e008      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d316:	2301      	movs	r3, #1
 800d318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d31c:	e004      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800d31e:	bf00      	nop
 800d320:	e002      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800d322:	bf00      	nop
 800d324:	e000      	b.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800d326:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d328:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10d      	bne.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d330:	4b05      	ldr	r3, [pc, #20]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d334:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800d338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d33c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d340:	4a01      	ldr	r2, [pc, #4]	; (800d348 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d342:	430b      	orrs	r3, r1
 800d344:	6593      	str	r3, [r2, #88]	; 0x58
 800d346:	e005      	b.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800d348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d34c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d350:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d360:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d364:	2300      	movs	r3, #0
 800d366:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d36a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d36e:	460b      	mov	r3, r1
 800d370:	4313      	orrs	r3, r2
 800d372:	d03a      	beq.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800d374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d37a:	2b30      	cmp	r3, #48	; 0x30
 800d37c:	d01f      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800d37e:	2b30      	cmp	r3, #48	; 0x30
 800d380:	d819      	bhi.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800d382:	2b20      	cmp	r3, #32
 800d384:	d00c      	beq.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800d386:	2b20      	cmp	r3, #32
 800d388:	d815      	bhi.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d019      	beq.n	800d3c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d38e:	2b10      	cmp	r3, #16
 800d390:	d111      	bne.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d392:	4baa      	ldr	r3, [pc, #680]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d396:	4aa9      	ldr	r2, [pc, #676]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d39c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d39e:	e011      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3a4:	3308      	adds	r3, #8
 800d3a6:	2102      	movs	r1, #2
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f002 f8cd 	bl	800f548 <RCCEx_PLL2_Config>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800d3b4:	e006      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d3bc:	e002      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800d3be:	bf00      	nop
 800d3c0:	e000      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800d3c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10a      	bne.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d3cc:	4b9b      	ldr	r3, [pc, #620]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3da:	4a98      	ldr	r2, [pc, #608]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d3dc:	430b      	orrs	r3, r1
 800d3de:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d3e0:	e003      	b.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d3e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d3f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d400:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d404:	460b      	mov	r3, r1
 800d406:	4313      	orrs	r3, r2
 800d408:	d051      	beq.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d414:	d035      	beq.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800d416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d41a:	d82e      	bhi.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d41c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d420:	d031      	beq.n	800d486 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800d422:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d426:	d828      	bhi.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d42c:	d01a      	beq.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800d42e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d432:	d822      	bhi.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d434:	2b00      	cmp	r3, #0
 800d436:	d003      	beq.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800d438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d43c:	d007      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800d43e:	e01c      	b.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d440:	4b7e      	ldr	r3, [pc, #504]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d444:	4a7d      	ldr	r2, [pc, #500]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d44a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d44c:	e01c      	b.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d452:	3308      	adds	r3, #8
 800d454:	2100      	movs	r1, #0
 800d456:	4618      	mov	r0, r3
 800d458:	f002 f876 	bl	800f548 <RCCEx_PLL2_Config>
 800d45c:	4603      	mov	r3, r0
 800d45e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d462:	e011      	b.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d468:	3328      	adds	r3, #40	; 0x28
 800d46a:	2100      	movs	r1, #0
 800d46c:	4618      	mov	r0, r3
 800d46e:	f002 f91d 	bl	800f6ac <RCCEx_PLL3_Config>
 800d472:	4603      	mov	r3, r0
 800d474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d478:	e006      	b.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d480:	e002      	b.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800d482:	bf00      	nop
 800d484:	e000      	b.n	800d488 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800d486:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d488:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10a      	bne.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d490:	4b6a      	ldr	r3, [pc, #424]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d494:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d49c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d49e:	4a67      	ldr	r2, [pc, #412]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d4a0:	430b      	orrs	r3, r1
 800d4a2:	6513      	str	r3, [r2, #80]	; 0x50
 800d4a4:	e003      	b.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d4aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d4ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d4be:	2300      	movs	r3, #0
 800d4c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d4c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	d053      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d4d8:	d033      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800d4da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d4de:	d82c      	bhi.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d4e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d4e4:	d02f      	beq.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800d4e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d4ea:	d826      	bhi.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d4ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d4f0:	d02b      	beq.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800d4f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d4f6:	d820      	bhi.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d4f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4fc:	d012      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800d4fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d502:	d81a      	bhi.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d504:	2b00      	cmp	r3, #0
 800d506:	d022      	beq.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800d508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d50c:	d115      	bne.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d512:	3308      	adds	r3, #8
 800d514:	2101      	movs	r1, #1
 800d516:	4618      	mov	r0, r3
 800d518:	f002 f816 	bl	800f548 <RCCEx_PLL2_Config>
 800d51c:	4603      	mov	r3, r0
 800d51e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d522:	e015      	b.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d528:	3328      	adds	r3, #40	; 0x28
 800d52a:	2101      	movs	r1, #1
 800d52c:	4618      	mov	r0, r3
 800d52e:	f002 f8bd 	bl	800f6ac <RCCEx_PLL3_Config>
 800d532:	4603      	mov	r3, r0
 800d534:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d538:	e00a      	b.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d540:	e006      	b.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d542:	bf00      	nop
 800d544:	e004      	b.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d546:	bf00      	nop
 800d548:	e002      	b.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d54a:	bf00      	nop
 800d54c:	e000      	b.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d54e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10a      	bne.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d558:	4b38      	ldr	r3, [pc, #224]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d55c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d566:	4a35      	ldr	r2, [pc, #212]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d568:	430b      	orrs	r3, r1
 800d56a:	6513      	str	r3, [r2, #80]	; 0x50
 800d56c:	e003      	b.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d572:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d586:	2300      	movs	r3, #0
 800d588:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d58c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d590:	460b      	mov	r3, r1
 800d592:	4313      	orrs	r3, r2
 800d594:	d058      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d59a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d59e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d5a2:	d033      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800d5a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d5a8:	d82c      	bhi.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ae:	d02f      	beq.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800d5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5b4:	d826      	bhi.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d5b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d5ba:	d02b      	beq.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800d5bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d5c0:	d820      	bhi.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5c6:	d012      	beq.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5cc:	d81a      	bhi.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d022      	beq.n	800d618 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d5d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5d6:	d115      	bne.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5dc:	3308      	adds	r3, #8
 800d5de:	2101      	movs	r1, #1
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f001 ffb1 	bl	800f548 <RCCEx_PLL2_Config>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d5ec:	e015      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5f2:	3328      	adds	r3, #40	; 0x28
 800d5f4:	2101      	movs	r1, #1
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f002 f858 	bl	800f6ac <RCCEx_PLL3_Config>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d602:	e00a      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d60a:	e006      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d60c:	bf00      	nop
 800d60e:	e004      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d610:	bf00      	nop
 800d612:	e002      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d614:	bf00      	nop
 800d616:	e000      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d61a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10e      	bne.n	800d640 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d622:	4b06      	ldr	r3, [pc, #24]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d626:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d62e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d632:	4a02      	ldr	r2, [pc, #8]	; (800d63c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d634:	430b      	orrs	r3, r1
 800d636:	6593      	str	r3, [r2, #88]	; 0x58
 800d638:	e006      	b.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800d63a:	bf00      	nop
 800d63c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d644:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d658:	2300      	movs	r3, #0
 800d65a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d65e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d662:	460b      	mov	r3, r1
 800d664:	4313      	orrs	r3, r2
 800d666:	d037      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d66e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d672:	d00e      	beq.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800d674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d678:	d816      	bhi.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d018      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800d67e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d682:	d111      	bne.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d684:	4bc4      	ldr	r3, [pc, #784]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d688:	4ac3      	ldr	r2, [pc, #780]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d68a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d68e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d690:	e00f      	b.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d696:	3308      	adds	r3, #8
 800d698:	2101      	movs	r1, #1
 800d69a:	4618      	mov	r0, r3
 800d69c:	f001 ff54 	bl	800f548 <RCCEx_PLL2_Config>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d6a6:	e004      	b.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d6ae:	e000      	b.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800d6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10a      	bne.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d6ba:	4bb7      	ldr	r3, [pc, #732]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d6bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6c8:	4ab3      	ldr	r2, [pc, #716]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d6ca:	430b      	orrs	r3, r1
 800d6cc:	6513      	str	r3, [r2, #80]	; 0x50
 800d6ce:	e003      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d6d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d6e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d6ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	d039      	beq.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	d81c      	bhi.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800d702:	a201      	add	r2, pc, #4	; (adr r2, 800d708 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800d704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d708:	0800d745 	.word	0x0800d745
 800d70c:	0800d719 	.word	0x0800d719
 800d710:	0800d727 	.word	0x0800d727
 800d714:	0800d745 	.word	0x0800d745
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d718:	4b9f      	ldr	r3, [pc, #636]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71c:	4a9e      	ldr	r2, [pc, #632]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d71e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d724:	e00f      	b.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d72a:	3308      	adds	r3, #8
 800d72c:	2102      	movs	r1, #2
 800d72e:	4618      	mov	r0, r3
 800d730:	f001 ff0a 	bl	800f548 <RCCEx_PLL2_Config>
 800d734:	4603      	mov	r3, r0
 800d736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d73a:	e004      	b.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d742:	e000      	b.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800d744:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d746:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10a      	bne.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d74e:	4b92      	ldr	r3, [pc, #584]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d752:	f023 0103 	bic.w	r1, r3, #3
 800d756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d75c:	4a8e      	ldr	r2, [pc, #568]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d75e:	430b      	orrs	r3, r1
 800d760:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d762:	e003      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d768:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d77c:	2300      	movs	r3, #0
 800d77e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d782:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d786:	460b      	mov	r3, r1
 800d788:	4313      	orrs	r3, r2
 800d78a:	f000 8099 	beq.w	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d78e:	4b83      	ldr	r3, [pc, #524]	; (800d99c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a82      	ldr	r2, [pc, #520]	; (800d99c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d79a:	f7fa f803 	bl	80077a4 <HAL_GetTick>
 800d79e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d7a2:	e00b      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7a4:	f7f9 fffe 	bl	80077a4 <HAL_GetTick>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	2b64      	cmp	r3, #100	; 0x64
 800d7b2:	d903      	bls.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d7ba:	e005      	b.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d7bc:	4b77      	ldr	r3, [pc, #476]	; (800d99c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d0ed      	beq.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800d7c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d173      	bne.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d7d0:	4b71      	ldr	r3, [pc, #452]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d7d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d7dc:	4053      	eors	r3, r2
 800d7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d015      	beq.n	800d812 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d7e6:	4b6c      	ldr	r3, [pc, #432]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d7f2:	4b69      	ldr	r3, [pc, #420]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f6:	4a68      	ldr	r2, [pc, #416]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d7f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7fc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d7fe:	4b66      	ldr	r3, [pc, #408]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d802:	4a65      	ldr	r2, [pc, #404]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d808:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d80a:	4a63      	ldr	r2, [pc, #396]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d80c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d810:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d81e:	d118      	bne.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d820:	f7f9 ffc0 	bl	80077a4 <HAL_GetTick>
 800d824:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d828:	e00d      	b.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d82a:	f7f9 ffbb 	bl	80077a4 <HAL_GetTick>
 800d82e:	4602      	mov	r2, r0
 800d830:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d834:	1ad2      	subs	r2, r2, r3
 800d836:	f241 3388 	movw	r3, #5000	; 0x1388
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d903      	bls.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800d83e:	2303      	movs	r3, #3
 800d840:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800d844:	e005      	b.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d846:	4b54      	ldr	r3, [pc, #336]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d84a:	f003 0302 	and.w	r3, r3, #2
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0eb      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800d852:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d856:	2b00      	cmp	r3, #0
 800d858:	d129      	bne.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d85e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d86a:	d10e      	bne.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800d86c:	4b4a      	ldr	r3, [pc, #296]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d87c:	091a      	lsrs	r2, r3, #4
 800d87e:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d880:	4013      	ands	r3, r2
 800d882:	4a45      	ldr	r2, [pc, #276]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d884:	430b      	orrs	r3, r1
 800d886:	6113      	str	r3, [r2, #16]
 800d888:	e005      	b.n	800d896 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800d88a:	4b43      	ldr	r3, [pc, #268]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	4a42      	ldr	r2, [pc, #264]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d890:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d894:	6113      	str	r3, [r2, #16]
 800d896:	4b40      	ldr	r3, [pc, #256]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d898:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d89e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d8a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8a6:	4a3c      	ldr	r2, [pc, #240]	; (800d998 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d8a8:	430b      	orrs	r3, r1
 800d8aa:	6713      	str	r3, [r2, #112]	; 0x70
 800d8ac:	e008      	b.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d8ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d8b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800d8b6:	e003      	b.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d8bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	f002 0301 	and.w	r3, r2, #1
 800d8cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d8d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	f000 808f 	beq.w	800da00 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8e8:	2b28      	cmp	r3, #40	; 0x28
 800d8ea:	d871      	bhi.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800d8ec:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800d8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f2:	bf00      	nop
 800d8f4:	0800d9d9 	.word	0x0800d9d9
 800d8f8:	0800d9d1 	.word	0x0800d9d1
 800d8fc:	0800d9d1 	.word	0x0800d9d1
 800d900:	0800d9d1 	.word	0x0800d9d1
 800d904:	0800d9d1 	.word	0x0800d9d1
 800d908:	0800d9d1 	.word	0x0800d9d1
 800d90c:	0800d9d1 	.word	0x0800d9d1
 800d910:	0800d9d1 	.word	0x0800d9d1
 800d914:	0800d9a5 	.word	0x0800d9a5
 800d918:	0800d9d1 	.word	0x0800d9d1
 800d91c:	0800d9d1 	.word	0x0800d9d1
 800d920:	0800d9d1 	.word	0x0800d9d1
 800d924:	0800d9d1 	.word	0x0800d9d1
 800d928:	0800d9d1 	.word	0x0800d9d1
 800d92c:	0800d9d1 	.word	0x0800d9d1
 800d930:	0800d9d1 	.word	0x0800d9d1
 800d934:	0800d9bb 	.word	0x0800d9bb
 800d938:	0800d9d1 	.word	0x0800d9d1
 800d93c:	0800d9d1 	.word	0x0800d9d1
 800d940:	0800d9d1 	.word	0x0800d9d1
 800d944:	0800d9d1 	.word	0x0800d9d1
 800d948:	0800d9d1 	.word	0x0800d9d1
 800d94c:	0800d9d1 	.word	0x0800d9d1
 800d950:	0800d9d1 	.word	0x0800d9d1
 800d954:	0800d9d9 	.word	0x0800d9d9
 800d958:	0800d9d1 	.word	0x0800d9d1
 800d95c:	0800d9d1 	.word	0x0800d9d1
 800d960:	0800d9d1 	.word	0x0800d9d1
 800d964:	0800d9d1 	.word	0x0800d9d1
 800d968:	0800d9d1 	.word	0x0800d9d1
 800d96c:	0800d9d1 	.word	0x0800d9d1
 800d970:	0800d9d1 	.word	0x0800d9d1
 800d974:	0800d9d9 	.word	0x0800d9d9
 800d978:	0800d9d1 	.word	0x0800d9d1
 800d97c:	0800d9d1 	.word	0x0800d9d1
 800d980:	0800d9d1 	.word	0x0800d9d1
 800d984:	0800d9d1 	.word	0x0800d9d1
 800d988:	0800d9d1 	.word	0x0800d9d1
 800d98c:	0800d9d1 	.word	0x0800d9d1
 800d990:	0800d9d1 	.word	0x0800d9d1
 800d994:	0800d9d9 	.word	0x0800d9d9
 800d998:	58024400 	.word	0x58024400
 800d99c:	58024800 	.word	0x58024800
 800d9a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f001 fdcb 	bl	800f548 <RCCEx_PLL2_Config>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d9b8:	e00f      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9be:	3328      	adds	r3, #40	; 0x28
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f001 fe72 	bl	800f6ac <RCCEx_PLL3_Config>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d9ce:	e004      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800d9d6:	e000      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d9d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10a      	bne.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d9e2:	4bbf      	ldr	r3, [pc, #764]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9f0:	4abb      	ldr	r2, [pc, #748]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d9f2:	430b      	orrs	r3, r1
 800d9f4:	6553      	str	r3, [r2, #84]	; 0x54
 800d9f6:	e003      	b.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d9fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800da00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	f002 0302 	and.w	r3, r2, #2
 800da0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da10:	2300      	movs	r3, #0
 800da12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800da1a:	460b      	mov	r3, r1
 800da1c:	4313      	orrs	r3, r2
 800da1e:	d041      	beq.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800da20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da26:	2b05      	cmp	r3, #5
 800da28:	d824      	bhi.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800da2a:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800da2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da30:	0800da7d 	.word	0x0800da7d
 800da34:	0800da49 	.word	0x0800da49
 800da38:	0800da5f 	.word	0x0800da5f
 800da3c:	0800da7d 	.word	0x0800da7d
 800da40:	0800da7d 	.word	0x0800da7d
 800da44:	0800da7d 	.word	0x0800da7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800da48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da4c:	3308      	adds	r3, #8
 800da4e:	2101      	movs	r1, #1
 800da50:	4618      	mov	r0, r3
 800da52:	f001 fd79 	bl	800f548 <RCCEx_PLL2_Config>
 800da56:	4603      	mov	r3, r0
 800da58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800da5c:	e00f      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800da5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da62:	3328      	adds	r3, #40	; 0x28
 800da64:	2101      	movs	r1, #1
 800da66:	4618      	mov	r0, r3
 800da68:	f001 fe20 	bl	800f6ac <RCCEx_PLL3_Config>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800da72:	e004      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800da7a:	e000      	b.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800da7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10a      	bne.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800da86:	4b96      	ldr	r3, [pc, #600]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800da88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da8a:	f023 0107 	bic.w	r1, r3, #7
 800da8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da94:	4a92      	ldr	r2, [pc, #584]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800da96:	430b      	orrs	r3, r1
 800da98:	6553      	str	r3, [r2, #84]	; 0x54
 800da9a:	e003      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800daa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800daa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daac:	f002 0304 	and.w	r3, r2, #4
 800dab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dab4:	2300      	movs	r3, #0
 800dab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800daba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dabe:	460b      	mov	r3, r1
 800dac0:	4313      	orrs	r3, r2
 800dac2:	d044      	beq.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800dac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dacc:	2b05      	cmp	r3, #5
 800dace:	d825      	bhi.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800dad0:	a201      	add	r2, pc, #4	; (adr r2, 800dad8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800dad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad6:	bf00      	nop
 800dad8:	0800db25 	.word	0x0800db25
 800dadc:	0800daf1 	.word	0x0800daf1
 800dae0:	0800db07 	.word	0x0800db07
 800dae4:	0800db25 	.word	0x0800db25
 800dae8:	0800db25 	.word	0x0800db25
 800daec:	0800db25 	.word	0x0800db25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800daf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daf4:	3308      	adds	r3, #8
 800daf6:	2101      	movs	r1, #1
 800daf8:	4618      	mov	r0, r3
 800dafa:	f001 fd25 	bl	800f548 <RCCEx_PLL2_Config>
 800dafe:	4603      	mov	r3, r0
 800db00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800db04:	e00f      	b.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db0a:	3328      	adds	r3, #40	; 0x28
 800db0c:	2101      	movs	r1, #1
 800db0e:	4618      	mov	r0, r3
 800db10:	f001 fdcc 	bl	800f6ac <RCCEx_PLL3_Config>
 800db14:	4603      	mov	r3, r0
 800db16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800db1a:	e004      	b.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db1c:	2301      	movs	r3, #1
 800db1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800db22:	e000      	b.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800db24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d10b      	bne.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800db2e:	4b6c      	ldr	r3, [pc, #432]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800db30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db32:	f023 0107 	bic.w	r1, r3, #7
 800db36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db3e:	4a68      	ldr	r2, [pc, #416]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800db40:	430b      	orrs	r3, r1
 800db42:	6593      	str	r3, [r2, #88]	; 0x58
 800db44:	e003      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800db4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800db4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db56:	f002 0320 	and.w	r3, r2, #32
 800db5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800db5e:	2300      	movs	r3, #0
 800db60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800db64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800db68:	460b      	mov	r3, r1
 800db6a:	4313      	orrs	r3, r2
 800db6c:	d055      	beq.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800db6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db7a:	d033      	beq.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800db7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db80:	d82c      	bhi.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800db82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db86:	d02f      	beq.n	800dbe8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800db88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db8c:	d826      	bhi.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800db8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800db92:	d02b      	beq.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800db94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800db98:	d820      	bhi.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800db9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db9e:	d012      	beq.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800dba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dba4:	d81a      	bhi.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d022      	beq.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800dbaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbae:	d115      	bne.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f001 fcc5 	bl	800f548 <RCCEx_PLL2_Config>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dbc4:	e015      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dbc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbca:	3328      	adds	r3, #40	; 0x28
 800dbcc:	2102      	movs	r1, #2
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f001 fd6c 	bl	800f6ac <RCCEx_PLL3_Config>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dbda:	e00a      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800dbe2:	e006      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800dbe4:	bf00      	nop
 800dbe6:	e004      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800dbe8:	bf00      	nop
 800dbea:	e002      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800dbec:	bf00      	nop
 800dbee:	e000      	b.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800dbf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10b      	bne.n	800dc12 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dbfa:	4b39      	ldr	r3, [pc, #228]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800dbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbfe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800dc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc0a:	4a35      	ldr	r2, [pc, #212]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800dc0c:	430b      	orrs	r3, r1
 800dc0e:	6553      	str	r3, [r2, #84]	; 0x54
 800dc10:	e003      	b.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800dc16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc22:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800dc26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dc30:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800dc34:	460b      	mov	r3, r1
 800dc36:	4313      	orrs	r3, r2
 800dc38:	d058      	beq.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800dc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dc42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dc46:	d033      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800dc48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dc4c:	d82c      	bhi.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800dc4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc52:	d02f      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800dc54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc58:	d826      	bhi.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800dc5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc5e:	d02b      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800dc60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc64:	d820      	bhi.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800dc66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc6a:	d012      	beq.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800dc6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc70:	d81a      	bhi.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d022      	beq.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800dc76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc7a:	d115      	bne.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc80:	3308      	adds	r3, #8
 800dc82:	2100      	movs	r1, #0
 800dc84:	4618      	mov	r0, r3
 800dc86:	f001 fc5f 	bl	800f548 <RCCEx_PLL2_Config>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800dc90:	e015      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc96:	3328      	adds	r3, #40	; 0x28
 800dc98:	2102      	movs	r1, #2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f001 fd06 	bl	800f6ac <RCCEx_PLL3_Config>
 800dca0:	4603      	mov	r3, r0
 800dca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800dca6:	e00a      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800dcae:	e006      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dcb0:	bf00      	nop
 800dcb2:	e004      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dcb4:	bf00      	nop
 800dcb6:	e002      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dcb8:	bf00      	nop
 800dcba:	e000      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dcbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10e      	bne.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dcc6:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800dcc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800dcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dcd6:	4a02      	ldr	r2, [pc, #8]	; (800dce0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800dcd8:	430b      	orrs	r3, r1
 800dcda:	6593      	str	r3, [r2, #88]	; 0x58
 800dcdc:	e006      	b.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800dcde:	bf00      	nop
 800dce0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dce4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800dce8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800dcec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800dcf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800dd06:	460b      	mov	r3, r1
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	d055      	beq.n	800ddb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800dd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dd14:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800dd18:	d033      	beq.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800dd1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800dd1e:	d82c      	bhi.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800dd20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd24:	d02f      	beq.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800dd26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd2a:	d826      	bhi.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800dd2c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800dd30:	d02b      	beq.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800dd32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800dd36:	d820      	bhi.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800dd38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd3c:	d012      	beq.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800dd3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd42:	d81a      	bhi.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d022      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800dd48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd4c:	d115      	bne.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd52:	3308      	adds	r3, #8
 800dd54:	2100      	movs	r1, #0
 800dd56:	4618      	mov	r0, r3
 800dd58:	f001 fbf6 	bl	800f548 <RCCEx_PLL2_Config>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800dd62:	e015      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd68:	3328      	adds	r3, #40	; 0x28
 800dd6a:	2102      	movs	r1, #2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f001 fc9d 	bl	800f6ac <RCCEx_PLL3_Config>
 800dd72:	4603      	mov	r3, r0
 800dd74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800dd78:	e00a      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800dd80:	e006      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800dd82:	bf00      	nop
 800dd84:	e004      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800dd86:	bf00      	nop
 800dd88:	e002      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800dd8a:	bf00      	nop
 800dd8c:	e000      	b.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800dd8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10b      	bne.n	800ddb0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800dd98:	4ba0      	ldr	r3, [pc, #640]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dd9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd9c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800dda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dda4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dda8:	4a9c      	ldr	r2, [pc, #624]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ddaa:	430b      	orrs	r3, r1
 800ddac:	6593      	str	r3, [r2, #88]	; 0x58
 800ddae:	e003      	b.n	800ddb8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ddb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ddb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc0:	f002 0308 	and.w	r3, r2, #8
 800ddc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ddce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	d01e      	beq.n	800de16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ddd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dde0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dde4:	d10c      	bne.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddea:	3328      	adds	r3, #40	; 0x28
 800ddec:	2102      	movs	r1, #2
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f001 fc5c 	bl	800f6ac <RCCEx_PLL3_Config>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800de00:	4b86      	ldr	r3, [pc, #536]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800de02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de10:	4a82      	ldr	r2, [pc, #520]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800de12:	430b      	orrs	r3, r1
 800de14:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800de16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	f002 0310 	and.w	r3, r2, #16
 800de22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de26:	2300      	movs	r3, #0
 800de28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800de30:	460b      	mov	r3, r1
 800de32:	4313      	orrs	r3, r2
 800de34:	d01e      	beq.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800de36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de42:	d10c      	bne.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800de44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de48:	3328      	adds	r3, #40	; 0x28
 800de4a:	2102      	movs	r1, #2
 800de4c:	4618      	mov	r0, r3
 800de4e:	f001 fc2d 	bl	800f6ac <RCCEx_PLL3_Config>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800de5e:	4b6f      	ldr	r3, [pc, #444]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800de60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800de66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de6e:	4a6b      	ldr	r2, [pc, #428]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800de70:	430b      	orrs	r3, r1
 800de72:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800de74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800de80:	67bb      	str	r3, [r7, #120]	; 0x78
 800de82:	2300      	movs	r3, #0
 800de84:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de86:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800de8a:	460b      	mov	r3, r1
 800de8c:	4313      	orrs	r3, r2
 800de8e:	d03e      	beq.n	800df0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800de90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800de98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de9c:	d022      	beq.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800de9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dea2:	d81b      	bhi.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d003      	beq.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800dea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800deac:	d00b      	beq.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800deae:	e015      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800deb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deb4:	3308      	adds	r3, #8
 800deb6:	2100      	movs	r1, #0
 800deb8:	4618      	mov	r0, r3
 800deba:	f001 fb45 	bl	800f548 <RCCEx_PLL2_Config>
 800debe:	4603      	mov	r3, r0
 800dec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dec4:	e00f      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deca:	3328      	adds	r3, #40	; 0x28
 800decc:	2102      	movs	r1, #2
 800dece:	4618      	mov	r0, r3
 800ded0:	f001 fbec 	bl	800f6ac <RCCEx_PLL3_Config>
 800ded4:	4603      	mov	r3, r0
 800ded6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800deda:	e004      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800dee2:	e000      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800dee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dee6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10b      	bne.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800deee:	4b4b      	ldr	r3, [pc, #300]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800def0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800def2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800def6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800defa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800defe:	4a47      	ldr	r2, [pc, #284]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800df00:	430b      	orrs	r3, r1
 800df02:	6593      	str	r3, [r2, #88]	; 0x58
 800df04:	e003      	b.n	800df0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800df0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800df0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800df1a:	673b      	str	r3, [r7, #112]	; 0x70
 800df1c:	2300      	movs	r3, #0
 800df1e:	677b      	str	r3, [r7, #116]	; 0x74
 800df20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800df24:	460b      	mov	r3, r1
 800df26:	4313      	orrs	r3, r2
 800df28:	d03b      	beq.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800df2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df36:	d01f      	beq.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800df38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800df3c:	d818      	bhi.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800df3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df42:	d003      	beq.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800df44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df48:	d007      	beq.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800df4a:	e011      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df4c:	4b33      	ldr	r3, [pc, #204]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800df4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df50:	4a32      	ldr	r2, [pc, #200]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800df52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800df58:	e00f      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df5e:	3328      	adds	r3, #40	; 0x28
 800df60:	2101      	movs	r1, #1
 800df62:	4618      	mov	r0, r3
 800df64:	f001 fba2 	bl	800f6ac <RCCEx_PLL3_Config>
 800df68:	4603      	mov	r3, r0
 800df6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800df6e:	e004      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800df76:	e000      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800df78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10b      	bne.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800df82:	4b26      	ldr	r3, [pc, #152]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800df84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800df8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df92:	4a22      	ldr	r2, [pc, #136]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800df94:	430b      	orrs	r3, r1
 800df96:	6553      	str	r3, [r2, #84]	; 0x54
 800df98:	e003      	b.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800df9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dfa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfaa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800dfae:	66bb      	str	r3, [r7, #104]	; 0x68
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dfb4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	d034      	beq.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dfbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d003      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800dfc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfcc:	d007      	beq.n	800dfde <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800dfce:	e011      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfd0:	4b12      	ldr	r3, [pc, #72]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	4a11      	ldr	r2, [pc, #68]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dfd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dfdc:	e00e      	b.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dfde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfe2:	3308      	adds	r3, #8
 800dfe4:	2102      	movs	r1, #2
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f001 faae 	bl	800f548 <RCCEx_PLL2_Config>
 800dfec:	4603      	mov	r3, r0
 800dfee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dff2:	e003      	b.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800dff4:	2301      	movs	r3, #1
 800dff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800dffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dffc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10d      	bne.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e004:	4b05      	ldr	r3, [pc, #20]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e012:	4a02      	ldr	r2, [pc, #8]	; (800e01c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e014:	430b      	orrs	r3, r1
 800e016:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e018:	e006      	b.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800e01a:	bf00      	nop
 800e01c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e020:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e024:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e034:	663b      	str	r3, [r7, #96]	; 0x60
 800e036:	2300      	movs	r3, #0
 800e038:	667b      	str	r3, [r7, #100]	; 0x64
 800e03a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e03e:	460b      	mov	r3, r1
 800e040:	4313      	orrs	r3, r2
 800e042:	d00c      	beq.n	800e05e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e048:	3328      	adds	r3, #40	; 0x28
 800e04a:	2102      	movs	r1, #2
 800e04c:	4618      	mov	r0, r3
 800e04e:	f001 fb2d 	bl	800f6ac <RCCEx_PLL3_Config>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800e058:	2301      	movs	r3, #1
 800e05a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e06a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e06c:	2300      	movs	r3, #0
 800e06e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e070:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e074:	460b      	mov	r3, r1
 800e076:	4313      	orrs	r3, r2
 800e078:	d036      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e084:	d018      	beq.n	800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800e086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e08a:	d811      	bhi.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e090:	d014      	beq.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800e092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e096:	d80b      	bhi.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d011      	beq.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800e09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0a0:	d106      	bne.n	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0a2:	4bb7      	ldr	r3, [pc, #732]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a6:	4ab6      	ldr	r2, [pc, #728]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e0a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e0ae:	e008      	b.n	800e0c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800e0b6:	e004      	b.n	800e0c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e0b8:	bf00      	nop
 800e0ba:	e002      	b.n	800e0c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e0bc:	bf00      	nop
 800e0be:	e000      	b.n	800e0c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10a      	bne.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e0ca:	4bad      	ldr	r3, [pc, #692]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0d8:	4aa9      	ldr	r2, [pc, #676]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e0da:	430b      	orrs	r3, r1
 800e0dc:	6553      	str	r3, [r2, #84]	; 0x54
 800e0de:	e003      	b.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e0e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e0f4:	653b      	str	r3, [r7, #80]	; 0x50
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	657b      	str	r3, [r7, #84]	; 0x54
 800e0fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e0fe:	460b      	mov	r3, r1
 800e100:	4313      	orrs	r3, r2
 800e102:	d009      	beq.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e104:	4b9e      	ldr	r3, [pc, #632]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e108:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e112:	4a9b      	ldr	r2, [pc, #620]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e114:	430b      	orrs	r3, r1
 800e116:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e124:	64bb      	str	r3, [r7, #72]	; 0x48
 800e126:	2300      	movs	r3, #0
 800e128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e12a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e12e:	460b      	mov	r3, r1
 800e130:	4313      	orrs	r3, r2
 800e132:	d009      	beq.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e134:	4b92      	ldr	r3, [pc, #584]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e138:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800e13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e142:	4a8f      	ldr	r2, [pc, #572]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e144:	430b      	orrs	r3, r1
 800e146:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e154:	643b      	str	r3, [r7, #64]	; 0x40
 800e156:	2300      	movs	r3, #0
 800e158:	647b      	str	r3, [r7, #68]	; 0x44
 800e15a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e15e:	460b      	mov	r3, r1
 800e160:	4313      	orrs	r3, r2
 800e162:	d00e      	beq.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e164:	4b86      	ldr	r3, [pc, #536]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e166:	691b      	ldr	r3, [r3, #16]
 800e168:	4a85      	ldr	r2, [pc, #532]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e16a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e16e:	6113      	str	r3, [r2, #16]
 800e170:	4b83      	ldr	r3, [pc, #524]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e172:	6919      	ldr	r1, [r3, #16]
 800e174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e178:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e17c:	4a80      	ldr	r2, [pc, #512]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e17e:	430b      	orrs	r3, r1
 800e180:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e18e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e190:	2300      	movs	r3, #0
 800e192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e194:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e198:	460b      	mov	r3, r1
 800e19a:	4313      	orrs	r3, r2
 800e19c:	d009      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e19e:	4b78      	ldr	r3, [pc, #480]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ac:	4a74      	ldr	r2, [pc, #464]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e1ae:	430b      	orrs	r3, r1
 800e1b0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e1be:	633b      	str	r3, [r7, #48]	; 0x30
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e1c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	d00a      	beq.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e1ce:	4b6c      	ldr	r3, [pc, #432]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1d2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800e1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1de:	4a68      	ldr	r2, [pc, #416]	; (800e380 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e1e0:	430b      	orrs	r3, r1
 800e1e2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	62b9      	str	r1, [r7, #40]	; 0x28
 800e1f0:	f003 0301 	and.w	r3, r3, #1
 800e1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	d011      	beq.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e204:	3308      	adds	r3, #8
 800e206:	2100      	movs	r1, #0
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 f99d 	bl	800f548 <RCCEx_PLL2_Config>
 800e20e:	4603      	mov	r3, r0
 800e210:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800e214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d003      	beq.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e21c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e220:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22c:	2100      	movs	r1, #0
 800e22e:	6239      	str	r1, [r7, #32]
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	627b      	str	r3, [r7, #36]	; 0x24
 800e236:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e23a:	460b      	mov	r3, r1
 800e23c:	4313      	orrs	r3, r2
 800e23e:	d011      	beq.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e244:	3308      	adds	r3, #8
 800e246:	2101      	movs	r1, #1
 800e248:	4618      	mov	r0, r3
 800e24a:	f001 f97d 	bl	800f548 <RCCEx_PLL2_Config>
 800e24e:	4603      	mov	r3, r0
 800e250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800e254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e25c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e260:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26c:	2100      	movs	r1, #0
 800e26e:	61b9      	str	r1, [r7, #24]
 800e270:	f003 0304 	and.w	r3, r3, #4
 800e274:	61fb      	str	r3, [r7, #28]
 800e276:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e27a:	460b      	mov	r3, r1
 800e27c:	4313      	orrs	r3, r2
 800e27e:	d011      	beq.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e284:	3308      	adds	r3, #8
 800e286:	2102      	movs	r1, #2
 800e288:	4618      	mov	r0, r3
 800e28a:	f001 f95d 	bl	800f548 <RCCEx_PLL2_Config>
 800e28e:	4603      	mov	r3, r0
 800e290:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800e294:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e29c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e2a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	6139      	str	r1, [r7, #16]
 800e2b0:	f003 0308 	and.w	r3, r3, #8
 800e2b4:	617b      	str	r3, [r7, #20]
 800e2b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	d011      	beq.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2c4:	3328      	adds	r3, #40	; 0x28
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f001 f9ef 	bl	800f6ac <RCCEx_PLL3_Config>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800e2d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d003      	beq.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e2e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	f003 0310 	and.w	r3, r3, #16
 800e2f4:	60fb      	str	r3, [r7, #12]
 800e2f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	d011      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e304:	3328      	adds	r3, #40	; 0x28
 800e306:	2101      	movs	r1, #1
 800e308:	4618      	mov	r0, r3
 800e30a:	f001 f9cf 	bl	800f6ac <RCCEx_PLL3_Config>
 800e30e:	4603      	mov	r3, r0
 800e310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800e314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e31c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e320:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32c:	2100      	movs	r1, #0
 800e32e:	6039      	str	r1, [r7, #0]
 800e330:	f003 0320 	and.w	r3, r3, #32
 800e334:	607b      	str	r3, [r7, #4]
 800e336:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e33a:	460b      	mov	r3, r1
 800e33c:	4313      	orrs	r3, r2
 800e33e:	d011      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e344:	3328      	adds	r3, #40	; 0x28
 800e346:	2102      	movs	r1, #2
 800e348:	4618      	mov	r0, r3
 800e34a:	f001 f9af 	bl	800f6ac <RCCEx_PLL3_Config>
 800e34e:	4603      	mov	r3, r0
 800e350:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800e354:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e35c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800e360:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800e364:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800e36c:	2300      	movs	r3, #0
 800e36e:	e000      	b.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800e370:	2301      	movs	r3, #1
}
 800e372:	4618      	mov	r0, r3
 800e374:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800e378:	46bd      	mov	sp, r7
 800e37a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e37e:	bf00      	nop
 800e380:	58024400 	.word	0x58024400

0800e384 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b090      	sub	sp, #64	; 0x40
 800e388:	af00      	add	r7, sp, #0
 800e38a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e392:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e396:	430b      	orrs	r3, r1
 800e398:	f040 8094 	bne.w	800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e39c:	4b9b      	ldr	r3, [pc, #620]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e39e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3a0:	f003 0307 	and.w	r3, r3, #7
 800e3a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a8:	2b04      	cmp	r3, #4
 800e3aa:	f200 8087 	bhi.w	800e4bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e3ae:	a201      	add	r2, pc, #4	; (adr r2, 800e3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b4:	0800e3c9 	.word	0x0800e3c9
 800e3b8:	0800e3f1 	.word	0x0800e3f1
 800e3bc:	0800e419 	.word	0x0800e419
 800e3c0:	0800e4b5 	.word	0x0800e4b5
 800e3c4:	0800e441 	.word	0x0800e441
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e3c8:	4b90      	ldr	r3, [pc, #576]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3d4:	d108      	bne.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e3d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f000 ff62 	bl	800f2a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3e4:	f000 bc93 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ec:	f000 bc8f 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e3f0:	4b86      	ldr	r3, [pc, #536]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e3f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3fc:	d108      	bne.n	800e410 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3fe:	f107 0318 	add.w	r3, r7, #24
 800e402:	4618      	mov	r0, r3
 800e404:	f000 fca6 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e40c:	f000 bc7f 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e410:	2300      	movs	r3, #0
 800e412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e414:	f000 bc7b 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e418:	4b7c      	ldr	r3, [pc, #496]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e424:	d108      	bne.n	800e438 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e426:	f107 030c 	add.w	r3, r7, #12
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 fde6 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e434:	f000 bc6b 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e43c:	f000 bc67 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e440:	4b72      	ldr	r3, [pc, #456]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e448:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e44a:	4b70      	ldr	r3, [pc, #448]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f003 0304 	and.w	r3, r3, #4
 800e452:	2b04      	cmp	r3, #4
 800e454:	d10c      	bne.n	800e470 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d109      	bne.n	800e470 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e45c:	4b6b      	ldr	r3, [pc, #428]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	08db      	lsrs	r3, r3, #3
 800e462:	f003 0303 	and.w	r3, r3, #3
 800e466:	4a6a      	ldr	r2, [pc, #424]	; (800e610 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800e468:	fa22 f303 	lsr.w	r3, r2, r3
 800e46c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e46e:	e01f      	b.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e470:	4b66      	ldr	r3, [pc, #408]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e47c:	d106      	bne.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e484:	d102      	bne.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e486:	4b63      	ldr	r3, [pc, #396]	; (800e614 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800e488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e48a:	e011      	b.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e48c:	4b5f      	ldr	r3, [pc, #380]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e498:	d106      	bne.n	800e4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e49c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4a0:	d102      	bne.n	800e4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e4a2:	4b5d      	ldr	r3, [pc, #372]	; (800e618 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4a6:	e003      	b.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e4ac:	f000 bc2f 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e4b0:	f000 bc2d 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e4b4:	4b59      	ldr	r3, [pc, #356]	; (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4b8:	f000 bc29 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c0:	f000 bc25 	b.w	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e4cc:	430b      	orrs	r3, r1
 800e4ce:	f040 80a7 	bne.w	800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e4d2:	4b4e      	ldr	r3, [pc, #312]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e4da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4e2:	d054      	beq.n	800e58e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4ea:	f200 808b 	bhi.w	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e4f4:	f000 8083 	beq.w	800e5fe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800e4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e4fe:	f200 8081 	bhi.w	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e508:	d02f      	beq.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e510:	d878      	bhi.n	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e514:	2b00      	cmp	r3, #0
 800e516:	d004      	beq.n	800e522 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800e518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e51e:	d012      	beq.n	800e546 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800e520:	e070      	b.n	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e522:	4b3a      	ldr	r3, [pc, #232]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e52a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e52e:	d107      	bne.n	800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e534:	4618      	mov	r0, r3
 800e536:	f000 feb5 	bl	800f2a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e53e:	e3e6      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e544:	e3e3      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e546:	4b31      	ldr	r3, [pc, #196]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e54e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e552:	d107      	bne.n	800e564 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e554:	f107 0318 	add.w	r3, r7, #24
 800e558:	4618      	mov	r0, r3
 800e55a:	f000 fbfb 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e562:	e3d4      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e564:	2300      	movs	r3, #0
 800e566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e568:	e3d1      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e56a:	4b28      	ldr	r3, [pc, #160]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e576:	d107      	bne.n	800e588 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e578:	f107 030c 	add.w	r3, r7, #12
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 fd3d 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e586:	e3c2      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e58c:	e3bf      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e58e:	4b1f      	ldr	r3, [pc, #124]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e596:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e598:	4b1c      	ldr	r3, [pc, #112]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f003 0304 	and.w	r3, r3, #4
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	d10c      	bne.n	800e5be <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800e5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d109      	bne.n	800e5be <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5aa:	4b18      	ldr	r3, [pc, #96]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	08db      	lsrs	r3, r3, #3
 800e5b0:	f003 0303 	and.w	r3, r3, #3
 800e5b4:	4a16      	ldr	r2, [pc, #88]	; (800e610 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800e5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5bc:	e01e      	b.n	800e5fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e5be:	4b13      	ldr	r3, [pc, #76]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ca:	d106      	bne.n	800e5da <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800e5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5d2:	d102      	bne.n	800e5da <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e5d4:	4b0f      	ldr	r3, [pc, #60]	; (800e614 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800e5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5d8:	e010      	b.n	800e5fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e5da:	4b0c      	ldr	r3, [pc, #48]	; (800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5e6:	d106      	bne.n	800e5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800e5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5ee:	d102      	bne.n	800e5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e5f0:	4b09      	ldr	r3, [pc, #36]	; (800e618 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5f4:	e002      	b.n	800e5fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e5fa:	e388      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e5fc:	e387      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e5fe:	4b07      	ldr	r3, [pc, #28]	; (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e602:	e384      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e604:	2300      	movs	r3, #0
 800e606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e608:	e381      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e60a:	bf00      	nop
 800e60c:	58024400 	.word	0x58024400
 800e610:	03d09000 	.word	0x03d09000
 800e614:	003d0900 	.word	0x003d0900
 800e618:	017d7840 	.word	0x017d7840
 800e61c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e624:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e628:	430b      	orrs	r3, r1
 800e62a:	f040 809c 	bne.w	800e766 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e62e:	4b9e      	ldr	r3, [pc, #632]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e632:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e636:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e63e:	d054      	beq.n	800e6ea <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800e640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e646:	f200 808b 	bhi.w	800e760 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e650:	f000 8083 	beq.w	800e75a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e656:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e65a:	f200 8081 	bhi.w	800e760 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e664:	d02f      	beq.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800e666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e66c:	d878      	bhi.n	800e760 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e670:	2b00      	cmp	r3, #0
 800e672:	d004      	beq.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e67a:	d012      	beq.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800e67c:	e070      	b.n	800e760 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e67e:	4b8a      	ldr	r3, [pc, #552]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e68a:	d107      	bne.n	800e69c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e68c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e690:	4618      	mov	r0, r3
 800e692:	f000 fe07 	bl	800f2a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e69a:	e338      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e69c:	2300      	movs	r3, #0
 800e69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6a0:	e335      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e6a2:	4b81      	ldr	r3, [pc, #516]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e6ae:	d107      	bne.n	800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6b0:	f107 0318 	add.w	r3, r7, #24
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 fb4d 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6be:	e326      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6c4:	e323      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e6c6:	4b78      	ldr	r3, [pc, #480]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6d2:	d107      	bne.n	800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6d4:	f107 030c 	add.w	r3, r7, #12
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 fc8f 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6e2:	e314      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6e8:	e311      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e6ea:	4b6f      	ldr	r3, [pc, #444]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e6f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e6f4:	4b6c      	ldr	r3, [pc, #432]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f003 0304 	and.w	r3, r3, #4
 800e6fc:	2b04      	cmp	r3, #4
 800e6fe:	d10c      	bne.n	800e71a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800e700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e702:	2b00      	cmp	r3, #0
 800e704:	d109      	bne.n	800e71a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e706:	4b68      	ldr	r3, [pc, #416]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	08db      	lsrs	r3, r3, #3
 800e70c:	f003 0303 	and.w	r3, r3, #3
 800e710:	4a66      	ldr	r2, [pc, #408]	; (800e8ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800e712:	fa22 f303 	lsr.w	r3, r2, r3
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e718:	e01e      	b.n	800e758 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e71a:	4b63      	ldr	r3, [pc, #396]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e726:	d106      	bne.n	800e736 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800e728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e72a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e72e:	d102      	bne.n	800e736 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e730:	4b5f      	ldr	r3, [pc, #380]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800e732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e734:	e010      	b.n	800e758 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e736:	4b5c      	ldr	r3, [pc, #368]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e73e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e742:	d106      	bne.n	800e752 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800e744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e74a:	d102      	bne.n	800e752 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e74c:	4b59      	ldr	r3, [pc, #356]	; (800e8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e74e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e750:	e002      	b.n	800e758 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e752:	2300      	movs	r3, #0
 800e754:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e756:	e2da      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e758:	e2d9      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e75a:	4b57      	ldr	r3, [pc, #348]	; (800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75e:	e2d6      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e760:	2300      	movs	r3, #0
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e764:	e2d3      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e76a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e76e:	430b      	orrs	r3, r1
 800e770:	f040 80a7 	bne.w	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e774:	4b4c      	ldr	r3, [pc, #304]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e778:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e77c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e784:	d055      	beq.n	800e832 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e78c:	f200 8096 	bhi.w	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e792:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e796:	f000 8084 	beq.w	800e8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e7a0:	f200 808c 	bhi.w	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7aa:	d030      	beq.n	800e80e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800e7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7b2:	f200 8083 	bhi.w	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d004      	beq.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7c2:	d012      	beq.n	800e7ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800e7c4:	e07a      	b.n	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e7c6:	4b38      	ldr	r3, [pc, #224]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e7d2:	d107      	bne.n	800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 fd63 	bl	800f2a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7e2:	e294      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7e8:	e291      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e7ea:	4b2f      	ldr	r3, [pc, #188]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7f6:	d107      	bne.n	800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7f8:	f107 0318 	add.w	r3, r7, #24
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f000 faa9 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e806:	e282      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e808:	2300      	movs	r3, #0
 800e80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e80c:	e27f      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e80e:	4b26      	ldr	r3, [pc, #152]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e81a:	d107      	bne.n	800e82c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e81c:	f107 030c 	add.w	r3, r7, #12
 800e820:	4618      	mov	r0, r3
 800e822:	f000 fbeb 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e82a:	e270      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e830:	e26d      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e832:	4b1d      	ldr	r3, [pc, #116]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e83a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e83c:	4b1a      	ldr	r3, [pc, #104]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f003 0304 	and.w	r3, r3, #4
 800e844:	2b04      	cmp	r3, #4
 800e846:	d10c      	bne.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800e848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d109      	bne.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e84e:	4b16      	ldr	r3, [pc, #88]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	08db      	lsrs	r3, r3, #3
 800e854:	f003 0303 	and.w	r3, r3, #3
 800e858:	4a14      	ldr	r2, [pc, #80]	; (800e8ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800e85a:	fa22 f303 	lsr.w	r3, r2, r3
 800e85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e860:	e01e      	b.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e862:	4b11      	ldr	r3, [pc, #68]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e86e:	d106      	bne.n	800e87e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800e870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e876:	d102      	bne.n	800e87e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e878:	4b0d      	ldr	r3, [pc, #52]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800e87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e87c:	e010      	b.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e87e:	4b0a      	ldr	r3, [pc, #40]	; (800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e88a:	d106      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800e88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e892:	d102      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e894:	4b07      	ldr	r3, [pc, #28]	; (800e8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e898:	e002      	b.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e89e:	e236      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e8a0:	e235      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e8a2:	4b05      	ldr	r3, [pc, #20]	; (800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a6:	e232      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e8a8:	58024400 	.word	0x58024400
 800e8ac:	03d09000 	.word	0x03d09000
 800e8b0:	003d0900 	.word	0x003d0900
 800e8b4:	017d7840 	.word	0x017d7840
 800e8b8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8c0:	e225      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8c6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e8ca:	430b      	orrs	r3, r1
 800e8cc:	f040 8085 	bne.w	800e9da <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e8d0:	4b9c      	ldr	r3, [pc, #624]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8d4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e8d8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e8e0:	d06b      	beq.n	800e9ba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e8e8:	d874      	bhi.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e8f0:	d056      	beq.n	800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e8f8:	d86c      	bhi.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e900:	d03b      	beq.n	800e97a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800e902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e908:	d864      	bhi.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e910:	d021      	beq.n	800e956 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e918:	d85c      	bhi.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d004      	beq.n	800e92a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e926:	d004      	beq.n	800e932 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800e928:	e054      	b.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e92a:	f7fe fb33 	bl	800cf94 <HAL_RCC_GetPCLK1Freq>
 800e92e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e930:	e1ed      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e932:	4b84      	ldr	r3, [pc, #528]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e93a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e93e:	d107      	bne.n	800e950 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e940:	f107 0318 	add.w	r3, r7, #24
 800e944:	4618      	mov	r0, r3
 800e946:	f000 fa05 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e94e:	e1de      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e954:	e1db      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e956:	4b7b      	ldr	r3, [pc, #492]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e95e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e962:	d107      	bne.n	800e974 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e964:	f107 030c 	add.w	r3, r7, #12
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 fb47 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e972:	e1cc      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e974:	2300      	movs	r3, #0
 800e976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e978:	e1c9      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e97a:	4b72      	ldr	r3, [pc, #456]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f003 0304 	and.w	r3, r3, #4
 800e982:	2b04      	cmp	r3, #4
 800e984:	d109      	bne.n	800e99a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e986:	4b6f      	ldr	r3, [pc, #444]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	08db      	lsrs	r3, r3, #3
 800e98c:	f003 0303 	and.w	r3, r3, #3
 800e990:	4a6d      	ldr	r2, [pc, #436]	; (800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e992:	fa22 f303 	lsr.w	r3, r2, r3
 800e996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e998:	e1b9      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e99e:	e1b6      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e9a0:	4b68      	ldr	r3, [pc, #416]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9ac:	d102      	bne.n	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800e9ae:	4b67      	ldr	r3, [pc, #412]	; (800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9b2:	e1ac      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9b8:	e1a9      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e9ba:	4b62      	ldr	r3, [pc, #392]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9c6:	d102      	bne.n	800e9ce <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800e9c8:	4b61      	ldr	r3, [pc, #388]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9cc:	e19f      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9d2:	e19c      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9d8:	e199      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e9da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9de:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e9e2:	430b      	orrs	r3, r1
 800e9e4:	d173      	bne.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e9e6:	4b57      	ldr	r3, [pc, #348]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e9e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e9ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9f6:	d02f      	beq.n	800ea58 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800e9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9fe:	d863      	bhi.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d004      	beq.n	800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea0c:	d012      	beq.n	800ea34 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ea0e:	e05b      	b.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ea10:	4b4c      	ldr	r3, [pc, #304]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea1c:	d107      	bne.n	800ea2e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea1e:	f107 0318 	add.w	r3, r7, #24
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 f996 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea2c:	e16f      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea32:	e16c      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ea34:	4b43      	ldr	r3, [pc, #268]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea40:	d107      	bne.n	800ea52 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea42:	f107 030c 	add.w	r3, r7, #12
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 fad8 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea50:	e15d      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea56:	e15a      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ea58:	4b3a      	ldr	r3, [pc, #232]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ea5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ea60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ea62:	4b38      	ldr	r3, [pc, #224]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f003 0304 	and.w	r3, r3, #4
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d10c      	bne.n	800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ea6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d109      	bne.n	800ea88 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea74:	4b33      	ldr	r3, [pc, #204]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	08db      	lsrs	r3, r3, #3
 800ea7a:	f003 0303 	and.w	r3, r3, #3
 800ea7e:	4a32      	ldr	r2, [pc, #200]	; (800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ea80:	fa22 f303 	lsr.w	r3, r2, r3
 800ea84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea86:	e01e      	b.n	800eac6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ea88:	4b2e      	ldr	r3, [pc, #184]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea94:	d106      	bne.n	800eaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ea96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea9c:	d102      	bne.n	800eaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ea9e:	4b2b      	ldr	r3, [pc, #172]	; (800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800eaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eaa2:	e010      	b.n	800eac6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eaa4:	4b27      	ldr	r3, [pc, #156]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eab0:	d106      	bne.n	800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800eab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eab8:	d102      	bne.n	800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eaba:	4b25      	ldr	r3, [pc, #148]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800eabc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eabe:	e002      	b.n	800eac6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800eac4:	e123      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eac6:	e122      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eacc:	e11f      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800eace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ead2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ead6:	430b      	orrs	r3, r1
 800ead8:	d13c      	bne.n	800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800eada:	4b1a      	ldr	r3, [pc, #104]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800eadc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eae2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800eae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d004      	beq.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800eaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaf0:	d012      	beq.n	800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800eaf2:	e023      	b.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eaf4:	4b13      	ldr	r3, [pc, #76]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eafc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb00:	d107      	bne.n	800eb12 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb06:	4618      	mov	r0, r3
 800eb08:	f000 fbcc 	bl	800f2a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb10:	e0fd      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb16:	e0fa      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb18:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eb24:	d107      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb26:	f107 0318 	add.w	r3, r7, #24
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f000 f912 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb34:	e0eb      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb3a:	e0e8      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb40:	e0e5      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800eb42:	bf00      	nop
 800eb44:	58024400 	.word	0x58024400
 800eb48:	03d09000 	.word	0x03d09000
 800eb4c:	003d0900 	.word	0x003d0900
 800eb50:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800eb54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb58:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	f040 8085 	bne.w	800ec6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800eb62:	4b6d      	ldr	r3, [pc, #436]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800eb64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb66:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800eb6a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb72:	d06b      	beq.n	800ec4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800eb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb7a:	d874      	bhi.n	800ec66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800eb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb82:	d056      	beq.n	800ec32 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800eb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb8a:	d86c      	bhi.n	800ec66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800eb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eb92:	d03b      	beq.n	800ec0c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800eb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800eb9a:	d864      	bhi.n	800ec66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eba2:	d021      	beq.n	800ebe8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebaa:	d85c      	bhi.n	800ec66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d004      	beq.n	800ebbc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ebb8:	d004      	beq.n	800ebc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ebba:	e054      	b.n	800ec66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ebbc:	f000 f8b4 	bl	800ed28 <HAL_RCCEx_GetD3PCLK1Freq>
 800ebc0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebc2:	e0a4      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ebc4:	4b54      	ldr	r3, [pc, #336]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ebcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ebd0:	d107      	bne.n	800ebe2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebd2:	f107 0318 	add.w	r3, r7, #24
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 f8bc 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ebe0:	e095      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebe6:	e092      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ebe8:	4b4b      	ldr	r3, [pc, #300]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebf4:	d107      	bne.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebf6:	f107 030c 	add.w	r3, r7, #12
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f000 f9fe 	bl	800effc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec04:	e083      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec0a:	e080      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ec0c:	4b42      	ldr	r3, [pc, #264]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f003 0304 	and.w	r3, r3, #4
 800ec14:	2b04      	cmp	r3, #4
 800ec16:	d109      	bne.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec18:	4b3f      	ldr	r3, [pc, #252]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	08db      	lsrs	r3, r3, #3
 800ec1e:	f003 0303 	and.w	r3, r3, #3
 800ec22:	4a3e      	ldr	r2, [pc, #248]	; (800ed1c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ec24:	fa22 f303 	lsr.w	r3, r2, r3
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec2a:	e070      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec30:	e06d      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ec32:	4b39      	ldr	r3, [pc, #228]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec3e:	d102      	bne.n	800ec46 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ec40:	4b37      	ldr	r3, [pc, #220]	; (800ed20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ec42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec44:	e063      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ec46:	2300      	movs	r3, #0
 800ec48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec4a:	e060      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ec4c:	4b32      	ldr	r3, [pc, #200]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ec58:	d102      	bne.n	800ec60 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ec5a:	4b32      	ldr	r3, [pc, #200]	; (800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ec5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec5e:	e056      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ec60:	2300      	movs	r3, #0
 800ec62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec64:	e053      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec6a:	e050      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ec6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec70:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ec74:	430b      	orrs	r3, r1
 800ec76:	d148      	bne.n	800ed0a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ec78:	4b27      	ldr	r3, [pc, #156]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ec7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec80:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ec82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec88:	d02a      	beq.n	800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec90:	d838      	bhi.n	800ed04 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ec92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d004      	beq.n	800eca2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ec98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec9e:	d00d      	beq.n	800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800eca0:	e030      	b.n	800ed04 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eca2:	4b1d      	ldr	r3, [pc, #116]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ecae:	d102      	bne.n	800ecb6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ecb0:	4b1c      	ldr	r3, [pc, #112]	; (800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ecb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecb4:	e02b      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecba:	e028      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ecbc:	4b16      	ldr	r3, [pc, #88]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ecc8:	d107      	bne.n	800ecda <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 fae8 	bl	800f2a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecd8:	e019      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecde:	e016      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ece0:	4b0d      	ldr	r3, [pc, #52]	; (800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ece8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ecec:	d107      	bne.n	800ecfe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecee:	f107 0318 	add.w	r3, r7, #24
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 f82e 	bl	800ed54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecfc:	e007      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed02:	e004      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed08:	e001      	b.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ed0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3740      	adds	r7, #64	; 0x40
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	58024400 	.word	0x58024400
 800ed1c:	03d09000 	.word	0x03d09000
 800ed20:	003d0900 	.word	0x003d0900
 800ed24:	017d7840 	.word	0x017d7840

0800ed28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ed2c:	f7fe f902 	bl	800cf34 <HAL_RCC_GetHCLKFreq>
 800ed30:	4602      	mov	r2, r0
 800ed32:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ed34:	6a1b      	ldr	r3, [r3, #32]
 800ed36:	091b      	lsrs	r3, r3, #4
 800ed38:	f003 0307 	and.w	r3, r3, #7
 800ed3c:	4904      	ldr	r1, [pc, #16]	; (800ed50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ed3e:	5ccb      	ldrb	r3, [r1, r3]
 800ed40:	f003 031f 	and.w	r3, r3, #31
 800ed44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	58024400 	.word	0x58024400
 800ed50:	0802b9ec 	.word	0x0802b9ec

0800ed54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b089      	sub	sp, #36	; 0x24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ed5c:	4ba1      	ldr	r3, [pc, #644]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed60:	f003 0303 	and.w	r3, r3, #3
 800ed64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ed66:	4b9f      	ldr	r3, [pc, #636]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed6a:	0b1b      	lsrs	r3, r3, #12
 800ed6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ed72:	4b9c      	ldr	r3, [pc, #624]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed76:	091b      	lsrs	r3, r3, #4
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ed7e:	4b99      	ldr	r3, [pc, #612]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed82:	08db      	lsrs	r3, r3, #3
 800ed84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed88:	693a      	ldr	r2, [r7, #16]
 800ed8a:	fb02 f303 	mul.w	r3, r2, r3
 800ed8e:	ee07 3a90 	vmov	s15, r3
 800ed92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 8111 	beq.w	800efc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	f000 8083 	beq.w	800eeb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	2b02      	cmp	r3, #2
 800edae:	f200 80a1 	bhi.w	800eef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d003      	beq.n	800edc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d056      	beq.n	800ee6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800edbe:	e099      	b.n	800eef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edc0:	4b88      	ldr	r3, [pc, #544]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 0320 	and.w	r3, r3, #32
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d02d      	beq.n	800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800edcc:	4b85      	ldr	r3, [pc, #532]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	08db      	lsrs	r3, r3, #3
 800edd2:	f003 0303 	and.w	r3, r3, #3
 800edd6:	4a84      	ldr	r2, [pc, #528]	; (800efe8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800edd8:	fa22 f303 	lsr.w	r3, r2, r3
 800eddc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	ee07 3a90 	vmov	s15, r3
 800ede4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	ee07 3a90 	vmov	s15, r3
 800edee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800edf6:	4b7b      	ldr	r3, [pc, #492]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edfe:	ee07 3a90 	vmov	s15, r3
 800ee02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ee0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ee26:	e087      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	ee07 3a90 	vmov	s15, r3
 800ee2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800eff0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ee36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee3a:	4b6a      	ldr	r3, [pc, #424]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee42:	ee07 3a90 	vmov	s15, r3
 800ee46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ee52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee6a:	e065      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	ee07 3a90 	vmov	s15, r3
 800ee72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ee7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee7e:	4b59      	ldr	r3, [pc, #356]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ee80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee86:	ee07 3a90 	vmov	s15, r3
 800ee8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee92:	eddf 5a56 	vldr	s11, [pc, #344]	; 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ee96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eeae:	e043      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	ee07 3a90 	vmov	s15, r3
 800eeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eeba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800eff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800eebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eec2:	4b48      	ldr	r3, [pc, #288]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeca:	ee07 3a90 	vmov	s15, r3
 800eece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eed2:	ed97 6a03 	vldr	s12, [r7, #12]
 800eed6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800eeda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eeea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eef2:	e021      	b.n	800ef38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	ee07 3a90 	vmov	s15, r3
 800eefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eefe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800eff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ef02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef06:	4b37      	ldr	r3, [pc, #220]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef0e:	ee07 3a90 	vmov	s15, r3
 800ef12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800efec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ef1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ef38:	4b2a      	ldr	r3, [pc, #168]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef3c:	0a5b      	lsrs	r3, r3, #9
 800ef3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef42:	ee07 3a90 	vmov	s15, r3
 800ef46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef5e:	ee17 2a90 	vmov	r2, s15
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ef66:	4b1f      	ldr	r3, [pc, #124]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6a:	0c1b      	lsrs	r3, r3, #16
 800ef6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef70:	ee07 3a90 	vmov	s15, r3
 800ef74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef8c:	ee17 2a90 	vmov	r2, s15
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ef94:	4b13      	ldr	r3, [pc, #76]	; (800efe4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef98:	0e1b      	lsrs	r3, r3, #24
 800ef9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef9e:	ee07 3a90 	vmov	s15, r3
 800efa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800efaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efae:	edd7 6a07 	vldr	s13, [r7, #28]
 800efb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efba:	ee17 2a90 	vmov	r2, s15
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800efc2:	e008      	b.n	800efd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	609a      	str	r2, [r3, #8]
}
 800efd6:	bf00      	nop
 800efd8:	3724      	adds	r7, #36	; 0x24
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	58024400 	.word	0x58024400
 800efe8:	03d09000 	.word	0x03d09000
 800efec:	46000000 	.word	0x46000000
 800eff0:	4c742400 	.word	0x4c742400
 800eff4:	4a742400 	.word	0x4a742400
 800eff8:	4bbebc20 	.word	0x4bbebc20

0800effc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800effc:	b480      	push	{r7}
 800effe:	b089      	sub	sp, #36	; 0x24
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f004:	4ba1      	ldr	r3, [pc, #644]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f008:	f003 0303 	and.w	r3, r3, #3
 800f00c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f00e:	4b9f      	ldr	r3, [pc, #636]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f012:	0d1b      	lsrs	r3, r3, #20
 800f014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f018:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f01a:	4b9c      	ldr	r3, [pc, #624]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f01e:	0a1b      	lsrs	r3, r3, #8
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f026:	4b99      	ldr	r3, [pc, #612]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f02a:	08db      	lsrs	r3, r3, #3
 800f02c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f030:	693a      	ldr	r2, [r7, #16]
 800f032:	fb02 f303 	mul.w	r3, r2, r3
 800f036:	ee07 3a90 	vmov	s15, r3
 800f03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f03e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 8111 	beq.w	800f26c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	f000 8083 	beq.w	800f158 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	2b02      	cmp	r3, #2
 800f056:	f200 80a1 	bhi.w	800f19c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d003      	beq.n	800f068 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d056      	beq.n	800f114 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f066:	e099      	b.n	800f19c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f068:	4b88      	ldr	r3, [pc, #544]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f003 0320 	and.w	r3, r3, #32
 800f070:	2b00      	cmp	r3, #0
 800f072:	d02d      	beq.n	800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f074:	4b85      	ldr	r3, [pc, #532]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	08db      	lsrs	r3, r3, #3
 800f07a:	f003 0303 	and.w	r3, r3, #3
 800f07e:	4a84      	ldr	r2, [pc, #528]	; (800f290 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f080:	fa22 f303 	lsr.w	r3, r2, r3
 800f084:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	ee07 3a90 	vmov	s15, r3
 800f08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	ee07 3a90 	vmov	s15, r3
 800f096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f09e:	4b7b      	ldr	r3, [pc, #492]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0a6:	ee07 3a90 	vmov	s15, r3
 800f0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f0ce:	e087      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	ee07 3a90 	vmov	s15, r3
 800f0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f298 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0e2:	4b6a      	ldr	r3, [pc, #424]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ea:	ee07 3a90 	vmov	s15, r3
 800f0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f10e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f112:	e065      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	ee07 3a90 	vmov	s15, r3
 800f11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f11e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f29c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f126:	4b59      	ldr	r3, [pc, #356]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f12e:	ee07 3a90 	vmov	s15, r3
 800f132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f136:	ed97 6a03 	vldr	s12, [r7, #12]
 800f13a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f156:	e043      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	ee07 3a90 	vmov	s15, r3
 800f15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f162:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f16a:	4b48      	ldr	r3, [pc, #288]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f172:	ee07 3a90 	vmov	s15, r3
 800f176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f17e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f19a:	e021      	b.n	800f1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	ee07 3a90 	vmov	s15, r3
 800f1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f29c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1ae:	4b37      	ldr	r3, [pc, #220]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1b6:	ee07 3a90 	vmov	s15, r3
 800f1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f294 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f1e0:	4b2a      	ldr	r3, [pc, #168]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e4:	0a5b      	lsrs	r3, r3, #9
 800f1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1ea:	ee07 3a90 	vmov	s15, r3
 800f1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f1f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f1fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800f1fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f206:	ee17 2a90 	vmov	r2, s15
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f20e:	4b1f      	ldr	r3, [pc, #124]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f212:	0c1b      	lsrs	r3, r3, #16
 800f214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f218:	ee07 3a90 	vmov	s15, r3
 800f21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f224:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f228:	edd7 6a07 	vldr	s13, [r7, #28]
 800f22c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f234:	ee17 2a90 	vmov	r2, s15
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f23c:	4b13      	ldr	r3, [pc, #76]	; (800f28c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f240:	0e1b      	lsrs	r3, r3, #24
 800f242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f246:	ee07 3a90 	vmov	s15, r3
 800f24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f256:	edd7 6a07 	vldr	s13, [r7, #28]
 800f25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f262:	ee17 2a90 	vmov	r2, s15
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f26a:	e008      	b.n	800f27e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	609a      	str	r2, [r3, #8]
}
 800f27e:	bf00      	nop
 800f280:	3724      	adds	r7, #36	; 0x24
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	58024400 	.word	0x58024400
 800f290:	03d09000 	.word	0x03d09000
 800f294:	46000000 	.word	0x46000000
 800f298:	4c742400 	.word	0x4c742400
 800f29c:	4a742400 	.word	0x4a742400
 800f2a0:	4bbebc20 	.word	0x4bbebc20

0800f2a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b089      	sub	sp, #36	; 0x24
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f2ac:	4ba0      	ldr	r3, [pc, #640]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b0:	f003 0303 	and.w	r3, r3, #3
 800f2b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f2b6:	4b9e      	ldr	r3, [pc, #632]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ba:	091b      	lsrs	r3, r3, #4
 800f2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f2c2:	4b9b      	ldr	r3, [pc, #620]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c6:	f003 0301 	and.w	r3, r3, #1
 800f2ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f2cc:	4b98      	ldr	r3, [pc, #608]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d0:	08db      	lsrs	r3, r3, #3
 800f2d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	fb02 f303 	mul.w	r3, r2, r3
 800f2dc:	ee07 3a90 	vmov	s15, r3
 800f2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f000 8111 	beq.w	800f512 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	2b02      	cmp	r3, #2
 800f2f4:	f000 8083 	beq.w	800f3fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	f200 80a1 	bhi.w	800f442 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d003      	beq.n	800f30e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d056      	beq.n	800f3ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f30c:	e099      	b.n	800f442 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f30e:	4b88      	ldr	r3, [pc, #544]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f003 0320 	and.w	r3, r3, #32
 800f316:	2b00      	cmp	r3, #0
 800f318:	d02d      	beq.n	800f376 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f31a:	4b85      	ldr	r3, [pc, #532]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	08db      	lsrs	r3, r3, #3
 800f320:	f003 0303 	and.w	r3, r3, #3
 800f324:	4a83      	ldr	r2, [pc, #524]	; (800f534 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f326:	fa22 f303 	lsr.w	r3, r2, r3
 800f32a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	ee07 3a90 	vmov	s15, r3
 800f332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	ee07 3a90 	vmov	s15, r3
 800f33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f344:	4b7a      	ldr	r3, [pc, #488]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f34c:	ee07 3a90 	vmov	s15, r3
 800f350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f354:	ed97 6a03 	vldr	s12, [r7, #12]
 800f358:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f538 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f35c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f370:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f374:	e087      	b.n	800f486 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	ee07 3a90 	vmov	s15, r3
 800f37c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f380:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f53c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f388:	4b69      	ldr	r3, [pc, #420]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f390:	ee07 3a90 	vmov	s15, r3
 800f394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f398:	ed97 6a03 	vldr	s12, [r7, #12]
 800f39c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f538 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f3a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3b8:	e065      	b.n	800f486 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	ee07 3a90 	vmov	s15, r3
 800f3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f540 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f3c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3cc:	4b58      	ldr	r3, [pc, #352]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3d4:	ee07 3a90 	vmov	s15, r3
 800f3d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f538 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f3e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3fc:	e043      	b.n	800f486 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	ee07 3a90 	vmov	s15, r3
 800f404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f408:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f544 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f40c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f410:	4b47      	ldr	r3, [pc, #284]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f418:	ee07 3a90 	vmov	s15, r3
 800f41c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f420:	ed97 6a03 	vldr	s12, [r7, #12]
 800f424:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f538 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f42c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f43c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f440:	e021      	b.n	800f486 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	ee07 3a90 	vmov	s15, r3
 800f448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f44c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f53c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f454:	4b36      	ldr	r3, [pc, #216]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45c:	ee07 3a90 	vmov	s15, r3
 800f460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f464:	ed97 6a03 	vldr	s12, [r7, #12]
 800f468:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f538 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f46c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f480:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f484:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f486:	4b2a      	ldr	r3, [pc, #168]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f48a:	0a5b      	lsrs	r3, r3, #9
 800f48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f490:	ee07 3a90 	vmov	s15, r3
 800f494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f49c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4ac:	ee17 2a90 	vmov	r2, s15
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f4b4:	4b1e      	ldr	r3, [pc, #120]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b8:	0c1b      	lsrs	r3, r3, #16
 800f4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4be:	ee07 3a90 	vmov	s15, r3
 800f4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f4ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4da:	ee17 2a90 	vmov	r2, s15
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f4e2:	4b13      	ldr	r3, [pc, #76]	; (800f530 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e6:	0e1b      	lsrs	r3, r3, #24
 800f4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ec:	ee07 3a90 	vmov	s15, r3
 800f4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f4f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f508:	ee17 2a90 	vmov	r2, s15
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f510:	e008      	b.n	800f524 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2200      	movs	r2, #0
 800f516:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2200      	movs	r2, #0
 800f522:	609a      	str	r2, [r3, #8]
}
 800f524:	bf00      	nop
 800f526:	3724      	adds	r7, #36	; 0x24
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr
 800f530:	58024400 	.word	0x58024400
 800f534:	03d09000 	.word	0x03d09000
 800f538:	46000000 	.word	0x46000000
 800f53c:	4c742400 	.word	0x4c742400
 800f540:	4a742400 	.word	0x4a742400
 800f544:	4bbebc20 	.word	0x4bbebc20

0800f548 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f552:	2300      	movs	r3, #0
 800f554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f556:	4b53      	ldr	r3, [pc, #332]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f55a:	f003 0303 	and.w	r3, r3, #3
 800f55e:	2b03      	cmp	r3, #3
 800f560:	d101      	bne.n	800f566 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	e099      	b.n	800f69a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f566:	4b4f      	ldr	r3, [pc, #316]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a4e      	ldr	r2, [pc, #312]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f56c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f572:	f7f8 f917 	bl	80077a4 <HAL_GetTick>
 800f576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f578:	e008      	b.n	800f58c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f57a:	f7f8 f913 	bl	80077a4 <HAL_GetTick>
 800f57e:	4602      	mov	r2, r0
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	1ad3      	subs	r3, r2, r3
 800f584:	2b02      	cmp	r3, #2
 800f586:	d901      	bls.n	800f58c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f588:	2303      	movs	r3, #3
 800f58a:	e086      	b.n	800f69a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f58c:	4b45      	ldr	r3, [pc, #276]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f594:	2b00      	cmp	r3, #0
 800f596:	d1f0      	bne.n	800f57a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f598:	4b42      	ldr	r3, [pc, #264]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f59c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	031b      	lsls	r3, r3, #12
 800f5a6:	493f      	ldr	r1, [pc, #252]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	628b      	str	r3, [r1, #40]	; 0x28
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	025b      	lsls	r3, r3, #9
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	431a      	orrs	r2, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	041b      	lsls	r3, r3, #16
 800f5ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f5ce:	431a      	orrs	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	061b      	lsls	r3, r3, #24
 800f5d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f5dc:	4931      	ldr	r1, [pc, #196]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f5e2:	4b30      	ldr	r3, [pc, #192]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	695b      	ldr	r3, [r3, #20]
 800f5ee:	492d      	ldr	r1, [pc, #180]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f5f4:	4b2b      	ldr	r3, [pc, #172]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f8:	f023 0220 	bic.w	r2, r3, #32
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	699b      	ldr	r3, [r3, #24]
 800f600:	4928      	ldr	r1, [pc, #160]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f602:	4313      	orrs	r3, r2
 800f604:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f606:	4b27      	ldr	r3, [pc, #156]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f60a:	4a26      	ldr	r2, [pc, #152]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f60c:	f023 0310 	bic.w	r3, r3, #16
 800f610:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f612:	4b24      	ldr	r3, [pc, #144]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f616:	4b24      	ldr	r3, [pc, #144]	; (800f6a8 <RCCEx_PLL2_Config+0x160>)
 800f618:	4013      	ands	r3, r2
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	69d2      	ldr	r2, [r2, #28]
 800f61e:	00d2      	lsls	r2, r2, #3
 800f620:	4920      	ldr	r1, [pc, #128]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f622:	4313      	orrs	r3, r2
 800f624:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f626:	4b1f      	ldr	r3, [pc, #124]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62a:	4a1e      	ldr	r2, [pc, #120]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f62c:	f043 0310 	orr.w	r3, r3, #16
 800f630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d106      	bne.n	800f646 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f638:	4b1a      	ldr	r3, [pc, #104]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f63c:	4a19      	ldr	r2, [pc, #100]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f63e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f642:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f644:	e00f      	b.n	800f666 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	2b01      	cmp	r3, #1
 800f64a:	d106      	bne.n	800f65a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f64c:	4b15      	ldr	r3, [pc, #84]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f650:	4a14      	ldr	r2, [pc, #80]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f656:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f658:	e005      	b.n	800f666 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f65a:	4b12      	ldr	r3, [pc, #72]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f65e:	4a11      	ldr	r2, [pc, #68]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f664:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f666:	4b0f      	ldr	r3, [pc, #60]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a0e      	ldr	r2, [pc, #56]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f66c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f672:	f7f8 f897 	bl	80077a4 <HAL_GetTick>
 800f676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f678:	e008      	b.n	800f68c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f67a:	f7f8 f893 	bl	80077a4 <HAL_GetTick>
 800f67e:	4602      	mov	r2, r0
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	1ad3      	subs	r3, r2, r3
 800f684:	2b02      	cmp	r3, #2
 800f686:	d901      	bls.n	800f68c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f688:	2303      	movs	r3, #3
 800f68a:	e006      	b.n	800f69a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f68c:	4b05      	ldr	r3, [pc, #20]	; (800f6a4 <RCCEx_PLL2_Config+0x15c>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f694:	2b00      	cmp	r3, #0
 800f696:	d0f0      	beq.n	800f67a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f698:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	58024400 	.word	0x58024400
 800f6a8:	ffff0007 	.word	0xffff0007

0800f6ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f6ba:	4b53      	ldr	r3, [pc, #332]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6be:	f003 0303 	and.w	r3, r3, #3
 800f6c2:	2b03      	cmp	r3, #3
 800f6c4:	d101      	bne.n	800f6ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e099      	b.n	800f7fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f6ca:	4b4f      	ldr	r3, [pc, #316]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4a4e      	ldr	r2, [pc, #312]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f6d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6d6:	f7f8 f865 	bl	80077a4 <HAL_GetTick>
 800f6da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f6dc:	e008      	b.n	800f6f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f6de:	f7f8 f861 	bl	80077a4 <HAL_GetTick>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d901      	bls.n	800f6f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f6ec:	2303      	movs	r3, #3
 800f6ee:	e086      	b.n	800f7fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f6f0:	4b45      	ldr	r3, [pc, #276]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1f0      	bne.n	800f6de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f6fc:	4b42      	ldr	r3, [pc, #264]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f700:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	051b      	lsls	r3, r3, #20
 800f70a:	493f      	ldr	r1, [pc, #252]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f70c:	4313      	orrs	r3, r2
 800f70e:	628b      	str	r3, [r1, #40]	; 0x28
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	3b01      	subs	r3, #1
 800f716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	3b01      	subs	r3, #1
 800f720:	025b      	lsls	r3, r3, #9
 800f722:	b29b      	uxth	r3, r3
 800f724:	431a      	orrs	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	3b01      	subs	r3, #1
 800f72c:	041b      	lsls	r3, r3, #16
 800f72e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f732:	431a      	orrs	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	3b01      	subs	r3, #1
 800f73a:	061b      	lsls	r3, r3, #24
 800f73c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f740:	4931      	ldr	r1, [pc, #196]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f742:	4313      	orrs	r3, r2
 800f744:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f746:	4b30      	ldr	r3, [pc, #192]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	695b      	ldr	r3, [r3, #20]
 800f752:	492d      	ldr	r1, [pc, #180]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f754:	4313      	orrs	r3, r2
 800f756:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f758:	4b2b      	ldr	r3, [pc, #172]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	699b      	ldr	r3, [r3, #24]
 800f764:	4928      	ldr	r1, [pc, #160]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f766:	4313      	orrs	r3, r2
 800f768:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f76a:	4b27      	ldr	r3, [pc, #156]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76e:	4a26      	ldr	r2, [pc, #152]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f776:	4b24      	ldr	r3, [pc, #144]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f77a:	4b24      	ldr	r3, [pc, #144]	; (800f80c <RCCEx_PLL3_Config+0x160>)
 800f77c:	4013      	ands	r3, r2
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	69d2      	ldr	r2, [r2, #28]
 800f782:	00d2      	lsls	r2, r2, #3
 800f784:	4920      	ldr	r1, [pc, #128]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f786:	4313      	orrs	r3, r2
 800f788:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f78a:	4b1f      	ldr	r3, [pc, #124]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78e:	4a1e      	ldr	r2, [pc, #120]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d106      	bne.n	800f7aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f79c:	4b1a      	ldr	r3, [pc, #104]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a0:	4a19      	ldr	r2, [pc, #100]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f7a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f7a8:	e00f      	b.n	800f7ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d106      	bne.n	800f7be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f7b0:	4b15      	ldr	r3, [pc, #84]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b4:	4a14      	ldr	r2, [pc, #80]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f7ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f7bc:	e005      	b.n	800f7ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f7be:	4b12      	ldr	r3, [pc, #72]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c2:	4a11      	ldr	r2, [pc, #68]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f7c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f7ca:	4b0f      	ldr	r3, [pc, #60]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4a0e      	ldr	r2, [pc, #56]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f7d6:	f7f7 ffe5 	bl	80077a4 <HAL_GetTick>
 800f7da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f7dc:	e008      	b.n	800f7f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f7de:	f7f7 ffe1 	bl	80077a4 <HAL_GetTick>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d901      	bls.n	800f7f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f7ec:	2303      	movs	r3, #3
 800f7ee:	e006      	b.n	800f7fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f7f0:	4b05      	ldr	r3, [pc, #20]	; (800f808 <RCCEx_PLL3_Config+0x15c>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d0f0      	beq.n	800f7de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	58024400 	.word	0x58024400
 800f80c:	ffff0007 	.word	0xffff0007

0800f810 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b08a      	sub	sp, #40	; 0x28
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	e075      	b.n	800f90e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d105      	bne.n	800f83a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7f7 fb2f 	bl	8006e98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2204      	movs	r2, #4
 800f83e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f868 	bl	800f918 <HAL_SD_InitCard>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d001      	beq.n	800f852 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f84e:	2301      	movs	r3, #1
 800f850:	e05d      	b.n	800f90e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800f852:	f107 0308 	add.w	r3, r7, #8
 800f856:	4619      	mov	r1, r3
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 fbed 	bl	8010038 <HAL_SD_GetCardStatus>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800f864:	2301      	movs	r3, #1
 800f866:	e052      	b.n	800f90e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800f868:	7e3b      	ldrb	r3, [r7, #24]
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800f86e:	7e7b      	ldrb	r3, [r7, #25]
 800f870:	b2db      	uxtb	r3, r3
 800f872:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d10a      	bne.n	800f892 <HAL_SD_Init+0x82>
 800f87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d102      	bne.n	800f888 <HAL_SD_Init+0x78>
 800f882:	6a3b      	ldr	r3, [r7, #32]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d004      	beq.n	800f892 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f88e:	659a      	str	r2, [r3, #88]	; 0x58
 800f890:	e00b      	b.n	800f8aa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f896:	2b01      	cmp	r3, #1
 800f898:	d104      	bne.n	800f8a4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f8a0:	659a      	str	r2, [r3, #88]	; 0x58
 800f8a2:	e002      	b.n	800f8aa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 fcab 	bl	801020c <HAL_SD_ConfigWideBusOperation>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d001      	beq.n	800f8c0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	e026      	b.n	800f90e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800f8c0:	f7f7 ff70 	bl	80077a4 <HAL_GetTick>
 800f8c4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800f8c6:	e011      	b.n	800f8ec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f8c8:	f7f7 ff6c 	bl	80077a4 <HAL_GetTick>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8d6:	d109      	bne.n	800f8ec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f8de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800f8e8:	2303      	movs	r3, #3
 800f8ea:	e010      	b.n	800f90e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 fd9f 	bl	8010430 <HAL_SD_GetCardState>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b04      	cmp	r3, #4
 800f8f6:	d1e7      	bne.n	800f8c8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2201      	movs	r2, #1
 800f908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800f90c:	2300      	movs	r3, #0
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3728      	adds	r7, #40	; 0x28
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
	...

0800f918 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f918:	b590      	push	{r4, r7, lr}
 800f91a:	b08d      	sub	sp, #52	; 0x34
 800f91c:	af02      	add	r7, sp, #8
 800f91e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f920:	2300      	movs	r3, #0
 800f922:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f924:	2300      	movs	r3, #0
 800f926:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f928:	2300      	movs	r3, #0
 800f92a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f92c:	2300      	movs	r3, #0
 800f92e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f930:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f934:	f04f 0100 	mov.w	r1, #0
 800f938:	f7fe fd24 	bl	800e384 <HAL_RCCEx_GetPeriphCLKFreq>
 800f93c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f940:	2b00      	cmp	r3, #0
 800f942:	d109      	bne.n	800f958 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2201      	movs	r2, #1
 800f948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f952:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f954:	2301      	movs	r3, #1
 800f956:	e070      	b.n	800fa3a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800f958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95a:	0a1b      	lsrs	r3, r3, #8
 800f95c:	4a39      	ldr	r2, [pc, #228]	; (800fa44 <HAL_SD_InitCard+0x12c>)
 800f95e:	fba2 2303 	umull	r2, r3, r2, r3
 800f962:	091b      	lsrs	r3, r3, #4
 800f964:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681c      	ldr	r4, [r3, #0]
 800f96a:	466a      	mov	r2, sp
 800f96c:	f107 0318 	add.w	r3, r7, #24
 800f970:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f974:	e882 0003 	stmia.w	r2, {r0, r1}
 800f978:	f107 030c 	add.w	r3, r7, #12
 800f97c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f97e:	4620      	mov	r0, r4
 800f980:	f001 fc1a 	bl	80111b8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4618      	mov	r0, r3
 800f98a:	f001 fc4c 	bl	8011226 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d005      	beq.n	800f9a0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f99e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d007      	beq.n	800f9b6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800f9a6:	4a28      	ldr	r2, [pc, #160]	; (800fa48 <HAL_SD_InitCard+0x130>)
 800f9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f7 ff03 	bl	80077bc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fe28 	bl	801060c <SD_PowerON>
 800f9bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f9be:	6a3b      	ldr	r3, [r7, #32]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00b      	beq.n	800f9dc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	431a      	orrs	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e02e      	b.n	800fa3a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 fd47 	bl	8010470 <SD_InitCard>
 800f9e2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f9e4:	6a3b      	ldr	r3, [r7, #32]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00b      	beq.n	800fa02 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9f6:	6a3b      	ldr	r3, [r7, #32]
 800f9f8:	431a      	orrs	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e01b      	b.n	800fa3a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f001 fca0 	bl	8011350 <SDMMC_CmdBlockLength>
 800fa10:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fa12:	6a3b      	ldr	r3, [r7, #32]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00f      	beq.n	800fa38 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a0b      	ldr	r2, [pc, #44]	; (800fa4c <HAL_SD_InitCard+0x134>)
 800fa1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	431a      	orrs	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800fa34:	2301      	movs	r3, #1
 800fa36:	e000      	b.n	800fa3a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	372c      	adds	r7, #44	; 0x2c
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd90      	pop	{r4, r7, pc}
 800fa42:	bf00      	nop
 800fa44:	014f8b59 	.word	0x014f8b59
 800fa48:	00012110 	.word	0x00012110
 800fa4c:	1fe00fff 	.word	0x1fe00fff

0800fa50 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b08c      	sub	sp, #48	; 0x30
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
 800fa5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d107      	bne.n	800fa78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fa74:	2301      	movs	r3, #1
 800fa76:	e08d      	b.n	800fb94 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	f040 8086 	bne.w	800fb92 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fa8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	441a      	add	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d907      	bls.n	800faaa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e074      	b.n	800fb94 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2203      	movs	r2, #3
 800faae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2200      	movs	r2, #0
 800fab8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	025a      	lsls	r2, r3, #9
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800facc:	2b01      	cmp	r3, #1
 800face:	d002      	beq.n	800fad6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800fad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad2:	025b      	lsls	r3, r3, #9
 800fad4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fad6:	f04f 33ff 	mov.w	r3, #4294967295
 800fada:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	025b      	lsls	r3, r3, #9
 800fae0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fae2:	2390      	movs	r3, #144	; 0x90
 800fae4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fae6:	2302      	movs	r3, #2
 800fae8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800faea:	2300      	movs	r3, #0
 800faec:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800faee:	2300      	movs	r3, #0
 800faf0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f107 0210 	add.w	r2, r7, #16
 800fafa:	4611      	mov	r1, r2
 800fafc:	4618      	mov	r0, r3
 800fafe:	f001 fbfb 	bl	80112f8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	68da      	ldr	r2, [r3, #12]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb10:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	68ba      	ldr	r2, [r7, #8]
 800fb18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d90a      	bls.n	800fb3e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2282      	movs	r2, #130	; 0x82
 800fb2c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb34:	4618      	mov	r0, r3
 800fb36:	f001 fc51 	bl	80113dc <SDMMC_CmdReadMultiBlock>
 800fb3a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fb3c:	e009      	b.n	800fb52 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2281      	movs	r2, #129	; 0x81
 800fb42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f001 fc23 	bl	8011396 <SDMMC_CmdReadSingleBlock>
 800fb50:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800fb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d012      	beq.n	800fb7e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a0f      	ldr	r2, [pc, #60]	; (800fb9c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800fb5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	431a      	orrs	r2, r3
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e00a      	b.n	800fb94 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800fb8c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e000      	b.n	800fb94 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800fb92:	2302      	movs	r3, #2
  }
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3730      	adds	r7, #48	; 0x30
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	1fe00fff 	.word	0x1fe00fff

0800fba0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08c      	sub	sp, #48	; 0x30
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d107      	bne.n	800fbc8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	e08d      	b.n	800fce4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	f040 8086 	bne.w	800fce2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fbdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	441a      	add	r2, r3
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d907      	bls.n	800fbfa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	e074      	b.n	800fce4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2203      	movs	r2, #3
 800fbfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2200      	movs	r2, #0
 800fc08:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	025a      	lsls	r2, r3, #9
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d002      	beq.n	800fc26 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc22:	025b      	lsls	r3, r3, #9
 800fc24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fc26:	f04f 33ff 	mov.w	r3, #4294967295
 800fc2a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	025b      	lsls	r3, r3, #9
 800fc30:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fc32:	2390      	movs	r3, #144	; 0x90
 800fc34:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800fc36:	2300      	movs	r3, #0
 800fc38:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f107 0210 	add.w	r2, r7, #16
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f001 fb53 	bl	80112f8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	68da      	ldr	r2, [r3, #12]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc60:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d90a      	bls.n	800fc8e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	22a0      	movs	r2, #160	; 0xa0
 800fc7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc84:	4618      	mov	r0, r3
 800fc86:	f001 fbef 	bl	8011468 <SDMMC_CmdWriteMultiBlock>
 800fc8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800fc8c:	e009      	b.n	800fca2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2290      	movs	r2, #144	; 0x90
 800fc92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f001 fbc1 	bl	8011422 <SDMMC_CmdWriteSingleBlock>
 800fca0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d012      	beq.n	800fcce <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a0f      	ldr	r2, [pc, #60]	; (800fcec <HAL_SD_WriteBlocks_DMA+0x14c>)
 800fcae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	431a      	orrs	r2, r3
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800fcca:	2301      	movs	r3, #1
 800fccc:	e00a      	b.n	800fce4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800fcdc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800fcde:	2300      	movs	r3, #0
 800fce0:	e000      	b.n	800fce4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800fce2:	2302      	movs	r3, #2
  }
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3730      	adds	r7, #48	; 0x30
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	1fe00fff 	.word	0x1fe00fff

0800fcf0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcfe:	0f9b      	lsrs	r3, r3, #30
 800fd00:	b2da      	uxtb	r2, r3
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd0a:	0e9b      	lsrs	r3, r3, #26
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	f003 030f 	and.w	r3, r3, #15
 800fd12:	b2da      	uxtb	r2, r3
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd1c:	0e1b      	lsrs	r3, r3, #24
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f003 0303 	and.w	r3, r3, #3
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd2e:	0c1b      	lsrs	r3, r3, #16
 800fd30:	b2da      	uxtb	r2, r3
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd3a:	0a1b      	lsrs	r3, r3, #8
 800fd3c:	b2da      	uxtb	r2, r3
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd46:	b2da      	uxtb	r2, r3
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd50:	0d1b      	lsrs	r3, r3, #20
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd5c:	0c1b      	lsrs	r3, r3, #16
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	f003 030f 	and.w	r3, r3, #15
 800fd64:	b2da      	uxtb	r2, r3
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd6e:	0bdb      	lsrs	r3, r3, #15
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd80:	0b9b      	lsrs	r3, r3, #14
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	f003 0301 	and.w	r3, r3, #1
 800fd88:	b2da      	uxtb	r2, r3
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fd92:	0b5b      	lsrs	r3, r3, #13
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	f003 0301 	and.w	r3, r3, #1
 800fd9a:	b2da      	uxtb	r2, r3
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fda4:	0b1b      	lsrs	r3, r3, #12
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	f003 0301 	and.w	r3, r3, #1
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d163      	bne.n	800fe88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fdc4:	009a      	lsls	r2, r3, #2
 800fdc6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800fdca:	4013      	ands	r3, r2
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800fdd0:	0f92      	lsrs	r2, r2, #30
 800fdd2:	431a      	orrs	r2, r3
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fddc:	0edb      	lsrs	r3, r3, #27
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	f003 0307 	and.w	r3, r3, #7
 800fde4:	b2da      	uxtb	r2, r3
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdee:	0e1b      	lsrs	r3, r3, #24
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	f003 0307 	and.w	r3, r3, #7
 800fdf6:	b2da      	uxtb	r2, r3
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe00:	0d5b      	lsrs	r3, r3, #21
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	f003 0307 	and.w	r3, r3, #7
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe12:	0c9b      	lsrs	r3, r3, #18
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	f003 0307 	and.w	r3, r3, #7
 800fe1a:	b2da      	uxtb	r2, r3
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe24:	0bdb      	lsrs	r3, r3, #15
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	f003 0307 	and.w	r3, r3, #7
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	7e1b      	ldrb	r3, [r3, #24]
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	f003 0307 	and.w	r3, r3, #7
 800fe46:	3302      	adds	r3, #2
 800fe48:	2201      	movs	r2, #1
 800fe4a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800fe52:	fb03 f202 	mul.w	r2, r3, r2
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	7a1b      	ldrb	r3, [r3, #8]
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	f003 030f 	and.w	r3, r3, #15
 800fe64:	2201      	movs	r2, #1
 800fe66:	409a      	lsls	r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800fe74:	0a52      	lsrs	r2, r2, #9
 800fe76:	fb03 f202 	mul.w	r2, r3, r2
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe84:	655a      	str	r2, [r3, #84]	; 0x54
 800fe86:	e031      	b.n	800feec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d11d      	bne.n	800fecc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe94:	041b      	lsls	r3, r3, #16
 800fe96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe9e:	0c1b      	lsrs	r3, r3, #16
 800fea0:	431a      	orrs	r2, r3
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	3301      	adds	r3, #1
 800feac:	029a      	lsls	r2, r3, #10
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fec0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	655a      	str	r2, [r3, #84]	; 0x54
 800feca:	e00f      	b.n	800feec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a58      	ldr	r2, [pc, #352]	; (8010034 <HAL_SD_GetCardCSD+0x344>)
 800fed2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fed8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800fee8:	2301      	movs	r3, #1
 800feea:	e09d      	b.n	8010028 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fef0:	0b9b      	lsrs	r3, r3, #14
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff02:	09db      	lsrs	r3, r3, #7
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff0a:	b2da      	uxtb	r2, r3
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff1a:	b2da      	uxtb	r2, r3
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff24:	0fdb      	lsrs	r3, r3, #31
 800ff26:	b2da      	uxtb	r2, r3
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff30:	0f5b      	lsrs	r3, r3, #29
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	f003 0303 	and.w	r3, r3, #3
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff42:	0e9b      	lsrs	r3, r3, #26
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	f003 0307 	and.w	r3, r3, #7
 800ff4a:	b2da      	uxtb	r2, r3
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff54:	0d9b      	lsrs	r3, r3, #22
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	f003 030f 	and.w	r3, r3, #15
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff66:	0d5b      	lsrs	r3, r3, #21
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	f003 0301 	and.w	r3, r3, #1
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff82:	0c1b      	lsrs	r3, r3, #16
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff96:	0bdb      	lsrs	r3, r3, #15
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	f003 0301 	and.w	r3, r3, #1
 800ff9e:	b2da      	uxtb	r2, r3
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffaa:	0b9b      	lsrs	r3, r3, #14
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	f003 0301 	and.w	r3, r3, #1
 800ffb2:	b2da      	uxtb	r2, r3
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffbe:	0b5b      	lsrs	r3, r3, #13
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	f003 0301 	and.w	r3, r3, #1
 800ffc6:	b2da      	uxtb	r2, r3
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffd2:	0b1b      	lsrs	r3, r3, #12
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	f003 0301 	and.w	r3, r3, #1
 800ffda:	b2da      	uxtb	r2, r3
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffe6:	0a9b      	lsrs	r3, r3, #10
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	f003 0303 	and.w	r3, r3, #3
 800ffee:	b2da      	uxtb	r2, r3
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fffa:	0a1b      	lsrs	r3, r3, #8
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	f003 0303 	and.w	r3, r3, #3
 8010002:	b2da      	uxtb	r2, r3
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801000e:	085b      	lsrs	r3, r3, #1
 8010010:	b2db      	uxtb	r3, r3
 8010012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010016:	b2da      	uxtb	r2, r3
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	2201      	movs	r2, #1
 8010022:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr
 8010034:	1fe00fff 	.word	0x1fe00fff

08010038 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b094      	sub	sp, #80	; 0x50
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010042:	2300      	movs	r3, #0
 8010044:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b03      	cmp	r3, #3
 8010052:	d101      	bne.n	8010058 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010054:	2301      	movs	r3, #1
 8010056:	e0a7      	b.n	80101a8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010058:	f107 0308 	add.w	r3, r7, #8
 801005c:	4619      	mov	r1, r3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 fb62 	bl	8010728 <SD_SendSDStatus>
 8010064:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010068:	2b00      	cmp	r3, #0
 801006a:	d011      	beq.n	8010090 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a4f      	ldr	r2, [pc, #316]	; (80101b0 <HAL_SD_GetCardStatus+0x178>)
 8010072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801007a:	431a      	orrs	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010088:	2301      	movs	r3, #1
 801008a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801008e:	e070      	b.n	8010172 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	099b      	lsrs	r3, r3, #6
 8010094:	b2db      	uxtb	r3, r3
 8010096:	f003 0303 	and.w	r3, r3, #3
 801009a:	b2da      	uxtb	r2, r3
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	095b      	lsrs	r3, r3, #5
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	f003 0301 	and.w	r3, r3, #1
 80100aa:	b2da      	uxtb	r2, r3
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	0a1b      	lsrs	r3, r3, #8
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	0e1b      	lsrs	r3, r3, #24
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	4313      	orrs	r3, r2
 80100c4:	b29a      	uxth	r2, r3
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	061a      	lsls	r2, r3, #24
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	021b      	lsls	r3, r3, #8
 80100d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80100d6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	0a1b      	lsrs	r3, r3, #8
 80100dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80100e0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	0e1b      	lsrs	r3, r3, #24
 80100e6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	0a1b      	lsrs	r3, r3, #8
 80100f8:	b2da      	uxtb	r2, r3
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	0d1b      	lsrs	r3, r3, #20
 8010102:	b2db      	uxtb	r3, r3
 8010104:	f003 030f 	and.w	r3, r3, #15
 8010108:	b2da      	uxtb	r2, r3
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	0c1b      	lsrs	r3, r3, #16
 8010112:	b29b      	uxth	r3, r3
 8010114:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010118:	b29a      	uxth	r2, r3
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	b29b      	uxth	r3, r3
 801011e:	b2db      	uxtb	r3, r3
 8010120:	b29b      	uxth	r3, r3
 8010122:	4313      	orrs	r3, r2
 8010124:	b29a      	uxth	r2, r3
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	0a9b      	lsrs	r3, r3, #10
 801012e:	b2db      	uxtb	r3, r3
 8010130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010134:	b2da      	uxtb	r2, r3
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	0a1b      	lsrs	r3, r3, #8
 801013e:	b2db      	uxtb	r3, r3
 8010140:	f003 0303 	and.w	r3, r3, #3
 8010144:	b2da      	uxtb	r2, r3
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	091b      	lsrs	r3, r3, #4
 801014e:	b2db      	uxtb	r3, r3
 8010150:	f003 030f 	and.w	r3, r3, #15
 8010154:	b2da      	uxtb	r2, r3
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	b2db      	uxtb	r3, r3
 801015e:	f003 030f 	and.w	r3, r3, #15
 8010162:	b2da      	uxtb	r2, r3
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	0e1b      	lsrs	r3, r3, #24
 801016c:	b2da      	uxtb	r2, r3
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f44f 7100 	mov.w	r1, #512	; 0x200
 801017a:	4618      	mov	r0, r3
 801017c:	f001 f8e8 	bl	8011350 <SDMMC_CmdBlockLength>
 8010180:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010184:	2b00      	cmp	r3, #0
 8010186:	d00d      	beq.n	80101a4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a08      	ldr	r2, [pc, #32]	; (80101b0 <HAL_SD_GetCardStatus+0x178>)
 801018e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010194:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2201      	movs	r2, #1
 801019a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80101a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3750      	adds	r7, #80	; 0x50
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	1fe00fff 	.word	0x1fe00fff

080101b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b08d      	sub	sp, #52	; 0x34
 8010210:	af02      	add	r7, sp, #8
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010216:	2300      	movs	r3, #0
 8010218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2203      	movs	r2, #3
 8010220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010228:	2b03      	cmp	r3, #3
 801022a:	d02e      	beq.n	801028a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010232:	d106      	bne.n	8010242 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010238:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	635a      	str	r2, [r3, #52]	; 0x34
 8010240:	e029      	b.n	8010296 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010248:	d10a      	bne.n	8010260 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 fb64 	bl	8010918 <SD_WideBus_Enable>
 8010250:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010256:	6a3b      	ldr	r3, [r7, #32]
 8010258:	431a      	orrs	r2, r3
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	635a      	str	r2, [r3, #52]	; 0x34
 801025e:	e01a      	b.n	8010296 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d10a      	bne.n	801027c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 fba1 	bl	80109ae <SD_WideBus_Disable>
 801026c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010272:	6a3b      	ldr	r3, [r7, #32]
 8010274:	431a      	orrs	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	635a      	str	r2, [r3, #52]	; 0x34
 801027a:	e00c      	b.n	8010296 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010280:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	635a      	str	r2, [r3, #52]	; 0x34
 8010288:	e005      	b.n	8010296 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801028e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801029a:	2b00      	cmp	r3, #0
 801029c:	d007      	beq.n	80102ae <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4a5f      	ldr	r2, [pc, #380]	; (8010420 <HAL_SD_ConfigWideBusOperation+0x214>)
 80102a4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80102a6:	2301      	movs	r3, #1
 80102a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102ac:	e096      	b.n	80103dc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80102ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80102b2:	f04f 0100 	mov.w	r1, #0
 80102b6:	f7fe f865 	bl	800e384 <HAL_RCCEx_GetPeriphCLKFreq>
 80102ba:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f000 8083 	beq.w	80103ca <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	695a      	ldr	r2, [r3, #20]
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	4950      	ldr	r1, [pc, #320]	; (8010424 <HAL_SD_ConfigWideBusOperation+0x218>)
 80102e2:	fba1 1303 	umull	r1, r3, r1, r3
 80102e6:	0e1b      	lsrs	r3, r3, #24
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d303      	bcc.n	80102f4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	695b      	ldr	r3, [r3, #20]
 80102f0:	61bb      	str	r3, [r7, #24]
 80102f2:	e05a      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102fc:	d103      	bne.n	8010306 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	695b      	ldr	r3, [r3, #20]
 8010302:	61bb      	str	r3, [r7, #24]
 8010304:	e051      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801030a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801030e:	d126      	bne.n	801035e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	695b      	ldr	r3, [r3, #20]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d10e      	bne.n	8010336 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	4a43      	ldr	r2, [pc, #268]	; (8010428 <HAL_SD_ConfigWideBusOperation+0x21c>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d906      	bls.n	801032e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	4a40      	ldr	r2, [pc, #256]	; (8010424 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010324:	fba2 2303 	umull	r2, r3, r2, r3
 8010328:	0e5b      	lsrs	r3, r3, #25
 801032a:	61bb      	str	r3, [r7, #24]
 801032c:	e03d      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	695b      	ldr	r3, [r3, #20]
 8010332:	61bb      	str	r3, [r7, #24]
 8010334:	e039      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	695b      	ldr	r3, [r3, #20]
 801033a:	005b      	lsls	r3, r3, #1
 801033c:	69fa      	ldr	r2, [r7, #28]
 801033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010342:	4a39      	ldr	r2, [pc, #228]	; (8010428 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d906      	bls.n	8010356 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	4a36      	ldr	r2, [pc, #216]	; (8010424 <HAL_SD_ConfigWideBusOperation+0x218>)
 801034c:	fba2 2303 	umull	r2, r3, r2, r3
 8010350:	0e5b      	lsrs	r3, r3, #25
 8010352:	61bb      	str	r3, [r7, #24]
 8010354:	e029      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	695b      	ldr	r3, [r3, #20]
 801035a:	61bb      	str	r3, [r7, #24]
 801035c:	e025      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	695b      	ldr	r3, [r3, #20]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d10e      	bne.n	8010384 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	4a30      	ldr	r2, [pc, #192]	; (801042c <HAL_SD_ConfigWideBusOperation+0x220>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d906      	bls.n	801037c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	4a2c      	ldr	r2, [pc, #176]	; (8010424 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010372:	fba2 2303 	umull	r2, r3, r2, r3
 8010376:	0e1b      	lsrs	r3, r3, #24
 8010378:	61bb      	str	r3, [r7, #24]
 801037a:	e016      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	695b      	ldr	r3, [r3, #20]
 8010380:	61bb      	str	r3, [r7, #24]
 8010382:	e012      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	695b      	ldr	r3, [r3, #20]
 8010388:	005b      	lsls	r3, r3, #1
 801038a:	69fa      	ldr	r2, [r7, #28]
 801038c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010390:	4a26      	ldr	r2, [pc, #152]	; (801042c <HAL_SD_ConfigWideBusOperation+0x220>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d906      	bls.n	80103a4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	4a22      	ldr	r2, [pc, #136]	; (8010424 <HAL_SD_ConfigWideBusOperation+0x218>)
 801039a:	fba2 2303 	umull	r2, r3, r2, r3
 801039e:	0e1b      	lsrs	r3, r3, #24
 80103a0:	61bb      	str	r3, [r7, #24]
 80103a2:	e002      	b.n	80103aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	695b      	ldr	r3, [r3, #20]
 80103a8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681c      	ldr	r4, [r3, #0]
 80103ae:	466a      	mov	r2, sp
 80103b0:	f107 0314 	add.w	r3, r7, #20
 80103b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80103b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80103bc:	f107 0308 	add.w	r3, r7, #8
 80103c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80103c2:	4620      	mov	r0, r4
 80103c4:	f000 fef8 	bl	80111b8 <SDMMC_Init>
 80103c8:	e008      	b.n	80103dc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80103d6:	2301      	movs	r3, #1
 80103d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80103e4:	4618      	mov	r0, r3
 80103e6:	f000 ffb3 	bl	8011350 <SDMMC_CmdBlockLength>
 80103ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80103ec:	6a3b      	ldr	r3, [r7, #32]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00c      	beq.n	801040c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4a0a      	ldr	r2, [pc, #40]	; (8010420 <HAL_SD_ConfigWideBusOperation+0x214>)
 80103f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103fe:	6a3b      	ldr	r3, [r7, #32]
 8010400:	431a      	orrs	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010406:	2301      	movs	r3, #1
 8010408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010418:	4618      	mov	r0, r3
 801041a:	372c      	adds	r7, #44	; 0x2c
 801041c:	46bd      	mov	sp, r7
 801041e:	bd90      	pop	{r4, r7, pc}
 8010420:	1fe00fff 	.word	0x1fe00fff
 8010424:	55e63b89 	.word	0x55e63b89
 8010428:	02faf080 	.word	0x02faf080
 801042c:	017d7840 	.word	0x017d7840

08010430 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801043c:	f107 030c 	add.w	r3, r7, #12
 8010440:	4619      	mov	r1, r3
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 fa40 	bl	80108c8 <SD_SendStatus>
 8010448:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d005      	beq.n	801045c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	431a      	orrs	r2, r3
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	0a5b      	lsrs	r3, r3, #9
 8010460:	f003 030f 	and.w	r3, r3, #15
 8010464:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8010466:	693b      	ldr	r3, [r7, #16]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3718      	adds	r7, #24
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b090      	sub	sp, #64	; 0x40
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8010478:	2300      	movs	r3, #0
 801047a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 801047c:	f7f7 f992 	bl	80077a4 <HAL_GetTick>
 8010480:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4618      	mov	r0, r3
 8010488:	f000 fede 	bl	8011248 <SDMMC_GetPowerState>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d102      	bne.n	8010498 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010492:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010496:	e0b5      	b.n	8010604 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801049c:	2b03      	cmp	r3, #3
 801049e:	d02e      	beq.n	80104fe <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f001 f8eb 	bl	8011680 <SDMMC_CmdSendCID>
 80104aa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80104ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d001      	beq.n	80104b6 <SD_InitCard+0x46>
    {
      return errorstate;
 80104b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b4:	e0a6      	b.n	8010604 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2100      	movs	r1, #0
 80104bc:	4618      	mov	r0, r3
 80104be:	f000 ff08 	bl	80112d2 <SDMMC_GetResponse>
 80104c2:	4602      	mov	r2, r0
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2104      	movs	r1, #4
 80104ce:	4618      	mov	r0, r3
 80104d0:	f000 feff 	bl	80112d2 <SDMMC_GetResponse>
 80104d4:	4602      	mov	r2, r0
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2108      	movs	r1, #8
 80104e0:	4618      	mov	r0, r3
 80104e2:	f000 fef6 	bl	80112d2 <SDMMC_GetResponse>
 80104e6:	4602      	mov	r2, r0
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	210c      	movs	r1, #12
 80104f2:	4618      	mov	r0, r3
 80104f4:	f000 feed 	bl	80112d2 <SDMMC_GetResponse>
 80104f8:	4602      	mov	r2, r0
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010502:	2b03      	cmp	r3, #3
 8010504:	d01d      	beq.n	8010542 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010506:	e019      	b.n	801053c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f107 020a 	add.w	r2, r7, #10
 8010510:	4611      	mov	r1, r2
 8010512:	4618      	mov	r0, r3
 8010514:	f001 f8f3 	bl	80116fe <SDMMC_CmdSetRelAdd>
 8010518:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051c:	2b00      	cmp	r3, #0
 801051e:	d001      	beq.n	8010524 <SD_InitCard+0xb4>
      {
        return errorstate;
 8010520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010522:	e06f      	b.n	8010604 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8010524:	f7f7 f93e 	bl	80077a4 <HAL_GetTick>
 8010528:	4602      	mov	r2, r0
 801052a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	f241 3287 	movw	r2, #4999	; 0x1387
 8010532:	4293      	cmp	r3, r2
 8010534:	d902      	bls.n	801053c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8010536:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801053a:	e063      	b.n	8010604 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 801053c:	897b      	ldrh	r3, [r7, #10]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d0e2      	beq.n	8010508 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010546:	2b03      	cmp	r3, #3
 8010548:	d036      	beq.n	80105b8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801054a:	897b      	ldrh	r3, [r7, #10]
 801054c:	461a      	mov	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801055a:	041b      	lsls	r3, r3, #16
 801055c:	4619      	mov	r1, r3
 801055e:	4610      	mov	r0, r2
 8010560:	f001 f8ad 	bl	80116be <SDMMC_CmdSendCSD>
 8010564:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010568:	2b00      	cmp	r3, #0
 801056a:	d001      	beq.n	8010570 <SD_InitCard+0x100>
    {
      return errorstate;
 801056c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056e:	e049      	b.n	8010604 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	2100      	movs	r1, #0
 8010576:	4618      	mov	r0, r3
 8010578:	f000 feab 	bl	80112d2 <SDMMC_GetResponse>
 801057c:	4602      	mov	r2, r0
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2104      	movs	r1, #4
 8010588:	4618      	mov	r0, r3
 801058a:	f000 fea2 	bl	80112d2 <SDMMC_GetResponse>
 801058e:	4602      	mov	r2, r0
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2108      	movs	r1, #8
 801059a:	4618      	mov	r0, r3
 801059c:	f000 fe99 	bl	80112d2 <SDMMC_GetResponse>
 80105a0:	4602      	mov	r2, r0
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	210c      	movs	r1, #12
 80105ac:	4618      	mov	r0, r3
 80105ae:	f000 fe90 	bl	80112d2 <SDMMC_GetResponse>
 80105b2:	4602      	mov	r2, r0
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2104      	movs	r1, #4
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 fe87 	bl	80112d2 <SDMMC_GetResponse>
 80105c4:	4603      	mov	r3, r0
 80105c6:	0d1a      	lsrs	r2, r3, #20
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80105cc:	f107 030c 	add.w	r3, r7, #12
 80105d0:	4619      	mov	r1, r3
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7ff fb8c 	bl	800fcf0 <HAL_SD_GetCardCSD>
 80105d8:	4603      	mov	r3, r0
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d002      	beq.n	80105e4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80105de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80105e2:	e00f      	b.n	8010604 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ec:	041b      	lsls	r3, r3, #16
 80105ee:	4619      	mov	r1, r3
 80105f0:	4610      	mov	r0, r2
 80105f2:	f000 ff5c 	bl	80114ae <SDMMC_CmdSelDesel>
 80105f6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d001      	beq.n	8010602 <SD_InitCard+0x192>
  {
    return errorstate;
 80105fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010600:	e000      	b.n	8010604 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010602:	2300      	movs	r3, #0
}
 8010604:	4618      	mov	r0, r3
 8010606:	3740      	adds	r7, #64	; 0x40
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b086      	sub	sp, #24
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010614:	2300      	movs	r3, #0
 8010616:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8010618:	2300      	movs	r3, #0
 801061a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 801061c:	2300      	movs	r3, #0
 801061e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4618      	mov	r0, r3
 8010626:	f000 ff65 	bl	80114f4 <SDMMC_CmdGoIdleState>
 801062a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <SD_PowerON+0x2a>
  {
    return errorstate;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	e072      	b.n	801071c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4618      	mov	r0, r3
 801063c:	f000 ff78 	bl	8011530 <SDMMC_CmdOperCond>
 8010640:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010648:	d10d      	bne.n	8010666 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4618      	mov	r0, r3
 8010656:	f000 ff4d 	bl	80114f4 <SDMMC_CmdGoIdleState>
 801065a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d004      	beq.n	801066c <SD_PowerON+0x60>
    {
      return errorstate;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	e05a      	b.n	801071c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2201      	movs	r2, #1
 801066a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010670:	2b01      	cmp	r3, #1
 8010672:	d137      	bne.n	80106e4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2100      	movs	r1, #0
 801067a:	4618      	mov	r0, r3
 801067c:	f000 ff78 	bl	8011570 <SDMMC_CmdAppCommand>
 8010680:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d02d      	beq.n	80106e4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010688:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801068c:	e046      	b.n	801071c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2100      	movs	r1, #0
 8010694:	4618      	mov	r0, r3
 8010696:	f000 ff6b 	bl	8011570 <SDMMC_CmdAppCommand>
 801069a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d001      	beq.n	80106a6 <SD_PowerON+0x9a>
    {
      return errorstate;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	e03a      	b.n	801071c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	491e      	ldr	r1, [pc, #120]	; (8010724 <SD_PowerON+0x118>)
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 ff82 	bl	80115b6 <SDMMC_CmdAppOperCommand>
 80106b2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80106ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80106be:	e02d      	b.n	801071c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2100      	movs	r1, #0
 80106c6:	4618      	mov	r0, r3
 80106c8:	f000 fe03 	bl	80112d2 <SDMMC_GetResponse>
 80106cc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	0fdb      	lsrs	r3, r3, #31
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d101      	bne.n	80106da <SD_PowerON+0xce>
 80106d6:	2301      	movs	r3, #1
 80106d8:	e000      	b.n	80106dc <SD_PowerON+0xd0>
 80106da:	2300      	movs	r3, #0
 80106dc:	613b      	str	r3, [r7, #16]

    count++;
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	3301      	adds	r3, #1
 80106e2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d802      	bhi.n	80106f4 <SD_PowerON+0xe8>
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d0cc      	beq.n	801068e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d902      	bls.n	8010704 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80106fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010702:	e00b      	b.n	801071c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2200      	movs	r2, #0
 8010708:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3718      	adds	r7, #24
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	c1100000 	.word	0xc1100000

08010728 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08c      	sub	sp, #48	; 0x30
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010732:	f7f7 f837 	bl	80077a4 <HAL_GetTick>
 8010736:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2100      	movs	r1, #0
 8010742:	4618      	mov	r0, r3
 8010744:	f000 fdc5 	bl	80112d2 <SDMMC_GetResponse>
 8010748:	4603      	mov	r3, r0
 801074a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801074e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010752:	d102      	bne.n	801075a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010758:	e0b0      	b.n	80108bc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2140      	movs	r1, #64	; 0x40
 8010760:	4618      	mov	r0, r3
 8010762:	f000 fdf5 	bl	8011350 <SDMMC_CmdBlockLength>
 8010766:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010768:	6a3b      	ldr	r3, [r7, #32]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d005      	beq.n	801077a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	e0a0      	b.n	80108bc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010782:	041b      	lsls	r3, r3, #16
 8010784:	4619      	mov	r1, r3
 8010786:	4610      	mov	r0, r2
 8010788:	f000 fef2 	bl	8011570 <SDMMC_CmdAppCommand>
 801078c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d005      	beq.n	80107a0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 801079c:	6a3b      	ldr	r3, [r7, #32]
 801079e:	e08d      	b.n	80108bc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80107a0:	f04f 33ff 	mov.w	r3, #4294967295
 80107a4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80107a6:	2340      	movs	r3, #64	; 0x40
 80107a8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80107aa:	2360      	movs	r3, #96	; 0x60
 80107ac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80107ae:	2302      	movs	r3, #2
 80107b0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80107b6:	2301      	movs	r3, #1
 80107b8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f107 0208 	add.w	r2, r7, #8
 80107c2:	4611      	mov	r1, r2
 80107c4:	4618      	mov	r0, r3
 80107c6:	f000 fd97 	bl	80112f8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 ffda 	bl	8011788 <SDMMC_CmdStatusRegister>
 80107d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d02b      	beq.n	8010834 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80107e4:	6a3b      	ldr	r3, [r7, #32]
 80107e6:	e069      	b.n	80108bc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d013      	beq.n	801081e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80107f6:	2300      	movs	r3, #0
 80107f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107fa:	e00d      	b.n	8010818 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4618      	mov	r0, r3
 8010802:	f000 fd03 	bl	801120c <SDMMC_ReadFIFO>
 8010806:	4602      	mov	r2, r0
 8010808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080a:	601a      	str	r2, [r3, #0]
        pData++;
 801080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080e:	3304      	adds	r3, #4
 8010810:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8010812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010814:	3301      	adds	r3, #1
 8010816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081a:	2b07      	cmp	r3, #7
 801081c:	d9ee      	bls.n	80107fc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801081e:	f7f6 ffc1 	bl	80077a4 <HAL_GetTick>
 8010822:	4602      	mov	r2, r0
 8010824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010826:	1ad3      	subs	r3, r2, r3
 8010828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082c:	d102      	bne.n	8010834 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801082e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010832:	e043      	b.n	80108bc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 801083e:	2b00      	cmp	r3, #0
 8010840:	d0d2      	beq.n	80107e8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010848:	f003 0308 	and.w	r3, r3, #8
 801084c:	2b00      	cmp	r3, #0
 801084e:	d001      	beq.n	8010854 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010850:	2308      	movs	r3, #8
 8010852:	e033      	b.n	80108bc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085a:	f003 0302 	and.w	r3, r3, #2
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010862:	2302      	movs	r3, #2
 8010864:	e02a      	b.n	80108bc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801086c:	f003 0320 	and.w	r3, r3, #32
 8010870:	2b00      	cmp	r3, #0
 8010872:	d017      	beq.n	80108a4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8010874:	2320      	movs	r3, #32
 8010876:	e021      	b.n	80108bc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4618      	mov	r0, r3
 801087e:	f000 fcc5 	bl	801120c <SDMMC_ReadFIFO>
 8010882:	4602      	mov	r2, r0
 8010884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010886:	601a      	str	r2, [r3, #0]
    pData++;
 8010888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088a:	3304      	adds	r3, #4
 801088c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801088e:	f7f6 ff89 	bl	80077a4 <HAL_GetTick>
 8010892:	4602      	mov	r2, r0
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801089c:	d102      	bne.n	80108a4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801089e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108a2:	e00b      	b.n	80108bc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1e2      	bne.n	8010878 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4a03      	ldr	r2, [pc, #12]	; (80108c4 <SD_SendSDStatus+0x19c>)
 80108b8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80108ba:	2300      	movs	r3, #0
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3730      	adds	r7, #48	; 0x30
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	18000f3a 	.word	0x18000f3a

080108c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d102      	bne.n	80108de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80108d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80108dc:	e018      	b.n	8010910 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108e6:	041b      	lsls	r3, r3, #16
 80108e8:	4619      	mov	r1, r3
 80108ea:	4610      	mov	r0, r2
 80108ec:	f000 ff29 	bl	8011742 <SDMMC_CmdSendStatus>
 80108f0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d001      	beq.n	80108fc <SD_SendStatus+0x34>
  {
    return errorstate;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	e009      	b.n	8010910 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2100      	movs	r1, #0
 8010902:	4618      	mov	r0, r3
 8010904:	f000 fce5 	bl	80112d2 <SDMMC_GetResponse>
 8010908:	4602      	mov	r2, r0
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b086      	sub	sp, #24
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010920:	2300      	movs	r3, #0
 8010922:	60fb      	str	r3, [r7, #12]
 8010924:	2300      	movs	r3, #0
 8010926:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2100      	movs	r1, #0
 801092e:	4618      	mov	r0, r3
 8010930:	f000 fccf 	bl	80112d2 <SDMMC_GetResponse>
 8010934:	4603      	mov	r3, r0
 8010936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801093a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801093e:	d102      	bne.n	8010946 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010944:	e02f      	b.n	80109a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010946:	f107 030c 	add.w	r3, r7, #12
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 f879 	bl	8010a44 <SD_FindSCR>
 8010952:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d001      	beq.n	801095e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	e023      	b.n	80109a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010964:	2b00      	cmp	r3, #0
 8010966:	d01c      	beq.n	80109a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010970:	041b      	lsls	r3, r3, #16
 8010972:	4619      	mov	r1, r3
 8010974:	4610      	mov	r0, r2
 8010976:	f000 fdfb 	bl	8011570 <SDMMC_CmdAppCommand>
 801097a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d001      	beq.n	8010986 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	e00f      	b.n	80109a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2102      	movs	r1, #2
 801098c:	4618      	mov	r0, r3
 801098e:	f000 fe32 	bl	80115f6 <SDMMC_CmdBusWidth>
 8010992:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d001      	beq.n	801099e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	e003      	b.n	80109a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801099e:	2300      	movs	r3, #0
 80109a0:	e001      	b.n	80109a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80109a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3718      	adds	r7, #24
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b086      	sub	sp, #24
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80109b6:	2300      	movs	r3, #0
 80109b8:	60fb      	str	r3, [r7, #12]
 80109ba:	2300      	movs	r3, #0
 80109bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2100      	movs	r1, #0
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 fc84 	bl	80112d2 <SDMMC_GetResponse>
 80109ca:	4603      	mov	r3, r0
 80109cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80109d4:	d102      	bne.n	80109dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80109d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109da:	e02f      	b.n	8010a3c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80109dc:	f107 030c 	add.w	r3, r7, #12
 80109e0:	4619      	mov	r1, r3
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 f82e 	bl	8010a44 <SD_FindSCR>
 80109e8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	e023      	b.n	8010a3c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d01c      	beq.n	8010a38 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681a      	ldr	r2, [r3, #0]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a06:	041b      	lsls	r3, r3, #16
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4610      	mov	r0, r2
 8010a0c:	f000 fdb0 	bl	8011570 <SDMMC_CmdAppCommand>
 8010a10:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d001      	beq.n	8010a1c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	e00f      	b.n	8010a3c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2100      	movs	r1, #0
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 fde7 	bl	80115f6 <SDMMC_CmdBusWidth>
 8010a28:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d001      	beq.n	8010a34 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	e003      	b.n	8010a3c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010a34:	2300      	movs	r3, #0
 8010a36:	e001      	b.n	8010a3c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010a38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b08e      	sub	sp, #56	; 0x38
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010a4e:	f7f6 fea9 	bl	80077a4 <HAL_GetTick>
 8010a52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8010a54:	2300      	movs	r3, #0
 8010a56:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8010a58:	2300      	movs	r3, #0
 8010a5a:	60bb      	str	r3, [r7, #8]
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	2108      	movs	r1, #8
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f000 fc70 	bl	8011350 <SDMMC_CmdBlockLength>
 8010a70:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d001      	beq.n	8010a7c <SD_FindSCR+0x38>
  {
    return errorstate;
 8010a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7a:	e0ad      	b.n	8010bd8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a84:	041b      	lsls	r3, r3, #16
 8010a86:	4619      	mov	r1, r3
 8010a88:	4610      	mov	r0, r2
 8010a8a:	f000 fd71 	bl	8011570 <SDMMC_CmdAppCommand>
 8010a8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d001      	beq.n	8010a9a <SD_FindSCR+0x56>
  {
    return errorstate;
 8010a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a98:	e09e      	b.n	8010bd8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010aa0:	2308      	movs	r3, #8
 8010aa2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010aa4:	2330      	movs	r3, #48	; 0x30
 8010aa6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010aa8:	2302      	movs	r3, #2
 8010aaa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f107 0210 	add.w	r2, r7, #16
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f000 fc1a 	bl	80112f8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f000 fdb7 	bl	801163c <SDMMC_CmdSendSCR>
 8010ace:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d027      	beq.n	8010b26 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8010ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad8:	e07e      	b.n	8010bd8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d113      	bne.n	8010b10 <SD_FindSCR+0xcc>
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d110      	bne.n	8010b10 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 fb8a 	bl	801120c <SDMMC_ReadFIFO>
 8010af8:	4603      	mov	r3, r0
 8010afa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4618      	mov	r0, r3
 8010b02:	f000 fb83 	bl	801120c <SDMMC_ReadFIFO>
 8010b06:	4603      	mov	r3, r0
 8010b08:	60fb      	str	r3, [r7, #12]
      index++;
 8010b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010b10:	f7f6 fe48 	bl	80077a4 <HAL_GetTick>
 8010b14:	4602      	mov	r2, r0
 8010b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b18:	1ad3      	subs	r3, r2, r3
 8010b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1e:	d102      	bne.n	8010b26 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010b20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b24:	e058      	b.n	8010bd8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b2c:	f240 532a 	movw	r3, #1322	; 0x52a
 8010b30:	4013      	ands	r3, r2
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d0d1      	beq.n	8010ada <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b3c:	f003 0308 	and.w	r3, r3, #8
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d005      	beq.n	8010b50 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2208      	movs	r2, #8
 8010b4a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010b4c:	2308      	movs	r3, #8
 8010b4e:	e043      	b.n	8010bd8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b56:	f003 0302 	and.w	r3, r3, #2
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d005      	beq.n	8010b6a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2202      	movs	r2, #2
 8010b64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010b66:	2302      	movs	r3, #2
 8010b68:	e036      	b.n	8010bd8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b70:	f003 0320 	and.w	r3, r3, #32
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d005      	beq.n	8010b84 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2220      	movs	r2, #32
 8010b7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010b80:	2320      	movs	r3, #32
 8010b82:	e029      	b.n	8010bd8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a15      	ldr	r2, [pc, #84]	; (8010be0 <SD_FindSCR+0x19c>)
 8010b8a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	061a      	lsls	r2, r3, #24
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	021b      	lsls	r3, r3, #8
 8010b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	0a1b      	lsrs	r3, r3, #8
 8010b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010ba2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	0e1b      	lsrs	r3, r3, #24
 8010ba8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bac:	601a      	str	r2, [r3, #0]
    scr++;
 8010bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb0:	3304      	adds	r3, #4
 8010bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	061a      	lsls	r2, r3, #24
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	021b      	lsls	r3, r3, #8
 8010bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010bc0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	0a1b      	lsrs	r3, r3, #8
 8010bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010bca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	0e1b      	lsrs	r3, r3, #24
 8010bd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3738      	adds	r7, #56	; 0x38
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	18000f3a 	.word	0x18000f3a

08010be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d101      	bne.n	8010bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e049      	b.n	8010c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f7f6 f9d2 	bl	8006fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2202      	movs	r2, #2
 8010c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	3304      	adds	r3, #4
 8010c20:	4619      	mov	r1, r3
 8010c22:	4610      	mov	r0, r2
 8010c24:	f000 fa04 	bl	8011030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2201      	movs	r2, #1
 8010c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3708      	adds	r7, #8
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
	...

08010c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b085      	sub	sp, #20
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d001      	beq.n	8010cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	e05e      	b.n	8010d6a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2202      	movs	r2, #2
 8010cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	68da      	ldr	r2, [r3, #12]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f042 0201 	orr.w	r2, r2, #1
 8010cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4a2b      	ldr	r2, [pc, #172]	; (8010d78 <HAL_TIM_Base_Start_IT+0xe4>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d02c      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cd6:	d027      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4a27      	ldr	r2, [pc, #156]	; (8010d7c <HAL_TIM_Base_Start_IT+0xe8>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d022      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	4a26      	ldr	r2, [pc, #152]	; (8010d80 <HAL_TIM_Base_Start_IT+0xec>)
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	d01d      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	4a24      	ldr	r2, [pc, #144]	; (8010d84 <HAL_TIM_Base_Start_IT+0xf0>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d018      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4a23      	ldr	r2, [pc, #140]	; (8010d88 <HAL_TIM_Base_Start_IT+0xf4>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d013      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4a21      	ldr	r2, [pc, #132]	; (8010d8c <HAL_TIM_Base_Start_IT+0xf8>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d00e      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4a20      	ldr	r2, [pc, #128]	; (8010d90 <HAL_TIM_Base_Start_IT+0xfc>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d009      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4a1e      	ldr	r2, [pc, #120]	; (8010d94 <HAL_TIM_Base_Start_IT+0x100>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d004      	beq.n	8010d28 <HAL_TIM_Base_Start_IT+0x94>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4a1d      	ldr	r2, [pc, #116]	; (8010d98 <HAL_TIM_Base_Start_IT+0x104>)
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d115      	bne.n	8010d54 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	689a      	ldr	r2, [r3, #8]
 8010d2e:	4b1b      	ldr	r3, [pc, #108]	; (8010d9c <HAL_TIM_Base_Start_IT+0x108>)
 8010d30:	4013      	ands	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2b06      	cmp	r3, #6
 8010d38:	d015      	beq.n	8010d66 <HAL_TIM_Base_Start_IT+0xd2>
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d40:	d011      	beq.n	8010d66 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	681a      	ldr	r2, [r3, #0]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f042 0201 	orr.w	r2, r2, #1
 8010d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d52:	e008      	b.n	8010d66 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f042 0201 	orr.w	r2, r2, #1
 8010d62:	601a      	str	r2, [r3, #0]
 8010d64:	e000      	b.n	8010d68 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010d68:	2300      	movs	r3, #0
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	40010000 	.word	0x40010000
 8010d7c:	40000400 	.word	0x40000400
 8010d80:	40000800 	.word	0x40000800
 8010d84:	40000c00 	.word	0x40000c00
 8010d88:	40010400 	.word	0x40010400
 8010d8c:	40001800 	.word	0x40001800
 8010d90:	40014000 	.word	0x40014000
 8010d94:	4000e000 	.word	0x4000e000
 8010d98:	4000e400 	.word	0x4000e400
 8010d9c:	00010007 	.word	0x00010007

08010da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	f003 0302 	and.w	r3, r3, #2
 8010db2:	2b02      	cmp	r3, #2
 8010db4:	d122      	bne.n	8010dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	f003 0302 	and.w	r3, r3, #2
 8010dc0:	2b02      	cmp	r3, #2
 8010dc2:	d11b      	bne.n	8010dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f06f 0202 	mvn.w	r2, #2
 8010dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	699b      	ldr	r3, [r3, #24]
 8010dda:	f003 0303 	and.w	r3, r3, #3
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d003      	beq.n	8010dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 f905 	bl	8010ff2 <HAL_TIM_IC_CaptureCallback>
 8010de8:	e005      	b.n	8010df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 f8f7 	bl	8010fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f908 	bl	8011006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	f003 0304 	and.w	r3, r3, #4
 8010e06:	2b04      	cmp	r3, #4
 8010e08:	d122      	bne.n	8010e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	f003 0304 	and.w	r3, r3, #4
 8010e14:	2b04      	cmp	r3, #4
 8010e16:	d11b      	bne.n	8010e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f06f 0204 	mvn.w	r2, #4
 8010e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2202      	movs	r2, #2
 8010e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	699b      	ldr	r3, [r3, #24]
 8010e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d003      	beq.n	8010e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 f8db 	bl	8010ff2 <HAL_TIM_IC_CaptureCallback>
 8010e3c:	e005      	b.n	8010e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 f8cd 	bl	8010fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f000 f8de 	bl	8011006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	691b      	ldr	r3, [r3, #16]
 8010e56:	f003 0308 	and.w	r3, r3, #8
 8010e5a:	2b08      	cmp	r3, #8
 8010e5c:	d122      	bne.n	8010ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	f003 0308 	and.w	r3, r3, #8
 8010e68:	2b08      	cmp	r3, #8
 8010e6a:	d11b      	bne.n	8010ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f06f 0208 	mvn.w	r2, #8
 8010e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2204      	movs	r2, #4
 8010e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	69db      	ldr	r3, [r3, #28]
 8010e82:	f003 0303 	and.w	r3, r3, #3
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d003      	beq.n	8010e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 f8b1 	bl	8010ff2 <HAL_TIM_IC_CaptureCallback>
 8010e90:	e005      	b.n	8010e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 f8a3 	bl	8010fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 f8b4 	bl	8011006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	691b      	ldr	r3, [r3, #16]
 8010eaa:	f003 0310 	and.w	r3, r3, #16
 8010eae:	2b10      	cmp	r3, #16
 8010eb0:	d122      	bne.n	8010ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	f003 0310 	and.w	r3, r3, #16
 8010ebc:	2b10      	cmp	r3, #16
 8010ebe:	d11b      	bne.n	8010ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f06f 0210 	mvn.w	r2, #16
 8010ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2208      	movs	r2, #8
 8010ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	69db      	ldr	r3, [r3, #28]
 8010ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d003      	beq.n	8010ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 f887 	bl	8010ff2 <HAL_TIM_IC_CaptureCallback>
 8010ee4:	e005      	b.n	8010ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 f879 	bl	8010fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f88a 	bl	8011006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	691b      	ldr	r3, [r3, #16]
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d10e      	bne.n	8010f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	f003 0301 	and.w	r3, r3, #1
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d107      	bne.n	8010f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f06f 0201 	mvn.w	r2, #1
 8010f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f7f5 febc 	bl	8006c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	691b      	ldr	r3, [r3, #16]
 8010f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f2e:	2b80      	cmp	r3, #128	; 0x80
 8010f30:	d10e      	bne.n	8010f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f3c:	2b80      	cmp	r3, #128	; 0x80
 8010f3e:	d107      	bne.n	8010f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f920 	bl	8011190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	691b      	ldr	r3, [r3, #16]
 8010f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f5e:	d10e      	bne.n	8010f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f6a:	2b80      	cmp	r3, #128	; 0x80
 8010f6c:	d107      	bne.n	8010f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 f913 	bl	80111a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	691b      	ldr	r3, [r3, #16]
 8010f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f88:	2b40      	cmp	r3, #64	; 0x40
 8010f8a:	d10e      	bne.n	8010faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f96:	2b40      	cmp	r3, #64	; 0x40
 8010f98:	d107      	bne.n	8010faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f000 f838 	bl	801101a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	f003 0320 	and.w	r3, r3, #32
 8010fb4:	2b20      	cmp	r3, #32
 8010fb6:	d10e      	bne.n	8010fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	f003 0320 	and.w	r3, r3, #32
 8010fc2:	2b20      	cmp	r3, #32
 8010fc4:	d107      	bne.n	8010fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f06f 0220 	mvn.w	r2, #32
 8010fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f000 f8d3 	bl	801117c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010fd6:	bf00      	nop
 8010fd8:	3708      	adds	r7, #8
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}

08010fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010fde:	b480      	push	{r7}
 8010fe0:	b083      	sub	sp, #12
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010fe6:	bf00      	nop
 8010fe8:	370c      	adds	r7, #12
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr

08010ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010ff2:	b480      	push	{r7}
 8010ff4:	b083      	sub	sp, #12
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010ffa:	bf00      	nop
 8010ffc:	370c      	adds	r7, #12
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr

08011006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011006:	b480      	push	{r7}
 8011008:	b083      	sub	sp, #12
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801100e:	bf00      	nop
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr

0801101a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801101a:	b480      	push	{r7}
 801101c:	b083      	sub	sp, #12
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011022:	bf00      	nop
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
	...

08011030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011030:	b480      	push	{r7}
 8011032:	b085      	sub	sp, #20
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	4a44      	ldr	r2, [pc, #272]	; (8011154 <TIM_Base_SetConfig+0x124>)
 8011044:	4293      	cmp	r3, r2
 8011046:	d013      	beq.n	8011070 <TIM_Base_SetConfig+0x40>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801104e:	d00f      	beq.n	8011070 <TIM_Base_SetConfig+0x40>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a41      	ldr	r2, [pc, #260]	; (8011158 <TIM_Base_SetConfig+0x128>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d00b      	beq.n	8011070 <TIM_Base_SetConfig+0x40>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4a40      	ldr	r2, [pc, #256]	; (801115c <TIM_Base_SetConfig+0x12c>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d007      	beq.n	8011070 <TIM_Base_SetConfig+0x40>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4a3f      	ldr	r2, [pc, #252]	; (8011160 <TIM_Base_SetConfig+0x130>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d003      	beq.n	8011070 <TIM_Base_SetConfig+0x40>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4a3e      	ldr	r2, [pc, #248]	; (8011164 <TIM_Base_SetConfig+0x134>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d108      	bne.n	8011082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	68fa      	ldr	r2, [r7, #12]
 801107e:	4313      	orrs	r3, r2
 8011080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4a33      	ldr	r2, [pc, #204]	; (8011154 <TIM_Base_SetConfig+0x124>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d027      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011090:	d023      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4a30      	ldr	r2, [pc, #192]	; (8011158 <TIM_Base_SetConfig+0x128>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d01f      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4a2f      	ldr	r2, [pc, #188]	; (801115c <TIM_Base_SetConfig+0x12c>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d01b      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4a2e      	ldr	r2, [pc, #184]	; (8011160 <TIM_Base_SetConfig+0x130>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d017      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4a2d      	ldr	r2, [pc, #180]	; (8011164 <TIM_Base_SetConfig+0x134>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d013      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	4a2c      	ldr	r2, [pc, #176]	; (8011168 <TIM_Base_SetConfig+0x138>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d00f      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4a2b      	ldr	r2, [pc, #172]	; (801116c <TIM_Base_SetConfig+0x13c>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d00b      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	4a2a      	ldr	r2, [pc, #168]	; (8011170 <TIM_Base_SetConfig+0x140>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d007      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4a29      	ldr	r2, [pc, #164]	; (8011174 <TIM_Base_SetConfig+0x144>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d003      	beq.n	80110da <TIM_Base_SetConfig+0xaa>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4a28      	ldr	r2, [pc, #160]	; (8011178 <TIM_Base_SetConfig+0x148>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d108      	bne.n	80110ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	695b      	ldr	r3, [r3, #20]
 80110f6:	4313      	orrs	r3, r2
 80110f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	689a      	ldr	r2, [r3, #8]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4a10      	ldr	r2, [pc, #64]	; (8011154 <TIM_Base_SetConfig+0x124>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d00f      	beq.n	8011138 <TIM_Base_SetConfig+0x108>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	4a12      	ldr	r2, [pc, #72]	; (8011164 <TIM_Base_SetConfig+0x134>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d00b      	beq.n	8011138 <TIM_Base_SetConfig+0x108>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4a11      	ldr	r2, [pc, #68]	; (8011168 <TIM_Base_SetConfig+0x138>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d007      	beq.n	8011138 <TIM_Base_SetConfig+0x108>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	4a10      	ldr	r2, [pc, #64]	; (801116c <TIM_Base_SetConfig+0x13c>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d003      	beq.n	8011138 <TIM_Base_SetConfig+0x108>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	4a0f      	ldr	r2, [pc, #60]	; (8011170 <TIM_Base_SetConfig+0x140>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d103      	bne.n	8011140 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	691a      	ldr	r2, [r3, #16]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2201      	movs	r2, #1
 8011144:	615a      	str	r2, [r3, #20]
}
 8011146:	bf00      	nop
 8011148:	3714      	adds	r7, #20
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop
 8011154:	40010000 	.word	0x40010000
 8011158:	40000400 	.word	0x40000400
 801115c:	40000800 	.word	0x40000800
 8011160:	40000c00 	.word	0x40000c00
 8011164:	40010400 	.word	0x40010400
 8011168:	40014000 	.word	0x40014000
 801116c:	40014400 	.word	0x40014400
 8011170:	40014800 	.word	0x40014800
 8011174:	4000e000 	.word	0x4000e000
 8011178:	4000e400 	.word	0x4000e400

0801117c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011184:	bf00      	nop
 8011186:	370c      	adds	r7, #12
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80111ac:	bf00      	nop
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80111b8:	b084      	sub	sp, #16
 80111ba:	b480      	push	{r7}
 80111bc:	b085      	sub	sp, #20
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	f107 001c 	add.w	r0, r7, #28
 80111c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80111ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80111d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80111d2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80111d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80111d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80111d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80111da:	431a      	orrs	r2, r3
             Init.ClockDiv
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80111de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	4313      	orrs	r3, r2
 80111e4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	685a      	ldr	r2, [r3, #4]
 80111ea:	4b07      	ldr	r3, [pc, #28]	; (8011208 <SDMMC_Init+0x50>)
 80111ec:	4013      	ands	r3, r2
 80111ee:	68fa      	ldr	r2, [r7, #12]
 80111f0:	431a      	orrs	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80111f6:	2300      	movs	r3, #0
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3714      	adds	r7, #20
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	b004      	add	sp, #16
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	ffc02c00 	.word	0xffc02c00

0801120c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801121a:	4618      	mov	r0, r3
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr

08011226 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011226:	b480      	push	{r7}
 8011228:	b083      	sub	sp, #12
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f043 0203 	orr.w	r2, r3, #3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801123a:	2300      	movs	r3, #0
}
 801123c:	4618      	mov	r0, r3
 801123e:	370c      	adds	r7, #12
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f003 0303 	and.w	r3, r3, #3
}
 8011258:	4618      	mov	r0, r3
 801125a:	370c      	adds	r7, #12
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr

08011264 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011282:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011288:	431a      	orrs	r2, r3
                       Command->CPSM);
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801128e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011290:	68fa      	ldr	r2, [r7, #12]
 8011292:	4313      	orrs	r3, r2
 8011294:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	68da      	ldr	r2, [r3, #12]
 801129a:	4b06      	ldr	r3, [pc, #24]	; (80112b4 <SDMMC_SendCommand+0x50>)
 801129c:	4013      	ands	r3, r2
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	431a      	orrs	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr
 80112b4:	fffee0c0 	.word	0xfffee0c0

080112b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	691b      	ldr	r3, [r3, #16]
 80112c4:	b2db      	uxtb	r3, r3
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80112d2:	b480      	push	{r7}
 80112d4:	b085      	sub	sp, #20
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3314      	adds	r3, #20
 80112e0:	461a      	mov	r2, r3
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	4413      	add	r3, r2
 80112e6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3714      	adds	r7, #20
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b085      	sub	sp, #20
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	685a      	ldr	r2, [r3, #4]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801131e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011324:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801132a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801132c:	68fa      	ldr	r2, [r7, #12]
 801132e:	4313      	orrs	r3, r2
 8011330:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011336:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	431a      	orrs	r2, r3
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011342:	2300      	movs	r3, #0

}
 8011344:	4618      	mov	r0, r3
 8011346:	3714      	adds	r7, #20
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b088      	sub	sp, #32
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801135e:	2310      	movs	r3, #16
 8011360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011368:	2300      	movs	r3, #0
 801136a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011372:	f107 0308 	add.w	r3, r7, #8
 8011376:	4619      	mov	r1, r3
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f7ff ff73 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011382:	2110      	movs	r1, #16
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f000 fa21 	bl	80117cc <SDMMC_GetCmdResp1>
 801138a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801138c:	69fb      	ldr	r3, [r7, #28]
}
 801138e:	4618      	mov	r0, r3
 8011390:	3720      	adds	r7, #32
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b088      	sub	sp, #32
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
 801139e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80113a4:	2311      	movs	r3, #17
 80113a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113ae:	2300      	movs	r3, #0
 80113b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113b8:	f107 0308 	add.w	r3, r7, #8
 80113bc:	4619      	mov	r1, r3
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff ff50 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80113c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80113c8:	2111      	movs	r1, #17
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 f9fe 	bl	80117cc <SDMMC_GetCmdResp1>
 80113d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113d2:	69fb      	ldr	r3, [r7, #28]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3720      	adds	r7, #32
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b088      	sub	sp, #32
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80113ea:	2312      	movs	r3, #18
 80113ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113f4:	2300      	movs	r3, #0
 80113f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113fe:	f107 0308 	add.w	r3, r7, #8
 8011402:	4619      	mov	r1, r3
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f7ff ff2d 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801140a:	f241 3288 	movw	r2, #5000	; 0x1388
 801140e:	2112      	movs	r1, #18
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 f9db 	bl	80117cc <SDMMC_GetCmdResp1>
 8011416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011418:	69fb      	ldr	r3, [r7, #28]
}
 801141a:	4618      	mov	r0, r3
 801141c:	3720      	adds	r7, #32
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011422:	b580      	push	{r7, lr}
 8011424:	b088      	sub	sp, #32
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
 801142a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011430:	2318      	movs	r3, #24
 8011432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801143a:	2300      	movs	r3, #0
 801143c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011444:	f107 0308 	add.w	r3, r7, #8
 8011448:	4619      	mov	r1, r3
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7ff ff0a 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011450:	f241 3288 	movw	r2, #5000	; 0x1388
 8011454:	2118      	movs	r1, #24
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f9b8 	bl	80117cc <SDMMC_GetCmdResp1>
 801145c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801145e:	69fb      	ldr	r3, [r7, #28]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3720      	adds	r7, #32
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b088      	sub	sp, #32
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011476:	2319      	movs	r3, #25
 8011478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801147a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801147e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011480:	2300      	movs	r3, #0
 8011482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011488:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801148a:	f107 0308 	add.w	r3, r7, #8
 801148e:	4619      	mov	r1, r3
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7ff fee7 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011496:	f241 3288 	movw	r2, #5000	; 0x1388
 801149a:	2119      	movs	r1, #25
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f000 f995 	bl	80117cc <SDMMC_GetCmdResp1>
 80114a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114a4:	69fb      	ldr	r3, [r7, #28]
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3720      	adds	r7, #32
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b088      	sub	sp, #32
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80114bc:	2307      	movs	r3, #7
 80114be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114d0:	f107 0308 	add.w	r3, r7, #8
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f7ff fec4 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80114dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80114e0:	2107      	movs	r1, #7
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f972 	bl	80117cc <SDMMC_GetCmdResp1>
 80114e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114ea:	69fb      	ldr	r3, [r7, #28]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3720      	adds	r7, #32
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80114fc:	2300      	movs	r3, #0
 80114fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011500:	2300      	movs	r3, #0
 8011502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011504:	2300      	movs	r3, #0
 8011506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011508:	2300      	movs	r3, #0
 801150a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011510:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011512:	f107 0308 	add.w	r3, r7, #8
 8011516:	4619      	mov	r1, r3
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f7ff fea3 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 fb96 	bl	8011c50 <SDMMC_GetCmdError>
 8011524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011526:	69fb      	ldr	r3, [r7, #28]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3720      	adds	r7, #32
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011538:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801153c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801153e:	2308      	movs	r3, #8
 8011540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011548:	2300      	movs	r3, #0
 801154a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011550:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011552:	f107 0308 	add.w	r3, r7, #8
 8011556:	4619      	mov	r1, r3
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f7ff fe83 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 fb28 	bl	8011bb4 <SDMMC_GetCmdResp7>
 8011564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011566:	69fb      	ldr	r3, [r7, #28]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3720      	adds	r7, #32
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b088      	sub	sp, #32
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801157e:	2337      	movs	r3, #55	; 0x37
 8011580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011588:	2300      	movs	r3, #0
 801158a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011590:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011592:	f107 0308 	add.w	r3, r7, #8
 8011596:	4619      	mov	r1, r3
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff fe63 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80115a2:	2137      	movs	r1, #55	; 0x37
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 f911 	bl	80117cc <SDMMC_GetCmdResp1>
 80115aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115ac:	69fb      	ldr	r3, [r7, #28]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3720      	adds	r7, #32
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b088      	sub	sp, #32
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80115c4:	2329      	movs	r3, #41	; 0x29
 80115c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115ce:	2300      	movs	r3, #0
 80115d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115d8:	f107 0308 	add.w	r3, r7, #8
 80115dc:	4619      	mov	r1, r3
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7ff fe40 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 fa2d 	bl	8011a44 <SDMMC_GetCmdResp3>
 80115ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115ec:	69fb      	ldr	r3, [r7, #28]
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3720      	adds	r7, #32
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b088      	sub	sp, #32
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
 80115fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011604:	2306      	movs	r3, #6
 8011606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011608:	f44f 7380 	mov.w	r3, #256	; 0x100
 801160c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011618:	f107 0308 	add.w	r3, r7, #8
 801161c:	4619      	mov	r1, r3
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7ff fe20 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011624:	f241 3288 	movw	r2, #5000	; 0x1388
 8011628:	2106      	movs	r1, #6
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 f8ce 	bl	80117cc <SDMMC_GetCmdResp1>
 8011630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011632:	69fb      	ldr	r3, [r7, #28]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3720      	adds	r7, #32
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b088      	sub	sp, #32
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011644:	2300      	movs	r3, #0
 8011646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011648:	2333      	movs	r3, #51	; 0x33
 801164a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801164c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011652:	2300      	movs	r3, #0
 8011654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801165a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801165c:	f107 0308 	add.w	r3, r7, #8
 8011660:	4619      	mov	r1, r3
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7ff fdfe 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011668:	f241 3288 	movw	r2, #5000	; 0x1388
 801166c:	2133      	movs	r1, #51	; 0x33
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 f8ac 	bl	80117cc <SDMMC_GetCmdResp1>
 8011674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011676:	69fb      	ldr	r3, [r7, #28]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3720      	adds	r7, #32
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b088      	sub	sp, #32
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011688:	2300      	movs	r3, #0
 801168a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801168c:	2302      	movs	r3, #2
 801168e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011690:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011696:	2300      	movs	r3, #0
 8011698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801169e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116a0:	f107 0308 	add.w	r3, r7, #8
 80116a4:	4619      	mov	r1, r3
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7ff fddc 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f000 f97f 	bl	80119b0 <SDMMC_GetCmdResp2>
 80116b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116b4:	69fb      	ldr	r3, [r7, #28]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3720      	adds	r7, #32
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b088      	sub	sp, #32
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80116cc:	2309      	movs	r3, #9
 80116ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80116d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80116d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116d6:	2300      	movs	r3, #0
 80116d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116e0:	f107 0308 	add.w	r3, r7, #8
 80116e4:	4619      	mov	r1, r3
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7ff fdbc 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f000 f95f 	bl	80119b0 <SDMMC_GetCmdResp2>
 80116f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116f4:	69fb      	ldr	r3, [r7, #28]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3720      	adds	r7, #32
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b088      	sub	sp, #32
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011708:	2300      	movs	r3, #0
 801170a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801170c:	2303      	movs	r3, #3
 801170e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011716:	2300      	movs	r3, #0
 8011718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801171e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011720:	f107 0308 	add.w	r3, r7, #8
 8011724:	4619      	mov	r1, r3
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7ff fd9c 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801172c:	683a      	ldr	r2, [r7, #0]
 801172e:	2103      	movs	r1, #3
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f000 f9c7 	bl	8011ac4 <SDMMC_GetCmdResp6>
 8011736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011738:	69fb      	ldr	r3, [r7, #28]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3720      	adds	r7, #32
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b088      	sub	sp, #32
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
 801174a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011750:	230d      	movs	r3, #13
 8011752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801175a:	2300      	movs	r3, #0
 801175c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011764:	f107 0308 	add.w	r3, r7, #8
 8011768:	4619      	mov	r1, r3
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f7ff fd7a 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011770:	f241 3288 	movw	r2, #5000	; 0x1388
 8011774:	210d      	movs	r1, #13
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f828 	bl	80117cc <SDMMC_GetCmdResp1>
 801177c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801177e:	69fb      	ldr	r3, [r7, #28]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3720      	adds	r7, #32
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b088      	sub	sp, #32
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011790:	2300      	movs	r3, #0
 8011792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011794:	230d      	movs	r3, #13
 8011796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011798:	f44f 7380 	mov.w	r3, #256	; 0x100
 801179c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801179e:	2300      	movs	r3, #0
 80117a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117a8:	f107 0308 	add.w	r3, r7, #8
 80117ac:	4619      	mov	r1, r3
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ff fd58 	bl	8011264 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80117b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80117b8:	210d      	movs	r1, #13
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 f806 	bl	80117cc <SDMMC_GetCmdResp1>
 80117c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117c2:	69fb      	ldr	r3, [r7, #28]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3720      	adds	r7, #32
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b088      	sub	sp, #32
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	460b      	mov	r3, r1
 80117d6:	607a      	str	r2, [r7, #4]
 80117d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80117da:	4b70      	ldr	r3, [pc, #448]	; (801199c <SDMMC_GetCmdResp1+0x1d0>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	4a70      	ldr	r2, [pc, #448]	; (80119a0 <SDMMC_GetCmdResp1+0x1d4>)
 80117e0:	fba2 2303 	umull	r2, r3, r2, r3
 80117e4:	0a5a      	lsrs	r2, r3, #9
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	fb02 f303 	mul.w	r3, r2, r3
 80117ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	1e5a      	subs	r2, r3, #1
 80117f2:	61fa      	str	r2, [r7, #28]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d102      	bne.n	80117fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117fc:	e0c9      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011802:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011804:	69ba      	ldr	r2, [r7, #24]
 8011806:	4b67      	ldr	r3, [pc, #412]	; (80119a4 <SDMMC_GetCmdResp1+0x1d8>)
 8011808:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801180a:	2b00      	cmp	r3, #0
 801180c:	d0ef      	beq.n	80117ee <SDMMC_GetCmdResp1+0x22>
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011814:	2b00      	cmp	r3, #0
 8011816:	d1ea      	bne.n	80117ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801181c:	f003 0304 	and.w	r3, r3, #4
 8011820:	2b00      	cmp	r3, #0
 8011822:	d004      	beq.n	801182e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2204      	movs	r2, #4
 8011828:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801182a:	2304      	movs	r3, #4
 801182c:	e0b1      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011832:	f003 0301 	and.w	r3, r3, #1
 8011836:	2b00      	cmp	r3, #0
 8011838:	d004      	beq.n	8011844 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2201      	movs	r2, #1
 801183e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011840:	2301      	movs	r3, #1
 8011842:	e0a6      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	4a58      	ldr	r2, [pc, #352]	; (80119a8 <SDMMC_GetCmdResp1+0x1dc>)
 8011848:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801184a:	68f8      	ldr	r0, [r7, #12]
 801184c:	f7ff fd34 	bl	80112b8 <SDMMC_GetCommandResponse>
 8011850:	4603      	mov	r3, r0
 8011852:	461a      	mov	r2, r3
 8011854:	7afb      	ldrb	r3, [r7, #11]
 8011856:	4293      	cmp	r3, r2
 8011858:	d001      	beq.n	801185e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801185a:	2301      	movs	r3, #1
 801185c:	e099      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801185e:	2100      	movs	r1, #0
 8011860:	68f8      	ldr	r0, [r7, #12]
 8011862:	f7ff fd36 	bl	80112d2 <SDMMC_GetResponse>
 8011866:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011868:	697a      	ldr	r2, [r7, #20]
 801186a:	4b50      	ldr	r3, [pc, #320]	; (80119ac <SDMMC_GetCmdResp1+0x1e0>)
 801186c:	4013      	ands	r3, r2
 801186e:	2b00      	cmp	r3, #0
 8011870:	d101      	bne.n	8011876 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011872:	2300      	movs	r3, #0
 8011874:	e08d      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	2b00      	cmp	r3, #0
 801187a:	da02      	bge.n	8011882 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801187c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011880:	e087      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011888:	2b00      	cmp	r3, #0
 801188a:	d001      	beq.n	8011890 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801188c:	2340      	movs	r3, #64	; 0x40
 801188e:	e080      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011896:	2b00      	cmp	r3, #0
 8011898:	d001      	beq.n	801189e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801189a:	2380      	movs	r3, #128	; 0x80
 801189c:	e079      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d002      	beq.n	80118ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80118a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118ac:	e071      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d002      	beq.n	80118be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80118b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118bc:	e069      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d002      	beq.n	80118ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80118c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118cc:	e061      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d002      	beq.n	80118de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80118d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80118dc:	e059      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d002      	beq.n	80118ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80118e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118ec:	e051      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d002      	beq.n	80118fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80118f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80118fc:	e049      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011904:	2b00      	cmp	r3, #0
 8011906:	d002      	beq.n	801190e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011908:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801190c:	e041      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011914:	2b00      	cmp	r3, #0
 8011916:	d002      	beq.n	801191e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801191c:	e039      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011924:	2b00      	cmp	r3, #0
 8011926:	d002      	beq.n	801192e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801192c:	e031      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011934:	2b00      	cmp	r3, #0
 8011936:	d002      	beq.n	801193e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801193c:	e029      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011944:	2b00      	cmp	r3, #0
 8011946:	d002      	beq.n	801194e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011948:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801194c:	e021      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011954:	2b00      	cmp	r3, #0
 8011956:	d002      	beq.n	801195e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011958:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801195c:	e019      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011964:	2b00      	cmp	r3, #0
 8011966:	d002      	beq.n	801196e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801196c:	e011      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011974:	2b00      	cmp	r3, #0
 8011976:	d002      	beq.n	801197e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011978:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801197c:	e009      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	f003 0308 	and.w	r3, r3, #8
 8011984:	2b00      	cmp	r3, #0
 8011986:	d002      	beq.n	801198e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011988:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801198c:	e001      	b.n	8011992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801198e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011992:	4618      	mov	r0, r3
 8011994:	3720      	adds	r7, #32
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	240003a4 	.word	0x240003a4
 80119a0:	10624dd3 	.word	0x10624dd3
 80119a4:	00200045 	.word	0x00200045
 80119a8:	002000c5 	.word	0x002000c5
 80119ac:	fdffe008 	.word	0xfdffe008

080119b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80119b8:	4b1f      	ldr	r3, [pc, #124]	; (8011a38 <SDMMC_GetCmdResp2+0x88>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	4a1f      	ldr	r2, [pc, #124]	; (8011a3c <SDMMC_GetCmdResp2+0x8c>)
 80119be:	fba2 2303 	umull	r2, r3, r2, r3
 80119c2:	0a5b      	lsrs	r3, r3, #9
 80119c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80119c8:	fb02 f303 	mul.w	r3, r2, r3
 80119cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	1e5a      	subs	r2, r3, #1
 80119d2:	60fa      	str	r2, [r7, #12]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d102      	bne.n	80119de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119dc:	e026      	b.n	8011a2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d0ef      	beq.n	80119ce <SDMMC_GetCmdResp2+0x1e>
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1ea      	bne.n	80119ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119fc:	f003 0304 	and.w	r3, r3, #4
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d004      	beq.n	8011a0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2204      	movs	r2, #4
 8011a08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a0a:	2304      	movs	r3, #4
 8011a0c:	e00e      	b.n	8011a2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a12:	f003 0301 	and.w	r3, r3, #1
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d004      	beq.n	8011a24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a20:	2301      	movs	r3, #1
 8011a22:	e003      	b.n	8011a2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4a06      	ldr	r2, [pc, #24]	; (8011a40 <SDMMC_GetCmdResp2+0x90>)
 8011a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a2a:	2300      	movs	r3, #0
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3714      	adds	r7, #20
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr
 8011a38:	240003a4 	.word	0x240003a4
 8011a3c:	10624dd3 	.word	0x10624dd3
 8011a40:	002000c5 	.word	0x002000c5

08011a44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b085      	sub	sp, #20
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011a4c:	4b1a      	ldr	r3, [pc, #104]	; (8011ab8 <SDMMC_GetCmdResp3+0x74>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4a1a      	ldr	r2, [pc, #104]	; (8011abc <SDMMC_GetCmdResp3+0x78>)
 8011a52:	fba2 2303 	umull	r2, r3, r2, r3
 8011a56:	0a5b      	lsrs	r3, r3, #9
 8011a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a5c:	fb02 f303 	mul.w	r3, r2, r3
 8011a60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	1e5a      	subs	r2, r3, #1
 8011a66:	60fa      	str	r2, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d102      	bne.n	8011a72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a70:	e01b      	b.n	8011aaa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d0ef      	beq.n	8011a62 <SDMMC_GetCmdResp3+0x1e>
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d1ea      	bne.n	8011a62 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a90:	f003 0304 	and.w	r3, r3, #4
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d004      	beq.n	8011aa2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2204      	movs	r2, #4
 8011a9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a9e:	2304      	movs	r3, #4
 8011aa0:	e003      	b.n	8011aaa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	4a06      	ldr	r2, [pc, #24]	; (8011ac0 <SDMMC_GetCmdResp3+0x7c>)
 8011aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr
 8011ab6:	bf00      	nop
 8011ab8:	240003a4 	.word	0x240003a4
 8011abc:	10624dd3 	.word	0x10624dd3
 8011ac0:	002000c5 	.word	0x002000c5

08011ac4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b088      	sub	sp, #32
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	460b      	mov	r3, r1
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011ad2:	4b35      	ldr	r3, [pc, #212]	; (8011ba8 <SDMMC_GetCmdResp6+0xe4>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4a35      	ldr	r2, [pc, #212]	; (8011bac <SDMMC_GetCmdResp6+0xe8>)
 8011ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8011adc:	0a5b      	lsrs	r3, r3, #9
 8011ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ae2:	fb02 f303 	mul.w	r3, r2, r3
 8011ae6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	1e5a      	subs	r2, r3, #1
 8011aec:	61fa      	str	r2, [r7, #28]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d102      	bne.n	8011af8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011af2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011af6:	e052      	b.n	8011b9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011afc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d0ef      	beq.n	8011ae8 <SDMMC_GetCmdResp6+0x24>
 8011b08:	69bb      	ldr	r3, [r7, #24]
 8011b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1ea      	bne.n	8011ae8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b16:	f003 0304 	and.w	r3, r3, #4
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d004      	beq.n	8011b28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2204      	movs	r2, #4
 8011b22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b24:	2304      	movs	r3, #4
 8011b26:	e03a      	b.n	8011b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b2c:	f003 0301 	and.w	r3, r3, #1
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d004      	beq.n	8011b3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2201      	movs	r2, #1
 8011b38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	e02f      	b.n	8011b9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011b3e:	68f8      	ldr	r0, [r7, #12]
 8011b40:	f7ff fbba 	bl	80112b8 <SDMMC_GetCommandResponse>
 8011b44:	4603      	mov	r3, r0
 8011b46:	461a      	mov	r2, r3
 8011b48:	7afb      	ldrb	r3, [r7, #11]
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d001      	beq.n	8011b52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e025      	b.n	8011b9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	4a16      	ldr	r2, [pc, #88]	; (8011bb0 <SDMMC_GetCmdResp6+0xec>)
 8011b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011b58:	2100      	movs	r1, #0
 8011b5a:	68f8      	ldr	r0, [r7, #12]
 8011b5c:	f7ff fbb9 	bl	80112d2 <SDMMC_GetResponse>
 8011b60:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d106      	bne.n	8011b7a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	0c1b      	lsrs	r3, r3, #16
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011b76:	2300      	movs	r3, #0
 8011b78:	e011      	b.n	8011b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d002      	beq.n	8011b8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b88:	e009      	b.n	8011b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d002      	beq.n	8011b9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b98:	e001      	b.n	8011b9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3720      	adds	r7, #32
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	240003a4 	.word	0x240003a4
 8011bac:	10624dd3 	.word	0x10624dd3
 8011bb0:	002000c5 	.word	0x002000c5

08011bb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b085      	sub	sp, #20
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011bbc:	4b22      	ldr	r3, [pc, #136]	; (8011c48 <SDMMC_GetCmdResp7+0x94>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a22      	ldr	r2, [pc, #136]	; (8011c4c <SDMMC_GetCmdResp7+0x98>)
 8011bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8011bc6:	0a5b      	lsrs	r3, r3, #9
 8011bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bcc:	fb02 f303 	mul.w	r3, r2, r3
 8011bd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	1e5a      	subs	r2, r3, #1
 8011bd6:	60fa      	str	r2, [r7, #12]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d102      	bne.n	8011be2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011be0:	e02c      	b.n	8011c3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011be6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d0ef      	beq.n	8011bd2 <SDMMC_GetCmdResp7+0x1e>
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d1ea      	bne.n	8011bd2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c00:	f003 0304 	and.w	r3, r3, #4
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d004      	beq.n	8011c12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2204      	movs	r2, #4
 8011c0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c0e:	2304      	movs	r3, #4
 8011c10:	e014      	b.n	8011c3c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c16:	f003 0301 	and.w	r3, r3, #1
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d004      	beq.n	8011c28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2201      	movs	r2, #1
 8011c22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c24:	2301      	movs	r3, #1
 8011c26:	e009      	b.n	8011c3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d002      	beq.n	8011c3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2240      	movs	r2, #64	; 0x40
 8011c38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011c3a:	2300      	movs	r3, #0

}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3714      	adds	r7, #20
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr
 8011c48:	240003a4 	.word	0x240003a4
 8011c4c:	10624dd3 	.word	0x10624dd3

08011c50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011c58:	4b11      	ldr	r3, [pc, #68]	; (8011ca0 <SDMMC_GetCmdError+0x50>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	4a11      	ldr	r2, [pc, #68]	; (8011ca4 <SDMMC_GetCmdError+0x54>)
 8011c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8011c62:	0a5b      	lsrs	r3, r3, #9
 8011c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c68:	fb02 f303 	mul.w	r3, r2, r3
 8011c6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	1e5a      	subs	r2, r3, #1
 8011c72:	60fa      	str	r2, [r7, #12]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d102      	bne.n	8011c7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011c7c:	e009      	b.n	8011c92 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d0f1      	beq.n	8011c6e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4a06      	ldr	r2, [pc, #24]	; (8011ca8 <SDMMC_GetCmdError+0x58>)
 8011c8e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011c90:	2300      	movs	r3, #0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3714      	adds	r7, #20
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr
 8011c9e:	bf00      	nop
 8011ca0:	240003a4 	.word	0x240003a4
 8011ca4:	10624dd3 	.word	0x10624dd3
 8011ca8:	002000c5 	.word	0x002000c5

08011cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011cac:	b084      	sub	sp, #16
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b084      	sub	sp, #16
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
 8011cb6:	f107 001c 	add.w	r0, r7, #28
 8011cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc0:	2b01      	cmp	r3, #1
 8011cc2:	d120      	bne.n	8011d06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	68da      	ldr	r2, [r3, #12]
 8011cd4:	4b2a      	ldr	r3, [pc, #168]	; (8011d80 <USB_CoreInit+0xd4>)
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d105      	bne.n	8011cfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f001 faf8 	bl	80132f0 <USB_CoreReset>
 8011d00:	4603      	mov	r3, r0
 8011d02:	73fb      	strb	r3, [r7, #15]
 8011d04:	e01a      	b.n	8011d3c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f001 faec 	bl	80132f0 <USB_CoreReset>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d106      	bne.n	8011d30 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8011d2e:	e005      	b.n	8011d3c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d116      	bne.n	8011d70 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011d50:	4b0c      	ldr	r3, [pc, #48]	; (8011d84 <USB_CoreInit+0xd8>)
 8011d52:	4313      	orrs	r3, r2
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	f043 0206 	orr.w	r2, r3, #6
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	f043 0220 	orr.w	r2, r3, #32
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011d7c:	b004      	add	sp, #16
 8011d7e:	4770      	bx	lr
 8011d80:	ffbdffbf 	.word	0xffbdffbf
 8011d84:	03ee0000 	.word	0x03ee0000

08011d88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011d88:	b480      	push	{r7}
 8011d8a:	b087      	sub	sp, #28
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	60f8      	str	r0, [r7, #12]
 8011d90:	60b9      	str	r1, [r7, #8]
 8011d92:	4613      	mov	r3, r2
 8011d94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011d96:	79fb      	ldrb	r3, [r7, #7]
 8011d98:	2b02      	cmp	r3, #2
 8011d9a:	d165      	bne.n	8011e68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	4a41      	ldr	r2, [pc, #260]	; (8011ea4 <USB_SetTurnaroundTime+0x11c>)
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d906      	bls.n	8011db2 <USB_SetTurnaroundTime+0x2a>
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	4a40      	ldr	r2, [pc, #256]	; (8011ea8 <USB_SetTurnaroundTime+0x120>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d202      	bcs.n	8011db2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011dac:	230f      	movs	r3, #15
 8011dae:	617b      	str	r3, [r7, #20]
 8011db0:	e062      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	4a3c      	ldr	r2, [pc, #240]	; (8011ea8 <USB_SetTurnaroundTime+0x120>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d306      	bcc.n	8011dc8 <USB_SetTurnaroundTime+0x40>
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	4a3b      	ldr	r2, [pc, #236]	; (8011eac <USB_SetTurnaroundTime+0x124>)
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	d202      	bcs.n	8011dc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011dc2:	230e      	movs	r3, #14
 8011dc4:	617b      	str	r3, [r7, #20]
 8011dc6:	e057      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	4a38      	ldr	r2, [pc, #224]	; (8011eac <USB_SetTurnaroundTime+0x124>)
 8011dcc:	4293      	cmp	r3, r2
 8011dce:	d306      	bcc.n	8011dde <USB_SetTurnaroundTime+0x56>
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	4a37      	ldr	r2, [pc, #220]	; (8011eb0 <USB_SetTurnaroundTime+0x128>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d202      	bcs.n	8011dde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011dd8:	230d      	movs	r3, #13
 8011dda:	617b      	str	r3, [r7, #20]
 8011ddc:	e04c      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	4a33      	ldr	r2, [pc, #204]	; (8011eb0 <USB_SetTurnaroundTime+0x128>)
 8011de2:	4293      	cmp	r3, r2
 8011de4:	d306      	bcc.n	8011df4 <USB_SetTurnaroundTime+0x6c>
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	4a32      	ldr	r2, [pc, #200]	; (8011eb4 <USB_SetTurnaroundTime+0x12c>)
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d802      	bhi.n	8011df4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011dee:	230c      	movs	r3, #12
 8011df0:	617b      	str	r3, [r7, #20]
 8011df2:	e041      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	4a2f      	ldr	r2, [pc, #188]	; (8011eb4 <USB_SetTurnaroundTime+0x12c>)
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d906      	bls.n	8011e0a <USB_SetTurnaroundTime+0x82>
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	4a2e      	ldr	r2, [pc, #184]	; (8011eb8 <USB_SetTurnaroundTime+0x130>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d802      	bhi.n	8011e0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011e04:	230b      	movs	r3, #11
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e036      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	4a2a      	ldr	r2, [pc, #168]	; (8011eb8 <USB_SetTurnaroundTime+0x130>)
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	d906      	bls.n	8011e20 <USB_SetTurnaroundTime+0x98>
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	4a29      	ldr	r2, [pc, #164]	; (8011ebc <USB_SetTurnaroundTime+0x134>)
 8011e16:	4293      	cmp	r3, r2
 8011e18:	d802      	bhi.n	8011e20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011e1a:	230a      	movs	r3, #10
 8011e1c:	617b      	str	r3, [r7, #20]
 8011e1e:	e02b      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	4a26      	ldr	r2, [pc, #152]	; (8011ebc <USB_SetTurnaroundTime+0x134>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d906      	bls.n	8011e36 <USB_SetTurnaroundTime+0xae>
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	4a25      	ldr	r2, [pc, #148]	; (8011ec0 <USB_SetTurnaroundTime+0x138>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d202      	bcs.n	8011e36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011e30:	2309      	movs	r3, #9
 8011e32:	617b      	str	r3, [r7, #20]
 8011e34:	e020      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	4a21      	ldr	r2, [pc, #132]	; (8011ec0 <USB_SetTurnaroundTime+0x138>)
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	d306      	bcc.n	8011e4c <USB_SetTurnaroundTime+0xc4>
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	4a20      	ldr	r2, [pc, #128]	; (8011ec4 <USB_SetTurnaroundTime+0x13c>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d802      	bhi.n	8011e4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011e46:	2308      	movs	r3, #8
 8011e48:	617b      	str	r3, [r7, #20]
 8011e4a:	e015      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	4a1d      	ldr	r2, [pc, #116]	; (8011ec4 <USB_SetTurnaroundTime+0x13c>)
 8011e50:	4293      	cmp	r3, r2
 8011e52:	d906      	bls.n	8011e62 <USB_SetTurnaroundTime+0xda>
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	4a1c      	ldr	r2, [pc, #112]	; (8011ec8 <USB_SetTurnaroundTime+0x140>)
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	d202      	bcs.n	8011e62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011e5c:	2307      	movs	r3, #7
 8011e5e:	617b      	str	r3, [r7, #20]
 8011e60:	e00a      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011e62:	2306      	movs	r3, #6
 8011e64:	617b      	str	r3, [r7, #20]
 8011e66:	e007      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011e68:	79fb      	ldrb	r3, [r7, #7]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011e6e:	2309      	movs	r3, #9
 8011e70:	617b      	str	r3, [r7, #20]
 8011e72:	e001      	b.n	8011e78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011e74:	2309      	movs	r3, #9
 8011e76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	68da      	ldr	r2, [r3, #12]
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	029b      	lsls	r3, r3, #10
 8011e8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011e90:	431a      	orrs	r2, r3
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e96:	2300      	movs	r3, #0
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	371c      	adds	r7, #28
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	00d8acbf 	.word	0x00d8acbf
 8011ea8:	00e4e1c0 	.word	0x00e4e1c0
 8011eac:	00f42400 	.word	0x00f42400
 8011eb0:	01067380 	.word	0x01067380
 8011eb4:	011a499f 	.word	0x011a499f
 8011eb8:	01312cff 	.word	0x01312cff
 8011ebc:	014ca43f 	.word	0x014ca43f
 8011ec0:	016e3600 	.word	0x016e3600
 8011ec4:	01a6ab1f 	.word	0x01a6ab1f
 8011ec8:	01e84800 	.word	0x01e84800

08011ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	689b      	ldr	r3, [r3, #8]
 8011ed8:	f043 0201 	orr.w	r2, r3, #1
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011ee0:	2300      	movs	r3, #0
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	370c      	adds	r7, #12
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011eee:	b480      	push	{r7}
 8011ef0:	b083      	sub	sp, #12
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	689b      	ldr	r3, [r3, #8]
 8011efa:	f023 0201 	bic.w	r2, r3, #1
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011f02:	2300      	movs	r3, #0
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	370c      	adds	r7, #12
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011f2c:	78fb      	ldrb	r3, [r7, #3]
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d115      	bne.n	8011f5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011f3e:	2001      	movs	r0, #1
 8011f40:	f7f5 fc3c 	bl	80077bc <HAL_Delay>
      ms++;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	3301      	adds	r3, #1
 8011f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f001 f93f 	bl	80131ce <USB_GetMode>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b01      	cmp	r3, #1
 8011f54:	d01e      	beq.n	8011f94 <USB_SetCurrentMode+0x84>
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2b31      	cmp	r3, #49	; 0x31
 8011f5a:	d9f0      	bls.n	8011f3e <USB_SetCurrentMode+0x2e>
 8011f5c:	e01a      	b.n	8011f94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011f5e:	78fb      	ldrb	r3, [r7, #3]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d115      	bne.n	8011f90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011f70:	2001      	movs	r0, #1
 8011f72:	f7f5 fc23 	bl	80077bc <HAL_Delay>
      ms++;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	3301      	adds	r3, #1
 8011f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f001 f926 	bl	80131ce <USB_GetMode>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d005      	beq.n	8011f94 <USB_SetCurrentMode+0x84>
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b31      	cmp	r3, #49	; 0x31
 8011f8c:	d9f0      	bls.n	8011f70 <USB_SetCurrentMode+0x60>
 8011f8e:	e001      	b.n	8011f94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011f90:	2301      	movs	r3, #1
 8011f92:	e005      	b.n	8011fa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2b32      	cmp	r3, #50	; 0x32
 8011f98:	d101      	bne.n	8011f9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	e000      	b.n	8011fa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011f9e:	2300      	movs	r3, #0
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011fa8:	b084      	sub	sp, #16
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b086      	sub	sp, #24
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	613b      	str	r3, [r7, #16]
 8011fc6:	e009      	b.n	8011fdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	3340      	adds	r3, #64	; 0x40
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	4413      	add	r3, r2
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	613b      	str	r3, [r7, #16]
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	2b0e      	cmp	r3, #14
 8011fe0:	d9f2      	bls.n	8011fc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d11c      	bne.n	8012022 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	68fa      	ldr	r2, [r7, #12]
 8011ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ff6:	f043 0302 	orr.w	r3, r3, #2
 8011ffa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012000:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	601a      	str	r2, [r3, #0]
 8012020:	e005      	b.n	801202e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012026:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012034:	461a      	mov	r2, r3
 8012036:	2300      	movs	r3, #0
 8012038:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012040:	4619      	mov	r1, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012048:	461a      	mov	r2, r3
 801204a:	680b      	ldr	r3, [r1, #0]
 801204c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012050:	2b01      	cmp	r3, #1
 8012052:	d10c      	bne.n	801206e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012056:	2b00      	cmp	r3, #0
 8012058:	d104      	bne.n	8012064 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801205a:	2100      	movs	r1, #0
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 f965 	bl	801232c <USB_SetDevSpeed>
 8012062:	e008      	b.n	8012076 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012064:	2101      	movs	r1, #1
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 f960 	bl	801232c <USB_SetDevSpeed>
 801206c:	e003      	b.n	8012076 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801206e:	2103      	movs	r1, #3
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f95b 	bl	801232c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012076:	2110      	movs	r1, #16
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f8f3 	bl	8012264 <USB_FlushTxFifo>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d001      	beq.n	8012088 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012084:	2301      	movs	r3, #1
 8012086:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f000 f91f 	bl	80122cc <USB_FlushRxFifo>
 801208e:	4603      	mov	r3, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	d001      	beq.n	8012098 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012094:	2301      	movs	r3, #1
 8012096:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801209e:	461a      	mov	r2, r3
 80120a0:	2300      	movs	r3, #0
 80120a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120aa:	461a      	mov	r2, r3
 80120ac:	2300      	movs	r3, #0
 80120ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120b6:	461a      	mov	r2, r3
 80120b8:	2300      	movs	r3, #0
 80120ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120bc:	2300      	movs	r3, #0
 80120be:	613b      	str	r3, [r7, #16]
 80120c0:	e043      	b.n	801214a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	015a      	lsls	r2, r3, #5
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	4413      	add	r3, r2
 80120ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80120d8:	d118      	bne.n	801210c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10a      	bne.n	80120f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	015a      	lsls	r2, r3, #5
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	4413      	add	r3, r2
 80120e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120ec:	461a      	mov	r2, r3
 80120ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80120f2:	6013      	str	r3, [r2, #0]
 80120f4:	e013      	b.n	801211e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	015a      	lsls	r2, r3, #5
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	4413      	add	r3, r2
 80120fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012102:	461a      	mov	r2, r3
 8012104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012108:	6013      	str	r3, [r2, #0]
 801210a:	e008      	b.n	801211e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	015a      	lsls	r2, r3, #5
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	4413      	add	r3, r2
 8012114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012118:	461a      	mov	r2, r3
 801211a:	2300      	movs	r3, #0
 801211c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	015a      	lsls	r2, r3, #5
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	4413      	add	r3, r2
 8012126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801212a:	461a      	mov	r2, r3
 801212c:	2300      	movs	r3, #0
 801212e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	015a      	lsls	r2, r3, #5
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	4413      	add	r3, r2
 8012138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801213c:	461a      	mov	r2, r3
 801213e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	3301      	adds	r3, #1
 8012148:	613b      	str	r3, [r7, #16]
 801214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214c:	693a      	ldr	r2, [r7, #16]
 801214e:	429a      	cmp	r2, r3
 8012150:	d3b7      	bcc.n	80120c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012152:	2300      	movs	r3, #0
 8012154:	613b      	str	r3, [r7, #16]
 8012156:	e043      	b.n	80121e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	015a      	lsls	r2, r3, #5
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	4413      	add	r3, r2
 8012160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801216a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801216e:	d118      	bne.n	80121a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d10a      	bne.n	801218c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	015a      	lsls	r2, r3, #5
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	4413      	add	r3, r2
 801217e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012182:	461a      	mov	r2, r3
 8012184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012188:	6013      	str	r3, [r2, #0]
 801218a:	e013      	b.n	80121b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	015a      	lsls	r2, r3, #5
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	4413      	add	r3, r2
 8012194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012198:	461a      	mov	r2, r3
 801219a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801219e:	6013      	str	r3, [r2, #0]
 80121a0:	e008      	b.n	80121b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	015a      	lsls	r2, r3, #5
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	4413      	add	r3, r2
 80121aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121ae:	461a      	mov	r2, r3
 80121b0:	2300      	movs	r3, #0
 80121b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	015a      	lsls	r2, r3, #5
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	4413      	add	r3, r2
 80121bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121c0:	461a      	mov	r2, r3
 80121c2:	2300      	movs	r3, #0
 80121c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	015a      	lsls	r2, r3, #5
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	4413      	add	r3, r2
 80121ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121d2:	461a      	mov	r2, r3
 80121d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80121d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	3301      	adds	r3, #1
 80121de:	613b      	str	r3, [r7, #16]
 80121e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e2:	693a      	ldr	r2, [r7, #16]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d3b7      	bcc.n	8012158 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ee:	691b      	ldr	r3, [r3, #16]
 80121f0:	68fa      	ldr	r2, [r7, #12]
 80121f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80121f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80121fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2200      	movs	r2, #0
 8012200:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012208:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801220c:	2b00      	cmp	r3, #0
 801220e:	d105      	bne.n	801221c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	699b      	ldr	r3, [r3, #24]
 8012214:	f043 0210 	orr.w	r2, r3, #16
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	699a      	ldr	r2, [r3, #24]
 8012220:	4b0e      	ldr	r3, [pc, #56]	; (801225c <USB_DevInit+0x2b4>)
 8012222:	4313      	orrs	r3, r2
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801222a:	2b00      	cmp	r3, #0
 801222c:	d005      	beq.n	801223a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	699b      	ldr	r3, [r3, #24]
 8012232:	f043 0208 	orr.w	r2, r3, #8
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801223a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801223c:	2b01      	cmp	r3, #1
 801223e:	d105      	bne.n	801224c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	699a      	ldr	r2, [r3, #24]
 8012244:	4b06      	ldr	r3, [pc, #24]	; (8012260 <USB_DevInit+0x2b8>)
 8012246:	4313      	orrs	r3, r2
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801224c:	7dfb      	ldrb	r3, [r7, #23]
}
 801224e:	4618      	mov	r0, r3
 8012250:	3718      	adds	r7, #24
 8012252:	46bd      	mov	sp, r7
 8012254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012258:	b004      	add	sp, #16
 801225a:	4770      	bx	lr
 801225c:	803c3800 	.word	0x803c3800
 8012260:	40000004 	.word	0x40000004

08012264 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012264:	b480      	push	{r7}
 8012266:	b085      	sub	sp, #20
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801226e:	2300      	movs	r3, #0
 8012270:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	3301      	adds	r3, #1
 8012276:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	4a13      	ldr	r2, [pc, #76]	; (80122c8 <USB_FlushTxFifo+0x64>)
 801227c:	4293      	cmp	r3, r2
 801227e:	d901      	bls.n	8012284 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012280:	2303      	movs	r3, #3
 8012282:	e01b      	b.n	80122bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	691b      	ldr	r3, [r3, #16]
 8012288:	2b00      	cmp	r3, #0
 801228a:	daf2      	bge.n	8012272 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801228c:	2300      	movs	r3, #0
 801228e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	019b      	lsls	r3, r3, #6
 8012294:	f043 0220 	orr.w	r2, r3, #32
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	3301      	adds	r3, #1
 80122a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	4a08      	ldr	r2, [pc, #32]	; (80122c8 <USB_FlushTxFifo+0x64>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d901      	bls.n	80122ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80122aa:	2303      	movs	r3, #3
 80122ac:	e006      	b.n	80122bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	691b      	ldr	r3, [r3, #16]
 80122b2:	f003 0320 	and.w	r3, r3, #32
 80122b6:	2b20      	cmp	r3, #32
 80122b8:	d0f0      	beq.n	801229c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80122ba:	2300      	movs	r3, #0
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3714      	adds	r7, #20
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr
 80122c8:	00030d40 	.word	0x00030d40

080122cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b085      	sub	sp, #20
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80122d4:	2300      	movs	r3, #0
 80122d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	3301      	adds	r3, #1
 80122dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	4a11      	ldr	r2, [pc, #68]	; (8012328 <USB_FlushRxFifo+0x5c>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d901      	bls.n	80122ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80122e6:	2303      	movs	r3, #3
 80122e8:	e018      	b.n	801231c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	691b      	ldr	r3, [r3, #16]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	daf2      	bge.n	80122d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80122f2:	2300      	movs	r3, #0
 80122f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2210      	movs	r2, #16
 80122fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	3301      	adds	r3, #1
 8012300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	4a08      	ldr	r2, [pc, #32]	; (8012328 <USB_FlushRxFifo+0x5c>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d901      	bls.n	801230e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801230a:	2303      	movs	r3, #3
 801230c:	e006      	b.n	801231c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	691b      	ldr	r3, [r3, #16]
 8012312:	f003 0310 	and.w	r3, r3, #16
 8012316:	2b10      	cmp	r3, #16
 8012318:	d0f0      	beq.n	80122fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801231a:	2300      	movs	r3, #0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3714      	adds	r7, #20
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr
 8012328:	00030d40 	.word	0x00030d40

0801232c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801232c:	b480      	push	{r7}
 801232e:	b085      	sub	sp, #20
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	78fb      	ldrb	r3, [r7, #3]
 8012346:	68f9      	ldr	r1, [r7, #12]
 8012348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801234c:	4313      	orrs	r3, r2
 801234e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012350:	2300      	movs	r3, #0
}
 8012352:	4618      	mov	r0, r3
 8012354:	3714      	adds	r7, #20
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr

0801235e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801235e:	b480      	push	{r7}
 8012360:	b087      	sub	sp, #28
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	f003 0306 	and.w	r3, r3, #6
 8012376:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d102      	bne.n	8012384 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801237e:	2300      	movs	r3, #0
 8012380:	75fb      	strb	r3, [r7, #23]
 8012382:	e00a      	b.n	801239a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2b02      	cmp	r3, #2
 8012388:	d002      	beq.n	8012390 <USB_GetDevSpeed+0x32>
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2b06      	cmp	r3, #6
 801238e:	d102      	bne.n	8012396 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012390:	2302      	movs	r3, #2
 8012392:	75fb      	strb	r3, [r7, #23]
 8012394:	e001      	b.n	801239a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012396:	230f      	movs	r3, #15
 8012398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801239a:	7dfb      	ldrb	r3, [r7, #23]
}
 801239c:	4618      	mov	r0, r3
 801239e:	371c      	adds	r7, #28
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80123a8:	b480      	push	{r7}
 80123aa:	b085      	sub	sp, #20
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	785b      	ldrb	r3, [r3, #1]
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d139      	bne.n	8012438 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123ca:	69da      	ldr	r2, [r3, #28]
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	f003 030f 	and.w	r3, r3, #15
 80123d4:	2101      	movs	r1, #1
 80123d6:	fa01 f303 	lsl.w	r3, r1, r3
 80123da:	b29b      	uxth	r3, r3
 80123dc:	68f9      	ldr	r1, [r7, #12]
 80123de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123e2:	4313      	orrs	r3, r2
 80123e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	015a      	lsls	r2, r3, #5
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	4413      	add	r3, r2
 80123ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d153      	bne.n	80124a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	015a      	lsls	r2, r3, #5
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	4413      	add	r3, r2
 8012404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	689b      	ldr	r3, [r3, #8]
 801240e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	791b      	ldrb	r3, [r3, #4]
 8012416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	059b      	lsls	r3, r3, #22
 801241e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012420:	431a      	orrs	r2, r3
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	0159      	lsls	r1, r3, #5
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	440b      	add	r3, r1
 801242a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801242e:	4619      	mov	r1, r3
 8012430:	4b20      	ldr	r3, [pc, #128]	; (80124b4 <USB_ActivateEndpoint+0x10c>)
 8012432:	4313      	orrs	r3, r2
 8012434:	600b      	str	r3, [r1, #0]
 8012436:	e035      	b.n	80124a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801243e:	69da      	ldr	r2, [r3, #28]
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	f003 030f 	and.w	r3, r3, #15
 8012448:	2101      	movs	r1, #1
 801244a:	fa01 f303 	lsl.w	r3, r1, r3
 801244e:	041b      	lsls	r3, r3, #16
 8012450:	68f9      	ldr	r1, [r7, #12]
 8012452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012456:	4313      	orrs	r3, r2
 8012458:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	015a      	lsls	r2, r3, #5
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	4413      	add	r3, r2
 8012462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801246c:	2b00      	cmp	r3, #0
 801246e:	d119      	bne.n	80124a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	015a      	lsls	r2, r3, #5
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	4413      	add	r3, r2
 8012478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	689b      	ldr	r3, [r3, #8]
 8012482:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	791b      	ldrb	r3, [r3, #4]
 801248a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801248c:	430b      	orrs	r3, r1
 801248e:	431a      	orrs	r2, r3
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	0159      	lsls	r1, r3, #5
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	440b      	add	r3, r1
 8012498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801249c:	4619      	mov	r1, r3
 801249e:	4b05      	ldr	r3, [pc, #20]	; (80124b4 <USB_ActivateEndpoint+0x10c>)
 80124a0:	4313      	orrs	r3, r2
 80124a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80124a4:	2300      	movs	r3, #0
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3714      	adds	r7, #20
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	10008000 	.word	0x10008000

080124b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	785b      	ldrb	r3, [r3, #1]
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	d161      	bne.n	8012598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	015a      	lsls	r2, r3, #5
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	4413      	add	r3, r2
 80124dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80124e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80124ea:	d11f      	bne.n	801252c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	015a      	lsls	r2, r3, #5
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	4413      	add	r3, r2
 80124f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	0151      	lsls	r1, r2, #5
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	440a      	add	r2, r1
 8012502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801250a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	015a      	lsls	r2, r3, #5
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	4413      	add	r3, r2
 8012514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	68ba      	ldr	r2, [r7, #8]
 801251c:	0151      	lsls	r1, r2, #5
 801251e:	68fa      	ldr	r2, [r7, #12]
 8012520:	440a      	add	r2, r1
 8012522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801252a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	f003 030f 	and.w	r3, r3, #15
 801253c:	2101      	movs	r1, #1
 801253e:	fa01 f303 	lsl.w	r3, r1, r3
 8012542:	b29b      	uxth	r3, r3
 8012544:	43db      	mvns	r3, r3
 8012546:	68f9      	ldr	r1, [r7, #12]
 8012548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801254c:	4013      	ands	r3, r2
 801254e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012556:	69da      	ldr	r2, [r3, #28]
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	f003 030f 	and.w	r3, r3, #15
 8012560:	2101      	movs	r1, #1
 8012562:	fa01 f303 	lsl.w	r3, r1, r3
 8012566:	b29b      	uxth	r3, r3
 8012568:	43db      	mvns	r3, r3
 801256a:	68f9      	ldr	r1, [r7, #12]
 801256c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012570:	4013      	ands	r3, r2
 8012572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	015a      	lsls	r2, r3, #5
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	4413      	add	r3, r2
 801257c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	0159      	lsls	r1, r3, #5
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	440b      	add	r3, r1
 801258a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801258e:	4619      	mov	r1, r3
 8012590:	4b35      	ldr	r3, [pc, #212]	; (8012668 <USB_DeactivateEndpoint+0x1b0>)
 8012592:	4013      	ands	r3, r2
 8012594:	600b      	str	r3, [r1, #0]
 8012596:	e060      	b.n	801265a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	015a      	lsls	r2, r3, #5
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	4413      	add	r3, r2
 80125a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80125aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80125ae:	d11f      	bne.n	80125f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	015a      	lsls	r2, r3, #5
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	4413      	add	r3, r2
 80125b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	68ba      	ldr	r2, [r7, #8]
 80125c0:	0151      	lsls	r1, r2, #5
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	440a      	add	r2, r1
 80125c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80125ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	015a      	lsls	r2, r3, #5
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	4413      	add	r3, r2
 80125d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	68ba      	ldr	r2, [r7, #8]
 80125e0:	0151      	lsls	r1, r2, #5
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	440a      	add	r2, r1
 80125e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80125ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	f003 030f 	and.w	r3, r3, #15
 8012600:	2101      	movs	r1, #1
 8012602:	fa01 f303 	lsl.w	r3, r1, r3
 8012606:	041b      	lsls	r3, r3, #16
 8012608:	43db      	mvns	r3, r3
 801260a:	68f9      	ldr	r1, [r7, #12]
 801260c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012610:	4013      	ands	r3, r2
 8012612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801261a:	69da      	ldr	r2, [r3, #28]
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	f003 030f 	and.w	r3, r3, #15
 8012624:	2101      	movs	r1, #1
 8012626:	fa01 f303 	lsl.w	r3, r1, r3
 801262a:	041b      	lsls	r3, r3, #16
 801262c:	43db      	mvns	r3, r3
 801262e:	68f9      	ldr	r1, [r7, #12]
 8012630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012634:	4013      	ands	r3, r2
 8012636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	015a      	lsls	r2, r3, #5
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	4413      	add	r3, r2
 8012640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	0159      	lsls	r1, r3, #5
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	440b      	add	r3, r1
 801264e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012652:	4619      	mov	r1, r3
 8012654:	4b05      	ldr	r3, [pc, #20]	; (801266c <USB_DeactivateEndpoint+0x1b4>)
 8012656:	4013      	ands	r3, r2
 8012658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801265a:	2300      	movs	r3, #0
}
 801265c:	4618      	mov	r0, r3
 801265e:	3714      	adds	r7, #20
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr
 8012668:	ec337800 	.word	0xec337800
 801266c:	eff37800 	.word	0xeff37800

08012670 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b08a      	sub	sp, #40	; 0x28
 8012674:	af02      	add	r7, sp, #8
 8012676:	60f8      	str	r0, [r7, #12]
 8012678:	60b9      	str	r1, [r7, #8]
 801267a:	4613      	mov	r3, r2
 801267c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	785b      	ldrb	r3, [r3, #1]
 801268c:	2b01      	cmp	r3, #1
 801268e:	f040 8181 	bne.w	8012994 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	691b      	ldr	r3, [r3, #16]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d132      	bne.n	8012700 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	015a      	lsls	r2, r3, #5
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	4413      	add	r3, r2
 80126a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a6:	691a      	ldr	r2, [r3, #16]
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	0159      	lsls	r1, r3, #5
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	440b      	add	r3, r1
 80126b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126b4:	4619      	mov	r1, r3
 80126b6:	4ba5      	ldr	r3, [pc, #660]	; (801294c <USB_EPStartXfer+0x2dc>)
 80126b8:	4013      	ands	r3, r2
 80126ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	015a      	lsls	r2, r3, #5
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	4413      	add	r3, r2
 80126c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126c8:	691b      	ldr	r3, [r3, #16]
 80126ca:	69ba      	ldr	r2, [r7, #24]
 80126cc:	0151      	lsls	r1, r2, #5
 80126ce:	69fa      	ldr	r2, [r7, #28]
 80126d0:	440a      	add	r2, r1
 80126d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80126da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	015a      	lsls	r2, r3, #5
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	4413      	add	r3, r2
 80126e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126e8:	691a      	ldr	r2, [r3, #16]
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	0159      	lsls	r1, r3, #5
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	440b      	add	r3, r1
 80126f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126f6:	4619      	mov	r1, r3
 80126f8:	4b95      	ldr	r3, [pc, #596]	; (8012950 <USB_EPStartXfer+0x2e0>)
 80126fa:	4013      	ands	r3, r2
 80126fc:	610b      	str	r3, [r1, #16]
 80126fe:	e092      	b.n	8012826 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	015a      	lsls	r2, r3, #5
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	4413      	add	r3, r2
 8012708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801270c:	691a      	ldr	r2, [r3, #16]
 801270e:	69bb      	ldr	r3, [r7, #24]
 8012710:	0159      	lsls	r1, r3, #5
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	440b      	add	r3, r1
 8012716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801271a:	4619      	mov	r1, r3
 801271c:	4b8c      	ldr	r3, [pc, #560]	; (8012950 <USB_EPStartXfer+0x2e0>)
 801271e:	4013      	ands	r3, r2
 8012720:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	015a      	lsls	r2, r3, #5
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	4413      	add	r3, r2
 801272a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801272e:	691a      	ldr	r2, [r3, #16]
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	0159      	lsls	r1, r3, #5
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	440b      	add	r3, r1
 8012738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801273c:	4619      	mov	r1, r3
 801273e:	4b83      	ldr	r3, [pc, #524]	; (801294c <USB_EPStartXfer+0x2dc>)
 8012740:	4013      	ands	r3, r2
 8012742:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d11a      	bne.n	8012780 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	691a      	ldr	r2, [r3, #16]
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	689b      	ldr	r3, [r3, #8]
 8012752:	429a      	cmp	r2, r3
 8012754:	d903      	bls.n	801275e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	689a      	ldr	r2, [r3, #8]
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	015a      	lsls	r2, r3, #5
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	4413      	add	r3, r2
 8012766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801276a:	691b      	ldr	r3, [r3, #16]
 801276c:	69ba      	ldr	r2, [r7, #24]
 801276e:	0151      	lsls	r1, r2, #5
 8012770:	69fa      	ldr	r2, [r7, #28]
 8012772:	440a      	add	r2, r1
 8012774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801277c:	6113      	str	r3, [r2, #16]
 801277e:	e01b      	b.n	80127b8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012780:	69bb      	ldr	r3, [r7, #24]
 8012782:	015a      	lsls	r2, r3, #5
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	4413      	add	r3, r2
 8012788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801278c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	6919      	ldr	r1, [r3, #16]
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	440b      	add	r3, r1
 8012798:	1e59      	subs	r1, r3, #1
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	689b      	ldr	r3, [r3, #8]
 801279e:	fbb1 f3f3 	udiv	r3, r1, r3
 80127a2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80127a4:	4b6b      	ldr	r3, [pc, #428]	; (8012954 <USB_EPStartXfer+0x2e4>)
 80127a6:	400b      	ands	r3, r1
 80127a8:	69b9      	ldr	r1, [r7, #24]
 80127aa:	0148      	lsls	r0, r1, #5
 80127ac:	69f9      	ldr	r1, [r7, #28]
 80127ae:	4401      	add	r1, r0
 80127b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80127b4:	4313      	orrs	r3, r2
 80127b6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	015a      	lsls	r2, r3, #5
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	4413      	add	r3, r2
 80127c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127c4:	691a      	ldr	r2, [r3, #16]
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	691b      	ldr	r3, [r3, #16]
 80127ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127ce:	69b9      	ldr	r1, [r7, #24]
 80127d0:	0148      	lsls	r0, r1, #5
 80127d2:	69f9      	ldr	r1, [r7, #28]
 80127d4:	4401      	add	r1, r0
 80127d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80127da:	4313      	orrs	r3, r2
 80127dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	791b      	ldrb	r3, [r3, #4]
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d11f      	bne.n	8012826 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	015a      	lsls	r2, r3, #5
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	4413      	add	r3, r2
 80127ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	69ba      	ldr	r2, [r7, #24]
 80127f6:	0151      	lsls	r1, r2, #5
 80127f8:	69fa      	ldr	r2, [r7, #28]
 80127fa:	440a      	add	r2, r1
 80127fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012800:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012804:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	015a      	lsls	r2, r3, #5
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	4413      	add	r3, r2
 801280e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	69ba      	ldr	r2, [r7, #24]
 8012816:	0151      	lsls	r1, r2, #5
 8012818:	69fa      	ldr	r2, [r7, #28]
 801281a:	440a      	add	r2, r1
 801281c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012824:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012826:	79fb      	ldrb	r3, [r7, #7]
 8012828:	2b01      	cmp	r3, #1
 801282a:	d14b      	bne.n	80128c4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	69db      	ldr	r3, [r3, #28]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d009      	beq.n	8012848 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	015a      	lsls	r2, r3, #5
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	4413      	add	r3, r2
 801283c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012840:	461a      	mov	r2, r3
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	69db      	ldr	r3, [r3, #28]
 8012846:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	791b      	ldrb	r3, [r3, #4]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d128      	bne.n	80128a2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801285c:	2b00      	cmp	r3, #0
 801285e:	d110      	bne.n	8012882 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012860:	69bb      	ldr	r3, [r7, #24]
 8012862:	015a      	lsls	r2, r3, #5
 8012864:	69fb      	ldr	r3, [r7, #28]
 8012866:	4413      	add	r3, r2
 8012868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	69ba      	ldr	r2, [r7, #24]
 8012870:	0151      	lsls	r1, r2, #5
 8012872:	69fa      	ldr	r2, [r7, #28]
 8012874:	440a      	add	r2, r1
 8012876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801287a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801287e:	6013      	str	r3, [r2, #0]
 8012880:	e00f      	b.n	80128a2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	015a      	lsls	r2, r3, #5
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	4413      	add	r3, r2
 801288a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	69ba      	ldr	r2, [r7, #24]
 8012892:	0151      	lsls	r1, r2, #5
 8012894:	69fa      	ldr	r2, [r7, #28]
 8012896:	440a      	add	r2, r1
 8012898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	015a      	lsls	r2, r3, #5
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	4413      	add	r3, r2
 80128aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	69ba      	ldr	r2, [r7, #24]
 80128b2:	0151      	lsls	r1, r2, #5
 80128b4:	69fa      	ldr	r2, [r7, #28]
 80128b6:	440a      	add	r2, r1
 80128b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80128c0:	6013      	str	r3, [r2, #0]
 80128c2:	e16a      	b.n	8012b9a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80128c4:	69bb      	ldr	r3, [r7, #24]
 80128c6:	015a      	lsls	r2, r3, #5
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	4413      	add	r3, r2
 80128cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	69ba      	ldr	r2, [r7, #24]
 80128d4:	0151      	lsls	r1, r2, #5
 80128d6:	69fa      	ldr	r2, [r7, #28]
 80128d8:	440a      	add	r2, r1
 80128da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80128e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	791b      	ldrb	r3, [r3, #4]
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d015      	beq.n	8012918 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	691b      	ldr	r3, [r3, #16]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f000 8152 	beq.w	8012b9a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	f003 030f 	and.w	r3, r3, #15
 8012906:	2101      	movs	r1, #1
 8012908:	fa01 f303 	lsl.w	r3, r1, r3
 801290c:	69f9      	ldr	r1, [r7, #28]
 801290e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012912:	4313      	orrs	r3, r2
 8012914:	634b      	str	r3, [r1, #52]	; 0x34
 8012916:	e140      	b.n	8012b9a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012918:	69fb      	ldr	r3, [r7, #28]
 801291a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801291e:	689b      	ldr	r3, [r3, #8]
 8012920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012924:	2b00      	cmp	r3, #0
 8012926:	d117      	bne.n	8012958 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	015a      	lsls	r2, r3, #5
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	4413      	add	r3, r2
 8012930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	69ba      	ldr	r2, [r7, #24]
 8012938:	0151      	lsls	r1, r2, #5
 801293a:	69fa      	ldr	r2, [r7, #28]
 801293c:	440a      	add	r2, r1
 801293e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012946:	6013      	str	r3, [r2, #0]
 8012948:	e016      	b.n	8012978 <USB_EPStartXfer+0x308>
 801294a:	bf00      	nop
 801294c:	e007ffff 	.word	0xe007ffff
 8012950:	fff80000 	.word	0xfff80000
 8012954:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012958:	69bb      	ldr	r3, [r7, #24]
 801295a:	015a      	lsls	r2, r3, #5
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	4413      	add	r3, r2
 8012960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	69ba      	ldr	r2, [r7, #24]
 8012968:	0151      	lsls	r1, r2, #5
 801296a:	69fa      	ldr	r2, [r7, #28]
 801296c:	440a      	add	r2, r1
 801296e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012976:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	68d9      	ldr	r1, [r3, #12]
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	781a      	ldrb	r2, [r3, #0]
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	691b      	ldr	r3, [r3, #16]
 8012984:	b298      	uxth	r0, r3
 8012986:	79fb      	ldrb	r3, [r7, #7]
 8012988:	9300      	str	r3, [sp, #0]
 801298a:	4603      	mov	r3, r0
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f000 f9b9 	bl	8012d04 <USB_WritePacket>
 8012992:	e102      	b.n	8012b9a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012994:	69bb      	ldr	r3, [r7, #24]
 8012996:	015a      	lsls	r2, r3, #5
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	4413      	add	r3, r2
 801299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129a0:	691a      	ldr	r2, [r3, #16]
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	0159      	lsls	r1, r3, #5
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	440b      	add	r3, r1
 80129aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129ae:	4619      	mov	r1, r3
 80129b0:	4b7c      	ldr	r3, [pc, #496]	; (8012ba4 <USB_EPStartXfer+0x534>)
 80129b2:	4013      	ands	r3, r2
 80129b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80129b6:	69bb      	ldr	r3, [r7, #24]
 80129b8:	015a      	lsls	r2, r3, #5
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	4413      	add	r3, r2
 80129be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129c2:	691a      	ldr	r2, [r3, #16]
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	0159      	lsls	r1, r3, #5
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	440b      	add	r3, r1
 80129cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129d0:	4619      	mov	r1, r3
 80129d2:	4b75      	ldr	r3, [pc, #468]	; (8012ba8 <USB_EPStartXfer+0x538>)
 80129d4:	4013      	ands	r3, r2
 80129d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80129d8:	69bb      	ldr	r3, [r7, #24]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d12f      	bne.n	8012a3e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	691b      	ldr	r3, [r3, #16]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	689a      	ldr	r2, [r3, #8]
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	689a      	ldr	r2, [r3, #8]
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	015a      	lsls	r2, r3, #5
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	4413      	add	r3, r2
 80129fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a02:	691a      	ldr	r2, [r3, #16]
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	6a1b      	ldr	r3, [r3, #32]
 8012a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a0c:	69b9      	ldr	r1, [r7, #24]
 8012a0e:	0148      	lsls	r0, r1, #5
 8012a10:	69f9      	ldr	r1, [r7, #28]
 8012a12:	4401      	add	r1, r0
 8012a14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012a18:	4313      	orrs	r3, r2
 8012a1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	015a      	lsls	r2, r3, #5
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	4413      	add	r3, r2
 8012a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a28:	691b      	ldr	r3, [r3, #16]
 8012a2a:	69ba      	ldr	r2, [r7, #24]
 8012a2c:	0151      	lsls	r1, r2, #5
 8012a2e:	69fa      	ldr	r2, [r7, #28]
 8012a30:	440a      	add	r2, r1
 8012a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a3a:	6113      	str	r3, [r2, #16]
 8012a3c:	e05f      	b.n	8012afe <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	691b      	ldr	r3, [r3, #16]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d123      	bne.n	8012a8e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	015a      	lsls	r2, r3, #5
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a52:	691a      	ldr	r2, [r3, #16]
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	689b      	ldr	r3, [r3, #8]
 8012a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a5c:	69b9      	ldr	r1, [r7, #24]
 8012a5e:	0148      	lsls	r0, r1, #5
 8012a60:	69f9      	ldr	r1, [r7, #28]
 8012a62:	4401      	add	r1, r0
 8012a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	015a      	lsls	r2, r3, #5
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	4413      	add	r3, r2
 8012a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a78:	691b      	ldr	r3, [r3, #16]
 8012a7a:	69ba      	ldr	r2, [r7, #24]
 8012a7c:	0151      	lsls	r1, r2, #5
 8012a7e:	69fa      	ldr	r2, [r7, #28]
 8012a80:	440a      	add	r2, r1
 8012a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a8a:	6113      	str	r3, [r2, #16]
 8012a8c:	e037      	b.n	8012afe <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	691a      	ldr	r2, [r3, #16]
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	689b      	ldr	r3, [r3, #8]
 8012a96:	4413      	add	r3, r2
 8012a98:	1e5a      	subs	r2, r3, #1
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	689b      	ldr	r3, [r3, #8]
 8012a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012aa2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	689b      	ldr	r3, [r3, #8]
 8012aa8:	8afa      	ldrh	r2, [r7, #22]
 8012aaa:	fb03 f202 	mul.w	r2, r3, r2
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	015a      	lsls	r2, r3, #5
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	4413      	add	r3, r2
 8012aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012abe:	691a      	ldr	r2, [r3, #16]
 8012ac0:	8afb      	ldrh	r3, [r7, #22]
 8012ac2:	04d9      	lsls	r1, r3, #19
 8012ac4:	4b39      	ldr	r3, [pc, #228]	; (8012bac <USB_EPStartXfer+0x53c>)
 8012ac6:	400b      	ands	r3, r1
 8012ac8:	69b9      	ldr	r1, [r7, #24]
 8012aca:	0148      	lsls	r0, r1, #5
 8012acc:	69f9      	ldr	r1, [r7, #28]
 8012ace:	4401      	add	r1, r0
 8012ad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012ad8:	69bb      	ldr	r3, [r7, #24]
 8012ada:	015a      	lsls	r2, r3, #5
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	4413      	add	r3, r2
 8012ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ae4:	691a      	ldr	r2, [r3, #16]
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	6a1b      	ldr	r3, [r3, #32]
 8012aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012aee:	69b9      	ldr	r1, [r7, #24]
 8012af0:	0148      	lsls	r0, r1, #5
 8012af2:	69f9      	ldr	r1, [r7, #28]
 8012af4:	4401      	add	r1, r0
 8012af6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012afa:	4313      	orrs	r3, r2
 8012afc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012afe:	79fb      	ldrb	r3, [r7, #7]
 8012b00:	2b01      	cmp	r3, #1
 8012b02:	d10d      	bne.n	8012b20 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d009      	beq.n	8012b20 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	68d9      	ldr	r1, [r3, #12]
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	015a      	lsls	r2, r3, #5
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	4413      	add	r3, r2
 8012b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b1c:	460a      	mov	r2, r1
 8012b1e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	791b      	ldrb	r3, [r3, #4]
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d128      	bne.n	8012b7a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012b28:	69fb      	ldr	r3, [r7, #28]
 8012b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b2e:	689b      	ldr	r3, [r3, #8]
 8012b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d110      	bne.n	8012b5a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012b38:	69bb      	ldr	r3, [r7, #24]
 8012b3a:	015a      	lsls	r2, r3, #5
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	4413      	add	r3, r2
 8012b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	69ba      	ldr	r2, [r7, #24]
 8012b48:	0151      	lsls	r1, r2, #5
 8012b4a:	69fa      	ldr	r2, [r7, #28]
 8012b4c:	440a      	add	r2, r1
 8012b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012b56:	6013      	str	r3, [r2, #0]
 8012b58:	e00f      	b.n	8012b7a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	015a      	lsls	r2, r3, #5
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	4413      	add	r3, r2
 8012b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	69ba      	ldr	r2, [r7, #24]
 8012b6a:	0151      	lsls	r1, r2, #5
 8012b6c:	69fa      	ldr	r2, [r7, #28]
 8012b6e:	440a      	add	r2, r1
 8012b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b78:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	015a      	lsls	r2, r3, #5
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	4413      	add	r3, r2
 8012b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	69ba      	ldr	r2, [r7, #24]
 8012b8a:	0151      	lsls	r1, r2, #5
 8012b8c:	69fa      	ldr	r2, [r7, #28]
 8012b8e:	440a      	add	r2, r1
 8012b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3720      	adds	r7, #32
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	fff80000 	.word	0xfff80000
 8012ba8:	e007ffff 	.word	0xe007ffff
 8012bac:	1ff80000 	.word	0x1ff80000

08012bb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b087      	sub	sp, #28
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	785b      	ldrb	r3, [r3, #1]
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d14a      	bne.n	8012c64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	015a      	lsls	r2, r3, #5
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012be6:	f040 8086 	bne.w	8012cf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	015a      	lsls	r2, r3, #5
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	683a      	ldr	r2, [r7, #0]
 8012bfc:	7812      	ldrb	r2, [r2, #0]
 8012bfe:	0151      	lsls	r1, r2, #5
 8012c00:	693a      	ldr	r2, [r7, #16]
 8012c02:	440a      	add	r2, r1
 8012c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	015a      	lsls	r2, r3, #5
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	4413      	add	r3, r2
 8012c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	683a      	ldr	r2, [r7, #0]
 8012c20:	7812      	ldrb	r2, [r2, #0]
 8012c22:	0151      	lsls	r1, r2, #5
 8012c24:	693a      	ldr	r2, [r7, #16]
 8012c26:	440a      	add	r2, r1
 8012c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	3301      	adds	r3, #1
 8012c36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d902      	bls.n	8012c48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012c42:	2301      	movs	r3, #1
 8012c44:	75fb      	strb	r3, [r7, #23]
          break;
 8012c46:	e056      	b.n	8012cf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	015a      	lsls	r2, r3, #5
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	4413      	add	r3, r2
 8012c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c60:	d0e7      	beq.n	8012c32 <USB_EPStopXfer+0x82>
 8012c62:	e048      	b.n	8012cf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	015a      	lsls	r2, r3, #5
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c7c:	d13b      	bne.n	8012cf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	015a      	lsls	r2, r3, #5
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	4413      	add	r3, r2
 8012c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	683a      	ldr	r2, [r7, #0]
 8012c90:	7812      	ldrb	r2, [r2, #0]
 8012c92:	0151      	lsls	r1, r2, #5
 8012c94:	693a      	ldr	r2, [r7, #16]
 8012c96:	440a      	add	r2, r1
 8012c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012ca0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	015a      	lsls	r2, r3, #5
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	4413      	add	r3, r2
 8012cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	683a      	ldr	r2, [r7, #0]
 8012cb4:	7812      	ldrb	r2, [r2, #0]
 8012cb6:	0151      	lsls	r1, r2, #5
 8012cb8:	693a      	ldr	r2, [r7, #16]
 8012cba:	440a      	add	r2, r1
 8012cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012cc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f242 7210 	movw	r2, #10000	; 0x2710
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d902      	bls.n	8012cdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8012cda:	e00c      	b.n	8012cf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	015a      	lsls	r2, r3, #5
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012cf4:	d0e7      	beq.n	8012cc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	371c      	adds	r7, #28
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d02:	4770      	bx	lr

08012d04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b089      	sub	sp, #36	; 0x24
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60f8      	str	r0, [r7, #12]
 8012d0c:	60b9      	str	r1, [r7, #8]
 8012d0e:	4611      	mov	r1, r2
 8012d10:	461a      	mov	r2, r3
 8012d12:	460b      	mov	r3, r1
 8012d14:	71fb      	strb	r3, [r7, #7]
 8012d16:	4613      	mov	r3, r2
 8012d18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012d22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d123      	bne.n	8012d72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012d2a:	88bb      	ldrh	r3, [r7, #4]
 8012d2c:	3303      	adds	r3, #3
 8012d2e:	089b      	lsrs	r3, r3, #2
 8012d30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012d32:	2300      	movs	r3, #0
 8012d34:	61bb      	str	r3, [r7, #24]
 8012d36:	e018      	b.n	8012d6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012d38:	79fb      	ldrb	r3, [r7, #7]
 8012d3a:	031a      	lsls	r2, r3, #12
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	4413      	add	r3, r2
 8012d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012d44:	461a      	mov	r2, r3
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	3301      	adds	r3, #1
 8012d56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	3301      	adds	r3, #1
 8012d62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	3301      	adds	r3, #1
 8012d68:	61bb      	str	r3, [r7, #24]
 8012d6a:	69ba      	ldr	r2, [r7, #24]
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d3e2      	bcc.n	8012d38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012d72:	2300      	movs	r3, #0
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3724      	adds	r7, #36	; 0x24
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7e:	4770      	bx	lr

08012d80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012d80:	b480      	push	{r7}
 8012d82:	b08b      	sub	sp, #44	; 0x2c
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	4613      	mov	r3, r2
 8012d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012d96:	88fb      	ldrh	r3, [r7, #6]
 8012d98:	089b      	lsrs	r3, r3, #2
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012d9e:	88fb      	ldrh	r3, [r7, #6]
 8012da0:	f003 0303 	and.w	r3, r3, #3
 8012da4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012da6:	2300      	movs	r3, #0
 8012da8:	623b      	str	r3, [r7, #32]
 8012daa:	e014      	b.n	8012dd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db6:	601a      	str	r2, [r3, #0]
    pDest++;
 8012db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dba:	3301      	adds	r3, #1
 8012dbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dcc:	3301      	adds	r3, #1
 8012dce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012dd0:	6a3b      	ldr	r3, [r7, #32]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	623b      	str	r3, [r7, #32]
 8012dd6:	6a3a      	ldr	r2, [r7, #32]
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d3e6      	bcc.n	8012dac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012dde:	8bfb      	ldrh	r3, [r7, #30]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d01e      	beq.n	8012e22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012de4:	2300      	movs	r3, #0
 8012de6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012dee:	461a      	mov	r2, r3
 8012df0:	f107 0310 	add.w	r3, r7, #16
 8012df4:	6812      	ldr	r2, [r2, #0]
 8012df6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012df8:	693a      	ldr	r2, [r7, #16]
 8012dfa:	6a3b      	ldr	r3, [r7, #32]
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	fa22 f303 	lsr.w	r3, r2, r3
 8012e04:	b2da      	uxtb	r2, r3
 8012e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e08:	701a      	strb	r2, [r3, #0]
      i++;
 8012e0a:	6a3b      	ldr	r3, [r7, #32]
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8012e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e12:	3301      	adds	r3, #1
 8012e14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012e16:	8bfb      	ldrh	r3, [r7, #30]
 8012e18:	3b01      	subs	r3, #1
 8012e1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012e1c:	8bfb      	ldrh	r3, [r7, #30]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d1ea      	bne.n	8012df8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	372c      	adds	r7, #44	; 0x2c
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr

08012e30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e30:	b480      	push	{r7}
 8012e32:	b085      	sub	sp, #20
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	785b      	ldrb	r3, [r3, #1]
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d12c      	bne.n	8012ea6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	015a      	lsls	r2, r3, #5
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	4413      	add	r3, r2
 8012e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	db12      	blt.n	8012e84 <USB_EPSetStall+0x54>
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00f      	beq.n	8012e84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	015a      	lsls	r2, r3, #5
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	68ba      	ldr	r2, [r7, #8]
 8012e74:	0151      	lsls	r1, r2, #5
 8012e76:	68fa      	ldr	r2, [r7, #12]
 8012e78:	440a      	add	r2, r1
 8012e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012e82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	015a      	lsls	r2, r3, #5
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	4413      	add	r3, r2
 8012e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	68ba      	ldr	r2, [r7, #8]
 8012e94:	0151      	lsls	r1, r2, #5
 8012e96:	68fa      	ldr	r2, [r7, #12]
 8012e98:	440a      	add	r2, r1
 8012e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012ea2:	6013      	str	r3, [r2, #0]
 8012ea4:	e02b      	b.n	8012efe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	015a      	lsls	r2, r3, #5
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	4413      	add	r3, r2
 8012eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	db12      	blt.n	8012ede <USB_EPSetStall+0xae>
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00f      	beq.n	8012ede <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	015a      	lsls	r2, r3, #5
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	68ba      	ldr	r2, [r7, #8]
 8012ece:	0151      	lsls	r1, r2, #5
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	440a      	add	r2, r1
 8012ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ed8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012edc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	015a      	lsls	r2, r3, #5
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	68ba      	ldr	r2, [r7, #8]
 8012eee:	0151      	lsls	r1, r2, #5
 8012ef0:	68fa      	ldr	r2, [r7, #12]
 8012ef2:	440a      	add	r2, r1
 8012ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012efc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012efe:	2300      	movs	r3, #0
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3714      	adds	r7, #20
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr

08012f0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b085      	sub	sp, #20
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	785b      	ldrb	r3, [r3, #1]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d128      	bne.n	8012f7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	015a      	lsls	r2, r3, #5
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	4413      	add	r3, r2
 8012f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	68ba      	ldr	r2, [r7, #8]
 8012f38:	0151      	lsls	r1, r2, #5
 8012f3a:	68fa      	ldr	r2, [r7, #12]
 8012f3c:	440a      	add	r2, r1
 8012f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012f46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	791b      	ldrb	r3, [r3, #4]
 8012f4c:	2b03      	cmp	r3, #3
 8012f4e:	d003      	beq.n	8012f58 <USB_EPClearStall+0x4c>
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	791b      	ldrb	r3, [r3, #4]
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	d138      	bne.n	8012fca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	015a      	lsls	r2, r3, #5
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	4413      	add	r3, r2
 8012f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	68ba      	ldr	r2, [r7, #8]
 8012f68:	0151      	lsls	r1, r2, #5
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	440a      	add	r2, r1
 8012f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f76:	6013      	str	r3, [r2, #0]
 8012f78:	e027      	b.n	8012fca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	015a      	lsls	r2, r3, #5
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	4413      	add	r3, r2
 8012f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	68ba      	ldr	r2, [r7, #8]
 8012f8a:	0151      	lsls	r1, r2, #5
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	440a      	add	r2, r1
 8012f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012f98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	791b      	ldrb	r3, [r3, #4]
 8012f9e:	2b03      	cmp	r3, #3
 8012fa0:	d003      	beq.n	8012faa <USB_EPClearStall+0x9e>
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	791b      	ldrb	r3, [r3, #4]
 8012fa6:	2b02      	cmp	r3, #2
 8012fa8:	d10f      	bne.n	8012fca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	015a      	lsls	r2, r3, #5
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	0151      	lsls	r1, r2, #5
 8012fbc:	68fa      	ldr	r2, [r7, #12]
 8012fbe:	440a      	add	r2, r1
 8012fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012fc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012fca:	2300      	movs	r3, #0
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3714      	adds	r7, #20
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ff6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012ffa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	78fb      	ldrb	r3, [r7, #3]
 8013006:	011b      	lsls	r3, r3, #4
 8013008:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801300c:	68f9      	ldr	r1, [r7, #12]
 801300e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013012:	4313      	orrs	r3, r2
 8013014:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3714      	adds	r7, #20
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr

08013024 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013024:	b480      	push	{r7}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801303e:	f023 0303 	bic.w	r3, r3, #3
 8013042:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013052:	f023 0302 	bic.w	r3, r3, #2
 8013056:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013058:	2300      	movs	r3, #0
}
 801305a:	4618      	mov	r0, r3
 801305c:	3714      	adds	r7, #20
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr

08013066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013066:	b480      	push	{r7}
 8013068:	b085      	sub	sp, #20
 801306a:	af00      	add	r7, sp, #0
 801306c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	68fa      	ldr	r2, [r7, #12]
 801307c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013080:	f023 0303 	bic.w	r3, r3, #3
 8013084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	68fa      	ldr	r2, [r7, #12]
 8013090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013094:	f043 0302 	orr.w	r3, r3, #2
 8013098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801309a:	2300      	movs	r3, #0
}
 801309c:	4618      	mov	r0, r3
 801309e:	3714      	adds	r7, #20
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr

080130a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80130a8:	b480      	push	{r7}
 80130aa:	b085      	sub	sp, #20
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	695b      	ldr	r3, [r3, #20]
 80130b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	699b      	ldr	r3, [r3, #24]
 80130ba:	68fa      	ldr	r2, [r7, #12]
 80130bc:	4013      	ands	r3, r2
 80130be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80130c0:	68fb      	ldr	r3, [r7, #12]
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3714      	adds	r7, #20
 80130c6:	46bd      	mov	sp, r7
 80130c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130cc:	4770      	bx	lr

080130ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80130ce:	b480      	push	{r7}
 80130d0:	b085      	sub	sp, #20
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130e0:	699b      	ldr	r3, [r3, #24]
 80130e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ea:	69db      	ldr	r3, [r3, #28]
 80130ec:	68ba      	ldr	r2, [r7, #8]
 80130ee:	4013      	ands	r3, r2
 80130f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	0c1b      	lsrs	r3, r3, #16
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3714      	adds	r7, #20
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr

08013102 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013102:	b480      	push	{r7}
 8013104:	b085      	sub	sp, #20
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013114:	699b      	ldr	r3, [r3, #24]
 8013116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801311e:	69db      	ldr	r3, [r3, #28]
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	4013      	ands	r3, r2
 8013124:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	b29b      	uxth	r3, r3
}
 801312a:	4618      	mov	r0, r3
 801312c:	3714      	adds	r7, #20
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr

08013136 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013136:	b480      	push	{r7}
 8013138:	b085      	sub	sp, #20
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
 801313e:	460b      	mov	r3, r1
 8013140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013146:	78fb      	ldrb	r3, [r7, #3]
 8013148:	015a      	lsls	r2, r3, #5
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	4413      	add	r3, r2
 801314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801315c:	695b      	ldr	r3, [r3, #20]
 801315e:	68ba      	ldr	r2, [r7, #8]
 8013160:	4013      	ands	r3, r2
 8013162:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013164:	68bb      	ldr	r3, [r7, #8]
}
 8013166:	4618      	mov	r0, r3
 8013168:	3714      	adds	r7, #20
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr

08013172 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013172:	b480      	push	{r7}
 8013174:	b087      	sub	sp, #28
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013188:	691b      	ldr	r3, [r3, #16]
 801318a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013194:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013196:	78fb      	ldrb	r3, [r7, #3]
 8013198:	f003 030f 	and.w	r3, r3, #15
 801319c:	68fa      	ldr	r2, [r7, #12]
 801319e:	fa22 f303 	lsr.w	r3, r2, r3
 80131a2:	01db      	lsls	r3, r3, #7
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	693a      	ldr	r2, [r7, #16]
 80131a8:	4313      	orrs	r3, r2
 80131aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80131ac:	78fb      	ldrb	r3, [r7, #3]
 80131ae:	015a      	lsls	r2, r3, #5
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	4413      	add	r3, r2
 80131b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b8:	689b      	ldr	r3, [r3, #8]
 80131ba:	693a      	ldr	r2, [r7, #16]
 80131bc:	4013      	ands	r3, r2
 80131be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80131c0:	68bb      	ldr	r3, [r7, #8]
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	371c      	adds	r7, #28
 80131c6:	46bd      	mov	sp, r7
 80131c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131cc:	4770      	bx	lr

080131ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80131ce:	b480      	push	{r7}
 80131d0:	b083      	sub	sp, #12
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	695b      	ldr	r3, [r3, #20]
 80131da:	f003 0301 	and.w	r3, r3, #1
}
 80131de:	4618      	mov	r0, r3
 80131e0:	370c      	adds	r7, #12
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
	...

080131ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b085      	sub	sp, #20
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013206:	4619      	mov	r1, r3
 8013208:	4b09      	ldr	r3, [pc, #36]	; (8013230 <USB_ActivateSetup+0x44>)
 801320a:	4013      	ands	r3, r2
 801320c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	68fa      	ldr	r2, [r7, #12]
 8013218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013220:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013222:	2300      	movs	r3, #0
}
 8013224:	4618      	mov	r0, r3
 8013226:	3714      	adds	r7, #20
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr
 8013230:	fffff800 	.word	0xfffff800

08013234 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013234:	b480      	push	{r7}
 8013236:	b087      	sub	sp, #28
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	460b      	mov	r3, r1
 801323e:	607a      	str	r2, [r7, #4]
 8013240:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	333c      	adds	r3, #60	; 0x3c
 801324a:	3304      	adds	r3, #4
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	4a26      	ldr	r2, [pc, #152]	; (80132ec <USB_EP0_OutStart+0xb8>)
 8013254:	4293      	cmp	r3, r2
 8013256:	d90a      	bls.n	801326e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013268:	d101      	bne.n	801326e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801326a:	2300      	movs	r3, #0
 801326c:	e037      	b.n	80132de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013274:	461a      	mov	r2, r3
 8013276:	2300      	movs	r3, #0
 8013278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013280:	691b      	ldr	r3, [r3, #16]
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013288:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801328c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013294:	691b      	ldr	r3, [r3, #16]
 8013296:	697a      	ldr	r2, [r7, #20]
 8013298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801329c:	f043 0318 	orr.w	r3, r3, #24
 80132a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a8:	691b      	ldr	r3, [r3, #16]
 80132aa:	697a      	ldr	r2, [r7, #20]
 80132ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80132b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80132b6:	7afb      	ldrb	r3, [r7, #11]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d10f      	bne.n	80132dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132c2:	461a      	mov	r2, r3
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	697a      	ldr	r2, [r7, #20]
 80132d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80132da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	371c      	adds	r7, #28
 80132e2:	46bd      	mov	sp, r7
 80132e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e8:	4770      	bx	lr
 80132ea:	bf00      	nop
 80132ec:	4f54300a 	.word	0x4f54300a

080132f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80132f0:	b480      	push	{r7}
 80132f2:	b085      	sub	sp, #20
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80132f8:	2300      	movs	r3, #0
 80132fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	3301      	adds	r3, #1
 8013300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	4a13      	ldr	r2, [pc, #76]	; (8013354 <USB_CoreReset+0x64>)
 8013306:	4293      	cmp	r3, r2
 8013308:	d901      	bls.n	801330e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801330a:	2303      	movs	r3, #3
 801330c:	e01b      	b.n	8013346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	691b      	ldr	r3, [r3, #16]
 8013312:	2b00      	cmp	r3, #0
 8013314:	daf2      	bge.n	80132fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013316:	2300      	movs	r3, #0
 8013318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	691b      	ldr	r3, [r3, #16]
 801331e:	f043 0201 	orr.w	r2, r3, #1
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	3301      	adds	r3, #1
 801332a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	4a09      	ldr	r2, [pc, #36]	; (8013354 <USB_CoreReset+0x64>)
 8013330:	4293      	cmp	r3, r2
 8013332:	d901      	bls.n	8013338 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013334:	2303      	movs	r3, #3
 8013336:	e006      	b.n	8013346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	f003 0301 	and.w	r3, r3, #1
 8013340:	2b01      	cmp	r3, #1
 8013342:	d0f0      	beq.n	8013326 <USB_CoreReset+0x36>

  return HAL_OK;
 8013344:	2300      	movs	r3, #0
}
 8013346:	4618      	mov	r0, r3
 8013348:	3714      	adds	r7, #20
 801334a:	46bd      	mov	sp, r7
 801334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013350:	4770      	bx	lr
 8013352:	bf00      	nop
 8013354:	00030d40 	.word	0x00030d40

08013358 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801335c:	4904      	ldr	r1, [pc, #16]	; (8013370 <MX_FATFS_Init+0x18>)
 801335e:	4805      	ldr	r0, [pc, #20]	; (8013374 <MX_FATFS_Init+0x1c>)
 8013360:	f002 fef4 	bl	801614c <FATFS_LinkDriver>
 8013364:	4603      	mov	r3, r0
 8013366:	461a      	mov	r2, r3
 8013368:	4b03      	ldr	r3, [pc, #12]	; (8013378 <MX_FATFS_Init+0x20>)
 801336a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801336c:	bf00      	nop
 801336e:	bd80      	pop	{r7, pc}
 8013370:	240008fc 	.word	0x240008fc
 8013374:	0802ba0c 	.word	0x0802ba0c
 8013378:	240008f8 	.word	0x240008f8

0801337c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013382:	2300      	movs	r3, #0
 8013384:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013386:	f000 f871 	bl	801346c <BSP_SD_IsDetected>
 801338a:	4603      	mov	r3, r0
 801338c:	2b01      	cmp	r3, #1
 801338e:	d001      	beq.n	8013394 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013390:	2302      	movs	r3, #2
 8013392:	e012      	b.n	80133ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013394:	480b      	ldr	r0, [pc, #44]	; (80133c4 <BSP_SD_Init+0x48>)
 8013396:	f7fc fa3b 	bl	800f810 <HAL_SD_Init>
 801339a:	4603      	mov	r3, r0
 801339c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801339e:	79fb      	ldrb	r3, [r7, #7]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d109      	bne.n	80133b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80133a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80133a8:	4806      	ldr	r0, [pc, #24]	; (80133c4 <BSP_SD_Init+0x48>)
 80133aa:	f7fc ff2f 	bl	801020c <HAL_SD_ConfigWideBusOperation>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d001      	beq.n	80133b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80133b4:	2301      	movs	r3, #1
 80133b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80133b8:	79fb      	ldrb	r3, [r7, #7]
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	3708      	adds	r7, #8
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	bf00      	nop
 80133c4:	240007d4 	.word	0x240007d4

080133c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b086      	sub	sp, #24
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80133d4:	2300      	movs	r3, #0
 80133d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	68f9      	ldr	r1, [r7, #12]
 80133de:	4806      	ldr	r0, [pc, #24]	; (80133f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80133e0:	f7fc fb36 	bl	800fa50 <HAL_SD_ReadBlocks_DMA>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80133ea:	2301      	movs	r3, #1
 80133ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80133ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3718      	adds	r7, #24
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	240007d4 	.word	0x240007d4

080133fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b086      	sub	sp, #24
 8013400:	af00      	add	r7, sp, #0
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	60b9      	str	r1, [r7, #8]
 8013406:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013408:	2300      	movs	r3, #0
 801340a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	68ba      	ldr	r2, [r7, #8]
 8013410:	68f9      	ldr	r1, [r7, #12]
 8013412:	4806      	ldr	r0, [pc, #24]	; (801342c <BSP_SD_WriteBlocks_DMA+0x30>)
 8013414:	f7fc fbc4 	bl	800fba0 <HAL_SD_WriteBlocks_DMA>
 8013418:	4603      	mov	r3, r0
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801341e:	2301      	movs	r3, #1
 8013420:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013422:	7dfb      	ldrb	r3, [r7, #23]
}
 8013424:	4618      	mov	r0, r3
 8013426:	3718      	adds	r7, #24
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	240007d4 	.word	0x240007d4

08013430 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013434:	4805      	ldr	r0, [pc, #20]	; (801344c <BSP_SD_GetCardState+0x1c>)
 8013436:	f7fc fffb 	bl	8010430 <HAL_SD_GetCardState>
 801343a:	4603      	mov	r3, r0
 801343c:	2b04      	cmp	r3, #4
 801343e:	bf14      	ite	ne
 8013440:	2301      	movne	r3, #1
 8013442:	2300      	moveq	r3, #0
 8013444:	b2db      	uxtb	r3, r3
}
 8013446:	4618      	mov	r0, r3
 8013448:	bd80      	pop	{r7, pc}
 801344a:	bf00      	nop
 801344c:	240007d4 	.word	0x240007d4

08013450 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013458:	6879      	ldr	r1, [r7, #4]
 801345a:	4803      	ldr	r0, [pc, #12]	; (8013468 <BSP_SD_GetCardInfo+0x18>)
 801345c:	f7fc feaa 	bl	80101b4 <HAL_SD_GetCardInfo>
}
 8013460:	bf00      	nop
 8013462:	3708      	adds	r7, #8
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	240007d4 	.word	0x240007d4

0801346c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013472:	2301      	movs	r3, #1
 8013474:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013476:	f000 f80b 	bl	8013490 <BSP_PlatformIsDetected>
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d101      	bne.n	8013484 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013480:	2300      	movs	r3, #0
 8013482:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013484:	79fb      	ldrb	r3, [r7, #7]
 8013486:	b2db      	uxtb	r3, r3
}
 8013488:	4618      	mov	r0, r3
 801348a:	3708      	adds	r7, #8
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013496:	2301      	movs	r3, #1
 8013498:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801349a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801349e:	4806      	ldr	r0, [pc, #24]	; (80134b8 <BSP_PlatformIsDetected+0x28>)
 80134a0:	f7f7 fb22 	bl	800aae8 <HAL_GPIO_ReadPin>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d001      	beq.n	80134ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80134aa:	2300      	movs	r3, #0
 80134ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80134ae:	79fb      	ldrb	r3, [r7, #7]
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3708      	adds	r7, #8
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	58020000 	.word	0x58020000

080134bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80134c4:	f002 ff02 	bl	80162cc <osKernelGetTickCount>
 80134c8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80134ca:	e006      	b.n	80134da <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80134cc:	f7ff ffb0 	bl	8013430 <BSP_SD_GetCardState>
 80134d0:	4603      	mov	r3, r0
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d101      	bne.n	80134da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80134d6:	2300      	movs	r3, #0
 80134d8:	e009      	b.n	80134ee <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80134da:	f002 fef7 	bl	80162cc <osKernelGetTickCount>
 80134de:	4602      	mov	r2, r0
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	1ad3      	subs	r3, r2, r3
 80134e4:	687a      	ldr	r2, [r7, #4]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d8f0      	bhi.n	80134cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80134ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
	...

080134f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013502:	4b0b      	ldr	r3, [pc, #44]	; (8013530 <SD_CheckStatus+0x38>)
 8013504:	2201      	movs	r2, #1
 8013506:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013508:	f7ff ff92 	bl	8013430 <BSP_SD_GetCardState>
 801350c:	4603      	mov	r3, r0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d107      	bne.n	8013522 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013512:	4b07      	ldr	r3, [pc, #28]	; (8013530 <SD_CheckStatus+0x38>)
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	b2db      	uxtb	r3, r3
 8013518:	f023 0301 	bic.w	r3, r3, #1
 801351c:	b2da      	uxtb	r2, r3
 801351e:	4b04      	ldr	r3, [pc, #16]	; (8013530 <SD_CheckStatus+0x38>)
 8013520:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013522:	4b03      	ldr	r3, [pc, #12]	; (8013530 <SD_CheckStatus+0x38>)
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	b2db      	uxtb	r3, r3
}
 8013528:	4618      	mov	r0, r3
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	240003b1 	.word	0x240003b1

08013534 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
 801353a:	4603      	mov	r3, r0
 801353c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801353e:	4b1c      	ldr	r3, [pc, #112]	; (80135b0 <SD_initialize+0x7c>)
 8013540:	2201      	movs	r2, #1
 8013542:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8013544:	f002 fe7a 	bl	801623c <osKernelGetState>
 8013548:	4603      	mov	r3, r0
 801354a:	2b02      	cmp	r3, #2
 801354c:	d129      	bne.n	80135a2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801354e:	f7ff ff15 	bl	801337c <BSP_SD_Init>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	d107      	bne.n	8013568 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8013558:	79fb      	ldrb	r3, [r7, #7]
 801355a:	4618      	mov	r0, r3
 801355c:	f7ff ffcc 	bl	80134f8 <SD_CheckStatus>
 8013560:	4603      	mov	r3, r0
 8013562:	461a      	mov	r2, r3
 8013564:	4b12      	ldr	r3, [pc, #72]	; (80135b0 <SD_initialize+0x7c>)
 8013566:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8013568:	4b11      	ldr	r3, [pc, #68]	; (80135b0 <SD_initialize+0x7c>)
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	b2db      	uxtb	r3, r3
 801356e:	2b01      	cmp	r3, #1
 8013570:	d017      	beq.n	80135a2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8013572:	4b10      	ldr	r3, [pc, #64]	; (80135b4 <SD_initialize+0x80>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d107      	bne.n	801358a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 801357a:	2200      	movs	r2, #0
 801357c:	2102      	movs	r1, #2
 801357e:	200a      	movs	r0, #10
 8013580:	f003 f994 	bl	80168ac <osMessageQueueNew>
 8013584:	4603      	mov	r3, r0
 8013586:	4a0b      	ldr	r2, [pc, #44]	; (80135b4 <SD_initialize+0x80>)
 8013588:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 801358a:	4b0a      	ldr	r3, [pc, #40]	; (80135b4 <SD_initialize+0x80>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d107      	bne.n	80135a2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8013592:	4b07      	ldr	r3, [pc, #28]	; (80135b0 <SD_initialize+0x7c>)
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	b2db      	uxtb	r3, r3
 8013598:	f043 0301 	orr.w	r3, r3, #1
 801359c:	b2da      	uxtb	r2, r3
 801359e:	4b04      	ldr	r3, [pc, #16]	; (80135b0 <SD_initialize+0x7c>)
 80135a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80135a2:	4b03      	ldr	r3, [pc, #12]	; (80135b0 <SD_initialize+0x7c>)
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	b2db      	uxtb	r3, r3
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	240003b1 	.word	0x240003b1
 80135b4:	24000900 	.word	0x24000900

080135b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	4603      	mov	r3, r0
 80135c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80135c2:	79fb      	ldrb	r3, [r7, #7]
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7ff ff97 	bl	80134f8 <SD_CheckStatus>
 80135ca:	4603      	mov	r3, r0
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b088      	sub	sp, #32
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60b9      	str	r1, [r7, #8]
 80135dc:	607a      	str	r2, [r7, #4]
 80135de:	603b      	str	r3, [r7, #0]
 80135e0:	4603      	mov	r3, r0
 80135e2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80135e4:	2301      	movs	r3, #1
 80135e6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80135e8:	f247 5030 	movw	r0, #30000	; 0x7530
 80135ec:	f7ff ff66 	bl	80134bc <SD_CheckStatusWithTimeout>
 80135f0:	4603      	mov	r3, r0
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	da01      	bge.n	80135fa <SD_read+0x26>
  {
    return res;
 80135f6:	7ffb      	ldrb	r3, [r7, #31]
 80135f8:	e02f      	b.n	801365a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80135fa:	683a      	ldr	r2, [r7, #0]
 80135fc:	6879      	ldr	r1, [r7, #4]
 80135fe:	68b8      	ldr	r0, [r7, #8]
 8013600:	f7ff fee2 	bl	80133c8 <BSP_SD_ReadBlocks_DMA>
 8013604:	4603      	mov	r3, r0
 8013606:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8013608:	7fbb      	ldrb	r3, [r7, #30]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d124      	bne.n	8013658 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801360e:	4b15      	ldr	r3, [pc, #84]	; (8013664 <SD_read+0x90>)
 8013610:	6818      	ldr	r0, [r3, #0]
 8013612:	f107 0112 	add.w	r1, r7, #18
 8013616:	f247 5330 	movw	r3, #30000	; 0x7530
 801361a:	2200      	movs	r2, #0
 801361c:	f003 fa1a 	bl	8016a54 <osMessageQueueGet>
 8013620:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d117      	bne.n	8013658 <SD_read+0x84>
 8013628:	8a7b      	ldrh	r3, [r7, #18]
 801362a:	2b01      	cmp	r3, #1
 801362c:	d114      	bne.n	8013658 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801362e:	f002 fe4d 	bl	80162cc <osKernelGetTickCount>
 8013632:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8013634:	e007      	b.n	8013646 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013636:	f7ff fefb 	bl	8013430 <BSP_SD_GetCardState>
 801363a:	4603      	mov	r3, r0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d102      	bne.n	8013646 <SD_read+0x72>
              {
                res = RES_OK;
 8013640:	2300      	movs	r3, #0
 8013642:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8013644:	e008      	b.n	8013658 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8013646:	f002 fe41 	bl	80162cc <osKernelGetTickCount>
 801364a:	4602      	mov	r2, r0
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	1ad3      	subs	r3, r2, r3
 8013650:	f247 522f 	movw	r2, #29999	; 0x752f
 8013654:	4293      	cmp	r3, r2
 8013656:	d9ee      	bls.n	8013636 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8013658:	7ffb      	ldrb	r3, [r7, #31]
}
 801365a:	4618      	mov	r0, r3
 801365c:	3720      	adds	r7, #32
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	24000900 	.word	0x24000900

08013668 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b088      	sub	sp, #32
 801366c:	af00      	add	r7, sp, #0
 801366e:	60b9      	str	r1, [r7, #8]
 8013670:	607a      	str	r2, [r7, #4]
 8013672:	603b      	str	r3, [r7, #0]
 8013674:	4603      	mov	r3, r0
 8013676:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013678:	2301      	movs	r3, #1
 801367a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801367c:	f247 5030 	movw	r0, #30000	; 0x7530
 8013680:	f7ff ff1c 	bl	80134bc <SD_CheckStatusWithTimeout>
 8013684:	4603      	mov	r3, r0
 8013686:	2b00      	cmp	r3, #0
 8013688:	da01      	bge.n	801368e <SD_write+0x26>
  {
    return res;
 801368a:	7ffb      	ldrb	r3, [r7, #31]
 801368c:	e02d      	b.n	80136ea <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801368e:	683a      	ldr	r2, [r7, #0]
 8013690:	6879      	ldr	r1, [r7, #4]
 8013692:	68b8      	ldr	r0, [r7, #8]
 8013694:	f7ff feb2 	bl	80133fc <BSP_SD_WriteBlocks_DMA>
 8013698:	4603      	mov	r3, r0
 801369a:	2b00      	cmp	r3, #0
 801369c:	d124      	bne.n	80136e8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801369e:	4b15      	ldr	r3, [pc, #84]	; (80136f4 <SD_write+0x8c>)
 80136a0:	6818      	ldr	r0, [r3, #0]
 80136a2:	f107 0112 	add.w	r1, r7, #18
 80136a6:	f247 5330 	movw	r3, #30000	; 0x7530
 80136aa:	2200      	movs	r2, #0
 80136ac:	f003 f9d2 	bl	8016a54 <osMessageQueueGet>
 80136b0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80136b2:	69bb      	ldr	r3, [r7, #24]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d117      	bne.n	80136e8 <SD_write+0x80>
 80136b8:	8a7b      	ldrh	r3, [r7, #18]
 80136ba:	2b02      	cmp	r3, #2
 80136bc:	d114      	bne.n	80136e8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80136be:	f002 fe05 	bl	80162cc <osKernelGetTickCount>
 80136c2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80136c4:	e007      	b.n	80136d6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80136c6:	f7ff feb3 	bl	8013430 <BSP_SD_GetCardState>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d102      	bne.n	80136d6 <SD_write+0x6e>
          {
            res = RES_OK;
 80136d0:	2300      	movs	r3, #0
 80136d2:	77fb      	strb	r3, [r7, #31]
            break;
 80136d4:	e008      	b.n	80136e8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80136d6:	f002 fdf9 	bl	80162cc <osKernelGetTickCount>
 80136da:	4602      	mov	r2, r0
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	1ad3      	subs	r3, r2, r3
 80136e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d9ee      	bls.n	80136c6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80136e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3720      	adds	r7, #32
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	24000900 	.word	0x24000900

080136f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b08c      	sub	sp, #48	; 0x30
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	4603      	mov	r3, r0
 8013700:	603a      	str	r2, [r7, #0]
 8013702:	71fb      	strb	r3, [r7, #7]
 8013704:	460b      	mov	r3, r1
 8013706:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013708:	2301      	movs	r3, #1
 801370a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801370e:	4b25      	ldr	r3, [pc, #148]	; (80137a4 <SD_ioctl+0xac>)
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	b2db      	uxtb	r3, r3
 8013714:	f003 0301 	and.w	r3, r3, #1
 8013718:	2b00      	cmp	r3, #0
 801371a:	d001      	beq.n	8013720 <SD_ioctl+0x28>
 801371c:	2303      	movs	r3, #3
 801371e:	e03c      	b.n	801379a <SD_ioctl+0xa2>

  switch (cmd)
 8013720:	79bb      	ldrb	r3, [r7, #6]
 8013722:	2b03      	cmp	r3, #3
 8013724:	d834      	bhi.n	8013790 <SD_ioctl+0x98>
 8013726:	a201      	add	r2, pc, #4	; (adr r2, 801372c <SD_ioctl+0x34>)
 8013728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801372c:	0801373d 	.word	0x0801373d
 8013730:	08013745 	.word	0x08013745
 8013734:	0801375d 	.word	0x0801375d
 8013738:	08013777 	.word	0x08013777
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801373c:	2300      	movs	r3, #0
 801373e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013742:	e028      	b.n	8013796 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013744:	f107 0308 	add.w	r3, r7, #8
 8013748:	4618      	mov	r0, r3
 801374a:	f7ff fe81 	bl	8013450 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801374e:	6a3a      	ldr	r2, [r7, #32]
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013754:	2300      	movs	r3, #0
 8013756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801375a:	e01c      	b.n	8013796 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801375c:	f107 0308 	add.w	r3, r7, #8
 8013760:	4618      	mov	r0, r3
 8013762:	f7ff fe75 	bl	8013450 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013768:	b29a      	uxth	r2, r3
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801376e:	2300      	movs	r3, #0
 8013770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013774:	e00f      	b.n	8013796 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013776:	f107 0308 	add.w	r3, r7, #8
 801377a:	4618      	mov	r0, r3
 801377c:	f7ff fe68 	bl	8013450 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013782:	0a5a      	lsrs	r2, r3, #9
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013788:	2300      	movs	r3, #0
 801378a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801378e:	e002      	b.n	8013796 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013790:	2304      	movs	r3, #4
 8013792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801379a:	4618      	mov	r0, r3
 801379c:	3730      	adds	r7, #48	; 0x30
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	240003b1 	.word	0x240003b1

080137a8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b084      	sub	sp, #16
 80137ac:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80137ae:	2100      	movs	r1, #0
 80137b0:	2000      	movs	r0, #0
 80137b2:	f006 fc83 	bl	801a0bc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80137b6:	4b23      	ldr	r3, [pc, #140]	; (8013844 <MX_LWIP_Init+0x9c>)
 80137b8:	2200      	movs	r2, #0
 80137ba:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80137bc:	4b22      	ldr	r3, [pc, #136]	; (8013848 <MX_LWIP_Init+0xa0>)
 80137be:	2200      	movs	r2, #0
 80137c0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80137c2:	4b22      	ldr	r3, [pc, #136]	; (801384c <MX_LWIP_Init+0xa4>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80137c8:	4b21      	ldr	r3, [pc, #132]	; (8013850 <MX_LWIP_Init+0xa8>)
 80137ca:	9302      	str	r3, [sp, #8]
 80137cc:	4b21      	ldr	r3, [pc, #132]	; (8013854 <MX_LWIP_Init+0xac>)
 80137ce:	9301      	str	r3, [sp, #4]
 80137d0:	2300      	movs	r3, #0
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	4b1d      	ldr	r3, [pc, #116]	; (801384c <MX_LWIP_Init+0xa4>)
 80137d6:	4a1c      	ldr	r2, [pc, #112]	; (8013848 <MX_LWIP_Init+0xa0>)
 80137d8:	491a      	ldr	r1, [pc, #104]	; (8013844 <MX_LWIP_Init+0x9c>)
 80137da:	481f      	ldr	r0, [pc, #124]	; (8013858 <MX_LWIP_Init+0xb0>)
 80137dc:	f007 faf0 	bl	801adc0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80137e0:	481d      	ldr	r0, [pc, #116]	; (8013858 <MX_LWIP_Init+0xb0>)
 80137e2:	f007 fca7 	bl	801b134 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80137e6:	4b1c      	ldr	r3, [pc, #112]	; (8013858 <MX_LWIP_Init+0xb0>)
 80137e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80137ec:	089b      	lsrs	r3, r3, #2
 80137ee:	f003 0301 	and.w	r3, r3, #1
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d003      	beq.n	8013800 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80137f8:	4817      	ldr	r0, [pc, #92]	; (8013858 <MX_LWIP_Init+0xb0>)
 80137fa:	f007 fcab 	bl	801b154 <netif_set_up>
 80137fe:	e002      	b.n	8013806 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8013800:	4815      	ldr	r0, [pc, #84]	; (8013858 <MX_LWIP_Init+0xb0>)
 8013802:	f007 fd13 	bl	801b22c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8013806:	4915      	ldr	r1, [pc, #84]	; (801385c <MX_LWIP_Init+0xb4>)
 8013808:	4813      	ldr	r0, [pc, #76]	; (8013858 <MX_LWIP_Init+0xb0>)
 801380a:	f007 fda9 	bl	801b360 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 801380e:	2224      	movs	r2, #36	; 0x24
 8013810:	2100      	movs	r1, #0
 8013812:	4813      	ldr	r0, [pc, #76]	; (8013860 <MX_LWIP_Init+0xb8>)
 8013814:	f013 fd52 	bl	80272bc <memset>
  attributes.name = "EthLink";
 8013818:	4b11      	ldr	r3, [pc, #68]	; (8013860 <MX_LWIP_Init+0xb8>)
 801381a:	4a12      	ldr	r2, [pc, #72]	; (8013864 <MX_LWIP_Init+0xbc>)
 801381c:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 801381e:	4b10      	ldr	r3, [pc, #64]	; (8013860 <MX_LWIP_Init+0xb8>)
 8013820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013824:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8013826:	4b0e      	ldr	r3, [pc, #56]	; (8013860 <MX_LWIP_Init+0xb8>)
 8013828:	2210      	movs	r2, #16
 801382a:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 801382c:	4a0c      	ldr	r2, [pc, #48]	; (8013860 <MX_LWIP_Init+0xb8>)
 801382e:	490a      	ldr	r1, [pc, #40]	; (8013858 <MX_LWIP_Init+0xb0>)
 8013830:	480d      	ldr	r0, [pc, #52]	; (8013868 <MX_LWIP_Init+0xc0>)
 8013832:	f002 fd60 	bl	80162f6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8013836:	4808      	ldr	r0, [pc, #32]	; (8013858 <MX_LWIP_Init+0xb0>)
 8013838:	f00e fefa 	bl	8022630 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801383c:	bf00      	nop
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	2400093c 	.word	0x2400093c
 8013848:	24000940 	.word	0x24000940
 801384c:	24000944 	.word	0x24000944
 8013850:	08019ff9 	.word	0x08019ff9
 8013854:	08013ca1 	.word	0x08013ca1
 8013858:	24000904 	.word	0x24000904
 801385c:	0801386d 	.word	0x0801386d
 8013860:	24000948 	.word	0x24000948
 8013864:	08028410 	.word	0x08028410
 8013868:	08013f41 	.word	0x08013f41

0801386c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801386c:	b480      	push	{r7}
 801386e:	b083      	sub	sp, #12
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8013874:	bf00      	nop
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr

08013880 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b0aa      	sub	sp, #168	; 0xa8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8013888:	2300      	movs	r3, #0
 801388a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 801388e:	2300      	movs	r3, #0
 8013890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8013894:	2300      	movs	r3, #0
 8013896:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 801389a:	f107 0310 	add.w	r3, r7, #16
 801389e:	2264      	movs	r2, #100	; 0x64
 80138a0:	2100      	movs	r1, #0
 80138a2:	4618      	mov	r0, r3
 80138a4:	f013 fd0a 	bl	80272bc <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80138a8:	4b85      	ldr	r3, [pc, #532]	; (8013ac0 <low_level_init+0x240>)
 80138aa:	4a86      	ldr	r2, [pc, #536]	; (8013ac4 <low_level_init+0x244>)
 80138ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80138ae:	2300      	movs	r3, #0
 80138b0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80138b2:	2380      	movs	r3, #128	; 0x80
 80138b4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80138b6:	23e1      	movs	r3, #225	; 0xe1
 80138b8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80138ba:	2300      	movs	r3, #0
 80138bc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80138be:	2300      	movs	r3, #0
 80138c0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80138c2:	2300      	movs	r3, #0
 80138c4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80138c6:	4a7e      	ldr	r2, [pc, #504]	; (8013ac0 <low_level_init+0x240>)
 80138c8:	f107 0308 	add.w	r3, r7, #8
 80138cc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80138ce:	4b7c      	ldr	r3, [pc, #496]	; (8013ac0 <low_level_init+0x240>)
 80138d0:	2201      	movs	r2, #1
 80138d2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80138d4:	4b7a      	ldr	r3, [pc, #488]	; (8013ac0 <low_level_init+0x240>)
 80138d6:	4a7c      	ldr	r2, [pc, #496]	; (8013ac8 <low_level_init+0x248>)
 80138d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80138da:	4b79      	ldr	r3, [pc, #484]	; (8013ac0 <low_level_init+0x240>)
 80138dc:	4a7b      	ldr	r2, [pc, #492]	; (8013acc <low_level_init+0x24c>)
 80138de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80138e0:	4b77      	ldr	r3, [pc, #476]	; (8013ac0 <low_level_init+0x240>)
 80138e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80138e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80138e8:	4875      	ldr	r0, [pc, #468]	; (8013ac0 <low_level_init+0x240>)
 80138ea:	f7f4 f935 	bl	8007b58 <HAL_ETH_Init>
 80138ee:	4603      	mov	r3, r0
 80138f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80138f4:	2238      	movs	r2, #56	; 0x38
 80138f6:	2100      	movs	r1, #0
 80138f8:	4875      	ldr	r0, [pc, #468]	; (8013ad0 <low_level_init+0x250>)
 80138fa:	f013 fcdf 	bl	80272bc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80138fe:	4b74      	ldr	r3, [pc, #464]	; (8013ad0 <low_level_init+0x250>)
 8013900:	2221      	movs	r2, #33	; 0x21
 8013902:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8013904:	4b72      	ldr	r3, [pc, #456]	; (8013ad0 <low_level_init+0x250>)
 8013906:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801390a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801390c:	4b70      	ldr	r3, [pc, #448]	; (8013ad0 <low_level_init+0x250>)
 801390e:	2200      	movs	r2, #0
 8013910:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8013912:	4870      	ldr	r0, [pc, #448]	; (8013ad4 <low_level_init+0x254>)
 8013914:	f007 f90e 	bl	801ab34 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2206      	movs	r2, #6
 801391c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013920:	4b67      	ldr	r3, [pc, #412]	; (8013ac0 <low_level_init+0x240>)
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	781a      	ldrb	r2, [r3, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801392c:	4b64      	ldr	r3, [pc, #400]	; (8013ac0 <low_level_init+0x240>)
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	785a      	ldrb	r2, [r3, #1]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8013938:	4b61      	ldr	r3, [pc, #388]	; (8013ac0 <low_level_init+0x240>)
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	789a      	ldrb	r2, [r3, #2]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8013944:	4b5e      	ldr	r3, [pc, #376]	; (8013ac0 <low_level_init+0x240>)
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	78da      	ldrb	r2, [r3, #3]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8013950:	4b5b      	ldr	r3, [pc, #364]	; (8013ac0 <low_level_init+0x240>)
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	791a      	ldrb	r2, [r3, #4]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801395c:	4b58      	ldr	r3, [pc, #352]	; (8013ac0 <low_level_init+0x240>)
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	795a      	ldrb	r2, [r3, #5]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801396e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013976:	f043 030a 	orr.w	r3, r3, #10
 801397a:	b2da      	uxtb	r2, r3
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8013982:	2200      	movs	r2, #0
 8013984:	2101      	movs	r1, #1
 8013986:	2001      	movs	r0, #1
 8013988:	f002 fe70 	bl	801666c <osSemaphoreNew>
 801398c:	4603      	mov	r3, r0
 801398e:	4a52      	ldr	r2, [pc, #328]	; (8013ad8 <low_level_init+0x258>)
 8013990:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8013992:	2200      	movs	r2, #0
 8013994:	2101      	movs	r1, #1
 8013996:	2001      	movs	r0, #1
 8013998:	f002 fe68 	bl	801666c <osSemaphoreNew>
 801399c:	4603      	mov	r3, r0
 801399e:	4a4f      	ldr	r2, [pc, #316]	; (8013adc <low_level_init+0x25c>)
 80139a0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80139a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80139a6:	2224      	movs	r2, #36	; 0x24
 80139a8:	2100      	movs	r1, #0
 80139aa:	4618      	mov	r0, r3
 80139ac:	f013 fc86 	bl	80272bc <memset>
  attributes.name = "EthIf";
 80139b0:	4b4b      	ldr	r3, [pc, #300]	; (8013ae0 <low_level_init+0x260>)
 80139b2:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80139b4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80139b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 80139bc:	2330      	movs	r3, #48	; 0x30
 80139be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80139c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80139c6:	461a      	mov	r2, r3
 80139c8:	6879      	ldr	r1, [r7, #4]
 80139ca:	4846      	ldr	r0, [pc, #280]	; (8013ae4 <low_level_init+0x264>)
 80139cc:	f002 fc93 	bl	80162f6 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80139d0:	4945      	ldr	r1, [pc, #276]	; (8013ae8 <low_level_init+0x268>)
 80139d2:	4846      	ldr	r0, [pc, #280]	; (8013aec <low_level_init+0x26c>)
 80139d4:	f7f3 fd35 	bl	8007442 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80139d8:	4844      	ldr	r0, [pc, #272]	; (8013aec <low_level_init+0x26c>)
 80139da:	f7f3 fd64 	bl	80074a6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80139de:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d165      	bne.n	8013ab2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80139e6:	4841      	ldr	r0, [pc, #260]	; (8013aec <low_level_init+0x26c>)
 80139e8:	f7f3 fe05 	bl	80075f6 <LAN8742_GetLinkState>
 80139ec:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80139f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	dc06      	bgt.n	8013a06 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f007 fc81 	bl	801b300 <netif_set_link_down>
      netif_set_down(netif);
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f007 fc14 	bl	801b22c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8013a04:	e057      	b.n	8013ab6 <low_level_init+0x236>
      switch (PHYLinkState)
 8013a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013a0a:	3b02      	subs	r3, #2
 8013a0c:	2b03      	cmp	r3, #3
 8013a0e:	d82b      	bhi.n	8013a68 <low_level_init+0x1e8>
 8013a10:	a201      	add	r2, pc, #4	; (adr r2, 8013a18 <low_level_init+0x198>)
 8013a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a16:	bf00      	nop
 8013a18:	08013a29 	.word	0x08013a29
 8013a1c:	08013a3b 	.word	0x08013a3b
 8013a20:	08013a4b 	.word	0x08013a4b
 8013a24:	08013a5b 	.word	0x08013a5b
        duplex = ETH_FULLDUPLEX_MODE;
 8013a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8013a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8013a38:	e01f      	b.n	8013a7a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8013a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013a44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8013a48:	e017      	b.n	8013a7a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8013a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8013a52:	2300      	movs	r3, #0
 8013a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8013a58:	e00f      	b.n	8013a7a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8013a60:	2300      	movs	r3, #0
 8013a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8013a66:	e008      	b.n	8013a7a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8013a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8013a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8013a78:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8013a7a:	f107 0310 	add.w	r3, r7, #16
 8013a7e:	4619      	mov	r1, r3
 8013a80:	480f      	ldr	r0, [pc, #60]	; (8013ac0 <low_level_init+0x240>)
 8013a82:	f7f4 fcd5 	bl	8008430 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8013a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8013a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8013a92:	f107 0310 	add.w	r3, r7, #16
 8013a96:	4619      	mov	r1, r3
 8013a98:	4809      	ldr	r0, [pc, #36]	; (8013ac0 <low_level_init+0x240>)
 8013a9a:	f7f4 fe9d 	bl	80087d8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8013a9e:	4808      	ldr	r0, [pc, #32]	; (8013ac0 <low_level_init+0x240>)
 8013aa0:	f7f4 f940 	bl	8007d24 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f007 fb55 	bl	801b154 <netif_set_up>
    netif_set_link_up(netif);
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f007 fbf0 	bl	801b290 <netif_set_link_up>
}
 8013ab0:	e001      	b.n	8013ab6 <low_level_init+0x236>
    Error_Handler();
 8013ab2:	f7f3 f905 	bl	8006cc0 <Error_Handler>
}
 8013ab6:	bf00      	nop
 8013ab8:	37a8      	adds	r7, #168	; 0xa8
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	24005300 	.word	0x24005300
 8013ac4:	40028000 	.word	0x40028000
 8013ac8:	24000590 	.word	0x24000590
 8013acc:	24000530 	.word	0x24000530
 8013ad0:	240053b0 	.word	0x240053b0
 8013ad4:	0802ba20 	.word	0x0802ba20
 8013ad8:	240052f8 	.word	0x240052f8
 8013adc:	240052fc 	.word	0x240052fc
 8013ae0:	08028418 	.word	0x08028418
 8013ae4:	08013c4d 	.word	0x08013c4d
 8013ae8:	240003b4 	.word	0x240003b4
 8013aec:	240053e8 	.word	0x240053e8

08013af0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b092      	sub	sp, #72	; 0x48
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8013afa:	2300      	movs	r3, #0
 8013afc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8013afe:	2300      	movs	r3, #0
 8013b00:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8013b02:	2300      	movs	r3, #0
 8013b04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8013b08:	f107 030c 	add.w	r3, r7, #12
 8013b0c:	2230      	movs	r2, #48	; 0x30
 8013b0e:	2100      	movs	r1, #0
 8013b10:	4618      	mov	r0, r3
 8013b12:	f013 fbd3 	bl	80272bc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8013b16:	f107 030c 	add.w	r3, r7, #12
 8013b1a:	2230      	movs	r2, #48	; 0x30
 8013b1c:	2100      	movs	r1, #0
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f013 fbcc 	bl	80272bc <memset>

  for(q = p; q != NULL; q = q->next)
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	643b      	str	r3, [r7, #64]	; 0x40
 8013b28:	e045      	b.n	8013bb6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8013b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b2c:	2b03      	cmp	r3, #3
 8013b2e:	d902      	bls.n	8013b36 <low_level_output+0x46>
      return ERR_IF;
 8013b30:	f06f 030b 	mvn.w	r3, #11
 8013b34:	e065      	b.n	8013c02 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8013b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b38:	6859      	ldr	r1, [r3, #4]
 8013b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b3c:	4613      	mov	r3, r2
 8013b3e:	005b      	lsls	r3, r3, #1
 8013b40:	4413      	add	r3, r2
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	3348      	adds	r3, #72	; 0x48
 8013b46:	443b      	add	r3, r7
 8013b48:	3b3c      	subs	r3, #60	; 0x3c
 8013b4a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8013b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b4e:	895b      	ldrh	r3, [r3, #10]
 8013b50:	4619      	mov	r1, r3
 8013b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b54:	4613      	mov	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	4413      	add	r3, r2
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	3348      	adds	r3, #72	; 0x48
 8013b5e:	443b      	add	r3, r7
 8013b60:	3b38      	subs	r3, #56	; 0x38
 8013b62:	6019      	str	r1, [r3, #0]

    if(i>0)
 8013b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d011      	beq.n	8013b8e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8013b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b6c:	1e5a      	subs	r2, r3, #1
 8013b6e:	f107 000c 	add.w	r0, r7, #12
 8013b72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b74:	460b      	mov	r3, r1
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	440b      	add	r3, r1
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	18c1      	adds	r1, r0, r3
 8013b7e:	4613      	mov	r3, r2
 8013b80:	005b      	lsls	r3, r3, #1
 8013b82:	4413      	add	r3, r2
 8013b84:	009b      	lsls	r3, r3, #2
 8013b86:	3348      	adds	r3, #72	; 0x48
 8013b88:	443b      	add	r3, r7
 8013b8a:	3b34      	subs	r3, #52	; 0x34
 8013b8c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8013b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d109      	bne.n	8013baa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8013b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b98:	4613      	mov	r3, r2
 8013b9a:	005b      	lsls	r3, r3, #1
 8013b9c:	4413      	add	r3, r2
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	3348      	adds	r3, #72	; 0x48
 8013ba2:	443b      	add	r3, r7
 8013ba4:	3b34      	subs	r3, #52	; 0x34
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8013baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bac:	3301      	adds	r3, #1
 8013bae:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8013bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8013bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d1b6      	bne.n	8013b2a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	891b      	ldrh	r3, [r3, #8]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	4b12      	ldr	r3, [pc, #72]	; (8013c0c <low_level_output+0x11c>)
 8013bc4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8013bc6:	4a11      	ldr	r2, [pc, #68]	; (8013c0c <low_level_output+0x11c>)
 8013bc8:	f107 030c 	add.w	r3, r7, #12
 8013bcc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8013bce:	4a0f      	ldr	r2, [pc, #60]	; (8013c0c <low_level_output+0x11c>)
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8013bd4:	6838      	ldr	r0, [r7, #0]
 8013bd6:	f008 f817 	bl	801bc08 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8013bda:	490c      	ldr	r1, [pc, #48]	; (8013c0c <low_level_output+0x11c>)
 8013bdc:	480c      	ldr	r0, [pc, #48]	; (8013c10 <low_level_output+0x120>)
 8013bde:	f7f4 f9a5 	bl	8007f2c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8013be2:	bf00      	nop
 8013be4:	4b0b      	ldr	r3, [pc, #44]	; (8013c14 <low_level_output+0x124>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f04f 31ff 	mov.w	r1, #4294967295
 8013bec:	4618      	mov	r0, r3
 8013bee:	f002 fdc7 	bl	8016780 <osSemaphoreAcquire>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d1f5      	bne.n	8013be4 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8013bf8:	4805      	ldr	r0, [pc, #20]	; (8013c10 <low_level_output+0x120>)
 8013bfa:	f7f4 fb16 	bl	800822a <HAL_ETH_ReleaseTxPacket>

  return errval;
 8013bfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8013c02:	4618      	mov	r0, r3
 8013c04:	3748      	adds	r7, #72	; 0x48
 8013c06:	46bd      	mov	sp, r7
 8013c08:	bd80      	pop	{r7, pc}
 8013c0a:	bf00      	nop
 8013c0c:	240053b0 	.word	0x240053b0
 8013c10:	24005300 	.word	0x24005300
 8013c14:	240052fc 	.word	0x240052fc

08013c18 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b084      	sub	sp, #16
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8013c20:	2300      	movs	r3, #0
 8013c22:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8013c24:	4b07      	ldr	r3, [pc, #28]	; (8013c44 <low_level_input+0x2c>)
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d105      	bne.n	8013c38 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8013c2c:	f107 030c 	add.w	r3, r7, #12
 8013c30:	4619      	mov	r1, r3
 8013c32:	4805      	ldr	r0, [pc, #20]	; (8013c48 <low_level_input+0x30>)
 8013c34:	f7f4 f9cb 	bl	8007fce <HAL_ETH_ReadData>
  }

  return p;
 8013c38:	68fb      	ldr	r3, [r7, #12]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3710      	adds	r7, #16
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	240052f4 	.word	0x240052f4
 8013c48:	24005300 	.word	0x24005300

08013c4c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8013c54:	2300      	movs	r3, #0
 8013c56:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013c5c:	4b0f      	ldr	r3, [pc, #60]	; (8013c9c <ethernetif_input+0x50>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f04f 31ff 	mov.w	r1, #4294967295
 8013c64:	4618      	mov	r0, r3
 8013c66:	f002 fd8b 	bl	8016780 <osSemaphoreAcquire>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d1f5      	bne.n	8013c5c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8013c70:	68b8      	ldr	r0, [r7, #8]
 8013c72:	f7ff ffd1 	bl	8013c18 <low_level_input>
 8013c76:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d00a      	beq.n	8013c94 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	691b      	ldr	r3, [r3, #16]
 8013c82:	68b9      	ldr	r1, [r7, #8]
 8013c84:	68f8      	ldr	r0, [r7, #12]
 8013c86:	4798      	blx	r3
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d002      	beq.n	8013c94 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8013c8e:	68f8      	ldr	r0, [r7, #12]
 8013c90:	f007 ff14 	bl	801babc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d1ea      	bne.n	8013c70 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013c9a:	e7df      	b.n	8013c5c <ethernetif_input+0x10>
 8013c9c:	240052f8 	.word	0x240052f8

08013ca0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d106      	bne.n	8013cbc <ethernetif_init+0x1c>
 8013cae:	4b0e      	ldr	r3, [pc, #56]	; (8013ce8 <ethernetif_init+0x48>)
 8013cb0:	f240 12f5 	movw	r2, #501	; 0x1f5
 8013cb4:	490d      	ldr	r1, [pc, #52]	; (8013cec <ethernetif_init+0x4c>)
 8013cb6:	480e      	ldr	r0, [pc, #56]	; (8013cf0 <ethernetif_init+0x50>)
 8013cb8:	f013 fbfe 	bl	80274b8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2273      	movs	r2, #115	; 0x73
 8013cc0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2274      	movs	r2, #116	; 0x74
 8013cc8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	4a09      	ldr	r2, [pc, #36]	; (8013cf4 <ethernetif_init+0x54>)
 8013cd0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4a08      	ldr	r2, [pc, #32]	; (8013cf8 <ethernetif_init+0x58>)
 8013cd6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7ff fdd1 	bl	8013880 <low_level_init>

  return ERR_OK;
 8013cde:	2300      	movs	r3, #0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	08028420 	.word	0x08028420
 8013cec:	0802843c 	.word	0x0802843c
 8013cf0:	0802844c 	.word	0x0802844c
 8013cf4:	080244fd 	.word	0x080244fd
 8013cf8:	08013af1 	.word	0x08013af1

08013cfc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b084      	sub	sp, #16
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8013d08:	68f9      	ldr	r1, [r7, #12]
 8013d0a:	4809      	ldr	r0, [pc, #36]	; (8013d30 <pbuf_free_custom+0x34>)
 8013d0c:	f007 f802 	bl	801ad14 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8013d10:	4b08      	ldr	r3, [pc, #32]	; (8013d34 <pbuf_free_custom+0x38>)
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d107      	bne.n	8013d28 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8013d18:	4b06      	ldr	r3, [pc, #24]	; (8013d34 <pbuf_free_custom+0x38>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8013d1e:	4b06      	ldr	r3, [pc, #24]	; (8013d38 <pbuf_free_custom+0x3c>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4618      	mov	r0, r3
 8013d24:	f002 fd7e 	bl	8016824 <osSemaphoreRelease>
  }
}
 8013d28:	bf00      	nop
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	0802ba20 	.word	0x0802ba20
 8013d34:	240052f4 	.word	0x240052f4
 8013d38:	240052f8 	.word	0x240052f8

08013d3c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8013d40:	f7f3 fd30 	bl	80077a4 <HAL_GetTick>
 8013d44:	4603      	mov	r3, r0
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	bd80      	pop	{r7, pc}
	...

08013d4c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b08e      	sub	sp, #56	; 0x38
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013d58:	2200      	movs	r2, #0
 8013d5a:	601a      	str	r2, [r3, #0]
 8013d5c:	605a      	str	r2, [r3, #4]
 8013d5e:	609a      	str	r2, [r3, #8]
 8013d60:	60da      	str	r2, [r3, #12]
 8013d62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	4a49      	ldr	r2, [pc, #292]	; (8013e90 <HAL_ETH_MspInit+0x144>)
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	f040 808b 	bne.w	8013e86 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8013d70:	4b48      	ldr	r3, [pc, #288]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013d76:	4a47      	ldr	r2, [pc, #284]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013d7c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013d80:	4b44      	ldr	r3, [pc, #272]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013d82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d8a:	623b      	str	r3, [r7, #32]
 8013d8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8013d8e:	4b41      	ldr	r3, [pc, #260]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013d94:	4a3f      	ldr	r2, [pc, #252]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013d9e:	4b3d      	ldr	r3, [pc, #244]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013da8:	61fb      	str	r3, [r7, #28]
 8013daa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8013dac:	4b39      	ldr	r3, [pc, #228]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013db2:	4a38      	ldr	r2, [pc, #224]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013db8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013dbc:	4b35      	ldr	r3, [pc, #212]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013dc6:	61bb      	str	r3, [r7, #24]
 8013dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013dca:	4b32      	ldr	r3, [pc, #200]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013dd0:	4a30      	ldr	r2, [pc, #192]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013dd2:	f043 0304 	orr.w	r3, r3, #4
 8013dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013dda:	4b2e      	ldr	r3, [pc, #184]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013de0:	f003 0304 	and.w	r3, r3, #4
 8013de4:	617b      	str	r3, [r7, #20]
 8013de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013de8:	4b2a      	ldr	r3, [pc, #168]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013dee:	4a29      	ldr	r2, [pc, #164]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013df0:	f043 0301 	orr.w	r3, r3, #1
 8013df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013df8:	4b26      	ldr	r3, [pc, #152]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013dfe:	f003 0301 	and.w	r3, r3, #1
 8013e02:	613b      	str	r3, [r7, #16]
 8013e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013e06:	4b23      	ldr	r3, [pc, #140]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013e0c:	4a21      	ldr	r2, [pc, #132]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013e0e:	f043 0302 	orr.w	r3, r3, #2
 8013e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013e16:	4b1f      	ldr	r3, [pc, #124]	; (8013e94 <HAL_ETH_MspInit+0x148>)
 8013e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013e1c:	f003 0302 	and.w	r3, r3, #2
 8013e20:	60fb      	str	r3, [r7, #12]
 8013e22:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8013e24:	2332      	movs	r3, #50	; 0x32
 8013e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e28:	2302      	movs	r3, #2
 8013e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013e30:	2300      	movs	r3, #0
 8013e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013e34:	230b      	movs	r3, #11
 8013e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	4816      	ldr	r0, [pc, #88]	; (8013e98 <HAL_ETH_MspInit+0x14c>)
 8013e40:	f7f6 fcaa 	bl	800a798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8013e44:	2386      	movs	r3, #134	; 0x86
 8013e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e48:	2302      	movs	r3, #2
 8013e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013e50:	2300      	movs	r3, #0
 8013e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013e54:	230b      	movs	r3, #11
 8013e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	480f      	ldr	r0, [pc, #60]	; (8013e9c <HAL_ETH_MspInit+0x150>)
 8013e60:	f7f6 fc9a 	bl	800a798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8013e64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013e72:	2300      	movs	r3, #0
 8013e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013e76:	230b      	movs	r3, #11
 8013e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013e7e:	4619      	mov	r1, r3
 8013e80:	4807      	ldr	r0, [pc, #28]	; (8013ea0 <HAL_ETH_MspInit+0x154>)
 8013e82:	f7f6 fc89 	bl	800a798 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8013e86:	bf00      	nop
 8013e88:	3738      	adds	r7, #56	; 0x38
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	40028000 	.word	0x40028000
 8013e94:	58024400 	.word	0x58024400
 8013e98:	58020800 	.word	0x58020800
 8013e9c:	58020000 	.word	0x58020000
 8013ea0:	58020400 	.word	0x58020400

08013ea4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8013ea8:	4802      	ldr	r0, [pc, #8]	; (8013eb4 <ETH_PHY_IO_Init+0x10>)
 8013eaa:	f7f4 fcaf 	bl	800880c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8013eae:	2300      	movs	r3, #0
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	24005300 	.word	0x24005300

08013eb8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	af00      	add	r7, sp, #0
  return 0;
 8013ebc:	2300      	movs	r3, #0
}
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec6:	4770      	bx	lr

08013ec8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b084      	sub	sp, #16
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	60b9      	str	r1, [r7, #8]
 8013ed2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	68ba      	ldr	r2, [r7, #8]
 8013ed8:	68f9      	ldr	r1, [r7, #12]
 8013eda:	4807      	ldr	r0, [pc, #28]	; (8013ef8 <ETH_PHY_IO_ReadReg+0x30>)
 8013edc:	f7f4 fa00 	bl	80082e0 <HAL_ETH_ReadPHYRegister>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d002      	beq.n	8013eec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8013ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8013eea:	e000      	b.n	8013eee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8013eec:	2300      	movs	r3, #0
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3710      	adds	r7, #16
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	24005300 	.word	0x24005300

08013efc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	60b9      	str	r1, [r7, #8]
 8013f06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	68ba      	ldr	r2, [r7, #8]
 8013f0c:	68f9      	ldr	r1, [r7, #12]
 8013f0e:	4807      	ldr	r0, [pc, #28]	; (8013f2c <ETH_PHY_IO_WriteReg+0x30>)
 8013f10:	f7f4 fa3a 	bl	8008388 <HAL_ETH_WritePHYRegister>
 8013f14:	4603      	mov	r3, r0
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d002      	beq.n	8013f20 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8013f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013f1e:	e000      	b.n	8013f22 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8013f20:	2300      	movs	r3, #0
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	24005300 	.word	0x24005300

08013f30 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8013f34:	f7f3 fc36 	bl	80077a4 <HAL_GetTick>
 8013f38:	4603      	mov	r3, r0
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	bd80      	pop	{r7, pc}
	...

08013f40 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b0a0      	sub	sp, #128	; 0x80
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8013f48:	f107 0308 	add.w	r3, r7, #8
 8013f4c:	2264      	movs	r2, #100	; 0x64
 8013f4e:	2100      	movs	r1, #0
 8013f50:	4618      	mov	r0, r3
 8013f52:	f013 f9b3 	bl	80272bc <memset>
  int32_t PHYLinkState = 0;
 8013f56:	2300      	movs	r3, #0
 8013f58:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013f5e:	2300      	movs	r3, #0
 8013f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8013f62:	2300      	movs	r3, #0
 8013f64:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8013f6a:	483a      	ldr	r0, [pc, #232]	; (8014054 <ethernet_link_thread+0x114>)
 8013f6c:	f7f3 fb43 	bl	80075f6 <LAN8742_GetLinkState>
 8013f70:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8013f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f78:	089b      	lsrs	r3, r3, #2
 8013f7a:	f003 0301 	and.w	r3, r3, #1
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d00c      	beq.n	8013f9e <ethernet_link_thread+0x5e>
 8013f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f86:	2b01      	cmp	r3, #1
 8013f88:	dc09      	bgt.n	8013f9e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8013f8a:	4833      	ldr	r0, [pc, #204]	; (8014058 <ethernet_link_thread+0x118>)
 8013f8c:	f7f3 ff56 	bl	8007e3c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8013f90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013f92:	f007 f94b 	bl	801b22c <netif_set_down>
    netif_set_link_down(netif);
 8013f96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013f98:	f007 f9b2 	bl	801b300 <netif_set_link_down>
 8013f9c:	e055      	b.n	801404a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8013f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fa0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013fa4:	f003 0304 	and.w	r3, r3, #4
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d14e      	bne.n	801404a <ethernet_link_thread+0x10a>
 8013fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	dd4b      	ble.n	801404a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8013fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fb4:	3b02      	subs	r3, #2
 8013fb6:	2b03      	cmp	r3, #3
 8013fb8:	d82a      	bhi.n	8014010 <ethernet_link_thread+0xd0>
 8013fba:	a201      	add	r2, pc, #4	; (adr r2, 8013fc0 <ethernet_link_thread+0x80>)
 8013fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fc0:	08013fd1 	.word	0x08013fd1
 8013fc4:	08013fe3 	.word	0x08013fe3
 8013fc8:	08013ff3 	.word	0x08013ff3
 8013fcc:	08014003 	.word	0x08014003
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8013fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013fd4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8013fd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013fda:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8013fdc:	2301      	movs	r3, #1
 8013fde:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8013fe0:	e017      	b.n	8014012 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8013fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013fea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8013fec:	2301      	movs	r3, #1
 8013fee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8013ff0:	e00f      	b.n	8014012 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8013ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013ff6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8014000:	e007      	b.n	8014012 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8014002:	2300      	movs	r3, #0
 8014004:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8014006:	2300      	movs	r3, #0
 8014008:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801400a:	2301      	movs	r3, #1
 801400c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801400e:	e000      	b.n	8014012 <ethernet_link_thread+0xd2>
    default:
      break;
 8014010:	bf00      	nop
    }

    if(linkchanged)
 8014012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014014:	2b00      	cmp	r3, #0
 8014016:	d018      	beq.n	801404a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8014018:	f107 0308 	add.w	r3, r7, #8
 801401c:	4619      	mov	r1, r3
 801401e:	480e      	ldr	r0, [pc, #56]	; (8014058 <ethernet_link_thread+0x118>)
 8014020:	f7f4 fa06 	bl	8008430 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8014024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014026:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8014028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801402a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801402c:	f107 0308 	add.w	r3, r7, #8
 8014030:	4619      	mov	r1, r3
 8014032:	4809      	ldr	r0, [pc, #36]	; (8014058 <ethernet_link_thread+0x118>)
 8014034:	f7f4 fbd0 	bl	80087d8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8014038:	4807      	ldr	r0, [pc, #28]	; (8014058 <ethernet_link_thread+0x118>)
 801403a:	f7f3 fe73 	bl	8007d24 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 801403e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014040:	f007 f888 	bl	801b154 <netif_set_up>
      netif_set_link_up(netif);
 8014044:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014046:	f007 f923 	bl	801b290 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 801404a:	2064      	movs	r0, #100	; 0x64
 801404c:	f002 f9e5 	bl	801641a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8014050:	e78b      	b.n	8013f6a <ethernet_link_thread+0x2a>
 8014052:	bf00      	nop
 8014054:	240053e8 	.word	0x240053e8
 8014058:	24005300 	.word	0x24005300

0801405c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b086      	sub	sp, #24
 8014060:	af02      	add	r7, sp, #8
 8014062:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8014064:	4812      	ldr	r0, [pc, #72]	; (80140b0 <HAL_ETH_RxAllocateCallback+0x54>)
 8014066:	f006 fde1 	bl	801ac2c <memp_malloc_pool>
 801406a:	60f8      	str	r0, [r7, #12]
  if (p)
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d014      	beq.n	801409c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f103 0220 	add.w	r2, r3, #32
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	4a0d      	ldr	r2, [pc, #52]	; (80140b4 <HAL_ETH_RxAllocateCallback+0x58>)
 8014080:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801408a:	9201      	str	r2, [sp, #4]
 801408c:	9300      	str	r3, [sp, #0]
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	2241      	movs	r2, #65	; 0x41
 8014092:	2100      	movs	r1, #0
 8014094:	2000      	movs	r0, #0
 8014096:	f007 fb57 	bl	801b748 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801409a:	e005      	b.n	80140a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 801409c:	4b06      	ldr	r3, [pc, #24]	; (80140b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 801409e:	2201      	movs	r2, #1
 80140a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2200      	movs	r2, #0
 80140a6:	601a      	str	r2, [r3, #0]
}
 80140a8:	bf00      	nop
 80140aa:	3710      	adds	r7, #16
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	0802ba20 	.word	0x0802ba20
 80140b4:	08013cfd 	.word	0x08013cfd
 80140b8:	240052f4 	.word	0x240052f4

080140bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80140bc:	b480      	push	{r7}
 80140be:	b08d      	sub	sp, #52	; 0x34
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
 80140c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80140d2:	2300      	movs	r3, #0
 80140d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	3b20      	subs	r3, #32
 80140da:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80140dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140de:	2200      	movs	r2, #0
 80140e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80140e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e4:	2200      	movs	r2, #0
 80140e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80140e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ea:	887a      	ldrh	r2, [r7, #2]
 80140ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80140ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d103      	bne.n	80140fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80140f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140fa:	601a      	str	r2, [r3, #0]
 80140fc:	e003      	b.n	8014106 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80140fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014104:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8014106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801410a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 801410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014112:	e009      	b.n	8014128 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8014114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014116:	891a      	ldrh	r2, [r3, #8]
 8014118:	887b      	ldrh	r3, [r7, #2]
 801411a:	4413      	add	r3, r2
 801411c:	b29a      	uxth	r2, r3
 801411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014120:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8014122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412a:	2b00      	cmp	r3, #0
 801412c:	d1f2      	bne.n	8014114 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801412e:	887b      	ldrh	r3, [r7, #2]
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	623a      	str	r2, [r7, #32]
 8014134:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8014136:	69fb      	ldr	r3, [r7, #28]
 8014138:	2b00      	cmp	r3, #0
 801413a:	dd1d      	ble.n	8014178 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	f003 021f 	and.w	r2, r3, #31
 8014142:	69fb      	ldr	r3, [r7, #28]
 8014144:	4413      	add	r3, r2
 8014146:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8014148:	6a3b      	ldr	r3, [r7, #32]
 801414a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801414c:	f3bf 8f4f 	dsb	sy
}
 8014150:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8014152:	4a0d      	ldr	r2, [pc, #52]	; (8014188 <HAL_ETH_RxLinkCallback+0xcc>)
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	3320      	adds	r3, #32
 801415e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	3b20      	subs	r3, #32
 8014164:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	2b00      	cmp	r3, #0
 801416a:	dcf2      	bgt.n	8014152 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 801416c:	f3bf 8f4f 	dsb	sy
}
 8014170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014172:	f3bf 8f6f 	isb	sy
}
 8014176:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8014178:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 801417a:	bf00      	nop
 801417c:	3734      	adds	r7, #52	; 0x34
 801417e:	46bd      	mov	sp, r7
 8014180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014184:	4770      	bx	lr
 8014186:	bf00      	nop
 8014188:	e000ed00 	.word	0xe000ed00

0801418c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f007 fc91 	bl	801babc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 801419a:	bf00      	nop
 801419c:	3708      	adds	r7, #8
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
	...

080141a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	460b      	mov	r3, r1
 80141ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80141b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80141b4:	f012 fdfc 	bl	8026db0 <USBD_static_malloc>
 80141b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d109      	bne.n	80141d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	32b0      	adds	r2, #176	; 0xb0
 80141ca:	2100      	movs	r1, #0
 80141cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80141d0:	2302      	movs	r3, #2
 80141d2:	e0d4      	b.n	801437e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80141d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80141d8:	2100      	movs	r1, #0
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f013 f86e 	bl	80272bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	32b0      	adds	r2, #176	; 0xb0
 80141ea:	68f9      	ldr	r1, [r7, #12]
 80141ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	32b0      	adds	r2, #176	; 0xb0
 80141fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	7c1b      	ldrb	r3, [r3, #16]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d138      	bne.n	801427e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801420c:	4b5e      	ldr	r3, [pc, #376]	; (8014388 <USBD_CDC_Init+0x1e4>)
 801420e:	7819      	ldrb	r1, [r3, #0]
 8014210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014214:	2202      	movs	r2, #2
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f012 fca7 	bl	8026b6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801421c:	4b5a      	ldr	r3, [pc, #360]	; (8014388 <USBD_CDC_Init+0x1e4>)
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	f003 020f 	and.w	r2, r3, #15
 8014224:	6879      	ldr	r1, [r7, #4]
 8014226:	4613      	mov	r3, r2
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	4413      	add	r3, r2
 801422c:	009b      	lsls	r3, r3, #2
 801422e:	440b      	add	r3, r1
 8014230:	3324      	adds	r3, #36	; 0x24
 8014232:	2201      	movs	r2, #1
 8014234:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014236:	4b55      	ldr	r3, [pc, #340]	; (801438c <USBD_CDC_Init+0x1e8>)
 8014238:	7819      	ldrb	r1, [r3, #0]
 801423a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801423e:	2202      	movs	r2, #2
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f012 fc92 	bl	8026b6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014246:	4b51      	ldr	r3, [pc, #324]	; (801438c <USBD_CDC_Init+0x1e8>)
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	f003 020f 	and.w	r2, r3, #15
 801424e:	6879      	ldr	r1, [r7, #4]
 8014250:	4613      	mov	r3, r2
 8014252:	009b      	lsls	r3, r3, #2
 8014254:	4413      	add	r3, r2
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	440b      	add	r3, r1
 801425a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801425e:	2201      	movs	r2, #1
 8014260:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014262:	4b4b      	ldr	r3, [pc, #300]	; (8014390 <USBD_CDC_Init+0x1ec>)
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	f003 020f 	and.w	r2, r3, #15
 801426a:	6879      	ldr	r1, [r7, #4]
 801426c:	4613      	mov	r3, r2
 801426e:	009b      	lsls	r3, r3, #2
 8014270:	4413      	add	r3, r2
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	440b      	add	r3, r1
 8014276:	3326      	adds	r3, #38	; 0x26
 8014278:	2210      	movs	r2, #16
 801427a:	801a      	strh	r2, [r3, #0]
 801427c:	e035      	b.n	80142ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801427e:	4b42      	ldr	r3, [pc, #264]	; (8014388 <USBD_CDC_Init+0x1e4>)
 8014280:	7819      	ldrb	r1, [r3, #0]
 8014282:	2340      	movs	r3, #64	; 0x40
 8014284:	2202      	movs	r2, #2
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f012 fc6f 	bl	8026b6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801428c:	4b3e      	ldr	r3, [pc, #248]	; (8014388 <USBD_CDC_Init+0x1e4>)
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	f003 020f 	and.w	r2, r3, #15
 8014294:	6879      	ldr	r1, [r7, #4]
 8014296:	4613      	mov	r3, r2
 8014298:	009b      	lsls	r3, r3, #2
 801429a:	4413      	add	r3, r2
 801429c:	009b      	lsls	r3, r3, #2
 801429e:	440b      	add	r3, r1
 80142a0:	3324      	adds	r3, #36	; 0x24
 80142a2:	2201      	movs	r2, #1
 80142a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80142a6:	4b39      	ldr	r3, [pc, #228]	; (801438c <USBD_CDC_Init+0x1e8>)
 80142a8:	7819      	ldrb	r1, [r3, #0]
 80142aa:	2340      	movs	r3, #64	; 0x40
 80142ac:	2202      	movs	r2, #2
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f012 fc5b 	bl	8026b6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80142b4:	4b35      	ldr	r3, [pc, #212]	; (801438c <USBD_CDC_Init+0x1e8>)
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	f003 020f 	and.w	r2, r3, #15
 80142bc:	6879      	ldr	r1, [r7, #4]
 80142be:	4613      	mov	r3, r2
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	4413      	add	r3, r2
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	440b      	add	r3, r1
 80142c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80142cc:	2201      	movs	r2, #1
 80142ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80142d0:	4b2f      	ldr	r3, [pc, #188]	; (8014390 <USBD_CDC_Init+0x1ec>)
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	f003 020f 	and.w	r2, r3, #15
 80142d8:	6879      	ldr	r1, [r7, #4]
 80142da:	4613      	mov	r3, r2
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	4413      	add	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	440b      	add	r3, r1
 80142e4:	3326      	adds	r3, #38	; 0x26
 80142e6:	2210      	movs	r2, #16
 80142e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80142ea:	4b29      	ldr	r3, [pc, #164]	; (8014390 <USBD_CDC_Init+0x1ec>)
 80142ec:	7819      	ldrb	r1, [r3, #0]
 80142ee:	2308      	movs	r3, #8
 80142f0:	2203      	movs	r2, #3
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f012 fc39 	bl	8026b6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80142f8:	4b25      	ldr	r3, [pc, #148]	; (8014390 <USBD_CDC_Init+0x1ec>)
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	f003 020f 	and.w	r2, r3, #15
 8014300:	6879      	ldr	r1, [r7, #4]
 8014302:	4613      	mov	r3, r2
 8014304:	009b      	lsls	r3, r3, #2
 8014306:	4413      	add	r3, r2
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	440b      	add	r3, r1
 801430c:	3324      	adds	r3, #36	; 0x24
 801430e:	2201      	movs	r2, #1
 8014310:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2200      	movs	r2, #0
 8014316:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	33b0      	adds	r3, #176	; 0xb0
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	4413      	add	r3, r2
 8014328:	685b      	ldr	r3, [r3, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2200      	movs	r2, #0
 8014332:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2200      	movs	r2, #0
 801433a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014344:	2b00      	cmp	r3, #0
 8014346:	d101      	bne.n	801434c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014348:	2302      	movs	r3, #2
 801434a:	e018      	b.n	801437e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	7c1b      	ldrb	r3, [r3, #16]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10a      	bne.n	801436a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014354:	4b0d      	ldr	r3, [pc, #52]	; (801438c <USBD_CDC_Init+0x1e8>)
 8014356:	7819      	ldrb	r1, [r3, #0]
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801435e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014362:	6878      	ldr	r0, [r7, #4]
 8014364:	f012 fcf0 	bl	8026d48 <USBD_LL_PrepareReceive>
 8014368:	e008      	b.n	801437c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801436a:	4b08      	ldr	r3, [pc, #32]	; (801438c <USBD_CDC_Init+0x1e8>)
 801436c:	7819      	ldrb	r1, [r3, #0]
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014374:	2340      	movs	r3, #64	; 0x40
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f012 fce6 	bl	8026d48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801437c:	2300      	movs	r3, #0
}
 801437e:	4618      	mov	r0, r3
 8014380:	3710      	adds	r7, #16
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}
 8014386:	bf00      	nop
 8014388:	2400044f 	.word	0x2400044f
 801438c:	24000450 	.word	0x24000450
 8014390:	24000451 	.word	0x24000451

08014394 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	460b      	mov	r3, r1
 801439e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80143a0:	4b3a      	ldr	r3, [pc, #232]	; (801448c <USBD_CDC_DeInit+0xf8>)
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	4619      	mov	r1, r3
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f012 fc05 	bl	8026bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80143ac:	4b37      	ldr	r3, [pc, #220]	; (801448c <USBD_CDC_DeInit+0xf8>)
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	f003 020f 	and.w	r2, r3, #15
 80143b4:	6879      	ldr	r1, [r7, #4]
 80143b6:	4613      	mov	r3, r2
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	4413      	add	r3, r2
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	440b      	add	r3, r1
 80143c0:	3324      	adds	r3, #36	; 0x24
 80143c2:	2200      	movs	r2, #0
 80143c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80143c6:	4b32      	ldr	r3, [pc, #200]	; (8014490 <USBD_CDC_DeInit+0xfc>)
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	4619      	mov	r1, r3
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f012 fbf2 	bl	8026bb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80143d2:	4b2f      	ldr	r3, [pc, #188]	; (8014490 <USBD_CDC_DeInit+0xfc>)
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	f003 020f 	and.w	r2, r3, #15
 80143da:	6879      	ldr	r1, [r7, #4]
 80143dc:	4613      	mov	r3, r2
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	4413      	add	r3, r2
 80143e2:	009b      	lsls	r3, r3, #2
 80143e4:	440b      	add	r3, r1
 80143e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80143ea:	2200      	movs	r2, #0
 80143ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80143ee:	4b29      	ldr	r3, [pc, #164]	; (8014494 <USBD_CDC_DeInit+0x100>)
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	4619      	mov	r1, r3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f012 fbde 	bl	8026bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80143fa:	4b26      	ldr	r3, [pc, #152]	; (8014494 <USBD_CDC_DeInit+0x100>)
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	f003 020f 	and.w	r2, r3, #15
 8014402:	6879      	ldr	r1, [r7, #4]
 8014404:	4613      	mov	r3, r2
 8014406:	009b      	lsls	r3, r3, #2
 8014408:	4413      	add	r3, r2
 801440a:	009b      	lsls	r3, r3, #2
 801440c:	440b      	add	r3, r1
 801440e:	3324      	adds	r3, #36	; 0x24
 8014410:	2200      	movs	r2, #0
 8014412:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014414:	4b1f      	ldr	r3, [pc, #124]	; (8014494 <USBD_CDC_DeInit+0x100>)
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	f003 020f 	and.w	r2, r3, #15
 801441c:	6879      	ldr	r1, [r7, #4]
 801441e:	4613      	mov	r3, r2
 8014420:	009b      	lsls	r3, r3, #2
 8014422:	4413      	add	r3, r2
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	440b      	add	r3, r1
 8014428:	3326      	adds	r3, #38	; 0x26
 801442a:	2200      	movs	r2, #0
 801442c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	32b0      	adds	r2, #176	; 0xb0
 8014438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d01f      	beq.n	8014480 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014446:	687a      	ldr	r2, [r7, #4]
 8014448:	33b0      	adds	r3, #176	; 0xb0
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	4413      	add	r3, r2
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	32b0      	adds	r2, #176	; 0xb0
 801445e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014462:	4618      	mov	r0, r3
 8014464:	f012 fcb2 	bl	8026dcc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	32b0      	adds	r2, #176	; 0xb0
 8014472:	2100      	movs	r1, #0
 8014474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2200      	movs	r2, #0
 801447c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014480:	2300      	movs	r3, #0
}
 8014482:	4618      	mov	r0, r3
 8014484:	3708      	adds	r7, #8
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	2400044f 	.word	0x2400044f
 8014490:	24000450 	.word	0x24000450
 8014494:	24000451 	.word	0x24000451

08014498 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b086      	sub	sp, #24
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	32b0      	adds	r2, #176	; 0xb0
 80144ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80144b2:	2300      	movs	r3, #0
 80144b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80144b6:	2300      	movs	r3, #0
 80144b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80144ba:	2300      	movs	r3, #0
 80144bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d101      	bne.n	80144c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80144c4:	2303      	movs	r3, #3
 80144c6:	e0bf      	b.n	8014648 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	781b      	ldrb	r3, [r3, #0]
 80144cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d050      	beq.n	8014576 <USBD_CDC_Setup+0xde>
 80144d4:	2b20      	cmp	r3, #32
 80144d6:	f040 80af 	bne.w	8014638 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	88db      	ldrh	r3, [r3, #6]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d03a      	beq.n	8014558 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	b25b      	sxtb	r3, r3
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	da1b      	bge.n	8014524 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	33b0      	adds	r3, #176	; 0xb0
 80144f6:	009b      	lsls	r3, r3, #2
 80144f8:	4413      	add	r3, r2
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	689b      	ldr	r3, [r3, #8]
 80144fe:	683a      	ldr	r2, [r7, #0]
 8014500:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014502:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014504:	683a      	ldr	r2, [r7, #0]
 8014506:	88d2      	ldrh	r2, [r2, #6]
 8014508:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	88db      	ldrh	r3, [r3, #6]
 801450e:	2b07      	cmp	r3, #7
 8014510:	bf28      	it	cs
 8014512:	2307      	movcs	r3, #7
 8014514:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	89fa      	ldrh	r2, [r7, #14]
 801451a:	4619      	mov	r1, r3
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f001 fd49 	bl	8015fb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014522:	e090      	b.n	8014646 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	785a      	ldrb	r2, [r3, #1]
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	88db      	ldrh	r3, [r3, #6]
 8014532:	2b3f      	cmp	r3, #63	; 0x3f
 8014534:	d803      	bhi.n	801453e <USBD_CDC_Setup+0xa6>
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	88db      	ldrh	r3, [r3, #6]
 801453a:	b2da      	uxtb	r2, r3
 801453c:	e000      	b.n	8014540 <USBD_CDC_Setup+0xa8>
 801453e:	2240      	movs	r2, #64	; 0x40
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014546:	6939      	ldr	r1, [r7, #16]
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801454e:	461a      	mov	r2, r3
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f001 fd5b 	bl	801600c <USBD_CtlPrepareRx>
      break;
 8014556:	e076      	b.n	8014646 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801455e:	687a      	ldr	r2, [r7, #4]
 8014560:	33b0      	adds	r3, #176	; 0xb0
 8014562:	009b      	lsls	r3, r3, #2
 8014564:	4413      	add	r3, r2
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	689b      	ldr	r3, [r3, #8]
 801456a:	683a      	ldr	r2, [r7, #0]
 801456c:	7850      	ldrb	r0, [r2, #1]
 801456e:	2200      	movs	r2, #0
 8014570:	6839      	ldr	r1, [r7, #0]
 8014572:	4798      	blx	r3
      break;
 8014574:	e067      	b.n	8014646 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	785b      	ldrb	r3, [r3, #1]
 801457a:	2b0b      	cmp	r3, #11
 801457c:	d851      	bhi.n	8014622 <USBD_CDC_Setup+0x18a>
 801457e:	a201      	add	r2, pc, #4	; (adr r2, 8014584 <USBD_CDC_Setup+0xec>)
 8014580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014584:	080145b5 	.word	0x080145b5
 8014588:	08014631 	.word	0x08014631
 801458c:	08014623 	.word	0x08014623
 8014590:	08014623 	.word	0x08014623
 8014594:	08014623 	.word	0x08014623
 8014598:	08014623 	.word	0x08014623
 801459c:	08014623 	.word	0x08014623
 80145a0:	08014623 	.word	0x08014623
 80145a4:	08014623 	.word	0x08014623
 80145a8:	08014623 	.word	0x08014623
 80145ac:	080145df 	.word	0x080145df
 80145b0:	08014609 	.word	0x08014609
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	2b03      	cmp	r3, #3
 80145be:	d107      	bne.n	80145d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80145c0:	f107 030a 	add.w	r3, r7, #10
 80145c4:	2202      	movs	r2, #2
 80145c6:	4619      	mov	r1, r3
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f001 fcf3 	bl	8015fb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145ce:	e032      	b.n	8014636 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145d0:	6839      	ldr	r1, [r7, #0]
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f001 fc7d 	bl	8015ed2 <USBD_CtlError>
            ret = USBD_FAIL;
 80145d8:	2303      	movs	r3, #3
 80145da:	75fb      	strb	r3, [r7, #23]
          break;
 80145dc:	e02b      	b.n	8014636 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	2b03      	cmp	r3, #3
 80145e8:	d107      	bne.n	80145fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80145ea:	f107 030d 	add.w	r3, r7, #13
 80145ee:	2201      	movs	r2, #1
 80145f0:	4619      	mov	r1, r3
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f001 fcde 	bl	8015fb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80145f8:	e01d      	b.n	8014636 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80145fa:	6839      	ldr	r1, [r7, #0]
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f001 fc68 	bl	8015ed2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014602:	2303      	movs	r3, #3
 8014604:	75fb      	strb	r3, [r7, #23]
          break;
 8014606:	e016      	b.n	8014636 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801460e:	b2db      	uxtb	r3, r3
 8014610:	2b03      	cmp	r3, #3
 8014612:	d00f      	beq.n	8014634 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014614:	6839      	ldr	r1, [r7, #0]
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f001 fc5b 	bl	8015ed2 <USBD_CtlError>
            ret = USBD_FAIL;
 801461c:	2303      	movs	r3, #3
 801461e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014620:	e008      	b.n	8014634 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014622:	6839      	ldr	r1, [r7, #0]
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f001 fc54 	bl	8015ed2 <USBD_CtlError>
          ret = USBD_FAIL;
 801462a:	2303      	movs	r3, #3
 801462c:	75fb      	strb	r3, [r7, #23]
          break;
 801462e:	e002      	b.n	8014636 <USBD_CDC_Setup+0x19e>
          break;
 8014630:	bf00      	nop
 8014632:	e008      	b.n	8014646 <USBD_CDC_Setup+0x1ae>
          break;
 8014634:	bf00      	nop
      }
      break;
 8014636:	e006      	b.n	8014646 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014638:	6839      	ldr	r1, [r7, #0]
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f001 fc49 	bl	8015ed2 <USBD_CtlError>
      ret = USBD_FAIL;
 8014640:	2303      	movs	r3, #3
 8014642:	75fb      	strb	r3, [r7, #23]
      break;
 8014644:	bf00      	nop
  }

  return (uint8_t)ret;
 8014646:	7dfb      	ldrb	r3, [r7, #23]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3718      	adds	r7, #24
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}

08014650 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	460b      	mov	r3, r1
 801465a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014662:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	32b0      	adds	r2, #176	; 0xb0
 801466e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d101      	bne.n	801467a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014676:	2303      	movs	r3, #3
 8014678:	e065      	b.n	8014746 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	32b0      	adds	r2, #176	; 0xb0
 8014684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014688:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801468a:	78fb      	ldrb	r3, [r7, #3]
 801468c:	f003 020f 	and.w	r2, r3, #15
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	4613      	mov	r3, r2
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	4413      	add	r3, r2
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	440b      	add	r3, r1
 801469c:	3318      	adds	r3, #24
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d02f      	beq.n	8014704 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80146a4:	78fb      	ldrb	r3, [r7, #3]
 80146a6:	f003 020f 	and.w	r2, r3, #15
 80146aa:	6879      	ldr	r1, [r7, #4]
 80146ac:	4613      	mov	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	4413      	add	r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	440b      	add	r3, r1
 80146b6:	3318      	adds	r3, #24
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	78fb      	ldrb	r3, [r7, #3]
 80146bc:	f003 010f 	and.w	r1, r3, #15
 80146c0:	68f8      	ldr	r0, [r7, #12]
 80146c2:	460b      	mov	r3, r1
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	440b      	add	r3, r1
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4403      	add	r3, r0
 80146cc:	3344      	adds	r3, #68	; 0x44
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80146d4:	fb01 f303 	mul.w	r3, r1, r3
 80146d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d112      	bne.n	8014704 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80146de:	78fb      	ldrb	r3, [r7, #3]
 80146e0:	f003 020f 	and.w	r2, r3, #15
 80146e4:	6879      	ldr	r1, [r7, #4]
 80146e6:	4613      	mov	r3, r2
 80146e8:	009b      	lsls	r3, r3, #2
 80146ea:	4413      	add	r3, r2
 80146ec:	009b      	lsls	r3, r3, #2
 80146ee:	440b      	add	r3, r1
 80146f0:	3318      	adds	r3, #24
 80146f2:	2200      	movs	r2, #0
 80146f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80146f6:	78f9      	ldrb	r1, [r7, #3]
 80146f8:	2300      	movs	r3, #0
 80146fa:	2200      	movs	r2, #0
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f012 fb02 	bl	8026d06 <USBD_LL_Transmit>
 8014702:	e01f      	b.n	8014744 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	2200      	movs	r2, #0
 8014708:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	33b0      	adds	r3, #176	; 0xb0
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	4413      	add	r3, r2
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	691b      	ldr	r3, [r3, #16]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d010      	beq.n	8014744 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	33b0      	adds	r3, #176	; 0xb0
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	4413      	add	r3, r2
 8014730:	685b      	ldr	r3, [r3, #4]
 8014732:	691b      	ldr	r3, [r3, #16]
 8014734:	68ba      	ldr	r2, [r7, #8]
 8014736:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801473a:	68ba      	ldr	r2, [r7, #8]
 801473c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014740:	78fa      	ldrb	r2, [r7, #3]
 8014742:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014744:	2300      	movs	r3, #0
}
 8014746:	4618      	mov	r0, r3
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}

0801474e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801474e:	b580      	push	{r7, lr}
 8014750:	b084      	sub	sp, #16
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
 8014756:	460b      	mov	r3, r1
 8014758:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	32b0      	adds	r2, #176	; 0xb0
 8014764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014768:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	32b0      	adds	r2, #176	; 0xb0
 8014774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d101      	bne.n	8014780 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801477c:	2303      	movs	r3, #3
 801477e:	e01a      	b.n	80147b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014780:	78fb      	ldrb	r3, [r7, #3]
 8014782:	4619      	mov	r1, r3
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f012 fb00 	bl	8026d8a <USBD_LL_GetRxDataSize>
 801478a:	4602      	mov	r2, r0
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014798:	687a      	ldr	r2, [r7, #4]
 801479a:	33b0      	adds	r3, #176	; 0xb0
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	4413      	add	r3, r2
 80147a0:	685b      	ldr	r3, [r3, #4]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	68fa      	ldr	r2, [r7, #12]
 80147a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80147b0:	4611      	mov	r1, r2
 80147b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80147b4:	2300      	movs	r3, #0
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	3710      	adds	r7, #16
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}

080147be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80147be:	b580      	push	{r7, lr}
 80147c0:	b084      	sub	sp, #16
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	32b0      	adds	r2, #176	; 0xb0
 80147d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d101      	bne.n	80147e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80147dc:	2303      	movs	r3, #3
 80147de:	e025      	b.n	801482c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	33b0      	adds	r3, #176	; 0xb0
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	4413      	add	r3, r2
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d01a      	beq.n	801482a <USBD_CDC_EP0_RxReady+0x6c>
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80147fa:	2bff      	cmp	r3, #255	; 0xff
 80147fc:	d015      	beq.n	801482a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	33b0      	adds	r3, #176	; 0xb0
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	4413      	add	r3, r2
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	689b      	ldr	r3, [r3, #8]
 8014810:	68fa      	ldr	r2, [r7, #12]
 8014812:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014816:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014818:	68fa      	ldr	r2, [r7, #12]
 801481a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801481e:	b292      	uxth	r2, r2
 8014820:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	22ff      	movs	r2, #255	; 0xff
 8014826:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801482a:	2300      	movs	r3, #0
}
 801482c:	4618      	mov	r0, r3
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801483c:	2182      	movs	r1, #130	; 0x82
 801483e:	4818      	ldr	r0, [pc, #96]	; (80148a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014840:	f000 fd0f 	bl	8015262 <USBD_GetEpDesc>
 8014844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014846:	2101      	movs	r1, #1
 8014848:	4815      	ldr	r0, [pc, #84]	; (80148a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801484a:	f000 fd0a 	bl	8015262 <USBD_GetEpDesc>
 801484e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014850:	2181      	movs	r1, #129	; 0x81
 8014852:	4813      	ldr	r0, [pc, #76]	; (80148a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014854:	f000 fd05 	bl	8015262 <USBD_GetEpDesc>
 8014858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d002      	beq.n	8014866 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	2210      	movs	r2, #16
 8014864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d006      	beq.n	801487a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	2200      	movs	r2, #0
 8014870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014874:	711a      	strb	r2, [r3, #4]
 8014876:	2200      	movs	r2, #0
 8014878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d006      	beq.n	801488e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	2200      	movs	r2, #0
 8014884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014888:	711a      	strb	r2, [r3, #4]
 801488a:	2200      	movs	r2, #0
 801488c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2243      	movs	r2, #67	; 0x43
 8014892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014894:	4b02      	ldr	r3, [pc, #8]	; (80148a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014896:	4618      	mov	r0, r3
 8014898:	3718      	adds	r7, #24
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}
 801489e:	bf00      	nop
 80148a0:	2400040c 	.word	0x2400040c

080148a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b086      	sub	sp, #24
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80148ac:	2182      	movs	r1, #130	; 0x82
 80148ae:	4818      	ldr	r0, [pc, #96]	; (8014910 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148b0:	f000 fcd7 	bl	8015262 <USBD_GetEpDesc>
 80148b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80148b6:	2101      	movs	r1, #1
 80148b8:	4815      	ldr	r0, [pc, #84]	; (8014910 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148ba:	f000 fcd2 	bl	8015262 <USBD_GetEpDesc>
 80148be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80148c0:	2181      	movs	r1, #129	; 0x81
 80148c2:	4813      	ldr	r0, [pc, #76]	; (8014910 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148c4:	f000 fccd 	bl	8015262 <USBD_GetEpDesc>
 80148c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d002      	beq.n	80148d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	2210      	movs	r2, #16
 80148d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d006      	beq.n	80148ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	2200      	movs	r2, #0
 80148e0:	711a      	strb	r2, [r3, #4]
 80148e2:	2200      	movs	r2, #0
 80148e4:	f042 0202 	orr.w	r2, r2, #2
 80148e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d006      	beq.n	80148fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2200      	movs	r2, #0
 80148f4:	711a      	strb	r2, [r3, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f042 0202 	orr.w	r2, r2, #2
 80148fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	2243      	movs	r2, #67	; 0x43
 8014902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014904:	4b02      	ldr	r3, [pc, #8]	; (8014910 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014906:	4618      	mov	r0, r3
 8014908:	3718      	adds	r7, #24
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	2400040c 	.word	0x2400040c

08014914 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b086      	sub	sp, #24
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801491c:	2182      	movs	r1, #130	; 0x82
 801491e:	4818      	ldr	r0, [pc, #96]	; (8014980 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014920:	f000 fc9f 	bl	8015262 <USBD_GetEpDesc>
 8014924:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014926:	2101      	movs	r1, #1
 8014928:	4815      	ldr	r0, [pc, #84]	; (8014980 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801492a:	f000 fc9a 	bl	8015262 <USBD_GetEpDesc>
 801492e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014930:	2181      	movs	r1, #129	; 0x81
 8014932:	4813      	ldr	r0, [pc, #76]	; (8014980 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014934:	f000 fc95 	bl	8015262 <USBD_GetEpDesc>
 8014938:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d002      	beq.n	8014946 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	2210      	movs	r2, #16
 8014944:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d006      	beq.n	801495a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	2200      	movs	r2, #0
 8014950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014954:	711a      	strb	r2, [r3, #4]
 8014956:	2200      	movs	r2, #0
 8014958:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d006      	beq.n	801496e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2200      	movs	r2, #0
 8014964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014968:	711a      	strb	r2, [r3, #4]
 801496a:	2200      	movs	r2, #0
 801496c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2243      	movs	r2, #67	; 0x43
 8014972:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014974:	4b02      	ldr	r3, [pc, #8]	; (8014980 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014976:	4618      	mov	r0, r3
 8014978:	3718      	adds	r7, #24
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	2400040c 	.word	0x2400040c

08014984 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014984:	b480      	push	{r7}
 8014986:	b083      	sub	sp, #12
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	220a      	movs	r2, #10
 8014990:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014992:	4b03      	ldr	r3, [pc, #12]	; (80149a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014994:	4618      	mov	r0, r3
 8014996:	370c      	adds	r7, #12
 8014998:	46bd      	mov	sp, r7
 801499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499e:	4770      	bx	lr
 80149a0:	240003c8 	.word	0x240003c8

080149a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d101      	bne.n	80149b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80149b4:	2303      	movs	r3, #3
 80149b6:	e009      	b.n	80149cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	33b0      	adds	r3, #176	; 0xb0
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	4413      	add	r3, r2
 80149c6:	683a      	ldr	r2, [r7, #0]
 80149c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80149ca:	2300      	movs	r3, #0
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80149d8:	b480      	push	{r7}
 80149da:	b087      	sub	sp, #28
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	32b0      	adds	r2, #176	; 0xb0
 80149ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d101      	bne.n	80149fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80149fa:	2303      	movs	r3, #3
 80149fc:	e008      	b.n	8014a10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	68ba      	ldr	r2, [r7, #8]
 8014a02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	687a      	ldr	r2, [r7, #4]
 8014a0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014a0e:	2300      	movs	r3, #0
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	371c      	adds	r7, #28
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b085      	sub	sp, #20
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	32b0      	adds	r2, #176	; 0xb0
 8014a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d101      	bne.n	8014a40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014a3c:	2303      	movs	r3, #3
 8014a3e:	e004      	b.n	8014a4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	683a      	ldr	r2, [r7, #0]
 8014a44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014a48:	2300      	movs	r3, #0
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3714      	adds	r7, #20
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr
	...

08014a58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b084      	sub	sp, #16
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	32b0      	adds	r2, #176	; 0xb0
 8014a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	32b0      	adds	r2, #176	; 0xb0
 8014a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d101      	bne.n	8014a86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014a82:	2303      	movs	r3, #3
 8014a84:	e018      	b.n	8014ab8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	7c1b      	ldrb	r3, [r3, #16]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d10a      	bne.n	8014aa4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a8e:	4b0c      	ldr	r3, [pc, #48]	; (8014ac0 <USBD_CDC_ReceivePacket+0x68>)
 8014a90:	7819      	ldrb	r1, [r3, #0]
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f012 f953 	bl	8026d48 <USBD_LL_PrepareReceive>
 8014aa2:	e008      	b.n	8014ab6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014aa4:	4b06      	ldr	r3, [pc, #24]	; (8014ac0 <USBD_CDC_ReceivePacket+0x68>)
 8014aa6:	7819      	ldrb	r1, [r3, #0]
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014aae:	2340      	movs	r3, #64	; 0x40
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f012 f949 	bl	8026d48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014ab6:	2300      	movs	r3, #0
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3710      	adds	r7, #16
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	24000450 	.word	0x24000450

08014ac4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b086      	sub	sp, #24
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	4613      	mov	r3, r2
 8014ad0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d101      	bne.n	8014adc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014ad8:	2303      	movs	r3, #3
 8014ada:	e01f      	b.n	8014b1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	2200      	movs	r2, #0
 8014af0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d003      	beq.n	8014b02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	68ba      	ldr	r2, [r7, #8]
 8014afe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	2201      	movs	r2, #1
 8014b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	79fa      	ldrb	r2, [r7, #7]
 8014b0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	f011 ffbd 	bl	8026a90 <USBD_LL_Init>
 8014b16:	4603      	mov	r3, r0
 8014b18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3718      	adds	r7, #24
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d101      	bne.n	8014b3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014b38:	2303      	movs	r3, #3
 8014b3a:	e025      	b.n	8014b88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	683a      	ldr	r2, [r7, #0]
 8014b40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	32ae      	adds	r2, #174	; 0xae
 8014b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d00f      	beq.n	8014b78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	32ae      	adds	r2, #174	; 0xae
 8014b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b68:	f107 020e 	add.w	r2, r7, #14
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	4798      	blx	r3
 8014b70:	4602      	mov	r2, r0
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014b7e:	1c5a      	adds	r2, r3, #1
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f011 ffcb 	bl	8026b34 <USBD_LL_Start>
 8014b9e:	4603      	mov	r3, r0
}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3708      	adds	r7, #8
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}

08014ba8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014ba8:	b480      	push	{r7}
 8014baa:	b083      	sub	sp, #12
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014bb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	370c      	adds	r7, #12
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbc:	4770      	bx	lr

08014bbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bbe:	b580      	push	{r7, lr}
 8014bc0:	b084      	sub	sp, #16
 8014bc2:	af00      	add	r7, sp, #0
 8014bc4:	6078      	str	r0, [r7, #4]
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d009      	beq.n	8014bec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	78fa      	ldrb	r2, [r7, #3]
 8014be2:	4611      	mov	r1, r2
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	4798      	blx	r3
 8014be8:	4603      	mov	r3, r0
 8014bea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3710      	adds	r7, #16
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b084      	sub	sp, #16
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
 8014bfe:	460b      	mov	r3, r1
 8014c00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c02:	2300      	movs	r3, #0
 8014c04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	78fa      	ldrb	r2, [r7, #3]
 8014c10:	4611      	mov	r1, r2
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	4798      	blx	r3
 8014c16:	4603      	mov	r3, r0
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d001      	beq.n	8014c20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014c1c:	2303      	movs	r3, #3
 8014c1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	3710      	adds	r7, #16
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}

08014c2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014c2a:	b580      	push	{r7, lr}
 8014c2c:	b084      	sub	sp, #16
 8014c2e:	af00      	add	r7, sp, #0
 8014c30:	6078      	str	r0, [r7, #4]
 8014c32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c3a:	6839      	ldr	r1, [r7, #0]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f001 f90e 	bl	8015e5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	2201      	movs	r2, #1
 8014c46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014c50:	461a      	mov	r2, r3
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014c5e:	f003 031f 	and.w	r3, r3, #31
 8014c62:	2b02      	cmp	r3, #2
 8014c64:	d01a      	beq.n	8014c9c <USBD_LL_SetupStage+0x72>
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	d822      	bhi.n	8014cb0 <USBD_LL_SetupStage+0x86>
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d002      	beq.n	8014c74 <USBD_LL_SetupStage+0x4a>
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	d00a      	beq.n	8014c88 <USBD_LL_SetupStage+0x5e>
 8014c72:	e01d      	b.n	8014cb0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c7a:	4619      	mov	r1, r3
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f000 fb65 	bl	801534c <USBD_StdDevReq>
 8014c82:	4603      	mov	r3, r0
 8014c84:	73fb      	strb	r3, [r7, #15]
      break;
 8014c86:	e020      	b.n	8014cca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014c8e:	4619      	mov	r1, r3
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f000 fbcd 	bl	8015430 <USBD_StdItfReq>
 8014c96:	4603      	mov	r3, r0
 8014c98:	73fb      	strb	r3, [r7, #15]
      break;
 8014c9a:	e016      	b.n	8014cca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f000 fc2f 	bl	8015508 <USBD_StdEPReq>
 8014caa:	4603      	mov	r3, r0
 8014cac:	73fb      	strb	r3, [r7, #15]
      break;
 8014cae:	e00c      	b.n	8014cca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014cb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f011 ff98 	bl	8026bf4 <USBD_LL_StallEP>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8014cc8:	bf00      	nop
  }

  return ret;
 8014cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3710      	adds	r7, #16
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}

08014cd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b086      	sub	sp, #24
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	460b      	mov	r3, r1
 8014cde:	607a      	str	r2, [r7, #4]
 8014ce0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014ce6:	7afb      	ldrb	r3, [r7, #11]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d16e      	bne.n	8014dca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014cf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014cfa:	2b03      	cmp	r3, #3
 8014cfc:	f040 8098 	bne.w	8014e30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	689a      	ldr	r2, [r3, #8]
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	68db      	ldr	r3, [r3, #12]
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d913      	bls.n	8014d34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	689a      	ldr	r2, [r3, #8]
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	68db      	ldr	r3, [r3, #12]
 8014d14:	1ad2      	subs	r2, r2, r3
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	68da      	ldr	r2, [r3, #12]
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	689b      	ldr	r3, [r3, #8]
 8014d22:	4293      	cmp	r3, r2
 8014d24:	bf28      	it	cs
 8014d26:	4613      	movcs	r3, r2
 8014d28:	461a      	mov	r2, r3
 8014d2a:	6879      	ldr	r1, [r7, #4]
 8014d2c:	68f8      	ldr	r0, [r7, #12]
 8014d2e:	f001 f98a 	bl	8016046 <USBD_CtlContinueRx>
 8014d32:	e07d      	b.n	8014e30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014d3a:	f003 031f 	and.w	r3, r3, #31
 8014d3e:	2b02      	cmp	r3, #2
 8014d40:	d014      	beq.n	8014d6c <USBD_LL_DataOutStage+0x98>
 8014d42:	2b02      	cmp	r3, #2
 8014d44:	d81d      	bhi.n	8014d82 <USBD_LL_DataOutStage+0xae>
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d002      	beq.n	8014d50 <USBD_LL_DataOutStage+0x7c>
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	d003      	beq.n	8014d56 <USBD_LL_DataOutStage+0x82>
 8014d4e:	e018      	b.n	8014d82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014d50:	2300      	movs	r3, #0
 8014d52:	75bb      	strb	r3, [r7, #22]
            break;
 8014d54:	e018      	b.n	8014d88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014d5c:	b2db      	uxtb	r3, r3
 8014d5e:	4619      	mov	r1, r3
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	f000 fa64 	bl	801522e <USBD_CoreFindIF>
 8014d66:	4603      	mov	r3, r0
 8014d68:	75bb      	strb	r3, [r7, #22]
            break;
 8014d6a:	e00d      	b.n	8014d88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014d72:	b2db      	uxtb	r3, r3
 8014d74:	4619      	mov	r1, r3
 8014d76:	68f8      	ldr	r0, [r7, #12]
 8014d78:	f000 fa66 	bl	8015248 <USBD_CoreFindEP>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	75bb      	strb	r3, [r7, #22]
            break;
 8014d80:	e002      	b.n	8014d88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014d82:	2300      	movs	r3, #0
 8014d84:	75bb      	strb	r3, [r7, #22]
            break;
 8014d86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014d88:	7dbb      	ldrb	r3, [r7, #22]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d119      	bne.n	8014dc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	2b03      	cmp	r3, #3
 8014d98:	d113      	bne.n	8014dc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014d9a:	7dba      	ldrb	r2, [r7, #22]
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	32ae      	adds	r2, #174	; 0xae
 8014da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014da4:	691b      	ldr	r3, [r3, #16]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d00b      	beq.n	8014dc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014daa:	7dba      	ldrb	r2, [r7, #22]
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014db2:	7dba      	ldrb	r2, [r7, #22]
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	32ae      	adds	r2, #174	; 0xae
 8014db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dbc:	691b      	ldr	r3, [r3, #16]
 8014dbe:	68f8      	ldr	r0, [r7, #12]
 8014dc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014dc2:	68f8      	ldr	r0, [r7, #12]
 8014dc4:	f001 f950 	bl	8016068 <USBD_CtlSendStatus>
 8014dc8:	e032      	b.n	8014e30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014dca:	7afb      	ldrb	r3, [r7, #11]
 8014dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f000 fa37 	bl	8015248 <USBD_CoreFindEP>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014dde:	7dbb      	ldrb	r3, [r7, #22]
 8014de0:	2bff      	cmp	r3, #255	; 0xff
 8014de2:	d025      	beq.n	8014e30 <USBD_LL_DataOutStage+0x15c>
 8014de4:	7dbb      	ldrb	r3, [r7, #22]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d122      	bne.n	8014e30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014df0:	b2db      	uxtb	r3, r3
 8014df2:	2b03      	cmp	r3, #3
 8014df4:	d117      	bne.n	8014e26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014df6:	7dba      	ldrb	r2, [r7, #22]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	32ae      	adds	r2, #174	; 0xae
 8014dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e00:	699b      	ldr	r3, [r3, #24]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d00f      	beq.n	8014e26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014e06:	7dba      	ldrb	r2, [r7, #22]
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014e0e:	7dba      	ldrb	r2, [r7, #22]
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	32ae      	adds	r2, #174	; 0xae
 8014e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e18:	699b      	ldr	r3, [r3, #24]
 8014e1a:	7afa      	ldrb	r2, [r7, #11]
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	68f8      	ldr	r0, [r7, #12]
 8014e20:	4798      	blx	r3
 8014e22:	4603      	mov	r3, r0
 8014e24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014e26:	7dfb      	ldrb	r3, [r7, #23]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d001      	beq.n	8014e30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014e2c:	7dfb      	ldrb	r3, [r7, #23]
 8014e2e:	e000      	b.n	8014e32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014e30:	2300      	movs	r3, #0
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3718      	adds	r7, #24
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b086      	sub	sp, #24
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	60f8      	str	r0, [r7, #12]
 8014e42:	460b      	mov	r3, r1
 8014e44:	607a      	str	r2, [r7, #4]
 8014e46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014e48:	7afb      	ldrb	r3, [r7, #11]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d16f      	bne.n	8014f2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	3314      	adds	r3, #20
 8014e52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014e5a:	2b02      	cmp	r3, #2
 8014e5c:	d15a      	bne.n	8014f14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014e5e:	693b      	ldr	r3, [r7, #16]
 8014e60:	689a      	ldr	r2, [r3, #8]
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	68db      	ldr	r3, [r3, #12]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d914      	bls.n	8014e94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	689a      	ldr	r2, [r3, #8]
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	1ad2      	subs	r2, r2, r3
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	689b      	ldr	r3, [r3, #8]
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	6879      	ldr	r1, [r7, #4]
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f001 f8b2 	bl	8015fea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e86:	2300      	movs	r3, #0
 8014e88:	2200      	movs	r2, #0
 8014e8a:	2100      	movs	r1, #0
 8014e8c:	68f8      	ldr	r0, [r7, #12]
 8014e8e:	f011 ff5b 	bl	8026d48 <USBD_LL_PrepareReceive>
 8014e92:	e03f      	b.n	8014f14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	68da      	ldr	r2, [r3, #12]
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	689b      	ldr	r3, [r3, #8]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d11c      	bne.n	8014eda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	685a      	ldr	r2, [r3, #4]
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d316      	bcc.n	8014eda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	685a      	ldr	r2, [r3, #4]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d20f      	bcs.n	8014eda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014eba:	2200      	movs	r2, #0
 8014ebc:	2100      	movs	r1, #0
 8014ebe:	68f8      	ldr	r0, [r7, #12]
 8014ec0:	f001 f893 	bl	8015fea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014ecc:	2300      	movs	r3, #0
 8014ece:	2200      	movs	r2, #0
 8014ed0:	2100      	movs	r1, #0
 8014ed2:	68f8      	ldr	r0, [r7, #12]
 8014ed4:	f011 ff38 	bl	8026d48 <USBD_LL_PrepareReceive>
 8014ed8:	e01c      	b.n	8014f14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	2b03      	cmp	r3, #3
 8014ee4:	d10f      	bne.n	8014f06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d009      	beq.n	8014f06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f00:	68db      	ldr	r3, [r3, #12]
 8014f02:	68f8      	ldr	r0, [r7, #12]
 8014f04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f06:	2180      	movs	r1, #128	; 0x80
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f011 fe73 	bl	8026bf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014f0e:	68f8      	ldr	r0, [r7, #12]
 8014f10:	f001 f8bd 	bl	801608e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d03a      	beq.n	8014f94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014f1e:	68f8      	ldr	r0, [r7, #12]
 8014f20:	f7ff fe42 	bl	8014ba8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2200      	movs	r2, #0
 8014f28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014f2c:	e032      	b.n	8014f94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014f2e:	7afb      	ldrb	r3, [r7, #11]
 8014f30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	4619      	mov	r1, r3
 8014f38:	68f8      	ldr	r0, [r7, #12]
 8014f3a:	f000 f985 	bl	8015248 <USBD_CoreFindEP>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014f42:	7dfb      	ldrb	r3, [r7, #23]
 8014f44:	2bff      	cmp	r3, #255	; 0xff
 8014f46:	d025      	beq.n	8014f94 <USBD_LL_DataInStage+0x15a>
 8014f48:	7dfb      	ldrb	r3, [r7, #23]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d122      	bne.n	8014f94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	2b03      	cmp	r3, #3
 8014f58:	d11c      	bne.n	8014f94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014f5a:	7dfa      	ldrb	r2, [r7, #23]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	32ae      	adds	r2, #174	; 0xae
 8014f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f64:	695b      	ldr	r3, [r3, #20]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d014      	beq.n	8014f94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014f6a:	7dfa      	ldrb	r2, [r7, #23]
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014f72:	7dfa      	ldrb	r2, [r7, #23]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	32ae      	adds	r2, #174	; 0xae
 8014f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f7c:	695b      	ldr	r3, [r3, #20]
 8014f7e:	7afa      	ldrb	r2, [r7, #11]
 8014f80:	4611      	mov	r1, r2
 8014f82:	68f8      	ldr	r0, [r7, #12]
 8014f84:	4798      	blx	r3
 8014f86:	4603      	mov	r3, r0
 8014f88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014f8a:	7dbb      	ldrb	r3, [r7, #22]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d001      	beq.n	8014f94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014f90:	7dbb      	ldrb	r3, [r7, #22]
 8014f92:	e000      	b.n	8014f96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014f94:	2300      	movs	r3, #0
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3718      	adds	r7, #24
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}

08014f9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014f9e:	b580      	push	{r7, lr}
 8014fa0:	b084      	sub	sp, #16
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2201      	movs	r2, #1
 8014fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d014      	beq.n	8015004 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d00e      	beq.n	8015004 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	6852      	ldr	r2, [r2, #4]
 8014ff2:	b2d2      	uxtb	r2, r2
 8014ff4:	4611      	mov	r1, r2
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	4798      	blx	r3
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d001      	beq.n	8015004 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015000:	2303      	movs	r3, #3
 8015002:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015004:	2340      	movs	r3, #64	; 0x40
 8015006:	2200      	movs	r2, #0
 8015008:	2100      	movs	r1, #0
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f011 fdad 	bl	8026b6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2201      	movs	r2, #1
 8015014:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2240      	movs	r2, #64	; 0x40
 801501c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015020:	2340      	movs	r3, #64	; 0x40
 8015022:	2200      	movs	r2, #0
 8015024:	2180      	movs	r1, #128	; 0x80
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f011 fd9f 	bl	8026b6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2201      	movs	r2, #1
 8015030:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2240      	movs	r2, #64	; 0x40
 8015036:	621a      	str	r2, [r3, #32]

  return ret;
 8015038:	7bfb      	ldrb	r3, [r7, #15]
}
 801503a:	4618      	mov	r0, r3
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015042:	b480      	push	{r7}
 8015044:	b083      	sub	sp, #12
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
 801504a:	460b      	mov	r3, r1
 801504c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	78fa      	ldrb	r2, [r7, #3]
 8015052:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015054:	2300      	movs	r3, #0
}
 8015056:	4618      	mov	r0, r3
 8015058:	370c      	adds	r7, #12
 801505a:	46bd      	mov	sp, r7
 801505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015060:	4770      	bx	lr

08015062 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015062:	b480      	push	{r7}
 8015064:	b083      	sub	sp, #12
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015070:	b2db      	uxtb	r3, r3
 8015072:	2b04      	cmp	r3, #4
 8015074:	d006      	beq.n	8015084 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801507c:	b2da      	uxtb	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2204      	movs	r2, #4
 8015088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801508c:	2300      	movs	r3, #0
}
 801508e:	4618      	mov	r0, r3
 8015090:	370c      	adds	r7, #12
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr

0801509a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801509a:	b480      	push	{r7}
 801509c:	b083      	sub	sp, #12
 801509e:	af00      	add	r7, sp, #0
 80150a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150a8:	b2db      	uxtb	r3, r3
 80150aa:	2b04      	cmp	r3, #4
 80150ac:	d106      	bne.n	80150bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80150b4:	b2da      	uxtb	r2, r3
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80150bc:	2300      	movs	r3, #0
}
 80150be:	4618      	mov	r0, r3
 80150c0:	370c      	adds	r7, #12
 80150c2:	46bd      	mov	sp, r7
 80150c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c8:	4770      	bx	lr

080150ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b082      	sub	sp, #8
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150d8:	b2db      	uxtb	r3, r3
 80150da:	2b03      	cmp	r3, #3
 80150dc:	d110      	bne.n	8015100 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d00b      	beq.n	8015100 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150ee:	69db      	ldr	r3, [r3, #28]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d005      	beq.n	8015100 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150fa:	69db      	ldr	r3, [r3, #28]
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015100:	2300      	movs	r3, #0
}
 8015102:	4618      	mov	r0, r3
 8015104:	3708      	adds	r7, #8
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b082      	sub	sp, #8
 801510e:	af00      	add	r7, sp, #0
 8015110:	6078      	str	r0, [r7, #4]
 8015112:	460b      	mov	r3, r1
 8015114:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	32ae      	adds	r2, #174	; 0xae
 8015120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015128:	2303      	movs	r3, #3
 801512a:	e01c      	b.n	8015166 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015132:	b2db      	uxtb	r3, r3
 8015134:	2b03      	cmp	r3, #3
 8015136:	d115      	bne.n	8015164 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	32ae      	adds	r2, #174	; 0xae
 8015142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015146:	6a1b      	ldr	r3, [r3, #32]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d00b      	beq.n	8015164 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	32ae      	adds	r2, #174	; 0xae
 8015156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801515a:	6a1b      	ldr	r3, [r3, #32]
 801515c:	78fa      	ldrb	r2, [r7, #3]
 801515e:	4611      	mov	r1, r2
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015164:	2300      	movs	r3, #0
}
 8015166:	4618      	mov	r0, r3
 8015168:	3708      	adds	r7, #8
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}

0801516e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801516e:	b580      	push	{r7, lr}
 8015170:	b082      	sub	sp, #8
 8015172:	af00      	add	r7, sp, #0
 8015174:	6078      	str	r0, [r7, #4]
 8015176:	460b      	mov	r3, r1
 8015178:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	32ae      	adds	r2, #174	; 0xae
 8015184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d101      	bne.n	8015190 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801518c:	2303      	movs	r3, #3
 801518e:	e01c      	b.n	80151ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015196:	b2db      	uxtb	r3, r3
 8015198:	2b03      	cmp	r3, #3
 801519a:	d115      	bne.n	80151c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	32ae      	adds	r2, #174	; 0xae
 80151a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d00b      	beq.n	80151c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	32ae      	adds	r2, #174	; 0xae
 80151ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151c0:	78fa      	ldrb	r2, [r7, #3]
 80151c2:	4611      	mov	r1, r2
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80151c8:	2300      	movs	r3, #0
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3708      	adds	r7, #8
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}

080151d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80151d2:	b480      	push	{r7}
 80151d4:	b083      	sub	sp, #12
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80151da:	2300      	movs	r3, #0
}
 80151dc:	4618      	mov	r0, r3
 80151de:	370c      	adds	r7, #12
 80151e0:	46bd      	mov	sp, r7
 80151e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e6:	4770      	bx	lr

080151e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b084      	sub	sp, #16
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80151f0:	2300      	movs	r3, #0
 80151f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2201      	movs	r2, #1
 80151f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00e      	beq.n	8015224 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	687a      	ldr	r2, [r7, #4]
 8015210:	6852      	ldr	r2, [r2, #4]
 8015212:	b2d2      	uxtb	r2, r2
 8015214:	4611      	mov	r1, r2
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	4798      	blx	r3
 801521a:	4603      	mov	r3, r0
 801521c:	2b00      	cmp	r3, #0
 801521e:	d001      	beq.n	8015224 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015220:	2303      	movs	r3, #3
 8015222:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015224:	7bfb      	ldrb	r3, [r7, #15]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801522e:	b480      	push	{r7}
 8015230:	b083      	sub	sp, #12
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
 8015236:	460b      	mov	r3, r1
 8015238:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801523a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801523c:	4618      	mov	r0, r3
 801523e:	370c      	adds	r7, #12
 8015240:	46bd      	mov	sp, r7
 8015242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015246:	4770      	bx	lr

08015248 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015248:	b480      	push	{r7}
 801524a:	b083      	sub	sp, #12
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	460b      	mov	r3, r1
 8015252:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015254:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015256:	4618      	mov	r0, r3
 8015258:	370c      	adds	r7, #12
 801525a:	46bd      	mov	sp, r7
 801525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015260:	4770      	bx	lr

08015262 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b086      	sub	sp, #24
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
 801526a:	460b      	mov	r3, r1
 801526c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015276:	2300      	movs	r3, #0
 8015278:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	885b      	ldrh	r3, [r3, #2]
 801527e:	b29a      	uxth	r2, r3
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	b29b      	uxth	r3, r3
 8015286:	429a      	cmp	r2, r3
 8015288:	d920      	bls.n	80152cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	b29b      	uxth	r3, r3
 8015290:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015292:	e013      	b.n	80152bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015294:	f107 030a 	add.w	r3, r7, #10
 8015298:	4619      	mov	r1, r3
 801529a:	6978      	ldr	r0, [r7, #20]
 801529c:	f000 f81b 	bl	80152d6 <USBD_GetNextDesc>
 80152a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	785b      	ldrb	r3, [r3, #1]
 80152a6:	2b05      	cmp	r3, #5
 80152a8:	d108      	bne.n	80152bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	789b      	ldrb	r3, [r3, #2]
 80152b2:	78fa      	ldrb	r2, [r7, #3]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d008      	beq.n	80152ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80152b8:	2300      	movs	r3, #0
 80152ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	885b      	ldrh	r3, [r3, #2]
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	897b      	ldrh	r3, [r7, #10]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	d8e5      	bhi.n	8015294 <USBD_GetEpDesc+0x32>
 80152c8:	e000      	b.n	80152cc <USBD_GetEpDesc+0x6a>
          break;
 80152ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80152cc:	693b      	ldr	r3, [r7, #16]
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3718      	adds	r7, #24
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}

080152d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80152d6:	b480      	push	{r7}
 80152d8:	b085      	sub	sp, #20
 80152da:	af00      	add	r7, sp, #0
 80152dc:	6078      	str	r0, [r7, #4]
 80152de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	881a      	ldrh	r2, [r3, #0]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	781b      	ldrb	r3, [r3, #0]
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	4413      	add	r3, r2
 80152f0:	b29a      	uxth	r2, r3
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	781b      	ldrb	r3, [r3, #0]
 80152fa:	461a      	mov	r2, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	4413      	add	r3, r2
 8015300:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015302:	68fb      	ldr	r3, [r7, #12]
}
 8015304:	4618      	mov	r0, r3
 8015306:	3714      	adds	r7, #20
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr

08015310 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015310:	b480      	push	{r7}
 8015312:	b087      	sub	sp, #28
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	3301      	adds	r3, #1
 8015326:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	781b      	ldrb	r3, [r3, #0]
 801532c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801532e:	8a3b      	ldrh	r3, [r7, #16]
 8015330:	021b      	lsls	r3, r3, #8
 8015332:	b21a      	sxth	r2, r3
 8015334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015338:	4313      	orrs	r3, r2
 801533a:	b21b      	sxth	r3, r3
 801533c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801533e:	89fb      	ldrh	r3, [r7, #14]
}
 8015340:	4618      	mov	r0, r3
 8015342:	371c      	adds	r7, #28
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr

0801534c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015356:	2300      	movs	r3, #0
 8015358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	781b      	ldrb	r3, [r3, #0]
 801535e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015362:	2b40      	cmp	r3, #64	; 0x40
 8015364:	d005      	beq.n	8015372 <USBD_StdDevReq+0x26>
 8015366:	2b40      	cmp	r3, #64	; 0x40
 8015368:	d857      	bhi.n	801541a <USBD_StdDevReq+0xce>
 801536a:	2b00      	cmp	r3, #0
 801536c:	d00f      	beq.n	801538e <USBD_StdDevReq+0x42>
 801536e:	2b20      	cmp	r3, #32
 8015370:	d153      	bne.n	801541a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	32ae      	adds	r2, #174	; 0xae
 801537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015380:	689b      	ldr	r3, [r3, #8]
 8015382:	6839      	ldr	r1, [r7, #0]
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	4798      	blx	r3
 8015388:	4603      	mov	r3, r0
 801538a:	73fb      	strb	r3, [r7, #15]
      break;
 801538c:	e04a      	b.n	8015424 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	785b      	ldrb	r3, [r3, #1]
 8015392:	2b09      	cmp	r3, #9
 8015394:	d83b      	bhi.n	801540e <USBD_StdDevReq+0xc2>
 8015396:	a201      	add	r2, pc, #4	; (adr r2, 801539c <USBD_StdDevReq+0x50>)
 8015398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801539c:	080153f1 	.word	0x080153f1
 80153a0:	08015405 	.word	0x08015405
 80153a4:	0801540f 	.word	0x0801540f
 80153a8:	080153fb 	.word	0x080153fb
 80153ac:	0801540f 	.word	0x0801540f
 80153b0:	080153cf 	.word	0x080153cf
 80153b4:	080153c5 	.word	0x080153c5
 80153b8:	0801540f 	.word	0x0801540f
 80153bc:	080153e7 	.word	0x080153e7
 80153c0:	080153d9 	.word	0x080153d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80153c4:	6839      	ldr	r1, [r7, #0]
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 fa3c 	bl	8015844 <USBD_GetDescriptor>
          break;
 80153cc:	e024      	b.n	8015418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80153ce:	6839      	ldr	r1, [r7, #0]
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f000 fba1 	bl	8015b18 <USBD_SetAddress>
          break;
 80153d6:	e01f      	b.n	8015418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80153d8:	6839      	ldr	r1, [r7, #0]
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 fbe0 	bl	8015ba0 <USBD_SetConfig>
 80153e0:	4603      	mov	r3, r0
 80153e2:	73fb      	strb	r3, [r7, #15]
          break;
 80153e4:	e018      	b.n	8015418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80153e6:	6839      	ldr	r1, [r7, #0]
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	f000 fc83 	bl	8015cf4 <USBD_GetConfig>
          break;
 80153ee:	e013      	b.n	8015418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80153f0:	6839      	ldr	r1, [r7, #0]
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f000 fcb4 	bl	8015d60 <USBD_GetStatus>
          break;
 80153f8:	e00e      	b.n	8015418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80153fa:	6839      	ldr	r1, [r7, #0]
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f000 fce3 	bl	8015dc8 <USBD_SetFeature>
          break;
 8015402:	e009      	b.n	8015418 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015404:	6839      	ldr	r1, [r7, #0]
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f000 fd07 	bl	8015e1a <USBD_ClrFeature>
          break;
 801540c:	e004      	b.n	8015418 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801540e:	6839      	ldr	r1, [r7, #0]
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f000 fd5e 	bl	8015ed2 <USBD_CtlError>
          break;
 8015416:	bf00      	nop
      }
      break;
 8015418:	e004      	b.n	8015424 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801541a:	6839      	ldr	r1, [r7, #0]
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f000 fd58 	bl	8015ed2 <USBD_CtlError>
      break;
 8015422:	bf00      	nop
  }

  return ret;
 8015424:	7bfb      	ldrb	r3, [r7, #15]
}
 8015426:	4618      	mov	r0, r3
 8015428:	3710      	adds	r7, #16
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop

08015430 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b084      	sub	sp, #16
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801543a:	2300      	movs	r3, #0
 801543c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015446:	2b40      	cmp	r3, #64	; 0x40
 8015448:	d005      	beq.n	8015456 <USBD_StdItfReq+0x26>
 801544a:	2b40      	cmp	r3, #64	; 0x40
 801544c:	d852      	bhi.n	80154f4 <USBD_StdItfReq+0xc4>
 801544e:	2b00      	cmp	r3, #0
 8015450:	d001      	beq.n	8015456 <USBD_StdItfReq+0x26>
 8015452:	2b20      	cmp	r3, #32
 8015454:	d14e      	bne.n	80154f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801545c:	b2db      	uxtb	r3, r3
 801545e:	3b01      	subs	r3, #1
 8015460:	2b02      	cmp	r3, #2
 8015462:	d840      	bhi.n	80154e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	889b      	ldrh	r3, [r3, #4]
 8015468:	b2db      	uxtb	r3, r3
 801546a:	2b01      	cmp	r3, #1
 801546c:	d836      	bhi.n	80154dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	889b      	ldrh	r3, [r3, #4]
 8015472:	b2db      	uxtb	r3, r3
 8015474:	4619      	mov	r1, r3
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	f7ff fed9 	bl	801522e <USBD_CoreFindIF>
 801547c:	4603      	mov	r3, r0
 801547e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015480:	7bbb      	ldrb	r3, [r7, #14]
 8015482:	2bff      	cmp	r3, #255	; 0xff
 8015484:	d01d      	beq.n	80154c2 <USBD_StdItfReq+0x92>
 8015486:	7bbb      	ldrb	r3, [r7, #14]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d11a      	bne.n	80154c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801548c:	7bba      	ldrb	r2, [r7, #14]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	32ae      	adds	r2, #174	; 0xae
 8015492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015496:	689b      	ldr	r3, [r3, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d00f      	beq.n	80154bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801549c:	7bba      	ldrb	r2, [r7, #14]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80154a4:	7bba      	ldrb	r2, [r7, #14]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	32ae      	adds	r2, #174	; 0xae
 80154aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ae:	689b      	ldr	r3, [r3, #8]
 80154b0:	6839      	ldr	r1, [r7, #0]
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	4798      	blx	r3
 80154b6:	4603      	mov	r3, r0
 80154b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80154ba:	e004      	b.n	80154c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80154bc:	2303      	movs	r3, #3
 80154be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80154c0:	e001      	b.n	80154c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80154c2:	2303      	movs	r3, #3
 80154c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80154c6:	683b      	ldr	r3, [r7, #0]
 80154c8:	88db      	ldrh	r3, [r3, #6]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d110      	bne.n	80154f0 <USBD_StdItfReq+0xc0>
 80154ce:	7bfb      	ldrb	r3, [r7, #15]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d10d      	bne.n	80154f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f000 fdc7 	bl	8016068 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80154da:	e009      	b.n	80154f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80154dc:	6839      	ldr	r1, [r7, #0]
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f000 fcf7 	bl	8015ed2 <USBD_CtlError>
          break;
 80154e4:	e004      	b.n	80154f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f000 fcf2 	bl	8015ed2 <USBD_CtlError>
          break;
 80154ee:	e000      	b.n	80154f2 <USBD_StdItfReq+0xc2>
          break;
 80154f0:	bf00      	nop
      }
      break;
 80154f2:	e004      	b.n	80154fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80154f4:	6839      	ldr	r1, [r7, #0]
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f000 fceb 	bl	8015ed2 <USBD_CtlError>
      break;
 80154fc:	bf00      	nop
  }

  return ret;
 80154fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015500:	4618      	mov	r0, r3
 8015502:	3710      	adds	r7, #16
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}

08015508 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b084      	sub	sp, #16
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015512:	2300      	movs	r3, #0
 8015514:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	889b      	ldrh	r3, [r3, #4]
 801551a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015524:	2b40      	cmp	r3, #64	; 0x40
 8015526:	d007      	beq.n	8015538 <USBD_StdEPReq+0x30>
 8015528:	2b40      	cmp	r3, #64	; 0x40
 801552a:	f200 817f 	bhi.w	801582c <USBD_StdEPReq+0x324>
 801552e:	2b00      	cmp	r3, #0
 8015530:	d02a      	beq.n	8015588 <USBD_StdEPReq+0x80>
 8015532:	2b20      	cmp	r3, #32
 8015534:	f040 817a 	bne.w	801582c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015538:	7bbb      	ldrb	r3, [r7, #14]
 801553a:	4619      	mov	r1, r3
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f7ff fe83 	bl	8015248 <USBD_CoreFindEP>
 8015542:	4603      	mov	r3, r0
 8015544:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015546:	7b7b      	ldrb	r3, [r7, #13]
 8015548:	2bff      	cmp	r3, #255	; 0xff
 801554a:	f000 8174 	beq.w	8015836 <USBD_StdEPReq+0x32e>
 801554e:	7b7b      	ldrb	r3, [r7, #13]
 8015550:	2b00      	cmp	r3, #0
 8015552:	f040 8170 	bne.w	8015836 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015556:	7b7a      	ldrb	r2, [r7, #13]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801555e:	7b7a      	ldrb	r2, [r7, #13]
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	32ae      	adds	r2, #174	; 0xae
 8015564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015568:	689b      	ldr	r3, [r3, #8]
 801556a:	2b00      	cmp	r3, #0
 801556c:	f000 8163 	beq.w	8015836 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015570:	7b7a      	ldrb	r2, [r7, #13]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	32ae      	adds	r2, #174	; 0xae
 8015576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801557a:	689b      	ldr	r3, [r3, #8]
 801557c:	6839      	ldr	r1, [r7, #0]
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	4798      	blx	r3
 8015582:	4603      	mov	r3, r0
 8015584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015586:	e156      	b.n	8015836 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	785b      	ldrb	r3, [r3, #1]
 801558c:	2b03      	cmp	r3, #3
 801558e:	d008      	beq.n	80155a2 <USBD_StdEPReq+0x9a>
 8015590:	2b03      	cmp	r3, #3
 8015592:	f300 8145 	bgt.w	8015820 <USBD_StdEPReq+0x318>
 8015596:	2b00      	cmp	r3, #0
 8015598:	f000 809b 	beq.w	80156d2 <USBD_StdEPReq+0x1ca>
 801559c:	2b01      	cmp	r3, #1
 801559e:	d03c      	beq.n	801561a <USBD_StdEPReq+0x112>
 80155a0:	e13e      	b.n	8015820 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155a8:	b2db      	uxtb	r3, r3
 80155aa:	2b02      	cmp	r3, #2
 80155ac:	d002      	beq.n	80155b4 <USBD_StdEPReq+0xac>
 80155ae:	2b03      	cmp	r3, #3
 80155b0:	d016      	beq.n	80155e0 <USBD_StdEPReq+0xd8>
 80155b2:	e02c      	b.n	801560e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80155b4:	7bbb      	ldrb	r3, [r7, #14]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d00d      	beq.n	80155d6 <USBD_StdEPReq+0xce>
 80155ba:	7bbb      	ldrb	r3, [r7, #14]
 80155bc:	2b80      	cmp	r3, #128	; 0x80
 80155be:	d00a      	beq.n	80155d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80155c0:	7bbb      	ldrb	r3, [r7, #14]
 80155c2:	4619      	mov	r1, r3
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f011 fb15 	bl	8026bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80155ca:	2180      	movs	r1, #128	; 0x80
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f011 fb11 	bl	8026bf4 <USBD_LL_StallEP>
 80155d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80155d4:	e020      	b.n	8015618 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80155d6:	6839      	ldr	r1, [r7, #0]
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 fc7a 	bl	8015ed2 <USBD_CtlError>
              break;
 80155de:	e01b      	b.n	8015618 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	885b      	ldrh	r3, [r3, #2]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d10e      	bne.n	8015606 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80155e8:	7bbb      	ldrb	r3, [r7, #14]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d00b      	beq.n	8015606 <USBD_StdEPReq+0xfe>
 80155ee:	7bbb      	ldrb	r3, [r7, #14]
 80155f0:	2b80      	cmp	r3, #128	; 0x80
 80155f2:	d008      	beq.n	8015606 <USBD_StdEPReq+0xfe>
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	88db      	ldrh	r3, [r3, #6]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d104      	bne.n	8015606 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80155fc:	7bbb      	ldrb	r3, [r7, #14]
 80155fe:	4619      	mov	r1, r3
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f011 faf7 	bl	8026bf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f000 fd2e 	bl	8016068 <USBD_CtlSendStatus>

              break;
 801560c:	e004      	b.n	8015618 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801560e:	6839      	ldr	r1, [r7, #0]
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f000 fc5e 	bl	8015ed2 <USBD_CtlError>
              break;
 8015616:	bf00      	nop
          }
          break;
 8015618:	e107      	b.n	801582a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015620:	b2db      	uxtb	r3, r3
 8015622:	2b02      	cmp	r3, #2
 8015624:	d002      	beq.n	801562c <USBD_StdEPReq+0x124>
 8015626:	2b03      	cmp	r3, #3
 8015628:	d016      	beq.n	8015658 <USBD_StdEPReq+0x150>
 801562a:	e04b      	b.n	80156c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801562c:	7bbb      	ldrb	r3, [r7, #14]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d00d      	beq.n	801564e <USBD_StdEPReq+0x146>
 8015632:	7bbb      	ldrb	r3, [r7, #14]
 8015634:	2b80      	cmp	r3, #128	; 0x80
 8015636:	d00a      	beq.n	801564e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015638:	7bbb      	ldrb	r3, [r7, #14]
 801563a:	4619      	mov	r1, r3
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f011 fad9 	bl	8026bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015642:	2180      	movs	r1, #128	; 0x80
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f011 fad5 	bl	8026bf4 <USBD_LL_StallEP>
 801564a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801564c:	e040      	b.n	80156d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801564e:	6839      	ldr	r1, [r7, #0]
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f000 fc3e 	bl	8015ed2 <USBD_CtlError>
              break;
 8015656:	e03b      	b.n	80156d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	885b      	ldrh	r3, [r3, #2]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d136      	bne.n	80156ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015660:	7bbb      	ldrb	r3, [r7, #14]
 8015662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015666:	2b00      	cmp	r3, #0
 8015668:	d004      	beq.n	8015674 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801566a:	7bbb      	ldrb	r3, [r7, #14]
 801566c:	4619      	mov	r1, r3
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f011 fadf 	bl	8026c32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f000 fcf7 	bl	8016068 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801567a:	7bbb      	ldrb	r3, [r7, #14]
 801567c:	4619      	mov	r1, r3
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	f7ff fde2 	bl	8015248 <USBD_CoreFindEP>
 8015684:	4603      	mov	r3, r0
 8015686:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015688:	7b7b      	ldrb	r3, [r7, #13]
 801568a:	2bff      	cmp	r3, #255	; 0xff
 801568c:	d01f      	beq.n	80156ce <USBD_StdEPReq+0x1c6>
 801568e:	7b7b      	ldrb	r3, [r7, #13]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d11c      	bne.n	80156ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015694:	7b7a      	ldrb	r2, [r7, #13]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801569c:	7b7a      	ldrb	r2, [r7, #13]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	32ae      	adds	r2, #174	; 0xae
 80156a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a6:	689b      	ldr	r3, [r3, #8]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d010      	beq.n	80156ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80156ac:	7b7a      	ldrb	r2, [r7, #13]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	32ae      	adds	r2, #174	; 0xae
 80156b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b6:	689b      	ldr	r3, [r3, #8]
 80156b8:	6839      	ldr	r1, [r7, #0]
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	4798      	blx	r3
 80156be:	4603      	mov	r3, r0
 80156c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80156c2:	e004      	b.n	80156ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80156c4:	6839      	ldr	r1, [r7, #0]
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f000 fc03 	bl	8015ed2 <USBD_CtlError>
              break;
 80156cc:	e000      	b.n	80156d0 <USBD_StdEPReq+0x1c8>
              break;
 80156ce:	bf00      	nop
          }
          break;
 80156d0:	e0ab      	b.n	801582a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156d8:	b2db      	uxtb	r3, r3
 80156da:	2b02      	cmp	r3, #2
 80156dc:	d002      	beq.n	80156e4 <USBD_StdEPReq+0x1dc>
 80156de:	2b03      	cmp	r3, #3
 80156e0:	d032      	beq.n	8015748 <USBD_StdEPReq+0x240>
 80156e2:	e097      	b.n	8015814 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156e4:	7bbb      	ldrb	r3, [r7, #14]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d007      	beq.n	80156fa <USBD_StdEPReq+0x1f2>
 80156ea:	7bbb      	ldrb	r3, [r7, #14]
 80156ec:	2b80      	cmp	r3, #128	; 0x80
 80156ee:	d004      	beq.n	80156fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80156f0:	6839      	ldr	r1, [r7, #0]
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 fbed 	bl	8015ed2 <USBD_CtlError>
                break;
 80156f8:	e091      	b.n	801581e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	da0b      	bge.n	801571a <USBD_StdEPReq+0x212>
 8015702:	7bbb      	ldrb	r3, [r7, #14]
 8015704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015708:	4613      	mov	r3, r2
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	4413      	add	r3, r2
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	3310      	adds	r3, #16
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	4413      	add	r3, r2
 8015716:	3304      	adds	r3, #4
 8015718:	e00b      	b.n	8015732 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801571a:	7bbb      	ldrb	r3, [r7, #14]
 801571c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015720:	4613      	mov	r3, r2
 8015722:	009b      	lsls	r3, r3, #2
 8015724:	4413      	add	r3, r2
 8015726:	009b      	lsls	r3, r3, #2
 8015728:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801572c:	687a      	ldr	r2, [r7, #4]
 801572e:	4413      	add	r3, r2
 8015730:	3304      	adds	r3, #4
 8015732:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2200      	movs	r2, #0
 8015738:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	2202      	movs	r2, #2
 801573e:	4619      	mov	r1, r3
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fc37 	bl	8015fb4 <USBD_CtlSendData>
              break;
 8015746:	e06a      	b.n	801581e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801574c:	2b00      	cmp	r3, #0
 801574e:	da11      	bge.n	8015774 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015750:	7bbb      	ldrb	r3, [r7, #14]
 8015752:	f003 020f 	and.w	r2, r3, #15
 8015756:	6879      	ldr	r1, [r7, #4]
 8015758:	4613      	mov	r3, r2
 801575a:	009b      	lsls	r3, r3, #2
 801575c:	4413      	add	r3, r2
 801575e:	009b      	lsls	r3, r3, #2
 8015760:	440b      	add	r3, r1
 8015762:	3324      	adds	r3, #36	; 0x24
 8015764:	881b      	ldrh	r3, [r3, #0]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d117      	bne.n	801579a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801576a:	6839      	ldr	r1, [r7, #0]
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f000 fbb0 	bl	8015ed2 <USBD_CtlError>
                  break;
 8015772:	e054      	b.n	801581e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015774:	7bbb      	ldrb	r3, [r7, #14]
 8015776:	f003 020f 	and.w	r2, r3, #15
 801577a:	6879      	ldr	r1, [r7, #4]
 801577c:	4613      	mov	r3, r2
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	4413      	add	r3, r2
 8015782:	009b      	lsls	r3, r3, #2
 8015784:	440b      	add	r3, r1
 8015786:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801578a:	881b      	ldrh	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d104      	bne.n	801579a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015790:	6839      	ldr	r1, [r7, #0]
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f000 fb9d 	bl	8015ed2 <USBD_CtlError>
                  break;
 8015798:	e041      	b.n	801581e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801579a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	da0b      	bge.n	80157ba <USBD_StdEPReq+0x2b2>
 80157a2:	7bbb      	ldrb	r3, [r7, #14]
 80157a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80157a8:	4613      	mov	r3, r2
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	4413      	add	r3, r2
 80157ae:	009b      	lsls	r3, r3, #2
 80157b0:	3310      	adds	r3, #16
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	4413      	add	r3, r2
 80157b6:	3304      	adds	r3, #4
 80157b8:	e00b      	b.n	80157d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80157ba:	7bbb      	ldrb	r3, [r7, #14]
 80157bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157c0:	4613      	mov	r3, r2
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	4413      	add	r3, r2
 80157c6:	009b      	lsls	r3, r3, #2
 80157c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80157cc:	687a      	ldr	r2, [r7, #4]
 80157ce:	4413      	add	r3, r2
 80157d0:	3304      	adds	r3, #4
 80157d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80157d4:	7bbb      	ldrb	r3, [r7, #14]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d002      	beq.n	80157e0 <USBD_StdEPReq+0x2d8>
 80157da:	7bbb      	ldrb	r3, [r7, #14]
 80157dc:	2b80      	cmp	r3, #128	; 0x80
 80157de:	d103      	bne.n	80157e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	2200      	movs	r2, #0
 80157e4:	601a      	str	r2, [r3, #0]
 80157e6:	e00e      	b.n	8015806 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80157e8:	7bbb      	ldrb	r3, [r7, #14]
 80157ea:	4619      	mov	r1, r3
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f011 fa3f 	bl	8026c70 <USBD_LL_IsStallEP>
 80157f2:	4603      	mov	r3, r0
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d003      	beq.n	8015800 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	2201      	movs	r2, #1
 80157fc:	601a      	str	r2, [r3, #0]
 80157fe:	e002      	b.n	8015806 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	2200      	movs	r2, #0
 8015804:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	2202      	movs	r2, #2
 801580a:	4619      	mov	r1, r3
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f000 fbd1 	bl	8015fb4 <USBD_CtlSendData>
              break;
 8015812:	e004      	b.n	801581e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015814:	6839      	ldr	r1, [r7, #0]
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 fb5b 	bl	8015ed2 <USBD_CtlError>
              break;
 801581c:	bf00      	nop
          }
          break;
 801581e:	e004      	b.n	801582a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015820:	6839      	ldr	r1, [r7, #0]
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 fb55 	bl	8015ed2 <USBD_CtlError>
          break;
 8015828:	bf00      	nop
      }
      break;
 801582a:	e005      	b.n	8015838 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801582c:	6839      	ldr	r1, [r7, #0]
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f000 fb4f 	bl	8015ed2 <USBD_CtlError>
      break;
 8015834:	e000      	b.n	8015838 <USBD_StdEPReq+0x330>
      break;
 8015836:	bf00      	nop
  }

  return ret;
 8015838:	7bfb      	ldrb	r3, [r7, #15]
}
 801583a:	4618      	mov	r0, r3
 801583c:	3710      	adds	r7, #16
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
	...

08015844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801584e:	2300      	movs	r3, #0
 8015850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015852:	2300      	movs	r3, #0
 8015854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015856:	2300      	movs	r3, #0
 8015858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	885b      	ldrh	r3, [r3, #2]
 801585e:	0a1b      	lsrs	r3, r3, #8
 8015860:	b29b      	uxth	r3, r3
 8015862:	3b01      	subs	r3, #1
 8015864:	2b06      	cmp	r3, #6
 8015866:	f200 8128 	bhi.w	8015aba <USBD_GetDescriptor+0x276>
 801586a:	a201      	add	r2, pc, #4	; (adr r2, 8015870 <USBD_GetDescriptor+0x2c>)
 801586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015870:	0801588d 	.word	0x0801588d
 8015874:	080158a5 	.word	0x080158a5
 8015878:	080158e5 	.word	0x080158e5
 801587c:	08015abb 	.word	0x08015abb
 8015880:	08015abb 	.word	0x08015abb
 8015884:	08015a5b 	.word	0x08015a5b
 8015888:	08015a87 	.word	0x08015a87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	7c12      	ldrb	r2, [r2, #16]
 8015898:	f107 0108 	add.w	r1, r7, #8
 801589c:	4610      	mov	r0, r2
 801589e:	4798      	blx	r3
 80158a0:	60f8      	str	r0, [r7, #12]
      break;
 80158a2:	e112      	b.n	8015aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	7c1b      	ldrb	r3, [r3, #16]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d10d      	bne.n	80158c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158b4:	f107 0208 	add.w	r2, r7, #8
 80158b8:	4610      	mov	r0, r2
 80158ba:	4798      	blx	r3
 80158bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	3301      	adds	r3, #1
 80158c2:	2202      	movs	r2, #2
 80158c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80158c6:	e100      	b.n	8015aca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158d0:	f107 0208 	add.w	r2, r7, #8
 80158d4:	4610      	mov	r0, r2
 80158d6:	4798      	blx	r3
 80158d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	3301      	adds	r3, #1
 80158de:	2202      	movs	r2, #2
 80158e0:	701a      	strb	r2, [r3, #0]
      break;
 80158e2:	e0f2      	b.n	8015aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	885b      	ldrh	r3, [r3, #2]
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	2b05      	cmp	r3, #5
 80158ec:	f200 80ac 	bhi.w	8015a48 <USBD_GetDescriptor+0x204>
 80158f0:	a201      	add	r2, pc, #4	; (adr r2, 80158f8 <USBD_GetDescriptor+0xb4>)
 80158f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158f6:	bf00      	nop
 80158f8:	08015911 	.word	0x08015911
 80158fc:	08015945 	.word	0x08015945
 8015900:	08015979 	.word	0x08015979
 8015904:	080159ad 	.word	0x080159ad
 8015908:	080159e1 	.word	0x080159e1
 801590c:	08015a15 	.word	0x08015a15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015916:	685b      	ldr	r3, [r3, #4]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d00b      	beq.n	8015934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	7c12      	ldrb	r2, [r2, #16]
 8015928:	f107 0108 	add.w	r1, r7, #8
 801592c:	4610      	mov	r0, r2
 801592e:	4798      	blx	r3
 8015930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015932:	e091      	b.n	8015a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015934:	6839      	ldr	r1, [r7, #0]
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f000 facb 	bl	8015ed2 <USBD_CtlError>
            err++;
 801593c:	7afb      	ldrb	r3, [r7, #11]
 801593e:	3301      	adds	r3, #1
 8015940:	72fb      	strb	r3, [r7, #11]
          break;
 8015942:	e089      	b.n	8015a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801594a:	689b      	ldr	r3, [r3, #8]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d00b      	beq.n	8015968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	7c12      	ldrb	r2, [r2, #16]
 801595c:	f107 0108 	add.w	r1, r7, #8
 8015960:	4610      	mov	r0, r2
 8015962:	4798      	blx	r3
 8015964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015966:	e077      	b.n	8015a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015968:	6839      	ldr	r1, [r7, #0]
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f000 fab1 	bl	8015ed2 <USBD_CtlError>
            err++;
 8015970:	7afb      	ldrb	r3, [r7, #11]
 8015972:	3301      	adds	r3, #1
 8015974:	72fb      	strb	r3, [r7, #11]
          break;
 8015976:	e06f      	b.n	8015a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801597e:	68db      	ldr	r3, [r3, #12]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00b      	beq.n	801599c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	7c12      	ldrb	r2, [r2, #16]
 8015990:	f107 0108 	add.w	r1, r7, #8
 8015994:	4610      	mov	r0, r2
 8015996:	4798      	blx	r3
 8015998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801599a:	e05d      	b.n	8015a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801599c:	6839      	ldr	r1, [r7, #0]
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f000 fa97 	bl	8015ed2 <USBD_CtlError>
            err++;
 80159a4:	7afb      	ldrb	r3, [r7, #11]
 80159a6:	3301      	adds	r3, #1
 80159a8:	72fb      	strb	r3, [r7, #11]
          break;
 80159aa:	e055      	b.n	8015a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159b2:	691b      	ldr	r3, [r3, #16]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d00b      	beq.n	80159d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159be:	691b      	ldr	r3, [r3, #16]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	7c12      	ldrb	r2, [r2, #16]
 80159c4:	f107 0108 	add.w	r1, r7, #8
 80159c8:	4610      	mov	r0, r2
 80159ca:	4798      	blx	r3
 80159cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159ce:	e043      	b.n	8015a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80159d0:	6839      	ldr	r1, [r7, #0]
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f000 fa7d 	bl	8015ed2 <USBD_CtlError>
            err++;
 80159d8:	7afb      	ldrb	r3, [r7, #11]
 80159da:	3301      	adds	r3, #1
 80159dc:	72fb      	strb	r3, [r7, #11]
          break;
 80159de:	e03b      	b.n	8015a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159e6:	695b      	ldr	r3, [r3, #20]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d00b      	beq.n	8015a04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159f2:	695b      	ldr	r3, [r3, #20]
 80159f4:	687a      	ldr	r2, [r7, #4]
 80159f6:	7c12      	ldrb	r2, [r2, #16]
 80159f8:	f107 0108 	add.w	r1, r7, #8
 80159fc:	4610      	mov	r0, r2
 80159fe:	4798      	blx	r3
 8015a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a02:	e029      	b.n	8015a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a04:	6839      	ldr	r1, [r7, #0]
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f000 fa63 	bl	8015ed2 <USBD_CtlError>
            err++;
 8015a0c:	7afb      	ldrb	r3, [r7, #11]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	72fb      	strb	r3, [r7, #11]
          break;
 8015a12:	e021      	b.n	8015a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a1a:	699b      	ldr	r3, [r3, #24]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d00b      	beq.n	8015a38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a26:	699b      	ldr	r3, [r3, #24]
 8015a28:	687a      	ldr	r2, [r7, #4]
 8015a2a:	7c12      	ldrb	r2, [r2, #16]
 8015a2c:	f107 0108 	add.w	r1, r7, #8
 8015a30:	4610      	mov	r0, r2
 8015a32:	4798      	blx	r3
 8015a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a36:	e00f      	b.n	8015a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f000 fa49 	bl	8015ed2 <USBD_CtlError>
            err++;
 8015a40:	7afb      	ldrb	r3, [r7, #11]
 8015a42:	3301      	adds	r3, #1
 8015a44:	72fb      	strb	r3, [r7, #11]
          break;
 8015a46:	e007      	b.n	8015a58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015a48:	6839      	ldr	r1, [r7, #0]
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f000 fa41 	bl	8015ed2 <USBD_CtlError>
          err++;
 8015a50:	7afb      	ldrb	r3, [r7, #11]
 8015a52:	3301      	adds	r3, #1
 8015a54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015a56:	bf00      	nop
      }
      break;
 8015a58:	e037      	b.n	8015aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	7c1b      	ldrb	r3, [r3, #16]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d109      	bne.n	8015a76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a6a:	f107 0208 	add.w	r2, r7, #8
 8015a6e:	4610      	mov	r0, r2
 8015a70:	4798      	blx	r3
 8015a72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a74:	e029      	b.n	8015aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015a76:	6839      	ldr	r1, [r7, #0]
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f000 fa2a 	bl	8015ed2 <USBD_CtlError>
        err++;
 8015a7e:	7afb      	ldrb	r3, [r7, #11]
 8015a80:	3301      	adds	r3, #1
 8015a82:	72fb      	strb	r3, [r7, #11]
      break;
 8015a84:	e021      	b.n	8015aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	7c1b      	ldrb	r3, [r3, #16]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d10d      	bne.n	8015aaa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a96:	f107 0208 	add.w	r2, r7, #8
 8015a9a:	4610      	mov	r0, r2
 8015a9c:	4798      	blx	r3
 8015a9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	2207      	movs	r2, #7
 8015aa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015aa8:	e00f      	b.n	8015aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015aaa:	6839      	ldr	r1, [r7, #0]
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f000 fa10 	bl	8015ed2 <USBD_CtlError>
        err++;
 8015ab2:	7afb      	ldrb	r3, [r7, #11]
 8015ab4:	3301      	adds	r3, #1
 8015ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8015ab8:	e007      	b.n	8015aca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015aba:	6839      	ldr	r1, [r7, #0]
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 fa08 	bl	8015ed2 <USBD_CtlError>
      err++;
 8015ac2:	7afb      	ldrb	r3, [r7, #11]
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8015ac8:	bf00      	nop
  }

  if (err != 0U)
 8015aca:	7afb      	ldrb	r3, [r7, #11]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d11e      	bne.n	8015b0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	88db      	ldrh	r3, [r3, #6]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d016      	beq.n	8015b06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015ad8:	893b      	ldrh	r3, [r7, #8]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d00e      	beq.n	8015afc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	88da      	ldrh	r2, [r3, #6]
 8015ae2:	893b      	ldrh	r3, [r7, #8]
 8015ae4:	4293      	cmp	r3, r2
 8015ae6:	bf28      	it	cs
 8015ae8:	4613      	movcs	r3, r2
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015aee:	893b      	ldrh	r3, [r7, #8]
 8015af0:	461a      	mov	r2, r3
 8015af2:	68f9      	ldr	r1, [r7, #12]
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 fa5d 	bl	8015fb4 <USBD_CtlSendData>
 8015afa:	e009      	b.n	8015b10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f000 f9e7 	bl	8015ed2 <USBD_CtlError>
 8015b04:	e004      	b.n	8015b10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 faae 	bl	8016068 <USBD_CtlSendStatus>
 8015b0c:	e000      	b.n	8015b10 <USBD_GetDescriptor+0x2cc>
    return;
 8015b0e:	bf00      	nop
  }
}
 8015b10:	3710      	adds	r7, #16
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop

08015b18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	889b      	ldrh	r3, [r3, #4]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d131      	bne.n	8015b8e <USBD_SetAddress+0x76>
 8015b2a:	683b      	ldr	r3, [r7, #0]
 8015b2c:	88db      	ldrh	r3, [r3, #6]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d12d      	bne.n	8015b8e <USBD_SetAddress+0x76>
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	885b      	ldrh	r3, [r3, #2]
 8015b36:	2b7f      	cmp	r3, #127	; 0x7f
 8015b38:	d829      	bhi.n	8015b8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	885b      	ldrh	r3, [r3, #2]
 8015b3e:	b2db      	uxtb	r3, r3
 8015b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b4c:	b2db      	uxtb	r3, r3
 8015b4e:	2b03      	cmp	r3, #3
 8015b50:	d104      	bne.n	8015b5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015b52:	6839      	ldr	r1, [r7, #0]
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f000 f9bc 	bl	8015ed2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b5a:	e01d      	b.n	8015b98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	7bfa      	ldrb	r2, [r7, #15]
 8015b60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015b64:	7bfb      	ldrb	r3, [r7, #15]
 8015b66:	4619      	mov	r1, r3
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f011 f8ad 	bl	8026cc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f000 fa7a 	bl	8016068 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015b74:	7bfb      	ldrb	r3, [r7, #15]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d004      	beq.n	8015b84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2202      	movs	r2, #2
 8015b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b82:	e009      	b.n	8015b98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2201      	movs	r2, #1
 8015b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b8c:	e004      	b.n	8015b98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015b8e:	6839      	ldr	r1, [r7, #0]
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f000 f99e 	bl	8015ed2 <USBD_CtlError>
  }
}
 8015b96:	bf00      	nop
 8015b98:	bf00      	nop
 8015b9a:	3710      	adds	r7, #16
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015baa:	2300      	movs	r3, #0
 8015bac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	885b      	ldrh	r3, [r3, #2]
 8015bb2:	b2da      	uxtb	r2, r3
 8015bb4:	4b4e      	ldr	r3, [pc, #312]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015bb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015bb8:	4b4d      	ldr	r3, [pc, #308]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d905      	bls.n	8015bcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015bc0:	6839      	ldr	r1, [r7, #0]
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f000 f985 	bl	8015ed2 <USBD_CtlError>
    return USBD_FAIL;
 8015bc8:	2303      	movs	r3, #3
 8015bca:	e08c      	b.n	8015ce6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bd2:	b2db      	uxtb	r3, r3
 8015bd4:	2b02      	cmp	r3, #2
 8015bd6:	d002      	beq.n	8015bde <USBD_SetConfig+0x3e>
 8015bd8:	2b03      	cmp	r3, #3
 8015bda:	d029      	beq.n	8015c30 <USBD_SetConfig+0x90>
 8015bdc:	e075      	b.n	8015cca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015bde:	4b44      	ldr	r3, [pc, #272]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d020      	beq.n	8015c28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015be6:	4b42      	ldr	r3, [pc, #264]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	461a      	mov	r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015bf0:	4b3f      	ldr	r3, [pc, #252]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015bf2:	781b      	ldrb	r3, [r3, #0]
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f7fe ffe1 	bl	8014bbe <USBD_SetClassConfig>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015c00:	7bfb      	ldrb	r3, [r7, #15]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d008      	beq.n	8015c18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 f962 	bl	8015ed2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	2202      	movs	r2, #2
 8015c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c16:	e065      	b.n	8015ce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f000 fa25 	bl	8016068 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2203      	movs	r2, #3
 8015c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015c26:	e05d      	b.n	8015ce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f000 fa1d 	bl	8016068 <USBD_CtlSendStatus>
      break;
 8015c2e:	e059      	b.n	8015ce4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015c30:	4b2f      	ldr	r3, [pc, #188]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d112      	bne.n	8015c5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2202      	movs	r2, #2
 8015c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015c40:	4b2b      	ldr	r3, [pc, #172]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015c42:	781b      	ldrb	r3, [r3, #0]
 8015c44:	461a      	mov	r2, r3
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015c4a:	4b29      	ldr	r3, [pc, #164]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	4619      	mov	r1, r3
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f7fe ffd0 	bl	8014bf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f000 fa06 	bl	8016068 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c5c:	e042      	b.n	8015ce4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015c5e:	4b24      	ldr	r3, [pc, #144]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015c60:	781b      	ldrb	r3, [r3, #0]
 8015c62:	461a      	mov	r2, r3
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d02a      	beq.n	8015cc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	b2db      	uxtb	r3, r3
 8015c72:	4619      	mov	r1, r3
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f7fe ffbe 	bl	8014bf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015c7a:	4b1d      	ldr	r3, [pc, #116]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	461a      	mov	r2, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015c84:	4b1a      	ldr	r3, [pc, #104]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	4619      	mov	r1, r3
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f7fe ff97 	bl	8014bbe <USBD_SetClassConfig>
 8015c90:	4603      	mov	r3, r0
 8015c92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015c94:	7bfb      	ldrb	r3, [r7, #15]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d00f      	beq.n	8015cba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015c9a:	6839      	ldr	r1, [r7, #0]
 8015c9c:	6878      	ldr	r0, [r7, #4]
 8015c9e:	f000 f918 	bl	8015ed2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	b2db      	uxtb	r3, r3
 8015ca8:	4619      	mov	r1, r3
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f7fe ffa3 	bl	8014bf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2202      	movs	r2, #2
 8015cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015cb8:	e014      	b.n	8015ce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 f9d4 	bl	8016068 <USBD_CtlSendStatus>
      break;
 8015cc0:	e010      	b.n	8015ce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f000 f9d0 	bl	8016068 <USBD_CtlSendStatus>
      break;
 8015cc8:	e00c      	b.n	8015ce4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015cca:	6839      	ldr	r1, [r7, #0]
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f000 f900 	bl	8015ed2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015cd2:	4b07      	ldr	r3, [pc, #28]	; (8015cf0 <USBD_SetConfig+0x150>)
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f7fe ff8c 	bl	8014bf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015cde:	2303      	movs	r3, #3
 8015ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8015ce2:	bf00      	nop
  }

  return ret;
 8015ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	3710      	adds	r7, #16
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}
 8015cee:	bf00      	nop
 8015cf0:	24005408 	.word	0x24005408

08015cf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	88db      	ldrh	r3, [r3, #6]
 8015d02:	2b01      	cmp	r3, #1
 8015d04:	d004      	beq.n	8015d10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015d06:	6839      	ldr	r1, [r7, #0]
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	f000 f8e2 	bl	8015ed2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015d0e:	e023      	b.n	8015d58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	2b02      	cmp	r3, #2
 8015d1a:	dc02      	bgt.n	8015d22 <USBD_GetConfig+0x2e>
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	dc03      	bgt.n	8015d28 <USBD_GetConfig+0x34>
 8015d20:	e015      	b.n	8015d4e <USBD_GetConfig+0x5a>
 8015d22:	2b03      	cmp	r3, #3
 8015d24:	d00b      	beq.n	8015d3e <USBD_GetConfig+0x4a>
 8015d26:	e012      	b.n	8015d4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	3308      	adds	r3, #8
 8015d32:	2201      	movs	r2, #1
 8015d34:	4619      	mov	r1, r3
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f000 f93c 	bl	8015fb4 <USBD_CtlSendData>
        break;
 8015d3c:	e00c      	b.n	8015d58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	3304      	adds	r3, #4
 8015d42:	2201      	movs	r2, #1
 8015d44:	4619      	mov	r1, r3
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f000 f934 	bl	8015fb4 <USBD_CtlSendData>
        break;
 8015d4c:	e004      	b.n	8015d58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015d4e:	6839      	ldr	r1, [r7, #0]
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f000 f8be 	bl	8015ed2 <USBD_CtlError>
        break;
 8015d56:	bf00      	nop
}
 8015d58:	bf00      	nop
 8015d5a:	3708      	adds	r7, #8
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d70:	b2db      	uxtb	r3, r3
 8015d72:	3b01      	subs	r3, #1
 8015d74:	2b02      	cmp	r3, #2
 8015d76:	d81e      	bhi.n	8015db6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	88db      	ldrh	r3, [r3, #6]
 8015d7c:	2b02      	cmp	r3, #2
 8015d7e:	d004      	beq.n	8015d8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015d80:	6839      	ldr	r1, [r7, #0]
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f000 f8a5 	bl	8015ed2 <USBD_CtlError>
        break;
 8015d88:	e01a      	b.n	8015dc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d005      	beq.n	8015da6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	68db      	ldr	r3, [r3, #12]
 8015d9e:	f043 0202 	orr.w	r2, r3, #2
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	330c      	adds	r3, #12
 8015daa:	2202      	movs	r2, #2
 8015dac:	4619      	mov	r1, r3
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f000 f900 	bl	8015fb4 <USBD_CtlSendData>
      break;
 8015db4:	e004      	b.n	8015dc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015db6:	6839      	ldr	r1, [r7, #0]
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f000 f88a 	bl	8015ed2 <USBD_CtlError>
      break;
 8015dbe:	bf00      	nop
  }
}
 8015dc0:	bf00      	nop
 8015dc2:	3708      	adds	r7, #8
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	885b      	ldrh	r3, [r3, #2]
 8015dd6:	2b01      	cmp	r3, #1
 8015dd8:	d107      	bne.n	8015dea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	2201      	movs	r2, #1
 8015dde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f000 f940 	bl	8016068 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015de8:	e013      	b.n	8015e12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	885b      	ldrh	r3, [r3, #2]
 8015dee:	2b02      	cmp	r3, #2
 8015df0:	d10b      	bne.n	8015e0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	889b      	ldrh	r3, [r3, #4]
 8015df6:	0a1b      	lsrs	r3, r3, #8
 8015df8:	b29b      	uxth	r3, r3
 8015dfa:	b2da      	uxtb	r2, r3
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 f930 	bl	8016068 <USBD_CtlSendStatus>
}
 8015e08:	e003      	b.n	8015e12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015e0a:	6839      	ldr	r1, [r7, #0]
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f000 f860 	bl	8015ed2 <USBD_CtlError>
}
 8015e12:	bf00      	nop
 8015e14:	3708      	adds	r7, #8
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}

08015e1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e1a:	b580      	push	{r7, lr}
 8015e1c:	b082      	sub	sp, #8
 8015e1e:	af00      	add	r7, sp, #0
 8015e20:	6078      	str	r0, [r7, #4]
 8015e22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e2a:	b2db      	uxtb	r3, r3
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	2b02      	cmp	r3, #2
 8015e30:	d80b      	bhi.n	8015e4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	885b      	ldrh	r3, [r3, #2]
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d10c      	bne.n	8015e54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 f910 	bl	8016068 <USBD_CtlSendStatus>
      }
      break;
 8015e48:	e004      	b.n	8015e54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015e4a:	6839      	ldr	r1, [r7, #0]
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f000 f840 	bl	8015ed2 <USBD_CtlError>
      break;
 8015e52:	e000      	b.n	8015e56 <USBD_ClrFeature+0x3c>
      break;
 8015e54:	bf00      	nop
  }
}
 8015e56:	bf00      	nop
 8015e58:	3708      	adds	r7, #8
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}

08015e5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015e5e:	b580      	push	{r7, lr}
 8015e60:	b084      	sub	sp, #16
 8015e62:	af00      	add	r7, sp, #0
 8015e64:	6078      	str	r0, [r7, #4]
 8015e66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	781a      	ldrb	r2, [r3, #0]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	3301      	adds	r3, #1
 8015e78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	781a      	ldrb	r2, [r3, #0]
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	3301      	adds	r3, #1
 8015e86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015e88:	68f8      	ldr	r0, [r7, #12]
 8015e8a:	f7ff fa41 	bl	8015310 <SWAPBYTE>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	461a      	mov	r2, r3
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	3301      	adds	r3, #1
 8015e9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015ea2:	68f8      	ldr	r0, [r7, #12]
 8015ea4:	f7ff fa34 	bl	8015310 <SWAPBYTE>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	461a      	mov	r2, r3
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	3301      	adds	r3, #1
 8015eba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f7ff fa27 	bl	8015310 <SWAPBYTE>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	80da      	strh	r2, [r3, #6]
}
 8015eca:	bf00      	nop
 8015ecc:	3710      	adds	r7, #16
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}

08015ed2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ed2:	b580      	push	{r7, lr}
 8015ed4:	b082      	sub	sp, #8
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	6078      	str	r0, [r7, #4]
 8015eda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015edc:	2180      	movs	r1, #128	; 0x80
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f010 fe88 	bl	8026bf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015ee4:	2100      	movs	r1, #0
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f010 fe84 	bl	8026bf4 <USBD_LL_StallEP>
}
 8015eec:	bf00      	nop
 8015eee:	3708      	adds	r7, #8
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}

08015ef4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b086      	sub	sp, #24
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015f00:	2300      	movs	r3, #0
 8015f02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d036      	beq.n	8015f78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015f0e:	6938      	ldr	r0, [r7, #16]
 8015f10:	f000 f836 	bl	8015f80 <USBD_GetLen>
 8015f14:	4603      	mov	r3, r0
 8015f16:	3301      	adds	r3, #1
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	b29a      	uxth	r2, r3
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015f22:	7dfb      	ldrb	r3, [r7, #23]
 8015f24:	68ba      	ldr	r2, [r7, #8]
 8015f26:	4413      	add	r3, r2
 8015f28:	687a      	ldr	r2, [r7, #4]
 8015f2a:	7812      	ldrb	r2, [r2, #0]
 8015f2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f2e:	7dfb      	ldrb	r3, [r7, #23]
 8015f30:	3301      	adds	r3, #1
 8015f32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015f34:	7dfb      	ldrb	r3, [r7, #23]
 8015f36:	68ba      	ldr	r2, [r7, #8]
 8015f38:	4413      	add	r3, r2
 8015f3a:	2203      	movs	r2, #3
 8015f3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8015f3e:	7dfb      	ldrb	r3, [r7, #23]
 8015f40:	3301      	adds	r3, #1
 8015f42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015f44:	e013      	b.n	8015f6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015f46:	7dfb      	ldrb	r3, [r7, #23]
 8015f48:	68ba      	ldr	r2, [r7, #8]
 8015f4a:	4413      	add	r3, r2
 8015f4c:	693a      	ldr	r2, [r7, #16]
 8015f4e:	7812      	ldrb	r2, [r2, #0]
 8015f50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015f52:	693b      	ldr	r3, [r7, #16]
 8015f54:	3301      	adds	r3, #1
 8015f56:	613b      	str	r3, [r7, #16]
    idx++;
 8015f58:	7dfb      	ldrb	r3, [r7, #23]
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015f5e:	7dfb      	ldrb	r3, [r7, #23]
 8015f60:	68ba      	ldr	r2, [r7, #8]
 8015f62:	4413      	add	r3, r2
 8015f64:	2200      	movs	r2, #0
 8015f66:	701a      	strb	r2, [r3, #0]
    idx++;
 8015f68:	7dfb      	ldrb	r3, [r7, #23]
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015f6e:	693b      	ldr	r3, [r7, #16]
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d1e7      	bne.n	8015f46 <USBD_GetString+0x52>
 8015f76:	e000      	b.n	8015f7a <USBD_GetString+0x86>
    return;
 8015f78:	bf00      	nop
  }
}
 8015f7a:	3718      	adds	r7, #24
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015f80:	b480      	push	{r7}
 8015f82:	b085      	sub	sp, #20
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015f90:	e005      	b.n	8015f9e <USBD_GetLen+0x1e>
  {
    len++;
 8015f92:	7bfb      	ldrb	r3, [r7, #15]
 8015f94:	3301      	adds	r3, #1
 8015f96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	3301      	adds	r3, #1
 8015f9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d1f5      	bne.n	8015f92 <USBD_GetLen+0x12>
  }

  return len;
 8015fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3714      	adds	r7, #20
 8015fac:	46bd      	mov	sp, r7
 8015fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb2:	4770      	bx	lr

08015fb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2202      	movs	r2, #2
 8015fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	687a      	ldr	r2, [r7, #4]
 8015fd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	68ba      	ldr	r2, [r7, #8]
 8015fd8:	2100      	movs	r1, #0
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f010 fe93 	bl	8026d06 <USBD_LL_Transmit>

  return USBD_OK;
 8015fe0:	2300      	movs	r3, #0
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	3710      	adds	r7, #16
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}

08015fea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015fea:	b580      	push	{r7, lr}
 8015fec:	b084      	sub	sp, #16
 8015fee:	af00      	add	r7, sp, #0
 8015ff0:	60f8      	str	r0, [r7, #12]
 8015ff2:	60b9      	str	r1, [r7, #8]
 8015ff4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	68ba      	ldr	r2, [r7, #8]
 8015ffa:	2100      	movs	r1, #0
 8015ffc:	68f8      	ldr	r0, [r7, #12]
 8015ffe:	f010 fe82 	bl	8026d06 <USBD_LL_Transmit>

  return USBD_OK;
 8016002:	2300      	movs	r3, #0
}
 8016004:	4618      	mov	r0, r3
 8016006:	3710      	adds	r7, #16
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b084      	sub	sp, #16
 8016010:	af00      	add	r7, sp, #0
 8016012:	60f8      	str	r0, [r7, #12]
 8016014:	60b9      	str	r1, [r7, #8]
 8016016:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	2203      	movs	r2, #3
 801601c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	687a      	ldr	r2, [r7, #4]
 801602c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	68ba      	ldr	r2, [r7, #8]
 8016034:	2100      	movs	r1, #0
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	f010 fe86 	bl	8026d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801603c:	2300      	movs	r3, #0
}
 801603e:	4618      	mov	r0, r3
 8016040:	3710      	adds	r7, #16
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}

08016046 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016046:	b580      	push	{r7, lr}
 8016048:	b084      	sub	sp, #16
 801604a:	af00      	add	r7, sp, #0
 801604c:	60f8      	str	r0, [r7, #12]
 801604e:	60b9      	str	r1, [r7, #8]
 8016050:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	68ba      	ldr	r2, [r7, #8]
 8016056:	2100      	movs	r1, #0
 8016058:	68f8      	ldr	r0, [r7, #12]
 801605a:	f010 fe75 	bl	8026d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2204      	movs	r2, #4
 8016074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016078:	2300      	movs	r3, #0
 801607a:	2200      	movs	r2, #0
 801607c:	2100      	movs	r1, #0
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f010 fe41 	bl	8026d06 <USBD_LL_Transmit>

  return USBD_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b082      	sub	sp, #8
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2205      	movs	r2, #5
 801609a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801609e:	2300      	movs	r3, #0
 80160a0:	2200      	movs	r2, #0
 80160a2:	2100      	movs	r1, #0
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f010 fe4f 	bl	8026d48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80160aa:	2300      	movs	r3, #0
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	3708      	adds	r7, #8
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80160b4:	b480      	push	{r7}
 80160b6:	b087      	sub	sp, #28
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	4613      	mov	r3, r2
 80160c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80160c2:	2301      	movs	r3, #1
 80160c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80160ca:	4b1f      	ldr	r3, [pc, #124]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 80160cc:	7a5b      	ldrb	r3, [r3, #9]
 80160ce:	b2db      	uxtb	r3, r3
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d131      	bne.n	8016138 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80160d4:	4b1c      	ldr	r3, [pc, #112]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 80160d6:	7a5b      	ldrb	r3, [r3, #9]
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	461a      	mov	r2, r3
 80160dc:	4b1a      	ldr	r3, [pc, #104]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 80160de:	2100      	movs	r1, #0
 80160e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80160e2:	4b19      	ldr	r3, [pc, #100]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 80160e4:	7a5b      	ldrb	r3, [r3, #9]
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	4a17      	ldr	r2, [pc, #92]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 80160ea:	009b      	lsls	r3, r3, #2
 80160ec:	4413      	add	r3, r2
 80160ee:	68fa      	ldr	r2, [r7, #12]
 80160f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80160f2:	4b15      	ldr	r3, [pc, #84]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 80160f4:	7a5b      	ldrb	r3, [r3, #9]
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	461a      	mov	r2, r3
 80160fa:	4b13      	ldr	r3, [pc, #76]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 80160fc:	4413      	add	r3, r2
 80160fe:	79fa      	ldrb	r2, [r7, #7]
 8016100:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016102:	4b11      	ldr	r3, [pc, #68]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 8016104:	7a5b      	ldrb	r3, [r3, #9]
 8016106:	b2db      	uxtb	r3, r3
 8016108:	1c5a      	adds	r2, r3, #1
 801610a:	b2d1      	uxtb	r1, r2
 801610c:	4a0e      	ldr	r2, [pc, #56]	; (8016148 <FATFS_LinkDriverEx+0x94>)
 801610e:	7251      	strb	r1, [r2, #9]
 8016110:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016112:	7dbb      	ldrb	r3, [r7, #22]
 8016114:	3330      	adds	r3, #48	; 0x30
 8016116:	b2da      	uxtb	r2, r3
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	3301      	adds	r3, #1
 8016120:	223a      	movs	r2, #58	; 0x3a
 8016122:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	3302      	adds	r3, #2
 8016128:	222f      	movs	r2, #47	; 0x2f
 801612a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	3303      	adds	r3, #3
 8016130:	2200      	movs	r2, #0
 8016132:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016134:	2300      	movs	r3, #0
 8016136:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016138:	7dfb      	ldrb	r3, [r7, #23]
}
 801613a:	4618      	mov	r0, r3
 801613c:	371c      	adds	r7, #28
 801613e:	46bd      	mov	sp, r7
 8016140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop
 8016148:	2400540c 	.word	0x2400540c

0801614c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b082      	sub	sp, #8
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
 8016154:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016156:	2200      	movs	r2, #0
 8016158:	6839      	ldr	r1, [r7, #0]
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f7ff ffaa 	bl	80160b4 <FATFS_LinkDriverEx>
 8016160:	4603      	mov	r3, r0
}
 8016162:	4618      	mov	r0, r3
 8016164:	3708      	adds	r7, #8
 8016166:	46bd      	mov	sp, r7
 8016168:	bd80      	pop	{r7, pc}
	...

0801616c <__NVIC_SetPriority>:
{
 801616c:	b480      	push	{r7}
 801616e:	b083      	sub	sp, #12
 8016170:	af00      	add	r7, sp, #0
 8016172:	4603      	mov	r3, r0
 8016174:	6039      	str	r1, [r7, #0]
 8016176:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801617c:	2b00      	cmp	r3, #0
 801617e:	db0a      	blt.n	8016196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	b2da      	uxtb	r2, r3
 8016184:	490c      	ldr	r1, [pc, #48]	; (80161b8 <__NVIC_SetPriority+0x4c>)
 8016186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801618a:	0112      	lsls	r2, r2, #4
 801618c:	b2d2      	uxtb	r2, r2
 801618e:	440b      	add	r3, r1
 8016190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016194:	e00a      	b.n	80161ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	b2da      	uxtb	r2, r3
 801619a:	4908      	ldr	r1, [pc, #32]	; (80161bc <__NVIC_SetPriority+0x50>)
 801619c:	88fb      	ldrh	r3, [r7, #6]
 801619e:	f003 030f 	and.w	r3, r3, #15
 80161a2:	3b04      	subs	r3, #4
 80161a4:	0112      	lsls	r2, r2, #4
 80161a6:	b2d2      	uxtb	r2, r2
 80161a8:	440b      	add	r3, r1
 80161aa:	761a      	strb	r2, [r3, #24]
}
 80161ac:	bf00      	nop
 80161ae:	370c      	adds	r7, #12
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr
 80161b8:	e000e100 	.word	0xe000e100
 80161bc:	e000ed00 	.word	0xe000ed00

080161c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80161c0:	b580      	push	{r7, lr}
 80161c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80161c4:	4b05      	ldr	r3, [pc, #20]	; (80161dc <SysTick_Handler+0x1c>)
 80161c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80161c8:	f002 fcb8 	bl	8018b3c <xTaskGetSchedulerState>
 80161cc:	4603      	mov	r3, r0
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d001      	beq.n	80161d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80161d2:	f003 fba1 	bl	8019918 <xPortSysTickHandler>
  }
}
 80161d6:	bf00      	nop
 80161d8:	bd80      	pop	{r7, pc}
 80161da:	bf00      	nop
 80161dc:	e000e010 	.word	0xe000e010

080161e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80161e0:	b580      	push	{r7, lr}
 80161e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80161e4:	2100      	movs	r1, #0
 80161e6:	f06f 0004 	mvn.w	r0, #4
 80161ea:	f7ff ffbf 	bl	801616c <__NVIC_SetPriority>
#endif
}
 80161ee:	bf00      	nop
 80161f0:	bd80      	pop	{r7, pc}
	...

080161f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80161f4:	b480      	push	{r7}
 80161f6:	b083      	sub	sp, #12
 80161f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161fa:	f3ef 8305 	mrs	r3, IPSR
 80161fe:	603b      	str	r3, [r7, #0]
  return(result);
 8016200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016202:	2b00      	cmp	r3, #0
 8016204:	d003      	beq.n	801620e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016206:	f06f 0305 	mvn.w	r3, #5
 801620a:	607b      	str	r3, [r7, #4]
 801620c:	e00c      	b.n	8016228 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801620e:	4b0a      	ldr	r3, [pc, #40]	; (8016238 <osKernelInitialize+0x44>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d105      	bne.n	8016222 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016216:	4b08      	ldr	r3, [pc, #32]	; (8016238 <osKernelInitialize+0x44>)
 8016218:	2201      	movs	r2, #1
 801621a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801621c:	2300      	movs	r3, #0
 801621e:	607b      	str	r3, [r7, #4]
 8016220:	e002      	b.n	8016228 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016222:	f04f 33ff 	mov.w	r3, #4294967295
 8016226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016228:	687b      	ldr	r3, [r7, #4]
}
 801622a:	4618      	mov	r0, r3
 801622c:	370c      	adds	r7, #12
 801622e:	46bd      	mov	sp, r7
 8016230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	24005418 	.word	0x24005418

0801623c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8016242:	f002 fc7b 	bl	8018b3c <xTaskGetSchedulerState>
 8016246:	4603      	mov	r3, r0
 8016248:	2b00      	cmp	r3, #0
 801624a:	d004      	beq.n	8016256 <osKernelGetState+0x1a>
 801624c:	2b02      	cmp	r3, #2
 801624e:	d105      	bne.n	801625c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8016250:	2302      	movs	r3, #2
 8016252:	607b      	str	r3, [r7, #4]
      break;
 8016254:	e00c      	b.n	8016270 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8016256:	2303      	movs	r3, #3
 8016258:	607b      	str	r3, [r7, #4]
      break;
 801625a:	e009      	b.n	8016270 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801625c:	4b07      	ldr	r3, [pc, #28]	; (801627c <osKernelGetState+0x40>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	2b01      	cmp	r3, #1
 8016262:	d102      	bne.n	801626a <osKernelGetState+0x2e>
        state = osKernelReady;
 8016264:	2301      	movs	r3, #1
 8016266:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8016268:	e001      	b.n	801626e <osKernelGetState+0x32>
        state = osKernelInactive;
 801626a:	2300      	movs	r3, #0
 801626c:	607b      	str	r3, [r7, #4]
      break;
 801626e:	bf00      	nop
  }

  return (state);
 8016270:	687b      	ldr	r3, [r7, #4]
}
 8016272:	4618      	mov	r0, r3
 8016274:	3708      	adds	r7, #8
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	24005418 	.word	0x24005418

08016280 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8016280:	b580      	push	{r7, lr}
 8016282:	b082      	sub	sp, #8
 8016284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016286:	f3ef 8305 	mrs	r3, IPSR
 801628a:	603b      	str	r3, [r7, #0]
  return(result);
 801628c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801628e:	2b00      	cmp	r3, #0
 8016290:	d003      	beq.n	801629a <osKernelStart+0x1a>
    stat = osErrorISR;
 8016292:	f06f 0305 	mvn.w	r3, #5
 8016296:	607b      	str	r3, [r7, #4]
 8016298:	e010      	b.n	80162bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801629a:	4b0b      	ldr	r3, [pc, #44]	; (80162c8 <osKernelStart+0x48>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	2b01      	cmp	r3, #1
 80162a0:	d109      	bne.n	80162b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80162a2:	f7ff ff9d 	bl	80161e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80162a6:	4b08      	ldr	r3, [pc, #32]	; (80162c8 <osKernelStart+0x48>)
 80162a8:	2202      	movs	r2, #2
 80162aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80162ac:	f001 ffc8 	bl	8018240 <vTaskStartScheduler>
      stat = osOK;
 80162b0:	2300      	movs	r3, #0
 80162b2:	607b      	str	r3, [r7, #4]
 80162b4:	e002      	b.n	80162bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80162b6:	f04f 33ff 	mov.w	r3, #4294967295
 80162ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80162bc:	687b      	ldr	r3, [r7, #4]
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3708      	adds	r7, #8
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	24005418 	.word	0x24005418

080162cc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162d2:	f3ef 8305 	mrs	r3, IPSR
 80162d6:	603b      	str	r3, [r7, #0]
  return(result);
 80162d8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d003      	beq.n	80162e6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80162de:	f002 f8db 	bl	8018498 <xTaskGetTickCountFromISR>
 80162e2:	6078      	str	r0, [r7, #4]
 80162e4:	e002      	b.n	80162ec <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80162e6:	f002 f8c7 	bl	8018478 <xTaskGetTickCount>
 80162ea:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80162ec:	687b      	ldr	r3, [r7, #4]
}
 80162ee:	4618      	mov	r0, r3
 80162f0:	3708      	adds	r7, #8
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b08e      	sub	sp, #56	; 0x38
 80162fa:	af04      	add	r7, sp, #16
 80162fc:	60f8      	str	r0, [r7, #12]
 80162fe:	60b9      	str	r1, [r7, #8]
 8016300:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016302:	2300      	movs	r3, #0
 8016304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016306:	f3ef 8305 	mrs	r3, IPSR
 801630a:	617b      	str	r3, [r7, #20]
  return(result);
 801630c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801630e:	2b00      	cmp	r3, #0
 8016310:	d17e      	bne.n	8016410 <osThreadNew+0x11a>
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d07b      	beq.n	8016410 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016318:	2380      	movs	r3, #128	; 0x80
 801631a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801631c:	2318      	movs	r3, #24
 801631e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016320:	2300      	movs	r3, #0
 8016322:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016324:	f04f 33ff 	mov.w	r3, #4294967295
 8016328:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d045      	beq.n	80163bc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d002      	beq.n	801633e <osThreadNew+0x48>
        name = attr->name;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	699b      	ldr	r3, [r3, #24]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d002      	beq.n	801634c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	699b      	ldr	r3, [r3, #24]
 801634a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801634c:	69fb      	ldr	r3, [r7, #28]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d008      	beq.n	8016364 <osThreadNew+0x6e>
 8016352:	69fb      	ldr	r3, [r7, #28]
 8016354:	2b38      	cmp	r3, #56	; 0x38
 8016356:	d805      	bhi.n	8016364 <osThreadNew+0x6e>
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	f003 0301 	and.w	r3, r3, #1
 8016360:	2b00      	cmp	r3, #0
 8016362:	d001      	beq.n	8016368 <osThreadNew+0x72>
        return (NULL);
 8016364:	2300      	movs	r3, #0
 8016366:	e054      	b.n	8016412 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	695b      	ldr	r3, [r3, #20]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d003      	beq.n	8016378 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	695b      	ldr	r3, [r3, #20]
 8016374:	089b      	lsrs	r3, r3, #2
 8016376:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	689b      	ldr	r3, [r3, #8]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d00e      	beq.n	801639e <osThreadNew+0xa8>
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	2bbb      	cmp	r3, #187	; 0xbb
 8016386:	d90a      	bls.n	801639e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801638c:	2b00      	cmp	r3, #0
 801638e:	d006      	beq.n	801639e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	695b      	ldr	r3, [r3, #20]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d002      	beq.n	801639e <osThreadNew+0xa8>
        mem = 1;
 8016398:	2301      	movs	r3, #1
 801639a:	61bb      	str	r3, [r7, #24]
 801639c:	e010      	b.n	80163c0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	689b      	ldr	r3, [r3, #8]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d10c      	bne.n	80163c0 <osThreadNew+0xca>
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	68db      	ldr	r3, [r3, #12]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d108      	bne.n	80163c0 <osThreadNew+0xca>
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	691b      	ldr	r3, [r3, #16]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d104      	bne.n	80163c0 <osThreadNew+0xca>
          mem = 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	61bb      	str	r3, [r7, #24]
 80163ba:	e001      	b.n	80163c0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80163bc:	2300      	movs	r3, #0
 80163be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	2b01      	cmp	r3, #1
 80163c4:	d110      	bne.n	80163e8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80163ca:	687a      	ldr	r2, [r7, #4]
 80163cc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80163ce:	9202      	str	r2, [sp, #8]
 80163d0:	9301      	str	r3, [sp, #4]
 80163d2:	69fb      	ldr	r3, [r7, #28]
 80163d4:	9300      	str	r3, [sp, #0]
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	6a3a      	ldr	r2, [r7, #32]
 80163da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163dc:	68f8      	ldr	r0, [r7, #12]
 80163de:	f001 fd43 	bl	8017e68 <xTaskCreateStatic>
 80163e2:	4603      	mov	r3, r0
 80163e4:	613b      	str	r3, [r7, #16]
 80163e6:	e013      	b.n	8016410 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80163e8:	69bb      	ldr	r3, [r7, #24]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d110      	bne.n	8016410 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80163ee:	6a3b      	ldr	r3, [r7, #32]
 80163f0:	b29a      	uxth	r2, r3
 80163f2:	f107 0310 	add.w	r3, r7, #16
 80163f6:	9301      	str	r3, [sp, #4]
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	9300      	str	r3, [sp, #0]
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f001 fd8e 	bl	8017f22 <xTaskCreate>
 8016406:	4603      	mov	r3, r0
 8016408:	2b01      	cmp	r3, #1
 801640a:	d001      	beq.n	8016410 <osThreadNew+0x11a>
            hTask = NULL;
 801640c:	2300      	movs	r3, #0
 801640e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016410:	693b      	ldr	r3, [r7, #16]
}
 8016412:	4618      	mov	r0, r3
 8016414:	3728      	adds	r7, #40	; 0x28
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}

0801641a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801641a:	b580      	push	{r7, lr}
 801641c:	b084      	sub	sp, #16
 801641e:	af00      	add	r7, sp, #0
 8016420:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016422:	f3ef 8305 	mrs	r3, IPSR
 8016426:	60bb      	str	r3, [r7, #8]
  return(result);
 8016428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801642a:	2b00      	cmp	r3, #0
 801642c:	d003      	beq.n	8016436 <osDelay+0x1c>
    stat = osErrorISR;
 801642e:	f06f 0305 	mvn.w	r3, #5
 8016432:	60fb      	str	r3, [r7, #12]
 8016434:	e007      	b.n	8016446 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016436:	2300      	movs	r3, #0
 8016438:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d002      	beq.n	8016446 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f001 fec9 	bl	80181d8 <vTaskDelay>
    }
  }

  return (stat);
 8016446:	68fb      	ldr	r3, [r7, #12]
}
 8016448:	4618      	mov	r0, r3
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}

08016450 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8016450:	b580      	push	{r7, lr}
 8016452:	b088      	sub	sp, #32
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8016458:	2300      	movs	r3, #0
 801645a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801645c:	f3ef 8305 	mrs	r3, IPSR
 8016460:	60bb      	str	r3, [r7, #8]
  return(result);
 8016462:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8016464:	2b00      	cmp	r3, #0
 8016466:	d174      	bne.n	8016552 <osMutexNew+0x102>
    if (attr != NULL) {
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d003      	beq.n	8016476 <osMutexNew+0x26>
      type = attr->attr_bits;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	61bb      	str	r3, [r7, #24]
 8016474:	e001      	b.n	801647a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8016476:	2300      	movs	r3, #0
 8016478:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801647a:	69bb      	ldr	r3, [r7, #24]
 801647c:	f003 0301 	and.w	r3, r3, #1
 8016480:	2b00      	cmp	r3, #0
 8016482:	d002      	beq.n	801648a <osMutexNew+0x3a>
      rmtx = 1U;
 8016484:	2301      	movs	r3, #1
 8016486:	617b      	str	r3, [r7, #20]
 8016488:	e001      	b.n	801648e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801648a:	2300      	movs	r3, #0
 801648c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801648e:	69bb      	ldr	r3, [r7, #24]
 8016490:	f003 0308 	and.w	r3, r3, #8
 8016494:	2b00      	cmp	r3, #0
 8016496:	d15c      	bne.n	8016552 <osMutexNew+0x102>
      mem = -1;
 8016498:	f04f 33ff 	mov.w	r3, #4294967295
 801649c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d015      	beq.n	80164d0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	689b      	ldr	r3, [r3, #8]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d006      	beq.n	80164ba <osMutexNew+0x6a>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	2b4f      	cmp	r3, #79	; 0x4f
 80164b2:	d902      	bls.n	80164ba <osMutexNew+0x6a>
          mem = 1;
 80164b4:	2301      	movs	r3, #1
 80164b6:	613b      	str	r3, [r7, #16]
 80164b8:	e00c      	b.n	80164d4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	689b      	ldr	r3, [r3, #8]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d108      	bne.n	80164d4 <osMutexNew+0x84>
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d104      	bne.n	80164d4 <osMutexNew+0x84>
            mem = 0;
 80164ca:	2300      	movs	r3, #0
 80164cc:	613b      	str	r3, [r7, #16]
 80164ce:	e001      	b.n	80164d4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80164d0:	2300      	movs	r3, #0
 80164d2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	2b01      	cmp	r3, #1
 80164d8:	d112      	bne.n	8016500 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d007      	beq.n	80164f0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	689b      	ldr	r3, [r3, #8]
 80164e4:	4619      	mov	r1, r3
 80164e6:	2004      	movs	r0, #4
 80164e8:	f000 fd69 	bl	8016fbe <xQueueCreateMutexStatic>
 80164ec:	61f8      	str	r0, [r7, #28]
 80164ee:	e016      	b.n	801651e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	689b      	ldr	r3, [r3, #8]
 80164f4:	4619      	mov	r1, r3
 80164f6:	2001      	movs	r0, #1
 80164f8:	f000 fd61 	bl	8016fbe <xQueueCreateMutexStatic>
 80164fc:	61f8      	str	r0, [r7, #28]
 80164fe:	e00e      	b.n	801651e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d10b      	bne.n	801651e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d004      	beq.n	8016516 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801650c:	2004      	movs	r0, #4
 801650e:	f000 fd3e 	bl	8016f8e <xQueueCreateMutex>
 8016512:	61f8      	str	r0, [r7, #28]
 8016514:	e003      	b.n	801651e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8016516:	2001      	movs	r0, #1
 8016518:	f000 fd39 	bl	8016f8e <xQueueCreateMutex>
 801651c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d00c      	beq.n	801653e <osMutexNew+0xee>
        if (attr != NULL) {
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d003      	beq.n	8016532 <osMutexNew+0xe2>
          name = attr->name;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	60fb      	str	r3, [r7, #12]
 8016530:	e001      	b.n	8016536 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8016532:	2300      	movs	r3, #0
 8016534:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8016536:	68f9      	ldr	r1, [r7, #12]
 8016538:	69f8      	ldr	r0, [r7, #28]
 801653a:	f001 fc0d 	bl	8017d58 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801653e:	69fb      	ldr	r3, [r7, #28]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d006      	beq.n	8016552 <osMutexNew+0x102>
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d003      	beq.n	8016552 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801654a:	69fb      	ldr	r3, [r7, #28]
 801654c:	f043 0301 	orr.w	r3, r3, #1
 8016550:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8016552:	69fb      	ldr	r3, [r7, #28]
}
 8016554:	4618      	mov	r0, r3
 8016556:	3720      	adds	r7, #32
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	f023 0301 	bic.w	r3, r3, #1
 801656c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	f003 0301 	and.w	r3, r3, #1
 8016574:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8016576:	2300      	movs	r3, #0
 8016578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801657a:	f3ef 8305 	mrs	r3, IPSR
 801657e:	60bb      	str	r3, [r7, #8]
  return(result);
 8016580:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8016582:	2b00      	cmp	r3, #0
 8016584:	d003      	beq.n	801658e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8016586:	f06f 0305 	mvn.w	r3, #5
 801658a:	617b      	str	r3, [r7, #20]
 801658c:	e02c      	b.n	80165e8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801658e:	693b      	ldr	r3, [r7, #16]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d103      	bne.n	801659c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8016594:	f06f 0303 	mvn.w	r3, #3
 8016598:	617b      	str	r3, [r7, #20]
 801659a:	e025      	b.n	80165e8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d011      	beq.n	80165c6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80165a2:	6839      	ldr	r1, [r7, #0]
 80165a4:	6938      	ldr	r0, [r7, #16]
 80165a6:	f000 fd59 	bl	801705c <xQueueTakeMutexRecursive>
 80165aa:	4603      	mov	r3, r0
 80165ac:	2b01      	cmp	r3, #1
 80165ae:	d01b      	beq.n	80165e8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d003      	beq.n	80165be <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80165b6:	f06f 0301 	mvn.w	r3, #1
 80165ba:	617b      	str	r3, [r7, #20]
 80165bc:	e014      	b.n	80165e8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80165be:	f06f 0302 	mvn.w	r3, #2
 80165c2:	617b      	str	r3, [r7, #20]
 80165c4:	e010      	b.n	80165e8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80165c6:	6839      	ldr	r1, [r7, #0]
 80165c8:	6938      	ldr	r0, [r7, #16]
 80165ca:	f001 f8ed 	bl	80177a8 <xQueueSemaphoreTake>
 80165ce:	4603      	mov	r3, r0
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d009      	beq.n	80165e8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d003      	beq.n	80165e2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80165da:	f06f 0301 	mvn.w	r3, #1
 80165de:	617b      	str	r3, [r7, #20]
 80165e0:	e002      	b.n	80165e8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80165e2:	f06f 0302 	mvn.w	r3, #2
 80165e6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80165e8:	697b      	ldr	r3, [r7, #20]
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3718      	adds	r7, #24
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b086      	sub	sp, #24
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f023 0301 	bic.w	r3, r3, #1
 8016600:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f003 0301 	and.w	r3, r3, #1
 8016608:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801660a:	2300      	movs	r3, #0
 801660c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801660e:	f3ef 8305 	mrs	r3, IPSR
 8016612:	60bb      	str	r3, [r7, #8]
  return(result);
 8016614:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8016616:	2b00      	cmp	r3, #0
 8016618:	d003      	beq.n	8016622 <osMutexRelease+0x30>
    stat = osErrorISR;
 801661a:	f06f 0305 	mvn.w	r3, #5
 801661e:	617b      	str	r3, [r7, #20]
 8016620:	e01f      	b.n	8016662 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d103      	bne.n	8016630 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8016628:	f06f 0303 	mvn.w	r3, #3
 801662c:	617b      	str	r3, [r7, #20]
 801662e:	e018      	b.n	8016662 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d009      	beq.n	801664a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8016636:	6938      	ldr	r0, [r7, #16]
 8016638:	f000 fcdc 	bl	8016ff4 <xQueueGiveMutexRecursive>
 801663c:	4603      	mov	r3, r0
 801663e:	2b01      	cmp	r3, #1
 8016640:	d00f      	beq.n	8016662 <osMutexRelease+0x70>
        stat = osErrorResource;
 8016642:	f06f 0302 	mvn.w	r3, #2
 8016646:	617b      	str	r3, [r7, #20]
 8016648:	e00b      	b.n	8016662 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801664a:	2300      	movs	r3, #0
 801664c:	2200      	movs	r2, #0
 801664e:	2100      	movs	r1, #0
 8016650:	6938      	ldr	r0, [r7, #16]
 8016652:	f000 fda3 	bl	801719c <xQueueGenericSend>
 8016656:	4603      	mov	r3, r0
 8016658:	2b01      	cmp	r3, #1
 801665a:	d002      	beq.n	8016662 <osMutexRelease+0x70>
        stat = osErrorResource;
 801665c:	f06f 0302 	mvn.w	r3, #2
 8016660:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8016662:	697b      	ldr	r3, [r7, #20]
}
 8016664:	4618      	mov	r0, r3
 8016666:	3718      	adds	r7, #24
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801666c:	b580      	push	{r7, lr}
 801666e:	b08a      	sub	sp, #40	; 0x28
 8016670:	af02      	add	r7, sp, #8
 8016672:	60f8      	str	r0, [r7, #12]
 8016674:	60b9      	str	r1, [r7, #8]
 8016676:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8016678:	2300      	movs	r3, #0
 801667a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801667c:	f3ef 8305 	mrs	r3, IPSR
 8016680:	613b      	str	r3, [r7, #16]
  return(result);
 8016682:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8016684:	2b00      	cmp	r3, #0
 8016686:	d175      	bne.n	8016774 <osSemaphoreNew+0x108>
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d072      	beq.n	8016774 <osSemaphoreNew+0x108>
 801668e:	68ba      	ldr	r2, [r7, #8]
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	429a      	cmp	r2, r3
 8016694:	d86e      	bhi.n	8016774 <osSemaphoreNew+0x108>
    mem = -1;
 8016696:	f04f 33ff 	mov.w	r3, #4294967295
 801669a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d015      	beq.n	80166ce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	689b      	ldr	r3, [r3, #8]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d006      	beq.n	80166b8 <osSemaphoreNew+0x4c>
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	68db      	ldr	r3, [r3, #12]
 80166ae:	2b4f      	cmp	r3, #79	; 0x4f
 80166b0:	d902      	bls.n	80166b8 <osSemaphoreNew+0x4c>
        mem = 1;
 80166b2:	2301      	movs	r3, #1
 80166b4:	61bb      	str	r3, [r7, #24]
 80166b6:	e00c      	b.n	80166d2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	689b      	ldr	r3, [r3, #8]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d108      	bne.n	80166d2 <osSemaphoreNew+0x66>
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	68db      	ldr	r3, [r3, #12]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d104      	bne.n	80166d2 <osSemaphoreNew+0x66>
          mem = 0;
 80166c8:	2300      	movs	r3, #0
 80166ca:	61bb      	str	r3, [r7, #24]
 80166cc:	e001      	b.n	80166d2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80166ce:	2300      	movs	r3, #0
 80166d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80166d2:	69bb      	ldr	r3, [r7, #24]
 80166d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166d8:	d04c      	beq.n	8016774 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	2b01      	cmp	r3, #1
 80166de:	d128      	bne.n	8016732 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80166e0:	69bb      	ldr	r3, [r7, #24]
 80166e2:	2b01      	cmp	r3, #1
 80166e4:	d10a      	bne.n	80166fc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	689b      	ldr	r3, [r3, #8]
 80166ea:	2203      	movs	r2, #3
 80166ec:	9200      	str	r2, [sp, #0]
 80166ee:	2200      	movs	r2, #0
 80166f0:	2100      	movs	r1, #0
 80166f2:	2001      	movs	r0, #1
 80166f4:	f000 fb5c 	bl	8016db0 <xQueueGenericCreateStatic>
 80166f8:	61f8      	str	r0, [r7, #28]
 80166fa:	e005      	b.n	8016708 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80166fc:	2203      	movs	r2, #3
 80166fe:	2100      	movs	r1, #0
 8016700:	2001      	movs	r0, #1
 8016702:	f000 fbcd 	bl	8016ea0 <xQueueGenericCreate>
 8016706:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d022      	beq.n	8016754 <osSemaphoreNew+0xe8>
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d01f      	beq.n	8016754 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016714:	2300      	movs	r3, #0
 8016716:	2200      	movs	r2, #0
 8016718:	2100      	movs	r1, #0
 801671a:	69f8      	ldr	r0, [r7, #28]
 801671c:	f000 fd3e 	bl	801719c <xQueueGenericSend>
 8016720:	4603      	mov	r3, r0
 8016722:	2b01      	cmp	r3, #1
 8016724:	d016      	beq.n	8016754 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8016726:	69f8      	ldr	r0, [r7, #28]
 8016728:	f001 f9ca 	bl	8017ac0 <vQueueDelete>
            hSemaphore = NULL;
 801672c:	2300      	movs	r3, #0
 801672e:	61fb      	str	r3, [r7, #28]
 8016730:	e010      	b.n	8016754 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	2b01      	cmp	r3, #1
 8016736:	d108      	bne.n	801674a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	689b      	ldr	r3, [r3, #8]
 801673c:	461a      	mov	r2, r3
 801673e:	68b9      	ldr	r1, [r7, #8]
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f000 fcc1 	bl	80170c8 <xQueueCreateCountingSemaphoreStatic>
 8016746:	61f8      	str	r0, [r7, #28]
 8016748:	e004      	b.n	8016754 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801674a:	68b9      	ldr	r1, [r7, #8]
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f000 fcf2 	bl	8017136 <xQueueCreateCountingSemaphore>
 8016752:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d00c      	beq.n	8016774 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d003      	beq.n	8016768 <osSemaphoreNew+0xfc>
          name = attr->name;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	617b      	str	r3, [r7, #20]
 8016766:	e001      	b.n	801676c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8016768:	2300      	movs	r3, #0
 801676a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801676c:	6979      	ldr	r1, [r7, #20]
 801676e:	69f8      	ldr	r0, [r7, #28]
 8016770:	f001 faf2 	bl	8017d58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8016774:	69fb      	ldr	r3, [r7, #28]
}
 8016776:	4618      	mov	r0, r3
 8016778:	3720      	adds	r7, #32
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
	...

08016780 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8016780:	b580      	push	{r7, lr}
 8016782:	b086      	sub	sp, #24
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801678e:	2300      	movs	r3, #0
 8016790:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d103      	bne.n	80167a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8016798:	f06f 0303 	mvn.w	r3, #3
 801679c:	617b      	str	r3, [r7, #20]
 801679e:	e039      	b.n	8016814 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80167a0:	f3ef 8305 	mrs	r3, IPSR
 80167a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80167a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d022      	beq.n	80167f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d003      	beq.n	80167ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80167b2:	f06f 0303 	mvn.w	r3, #3
 80167b6:	617b      	str	r3, [r7, #20]
 80167b8:	e02c      	b.n	8016814 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80167ba:	2300      	movs	r3, #0
 80167bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80167be:	f107 0308 	add.w	r3, r7, #8
 80167c2:	461a      	mov	r2, r3
 80167c4:	2100      	movs	r1, #0
 80167c6:	6938      	ldr	r0, [r7, #16]
 80167c8:	f001 f8fa 	bl	80179c0 <xQueueReceiveFromISR>
 80167cc:	4603      	mov	r3, r0
 80167ce:	2b01      	cmp	r3, #1
 80167d0:	d003      	beq.n	80167da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80167d2:	f06f 0302 	mvn.w	r3, #2
 80167d6:	617b      	str	r3, [r7, #20]
 80167d8:	e01c      	b.n	8016814 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d019      	beq.n	8016814 <osSemaphoreAcquire+0x94>
 80167e0:	4b0f      	ldr	r3, [pc, #60]	; (8016820 <osSemaphoreAcquire+0xa0>)
 80167e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167e6:	601a      	str	r2, [r3, #0]
 80167e8:	f3bf 8f4f 	dsb	sy
 80167ec:	f3bf 8f6f 	isb	sy
 80167f0:	e010      	b.n	8016814 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80167f2:	6839      	ldr	r1, [r7, #0]
 80167f4:	6938      	ldr	r0, [r7, #16]
 80167f6:	f000 ffd7 	bl	80177a8 <xQueueSemaphoreTake>
 80167fa:	4603      	mov	r3, r0
 80167fc:	2b01      	cmp	r3, #1
 80167fe:	d009      	beq.n	8016814 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d003      	beq.n	801680e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8016806:	f06f 0301 	mvn.w	r3, #1
 801680a:	617b      	str	r3, [r7, #20]
 801680c:	e002      	b.n	8016814 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801680e:	f06f 0302 	mvn.w	r3, #2
 8016812:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8016814:	697b      	ldr	r3, [r7, #20]
}
 8016816:	4618      	mov	r0, r3
 8016818:	3718      	adds	r7, #24
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	e000ed04 	.word	0xe000ed04

08016824 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8016824:	b580      	push	{r7, lr}
 8016826:	b086      	sub	sp, #24
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016830:	2300      	movs	r3, #0
 8016832:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d103      	bne.n	8016842 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801683a:	f06f 0303 	mvn.w	r3, #3
 801683e:	617b      	str	r3, [r7, #20]
 8016840:	e02c      	b.n	801689c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016842:	f3ef 8305 	mrs	r3, IPSR
 8016846:	60fb      	str	r3, [r7, #12]
  return(result);
 8016848:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801684a:	2b00      	cmp	r3, #0
 801684c:	d01a      	beq.n	8016884 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801684e:	2300      	movs	r3, #0
 8016850:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8016852:	f107 0308 	add.w	r3, r7, #8
 8016856:	4619      	mov	r1, r3
 8016858:	6938      	ldr	r0, [r7, #16]
 801685a:	f000 fe38 	bl	80174ce <xQueueGiveFromISR>
 801685e:	4603      	mov	r3, r0
 8016860:	2b01      	cmp	r3, #1
 8016862:	d003      	beq.n	801686c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8016864:	f06f 0302 	mvn.w	r3, #2
 8016868:	617b      	str	r3, [r7, #20]
 801686a:	e017      	b.n	801689c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d014      	beq.n	801689c <osSemaphoreRelease+0x78>
 8016872:	4b0d      	ldr	r3, [pc, #52]	; (80168a8 <osSemaphoreRelease+0x84>)
 8016874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016878:	601a      	str	r2, [r3, #0]
 801687a:	f3bf 8f4f 	dsb	sy
 801687e:	f3bf 8f6f 	isb	sy
 8016882:	e00b      	b.n	801689c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016884:	2300      	movs	r3, #0
 8016886:	2200      	movs	r2, #0
 8016888:	2100      	movs	r1, #0
 801688a:	6938      	ldr	r0, [r7, #16]
 801688c:	f000 fc86 	bl	801719c <xQueueGenericSend>
 8016890:	4603      	mov	r3, r0
 8016892:	2b01      	cmp	r3, #1
 8016894:	d002      	beq.n	801689c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8016896:	f06f 0302 	mvn.w	r3, #2
 801689a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801689c:	697b      	ldr	r3, [r7, #20]
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3718      	adds	r7, #24
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	e000ed04 	.word	0xe000ed04

080168ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b08a      	sub	sp, #40	; 0x28
 80168b0:	af02      	add	r7, sp, #8
 80168b2:	60f8      	str	r0, [r7, #12]
 80168b4:	60b9      	str	r1, [r7, #8]
 80168b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80168b8:	2300      	movs	r3, #0
 80168ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80168bc:	f3ef 8305 	mrs	r3, IPSR
 80168c0:	613b      	str	r3, [r7, #16]
  return(result);
 80168c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d15f      	bne.n	8016988 <osMessageQueueNew+0xdc>
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d05c      	beq.n	8016988 <osMessageQueueNew+0xdc>
 80168ce:	68bb      	ldr	r3, [r7, #8]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d059      	beq.n	8016988 <osMessageQueueNew+0xdc>
    mem = -1;
 80168d4:	f04f 33ff 	mov.w	r3, #4294967295
 80168d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d029      	beq.n	8016934 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	689b      	ldr	r3, [r3, #8]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d012      	beq.n	801690e <osMessageQueueNew+0x62>
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	68db      	ldr	r3, [r3, #12]
 80168ec:	2b4f      	cmp	r3, #79	; 0x4f
 80168ee:	d90e      	bls.n	801690e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d00a      	beq.n	801690e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	695a      	ldr	r2, [r3, #20]
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	68b9      	ldr	r1, [r7, #8]
 8016900:	fb01 f303 	mul.w	r3, r1, r3
 8016904:	429a      	cmp	r2, r3
 8016906:	d302      	bcc.n	801690e <osMessageQueueNew+0x62>
        mem = 1;
 8016908:	2301      	movs	r3, #1
 801690a:	61bb      	str	r3, [r7, #24]
 801690c:	e014      	b.n	8016938 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	689b      	ldr	r3, [r3, #8]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d110      	bne.n	8016938 <osMessageQueueNew+0x8c>
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d10c      	bne.n	8016938 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016922:	2b00      	cmp	r3, #0
 8016924:	d108      	bne.n	8016938 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	695b      	ldr	r3, [r3, #20]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d104      	bne.n	8016938 <osMessageQueueNew+0x8c>
          mem = 0;
 801692e:	2300      	movs	r3, #0
 8016930:	61bb      	str	r3, [r7, #24]
 8016932:	e001      	b.n	8016938 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8016934:	2300      	movs	r3, #0
 8016936:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016938:	69bb      	ldr	r3, [r7, #24]
 801693a:	2b01      	cmp	r3, #1
 801693c:	d10b      	bne.n	8016956 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	691a      	ldr	r2, [r3, #16]
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	689b      	ldr	r3, [r3, #8]
 8016946:	2100      	movs	r1, #0
 8016948:	9100      	str	r1, [sp, #0]
 801694a:	68b9      	ldr	r1, [r7, #8]
 801694c:	68f8      	ldr	r0, [r7, #12]
 801694e:	f000 fa2f 	bl	8016db0 <xQueueGenericCreateStatic>
 8016952:	61f8      	str	r0, [r7, #28]
 8016954:	e008      	b.n	8016968 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8016956:	69bb      	ldr	r3, [r7, #24]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d105      	bne.n	8016968 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801695c:	2200      	movs	r2, #0
 801695e:	68b9      	ldr	r1, [r7, #8]
 8016960:	68f8      	ldr	r0, [r7, #12]
 8016962:	f000 fa9d 	bl	8016ea0 <xQueueGenericCreate>
 8016966:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d00c      	beq.n	8016988 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d003      	beq.n	801697c <osMessageQueueNew+0xd0>
        name = attr->name;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	617b      	str	r3, [r7, #20]
 801697a:	e001      	b.n	8016980 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801697c:	2300      	movs	r3, #0
 801697e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8016980:	6979      	ldr	r1, [r7, #20]
 8016982:	69f8      	ldr	r0, [r7, #28]
 8016984:	f001 f9e8 	bl	8017d58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8016988:	69fb      	ldr	r3, [r7, #28]
}
 801698a:	4618      	mov	r0, r3
 801698c:	3720      	adds	r7, #32
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}
	...

08016994 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016994:	b580      	push	{r7, lr}
 8016996:	b088      	sub	sp, #32
 8016998:	af00      	add	r7, sp, #0
 801699a:	60f8      	str	r0, [r7, #12]
 801699c:	60b9      	str	r1, [r7, #8]
 801699e:	603b      	str	r3, [r7, #0]
 80169a0:	4613      	mov	r3, r2
 80169a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80169a8:	2300      	movs	r3, #0
 80169aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80169ac:	f3ef 8305 	mrs	r3, IPSR
 80169b0:	617b      	str	r3, [r7, #20]
  return(result);
 80169b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d028      	beq.n	8016a0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80169b8:	69bb      	ldr	r3, [r7, #24]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d005      	beq.n	80169ca <osMessageQueuePut+0x36>
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d002      	beq.n	80169ca <osMessageQueuePut+0x36>
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d003      	beq.n	80169d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80169ca:	f06f 0303 	mvn.w	r3, #3
 80169ce:	61fb      	str	r3, [r7, #28]
 80169d0:	e038      	b.n	8016a44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80169d2:	2300      	movs	r3, #0
 80169d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80169d6:	f107 0210 	add.w	r2, r7, #16
 80169da:	2300      	movs	r3, #0
 80169dc:	68b9      	ldr	r1, [r7, #8]
 80169de:	69b8      	ldr	r0, [r7, #24]
 80169e0:	f000 fcda 	bl	8017398 <xQueueGenericSendFromISR>
 80169e4:	4603      	mov	r3, r0
 80169e6:	2b01      	cmp	r3, #1
 80169e8:	d003      	beq.n	80169f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80169ea:	f06f 0302 	mvn.w	r3, #2
 80169ee:	61fb      	str	r3, [r7, #28]
 80169f0:	e028      	b.n	8016a44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80169f2:	693b      	ldr	r3, [r7, #16]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d025      	beq.n	8016a44 <osMessageQueuePut+0xb0>
 80169f8:	4b15      	ldr	r3, [pc, #84]	; (8016a50 <osMessageQueuePut+0xbc>)
 80169fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169fe:	601a      	str	r2, [r3, #0]
 8016a00:	f3bf 8f4f 	dsb	sy
 8016a04:	f3bf 8f6f 	isb	sy
 8016a08:	e01c      	b.n	8016a44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016a0a:	69bb      	ldr	r3, [r7, #24]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d002      	beq.n	8016a16 <osMessageQueuePut+0x82>
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d103      	bne.n	8016a1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8016a16:	f06f 0303 	mvn.w	r3, #3
 8016a1a:	61fb      	str	r3, [r7, #28]
 8016a1c:	e012      	b.n	8016a44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016a1e:	2300      	movs	r3, #0
 8016a20:	683a      	ldr	r2, [r7, #0]
 8016a22:	68b9      	ldr	r1, [r7, #8]
 8016a24:	69b8      	ldr	r0, [r7, #24]
 8016a26:	f000 fbb9 	bl	801719c <xQueueGenericSend>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	d009      	beq.n	8016a44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8016a30:	683b      	ldr	r3, [r7, #0]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d003      	beq.n	8016a3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8016a36:	f06f 0301 	mvn.w	r3, #1
 8016a3a:	61fb      	str	r3, [r7, #28]
 8016a3c:	e002      	b.n	8016a44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8016a3e:	f06f 0302 	mvn.w	r3, #2
 8016a42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016a44:	69fb      	ldr	r3, [r7, #28]
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3720      	adds	r7, #32
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}
 8016a4e:	bf00      	nop
 8016a50:	e000ed04 	.word	0xe000ed04

08016a54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b088      	sub	sp, #32
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	60f8      	str	r0, [r7, #12]
 8016a5c:	60b9      	str	r1, [r7, #8]
 8016a5e:	607a      	str	r2, [r7, #4]
 8016a60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016a66:	2300      	movs	r3, #0
 8016a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a6a:	f3ef 8305 	mrs	r3, IPSR
 8016a6e:	617b      	str	r3, [r7, #20]
  return(result);
 8016a70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d028      	beq.n	8016ac8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d005      	beq.n	8016a88 <osMessageQueueGet+0x34>
 8016a7c:	68bb      	ldr	r3, [r7, #8]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d002      	beq.n	8016a88 <osMessageQueueGet+0x34>
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d003      	beq.n	8016a90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8016a88:	f06f 0303 	mvn.w	r3, #3
 8016a8c:	61fb      	str	r3, [r7, #28]
 8016a8e:	e037      	b.n	8016b00 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8016a90:	2300      	movs	r3, #0
 8016a92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8016a94:	f107 0310 	add.w	r3, r7, #16
 8016a98:	461a      	mov	r2, r3
 8016a9a:	68b9      	ldr	r1, [r7, #8]
 8016a9c:	69b8      	ldr	r0, [r7, #24]
 8016a9e:	f000 ff8f 	bl	80179c0 <xQueueReceiveFromISR>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	2b01      	cmp	r3, #1
 8016aa6:	d003      	beq.n	8016ab0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8016aa8:	f06f 0302 	mvn.w	r3, #2
 8016aac:	61fb      	str	r3, [r7, #28]
 8016aae:	e027      	b.n	8016b00 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8016ab0:	693b      	ldr	r3, [r7, #16]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d024      	beq.n	8016b00 <osMessageQueueGet+0xac>
 8016ab6:	4b15      	ldr	r3, [pc, #84]	; (8016b0c <osMessageQueueGet+0xb8>)
 8016ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016abc:	601a      	str	r2, [r3, #0]
 8016abe:	f3bf 8f4f 	dsb	sy
 8016ac2:	f3bf 8f6f 	isb	sy
 8016ac6:	e01b      	b.n	8016b00 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d002      	beq.n	8016ad4 <osMessageQueueGet+0x80>
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d103      	bne.n	8016adc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8016ad4:	f06f 0303 	mvn.w	r3, #3
 8016ad8:	61fb      	str	r3, [r7, #28]
 8016ada:	e011      	b.n	8016b00 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016adc:	683a      	ldr	r2, [r7, #0]
 8016ade:	68b9      	ldr	r1, [r7, #8]
 8016ae0:	69b8      	ldr	r0, [r7, #24]
 8016ae2:	f000 fd81 	bl	80175e8 <xQueueReceive>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2b01      	cmp	r3, #1
 8016aea:	d009      	beq.n	8016b00 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d003      	beq.n	8016afa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8016af2:	f06f 0301 	mvn.w	r3, #1
 8016af6:	61fb      	str	r3, [r7, #28]
 8016af8:	e002      	b.n	8016b00 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8016afa:	f06f 0302 	mvn.w	r3, #2
 8016afe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016b00:	69fb      	ldr	r3, [r7, #28]
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3720      	adds	r7, #32
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
 8016b0a:	bf00      	nop
 8016b0c:	e000ed04 	.word	0xe000ed04

08016b10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016b10:	b480      	push	{r7}
 8016b12:	b085      	sub	sp, #20
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	4a07      	ldr	r2, [pc, #28]	; (8016b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8016b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016b22:	68bb      	ldr	r3, [r7, #8]
 8016b24:	4a06      	ldr	r2, [pc, #24]	; (8016b40 <vApplicationGetIdleTaskMemory+0x30>)
 8016b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2280      	movs	r2, #128	; 0x80
 8016b2c:	601a      	str	r2, [r3, #0]
}
 8016b2e:	bf00      	nop
 8016b30:	3714      	adds	r7, #20
 8016b32:	46bd      	mov	sp, r7
 8016b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b38:	4770      	bx	lr
 8016b3a:	bf00      	nop
 8016b3c:	2400541c 	.word	0x2400541c
 8016b40:	240054d8 	.word	0x240054d8

08016b44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016b44:	b480      	push	{r7}
 8016b46:	b085      	sub	sp, #20
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	60f8      	str	r0, [r7, #12]
 8016b4c:	60b9      	str	r1, [r7, #8]
 8016b4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	4a07      	ldr	r2, [pc, #28]	; (8016b70 <vApplicationGetTimerTaskMemory+0x2c>)
 8016b54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	4a06      	ldr	r2, [pc, #24]	; (8016b74 <vApplicationGetTimerTaskMemory+0x30>)
 8016b5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016b62:	601a      	str	r2, [r3, #0]
}
 8016b64:	bf00      	nop
 8016b66:	3714      	adds	r7, #20
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6e:	4770      	bx	lr
 8016b70:	240056d8 	.word	0x240056d8
 8016b74:	24005794 	.word	0x24005794

08016b78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b083      	sub	sp, #12
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f103 0208 	add.w	r2, r3, #8
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8016b90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	f103 0208 	add.w	r2, r3, #8
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f103 0208 	add.w	r2, r3, #8
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016bac:	bf00      	nop
 8016bae:	370c      	adds	r7, #12
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb6:	4770      	bx	lr

08016bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b083      	sub	sp, #12
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016bc6:	bf00      	nop
 8016bc8:	370c      	adds	r7, #12
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd0:	4770      	bx	lr

08016bd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016bd2:	b480      	push	{r7}
 8016bd4:	b085      	sub	sp, #20
 8016bd6:	af00      	add	r7, sp, #0
 8016bd8:	6078      	str	r0, [r7, #4]
 8016bda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	685b      	ldr	r3, [r3, #4]
 8016be0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	68fa      	ldr	r2, [r7, #12]
 8016be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	689a      	ldr	r2, [r3, #8]
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	689b      	ldr	r3, [r3, #8]
 8016bf4:	683a      	ldr	r2, [r7, #0]
 8016bf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	683a      	ldr	r2, [r7, #0]
 8016bfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	687a      	ldr	r2, [r7, #4]
 8016c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	1c5a      	adds	r2, r3, #1
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	601a      	str	r2, [r3, #0]
}
 8016c0e:	bf00      	nop
 8016c10:	3714      	adds	r7, #20
 8016c12:	46bd      	mov	sp, r7
 8016c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c18:	4770      	bx	lr

08016c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016c1a:	b480      	push	{r7}
 8016c1c:	b085      	sub	sp, #20
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
 8016c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c30:	d103      	bne.n	8016c3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	691b      	ldr	r3, [r3, #16]
 8016c36:	60fb      	str	r3, [r7, #12]
 8016c38:	e00c      	b.n	8016c54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	3308      	adds	r3, #8
 8016c3e:	60fb      	str	r3, [r7, #12]
 8016c40:	e002      	b.n	8016c48 <vListInsert+0x2e>
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	60fb      	str	r3, [r7, #12]
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	685b      	ldr	r3, [r3, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	68ba      	ldr	r2, [r7, #8]
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d2f6      	bcs.n	8016c42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	685a      	ldr	r2, [r3, #4]
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	685b      	ldr	r3, [r3, #4]
 8016c60:	683a      	ldr	r2, [r7, #0]
 8016c62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	68fa      	ldr	r2, [r7, #12]
 8016c68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	683a      	ldr	r2, [r7, #0]
 8016c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	687a      	ldr	r2, [r7, #4]
 8016c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	1c5a      	adds	r2, r3, #1
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	601a      	str	r2, [r3, #0]
}
 8016c80:	bf00      	nop
 8016c82:	3714      	adds	r7, #20
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b085      	sub	sp, #20
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	691b      	ldr	r3, [r3, #16]
 8016c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	6892      	ldr	r2, [r2, #8]
 8016ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	689b      	ldr	r3, [r3, #8]
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	6852      	ldr	r2, [r2, #4]
 8016cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	687a      	ldr	r2, [r7, #4]
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	d103      	bne.n	8016cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	689a      	ldr	r2, [r3, #8]
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	1e5a      	subs	r2, r3, #1
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	681b      	ldr	r3, [r3, #0]
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3714      	adds	r7, #20
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr

08016ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b084      	sub	sp, #16
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10a      	bne.n	8016d0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cf8:	f383 8811 	msr	BASEPRI, r3
 8016cfc:	f3bf 8f6f 	isb	sy
 8016d00:	f3bf 8f4f 	dsb	sy
 8016d04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016d06:	bf00      	nop
 8016d08:	e7fe      	b.n	8016d08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8016d0a:	f002 fd73 	bl	80197f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	681a      	ldr	r2, [r3, #0]
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d16:	68f9      	ldr	r1, [r7, #12]
 8016d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016d1a:	fb01 f303 	mul.w	r3, r1, r3
 8016d1e:	441a      	add	r2, r3
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	2200      	movs	r2, #0
 8016d28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681a      	ldr	r2, [r3, #0]
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	681a      	ldr	r2, [r3, #0]
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d3a:	3b01      	subs	r3, #1
 8016d3c:	68f9      	ldr	r1, [r7, #12]
 8016d3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016d40:	fb01 f303 	mul.w	r3, r1, r3
 8016d44:	441a      	add	r2, r3
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	22ff      	movs	r2, #255	; 0xff
 8016d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	22ff      	movs	r2, #255	; 0xff
 8016d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016d5a:	683b      	ldr	r3, [r7, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d114      	bne.n	8016d8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	691b      	ldr	r3, [r3, #16]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d01a      	beq.n	8016d9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	3310      	adds	r3, #16
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f001 fd13 	bl	8018798 <xTaskRemoveFromEventList>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d012      	beq.n	8016d9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016d78:	4b0c      	ldr	r3, [pc, #48]	; (8016dac <xQueueGenericReset+0xcc>)
 8016d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d7e:	601a      	str	r2, [r3, #0]
 8016d80:	f3bf 8f4f 	dsb	sy
 8016d84:	f3bf 8f6f 	isb	sy
 8016d88:	e009      	b.n	8016d9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	3310      	adds	r3, #16
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7ff fef2 	bl	8016b78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	3324      	adds	r3, #36	; 0x24
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7ff feed 	bl	8016b78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016d9e:	f002 fd59 	bl	8019854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016da2:	2301      	movs	r3, #1
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3710      	adds	r7, #16
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd80      	pop	{r7, pc}
 8016dac:	e000ed04 	.word	0xe000ed04

08016db0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b08e      	sub	sp, #56	; 0x38
 8016db4:	af02      	add	r7, sp, #8
 8016db6:	60f8      	str	r0, [r7, #12]
 8016db8:	60b9      	str	r1, [r7, #8]
 8016dba:	607a      	str	r2, [r7, #4]
 8016dbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d10a      	bne.n	8016dda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8016dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc8:	f383 8811 	msr	BASEPRI, r3
 8016dcc:	f3bf 8f6f 	isb	sy
 8016dd0:	f3bf 8f4f 	dsb	sy
 8016dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016dd6:	bf00      	nop
 8016dd8:	e7fe      	b.n	8016dd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d10a      	bne.n	8016df6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8016de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de4:	f383 8811 	msr	BASEPRI, r3
 8016de8:	f3bf 8f6f 	isb	sy
 8016dec:	f3bf 8f4f 	dsb	sy
 8016df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016df2:	bf00      	nop
 8016df4:	e7fe      	b.n	8016df4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d002      	beq.n	8016e02 <xQueueGenericCreateStatic+0x52>
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d001      	beq.n	8016e06 <xQueueGenericCreateStatic+0x56>
 8016e02:	2301      	movs	r3, #1
 8016e04:	e000      	b.n	8016e08 <xQueueGenericCreateStatic+0x58>
 8016e06:	2300      	movs	r3, #0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d10a      	bne.n	8016e22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8016e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e10:	f383 8811 	msr	BASEPRI, r3
 8016e14:	f3bf 8f6f 	isb	sy
 8016e18:	f3bf 8f4f 	dsb	sy
 8016e1c:	623b      	str	r3, [r7, #32]
}
 8016e1e:	bf00      	nop
 8016e20:	e7fe      	b.n	8016e20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d102      	bne.n	8016e2e <xQueueGenericCreateStatic+0x7e>
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d101      	bne.n	8016e32 <xQueueGenericCreateStatic+0x82>
 8016e2e:	2301      	movs	r3, #1
 8016e30:	e000      	b.n	8016e34 <xQueueGenericCreateStatic+0x84>
 8016e32:	2300      	movs	r3, #0
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d10a      	bne.n	8016e4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e3c:	f383 8811 	msr	BASEPRI, r3
 8016e40:	f3bf 8f6f 	isb	sy
 8016e44:	f3bf 8f4f 	dsb	sy
 8016e48:	61fb      	str	r3, [r7, #28]
}
 8016e4a:	bf00      	nop
 8016e4c:	e7fe      	b.n	8016e4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016e4e:	2350      	movs	r3, #80	; 0x50
 8016e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016e52:	697b      	ldr	r3, [r7, #20]
 8016e54:	2b50      	cmp	r3, #80	; 0x50
 8016e56:	d00a      	beq.n	8016e6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e5c:	f383 8811 	msr	BASEPRI, r3
 8016e60:	f3bf 8f6f 	isb	sy
 8016e64:	f3bf 8f4f 	dsb	sy
 8016e68:	61bb      	str	r3, [r7, #24]
}
 8016e6a:	bf00      	nop
 8016e6c:	e7fe      	b.n	8016e6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016e6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d00d      	beq.n	8016e96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e88:	9300      	str	r3, [sp, #0]
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	687a      	ldr	r2, [r7, #4]
 8016e8e:	68b9      	ldr	r1, [r7, #8]
 8016e90:	68f8      	ldr	r0, [r7, #12]
 8016e92:	f000 f83f 	bl	8016f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3730      	adds	r7, #48	; 0x30
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}

08016ea0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b08a      	sub	sp, #40	; 0x28
 8016ea4:	af02      	add	r7, sp, #8
 8016ea6:	60f8      	str	r0, [r7, #12]
 8016ea8:	60b9      	str	r1, [r7, #8]
 8016eaa:	4613      	mov	r3, r2
 8016eac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d10a      	bne.n	8016eca <xQueueGenericCreate+0x2a>
	__asm volatile
 8016eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb8:	f383 8811 	msr	BASEPRI, r3
 8016ebc:	f3bf 8f6f 	isb	sy
 8016ec0:	f3bf 8f4f 	dsb	sy
 8016ec4:	613b      	str	r3, [r7, #16]
}
 8016ec6:	bf00      	nop
 8016ec8:	e7fe      	b.n	8016ec8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	68ba      	ldr	r2, [r7, #8]
 8016ece:	fb02 f303 	mul.w	r3, r2, r3
 8016ed2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016ed4:	69fb      	ldr	r3, [r7, #28]
 8016ed6:	3350      	adds	r3, #80	; 0x50
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f002 fdad 	bl	8019a38 <pvPortMalloc>
 8016ede:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016ee0:	69bb      	ldr	r3, [r7, #24]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d011      	beq.n	8016f0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016ee6:	69bb      	ldr	r3, [r7, #24]
 8016ee8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	3350      	adds	r3, #80	; 0x50
 8016eee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016ef0:	69bb      	ldr	r3, [r7, #24]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016ef8:	79fa      	ldrb	r2, [r7, #7]
 8016efa:	69bb      	ldr	r3, [r7, #24]
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	4613      	mov	r3, r2
 8016f00:	697a      	ldr	r2, [r7, #20]
 8016f02:	68b9      	ldr	r1, [r7, #8]
 8016f04:	68f8      	ldr	r0, [r7, #12]
 8016f06:	f000 f805 	bl	8016f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	3720      	adds	r7, #32
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}

08016f14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b084      	sub	sp, #16
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	60f8      	str	r0, [r7, #12]
 8016f1c:	60b9      	str	r1, [r7, #8]
 8016f1e:	607a      	str	r2, [r7, #4]
 8016f20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d103      	bne.n	8016f30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016f28:	69bb      	ldr	r3, [r7, #24]
 8016f2a:	69ba      	ldr	r2, [r7, #24]
 8016f2c:	601a      	str	r2, [r3, #0]
 8016f2e:	e002      	b.n	8016f36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016f30:	69bb      	ldr	r3, [r7, #24]
 8016f32:	687a      	ldr	r2, [r7, #4]
 8016f34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016f36:	69bb      	ldr	r3, [r7, #24]
 8016f38:	68fa      	ldr	r2, [r7, #12]
 8016f3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016f3c:	69bb      	ldr	r3, [r7, #24]
 8016f3e:	68ba      	ldr	r2, [r7, #8]
 8016f40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016f42:	2101      	movs	r1, #1
 8016f44:	69b8      	ldr	r0, [r7, #24]
 8016f46:	f7ff fecb 	bl	8016ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016f4a:	69bb      	ldr	r3, [r7, #24]
 8016f4c:	78fa      	ldrb	r2, [r7, #3]
 8016f4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016f52:	bf00      	nop
 8016f54:	3710      	adds	r7, #16
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}

08016f5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016f5a:	b580      	push	{r7, lr}
 8016f5c:	b082      	sub	sp, #8
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d00e      	beq.n	8016f86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	2200      	movs	r2, #0
 8016f72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2200      	movs	r2, #0
 8016f78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	2100      	movs	r1, #0
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f000 f90b 	bl	801719c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016f86:	bf00      	nop
 8016f88:	3708      	adds	r7, #8
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016f8e:	b580      	push	{r7, lr}
 8016f90:	b086      	sub	sp, #24
 8016f92:	af00      	add	r7, sp, #0
 8016f94:	4603      	mov	r3, r0
 8016f96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016f98:	2301      	movs	r3, #1
 8016f9a:	617b      	str	r3, [r7, #20]
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016fa0:	79fb      	ldrb	r3, [r7, #7]
 8016fa2:	461a      	mov	r2, r3
 8016fa4:	6939      	ldr	r1, [r7, #16]
 8016fa6:	6978      	ldr	r0, [r7, #20]
 8016fa8:	f7ff ff7a 	bl	8016ea0 <xQueueGenericCreate>
 8016fac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016fae:	68f8      	ldr	r0, [r7, #12]
 8016fb0:	f7ff ffd3 	bl	8016f5a <prvInitialiseMutex>

		return xNewQueue;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
	}
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	3718      	adds	r7, #24
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	bd80      	pop	{r7, pc}

08016fbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016fbe:	b580      	push	{r7, lr}
 8016fc0:	b088      	sub	sp, #32
 8016fc2:	af02      	add	r7, sp, #8
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	6039      	str	r1, [r7, #0]
 8016fc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016fca:	2301      	movs	r3, #1
 8016fcc:	617b      	str	r3, [r7, #20]
 8016fce:	2300      	movs	r3, #0
 8016fd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016fd2:	79fb      	ldrb	r3, [r7, #7]
 8016fd4:	9300      	str	r3, [sp, #0]
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	2200      	movs	r2, #0
 8016fda:	6939      	ldr	r1, [r7, #16]
 8016fdc:	6978      	ldr	r0, [r7, #20]
 8016fde:	f7ff fee7 	bl	8016db0 <xQueueGenericCreateStatic>
 8016fe2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016fe4:	68f8      	ldr	r0, [r7, #12]
 8016fe6:	f7ff ffb8 	bl	8016f5a <prvInitialiseMutex>

		return xNewQueue;
 8016fea:	68fb      	ldr	r3, [r7, #12]
	}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3718      	adds	r7, #24
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016ff4:	b590      	push	{r4, r7, lr}
 8016ff6:	b087      	sub	sp, #28
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8017000:	693b      	ldr	r3, [r7, #16]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d10a      	bne.n	801701c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8017006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801700a:	f383 8811 	msr	BASEPRI, r3
 801700e:	f3bf 8f6f 	isb	sy
 8017012:	f3bf 8f4f 	dsb	sy
 8017016:	60fb      	str	r3, [r7, #12]
}
 8017018:	bf00      	nop
 801701a:	e7fe      	b.n	801701a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	689c      	ldr	r4, [r3, #8]
 8017020:	f001 fd7c 	bl	8018b1c <xTaskGetCurrentTaskHandle>
 8017024:	4603      	mov	r3, r0
 8017026:	429c      	cmp	r4, r3
 8017028:	d111      	bne.n	801704e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	1e5a      	subs	r2, r3, #1
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	68db      	ldr	r3, [r3, #12]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d105      	bne.n	8017048 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801703c:	2300      	movs	r3, #0
 801703e:	2200      	movs	r2, #0
 8017040:	2100      	movs	r1, #0
 8017042:	6938      	ldr	r0, [r7, #16]
 8017044:	f000 f8aa 	bl	801719c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8017048:	2301      	movs	r3, #1
 801704a:	617b      	str	r3, [r7, #20]
 801704c:	e001      	b.n	8017052 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801704e:	2300      	movs	r3, #0
 8017050:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8017052:	697b      	ldr	r3, [r7, #20]
	}
 8017054:	4618      	mov	r0, r3
 8017056:	371c      	adds	r7, #28
 8017058:	46bd      	mov	sp, r7
 801705a:	bd90      	pop	{r4, r7, pc}

0801705c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801705c:	b590      	push	{r4, r7, lr}
 801705e:	b087      	sub	sp, #28
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801706a:	693b      	ldr	r3, [r7, #16]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d10a      	bne.n	8017086 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8017070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017074:	f383 8811 	msr	BASEPRI, r3
 8017078:	f3bf 8f6f 	isb	sy
 801707c:	f3bf 8f4f 	dsb	sy
 8017080:	60fb      	str	r3, [r7, #12]
}
 8017082:	bf00      	nop
 8017084:	e7fe      	b.n	8017084 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017086:	693b      	ldr	r3, [r7, #16]
 8017088:	689c      	ldr	r4, [r3, #8]
 801708a:	f001 fd47 	bl	8018b1c <xTaskGetCurrentTaskHandle>
 801708e:	4603      	mov	r3, r0
 8017090:	429c      	cmp	r4, r3
 8017092:	d107      	bne.n	80170a4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8017094:	693b      	ldr	r3, [r7, #16]
 8017096:	68db      	ldr	r3, [r3, #12]
 8017098:	1c5a      	adds	r2, r3, #1
 801709a:	693b      	ldr	r3, [r7, #16]
 801709c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801709e:	2301      	movs	r3, #1
 80170a0:	617b      	str	r3, [r7, #20]
 80170a2:	e00c      	b.n	80170be <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80170a4:	6839      	ldr	r1, [r7, #0]
 80170a6:	6938      	ldr	r0, [r7, #16]
 80170a8:	f000 fb7e 	bl	80177a8 <xQueueSemaphoreTake>
 80170ac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d004      	beq.n	80170be <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	68db      	ldr	r3, [r3, #12]
 80170b8:	1c5a      	adds	r2, r3, #1
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80170be:	697b      	ldr	r3, [r7, #20]
	}
 80170c0:	4618      	mov	r0, r3
 80170c2:	371c      	adds	r7, #28
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd90      	pop	{r4, r7, pc}

080170c8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b08a      	sub	sp, #40	; 0x28
 80170cc:	af02      	add	r7, sp, #8
 80170ce:	60f8      	str	r0, [r7, #12]
 80170d0:	60b9      	str	r1, [r7, #8]
 80170d2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d10a      	bne.n	80170f0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80170da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170de:	f383 8811 	msr	BASEPRI, r3
 80170e2:	f3bf 8f6f 	isb	sy
 80170e6:	f3bf 8f4f 	dsb	sy
 80170ea:	61bb      	str	r3, [r7, #24]
}
 80170ec:	bf00      	nop
 80170ee:	e7fe      	b.n	80170ee <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80170f0:	68ba      	ldr	r2, [r7, #8]
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d90a      	bls.n	801710e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80170f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170fc:	f383 8811 	msr	BASEPRI, r3
 8017100:	f3bf 8f6f 	isb	sy
 8017104:	f3bf 8f4f 	dsb	sy
 8017108:	617b      	str	r3, [r7, #20]
}
 801710a:	bf00      	nop
 801710c:	e7fe      	b.n	801710c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801710e:	2302      	movs	r3, #2
 8017110:	9300      	str	r3, [sp, #0]
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	2200      	movs	r2, #0
 8017116:	2100      	movs	r1, #0
 8017118:	68f8      	ldr	r0, [r7, #12]
 801711a:	f7ff fe49 	bl	8016db0 <xQueueGenericCreateStatic>
 801711e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8017120:	69fb      	ldr	r3, [r7, #28]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d002      	beq.n	801712c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017126:	69fb      	ldr	r3, [r7, #28]
 8017128:	68ba      	ldr	r2, [r7, #8]
 801712a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801712c:	69fb      	ldr	r3, [r7, #28]
	}
 801712e:	4618      	mov	r0, r3
 8017130:	3720      	adds	r7, #32
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8017136:	b580      	push	{r7, lr}
 8017138:	b086      	sub	sp, #24
 801713a:	af00      	add	r7, sp, #0
 801713c:	6078      	str	r0, [r7, #4]
 801713e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d10a      	bne.n	801715c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8017146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801714a:	f383 8811 	msr	BASEPRI, r3
 801714e:	f3bf 8f6f 	isb	sy
 8017152:	f3bf 8f4f 	dsb	sy
 8017156:	613b      	str	r3, [r7, #16]
}
 8017158:	bf00      	nop
 801715a:	e7fe      	b.n	801715a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801715c:	683a      	ldr	r2, [r7, #0]
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	429a      	cmp	r2, r3
 8017162:	d90a      	bls.n	801717a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8017164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017168:	f383 8811 	msr	BASEPRI, r3
 801716c:	f3bf 8f6f 	isb	sy
 8017170:	f3bf 8f4f 	dsb	sy
 8017174:	60fb      	str	r3, [r7, #12]
}
 8017176:	bf00      	nop
 8017178:	e7fe      	b.n	8017178 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801717a:	2202      	movs	r2, #2
 801717c:	2100      	movs	r1, #0
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f7ff fe8e 	bl	8016ea0 <xQueueGenericCreate>
 8017184:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8017186:	697b      	ldr	r3, [r7, #20]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d002      	beq.n	8017192 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	683a      	ldr	r2, [r7, #0]
 8017190:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017192:	697b      	ldr	r3, [r7, #20]
	}
 8017194:	4618      	mov	r0, r3
 8017196:	3718      	adds	r7, #24
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}

0801719c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b08e      	sub	sp, #56	; 0x38
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	60f8      	str	r0, [r7, #12]
 80171a4:	60b9      	str	r1, [r7, #8]
 80171a6:	607a      	str	r2, [r7, #4]
 80171a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80171aa:	2300      	movs	r3, #0
 80171ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80171b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d10a      	bne.n	80171ce <xQueueGenericSend+0x32>
	__asm volatile
 80171b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171bc:	f383 8811 	msr	BASEPRI, r3
 80171c0:	f3bf 8f6f 	isb	sy
 80171c4:	f3bf 8f4f 	dsb	sy
 80171c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80171ca:	bf00      	nop
 80171cc:	e7fe      	b.n	80171cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d103      	bne.n	80171dc <xQueueGenericSend+0x40>
 80171d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d101      	bne.n	80171e0 <xQueueGenericSend+0x44>
 80171dc:	2301      	movs	r3, #1
 80171de:	e000      	b.n	80171e2 <xQueueGenericSend+0x46>
 80171e0:	2300      	movs	r3, #0
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d10a      	bne.n	80171fc <xQueueGenericSend+0x60>
	__asm volatile
 80171e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ea:	f383 8811 	msr	BASEPRI, r3
 80171ee:	f3bf 8f6f 	isb	sy
 80171f2:	f3bf 8f4f 	dsb	sy
 80171f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80171f8:	bf00      	nop
 80171fa:	e7fe      	b.n	80171fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	2b02      	cmp	r3, #2
 8017200:	d103      	bne.n	801720a <xQueueGenericSend+0x6e>
 8017202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017206:	2b01      	cmp	r3, #1
 8017208:	d101      	bne.n	801720e <xQueueGenericSend+0x72>
 801720a:	2301      	movs	r3, #1
 801720c:	e000      	b.n	8017210 <xQueueGenericSend+0x74>
 801720e:	2300      	movs	r3, #0
 8017210:	2b00      	cmp	r3, #0
 8017212:	d10a      	bne.n	801722a <xQueueGenericSend+0x8e>
	__asm volatile
 8017214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017218:	f383 8811 	msr	BASEPRI, r3
 801721c:	f3bf 8f6f 	isb	sy
 8017220:	f3bf 8f4f 	dsb	sy
 8017224:	623b      	str	r3, [r7, #32]
}
 8017226:	bf00      	nop
 8017228:	e7fe      	b.n	8017228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801722a:	f001 fc87 	bl	8018b3c <xTaskGetSchedulerState>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	d102      	bne.n	801723a <xQueueGenericSend+0x9e>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d101      	bne.n	801723e <xQueueGenericSend+0xa2>
 801723a:	2301      	movs	r3, #1
 801723c:	e000      	b.n	8017240 <xQueueGenericSend+0xa4>
 801723e:	2300      	movs	r3, #0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d10a      	bne.n	801725a <xQueueGenericSend+0xbe>
	__asm volatile
 8017244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017248:	f383 8811 	msr	BASEPRI, r3
 801724c:	f3bf 8f6f 	isb	sy
 8017250:	f3bf 8f4f 	dsb	sy
 8017254:	61fb      	str	r3, [r7, #28]
}
 8017256:	bf00      	nop
 8017258:	e7fe      	b.n	8017258 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801725a:	f002 facb 	bl	80197f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017266:	429a      	cmp	r2, r3
 8017268:	d302      	bcc.n	8017270 <xQueueGenericSend+0xd4>
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	2b02      	cmp	r3, #2
 801726e:	d129      	bne.n	80172c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017270:	683a      	ldr	r2, [r7, #0]
 8017272:	68b9      	ldr	r1, [r7, #8]
 8017274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017276:	f000 fc5e 	bl	8017b36 <prvCopyDataToQueue>
 801727a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017280:	2b00      	cmp	r3, #0
 8017282:	d010      	beq.n	80172a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017286:	3324      	adds	r3, #36	; 0x24
 8017288:	4618      	mov	r0, r3
 801728a:	f001 fa85 	bl	8018798 <xTaskRemoveFromEventList>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d013      	beq.n	80172bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017294:	4b3f      	ldr	r3, [pc, #252]	; (8017394 <xQueueGenericSend+0x1f8>)
 8017296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801729a:	601a      	str	r2, [r3, #0]
 801729c:	f3bf 8f4f 	dsb	sy
 80172a0:	f3bf 8f6f 	isb	sy
 80172a4:	e00a      	b.n	80172bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80172a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d007      	beq.n	80172bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80172ac:	4b39      	ldr	r3, [pc, #228]	; (8017394 <xQueueGenericSend+0x1f8>)
 80172ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172b2:	601a      	str	r2, [r3, #0]
 80172b4:	f3bf 8f4f 	dsb	sy
 80172b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80172bc:	f002 faca 	bl	8019854 <vPortExitCritical>
				return pdPASS;
 80172c0:	2301      	movs	r3, #1
 80172c2:	e063      	b.n	801738c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d103      	bne.n	80172d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80172ca:	f002 fac3 	bl	8019854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80172ce:	2300      	movs	r3, #0
 80172d0:	e05c      	b.n	801738c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80172d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d106      	bne.n	80172e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80172d8:	f107 0314 	add.w	r3, r7, #20
 80172dc:	4618      	mov	r0, r3
 80172de:	f001 fabf 	bl	8018860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80172e2:	2301      	movs	r3, #1
 80172e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80172e6:	f002 fab5 	bl	8019854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80172ea:	f001 f819 	bl	8018320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80172ee:	f002 fa81 	bl	80197f4 <vPortEnterCritical>
 80172f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80172f8:	b25b      	sxtb	r3, r3
 80172fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172fe:	d103      	bne.n	8017308 <xQueueGenericSend+0x16c>
 8017300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017302:	2200      	movs	r2, #0
 8017304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801730a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801730e:	b25b      	sxtb	r3, r3
 8017310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017314:	d103      	bne.n	801731e <xQueueGenericSend+0x182>
 8017316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017318:	2200      	movs	r2, #0
 801731a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801731e:	f002 fa99 	bl	8019854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017322:	1d3a      	adds	r2, r7, #4
 8017324:	f107 0314 	add.w	r3, r7, #20
 8017328:	4611      	mov	r1, r2
 801732a:	4618      	mov	r0, r3
 801732c:	f001 faae 	bl	801888c <xTaskCheckForTimeOut>
 8017330:	4603      	mov	r3, r0
 8017332:	2b00      	cmp	r3, #0
 8017334:	d124      	bne.n	8017380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017338:	f000 fcf5 	bl	8017d26 <prvIsQueueFull>
 801733c:	4603      	mov	r3, r0
 801733e:	2b00      	cmp	r3, #0
 8017340:	d018      	beq.n	8017374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017344:	3310      	adds	r3, #16
 8017346:	687a      	ldr	r2, [r7, #4]
 8017348:	4611      	mov	r1, r2
 801734a:	4618      	mov	r0, r3
 801734c:	f001 f9d4 	bl	80186f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017352:	f000 fc80 	bl	8017c56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017356:	f000 fff1 	bl	801833c <xTaskResumeAll>
 801735a:	4603      	mov	r3, r0
 801735c:	2b00      	cmp	r3, #0
 801735e:	f47f af7c 	bne.w	801725a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017362:	4b0c      	ldr	r3, [pc, #48]	; (8017394 <xQueueGenericSend+0x1f8>)
 8017364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017368:	601a      	str	r2, [r3, #0]
 801736a:	f3bf 8f4f 	dsb	sy
 801736e:	f3bf 8f6f 	isb	sy
 8017372:	e772      	b.n	801725a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017376:	f000 fc6e 	bl	8017c56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801737a:	f000 ffdf 	bl	801833c <xTaskResumeAll>
 801737e:	e76c      	b.n	801725a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017382:	f000 fc68 	bl	8017c56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017386:	f000 ffd9 	bl	801833c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801738a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801738c:	4618      	mov	r0, r3
 801738e:	3738      	adds	r7, #56	; 0x38
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}
 8017394:	e000ed04 	.word	0xe000ed04

08017398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b090      	sub	sp, #64	; 0x40
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	607a      	str	r2, [r7, #4]
 80173a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80173aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d10a      	bne.n	80173c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80173b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b4:	f383 8811 	msr	BASEPRI, r3
 80173b8:	f3bf 8f6f 	isb	sy
 80173bc:	f3bf 8f4f 	dsb	sy
 80173c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80173c2:	bf00      	nop
 80173c4:	e7fe      	b.n	80173c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d103      	bne.n	80173d4 <xQueueGenericSendFromISR+0x3c>
 80173cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d101      	bne.n	80173d8 <xQueueGenericSendFromISR+0x40>
 80173d4:	2301      	movs	r3, #1
 80173d6:	e000      	b.n	80173da <xQueueGenericSendFromISR+0x42>
 80173d8:	2300      	movs	r3, #0
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d10a      	bne.n	80173f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80173de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e2:	f383 8811 	msr	BASEPRI, r3
 80173e6:	f3bf 8f6f 	isb	sy
 80173ea:	f3bf 8f4f 	dsb	sy
 80173ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80173f0:	bf00      	nop
 80173f2:	e7fe      	b.n	80173f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	2b02      	cmp	r3, #2
 80173f8:	d103      	bne.n	8017402 <xQueueGenericSendFromISR+0x6a>
 80173fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d101      	bne.n	8017406 <xQueueGenericSendFromISR+0x6e>
 8017402:	2301      	movs	r3, #1
 8017404:	e000      	b.n	8017408 <xQueueGenericSendFromISR+0x70>
 8017406:	2300      	movs	r3, #0
 8017408:	2b00      	cmp	r3, #0
 801740a:	d10a      	bne.n	8017422 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017410:	f383 8811 	msr	BASEPRI, r3
 8017414:	f3bf 8f6f 	isb	sy
 8017418:	f3bf 8f4f 	dsb	sy
 801741c:	623b      	str	r3, [r7, #32]
}
 801741e:	bf00      	nop
 8017420:	e7fe      	b.n	8017420 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017422:	f002 fac9 	bl	80199b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017426:	f3ef 8211 	mrs	r2, BASEPRI
 801742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801742e:	f383 8811 	msr	BASEPRI, r3
 8017432:	f3bf 8f6f 	isb	sy
 8017436:	f3bf 8f4f 	dsb	sy
 801743a:	61fa      	str	r2, [r7, #28]
 801743c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801743e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017440:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801744a:	429a      	cmp	r2, r3
 801744c:	d302      	bcc.n	8017454 <xQueueGenericSendFromISR+0xbc>
 801744e:	683b      	ldr	r3, [r7, #0]
 8017450:	2b02      	cmp	r3, #2
 8017452:	d12f      	bne.n	80174b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801745a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017462:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017464:	683a      	ldr	r2, [r7, #0]
 8017466:	68b9      	ldr	r1, [r7, #8]
 8017468:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801746a:	f000 fb64 	bl	8017b36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801746e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017476:	d112      	bne.n	801749e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801747c:	2b00      	cmp	r3, #0
 801747e:	d016      	beq.n	80174ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017482:	3324      	adds	r3, #36	; 0x24
 8017484:	4618      	mov	r0, r3
 8017486:	f001 f987 	bl	8018798 <xTaskRemoveFromEventList>
 801748a:	4603      	mov	r3, r0
 801748c:	2b00      	cmp	r3, #0
 801748e:	d00e      	beq.n	80174ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d00b      	beq.n	80174ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	2201      	movs	r2, #1
 801749a:	601a      	str	r2, [r3, #0]
 801749c:	e007      	b.n	80174ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801749e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80174a2:	3301      	adds	r3, #1
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	b25a      	sxtb	r2, r3
 80174a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80174ae:	2301      	movs	r3, #1
 80174b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80174b2:	e001      	b.n	80174b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80174b4:	2300      	movs	r3, #0
 80174b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80174b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80174c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80174c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3740      	adds	r7, #64	; 0x40
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}

080174ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80174ce:	b580      	push	{r7, lr}
 80174d0:	b08e      	sub	sp, #56	; 0x38
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	6078      	str	r0, [r7, #4]
 80174d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80174dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d10a      	bne.n	80174f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80174e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174e6:	f383 8811 	msr	BASEPRI, r3
 80174ea:	f3bf 8f6f 	isb	sy
 80174ee:	f3bf 8f4f 	dsb	sy
 80174f2:	623b      	str	r3, [r7, #32]
}
 80174f4:	bf00      	nop
 80174f6:	e7fe      	b.n	80174f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80174f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d00a      	beq.n	8017516 <xQueueGiveFromISR+0x48>
	__asm volatile
 8017500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017504:	f383 8811 	msr	BASEPRI, r3
 8017508:	f3bf 8f6f 	isb	sy
 801750c:	f3bf 8f4f 	dsb	sy
 8017510:	61fb      	str	r3, [r7, #28]
}
 8017512:	bf00      	nop
 8017514:	e7fe      	b.n	8017514 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d103      	bne.n	8017526 <xQueueGiveFromISR+0x58>
 801751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017520:	689b      	ldr	r3, [r3, #8]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d101      	bne.n	801752a <xQueueGiveFromISR+0x5c>
 8017526:	2301      	movs	r3, #1
 8017528:	e000      	b.n	801752c <xQueueGiveFromISR+0x5e>
 801752a:	2300      	movs	r3, #0
 801752c:	2b00      	cmp	r3, #0
 801752e:	d10a      	bne.n	8017546 <xQueueGiveFromISR+0x78>
	__asm volatile
 8017530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017534:	f383 8811 	msr	BASEPRI, r3
 8017538:	f3bf 8f6f 	isb	sy
 801753c:	f3bf 8f4f 	dsb	sy
 8017540:	61bb      	str	r3, [r7, #24]
}
 8017542:	bf00      	nop
 8017544:	e7fe      	b.n	8017544 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017546:	f002 fa37 	bl	80199b8 <vPortValidateInterruptPriority>
	__asm volatile
 801754a:	f3ef 8211 	mrs	r2, BASEPRI
 801754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017552:	f383 8811 	msr	BASEPRI, r3
 8017556:	f3bf 8f6f 	isb	sy
 801755a:	f3bf 8f4f 	dsb	sy
 801755e:	617a      	str	r2, [r7, #20]
 8017560:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017562:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017564:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801756a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017572:	429a      	cmp	r2, r3
 8017574:	d22b      	bcs.n	80175ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801757c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017582:	1c5a      	adds	r2, r3, #1
 8017584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017586:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017588:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017590:	d112      	bne.n	80175b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017596:	2b00      	cmp	r3, #0
 8017598:	d016      	beq.n	80175c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759c:	3324      	adds	r3, #36	; 0x24
 801759e:	4618      	mov	r0, r3
 80175a0:	f001 f8fa 	bl	8018798 <xTaskRemoveFromEventList>
 80175a4:	4603      	mov	r3, r0
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d00e      	beq.n	80175c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d00b      	beq.n	80175c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	2201      	movs	r2, #1
 80175b4:	601a      	str	r2, [r3, #0]
 80175b6:	e007      	b.n	80175c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80175b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175bc:	3301      	adds	r3, #1
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	b25a      	sxtb	r2, r3
 80175c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80175c8:	2301      	movs	r3, #1
 80175ca:	637b      	str	r3, [r7, #52]	; 0x34
 80175cc:	e001      	b.n	80175d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80175ce:	2300      	movs	r3, #0
 80175d0:	637b      	str	r3, [r7, #52]	; 0x34
 80175d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	f383 8811 	msr	BASEPRI, r3
}
 80175dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80175de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3738      	adds	r7, #56	; 0x38
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}

080175e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b08c      	sub	sp, #48	; 0x30
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	60f8      	str	r0, [r7, #12]
 80175f0:	60b9      	str	r1, [r7, #8]
 80175f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80175f4:	2300      	movs	r3, #0
 80175f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80175fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d10a      	bne.n	8017618 <xQueueReceive+0x30>
	__asm volatile
 8017602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017606:	f383 8811 	msr	BASEPRI, r3
 801760a:	f3bf 8f6f 	isb	sy
 801760e:	f3bf 8f4f 	dsb	sy
 8017612:	623b      	str	r3, [r7, #32]
}
 8017614:	bf00      	nop
 8017616:	e7fe      	b.n	8017616 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017618:	68bb      	ldr	r3, [r7, #8]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d103      	bne.n	8017626 <xQueueReceive+0x3e>
 801761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017622:	2b00      	cmp	r3, #0
 8017624:	d101      	bne.n	801762a <xQueueReceive+0x42>
 8017626:	2301      	movs	r3, #1
 8017628:	e000      	b.n	801762c <xQueueReceive+0x44>
 801762a:	2300      	movs	r3, #0
 801762c:	2b00      	cmp	r3, #0
 801762e:	d10a      	bne.n	8017646 <xQueueReceive+0x5e>
	__asm volatile
 8017630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017634:	f383 8811 	msr	BASEPRI, r3
 8017638:	f3bf 8f6f 	isb	sy
 801763c:	f3bf 8f4f 	dsb	sy
 8017640:	61fb      	str	r3, [r7, #28]
}
 8017642:	bf00      	nop
 8017644:	e7fe      	b.n	8017644 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017646:	f001 fa79 	bl	8018b3c <xTaskGetSchedulerState>
 801764a:	4603      	mov	r3, r0
 801764c:	2b00      	cmp	r3, #0
 801764e:	d102      	bne.n	8017656 <xQueueReceive+0x6e>
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d101      	bne.n	801765a <xQueueReceive+0x72>
 8017656:	2301      	movs	r3, #1
 8017658:	e000      	b.n	801765c <xQueueReceive+0x74>
 801765a:	2300      	movs	r3, #0
 801765c:	2b00      	cmp	r3, #0
 801765e:	d10a      	bne.n	8017676 <xQueueReceive+0x8e>
	__asm volatile
 8017660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017664:	f383 8811 	msr	BASEPRI, r3
 8017668:	f3bf 8f6f 	isb	sy
 801766c:	f3bf 8f4f 	dsb	sy
 8017670:	61bb      	str	r3, [r7, #24]
}
 8017672:	bf00      	nop
 8017674:	e7fe      	b.n	8017674 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017676:	f002 f8bd 	bl	80197f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801767e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017682:	2b00      	cmp	r3, #0
 8017684:	d01f      	beq.n	80176c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017686:	68b9      	ldr	r1, [r7, #8]
 8017688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801768a:	f000 fabe 	bl	8017c0a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017690:	1e5a      	subs	r2, r3, #1
 8017692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017694:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017698:	691b      	ldr	r3, [r3, #16]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d00f      	beq.n	80176be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a0:	3310      	adds	r3, #16
 80176a2:	4618      	mov	r0, r3
 80176a4:	f001 f878 	bl	8018798 <xTaskRemoveFromEventList>
 80176a8:	4603      	mov	r3, r0
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d007      	beq.n	80176be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80176ae:	4b3d      	ldr	r3, [pc, #244]	; (80177a4 <xQueueReceive+0x1bc>)
 80176b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176b4:	601a      	str	r2, [r3, #0]
 80176b6:	f3bf 8f4f 	dsb	sy
 80176ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80176be:	f002 f8c9 	bl	8019854 <vPortExitCritical>
				return pdPASS;
 80176c2:	2301      	movs	r3, #1
 80176c4:	e069      	b.n	801779a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d103      	bne.n	80176d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80176cc:	f002 f8c2 	bl	8019854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80176d0:	2300      	movs	r3, #0
 80176d2:	e062      	b.n	801779a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80176d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d106      	bne.n	80176e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80176da:	f107 0310 	add.w	r3, r7, #16
 80176de:	4618      	mov	r0, r3
 80176e0:	f001 f8be 	bl	8018860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80176e4:	2301      	movs	r3, #1
 80176e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80176e8:	f002 f8b4 	bl	8019854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80176ec:	f000 fe18 	bl	8018320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80176f0:	f002 f880 	bl	80197f4 <vPortEnterCritical>
 80176f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176fa:	b25b      	sxtb	r3, r3
 80176fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017700:	d103      	bne.n	801770a <xQueueReceive+0x122>
 8017702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017704:	2200      	movs	r2, #0
 8017706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801770c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017710:	b25b      	sxtb	r3, r3
 8017712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017716:	d103      	bne.n	8017720 <xQueueReceive+0x138>
 8017718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771a:	2200      	movs	r2, #0
 801771c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017720:	f002 f898 	bl	8019854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017724:	1d3a      	adds	r2, r7, #4
 8017726:	f107 0310 	add.w	r3, r7, #16
 801772a:	4611      	mov	r1, r2
 801772c:	4618      	mov	r0, r3
 801772e:	f001 f8ad 	bl	801888c <xTaskCheckForTimeOut>
 8017732:	4603      	mov	r3, r0
 8017734:	2b00      	cmp	r3, #0
 8017736:	d123      	bne.n	8017780 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801773a:	f000 fade 	bl	8017cfa <prvIsQueueEmpty>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d017      	beq.n	8017774 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017746:	3324      	adds	r3, #36	; 0x24
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	4611      	mov	r1, r2
 801774c:	4618      	mov	r0, r3
 801774e:	f000 ffd3 	bl	80186f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017754:	f000 fa7f 	bl	8017c56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017758:	f000 fdf0 	bl	801833c <xTaskResumeAll>
 801775c:	4603      	mov	r3, r0
 801775e:	2b00      	cmp	r3, #0
 8017760:	d189      	bne.n	8017676 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017762:	4b10      	ldr	r3, [pc, #64]	; (80177a4 <xQueueReceive+0x1bc>)
 8017764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017768:	601a      	str	r2, [r3, #0]
 801776a:	f3bf 8f4f 	dsb	sy
 801776e:	f3bf 8f6f 	isb	sy
 8017772:	e780      	b.n	8017676 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017776:	f000 fa6e 	bl	8017c56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801777a:	f000 fddf 	bl	801833c <xTaskResumeAll>
 801777e:	e77a      	b.n	8017676 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017782:	f000 fa68 	bl	8017c56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017786:	f000 fdd9 	bl	801833c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801778a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801778c:	f000 fab5 	bl	8017cfa <prvIsQueueEmpty>
 8017790:	4603      	mov	r3, r0
 8017792:	2b00      	cmp	r3, #0
 8017794:	f43f af6f 	beq.w	8017676 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801779a:	4618      	mov	r0, r3
 801779c:	3730      	adds	r7, #48	; 0x30
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}
 80177a2:	bf00      	nop
 80177a4:	e000ed04 	.word	0xe000ed04

080177a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b08e      	sub	sp, #56	; 0x38
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
 80177b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80177b2:	2300      	movs	r3, #0
 80177b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80177ba:	2300      	movs	r3, #0
 80177bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80177be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d10a      	bne.n	80177da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80177c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c8:	f383 8811 	msr	BASEPRI, r3
 80177cc:	f3bf 8f6f 	isb	sy
 80177d0:	f3bf 8f4f 	dsb	sy
 80177d4:	623b      	str	r3, [r7, #32]
}
 80177d6:	bf00      	nop
 80177d8:	e7fe      	b.n	80177d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80177da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d00a      	beq.n	80177f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80177e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177e6:	f383 8811 	msr	BASEPRI, r3
 80177ea:	f3bf 8f6f 	isb	sy
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	61fb      	str	r3, [r7, #28]
}
 80177f4:	bf00      	nop
 80177f6:	e7fe      	b.n	80177f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80177f8:	f001 f9a0 	bl	8018b3c <xTaskGetSchedulerState>
 80177fc:	4603      	mov	r3, r0
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d102      	bne.n	8017808 <xQueueSemaphoreTake+0x60>
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d101      	bne.n	801780c <xQueueSemaphoreTake+0x64>
 8017808:	2301      	movs	r3, #1
 801780a:	e000      	b.n	801780e <xQueueSemaphoreTake+0x66>
 801780c:	2300      	movs	r3, #0
 801780e:	2b00      	cmp	r3, #0
 8017810:	d10a      	bne.n	8017828 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8017812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017816:	f383 8811 	msr	BASEPRI, r3
 801781a:	f3bf 8f6f 	isb	sy
 801781e:	f3bf 8f4f 	dsb	sy
 8017822:	61bb      	str	r3, [r7, #24]
}
 8017824:	bf00      	nop
 8017826:	e7fe      	b.n	8017826 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017828:	f001 ffe4 	bl	80197f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017830:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017834:	2b00      	cmp	r3, #0
 8017836:	d024      	beq.n	8017882 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801783a:	1e5a      	subs	r2, r3, #1
 801783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801783e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d104      	bne.n	8017852 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017848:	f001 faee 	bl	8018e28 <pvTaskIncrementMutexHeldCount>
 801784c:	4602      	mov	r2, r0
 801784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017850:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017854:	691b      	ldr	r3, [r3, #16]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d00f      	beq.n	801787a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801785c:	3310      	adds	r3, #16
 801785e:	4618      	mov	r0, r3
 8017860:	f000 ff9a 	bl	8018798 <xTaskRemoveFromEventList>
 8017864:	4603      	mov	r3, r0
 8017866:	2b00      	cmp	r3, #0
 8017868:	d007      	beq.n	801787a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801786a:	4b54      	ldr	r3, [pc, #336]	; (80179bc <xQueueSemaphoreTake+0x214>)
 801786c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017870:	601a      	str	r2, [r3, #0]
 8017872:	f3bf 8f4f 	dsb	sy
 8017876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801787a:	f001 ffeb 	bl	8019854 <vPortExitCritical>
				return pdPASS;
 801787e:	2301      	movs	r3, #1
 8017880:	e097      	b.n	80179b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d111      	bne.n	80178ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801788a:	2b00      	cmp	r3, #0
 801788c:	d00a      	beq.n	80178a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017892:	f383 8811 	msr	BASEPRI, r3
 8017896:	f3bf 8f6f 	isb	sy
 801789a:	f3bf 8f4f 	dsb	sy
 801789e:	617b      	str	r3, [r7, #20]
}
 80178a0:	bf00      	nop
 80178a2:	e7fe      	b.n	80178a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80178a4:	f001 ffd6 	bl	8019854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80178a8:	2300      	movs	r3, #0
 80178aa:	e082      	b.n	80179b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80178ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d106      	bne.n	80178c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80178b2:	f107 030c 	add.w	r3, r7, #12
 80178b6:	4618      	mov	r0, r3
 80178b8:	f000 ffd2 	bl	8018860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80178bc:	2301      	movs	r3, #1
 80178be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80178c0:	f001 ffc8 	bl	8019854 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80178c4:	f000 fd2c 	bl	8018320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80178c8:	f001 ff94 	bl	80197f4 <vPortEnterCritical>
 80178cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80178d2:	b25b      	sxtb	r3, r3
 80178d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178d8:	d103      	bne.n	80178e2 <xQueueSemaphoreTake+0x13a>
 80178da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178dc:	2200      	movs	r2, #0
 80178de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80178e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80178e8:	b25b      	sxtb	r3, r3
 80178ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178ee:	d103      	bne.n	80178f8 <xQueueSemaphoreTake+0x150>
 80178f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178f2:	2200      	movs	r2, #0
 80178f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80178f8:	f001 ffac 	bl	8019854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80178fc:	463a      	mov	r2, r7
 80178fe:	f107 030c 	add.w	r3, r7, #12
 8017902:	4611      	mov	r1, r2
 8017904:	4618      	mov	r0, r3
 8017906:	f000 ffc1 	bl	801888c <xTaskCheckForTimeOut>
 801790a:	4603      	mov	r3, r0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d132      	bne.n	8017976 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017912:	f000 f9f2 	bl	8017cfa <prvIsQueueEmpty>
 8017916:	4603      	mov	r3, r0
 8017918:	2b00      	cmp	r3, #0
 801791a:	d026      	beq.n	801796a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d109      	bne.n	8017938 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8017924:	f001 ff66 	bl	80197f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801792a:	689b      	ldr	r3, [r3, #8]
 801792c:	4618      	mov	r0, r3
 801792e:	f001 f923 	bl	8018b78 <xTaskPriorityInherit>
 8017932:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017934:	f001 ff8e 	bl	8019854 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801793a:	3324      	adds	r3, #36	; 0x24
 801793c:	683a      	ldr	r2, [r7, #0]
 801793e:	4611      	mov	r1, r2
 8017940:	4618      	mov	r0, r3
 8017942:	f000 fed9 	bl	80186f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017948:	f000 f985 	bl	8017c56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801794c:	f000 fcf6 	bl	801833c <xTaskResumeAll>
 8017950:	4603      	mov	r3, r0
 8017952:	2b00      	cmp	r3, #0
 8017954:	f47f af68 	bne.w	8017828 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017958:	4b18      	ldr	r3, [pc, #96]	; (80179bc <xQueueSemaphoreTake+0x214>)
 801795a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801795e:	601a      	str	r2, [r3, #0]
 8017960:	f3bf 8f4f 	dsb	sy
 8017964:	f3bf 8f6f 	isb	sy
 8017968:	e75e      	b.n	8017828 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801796a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801796c:	f000 f973 	bl	8017c56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017970:	f000 fce4 	bl	801833c <xTaskResumeAll>
 8017974:	e758      	b.n	8017828 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017978:	f000 f96d 	bl	8017c56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801797c:	f000 fcde 	bl	801833c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017982:	f000 f9ba 	bl	8017cfa <prvIsQueueEmpty>
 8017986:	4603      	mov	r3, r0
 8017988:	2b00      	cmp	r3, #0
 801798a:	f43f af4d 	beq.w	8017828 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017990:	2b00      	cmp	r3, #0
 8017992:	d00d      	beq.n	80179b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8017994:	f001 ff2e 	bl	80197f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801799a:	f000 f8b4 	bl	8017b06 <prvGetDisinheritPriorityAfterTimeout>
 801799e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80179a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179a2:	689b      	ldr	r3, [r3, #8]
 80179a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80179a6:	4618      	mov	r0, r3
 80179a8:	f001 f9bc 	bl	8018d24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80179ac:	f001 ff52 	bl	8019854 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80179b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	3738      	adds	r7, #56	; 0x38
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	bf00      	nop
 80179bc:	e000ed04 	.word	0xe000ed04

080179c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b08e      	sub	sp, #56	; 0x38
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	60f8      	str	r0, [r7, #12]
 80179c8:	60b9      	str	r1, [r7, #8]
 80179ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80179d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d10a      	bne.n	80179ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80179d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179da:	f383 8811 	msr	BASEPRI, r3
 80179de:	f3bf 8f6f 	isb	sy
 80179e2:	f3bf 8f4f 	dsb	sy
 80179e6:	623b      	str	r3, [r7, #32]
}
 80179e8:	bf00      	nop
 80179ea:	e7fe      	b.n	80179ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d103      	bne.n	80179fa <xQueueReceiveFromISR+0x3a>
 80179f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d101      	bne.n	80179fe <xQueueReceiveFromISR+0x3e>
 80179fa:	2301      	movs	r3, #1
 80179fc:	e000      	b.n	8017a00 <xQueueReceiveFromISR+0x40>
 80179fe:	2300      	movs	r3, #0
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d10a      	bne.n	8017a1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8017a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a08:	f383 8811 	msr	BASEPRI, r3
 8017a0c:	f3bf 8f6f 	isb	sy
 8017a10:	f3bf 8f4f 	dsb	sy
 8017a14:	61fb      	str	r3, [r7, #28]
}
 8017a16:	bf00      	nop
 8017a18:	e7fe      	b.n	8017a18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017a1a:	f001 ffcd 	bl	80199b8 <vPortValidateInterruptPriority>
	__asm volatile
 8017a1e:	f3ef 8211 	mrs	r2, BASEPRI
 8017a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a26:	f383 8811 	msr	BASEPRI, r3
 8017a2a:	f3bf 8f6f 	isb	sy
 8017a2e:	f3bf 8f4f 	dsb	sy
 8017a32:	61ba      	str	r2, [r7, #24]
 8017a34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017a36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017a38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d02f      	beq.n	8017aa6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8017a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017a50:	68b9      	ldr	r1, [r7, #8]
 8017a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a54:	f000 f8d9 	bl	8017c0a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a5a:	1e5a      	subs	r2, r3, #1
 8017a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a68:	d112      	bne.n	8017a90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a6c:	691b      	ldr	r3, [r3, #16]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d016      	beq.n	8017aa0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a74:	3310      	adds	r3, #16
 8017a76:	4618      	mov	r0, r3
 8017a78:	f000 fe8e 	bl	8018798 <xTaskRemoveFromEventList>
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d00e      	beq.n	8017aa0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d00b      	beq.n	8017aa0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	601a      	str	r2, [r3, #0]
 8017a8e:	e007      	b.n	8017aa0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a94:	3301      	adds	r3, #1
 8017a96:	b2db      	uxtb	r3, r3
 8017a98:	b25a      	sxtb	r2, r3
 8017a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8017aa4:	e001      	b.n	8017aaa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8017aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017aae:	693b      	ldr	r3, [r7, #16]
 8017ab0:	f383 8811 	msr	BASEPRI, r3
}
 8017ab4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017ab8:	4618      	mov	r0, r3
 8017aba:	3738      	adds	r7, #56	; 0x38
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}

08017ac0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b084      	sub	sp, #16
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d10a      	bne.n	8017ae8 <vQueueDelete+0x28>
	__asm volatile
 8017ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ad6:	f383 8811 	msr	BASEPRI, r3
 8017ada:	f3bf 8f6f 	isb	sy
 8017ade:	f3bf 8f4f 	dsb	sy
 8017ae2:	60bb      	str	r3, [r7, #8]
}
 8017ae4:	bf00      	nop
 8017ae6:	e7fe      	b.n	8017ae6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017ae8:	68f8      	ldr	r0, [r7, #12]
 8017aea:	f000 f95f 	bl	8017dac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d102      	bne.n	8017afe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8017af8:	68f8      	ldr	r0, [r7, #12]
 8017afa:	f002 f869 	bl	8019bd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017afe:	bf00      	nop
 8017b00:	3710      	adds	r7, #16
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}

08017b06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017b06:	b480      	push	{r7}
 8017b08:	b085      	sub	sp, #20
 8017b0a:	af00      	add	r7, sp, #0
 8017b0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d006      	beq.n	8017b24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017b20:	60fb      	str	r3, [r7, #12]
 8017b22:	e001      	b.n	8017b28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017b24:	2300      	movs	r3, #0
 8017b26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017b28:	68fb      	ldr	r3, [r7, #12]
	}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3714      	adds	r7, #20
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b34:	4770      	bx	lr

08017b36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017b36:	b580      	push	{r7, lr}
 8017b38:	b086      	sub	sp, #24
 8017b3a:	af00      	add	r7, sp, #0
 8017b3c:	60f8      	str	r0, [r7, #12]
 8017b3e:	60b9      	str	r1, [r7, #8]
 8017b40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017b42:	2300      	movs	r3, #0
 8017b44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d10d      	bne.n	8017b70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d14d      	bne.n	8017bf8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	689b      	ldr	r3, [r3, #8]
 8017b60:	4618      	mov	r0, r3
 8017b62:	f001 f871 	bl	8018c48 <xTaskPriorityDisinherit>
 8017b66:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	609a      	str	r2, [r3, #8]
 8017b6e:	e043      	b.n	8017bf8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d119      	bne.n	8017baa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	6858      	ldr	r0, [r3, #4]
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b7e:	461a      	mov	r2, r3
 8017b80:	68b9      	ldr	r1, [r7, #8]
 8017b82:	f00f fb73 	bl	802726c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	685a      	ldr	r2, [r3, #4]
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b8e:	441a      	add	r2, r3
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	685a      	ldr	r2, [r3, #4]
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	689b      	ldr	r3, [r3, #8]
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d32b      	bcc.n	8017bf8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	681a      	ldr	r2, [r3, #0]
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	605a      	str	r2, [r3, #4]
 8017ba8:	e026      	b.n	8017bf8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	68d8      	ldr	r0, [r3, #12]
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	68b9      	ldr	r1, [r7, #8]
 8017bb6:	f00f fb59 	bl	802726c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	68da      	ldr	r2, [r3, #12]
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bc2:	425b      	negs	r3, r3
 8017bc4:	441a      	add	r2, r3
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	68da      	ldr	r2, [r3, #12]
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d207      	bcs.n	8017be6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	689a      	ldr	r2, [r3, #8]
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bde:	425b      	negs	r3, r3
 8017be0:	441a      	add	r2, r3
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	2b02      	cmp	r3, #2
 8017bea:	d105      	bne.n	8017bf8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017bec:	693b      	ldr	r3, [r7, #16]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d002      	beq.n	8017bf8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	3b01      	subs	r3, #1
 8017bf6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	1c5a      	adds	r2, r3, #1
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017c00:	697b      	ldr	r3, [r7, #20]
}
 8017c02:	4618      	mov	r0, r3
 8017c04:	3718      	adds	r7, #24
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}

08017c0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017c0a:	b580      	push	{r7, lr}
 8017c0c:	b082      	sub	sp, #8
 8017c0e:	af00      	add	r7, sp, #0
 8017c10:	6078      	str	r0, [r7, #4]
 8017c12:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d018      	beq.n	8017c4e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	68da      	ldr	r2, [r3, #12]
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c24:	441a      	add	r2, r3
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	68da      	ldr	r2, [r3, #12]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	689b      	ldr	r3, [r3, #8]
 8017c32:	429a      	cmp	r2, r3
 8017c34:	d303      	bcc.n	8017c3e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	68d9      	ldr	r1, [r3, #12]
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c46:	461a      	mov	r2, r3
 8017c48:	6838      	ldr	r0, [r7, #0]
 8017c4a:	f00f fb0f 	bl	802726c <memcpy>
	}
}
 8017c4e:	bf00      	nop
 8017c50:	3708      	adds	r7, #8
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}

08017c56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017c56:	b580      	push	{r7, lr}
 8017c58:	b084      	sub	sp, #16
 8017c5a:	af00      	add	r7, sp, #0
 8017c5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017c5e:	f001 fdc9 	bl	80197f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c6a:	e011      	b.n	8017c90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d012      	beq.n	8017c9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	3324      	adds	r3, #36	; 0x24
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f000 fd8d 	bl	8018798 <xTaskRemoveFromEventList>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d001      	beq.n	8017c88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017c84:	f000 fe64 	bl	8018950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017c88:	7bfb      	ldrb	r3, [r7, #15]
 8017c8a:	3b01      	subs	r3, #1
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	dce9      	bgt.n	8017c6c <prvUnlockQueue+0x16>
 8017c98:	e000      	b.n	8017c9c <prvUnlockQueue+0x46>
					break;
 8017c9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	22ff      	movs	r2, #255	; 0xff
 8017ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017ca4:	f001 fdd6 	bl	8019854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017ca8:	f001 fda4 	bl	80197f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017cb2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017cb4:	e011      	b.n	8017cda <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	691b      	ldr	r3, [r3, #16]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d012      	beq.n	8017ce4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	3310      	adds	r3, #16
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f000 fd68 	bl	8018798 <xTaskRemoveFromEventList>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d001      	beq.n	8017cd2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017cce:	f000 fe3f 	bl	8018950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017cd2:	7bbb      	ldrb	r3, [r7, #14]
 8017cd4:	3b01      	subs	r3, #1
 8017cd6:	b2db      	uxtb	r3, r3
 8017cd8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017cda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	dce9      	bgt.n	8017cb6 <prvUnlockQueue+0x60>
 8017ce2:	e000      	b.n	8017ce6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017ce4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	22ff      	movs	r2, #255	; 0xff
 8017cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017cee:	f001 fdb1 	bl	8019854 <vPortExitCritical>
}
 8017cf2:	bf00      	nop
 8017cf4:	3710      	adds	r7, #16
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}

08017cfa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017cfa:	b580      	push	{r7, lr}
 8017cfc:	b084      	sub	sp, #16
 8017cfe:	af00      	add	r7, sp, #0
 8017d00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d02:	f001 fd77 	bl	80197f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d102      	bne.n	8017d14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017d0e:	2301      	movs	r3, #1
 8017d10:	60fb      	str	r3, [r7, #12]
 8017d12:	e001      	b.n	8017d18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017d14:	2300      	movs	r3, #0
 8017d16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d18:	f001 fd9c 	bl	8019854 <vPortExitCritical>

	return xReturn;
 8017d1c:	68fb      	ldr	r3, [r7, #12]
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3710      	adds	r7, #16
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}

08017d26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017d26:	b580      	push	{r7, lr}
 8017d28:	b084      	sub	sp, #16
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017d2e:	f001 fd61 	bl	80197f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d102      	bne.n	8017d44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017d3e:	2301      	movs	r3, #1
 8017d40:	60fb      	str	r3, [r7, #12]
 8017d42:	e001      	b.n	8017d48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017d44:	2300      	movs	r3, #0
 8017d46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017d48:	f001 fd84 	bl	8019854 <vPortExitCritical>

	return xReturn;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
	...

08017d58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017d58:	b480      	push	{r7}
 8017d5a:	b085      	sub	sp, #20
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d62:	2300      	movs	r3, #0
 8017d64:	60fb      	str	r3, [r7, #12]
 8017d66:	e014      	b.n	8017d92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017d68:	4a0f      	ldr	r2, [pc, #60]	; (8017da8 <vQueueAddToRegistry+0x50>)
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10b      	bne.n	8017d8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017d74:	490c      	ldr	r1, [pc, #48]	; (8017da8 <vQueueAddToRegistry+0x50>)
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	683a      	ldr	r2, [r7, #0]
 8017d7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017d7e:	4a0a      	ldr	r2, [pc, #40]	; (8017da8 <vQueueAddToRegistry+0x50>)
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	00db      	lsls	r3, r3, #3
 8017d84:	4413      	add	r3, r2
 8017d86:	687a      	ldr	r2, [r7, #4]
 8017d88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017d8a:	e006      	b.n	8017d9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	3301      	adds	r3, #1
 8017d90:	60fb      	str	r3, [r7, #12]
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	2b07      	cmp	r3, #7
 8017d96:	d9e7      	bls.n	8017d68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017d98:	bf00      	nop
 8017d9a:	bf00      	nop
 8017d9c:	3714      	adds	r7, #20
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da4:	4770      	bx	lr
 8017da6:	bf00      	nop
 8017da8:	24005b94 	.word	0x24005b94

08017dac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017dac:	b480      	push	{r7}
 8017dae:	b085      	sub	sp, #20
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017db4:	2300      	movs	r3, #0
 8017db6:	60fb      	str	r3, [r7, #12]
 8017db8:	e016      	b.n	8017de8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017dba:	4a10      	ldr	r2, [pc, #64]	; (8017dfc <vQueueUnregisterQueue+0x50>)
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	00db      	lsls	r3, r3, #3
 8017dc0:	4413      	add	r3, r2
 8017dc2:	685b      	ldr	r3, [r3, #4]
 8017dc4:	687a      	ldr	r2, [r7, #4]
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d10b      	bne.n	8017de2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017dca:	4a0c      	ldr	r2, [pc, #48]	; (8017dfc <vQueueUnregisterQueue+0x50>)
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	2100      	movs	r1, #0
 8017dd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017dd4:	4a09      	ldr	r2, [pc, #36]	; (8017dfc <vQueueUnregisterQueue+0x50>)
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	00db      	lsls	r3, r3, #3
 8017dda:	4413      	add	r3, r2
 8017ddc:	2200      	movs	r2, #0
 8017dde:	605a      	str	r2, [r3, #4]
				break;
 8017de0:	e006      	b.n	8017df0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	3301      	adds	r3, #1
 8017de6:	60fb      	str	r3, [r7, #12]
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	2b07      	cmp	r3, #7
 8017dec:	d9e5      	bls.n	8017dba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017dee:	bf00      	nop
 8017df0:	bf00      	nop
 8017df2:	3714      	adds	r7, #20
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr
 8017dfc:	24005b94 	.word	0x24005b94

08017e00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b086      	sub	sp, #24
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	60f8      	str	r0, [r7, #12]
 8017e08:	60b9      	str	r1, [r7, #8]
 8017e0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017e10:	f001 fcf0 	bl	80197f4 <vPortEnterCritical>
 8017e14:	697b      	ldr	r3, [r7, #20]
 8017e16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017e1a:	b25b      	sxtb	r3, r3
 8017e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e20:	d103      	bne.n	8017e2a <vQueueWaitForMessageRestricted+0x2a>
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	2200      	movs	r2, #0
 8017e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017e30:	b25b      	sxtb	r3, r3
 8017e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e36:	d103      	bne.n	8017e40 <vQueueWaitForMessageRestricted+0x40>
 8017e38:	697b      	ldr	r3, [r7, #20]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017e40:	f001 fd08 	bl	8019854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017e44:	697b      	ldr	r3, [r7, #20]
 8017e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d106      	bne.n	8017e5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	3324      	adds	r3, #36	; 0x24
 8017e50:	687a      	ldr	r2, [r7, #4]
 8017e52:	68b9      	ldr	r1, [r7, #8]
 8017e54:	4618      	mov	r0, r3
 8017e56:	f000 fc73 	bl	8018740 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017e5a:	6978      	ldr	r0, [r7, #20]
 8017e5c:	f7ff fefb 	bl	8017c56 <prvUnlockQueue>
	}
 8017e60:	bf00      	nop
 8017e62:	3718      	adds	r7, #24
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}

08017e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b08e      	sub	sp, #56	; 0x38
 8017e6c:	af04      	add	r7, sp, #16
 8017e6e:	60f8      	str	r0, [r7, #12]
 8017e70:	60b9      	str	r1, [r7, #8]
 8017e72:	607a      	str	r2, [r7, #4]
 8017e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d10a      	bne.n	8017e92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8017e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e80:	f383 8811 	msr	BASEPRI, r3
 8017e84:	f3bf 8f6f 	isb	sy
 8017e88:	f3bf 8f4f 	dsb	sy
 8017e8c:	623b      	str	r3, [r7, #32]
}
 8017e8e:	bf00      	nop
 8017e90:	e7fe      	b.n	8017e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d10a      	bne.n	8017eae <xTaskCreateStatic+0x46>
	__asm volatile
 8017e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e9c:	f383 8811 	msr	BASEPRI, r3
 8017ea0:	f3bf 8f6f 	isb	sy
 8017ea4:	f3bf 8f4f 	dsb	sy
 8017ea8:	61fb      	str	r3, [r7, #28]
}
 8017eaa:	bf00      	nop
 8017eac:	e7fe      	b.n	8017eac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017eae:	23bc      	movs	r3, #188	; 0xbc
 8017eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017eb2:	693b      	ldr	r3, [r7, #16]
 8017eb4:	2bbc      	cmp	r3, #188	; 0xbc
 8017eb6:	d00a      	beq.n	8017ece <xTaskCreateStatic+0x66>
	__asm volatile
 8017eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ebc:	f383 8811 	msr	BASEPRI, r3
 8017ec0:	f3bf 8f6f 	isb	sy
 8017ec4:	f3bf 8f4f 	dsb	sy
 8017ec8:	61bb      	str	r3, [r7, #24]
}
 8017eca:	bf00      	nop
 8017ecc:	e7fe      	b.n	8017ecc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d01e      	beq.n	8017f14 <xTaskCreateStatic+0xac>
 8017ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d01b      	beq.n	8017f14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee8:	2202      	movs	r2, #2
 8017eea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017eee:	2300      	movs	r3, #0
 8017ef0:	9303      	str	r3, [sp, #12]
 8017ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef4:	9302      	str	r3, [sp, #8]
 8017ef6:	f107 0314 	add.w	r3, r7, #20
 8017efa:	9301      	str	r3, [sp, #4]
 8017efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efe:	9300      	str	r3, [sp, #0]
 8017f00:	683b      	ldr	r3, [r7, #0]
 8017f02:	687a      	ldr	r2, [r7, #4]
 8017f04:	68b9      	ldr	r1, [r7, #8]
 8017f06:	68f8      	ldr	r0, [r7, #12]
 8017f08:	f000 f850 	bl	8017fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f0e:	f000 f8f3 	bl	80180f8 <prvAddNewTaskToReadyList>
 8017f12:	e001      	b.n	8017f18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017f14:	2300      	movs	r3, #0
 8017f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017f18:	697b      	ldr	r3, [r7, #20]
	}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3728      	adds	r7, #40	; 0x28
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}

08017f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017f22:	b580      	push	{r7, lr}
 8017f24:	b08c      	sub	sp, #48	; 0x30
 8017f26:	af04      	add	r7, sp, #16
 8017f28:	60f8      	str	r0, [r7, #12]
 8017f2a:	60b9      	str	r1, [r7, #8]
 8017f2c:	603b      	str	r3, [r7, #0]
 8017f2e:	4613      	mov	r3, r2
 8017f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017f32:	88fb      	ldrh	r3, [r7, #6]
 8017f34:	009b      	lsls	r3, r3, #2
 8017f36:	4618      	mov	r0, r3
 8017f38:	f001 fd7e 	bl	8019a38 <pvPortMalloc>
 8017f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d00e      	beq.n	8017f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017f44:	20bc      	movs	r0, #188	; 0xbc
 8017f46:	f001 fd77 	bl	8019a38 <pvPortMalloc>
 8017f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017f4c:	69fb      	ldr	r3, [r7, #28]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d003      	beq.n	8017f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017f52:	69fb      	ldr	r3, [r7, #28]
 8017f54:	697a      	ldr	r2, [r7, #20]
 8017f56:	631a      	str	r2, [r3, #48]	; 0x30
 8017f58:	e005      	b.n	8017f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017f5a:	6978      	ldr	r0, [r7, #20]
 8017f5c:	f001 fe38 	bl	8019bd0 <vPortFree>
 8017f60:	e001      	b.n	8017f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017f62:	2300      	movs	r3, #0
 8017f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017f66:	69fb      	ldr	r3, [r7, #28]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d017      	beq.n	8017f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	2200      	movs	r2, #0
 8017f70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017f74:	88fa      	ldrh	r2, [r7, #6]
 8017f76:	2300      	movs	r3, #0
 8017f78:	9303      	str	r3, [sp, #12]
 8017f7a:	69fb      	ldr	r3, [r7, #28]
 8017f7c:	9302      	str	r3, [sp, #8]
 8017f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f80:	9301      	str	r3, [sp, #4]
 8017f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f84:	9300      	str	r3, [sp, #0]
 8017f86:	683b      	ldr	r3, [r7, #0]
 8017f88:	68b9      	ldr	r1, [r7, #8]
 8017f8a:	68f8      	ldr	r0, [r7, #12]
 8017f8c:	f000 f80e 	bl	8017fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f90:	69f8      	ldr	r0, [r7, #28]
 8017f92:	f000 f8b1 	bl	80180f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017f96:	2301      	movs	r3, #1
 8017f98:	61bb      	str	r3, [r7, #24]
 8017f9a:	e002      	b.n	8017fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	3720      	adds	r7, #32
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}

08017fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b088      	sub	sp, #32
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	60f8      	str	r0, [r7, #12]
 8017fb4:	60b9      	str	r1, [r7, #8]
 8017fb6:	607a      	str	r2, [r7, #4]
 8017fb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	009b      	lsls	r3, r3, #2
 8017fc2:	461a      	mov	r2, r3
 8017fc4:	21a5      	movs	r1, #165	; 0xa5
 8017fc6:	f00f f979 	bl	80272bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017fce:	6879      	ldr	r1, [r7, #4]
 8017fd0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017fd4:	440b      	add	r3, r1
 8017fd6:	009b      	lsls	r3, r3, #2
 8017fd8:	4413      	add	r3, r2
 8017fda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017fdc:	69bb      	ldr	r3, [r7, #24]
 8017fde:	f023 0307 	bic.w	r3, r3, #7
 8017fe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017fe4:	69bb      	ldr	r3, [r7, #24]
 8017fe6:	f003 0307 	and.w	r3, r3, #7
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d00a      	beq.n	8018004 <prvInitialiseNewTask+0x58>
	__asm volatile
 8017fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ff2:	f383 8811 	msr	BASEPRI, r3
 8017ff6:	f3bf 8f6f 	isb	sy
 8017ffa:	f3bf 8f4f 	dsb	sy
 8017ffe:	617b      	str	r3, [r7, #20]
}
 8018000:	bf00      	nop
 8018002:	e7fe      	b.n	8018002 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d01f      	beq.n	801804a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801800a:	2300      	movs	r3, #0
 801800c:	61fb      	str	r3, [r7, #28]
 801800e:	e012      	b.n	8018036 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018010:	68ba      	ldr	r2, [r7, #8]
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	4413      	add	r3, r2
 8018016:	7819      	ldrb	r1, [r3, #0]
 8018018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801801a:	69fb      	ldr	r3, [r7, #28]
 801801c:	4413      	add	r3, r2
 801801e:	3334      	adds	r3, #52	; 0x34
 8018020:	460a      	mov	r2, r1
 8018022:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018024:	68ba      	ldr	r2, [r7, #8]
 8018026:	69fb      	ldr	r3, [r7, #28]
 8018028:	4413      	add	r3, r2
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d006      	beq.n	801803e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018030:	69fb      	ldr	r3, [r7, #28]
 8018032:	3301      	adds	r3, #1
 8018034:	61fb      	str	r3, [r7, #28]
 8018036:	69fb      	ldr	r3, [r7, #28]
 8018038:	2b0f      	cmp	r3, #15
 801803a:	d9e9      	bls.n	8018010 <prvInitialiseNewTask+0x64>
 801803c:	e000      	b.n	8018040 <prvInitialiseNewTask+0x94>
			{
				break;
 801803e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018042:	2200      	movs	r2, #0
 8018044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018048:	e003      	b.n	8018052 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804c:	2200      	movs	r2, #0
 801804e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018054:	2b37      	cmp	r3, #55	; 0x37
 8018056:	d901      	bls.n	801805c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018058:	2337      	movs	r3, #55	; 0x37
 801805a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801805c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018060:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018066:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806a:	2200      	movs	r2, #0
 801806c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018070:	3304      	adds	r3, #4
 8018072:	4618      	mov	r0, r3
 8018074:	f7fe fda0 	bl	8016bb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807a:	3318      	adds	r3, #24
 801807c:	4618      	mov	r0, r3
 801807e:	f7fe fd9b 	bl	8016bb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801808a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018096:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801809a:	2200      	movs	r2, #0
 801809c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80180a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180a2:	2200      	movs	r2, #0
 80180a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80180a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180aa:	3354      	adds	r3, #84	; 0x54
 80180ac:	2260      	movs	r2, #96	; 0x60
 80180ae:	2100      	movs	r1, #0
 80180b0:	4618      	mov	r0, r3
 80180b2:	f00f f903 	bl	80272bc <memset>
 80180b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180b8:	4a0c      	ldr	r2, [pc, #48]	; (80180ec <prvInitialiseNewTask+0x140>)
 80180ba:	659a      	str	r2, [r3, #88]	; 0x58
 80180bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180be:	4a0c      	ldr	r2, [pc, #48]	; (80180f0 <prvInitialiseNewTask+0x144>)
 80180c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80180c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180c4:	4a0b      	ldr	r2, [pc, #44]	; (80180f4 <prvInitialiseNewTask+0x148>)
 80180c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80180c8:	683a      	ldr	r2, [r7, #0]
 80180ca:	68f9      	ldr	r1, [r7, #12]
 80180cc:	69b8      	ldr	r0, [r7, #24]
 80180ce:	f001 fa61 	bl	8019594 <pxPortInitialiseStack>
 80180d2:	4602      	mov	r2, r0
 80180d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80180d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d002      	beq.n	80180e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80180de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180e4:	bf00      	nop
 80180e6:	3720      	adds	r7, #32
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	0802bb84 	.word	0x0802bb84
 80180f0:	0802bba4 	.word	0x0802bba4
 80180f4:	0802bb64 	.word	0x0802bb64

080180f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018100:	f001 fb78 	bl	80197f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018104:	4b2d      	ldr	r3, [pc, #180]	; (80181bc <prvAddNewTaskToReadyList+0xc4>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	3301      	adds	r3, #1
 801810a:	4a2c      	ldr	r2, [pc, #176]	; (80181bc <prvAddNewTaskToReadyList+0xc4>)
 801810c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801810e:	4b2c      	ldr	r3, [pc, #176]	; (80181c0 <prvAddNewTaskToReadyList+0xc8>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d109      	bne.n	801812a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018116:	4a2a      	ldr	r2, [pc, #168]	; (80181c0 <prvAddNewTaskToReadyList+0xc8>)
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801811c:	4b27      	ldr	r3, [pc, #156]	; (80181bc <prvAddNewTaskToReadyList+0xc4>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	2b01      	cmp	r3, #1
 8018122:	d110      	bne.n	8018146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018124:	f000 fc38 	bl	8018998 <prvInitialiseTaskLists>
 8018128:	e00d      	b.n	8018146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801812a:	4b26      	ldr	r3, [pc, #152]	; (80181c4 <prvAddNewTaskToReadyList+0xcc>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d109      	bne.n	8018146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018132:	4b23      	ldr	r3, [pc, #140]	; (80181c0 <prvAddNewTaskToReadyList+0xc8>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801813c:	429a      	cmp	r2, r3
 801813e:	d802      	bhi.n	8018146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018140:	4a1f      	ldr	r2, [pc, #124]	; (80181c0 <prvAddNewTaskToReadyList+0xc8>)
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018146:	4b20      	ldr	r3, [pc, #128]	; (80181c8 <prvAddNewTaskToReadyList+0xd0>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	3301      	adds	r3, #1
 801814c:	4a1e      	ldr	r2, [pc, #120]	; (80181c8 <prvAddNewTaskToReadyList+0xd0>)
 801814e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018150:	4b1d      	ldr	r3, [pc, #116]	; (80181c8 <prvAddNewTaskToReadyList+0xd0>)
 8018152:	681a      	ldr	r2, [r3, #0]
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801815c:	4b1b      	ldr	r3, [pc, #108]	; (80181cc <prvAddNewTaskToReadyList+0xd4>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	429a      	cmp	r2, r3
 8018162:	d903      	bls.n	801816c <prvAddNewTaskToReadyList+0x74>
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018168:	4a18      	ldr	r2, [pc, #96]	; (80181cc <prvAddNewTaskToReadyList+0xd4>)
 801816a:	6013      	str	r3, [r2, #0]
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018170:	4613      	mov	r3, r2
 8018172:	009b      	lsls	r3, r3, #2
 8018174:	4413      	add	r3, r2
 8018176:	009b      	lsls	r3, r3, #2
 8018178:	4a15      	ldr	r2, [pc, #84]	; (80181d0 <prvAddNewTaskToReadyList+0xd8>)
 801817a:	441a      	add	r2, r3
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	3304      	adds	r3, #4
 8018180:	4619      	mov	r1, r3
 8018182:	4610      	mov	r0, r2
 8018184:	f7fe fd25 	bl	8016bd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018188:	f001 fb64 	bl	8019854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801818c:	4b0d      	ldr	r3, [pc, #52]	; (80181c4 <prvAddNewTaskToReadyList+0xcc>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d00e      	beq.n	80181b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018194:	4b0a      	ldr	r3, [pc, #40]	; (80181c0 <prvAddNewTaskToReadyList+0xc8>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801819e:	429a      	cmp	r2, r3
 80181a0:	d207      	bcs.n	80181b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80181a2:	4b0c      	ldr	r3, [pc, #48]	; (80181d4 <prvAddNewTaskToReadyList+0xdc>)
 80181a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181a8:	601a      	str	r2, [r3, #0]
 80181aa:	f3bf 8f4f 	dsb	sy
 80181ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80181b2:	bf00      	nop
 80181b4:	3708      	adds	r7, #8
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd80      	pop	{r7, pc}
 80181ba:	bf00      	nop
 80181bc:	240060a8 	.word	0x240060a8
 80181c0:	24005bd4 	.word	0x24005bd4
 80181c4:	240060b4 	.word	0x240060b4
 80181c8:	240060c4 	.word	0x240060c4
 80181cc:	240060b0 	.word	0x240060b0
 80181d0:	24005bd8 	.word	0x24005bd8
 80181d4:	e000ed04 	.word	0xe000ed04

080181d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b084      	sub	sp, #16
 80181dc:	af00      	add	r7, sp, #0
 80181de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80181e0:	2300      	movs	r3, #0
 80181e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d017      	beq.n	801821a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80181ea:	4b13      	ldr	r3, [pc, #76]	; (8018238 <vTaskDelay+0x60>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d00a      	beq.n	8018208 <vTaskDelay+0x30>
	__asm volatile
 80181f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f6:	f383 8811 	msr	BASEPRI, r3
 80181fa:	f3bf 8f6f 	isb	sy
 80181fe:	f3bf 8f4f 	dsb	sy
 8018202:	60bb      	str	r3, [r7, #8]
}
 8018204:	bf00      	nop
 8018206:	e7fe      	b.n	8018206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018208:	f000 f88a 	bl	8018320 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801820c:	2100      	movs	r1, #0
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	f000 fe1e 	bl	8018e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018214:	f000 f892 	bl	801833c <xTaskResumeAll>
 8018218:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d107      	bne.n	8018230 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018220:	4b06      	ldr	r3, [pc, #24]	; (801823c <vTaskDelay+0x64>)
 8018222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018226:	601a      	str	r2, [r3, #0]
 8018228:	f3bf 8f4f 	dsb	sy
 801822c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018230:	bf00      	nop
 8018232:	3710      	adds	r7, #16
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}
 8018238:	240060d0 	.word	0x240060d0
 801823c:	e000ed04 	.word	0xe000ed04

08018240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b08a      	sub	sp, #40	; 0x28
 8018244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018246:	2300      	movs	r3, #0
 8018248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801824a:	2300      	movs	r3, #0
 801824c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801824e:	463a      	mov	r2, r7
 8018250:	1d39      	adds	r1, r7, #4
 8018252:	f107 0308 	add.w	r3, r7, #8
 8018256:	4618      	mov	r0, r3
 8018258:	f7fe fc5a 	bl	8016b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801825c:	6839      	ldr	r1, [r7, #0]
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	68ba      	ldr	r2, [r7, #8]
 8018262:	9202      	str	r2, [sp, #8]
 8018264:	9301      	str	r3, [sp, #4]
 8018266:	2300      	movs	r3, #0
 8018268:	9300      	str	r3, [sp, #0]
 801826a:	2300      	movs	r3, #0
 801826c:	460a      	mov	r2, r1
 801826e:	4924      	ldr	r1, [pc, #144]	; (8018300 <vTaskStartScheduler+0xc0>)
 8018270:	4824      	ldr	r0, [pc, #144]	; (8018304 <vTaskStartScheduler+0xc4>)
 8018272:	f7ff fdf9 	bl	8017e68 <xTaskCreateStatic>
 8018276:	4603      	mov	r3, r0
 8018278:	4a23      	ldr	r2, [pc, #140]	; (8018308 <vTaskStartScheduler+0xc8>)
 801827a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801827c:	4b22      	ldr	r3, [pc, #136]	; (8018308 <vTaskStartScheduler+0xc8>)
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d002      	beq.n	801828a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018284:	2301      	movs	r3, #1
 8018286:	617b      	str	r3, [r7, #20]
 8018288:	e001      	b.n	801828e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801828a:	2300      	movs	r3, #0
 801828c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801828e:	697b      	ldr	r3, [r7, #20]
 8018290:	2b01      	cmp	r3, #1
 8018292:	d102      	bne.n	801829a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018294:	f000 fe30 	bl	8018ef8 <xTimerCreateTimerTask>
 8018298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	2b01      	cmp	r3, #1
 801829e:	d11b      	bne.n	80182d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80182a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182a4:	f383 8811 	msr	BASEPRI, r3
 80182a8:	f3bf 8f6f 	isb	sy
 80182ac:	f3bf 8f4f 	dsb	sy
 80182b0:	613b      	str	r3, [r7, #16]
}
 80182b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80182b4:	4b15      	ldr	r3, [pc, #84]	; (801830c <vTaskStartScheduler+0xcc>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	3354      	adds	r3, #84	; 0x54
 80182ba:	4a15      	ldr	r2, [pc, #84]	; (8018310 <vTaskStartScheduler+0xd0>)
 80182bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80182be:	4b15      	ldr	r3, [pc, #84]	; (8018314 <vTaskStartScheduler+0xd4>)
 80182c0:	f04f 32ff 	mov.w	r2, #4294967295
 80182c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80182c6:	4b14      	ldr	r3, [pc, #80]	; (8018318 <vTaskStartScheduler+0xd8>)
 80182c8:	2201      	movs	r2, #1
 80182ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80182cc:	4b13      	ldr	r3, [pc, #76]	; (801831c <vTaskStartScheduler+0xdc>)
 80182ce:	2200      	movs	r2, #0
 80182d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80182d2:	f001 f9ed 	bl	80196b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80182d6:	e00e      	b.n	80182f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80182d8:	697b      	ldr	r3, [r7, #20]
 80182da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182de:	d10a      	bne.n	80182f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80182e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182e4:	f383 8811 	msr	BASEPRI, r3
 80182e8:	f3bf 8f6f 	isb	sy
 80182ec:	f3bf 8f4f 	dsb	sy
 80182f0:	60fb      	str	r3, [r7, #12]
}
 80182f2:	bf00      	nop
 80182f4:	e7fe      	b.n	80182f4 <vTaskStartScheduler+0xb4>
}
 80182f6:	bf00      	nop
 80182f8:	3718      	adds	r7, #24
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}
 80182fe:	bf00      	nop
 8018300:	08028474 	.word	0x08028474
 8018304:	08018969 	.word	0x08018969
 8018308:	240060cc 	.word	0x240060cc
 801830c:	24005bd4 	.word	0x24005bd4
 8018310:	240004cc 	.word	0x240004cc
 8018314:	240060c8 	.word	0x240060c8
 8018318:	240060b4 	.word	0x240060b4
 801831c:	240060ac 	.word	0x240060ac

08018320 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018320:	b480      	push	{r7}
 8018322:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018324:	4b04      	ldr	r3, [pc, #16]	; (8018338 <vTaskSuspendAll+0x18>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	3301      	adds	r3, #1
 801832a:	4a03      	ldr	r2, [pc, #12]	; (8018338 <vTaskSuspendAll+0x18>)
 801832c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801832e:	bf00      	nop
 8018330:	46bd      	mov	sp, r7
 8018332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018336:	4770      	bx	lr
 8018338:	240060d0 	.word	0x240060d0

0801833c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018342:	2300      	movs	r3, #0
 8018344:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018346:	2300      	movs	r3, #0
 8018348:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801834a:	4b42      	ldr	r3, [pc, #264]	; (8018454 <xTaskResumeAll+0x118>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d10a      	bne.n	8018368 <xTaskResumeAll+0x2c>
	__asm volatile
 8018352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018356:	f383 8811 	msr	BASEPRI, r3
 801835a:	f3bf 8f6f 	isb	sy
 801835e:	f3bf 8f4f 	dsb	sy
 8018362:	603b      	str	r3, [r7, #0]
}
 8018364:	bf00      	nop
 8018366:	e7fe      	b.n	8018366 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018368:	f001 fa44 	bl	80197f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801836c:	4b39      	ldr	r3, [pc, #228]	; (8018454 <xTaskResumeAll+0x118>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	3b01      	subs	r3, #1
 8018372:	4a38      	ldr	r2, [pc, #224]	; (8018454 <xTaskResumeAll+0x118>)
 8018374:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018376:	4b37      	ldr	r3, [pc, #220]	; (8018454 <xTaskResumeAll+0x118>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d162      	bne.n	8018444 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801837e:	4b36      	ldr	r3, [pc, #216]	; (8018458 <xTaskResumeAll+0x11c>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d05e      	beq.n	8018444 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018386:	e02f      	b.n	80183e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018388:	4b34      	ldr	r3, [pc, #208]	; (801845c <xTaskResumeAll+0x120>)
 801838a:	68db      	ldr	r3, [r3, #12]
 801838c:	68db      	ldr	r3, [r3, #12]
 801838e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	3318      	adds	r3, #24
 8018394:	4618      	mov	r0, r3
 8018396:	f7fe fc79 	bl	8016c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	3304      	adds	r3, #4
 801839e:	4618      	mov	r0, r3
 80183a0:	f7fe fc74 	bl	8016c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183a8:	4b2d      	ldr	r3, [pc, #180]	; (8018460 <xTaskResumeAll+0x124>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d903      	bls.n	80183b8 <xTaskResumeAll+0x7c>
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183b4:	4a2a      	ldr	r2, [pc, #168]	; (8018460 <xTaskResumeAll+0x124>)
 80183b6:	6013      	str	r3, [r2, #0]
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183bc:	4613      	mov	r3, r2
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	4413      	add	r3, r2
 80183c2:	009b      	lsls	r3, r3, #2
 80183c4:	4a27      	ldr	r2, [pc, #156]	; (8018464 <xTaskResumeAll+0x128>)
 80183c6:	441a      	add	r2, r3
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	3304      	adds	r3, #4
 80183cc:	4619      	mov	r1, r3
 80183ce:	4610      	mov	r0, r2
 80183d0:	f7fe fbff 	bl	8016bd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183d8:	4b23      	ldr	r3, [pc, #140]	; (8018468 <xTaskResumeAll+0x12c>)
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183de:	429a      	cmp	r2, r3
 80183e0:	d302      	bcc.n	80183e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80183e2:	4b22      	ldr	r3, [pc, #136]	; (801846c <xTaskResumeAll+0x130>)
 80183e4:	2201      	movs	r2, #1
 80183e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80183e8:	4b1c      	ldr	r3, [pc, #112]	; (801845c <xTaskResumeAll+0x120>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d1cb      	bne.n	8018388 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d001      	beq.n	80183fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80183f6:	f000 fb71 	bl	8018adc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80183fa:	4b1d      	ldr	r3, [pc, #116]	; (8018470 <xTaskResumeAll+0x134>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d010      	beq.n	8018428 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018406:	f000 f859 	bl	80184bc <xTaskIncrementTick>
 801840a:	4603      	mov	r3, r0
 801840c:	2b00      	cmp	r3, #0
 801840e:	d002      	beq.n	8018416 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018410:	4b16      	ldr	r3, [pc, #88]	; (801846c <xTaskResumeAll+0x130>)
 8018412:	2201      	movs	r2, #1
 8018414:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	3b01      	subs	r3, #1
 801841a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d1f1      	bne.n	8018406 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018422:	4b13      	ldr	r3, [pc, #76]	; (8018470 <xTaskResumeAll+0x134>)
 8018424:	2200      	movs	r2, #0
 8018426:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018428:	4b10      	ldr	r3, [pc, #64]	; (801846c <xTaskResumeAll+0x130>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d009      	beq.n	8018444 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018430:	2301      	movs	r3, #1
 8018432:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018434:	4b0f      	ldr	r3, [pc, #60]	; (8018474 <xTaskResumeAll+0x138>)
 8018436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801843a:	601a      	str	r2, [r3, #0]
 801843c:	f3bf 8f4f 	dsb	sy
 8018440:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018444:	f001 fa06 	bl	8019854 <vPortExitCritical>

	return xAlreadyYielded;
 8018448:	68bb      	ldr	r3, [r7, #8]
}
 801844a:	4618      	mov	r0, r3
 801844c:	3710      	adds	r7, #16
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}
 8018452:	bf00      	nop
 8018454:	240060d0 	.word	0x240060d0
 8018458:	240060a8 	.word	0x240060a8
 801845c:	24006068 	.word	0x24006068
 8018460:	240060b0 	.word	0x240060b0
 8018464:	24005bd8 	.word	0x24005bd8
 8018468:	24005bd4 	.word	0x24005bd4
 801846c:	240060bc 	.word	0x240060bc
 8018470:	240060b8 	.word	0x240060b8
 8018474:	e000ed04 	.word	0xe000ed04

08018478 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018478:	b480      	push	{r7}
 801847a:	b083      	sub	sp, #12
 801847c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801847e:	4b05      	ldr	r3, [pc, #20]	; (8018494 <xTaskGetTickCount+0x1c>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018484:	687b      	ldr	r3, [r7, #4]
}
 8018486:	4618      	mov	r0, r3
 8018488:	370c      	adds	r7, #12
 801848a:	46bd      	mov	sp, r7
 801848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018490:	4770      	bx	lr
 8018492:	bf00      	nop
 8018494:	240060ac 	.word	0x240060ac

08018498 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018498:	b580      	push	{r7, lr}
 801849a:	b082      	sub	sp, #8
 801849c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801849e:	f001 fa8b 	bl	80199b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80184a2:	2300      	movs	r3, #0
 80184a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80184a6:	4b04      	ldr	r3, [pc, #16]	; (80184b8 <xTaskGetTickCountFromISR+0x20>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80184ac:	683b      	ldr	r3, [r7, #0]
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3708      	adds	r7, #8
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	240060ac 	.word	0x240060ac

080184bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b086      	sub	sp, #24
 80184c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80184c2:	2300      	movs	r3, #0
 80184c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80184c6:	4b4f      	ldr	r3, [pc, #316]	; (8018604 <xTaskIncrementTick+0x148>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	f040 808f 	bne.w	80185ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80184d0:	4b4d      	ldr	r3, [pc, #308]	; (8018608 <xTaskIncrementTick+0x14c>)
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	3301      	adds	r3, #1
 80184d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80184d8:	4a4b      	ldr	r2, [pc, #300]	; (8018608 <xTaskIncrementTick+0x14c>)
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80184de:	693b      	ldr	r3, [r7, #16]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d120      	bne.n	8018526 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80184e4:	4b49      	ldr	r3, [pc, #292]	; (801860c <xTaskIncrementTick+0x150>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d00a      	beq.n	8018504 <xTaskIncrementTick+0x48>
	__asm volatile
 80184ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184f2:	f383 8811 	msr	BASEPRI, r3
 80184f6:	f3bf 8f6f 	isb	sy
 80184fa:	f3bf 8f4f 	dsb	sy
 80184fe:	603b      	str	r3, [r7, #0]
}
 8018500:	bf00      	nop
 8018502:	e7fe      	b.n	8018502 <xTaskIncrementTick+0x46>
 8018504:	4b41      	ldr	r3, [pc, #260]	; (801860c <xTaskIncrementTick+0x150>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	60fb      	str	r3, [r7, #12]
 801850a:	4b41      	ldr	r3, [pc, #260]	; (8018610 <xTaskIncrementTick+0x154>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	4a3f      	ldr	r2, [pc, #252]	; (801860c <xTaskIncrementTick+0x150>)
 8018510:	6013      	str	r3, [r2, #0]
 8018512:	4a3f      	ldr	r2, [pc, #252]	; (8018610 <xTaskIncrementTick+0x154>)
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	6013      	str	r3, [r2, #0]
 8018518:	4b3e      	ldr	r3, [pc, #248]	; (8018614 <xTaskIncrementTick+0x158>)
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	3301      	adds	r3, #1
 801851e:	4a3d      	ldr	r2, [pc, #244]	; (8018614 <xTaskIncrementTick+0x158>)
 8018520:	6013      	str	r3, [r2, #0]
 8018522:	f000 fadb 	bl	8018adc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018526:	4b3c      	ldr	r3, [pc, #240]	; (8018618 <xTaskIncrementTick+0x15c>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	693a      	ldr	r2, [r7, #16]
 801852c:	429a      	cmp	r2, r3
 801852e:	d349      	bcc.n	80185c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018530:	4b36      	ldr	r3, [pc, #216]	; (801860c <xTaskIncrementTick+0x150>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d104      	bne.n	8018544 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801853a:	4b37      	ldr	r3, [pc, #220]	; (8018618 <xTaskIncrementTick+0x15c>)
 801853c:	f04f 32ff 	mov.w	r2, #4294967295
 8018540:	601a      	str	r2, [r3, #0]
					break;
 8018542:	e03f      	b.n	80185c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018544:	4b31      	ldr	r3, [pc, #196]	; (801860c <xTaskIncrementTick+0x150>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	68db      	ldr	r3, [r3, #12]
 801854a:	68db      	ldr	r3, [r3, #12]
 801854c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	685b      	ldr	r3, [r3, #4]
 8018552:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018554:	693a      	ldr	r2, [r7, #16]
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	429a      	cmp	r2, r3
 801855a:	d203      	bcs.n	8018564 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801855c:	4a2e      	ldr	r2, [pc, #184]	; (8018618 <xTaskIncrementTick+0x15c>)
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018562:	e02f      	b.n	80185c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	3304      	adds	r3, #4
 8018568:	4618      	mov	r0, r3
 801856a:	f7fe fb8f 	bl	8016c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801856e:	68bb      	ldr	r3, [r7, #8]
 8018570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018572:	2b00      	cmp	r3, #0
 8018574:	d004      	beq.n	8018580 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018576:	68bb      	ldr	r3, [r7, #8]
 8018578:	3318      	adds	r3, #24
 801857a:	4618      	mov	r0, r3
 801857c:	f7fe fb86 	bl	8016c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018584:	4b25      	ldr	r3, [pc, #148]	; (801861c <xTaskIncrementTick+0x160>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	429a      	cmp	r2, r3
 801858a:	d903      	bls.n	8018594 <xTaskIncrementTick+0xd8>
 801858c:	68bb      	ldr	r3, [r7, #8]
 801858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018590:	4a22      	ldr	r2, [pc, #136]	; (801861c <xTaskIncrementTick+0x160>)
 8018592:	6013      	str	r3, [r2, #0]
 8018594:	68bb      	ldr	r3, [r7, #8]
 8018596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018598:	4613      	mov	r3, r2
 801859a:	009b      	lsls	r3, r3, #2
 801859c:	4413      	add	r3, r2
 801859e:	009b      	lsls	r3, r3, #2
 80185a0:	4a1f      	ldr	r2, [pc, #124]	; (8018620 <xTaskIncrementTick+0x164>)
 80185a2:	441a      	add	r2, r3
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	3304      	adds	r3, #4
 80185a8:	4619      	mov	r1, r3
 80185aa:	4610      	mov	r0, r2
 80185ac:	f7fe fb11 	bl	8016bd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80185b0:	68bb      	ldr	r3, [r7, #8]
 80185b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185b4:	4b1b      	ldr	r3, [pc, #108]	; (8018624 <xTaskIncrementTick+0x168>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185ba:	429a      	cmp	r2, r3
 80185bc:	d3b8      	bcc.n	8018530 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80185be:	2301      	movs	r3, #1
 80185c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80185c2:	e7b5      	b.n	8018530 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80185c4:	4b17      	ldr	r3, [pc, #92]	; (8018624 <xTaskIncrementTick+0x168>)
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185ca:	4915      	ldr	r1, [pc, #84]	; (8018620 <xTaskIncrementTick+0x164>)
 80185cc:	4613      	mov	r3, r2
 80185ce:	009b      	lsls	r3, r3, #2
 80185d0:	4413      	add	r3, r2
 80185d2:	009b      	lsls	r3, r3, #2
 80185d4:	440b      	add	r3, r1
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	2b01      	cmp	r3, #1
 80185da:	d901      	bls.n	80185e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80185dc:	2301      	movs	r3, #1
 80185de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80185e0:	4b11      	ldr	r3, [pc, #68]	; (8018628 <xTaskIncrementTick+0x16c>)
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d007      	beq.n	80185f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80185e8:	2301      	movs	r3, #1
 80185ea:	617b      	str	r3, [r7, #20]
 80185ec:	e004      	b.n	80185f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80185ee:	4b0f      	ldr	r3, [pc, #60]	; (801862c <xTaskIncrementTick+0x170>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	3301      	adds	r3, #1
 80185f4:	4a0d      	ldr	r2, [pc, #52]	; (801862c <xTaskIncrementTick+0x170>)
 80185f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80185f8:	697b      	ldr	r3, [r7, #20]
}
 80185fa:	4618      	mov	r0, r3
 80185fc:	3718      	adds	r7, #24
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
 8018602:	bf00      	nop
 8018604:	240060d0 	.word	0x240060d0
 8018608:	240060ac 	.word	0x240060ac
 801860c:	24006060 	.word	0x24006060
 8018610:	24006064 	.word	0x24006064
 8018614:	240060c0 	.word	0x240060c0
 8018618:	240060c8 	.word	0x240060c8
 801861c:	240060b0 	.word	0x240060b0
 8018620:	24005bd8 	.word	0x24005bd8
 8018624:	24005bd4 	.word	0x24005bd4
 8018628:	240060bc 	.word	0x240060bc
 801862c:	240060b8 	.word	0x240060b8

08018630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018630:	b480      	push	{r7}
 8018632:	b085      	sub	sp, #20
 8018634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018636:	4b2a      	ldr	r3, [pc, #168]	; (80186e0 <vTaskSwitchContext+0xb0>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d003      	beq.n	8018646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801863e:	4b29      	ldr	r3, [pc, #164]	; (80186e4 <vTaskSwitchContext+0xb4>)
 8018640:	2201      	movs	r2, #1
 8018642:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018644:	e046      	b.n	80186d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8018646:	4b27      	ldr	r3, [pc, #156]	; (80186e4 <vTaskSwitchContext+0xb4>)
 8018648:	2200      	movs	r2, #0
 801864a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801864c:	4b26      	ldr	r3, [pc, #152]	; (80186e8 <vTaskSwitchContext+0xb8>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	60fb      	str	r3, [r7, #12]
 8018652:	e010      	b.n	8018676 <vTaskSwitchContext+0x46>
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d10a      	bne.n	8018670 <vTaskSwitchContext+0x40>
	__asm volatile
 801865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801865e:	f383 8811 	msr	BASEPRI, r3
 8018662:	f3bf 8f6f 	isb	sy
 8018666:	f3bf 8f4f 	dsb	sy
 801866a:	607b      	str	r3, [r7, #4]
}
 801866c:	bf00      	nop
 801866e:	e7fe      	b.n	801866e <vTaskSwitchContext+0x3e>
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	3b01      	subs	r3, #1
 8018674:	60fb      	str	r3, [r7, #12]
 8018676:	491d      	ldr	r1, [pc, #116]	; (80186ec <vTaskSwitchContext+0xbc>)
 8018678:	68fa      	ldr	r2, [r7, #12]
 801867a:	4613      	mov	r3, r2
 801867c:	009b      	lsls	r3, r3, #2
 801867e:	4413      	add	r3, r2
 8018680:	009b      	lsls	r3, r3, #2
 8018682:	440b      	add	r3, r1
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d0e4      	beq.n	8018654 <vTaskSwitchContext+0x24>
 801868a:	68fa      	ldr	r2, [r7, #12]
 801868c:	4613      	mov	r3, r2
 801868e:	009b      	lsls	r3, r3, #2
 8018690:	4413      	add	r3, r2
 8018692:	009b      	lsls	r3, r3, #2
 8018694:	4a15      	ldr	r2, [pc, #84]	; (80186ec <vTaskSwitchContext+0xbc>)
 8018696:	4413      	add	r3, r2
 8018698:	60bb      	str	r3, [r7, #8]
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	685b      	ldr	r3, [r3, #4]
 801869e:	685a      	ldr	r2, [r3, #4]
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	605a      	str	r2, [r3, #4]
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	685a      	ldr	r2, [r3, #4]
 80186a8:	68bb      	ldr	r3, [r7, #8]
 80186aa:	3308      	adds	r3, #8
 80186ac:	429a      	cmp	r2, r3
 80186ae:	d104      	bne.n	80186ba <vTaskSwitchContext+0x8a>
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	685b      	ldr	r3, [r3, #4]
 80186b4:	685a      	ldr	r2, [r3, #4]
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	605a      	str	r2, [r3, #4]
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	685b      	ldr	r3, [r3, #4]
 80186be:	68db      	ldr	r3, [r3, #12]
 80186c0:	4a0b      	ldr	r2, [pc, #44]	; (80186f0 <vTaskSwitchContext+0xc0>)
 80186c2:	6013      	str	r3, [r2, #0]
 80186c4:	4a08      	ldr	r2, [pc, #32]	; (80186e8 <vTaskSwitchContext+0xb8>)
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80186ca:	4b09      	ldr	r3, [pc, #36]	; (80186f0 <vTaskSwitchContext+0xc0>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	3354      	adds	r3, #84	; 0x54
 80186d0:	4a08      	ldr	r2, [pc, #32]	; (80186f4 <vTaskSwitchContext+0xc4>)
 80186d2:	6013      	str	r3, [r2, #0]
}
 80186d4:	bf00      	nop
 80186d6:	3714      	adds	r7, #20
 80186d8:	46bd      	mov	sp, r7
 80186da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186de:	4770      	bx	lr
 80186e0:	240060d0 	.word	0x240060d0
 80186e4:	240060bc 	.word	0x240060bc
 80186e8:	240060b0 	.word	0x240060b0
 80186ec:	24005bd8 	.word	0x24005bd8
 80186f0:	24005bd4 	.word	0x24005bd4
 80186f4:	240004cc 	.word	0x240004cc

080186f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b084      	sub	sp, #16
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
 8018700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d10a      	bne.n	801871e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801870c:	f383 8811 	msr	BASEPRI, r3
 8018710:	f3bf 8f6f 	isb	sy
 8018714:	f3bf 8f4f 	dsb	sy
 8018718:	60fb      	str	r3, [r7, #12]
}
 801871a:	bf00      	nop
 801871c:	e7fe      	b.n	801871c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801871e:	4b07      	ldr	r3, [pc, #28]	; (801873c <vTaskPlaceOnEventList+0x44>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	3318      	adds	r3, #24
 8018724:	4619      	mov	r1, r3
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f7fe fa77 	bl	8016c1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801872c:	2101      	movs	r1, #1
 801872e:	6838      	ldr	r0, [r7, #0]
 8018730:	f000 fb8e 	bl	8018e50 <prvAddCurrentTaskToDelayedList>
}
 8018734:	bf00      	nop
 8018736:	3710      	adds	r7, #16
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}
 801873c:	24005bd4 	.word	0x24005bd4

08018740 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018740:	b580      	push	{r7, lr}
 8018742:	b086      	sub	sp, #24
 8018744:	af00      	add	r7, sp, #0
 8018746:	60f8      	str	r0, [r7, #12]
 8018748:	60b9      	str	r1, [r7, #8]
 801874a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d10a      	bne.n	8018768 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018756:	f383 8811 	msr	BASEPRI, r3
 801875a:	f3bf 8f6f 	isb	sy
 801875e:	f3bf 8f4f 	dsb	sy
 8018762:	617b      	str	r3, [r7, #20]
}
 8018764:	bf00      	nop
 8018766:	e7fe      	b.n	8018766 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018768:	4b0a      	ldr	r3, [pc, #40]	; (8018794 <vTaskPlaceOnEventListRestricted+0x54>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	3318      	adds	r3, #24
 801876e:	4619      	mov	r1, r3
 8018770:	68f8      	ldr	r0, [r7, #12]
 8018772:	f7fe fa2e 	bl	8016bd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d002      	beq.n	8018782 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801877c:	f04f 33ff 	mov.w	r3, #4294967295
 8018780:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018782:	6879      	ldr	r1, [r7, #4]
 8018784:	68b8      	ldr	r0, [r7, #8]
 8018786:	f000 fb63 	bl	8018e50 <prvAddCurrentTaskToDelayedList>
	}
 801878a:	bf00      	nop
 801878c:	3718      	adds	r7, #24
 801878e:	46bd      	mov	sp, r7
 8018790:	bd80      	pop	{r7, pc}
 8018792:	bf00      	nop
 8018794:	24005bd4 	.word	0x24005bd4

08018798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b086      	sub	sp, #24
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	68db      	ldr	r3, [r3, #12]
 80187a4:	68db      	ldr	r3, [r3, #12]
 80187a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80187a8:	693b      	ldr	r3, [r7, #16]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d10a      	bne.n	80187c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80187ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187b2:	f383 8811 	msr	BASEPRI, r3
 80187b6:	f3bf 8f6f 	isb	sy
 80187ba:	f3bf 8f4f 	dsb	sy
 80187be:	60fb      	str	r3, [r7, #12]
}
 80187c0:	bf00      	nop
 80187c2:	e7fe      	b.n	80187c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80187c4:	693b      	ldr	r3, [r7, #16]
 80187c6:	3318      	adds	r3, #24
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7fe fa5f 	bl	8016c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80187ce:	4b1e      	ldr	r3, [pc, #120]	; (8018848 <xTaskRemoveFromEventList+0xb0>)
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d11d      	bne.n	8018812 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80187d6:	693b      	ldr	r3, [r7, #16]
 80187d8:	3304      	adds	r3, #4
 80187da:	4618      	mov	r0, r3
 80187dc:	f7fe fa56 	bl	8016c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187e4:	4b19      	ldr	r3, [pc, #100]	; (801884c <xTaskRemoveFromEventList+0xb4>)
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	429a      	cmp	r2, r3
 80187ea:	d903      	bls.n	80187f4 <xTaskRemoveFromEventList+0x5c>
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187f0:	4a16      	ldr	r2, [pc, #88]	; (801884c <xTaskRemoveFromEventList+0xb4>)
 80187f2:	6013      	str	r3, [r2, #0]
 80187f4:	693b      	ldr	r3, [r7, #16]
 80187f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187f8:	4613      	mov	r3, r2
 80187fa:	009b      	lsls	r3, r3, #2
 80187fc:	4413      	add	r3, r2
 80187fe:	009b      	lsls	r3, r3, #2
 8018800:	4a13      	ldr	r2, [pc, #76]	; (8018850 <xTaskRemoveFromEventList+0xb8>)
 8018802:	441a      	add	r2, r3
 8018804:	693b      	ldr	r3, [r7, #16]
 8018806:	3304      	adds	r3, #4
 8018808:	4619      	mov	r1, r3
 801880a:	4610      	mov	r0, r2
 801880c:	f7fe f9e1 	bl	8016bd2 <vListInsertEnd>
 8018810:	e005      	b.n	801881e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	3318      	adds	r3, #24
 8018816:	4619      	mov	r1, r3
 8018818:	480e      	ldr	r0, [pc, #56]	; (8018854 <xTaskRemoveFromEventList+0xbc>)
 801881a:	f7fe f9da 	bl	8016bd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018822:	4b0d      	ldr	r3, [pc, #52]	; (8018858 <xTaskRemoveFromEventList+0xc0>)
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018828:	429a      	cmp	r2, r3
 801882a:	d905      	bls.n	8018838 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801882c:	2301      	movs	r3, #1
 801882e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018830:	4b0a      	ldr	r3, [pc, #40]	; (801885c <xTaskRemoveFromEventList+0xc4>)
 8018832:	2201      	movs	r2, #1
 8018834:	601a      	str	r2, [r3, #0]
 8018836:	e001      	b.n	801883c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018838:	2300      	movs	r3, #0
 801883a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801883c:	697b      	ldr	r3, [r7, #20]
}
 801883e:	4618      	mov	r0, r3
 8018840:	3718      	adds	r7, #24
 8018842:	46bd      	mov	sp, r7
 8018844:	bd80      	pop	{r7, pc}
 8018846:	bf00      	nop
 8018848:	240060d0 	.word	0x240060d0
 801884c:	240060b0 	.word	0x240060b0
 8018850:	24005bd8 	.word	0x24005bd8
 8018854:	24006068 	.word	0x24006068
 8018858:	24005bd4 	.word	0x24005bd4
 801885c:	240060bc 	.word	0x240060bc

08018860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018860:	b480      	push	{r7}
 8018862:	b083      	sub	sp, #12
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018868:	4b06      	ldr	r3, [pc, #24]	; (8018884 <vTaskInternalSetTimeOutState+0x24>)
 801886a:	681a      	ldr	r2, [r3, #0]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018870:	4b05      	ldr	r3, [pc, #20]	; (8018888 <vTaskInternalSetTimeOutState+0x28>)
 8018872:	681a      	ldr	r2, [r3, #0]
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	605a      	str	r2, [r3, #4]
}
 8018878:	bf00      	nop
 801887a:	370c      	adds	r7, #12
 801887c:	46bd      	mov	sp, r7
 801887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018882:	4770      	bx	lr
 8018884:	240060c0 	.word	0x240060c0
 8018888:	240060ac 	.word	0x240060ac

0801888c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b088      	sub	sp, #32
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
 8018894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d10a      	bne.n	80188b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188a0:	f383 8811 	msr	BASEPRI, r3
 80188a4:	f3bf 8f6f 	isb	sy
 80188a8:	f3bf 8f4f 	dsb	sy
 80188ac:	613b      	str	r3, [r7, #16]
}
 80188ae:	bf00      	nop
 80188b0:	e7fe      	b.n	80188b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d10a      	bne.n	80188ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80188b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188bc:	f383 8811 	msr	BASEPRI, r3
 80188c0:	f3bf 8f6f 	isb	sy
 80188c4:	f3bf 8f4f 	dsb	sy
 80188c8:	60fb      	str	r3, [r7, #12]
}
 80188ca:	bf00      	nop
 80188cc:	e7fe      	b.n	80188cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80188ce:	f000 ff91 	bl	80197f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80188d2:	4b1d      	ldr	r3, [pc, #116]	; (8018948 <xTaskCheckForTimeOut+0xbc>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	69ba      	ldr	r2, [r7, #24]
 80188de:	1ad3      	subs	r3, r2, r3
 80188e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188ea:	d102      	bne.n	80188f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80188ec:	2300      	movs	r3, #0
 80188ee:	61fb      	str	r3, [r7, #28]
 80188f0:	e023      	b.n	801893a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681a      	ldr	r2, [r3, #0]
 80188f6:	4b15      	ldr	r3, [pc, #84]	; (801894c <xTaskCheckForTimeOut+0xc0>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	429a      	cmp	r2, r3
 80188fc:	d007      	beq.n	801890e <xTaskCheckForTimeOut+0x82>
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	69ba      	ldr	r2, [r7, #24]
 8018904:	429a      	cmp	r2, r3
 8018906:	d302      	bcc.n	801890e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018908:	2301      	movs	r3, #1
 801890a:	61fb      	str	r3, [r7, #28]
 801890c:	e015      	b.n	801893a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	697a      	ldr	r2, [r7, #20]
 8018914:	429a      	cmp	r2, r3
 8018916:	d20b      	bcs.n	8018930 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	681a      	ldr	r2, [r3, #0]
 801891c:	697b      	ldr	r3, [r7, #20]
 801891e:	1ad2      	subs	r2, r2, r3
 8018920:	683b      	ldr	r3, [r7, #0]
 8018922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018924:	6878      	ldr	r0, [r7, #4]
 8018926:	f7ff ff9b 	bl	8018860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801892a:	2300      	movs	r3, #0
 801892c:	61fb      	str	r3, [r7, #28]
 801892e:	e004      	b.n	801893a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	2200      	movs	r2, #0
 8018934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018936:	2301      	movs	r3, #1
 8018938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801893a:	f000 ff8b 	bl	8019854 <vPortExitCritical>

	return xReturn;
 801893e:	69fb      	ldr	r3, [r7, #28]
}
 8018940:	4618      	mov	r0, r3
 8018942:	3720      	adds	r7, #32
 8018944:	46bd      	mov	sp, r7
 8018946:	bd80      	pop	{r7, pc}
 8018948:	240060ac 	.word	0x240060ac
 801894c:	240060c0 	.word	0x240060c0

08018950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018950:	b480      	push	{r7}
 8018952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018954:	4b03      	ldr	r3, [pc, #12]	; (8018964 <vTaskMissedYield+0x14>)
 8018956:	2201      	movs	r2, #1
 8018958:	601a      	str	r2, [r3, #0]
}
 801895a:	bf00      	nop
 801895c:	46bd      	mov	sp, r7
 801895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018962:	4770      	bx	lr
 8018964:	240060bc 	.word	0x240060bc

08018968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b082      	sub	sp, #8
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018970:	f000 f852 	bl	8018a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018974:	4b06      	ldr	r3, [pc, #24]	; (8018990 <prvIdleTask+0x28>)
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	2b01      	cmp	r3, #1
 801897a:	d9f9      	bls.n	8018970 <prvIdleTask+0x8>
			{
				taskYIELD();
 801897c:	4b05      	ldr	r3, [pc, #20]	; (8018994 <prvIdleTask+0x2c>)
 801897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018982:	601a      	str	r2, [r3, #0]
 8018984:	f3bf 8f4f 	dsb	sy
 8018988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801898c:	e7f0      	b.n	8018970 <prvIdleTask+0x8>
 801898e:	bf00      	nop
 8018990:	24005bd8 	.word	0x24005bd8
 8018994:	e000ed04 	.word	0xe000ed04

08018998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801899e:	2300      	movs	r3, #0
 80189a0:	607b      	str	r3, [r7, #4]
 80189a2:	e00c      	b.n	80189be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	4613      	mov	r3, r2
 80189a8:	009b      	lsls	r3, r3, #2
 80189aa:	4413      	add	r3, r2
 80189ac:	009b      	lsls	r3, r3, #2
 80189ae:	4a12      	ldr	r2, [pc, #72]	; (80189f8 <prvInitialiseTaskLists+0x60>)
 80189b0:	4413      	add	r3, r2
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7fe f8e0 	bl	8016b78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	3301      	adds	r3, #1
 80189bc:	607b      	str	r3, [r7, #4]
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	2b37      	cmp	r3, #55	; 0x37
 80189c2:	d9ef      	bls.n	80189a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80189c4:	480d      	ldr	r0, [pc, #52]	; (80189fc <prvInitialiseTaskLists+0x64>)
 80189c6:	f7fe f8d7 	bl	8016b78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80189ca:	480d      	ldr	r0, [pc, #52]	; (8018a00 <prvInitialiseTaskLists+0x68>)
 80189cc:	f7fe f8d4 	bl	8016b78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80189d0:	480c      	ldr	r0, [pc, #48]	; (8018a04 <prvInitialiseTaskLists+0x6c>)
 80189d2:	f7fe f8d1 	bl	8016b78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80189d6:	480c      	ldr	r0, [pc, #48]	; (8018a08 <prvInitialiseTaskLists+0x70>)
 80189d8:	f7fe f8ce 	bl	8016b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80189dc:	480b      	ldr	r0, [pc, #44]	; (8018a0c <prvInitialiseTaskLists+0x74>)
 80189de:	f7fe f8cb 	bl	8016b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80189e2:	4b0b      	ldr	r3, [pc, #44]	; (8018a10 <prvInitialiseTaskLists+0x78>)
 80189e4:	4a05      	ldr	r2, [pc, #20]	; (80189fc <prvInitialiseTaskLists+0x64>)
 80189e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80189e8:	4b0a      	ldr	r3, [pc, #40]	; (8018a14 <prvInitialiseTaskLists+0x7c>)
 80189ea:	4a05      	ldr	r2, [pc, #20]	; (8018a00 <prvInitialiseTaskLists+0x68>)
 80189ec:	601a      	str	r2, [r3, #0]
}
 80189ee:	bf00      	nop
 80189f0:	3708      	adds	r7, #8
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	24005bd8 	.word	0x24005bd8
 80189fc:	24006038 	.word	0x24006038
 8018a00:	2400604c 	.word	0x2400604c
 8018a04:	24006068 	.word	0x24006068
 8018a08:	2400607c 	.word	0x2400607c
 8018a0c:	24006094 	.word	0x24006094
 8018a10:	24006060 	.word	0x24006060
 8018a14:	24006064 	.word	0x24006064

08018a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b082      	sub	sp, #8
 8018a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a1e:	e019      	b.n	8018a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018a20:	f000 fee8 	bl	80197f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a24:	4b10      	ldr	r3, [pc, #64]	; (8018a68 <prvCheckTasksWaitingTermination+0x50>)
 8018a26:	68db      	ldr	r3, [r3, #12]
 8018a28:	68db      	ldr	r3, [r3, #12]
 8018a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	3304      	adds	r3, #4
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7fe f92b 	bl	8016c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a36:	4b0d      	ldr	r3, [pc, #52]	; (8018a6c <prvCheckTasksWaitingTermination+0x54>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	3b01      	subs	r3, #1
 8018a3c:	4a0b      	ldr	r2, [pc, #44]	; (8018a6c <prvCheckTasksWaitingTermination+0x54>)
 8018a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a40:	4b0b      	ldr	r3, [pc, #44]	; (8018a70 <prvCheckTasksWaitingTermination+0x58>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	3b01      	subs	r3, #1
 8018a46:	4a0a      	ldr	r2, [pc, #40]	; (8018a70 <prvCheckTasksWaitingTermination+0x58>)
 8018a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a4a:	f000 ff03 	bl	8019854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	f000 f810 	bl	8018a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a54:	4b06      	ldr	r3, [pc, #24]	; (8018a70 <prvCheckTasksWaitingTermination+0x58>)
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d1e1      	bne.n	8018a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a5c:	bf00      	nop
 8018a5e:	bf00      	nop
 8018a60:	3708      	adds	r7, #8
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	2400607c 	.word	0x2400607c
 8018a6c:	240060a8 	.word	0x240060a8
 8018a70:	24006090 	.word	0x24006090

08018a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b084      	sub	sp, #16
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	3354      	adds	r3, #84	; 0x54
 8018a80:	4618      	mov	r0, r3
 8018a82:	f00e fdf3 	bl	802766c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d108      	bne.n	8018aa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a94:	4618      	mov	r0, r3
 8018a96:	f001 f89b 	bl	8019bd0 <vPortFree>
				vPortFree( pxTCB );
 8018a9a:	6878      	ldr	r0, [r7, #4]
 8018a9c:	f001 f898 	bl	8019bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018aa0:	e018      	b.n	8018ad4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018aa8:	2b01      	cmp	r3, #1
 8018aaa:	d103      	bne.n	8018ab4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f001 f88f 	bl	8019bd0 <vPortFree>
	}
 8018ab2:	e00f      	b.n	8018ad4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8018aba:	2b02      	cmp	r3, #2
 8018abc:	d00a      	beq.n	8018ad4 <prvDeleteTCB+0x60>
	__asm volatile
 8018abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac2:	f383 8811 	msr	BASEPRI, r3
 8018ac6:	f3bf 8f6f 	isb	sy
 8018aca:	f3bf 8f4f 	dsb	sy
 8018ace:	60fb      	str	r3, [r7, #12]
}
 8018ad0:	bf00      	nop
 8018ad2:	e7fe      	b.n	8018ad2 <prvDeleteTCB+0x5e>
	}
 8018ad4:	bf00      	nop
 8018ad6:	3710      	adds	r7, #16
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}

08018adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018adc:	b480      	push	{r7}
 8018ade:	b083      	sub	sp, #12
 8018ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ae2:	4b0c      	ldr	r3, [pc, #48]	; (8018b14 <prvResetNextTaskUnblockTime+0x38>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d104      	bne.n	8018af6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018aec:	4b0a      	ldr	r3, [pc, #40]	; (8018b18 <prvResetNextTaskUnblockTime+0x3c>)
 8018aee:	f04f 32ff 	mov.w	r2, #4294967295
 8018af2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018af4:	e008      	b.n	8018b08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018af6:	4b07      	ldr	r3, [pc, #28]	; (8018b14 <prvResetNextTaskUnblockTime+0x38>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	68db      	ldr	r3, [r3, #12]
 8018afc:	68db      	ldr	r3, [r3, #12]
 8018afe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	4a04      	ldr	r2, [pc, #16]	; (8018b18 <prvResetNextTaskUnblockTime+0x3c>)
 8018b06:	6013      	str	r3, [r2, #0]
}
 8018b08:	bf00      	nop
 8018b0a:	370c      	adds	r7, #12
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b12:	4770      	bx	lr
 8018b14:	24006060 	.word	0x24006060
 8018b18:	240060c8 	.word	0x240060c8

08018b1c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018b1c:	b480      	push	{r7}
 8018b1e:	b083      	sub	sp, #12
 8018b20:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018b22:	4b05      	ldr	r3, [pc, #20]	; (8018b38 <xTaskGetCurrentTaskHandle+0x1c>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018b28:	687b      	ldr	r3, [r7, #4]
	}
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	370c      	adds	r7, #12
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop
 8018b38:	24005bd4 	.word	0x24005bd4

08018b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b3c:	b480      	push	{r7}
 8018b3e:	b083      	sub	sp, #12
 8018b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b42:	4b0b      	ldr	r3, [pc, #44]	; (8018b70 <xTaskGetSchedulerState+0x34>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d102      	bne.n	8018b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	607b      	str	r3, [r7, #4]
 8018b4e:	e008      	b.n	8018b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b50:	4b08      	ldr	r3, [pc, #32]	; (8018b74 <xTaskGetSchedulerState+0x38>)
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d102      	bne.n	8018b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b58:	2302      	movs	r3, #2
 8018b5a:	607b      	str	r3, [r7, #4]
 8018b5c:	e001      	b.n	8018b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b5e:	2300      	movs	r3, #0
 8018b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b62:	687b      	ldr	r3, [r7, #4]
	}
 8018b64:	4618      	mov	r0, r3
 8018b66:	370c      	adds	r7, #12
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6e:	4770      	bx	lr
 8018b70:	240060b4 	.word	0x240060b4
 8018b74:	240060d0 	.word	0x240060d0

08018b78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018b84:	2300      	movs	r3, #0
 8018b86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d051      	beq.n	8018c32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b92:	4b2a      	ldr	r3, [pc, #168]	; (8018c3c <xTaskPriorityInherit+0xc4>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d241      	bcs.n	8018c20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	699b      	ldr	r3, [r3, #24]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	db06      	blt.n	8018bb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ba4:	4b25      	ldr	r3, [pc, #148]	; (8018c3c <xTaskPriorityInherit+0xc4>)
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018baa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018bb2:	68bb      	ldr	r3, [r7, #8]
 8018bb4:	6959      	ldr	r1, [r3, #20]
 8018bb6:	68bb      	ldr	r3, [r7, #8]
 8018bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bba:	4613      	mov	r3, r2
 8018bbc:	009b      	lsls	r3, r3, #2
 8018bbe:	4413      	add	r3, r2
 8018bc0:	009b      	lsls	r3, r3, #2
 8018bc2:	4a1f      	ldr	r2, [pc, #124]	; (8018c40 <xTaskPriorityInherit+0xc8>)
 8018bc4:	4413      	add	r3, r2
 8018bc6:	4299      	cmp	r1, r3
 8018bc8:	d122      	bne.n	8018c10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	3304      	adds	r3, #4
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7fe f85c 	bl	8016c8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018bd4:	4b19      	ldr	r3, [pc, #100]	; (8018c3c <xTaskPriorityInherit+0xc4>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bda:	68bb      	ldr	r3, [r7, #8]
 8018bdc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018be2:	4b18      	ldr	r3, [pc, #96]	; (8018c44 <xTaskPriorityInherit+0xcc>)
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d903      	bls.n	8018bf2 <xTaskPriorityInherit+0x7a>
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bee:	4a15      	ldr	r2, [pc, #84]	; (8018c44 <xTaskPriorityInherit+0xcc>)
 8018bf0:	6013      	str	r3, [r2, #0]
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	009b      	lsls	r3, r3, #2
 8018bfa:	4413      	add	r3, r2
 8018bfc:	009b      	lsls	r3, r3, #2
 8018bfe:	4a10      	ldr	r2, [pc, #64]	; (8018c40 <xTaskPriorityInherit+0xc8>)
 8018c00:	441a      	add	r2, r3
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	3304      	adds	r3, #4
 8018c06:	4619      	mov	r1, r3
 8018c08:	4610      	mov	r0, r2
 8018c0a:	f7fd ffe2 	bl	8016bd2 <vListInsertEnd>
 8018c0e:	e004      	b.n	8018c1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018c10:	4b0a      	ldr	r3, [pc, #40]	; (8018c3c <xTaskPriorityInherit+0xc4>)
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018c1a:	2301      	movs	r3, #1
 8018c1c:	60fb      	str	r3, [r7, #12]
 8018c1e:	e008      	b.n	8018c32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018c20:	68bb      	ldr	r3, [r7, #8]
 8018c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018c24:	4b05      	ldr	r3, [pc, #20]	; (8018c3c <xTaskPriorityInherit+0xc4>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	d201      	bcs.n	8018c32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018c2e:	2301      	movs	r3, #1
 8018c30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c32:	68fb      	ldr	r3, [r7, #12]
	}
 8018c34:	4618      	mov	r0, r3
 8018c36:	3710      	adds	r7, #16
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}
 8018c3c:	24005bd4 	.word	0x24005bd4
 8018c40:	24005bd8 	.word	0x24005bd8
 8018c44:	240060b0 	.word	0x240060b0

08018c48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b086      	sub	sp, #24
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018c54:	2300      	movs	r3, #0
 8018c56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d056      	beq.n	8018d0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018c5e:	4b2e      	ldr	r3, [pc, #184]	; (8018d18 <xTaskPriorityDisinherit+0xd0>)
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	693a      	ldr	r2, [r7, #16]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d00a      	beq.n	8018c7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6c:	f383 8811 	msr	BASEPRI, r3
 8018c70:	f3bf 8f6f 	isb	sy
 8018c74:	f3bf 8f4f 	dsb	sy
 8018c78:	60fb      	str	r3, [r7, #12]
}
 8018c7a:	bf00      	nop
 8018c7c:	e7fe      	b.n	8018c7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018c7e:	693b      	ldr	r3, [r7, #16]
 8018c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d10a      	bne.n	8018c9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c8a:	f383 8811 	msr	BASEPRI, r3
 8018c8e:	f3bf 8f6f 	isb	sy
 8018c92:	f3bf 8f4f 	dsb	sy
 8018c96:	60bb      	str	r3, [r7, #8]
}
 8018c98:	bf00      	nop
 8018c9a:	e7fe      	b.n	8018c9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018c9c:	693b      	ldr	r3, [r7, #16]
 8018c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ca0:	1e5a      	subs	r2, r3, #1
 8018ca2:	693b      	ldr	r3, [r7, #16]
 8018ca4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018ca6:	693b      	ldr	r3, [r7, #16]
 8018ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018caa:	693b      	ldr	r3, [r7, #16]
 8018cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	d02c      	beq.n	8018d0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018cb2:	693b      	ldr	r3, [r7, #16]
 8018cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d128      	bne.n	8018d0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	3304      	adds	r3, #4
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f7fd ffe4 	bl	8016c8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018cc4:	693b      	ldr	r3, [r7, #16]
 8018cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018cc8:	693b      	ldr	r3, [r7, #16]
 8018cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ccc:	693b      	ldr	r3, [r7, #16]
 8018cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018cd8:	693b      	ldr	r3, [r7, #16]
 8018cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cdc:	4b0f      	ldr	r3, [pc, #60]	; (8018d1c <xTaskPriorityDisinherit+0xd4>)
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	d903      	bls.n	8018cec <xTaskPriorityDisinherit+0xa4>
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ce8:	4a0c      	ldr	r2, [pc, #48]	; (8018d1c <xTaskPriorityDisinherit+0xd4>)
 8018cea:	6013      	str	r3, [r2, #0]
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cf0:	4613      	mov	r3, r2
 8018cf2:	009b      	lsls	r3, r3, #2
 8018cf4:	4413      	add	r3, r2
 8018cf6:	009b      	lsls	r3, r3, #2
 8018cf8:	4a09      	ldr	r2, [pc, #36]	; (8018d20 <xTaskPriorityDisinherit+0xd8>)
 8018cfa:	441a      	add	r2, r3
 8018cfc:	693b      	ldr	r3, [r7, #16]
 8018cfe:	3304      	adds	r3, #4
 8018d00:	4619      	mov	r1, r3
 8018d02:	4610      	mov	r0, r2
 8018d04:	f7fd ff65 	bl	8016bd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018d08:	2301      	movs	r3, #1
 8018d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018d0c:	697b      	ldr	r3, [r7, #20]
	}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	3718      	adds	r7, #24
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}
 8018d16:	bf00      	nop
 8018d18:	24005bd4 	.word	0x24005bd4
 8018d1c:	240060b0 	.word	0x240060b0
 8018d20:	24005bd8 	.word	0x24005bd8

08018d24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b088      	sub	sp, #32
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
 8018d2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018d32:	2301      	movs	r3, #1
 8018d34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d06a      	beq.n	8018e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018d3c:	69bb      	ldr	r3, [r7, #24]
 8018d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d10a      	bne.n	8018d5a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d48:	f383 8811 	msr	BASEPRI, r3
 8018d4c:	f3bf 8f6f 	isb	sy
 8018d50:	f3bf 8f4f 	dsb	sy
 8018d54:	60fb      	str	r3, [r7, #12]
}
 8018d56:	bf00      	nop
 8018d58:	e7fe      	b.n	8018d58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018d5a:	69bb      	ldr	r3, [r7, #24]
 8018d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d5e:	683a      	ldr	r2, [r7, #0]
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d902      	bls.n	8018d6a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018d64:	683b      	ldr	r3, [r7, #0]
 8018d66:	61fb      	str	r3, [r7, #28]
 8018d68:	e002      	b.n	8018d70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018d6a:	69bb      	ldr	r3, [r7, #24]
 8018d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d6e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018d70:	69bb      	ldr	r3, [r7, #24]
 8018d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d74:	69fa      	ldr	r2, [r7, #28]
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d04b      	beq.n	8018e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018d7a:	69bb      	ldr	r3, [r7, #24]
 8018d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d7e:	697a      	ldr	r2, [r7, #20]
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d146      	bne.n	8018e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018d84:	4b25      	ldr	r3, [pc, #148]	; (8018e1c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	69ba      	ldr	r2, [r7, #24]
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d10a      	bne.n	8018da4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8018d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d92:	f383 8811 	msr	BASEPRI, r3
 8018d96:	f3bf 8f6f 	isb	sy
 8018d9a:	f3bf 8f4f 	dsb	sy
 8018d9e:	60bb      	str	r3, [r7, #8]
}
 8018da0:	bf00      	nop
 8018da2:	e7fe      	b.n	8018da2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018da8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018daa:	69bb      	ldr	r3, [r7, #24]
 8018dac:	69fa      	ldr	r2, [r7, #28]
 8018dae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018db0:	69bb      	ldr	r3, [r7, #24]
 8018db2:	699b      	ldr	r3, [r3, #24]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	db04      	blt.n	8018dc2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018db8:	69fb      	ldr	r3, [r7, #28]
 8018dba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018dbe:	69bb      	ldr	r3, [r7, #24]
 8018dc0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	6959      	ldr	r1, [r3, #20]
 8018dc6:	693a      	ldr	r2, [r7, #16]
 8018dc8:	4613      	mov	r3, r2
 8018dca:	009b      	lsls	r3, r3, #2
 8018dcc:	4413      	add	r3, r2
 8018dce:	009b      	lsls	r3, r3, #2
 8018dd0:	4a13      	ldr	r2, [pc, #76]	; (8018e20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018dd2:	4413      	add	r3, r2
 8018dd4:	4299      	cmp	r1, r3
 8018dd6:	d11c      	bne.n	8018e12 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018dd8:	69bb      	ldr	r3, [r7, #24]
 8018dda:	3304      	adds	r3, #4
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7fd ff55 	bl	8016c8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018de2:	69bb      	ldr	r3, [r7, #24]
 8018de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018de6:	4b0f      	ldr	r3, [pc, #60]	; (8018e24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	429a      	cmp	r2, r3
 8018dec:	d903      	bls.n	8018df6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018dee:	69bb      	ldr	r3, [r7, #24]
 8018df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018df2:	4a0c      	ldr	r2, [pc, #48]	; (8018e24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018df4:	6013      	str	r3, [r2, #0]
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dfa:	4613      	mov	r3, r2
 8018dfc:	009b      	lsls	r3, r3, #2
 8018dfe:	4413      	add	r3, r2
 8018e00:	009b      	lsls	r3, r3, #2
 8018e02:	4a07      	ldr	r2, [pc, #28]	; (8018e20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018e04:	441a      	add	r2, r3
 8018e06:	69bb      	ldr	r3, [r7, #24]
 8018e08:	3304      	adds	r3, #4
 8018e0a:	4619      	mov	r1, r3
 8018e0c:	4610      	mov	r0, r2
 8018e0e:	f7fd fee0 	bl	8016bd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018e12:	bf00      	nop
 8018e14:	3720      	adds	r7, #32
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd80      	pop	{r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	24005bd4 	.word	0x24005bd4
 8018e20:	24005bd8 	.word	0x24005bd8
 8018e24:	240060b0 	.word	0x240060b0

08018e28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018e28:	b480      	push	{r7}
 8018e2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018e2c:	4b07      	ldr	r3, [pc, #28]	; (8018e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d004      	beq.n	8018e3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018e34:	4b05      	ldr	r3, [pc, #20]	; (8018e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e3a:	3201      	adds	r2, #1
 8018e3c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018e3e:	4b03      	ldr	r3, [pc, #12]	; (8018e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8018e40:	681b      	ldr	r3, [r3, #0]
	}
 8018e42:	4618      	mov	r0, r3
 8018e44:	46bd      	mov	sp, r7
 8018e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4a:	4770      	bx	lr
 8018e4c:	24005bd4 	.word	0x24005bd4

08018e50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b084      	sub	sp, #16
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	6078      	str	r0, [r7, #4]
 8018e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018e5a:	4b21      	ldr	r3, [pc, #132]	; (8018ee0 <prvAddCurrentTaskToDelayedList+0x90>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e60:	4b20      	ldr	r3, [pc, #128]	; (8018ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	3304      	adds	r3, #4
 8018e66:	4618      	mov	r0, r3
 8018e68:	f7fd ff10 	bl	8016c8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e72:	d10a      	bne.n	8018e8a <prvAddCurrentTaskToDelayedList+0x3a>
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d007      	beq.n	8018e8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018e7a:	4b1a      	ldr	r3, [pc, #104]	; (8018ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	3304      	adds	r3, #4
 8018e80:	4619      	mov	r1, r3
 8018e82:	4819      	ldr	r0, [pc, #100]	; (8018ee8 <prvAddCurrentTaskToDelayedList+0x98>)
 8018e84:	f7fd fea5 	bl	8016bd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018e88:	e026      	b.n	8018ed8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018e8a:	68fa      	ldr	r2, [r7, #12]
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	4413      	add	r3, r2
 8018e90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018e92:	4b14      	ldr	r3, [pc, #80]	; (8018ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	68ba      	ldr	r2, [r7, #8]
 8018e98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018e9a:	68ba      	ldr	r2, [r7, #8]
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d209      	bcs.n	8018eb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ea2:	4b12      	ldr	r3, [pc, #72]	; (8018eec <prvAddCurrentTaskToDelayedList+0x9c>)
 8018ea4:	681a      	ldr	r2, [r3, #0]
 8018ea6:	4b0f      	ldr	r3, [pc, #60]	; (8018ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	3304      	adds	r3, #4
 8018eac:	4619      	mov	r1, r3
 8018eae:	4610      	mov	r0, r2
 8018eb0:	f7fd feb3 	bl	8016c1a <vListInsert>
}
 8018eb4:	e010      	b.n	8018ed8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018eb6:	4b0e      	ldr	r3, [pc, #56]	; (8018ef0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018eb8:	681a      	ldr	r2, [r3, #0]
 8018eba:	4b0a      	ldr	r3, [pc, #40]	; (8018ee4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	3304      	adds	r3, #4
 8018ec0:	4619      	mov	r1, r3
 8018ec2:	4610      	mov	r0, r2
 8018ec4:	f7fd fea9 	bl	8016c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018ec8:	4b0a      	ldr	r3, [pc, #40]	; (8018ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	68ba      	ldr	r2, [r7, #8]
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	d202      	bcs.n	8018ed8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018ed2:	4a08      	ldr	r2, [pc, #32]	; (8018ef4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	6013      	str	r3, [r2, #0]
}
 8018ed8:	bf00      	nop
 8018eda:	3710      	adds	r7, #16
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	240060ac 	.word	0x240060ac
 8018ee4:	24005bd4 	.word	0x24005bd4
 8018ee8:	24006094 	.word	0x24006094
 8018eec:	24006064 	.word	0x24006064
 8018ef0:	24006060 	.word	0x24006060
 8018ef4:	240060c8 	.word	0x240060c8

08018ef8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	b08a      	sub	sp, #40	; 0x28
 8018efc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018efe:	2300      	movs	r3, #0
 8018f00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018f02:	f000 fb07 	bl	8019514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018f06:	4b1c      	ldr	r3, [pc, #112]	; (8018f78 <xTimerCreateTimerTask+0x80>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d021      	beq.n	8018f52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018f12:	2300      	movs	r3, #0
 8018f14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018f16:	1d3a      	adds	r2, r7, #4
 8018f18:	f107 0108 	add.w	r1, r7, #8
 8018f1c:	f107 030c 	add.w	r3, r7, #12
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7fd fe0f 	bl	8016b44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018f26:	6879      	ldr	r1, [r7, #4]
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	68fa      	ldr	r2, [r7, #12]
 8018f2c:	9202      	str	r2, [sp, #8]
 8018f2e:	9301      	str	r3, [sp, #4]
 8018f30:	2302      	movs	r3, #2
 8018f32:	9300      	str	r3, [sp, #0]
 8018f34:	2300      	movs	r3, #0
 8018f36:	460a      	mov	r2, r1
 8018f38:	4910      	ldr	r1, [pc, #64]	; (8018f7c <xTimerCreateTimerTask+0x84>)
 8018f3a:	4811      	ldr	r0, [pc, #68]	; (8018f80 <xTimerCreateTimerTask+0x88>)
 8018f3c:	f7fe ff94 	bl	8017e68 <xTaskCreateStatic>
 8018f40:	4603      	mov	r3, r0
 8018f42:	4a10      	ldr	r2, [pc, #64]	; (8018f84 <xTimerCreateTimerTask+0x8c>)
 8018f44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018f46:	4b0f      	ldr	r3, [pc, #60]	; (8018f84 <xTimerCreateTimerTask+0x8c>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d001      	beq.n	8018f52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018f4e:	2301      	movs	r3, #1
 8018f50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d10a      	bne.n	8018f6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f5c:	f383 8811 	msr	BASEPRI, r3
 8018f60:	f3bf 8f6f 	isb	sy
 8018f64:	f3bf 8f4f 	dsb	sy
 8018f68:	613b      	str	r3, [r7, #16]
}
 8018f6a:	bf00      	nop
 8018f6c:	e7fe      	b.n	8018f6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018f6e:	697b      	ldr	r3, [r7, #20]
}
 8018f70:	4618      	mov	r0, r3
 8018f72:	3718      	adds	r7, #24
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	24006104 	.word	0x24006104
 8018f7c:	0802847c 	.word	0x0802847c
 8018f80:	080190bd 	.word	0x080190bd
 8018f84:	24006108 	.word	0x24006108

08018f88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b08a      	sub	sp, #40	; 0x28
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	60f8      	str	r0, [r7, #12]
 8018f90:	60b9      	str	r1, [r7, #8]
 8018f92:	607a      	str	r2, [r7, #4]
 8018f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018f96:	2300      	movs	r3, #0
 8018f98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d10a      	bne.n	8018fb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8018fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa4:	f383 8811 	msr	BASEPRI, r3
 8018fa8:	f3bf 8f6f 	isb	sy
 8018fac:	f3bf 8f4f 	dsb	sy
 8018fb0:	623b      	str	r3, [r7, #32]
}
 8018fb2:	bf00      	nop
 8018fb4:	e7fe      	b.n	8018fb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018fb6:	4b1a      	ldr	r3, [pc, #104]	; (8019020 <xTimerGenericCommand+0x98>)
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d02a      	beq.n	8019014 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018fbe:	68bb      	ldr	r3, [r7, #8]
 8018fc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	2b05      	cmp	r3, #5
 8018fce:	dc18      	bgt.n	8019002 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018fd0:	f7ff fdb4 	bl	8018b3c <xTaskGetSchedulerState>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	2b02      	cmp	r3, #2
 8018fd8:	d109      	bne.n	8018fee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018fda:	4b11      	ldr	r3, [pc, #68]	; (8019020 <xTimerGenericCommand+0x98>)
 8018fdc:	6818      	ldr	r0, [r3, #0]
 8018fde:	f107 0110 	add.w	r1, r7, #16
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fe6:	f7fe f8d9 	bl	801719c <xQueueGenericSend>
 8018fea:	6278      	str	r0, [r7, #36]	; 0x24
 8018fec:	e012      	b.n	8019014 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018fee:	4b0c      	ldr	r3, [pc, #48]	; (8019020 <xTimerGenericCommand+0x98>)
 8018ff0:	6818      	ldr	r0, [r3, #0]
 8018ff2:	f107 0110 	add.w	r1, r7, #16
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	f7fe f8cf 	bl	801719c <xQueueGenericSend>
 8018ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8019000:	e008      	b.n	8019014 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019002:	4b07      	ldr	r3, [pc, #28]	; (8019020 <xTimerGenericCommand+0x98>)
 8019004:	6818      	ldr	r0, [r3, #0]
 8019006:	f107 0110 	add.w	r1, r7, #16
 801900a:	2300      	movs	r3, #0
 801900c:	683a      	ldr	r2, [r7, #0]
 801900e:	f7fe f9c3 	bl	8017398 <xQueueGenericSendFromISR>
 8019012:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019016:	4618      	mov	r0, r3
 8019018:	3728      	adds	r7, #40	; 0x28
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	24006104 	.word	0x24006104

08019024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b088      	sub	sp, #32
 8019028:	af02      	add	r7, sp, #8
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801902e:	4b22      	ldr	r3, [pc, #136]	; (80190b8 <prvProcessExpiredTimer+0x94>)
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	68db      	ldr	r3, [r3, #12]
 8019034:	68db      	ldr	r3, [r3, #12]
 8019036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019038:	697b      	ldr	r3, [r7, #20]
 801903a:	3304      	adds	r3, #4
 801903c:	4618      	mov	r0, r3
 801903e:	f7fd fe25 	bl	8016c8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019048:	f003 0304 	and.w	r3, r3, #4
 801904c:	2b00      	cmp	r3, #0
 801904e:	d022      	beq.n	8019096 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019050:	697b      	ldr	r3, [r7, #20]
 8019052:	699a      	ldr	r2, [r3, #24]
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	18d1      	adds	r1, r2, r3
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	683a      	ldr	r2, [r7, #0]
 801905c:	6978      	ldr	r0, [r7, #20]
 801905e:	f000 f8d1 	bl	8019204 <prvInsertTimerInActiveList>
 8019062:	4603      	mov	r3, r0
 8019064:	2b00      	cmp	r3, #0
 8019066:	d01f      	beq.n	80190a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019068:	2300      	movs	r3, #0
 801906a:	9300      	str	r3, [sp, #0]
 801906c:	2300      	movs	r3, #0
 801906e:	687a      	ldr	r2, [r7, #4]
 8019070:	2100      	movs	r1, #0
 8019072:	6978      	ldr	r0, [r7, #20]
 8019074:	f7ff ff88 	bl	8018f88 <xTimerGenericCommand>
 8019078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801907a:	693b      	ldr	r3, [r7, #16]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d113      	bne.n	80190a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019084:	f383 8811 	msr	BASEPRI, r3
 8019088:	f3bf 8f6f 	isb	sy
 801908c:	f3bf 8f4f 	dsb	sy
 8019090:	60fb      	str	r3, [r7, #12]
}
 8019092:	bf00      	nop
 8019094:	e7fe      	b.n	8019094 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019096:	697b      	ldr	r3, [r7, #20]
 8019098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801909c:	f023 0301 	bic.w	r3, r3, #1
 80190a0:	b2da      	uxtb	r2, r3
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190a8:	697b      	ldr	r3, [r7, #20]
 80190aa:	6a1b      	ldr	r3, [r3, #32]
 80190ac:	6978      	ldr	r0, [r7, #20]
 80190ae:	4798      	blx	r3
}
 80190b0:	bf00      	nop
 80190b2:	3718      	adds	r7, #24
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}
 80190b8:	240060fc 	.word	0x240060fc

080190bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b084      	sub	sp, #16
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80190c4:	f107 0308 	add.w	r3, r7, #8
 80190c8:	4618      	mov	r0, r3
 80190ca:	f000 f857 	bl	801917c <prvGetNextExpireTime>
 80190ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	4619      	mov	r1, r3
 80190d4:	68f8      	ldr	r0, [r7, #12]
 80190d6:	f000 f803 	bl	80190e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80190da:	f000 f8d5 	bl	8019288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80190de:	e7f1      	b.n	80190c4 <prvTimerTask+0x8>

080190e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80190e0:	b580      	push	{r7, lr}
 80190e2:	b084      	sub	sp, #16
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	6078      	str	r0, [r7, #4]
 80190e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80190ea:	f7ff f919 	bl	8018320 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80190ee:	f107 0308 	add.w	r3, r7, #8
 80190f2:	4618      	mov	r0, r3
 80190f4:	f000 f866 	bl	80191c4 <prvSampleTimeNow>
 80190f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80190fa:	68bb      	ldr	r3, [r7, #8]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d130      	bne.n	8019162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d10a      	bne.n	801911c <prvProcessTimerOrBlockTask+0x3c>
 8019106:	687a      	ldr	r2, [r7, #4]
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	429a      	cmp	r2, r3
 801910c:	d806      	bhi.n	801911c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801910e:	f7ff f915 	bl	801833c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019112:	68f9      	ldr	r1, [r7, #12]
 8019114:	6878      	ldr	r0, [r7, #4]
 8019116:	f7ff ff85 	bl	8019024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801911a:	e024      	b.n	8019166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d008      	beq.n	8019134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019122:	4b13      	ldr	r3, [pc, #76]	; (8019170 <prvProcessTimerOrBlockTask+0x90>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d101      	bne.n	8019130 <prvProcessTimerOrBlockTask+0x50>
 801912c:	2301      	movs	r3, #1
 801912e:	e000      	b.n	8019132 <prvProcessTimerOrBlockTask+0x52>
 8019130:	2300      	movs	r3, #0
 8019132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019134:	4b0f      	ldr	r3, [pc, #60]	; (8019174 <prvProcessTimerOrBlockTask+0x94>)
 8019136:	6818      	ldr	r0, [r3, #0]
 8019138:	687a      	ldr	r2, [r7, #4]
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	1ad3      	subs	r3, r2, r3
 801913e:	683a      	ldr	r2, [r7, #0]
 8019140:	4619      	mov	r1, r3
 8019142:	f7fe fe5d 	bl	8017e00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019146:	f7ff f8f9 	bl	801833c <xTaskResumeAll>
 801914a:	4603      	mov	r3, r0
 801914c:	2b00      	cmp	r3, #0
 801914e:	d10a      	bne.n	8019166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019150:	4b09      	ldr	r3, [pc, #36]	; (8019178 <prvProcessTimerOrBlockTask+0x98>)
 8019152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019156:	601a      	str	r2, [r3, #0]
 8019158:	f3bf 8f4f 	dsb	sy
 801915c:	f3bf 8f6f 	isb	sy
}
 8019160:	e001      	b.n	8019166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019162:	f7ff f8eb 	bl	801833c <xTaskResumeAll>
}
 8019166:	bf00      	nop
 8019168:	3710      	adds	r7, #16
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}
 801916e:	bf00      	nop
 8019170:	24006100 	.word	0x24006100
 8019174:	24006104 	.word	0x24006104
 8019178:	e000ed04 	.word	0xe000ed04

0801917c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801917c:	b480      	push	{r7}
 801917e:	b085      	sub	sp, #20
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019184:	4b0e      	ldr	r3, [pc, #56]	; (80191c0 <prvGetNextExpireTime+0x44>)
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d101      	bne.n	8019192 <prvGetNextExpireTime+0x16>
 801918e:	2201      	movs	r2, #1
 8019190:	e000      	b.n	8019194 <prvGetNextExpireTime+0x18>
 8019192:	2200      	movs	r2, #0
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d105      	bne.n	80191ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80191a0:	4b07      	ldr	r3, [pc, #28]	; (80191c0 <prvGetNextExpireTime+0x44>)
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	68db      	ldr	r3, [r3, #12]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	60fb      	str	r3, [r7, #12]
 80191aa:	e001      	b.n	80191b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80191ac:	2300      	movs	r3, #0
 80191ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80191b0:	68fb      	ldr	r3, [r7, #12]
}
 80191b2:	4618      	mov	r0, r3
 80191b4:	3714      	adds	r7, #20
 80191b6:	46bd      	mov	sp, r7
 80191b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191bc:	4770      	bx	lr
 80191be:	bf00      	nop
 80191c0:	240060fc 	.word	0x240060fc

080191c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b084      	sub	sp, #16
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80191cc:	f7ff f954 	bl	8018478 <xTaskGetTickCount>
 80191d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80191d2:	4b0b      	ldr	r3, [pc, #44]	; (8019200 <prvSampleTimeNow+0x3c>)
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	68fa      	ldr	r2, [r7, #12]
 80191d8:	429a      	cmp	r2, r3
 80191da:	d205      	bcs.n	80191e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80191dc:	f000 f936 	bl	801944c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2201      	movs	r2, #1
 80191e4:	601a      	str	r2, [r3, #0]
 80191e6:	e002      	b.n	80191ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2200      	movs	r2, #0
 80191ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80191ee:	4a04      	ldr	r2, [pc, #16]	; (8019200 <prvSampleTimeNow+0x3c>)
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80191f4:	68fb      	ldr	r3, [r7, #12]
}
 80191f6:	4618      	mov	r0, r3
 80191f8:	3710      	adds	r7, #16
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}
 80191fe:	bf00      	nop
 8019200:	2400610c 	.word	0x2400610c

08019204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b086      	sub	sp, #24
 8019208:	af00      	add	r7, sp, #0
 801920a:	60f8      	str	r0, [r7, #12]
 801920c:	60b9      	str	r1, [r7, #8]
 801920e:	607a      	str	r2, [r7, #4]
 8019210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019212:	2300      	movs	r3, #0
 8019214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	68ba      	ldr	r2, [r7, #8]
 801921a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	68fa      	ldr	r2, [r7, #12]
 8019220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019222:	68ba      	ldr	r2, [r7, #8]
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	429a      	cmp	r2, r3
 8019228:	d812      	bhi.n	8019250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801922a:	687a      	ldr	r2, [r7, #4]
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	1ad2      	subs	r2, r2, r3
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	699b      	ldr	r3, [r3, #24]
 8019234:	429a      	cmp	r2, r3
 8019236:	d302      	bcc.n	801923e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019238:	2301      	movs	r3, #1
 801923a:	617b      	str	r3, [r7, #20]
 801923c:	e01b      	b.n	8019276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801923e:	4b10      	ldr	r3, [pc, #64]	; (8019280 <prvInsertTimerInActiveList+0x7c>)
 8019240:	681a      	ldr	r2, [r3, #0]
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	3304      	adds	r3, #4
 8019246:	4619      	mov	r1, r3
 8019248:	4610      	mov	r0, r2
 801924a:	f7fd fce6 	bl	8016c1a <vListInsert>
 801924e:	e012      	b.n	8019276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	683b      	ldr	r3, [r7, #0]
 8019254:	429a      	cmp	r2, r3
 8019256:	d206      	bcs.n	8019266 <prvInsertTimerInActiveList+0x62>
 8019258:	68ba      	ldr	r2, [r7, #8]
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	429a      	cmp	r2, r3
 801925e:	d302      	bcc.n	8019266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019260:	2301      	movs	r3, #1
 8019262:	617b      	str	r3, [r7, #20]
 8019264:	e007      	b.n	8019276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019266:	4b07      	ldr	r3, [pc, #28]	; (8019284 <prvInsertTimerInActiveList+0x80>)
 8019268:	681a      	ldr	r2, [r3, #0]
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	3304      	adds	r3, #4
 801926e:	4619      	mov	r1, r3
 8019270:	4610      	mov	r0, r2
 8019272:	f7fd fcd2 	bl	8016c1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019276:	697b      	ldr	r3, [r7, #20]
}
 8019278:	4618      	mov	r0, r3
 801927a:	3718      	adds	r7, #24
 801927c:	46bd      	mov	sp, r7
 801927e:	bd80      	pop	{r7, pc}
 8019280:	24006100 	.word	0x24006100
 8019284:	240060fc 	.word	0x240060fc

08019288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b08e      	sub	sp, #56	; 0x38
 801928c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801928e:	e0ca      	b.n	8019426 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	2b00      	cmp	r3, #0
 8019294:	da18      	bge.n	80192c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019296:	1d3b      	adds	r3, r7, #4
 8019298:	3304      	adds	r3, #4
 801929a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d10a      	bne.n	80192b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80192a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192a6:	f383 8811 	msr	BASEPRI, r3
 80192aa:	f3bf 8f6f 	isb	sy
 80192ae:	f3bf 8f4f 	dsb	sy
 80192b2:	61fb      	str	r3, [r7, #28]
}
 80192b4:	bf00      	nop
 80192b6:	e7fe      	b.n	80192b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80192b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192be:	6850      	ldr	r0, [r2, #4]
 80192c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192c2:	6892      	ldr	r2, [r2, #8]
 80192c4:	4611      	mov	r1, r2
 80192c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	f2c0 80aa 	blt.w	8019424 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80192d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d6:	695b      	ldr	r3, [r3, #20]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d004      	beq.n	80192e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80192dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192de:	3304      	adds	r3, #4
 80192e0:	4618      	mov	r0, r3
 80192e2:	f7fd fcd3 	bl	8016c8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80192e6:	463b      	mov	r3, r7
 80192e8:	4618      	mov	r0, r3
 80192ea:	f7ff ff6b 	bl	80191c4 <prvSampleTimeNow>
 80192ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	2b09      	cmp	r3, #9
 80192f4:	f200 8097 	bhi.w	8019426 <prvProcessReceivedCommands+0x19e>
 80192f8:	a201      	add	r2, pc, #4	; (adr r2, 8019300 <prvProcessReceivedCommands+0x78>)
 80192fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192fe:	bf00      	nop
 8019300:	08019329 	.word	0x08019329
 8019304:	08019329 	.word	0x08019329
 8019308:	08019329 	.word	0x08019329
 801930c:	0801939d 	.word	0x0801939d
 8019310:	080193b1 	.word	0x080193b1
 8019314:	080193fb 	.word	0x080193fb
 8019318:	08019329 	.word	0x08019329
 801931c:	08019329 	.word	0x08019329
 8019320:	0801939d 	.word	0x0801939d
 8019324:	080193b1 	.word	0x080193b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801932a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801932e:	f043 0301 	orr.w	r3, r3, #1
 8019332:	b2da      	uxtb	r2, r3
 8019334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801933a:	68ba      	ldr	r2, [r7, #8]
 801933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801933e:	699b      	ldr	r3, [r3, #24]
 8019340:	18d1      	adds	r1, r2, r3
 8019342:	68bb      	ldr	r3, [r7, #8]
 8019344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019348:	f7ff ff5c 	bl	8019204 <prvInsertTimerInActiveList>
 801934c:	4603      	mov	r3, r0
 801934e:	2b00      	cmp	r3, #0
 8019350:	d069      	beq.n	8019426 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019354:	6a1b      	ldr	r3, [r3, #32]
 8019356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019358:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801935c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019360:	f003 0304 	and.w	r3, r3, #4
 8019364:	2b00      	cmp	r3, #0
 8019366:	d05e      	beq.n	8019426 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019368:	68ba      	ldr	r2, [r7, #8]
 801936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801936c:	699b      	ldr	r3, [r3, #24]
 801936e:	441a      	add	r2, r3
 8019370:	2300      	movs	r3, #0
 8019372:	9300      	str	r3, [sp, #0]
 8019374:	2300      	movs	r3, #0
 8019376:	2100      	movs	r1, #0
 8019378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801937a:	f7ff fe05 	bl	8018f88 <xTimerGenericCommand>
 801937e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019380:	6a3b      	ldr	r3, [r7, #32]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d14f      	bne.n	8019426 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801938a:	f383 8811 	msr	BASEPRI, r3
 801938e:	f3bf 8f6f 	isb	sy
 8019392:	f3bf 8f4f 	dsb	sy
 8019396:	61bb      	str	r3, [r7, #24]
}
 8019398:	bf00      	nop
 801939a:	e7fe      	b.n	801939a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801939e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193a2:	f023 0301 	bic.w	r3, r3, #1
 80193a6:	b2da      	uxtb	r2, r3
 80193a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80193ae:	e03a      	b.n	8019426 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80193b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193b6:	f043 0301 	orr.w	r3, r3, #1
 80193ba:	b2da      	uxtb	r2, r3
 80193bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80193c2:	68ba      	ldr	r2, [r7, #8]
 80193c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80193c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ca:	699b      	ldr	r3, [r3, #24]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d10a      	bne.n	80193e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80193d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193d4:	f383 8811 	msr	BASEPRI, r3
 80193d8:	f3bf 8f6f 	isb	sy
 80193dc:	f3bf 8f4f 	dsb	sy
 80193e0:	617b      	str	r3, [r7, #20]
}
 80193e2:	bf00      	nop
 80193e4:	e7fe      	b.n	80193e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80193e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e8:	699a      	ldr	r2, [r3, #24]
 80193ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ec:	18d1      	adds	r1, r2, r3
 80193ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193f4:	f7ff ff06 	bl	8019204 <prvInsertTimerInActiveList>
					break;
 80193f8:	e015      	b.n	8019426 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80193fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019400:	f003 0302 	and.w	r3, r3, #2
 8019404:	2b00      	cmp	r3, #0
 8019406:	d103      	bne.n	8019410 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801940a:	f000 fbe1 	bl	8019bd0 <vPortFree>
 801940e:	e00a      	b.n	8019426 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019416:	f023 0301 	bic.w	r3, r3, #1
 801941a:	b2da      	uxtb	r2, r3
 801941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019422:	e000      	b.n	8019426 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019424:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019426:	4b08      	ldr	r3, [pc, #32]	; (8019448 <prvProcessReceivedCommands+0x1c0>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	1d39      	adds	r1, r7, #4
 801942c:	2200      	movs	r2, #0
 801942e:	4618      	mov	r0, r3
 8019430:	f7fe f8da 	bl	80175e8 <xQueueReceive>
 8019434:	4603      	mov	r3, r0
 8019436:	2b00      	cmp	r3, #0
 8019438:	f47f af2a 	bne.w	8019290 <prvProcessReceivedCommands+0x8>
	}
}
 801943c:	bf00      	nop
 801943e:	bf00      	nop
 8019440:	3730      	adds	r7, #48	; 0x30
 8019442:	46bd      	mov	sp, r7
 8019444:	bd80      	pop	{r7, pc}
 8019446:	bf00      	nop
 8019448:	24006104 	.word	0x24006104

0801944c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b088      	sub	sp, #32
 8019450:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019452:	e048      	b.n	80194e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019454:	4b2d      	ldr	r3, [pc, #180]	; (801950c <prvSwitchTimerLists+0xc0>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	68db      	ldr	r3, [r3, #12]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801945e:	4b2b      	ldr	r3, [pc, #172]	; (801950c <prvSwitchTimerLists+0xc0>)
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	68db      	ldr	r3, [r3, #12]
 8019464:	68db      	ldr	r3, [r3, #12]
 8019466:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	3304      	adds	r3, #4
 801946c:	4618      	mov	r0, r3
 801946e:	f7fd fc0d 	bl	8016c8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	6a1b      	ldr	r3, [r3, #32]
 8019476:	68f8      	ldr	r0, [r7, #12]
 8019478:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019480:	f003 0304 	and.w	r3, r3, #4
 8019484:	2b00      	cmp	r3, #0
 8019486:	d02e      	beq.n	80194e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	699b      	ldr	r3, [r3, #24]
 801948c:	693a      	ldr	r2, [r7, #16]
 801948e:	4413      	add	r3, r2
 8019490:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019492:	68ba      	ldr	r2, [r7, #8]
 8019494:	693b      	ldr	r3, [r7, #16]
 8019496:	429a      	cmp	r2, r3
 8019498:	d90e      	bls.n	80194b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	68ba      	ldr	r2, [r7, #8]
 801949e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	68fa      	ldr	r2, [r7, #12]
 80194a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80194a6:	4b19      	ldr	r3, [pc, #100]	; (801950c <prvSwitchTimerLists+0xc0>)
 80194a8:	681a      	ldr	r2, [r3, #0]
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	3304      	adds	r3, #4
 80194ae:	4619      	mov	r1, r3
 80194b0:	4610      	mov	r0, r2
 80194b2:	f7fd fbb2 	bl	8016c1a <vListInsert>
 80194b6:	e016      	b.n	80194e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80194b8:	2300      	movs	r3, #0
 80194ba:	9300      	str	r3, [sp, #0]
 80194bc:	2300      	movs	r3, #0
 80194be:	693a      	ldr	r2, [r7, #16]
 80194c0:	2100      	movs	r1, #0
 80194c2:	68f8      	ldr	r0, [r7, #12]
 80194c4:	f7ff fd60 	bl	8018f88 <xTimerGenericCommand>
 80194c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d10a      	bne.n	80194e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80194d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194d4:	f383 8811 	msr	BASEPRI, r3
 80194d8:	f3bf 8f6f 	isb	sy
 80194dc:	f3bf 8f4f 	dsb	sy
 80194e0:	603b      	str	r3, [r7, #0]
}
 80194e2:	bf00      	nop
 80194e4:	e7fe      	b.n	80194e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80194e6:	4b09      	ldr	r3, [pc, #36]	; (801950c <prvSwitchTimerLists+0xc0>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d1b1      	bne.n	8019454 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80194f0:	4b06      	ldr	r3, [pc, #24]	; (801950c <prvSwitchTimerLists+0xc0>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80194f6:	4b06      	ldr	r3, [pc, #24]	; (8019510 <prvSwitchTimerLists+0xc4>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	4a04      	ldr	r2, [pc, #16]	; (801950c <prvSwitchTimerLists+0xc0>)
 80194fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80194fe:	4a04      	ldr	r2, [pc, #16]	; (8019510 <prvSwitchTimerLists+0xc4>)
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	6013      	str	r3, [r2, #0]
}
 8019504:	bf00      	nop
 8019506:	3718      	adds	r7, #24
 8019508:	46bd      	mov	sp, r7
 801950a:	bd80      	pop	{r7, pc}
 801950c:	240060fc 	.word	0x240060fc
 8019510:	24006100 	.word	0x24006100

08019514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b082      	sub	sp, #8
 8019518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801951a:	f000 f96b 	bl	80197f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801951e:	4b15      	ldr	r3, [pc, #84]	; (8019574 <prvCheckForValidListAndQueue+0x60>)
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d120      	bne.n	8019568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019526:	4814      	ldr	r0, [pc, #80]	; (8019578 <prvCheckForValidListAndQueue+0x64>)
 8019528:	f7fd fb26 	bl	8016b78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801952c:	4813      	ldr	r0, [pc, #76]	; (801957c <prvCheckForValidListAndQueue+0x68>)
 801952e:	f7fd fb23 	bl	8016b78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019532:	4b13      	ldr	r3, [pc, #76]	; (8019580 <prvCheckForValidListAndQueue+0x6c>)
 8019534:	4a10      	ldr	r2, [pc, #64]	; (8019578 <prvCheckForValidListAndQueue+0x64>)
 8019536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019538:	4b12      	ldr	r3, [pc, #72]	; (8019584 <prvCheckForValidListAndQueue+0x70>)
 801953a:	4a10      	ldr	r2, [pc, #64]	; (801957c <prvCheckForValidListAndQueue+0x68>)
 801953c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801953e:	2300      	movs	r3, #0
 8019540:	9300      	str	r3, [sp, #0]
 8019542:	4b11      	ldr	r3, [pc, #68]	; (8019588 <prvCheckForValidListAndQueue+0x74>)
 8019544:	4a11      	ldr	r2, [pc, #68]	; (801958c <prvCheckForValidListAndQueue+0x78>)
 8019546:	2110      	movs	r1, #16
 8019548:	200a      	movs	r0, #10
 801954a:	f7fd fc31 	bl	8016db0 <xQueueGenericCreateStatic>
 801954e:	4603      	mov	r3, r0
 8019550:	4a08      	ldr	r2, [pc, #32]	; (8019574 <prvCheckForValidListAndQueue+0x60>)
 8019552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019554:	4b07      	ldr	r3, [pc, #28]	; (8019574 <prvCheckForValidListAndQueue+0x60>)
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d005      	beq.n	8019568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801955c:	4b05      	ldr	r3, [pc, #20]	; (8019574 <prvCheckForValidListAndQueue+0x60>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	490b      	ldr	r1, [pc, #44]	; (8019590 <prvCheckForValidListAndQueue+0x7c>)
 8019562:	4618      	mov	r0, r3
 8019564:	f7fe fbf8 	bl	8017d58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019568:	f000 f974 	bl	8019854 <vPortExitCritical>
}
 801956c:	bf00      	nop
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
 8019572:	bf00      	nop
 8019574:	24006104 	.word	0x24006104
 8019578:	240060d4 	.word	0x240060d4
 801957c:	240060e8 	.word	0x240060e8
 8019580:	240060fc 	.word	0x240060fc
 8019584:	24006100 	.word	0x24006100
 8019588:	240061b0 	.word	0x240061b0
 801958c:	24006110 	.word	0x24006110
 8019590:	08028484 	.word	0x08028484

08019594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019594:	b480      	push	{r7}
 8019596:	b085      	sub	sp, #20
 8019598:	af00      	add	r7, sp, #0
 801959a:	60f8      	str	r0, [r7, #12]
 801959c:	60b9      	str	r1, [r7, #8]
 801959e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	3b04      	subs	r3, #4
 80195a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80195ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	3b04      	subs	r3, #4
 80195b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	f023 0201 	bic.w	r2, r3, #1
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	3b04      	subs	r3, #4
 80195c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80195c4:	4a0c      	ldr	r2, [pc, #48]	; (80195f8 <pxPortInitialiseStack+0x64>)
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	3b14      	subs	r3, #20
 80195ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80195d0:	687a      	ldr	r2, [r7, #4]
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	3b04      	subs	r3, #4
 80195da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	f06f 0202 	mvn.w	r2, #2
 80195e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	3b20      	subs	r3, #32
 80195e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80195ea:	68fb      	ldr	r3, [r7, #12]
}
 80195ec:	4618      	mov	r0, r3
 80195ee:	3714      	adds	r7, #20
 80195f0:	46bd      	mov	sp, r7
 80195f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f6:	4770      	bx	lr
 80195f8:	080195fd 	.word	0x080195fd

080195fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80195fc:	b480      	push	{r7}
 80195fe:	b085      	sub	sp, #20
 8019600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019602:	2300      	movs	r3, #0
 8019604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019606:	4b12      	ldr	r3, [pc, #72]	; (8019650 <prvTaskExitError+0x54>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801960e:	d00a      	beq.n	8019626 <prvTaskExitError+0x2a>
	__asm volatile
 8019610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019614:	f383 8811 	msr	BASEPRI, r3
 8019618:	f3bf 8f6f 	isb	sy
 801961c:	f3bf 8f4f 	dsb	sy
 8019620:	60fb      	str	r3, [r7, #12]
}
 8019622:	bf00      	nop
 8019624:	e7fe      	b.n	8019624 <prvTaskExitError+0x28>
	__asm volatile
 8019626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801962a:	f383 8811 	msr	BASEPRI, r3
 801962e:	f3bf 8f6f 	isb	sy
 8019632:	f3bf 8f4f 	dsb	sy
 8019636:	60bb      	str	r3, [r7, #8]
}
 8019638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801963a:	bf00      	nop
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d0fc      	beq.n	801963c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019642:	bf00      	nop
 8019644:	bf00      	nop
 8019646:	3714      	adds	r7, #20
 8019648:	46bd      	mov	sp, r7
 801964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964e:	4770      	bx	lr
 8019650:	24000454 	.word	0x24000454
	...

08019660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019660:	4b07      	ldr	r3, [pc, #28]	; (8019680 <pxCurrentTCBConst2>)
 8019662:	6819      	ldr	r1, [r3, #0]
 8019664:	6808      	ldr	r0, [r1, #0]
 8019666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801966a:	f380 8809 	msr	PSP, r0
 801966e:	f3bf 8f6f 	isb	sy
 8019672:	f04f 0000 	mov.w	r0, #0
 8019676:	f380 8811 	msr	BASEPRI, r0
 801967a:	4770      	bx	lr
 801967c:	f3af 8000 	nop.w

08019680 <pxCurrentTCBConst2>:
 8019680:	24005bd4 	.word	0x24005bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019684:	bf00      	nop
 8019686:	bf00      	nop

08019688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019688:	4808      	ldr	r0, [pc, #32]	; (80196ac <prvPortStartFirstTask+0x24>)
 801968a:	6800      	ldr	r0, [r0, #0]
 801968c:	6800      	ldr	r0, [r0, #0]
 801968e:	f380 8808 	msr	MSP, r0
 8019692:	f04f 0000 	mov.w	r0, #0
 8019696:	f380 8814 	msr	CONTROL, r0
 801969a:	b662      	cpsie	i
 801969c:	b661      	cpsie	f
 801969e:	f3bf 8f4f 	dsb	sy
 80196a2:	f3bf 8f6f 	isb	sy
 80196a6:	df00      	svc	0
 80196a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80196aa:	bf00      	nop
 80196ac:	e000ed08 	.word	0xe000ed08

080196b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b086      	sub	sp, #24
 80196b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80196b6:	4b46      	ldr	r3, [pc, #280]	; (80197d0 <xPortStartScheduler+0x120>)
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	4a46      	ldr	r2, [pc, #280]	; (80197d4 <xPortStartScheduler+0x124>)
 80196bc:	4293      	cmp	r3, r2
 80196be:	d10a      	bne.n	80196d6 <xPortStartScheduler+0x26>
	__asm volatile
 80196c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196c4:	f383 8811 	msr	BASEPRI, r3
 80196c8:	f3bf 8f6f 	isb	sy
 80196cc:	f3bf 8f4f 	dsb	sy
 80196d0:	613b      	str	r3, [r7, #16]
}
 80196d2:	bf00      	nop
 80196d4:	e7fe      	b.n	80196d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80196d6:	4b3e      	ldr	r3, [pc, #248]	; (80197d0 <xPortStartScheduler+0x120>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	4a3f      	ldr	r2, [pc, #252]	; (80197d8 <xPortStartScheduler+0x128>)
 80196dc:	4293      	cmp	r3, r2
 80196de:	d10a      	bne.n	80196f6 <xPortStartScheduler+0x46>
	__asm volatile
 80196e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196e4:	f383 8811 	msr	BASEPRI, r3
 80196e8:	f3bf 8f6f 	isb	sy
 80196ec:	f3bf 8f4f 	dsb	sy
 80196f0:	60fb      	str	r3, [r7, #12]
}
 80196f2:	bf00      	nop
 80196f4:	e7fe      	b.n	80196f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80196f6:	4b39      	ldr	r3, [pc, #228]	; (80197dc <xPortStartScheduler+0x12c>)
 80196f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80196fa:	697b      	ldr	r3, [r7, #20]
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	b2db      	uxtb	r3, r3
 8019700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019702:	697b      	ldr	r3, [r7, #20]
 8019704:	22ff      	movs	r2, #255	; 0xff
 8019706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019708:	697b      	ldr	r3, [r7, #20]
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	b2db      	uxtb	r3, r3
 801970e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019710:	78fb      	ldrb	r3, [r7, #3]
 8019712:	b2db      	uxtb	r3, r3
 8019714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019718:	b2da      	uxtb	r2, r3
 801971a:	4b31      	ldr	r3, [pc, #196]	; (80197e0 <xPortStartScheduler+0x130>)
 801971c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801971e:	4b31      	ldr	r3, [pc, #196]	; (80197e4 <xPortStartScheduler+0x134>)
 8019720:	2207      	movs	r2, #7
 8019722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019724:	e009      	b.n	801973a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019726:	4b2f      	ldr	r3, [pc, #188]	; (80197e4 <xPortStartScheduler+0x134>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	3b01      	subs	r3, #1
 801972c:	4a2d      	ldr	r2, [pc, #180]	; (80197e4 <xPortStartScheduler+0x134>)
 801972e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019730:	78fb      	ldrb	r3, [r7, #3]
 8019732:	b2db      	uxtb	r3, r3
 8019734:	005b      	lsls	r3, r3, #1
 8019736:	b2db      	uxtb	r3, r3
 8019738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801973a:	78fb      	ldrb	r3, [r7, #3]
 801973c:	b2db      	uxtb	r3, r3
 801973e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019742:	2b80      	cmp	r3, #128	; 0x80
 8019744:	d0ef      	beq.n	8019726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019746:	4b27      	ldr	r3, [pc, #156]	; (80197e4 <xPortStartScheduler+0x134>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	f1c3 0307 	rsb	r3, r3, #7
 801974e:	2b04      	cmp	r3, #4
 8019750:	d00a      	beq.n	8019768 <xPortStartScheduler+0xb8>
	__asm volatile
 8019752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019756:	f383 8811 	msr	BASEPRI, r3
 801975a:	f3bf 8f6f 	isb	sy
 801975e:	f3bf 8f4f 	dsb	sy
 8019762:	60bb      	str	r3, [r7, #8]
}
 8019764:	bf00      	nop
 8019766:	e7fe      	b.n	8019766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019768:	4b1e      	ldr	r3, [pc, #120]	; (80197e4 <xPortStartScheduler+0x134>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	021b      	lsls	r3, r3, #8
 801976e:	4a1d      	ldr	r2, [pc, #116]	; (80197e4 <xPortStartScheduler+0x134>)
 8019770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019772:	4b1c      	ldr	r3, [pc, #112]	; (80197e4 <xPortStartScheduler+0x134>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801977a:	4a1a      	ldr	r2, [pc, #104]	; (80197e4 <xPortStartScheduler+0x134>)
 801977c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	b2da      	uxtb	r2, r3
 8019782:	697b      	ldr	r3, [r7, #20]
 8019784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019786:	4b18      	ldr	r3, [pc, #96]	; (80197e8 <xPortStartScheduler+0x138>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	4a17      	ldr	r2, [pc, #92]	; (80197e8 <xPortStartScheduler+0x138>)
 801978c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019792:	4b15      	ldr	r3, [pc, #84]	; (80197e8 <xPortStartScheduler+0x138>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	4a14      	ldr	r2, [pc, #80]	; (80197e8 <xPortStartScheduler+0x138>)
 8019798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801979c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801979e:	f000 f8dd 	bl	801995c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80197a2:	4b12      	ldr	r3, [pc, #72]	; (80197ec <xPortStartScheduler+0x13c>)
 80197a4:	2200      	movs	r2, #0
 80197a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80197a8:	f000 f8fc 	bl	80199a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80197ac:	4b10      	ldr	r3, [pc, #64]	; (80197f0 <xPortStartScheduler+0x140>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	4a0f      	ldr	r2, [pc, #60]	; (80197f0 <xPortStartScheduler+0x140>)
 80197b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80197b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80197b8:	f7ff ff66 	bl	8019688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80197bc:	f7fe ff38 	bl	8018630 <vTaskSwitchContext>
	prvTaskExitError();
 80197c0:	f7ff ff1c 	bl	80195fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80197c4:	2300      	movs	r3, #0
}
 80197c6:	4618      	mov	r0, r3
 80197c8:	3718      	adds	r7, #24
 80197ca:	46bd      	mov	sp, r7
 80197cc:	bd80      	pop	{r7, pc}
 80197ce:	bf00      	nop
 80197d0:	e000ed00 	.word	0xe000ed00
 80197d4:	410fc271 	.word	0x410fc271
 80197d8:	410fc270 	.word	0x410fc270
 80197dc:	e000e400 	.word	0xe000e400
 80197e0:	24006200 	.word	0x24006200
 80197e4:	24006204 	.word	0x24006204
 80197e8:	e000ed20 	.word	0xe000ed20
 80197ec:	24000454 	.word	0x24000454
 80197f0:	e000ef34 	.word	0xe000ef34

080197f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80197f4:	b480      	push	{r7}
 80197f6:	b083      	sub	sp, #12
 80197f8:	af00      	add	r7, sp, #0
	__asm volatile
 80197fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197fe:	f383 8811 	msr	BASEPRI, r3
 8019802:	f3bf 8f6f 	isb	sy
 8019806:	f3bf 8f4f 	dsb	sy
 801980a:	607b      	str	r3, [r7, #4]
}
 801980c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801980e:	4b0f      	ldr	r3, [pc, #60]	; (801984c <vPortEnterCritical+0x58>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	3301      	adds	r3, #1
 8019814:	4a0d      	ldr	r2, [pc, #52]	; (801984c <vPortEnterCritical+0x58>)
 8019816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019818:	4b0c      	ldr	r3, [pc, #48]	; (801984c <vPortEnterCritical+0x58>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	2b01      	cmp	r3, #1
 801981e:	d10f      	bne.n	8019840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019820:	4b0b      	ldr	r3, [pc, #44]	; (8019850 <vPortEnterCritical+0x5c>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	b2db      	uxtb	r3, r3
 8019826:	2b00      	cmp	r3, #0
 8019828:	d00a      	beq.n	8019840 <vPortEnterCritical+0x4c>
	__asm volatile
 801982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801982e:	f383 8811 	msr	BASEPRI, r3
 8019832:	f3bf 8f6f 	isb	sy
 8019836:	f3bf 8f4f 	dsb	sy
 801983a:	603b      	str	r3, [r7, #0]
}
 801983c:	bf00      	nop
 801983e:	e7fe      	b.n	801983e <vPortEnterCritical+0x4a>
	}
}
 8019840:	bf00      	nop
 8019842:	370c      	adds	r7, #12
 8019844:	46bd      	mov	sp, r7
 8019846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984a:	4770      	bx	lr
 801984c:	24000454 	.word	0x24000454
 8019850:	e000ed04 	.word	0xe000ed04

08019854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019854:	b480      	push	{r7}
 8019856:	b083      	sub	sp, #12
 8019858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801985a:	4b12      	ldr	r3, [pc, #72]	; (80198a4 <vPortExitCritical+0x50>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d10a      	bne.n	8019878 <vPortExitCritical+0x24>
	__asm volatile
 8019862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019866:	f383 8811 	msr	BASEPRI, r3
 801986a:	f3bf 8f6f 	isb	sy
 801986e:	f3bf 8f4f 	dsb	sy
 8019872:	607b      	str	r3, [r7, #4]
}
 8019874:	bf00      	nop
 8019876:	e7fe      	b.n	8019876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019878:	4b0a      	ldr	r3, [pc, #40]	; (80198a4 <vPortExitCritical+0x50>)
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	3b01      	subs	r3, #1
 801987e:	4a09      	ldr	r2, [pc, #36]	; (80198a4 <vPortExitCritical+0x50>)
 8019880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019882:	4b08      	ldr	r3, [pc, #32]	; (80198a4 <vPortExitCritical+0x50>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d105      	bne.n	8019896 <vPortExitCritical+0x42>
 801988a:	2300      	movs	r3, #0
 801988c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	f383 8811 	msr	BASEPRI, r3
}
 8019894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019896:	bf00      	nop
 8019898:	370c      	adds	r7, #12
 801989a:	46bd      	mov	sp, r7
 801989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a0:	4770      	bx	lr
 80198a2:	bf00      	nop
 80198a4:	24000454 	.word	0x24000454
	...

080198b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80198b0:	f3ef 8009 	mrs	r0, PSP
 80198b4:	f3bf 8f6f 	isb	sy
 80198b8:	4b15      	ldr	r3, [pc, #84]	; (8019910 <pxCurrentTCBConst>)
 80198ba:	681a      	ldr	r2, [r3, #0]
 80198bc:	f01e 0f10 	tst.w	lr, #16
 80198c0:	bf08      	it	eq
 80198c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80198c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ca:	6010      	str	r0, [r2, #0]
 80198cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80198d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80198d4:	f380 8811 	msr	BASEPRI, r0
 80198d8:	f3bf 8f4f 	dsb	sy
 80198dc:	f3bf 8f6f 	isb	sy
 80198e0:	f7fe fea6 	bl	8018630 <vTaskSwitchContext>
 80198e4:	f04f 0000 	mov.w	r0, #0
 80198e8:	f380 8811 	msr	BASEPRI, r0
 80198ec:	bc09      	pop	{r0, r3}
 80198ee:	6819      	ldr	r1, [r3, #0]
 80198f0:	6808      	ldr	r0, [r1, #0]
 80198f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198f6:	f01e 0f10 	tst.w	lr, #16
 80198fa:	bf08      	it	eq
 80198fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019900:	f380 8809 	msr	PSP, r0
 8019904:	f3bf 8f6f 	isb	sy
 8019908:	4770      	bx	lr
 801990a:	bf00      	nop
 801990c:	f3af 8000 	nop.w

08019910 <pxCurrentTCBConst>:
 8019910:	24005bd4 	.word	0x24005bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019914:	bf00      	nop
 8019916:	bf00      	nop

08019918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019918:	b580      	push	{r7, lr}
 801991a:	b082      	sub	sp, #8
 801991c:	af00      	add	r7, sp, #0
	__asm volatile
 801991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019922:	f383 8811 	msr	BASEPRI, r3
 8019926:	f3bf 8f6f 	isb	sy
 801992a:	f3bf 8f4f 	dsb	sy
 801992e:	607b      	str	r3, [r7, #4]
}
 8019930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019932:	f7fe fdc3 	bl	80184bc <xTaskIncrementTick>
 8019936:	4603      	mov	r3, r0
 8019938:	2b00      	cmp	r3, #0
 801993a:	d003      	beq.n	8019944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801993c:	4b06      	ldr	r3, [pc, #24]	; (8019958 <xPortSysTickHandler+0x40>)
 801993e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019942:	601a      	str	r2, [r3, #0]
 8019944:	2300      	movs	r3, #0
 8019946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	f383 8811 	msr	BASEPRI, r3
}
 801994e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019950:	bf00      	nop
 8019952:	3708      	adds	r7, #8
 8019954:	46bd      	mov	sp, r7
 8019956:	bd80      	pop	{r7, pc}
 8019958:	e000ed04 	.word	0xe000ed04

0801995c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801995c:	b480      	push	{r7}
 801995e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019960:	4b0b      	ldr	r3, [pc, #44]	; (8019990 <vPortSetupTimerInterrupt+0x34>)
 8019962:	2200      	movs	r2, #0
 8019964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019966:	4b0b      	ldr	r3, [pc, #44]	; (8019994 <vPortSetupTimerInterrupt+0x38>)
 8019968:	2200      	movs	r2, #0
 801996a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801996c:	4b0a      	ldr	r3, [pc, #40]	; (8019998 <vPortSetupTimerInterrupt+0x3c>)
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	4a0a      	ldr	r2, [pc, #40]	; (801999c <vPortSetupTimerInterrupt+0x40>)
 8019972:	fba2 2303 	umull	r2, r3, r2, r3
 8019976:	099b      	lsrs	r3, r3, #6
 8019978:	4a09      	ldr	r2, [pc, #36]	; (80199a0 <vPortSetupTimerInterrupt+0x44>)
 801997a:	3b01      	subs	r3, #1
 801997c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801997e:	4b04      	ldr	r3, [pc, #16]	; (8019990 <vPortSetupTimerInterrupt+0x34>)
 8019980:	2207      	movs	r2, #7
 8019982:	601a      	str	r2, [r3, #0]
}
 8019984:	bf00      	nop
 8019986:	46bd      	mov	sp, r7
 8019988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998c:	4770      	bx	lr
 801998e:	bf00      	nop
 8019990:	e000e010 	.word	0xe000e010
 8019994:	e000e018 	.word	0xe000e018
 8019998:	240003a4 	.word	0x240003a4
 801999c:	10624dd3 	.word	0x10624dd3
 80199a0:	e000e014 	.word	0xe000e014

080199a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80199a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80199b4 <vPortEnableVFP+0x10>
 80199a8:	6801      	ldr	r1, [r0, #0]
 80199aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80199ae:	6001      	str	r1, [r0, #0]
 80199b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80199b2:	bf00      	nop
 80199b4:	e000ed88 	.word	0xe000ed88

080199b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80199b8:	b480      	push	{r7}
 80199ba:	b085      	sub	sp, #20
 80199bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80199be:	f3ef 8305 	mrs	r3, IPSR
 80199c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	2b0f      	cmp	r3, #15
 80199c8:	d914      	bls.n	80199f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80199ca:	4a17      	ldr	r2, [pc, #92]	; (8019a28 <vPortValidateInterruptPriority+0x70>)
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	4413      	add	r3, r2
 80199d0:	781b      	ldrb	r3, [r3, #0]
 80199d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80199d4:	4b15      	ldr	r3, [pc, #84]	; (8019a2c <vPortValidateInterruptPriority+0x74>)
 80199d6:	781b      	ldrb	r3, [r3, #0]
 80199d8:	7afa      	ldrb	r2, [r7, #11]
 80199da:	429a      	cmp	r2, r3
 80199dc:	d20a      	bcs.n	80199f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80199de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e2:	f383 8811 	msr	BASEPRI, r3
 80199e6:	f3bf 8f6f 	isb	sy
 80199ea:	f3bf 8f4f 	dsb	sy
 80199ee:	607b      	str	r3, [r7, #4]
}
 80199f0:	bf00      	nop
 80199f2:	e7fe      	b.n	80199f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80199f4:	4b0e      	ldr	r3, [pc, #56]	; (8019a30 <vPortValidateInterruptPriority+0x78>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80199fc:	4b0d      	ldr	r3, [pc, #52]	; (8019a34 <vPortValidateInterruptPriority+0x7c>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	429a      	cmp	r2, r3
 8019a02:	d90a      	bls.n	8019a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a08:	f383 8811 	msr	BASEPRI, r3
 8019a0c:	f3bf 8f6f 	isb	sy
 8019a10:	f3bf 8f4f 	dsb	sy
 8019a14:	603b      	str	r3, [r7, #0]
}
 8019a16:	bf00      	nop
 8019a18:	e7fe      	b.n	8019a18 <vPortValidateInterruptPriority+0x60>
	}
 8019a1a:	bf00      	nop
 8019a1c:	3714      	adds	r7, #20
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a24:	4770      	bx	lr
 8019a26:	bf00      	nop
 8019a28:	e000e3f0 	.word	0xe000e3f0
 8019a2c:	24006200 	.word	0x24006200
 8019a30:	e000ed0c 	.word	0xe000ed0c
 8019a34:	24006204 	.word	0x24006204

08019a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b08a      	sub	sp, #40	; 0x28
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019a40:	2300      	movs	r3, #0
 8019a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019a44:	f7fe fc6c 	bl	8018320 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019a48:	4b5b      	ldr	r3, [pc, #364]	; (8019bb8 <pvPortMalloc+0x180>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d101      	bne.n	8019a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019a50:	f000 f920 	bl	8019c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019a54:	4b59      	ldr	r3, [pc, #356]	; (8019bbc <pvPortMalloc+0x184>)
 8019a56:	681a      	ldr	r2, [r3, #0]
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	4013      	ands	r3, r2
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	f040 8093 	bne.w	8019b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d01d      	beq.n	8019aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019a68:	2208      	movs	r2, #8
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	4413      	add	r3, r2
 8019a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	f003 0307 	and.w	r3, r3, #7
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d014      	beq.n	8019aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	f023 0307 	bic.w	r3, r3, #7
 8019a80:	3308      	adds	r3, #8
 8019a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	f003 0307 	and.w	r3, r3, #7
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d00a      	beq.n	8019aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8019a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a92:	f383 8811 	msr	BASEPRI, r3
 8019a96:	f3bf 8f6f 	isb	sy
 8019a9a:	f3bf 8f4f 	dsb	sy
 8019a9e:	617b      	str	r3, [r7, #20]
}
 8019aa0:	bf00      	nop
 8019aa2:	e7fe      	b.n	8019aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d06e      	beq.n	8019b88 <pvPortMalloc+0x150>
 8019aaa:	4b45      	ldr	r3, [pc, #276]	; (8019bc0 <pvPortMalloc+0x188>)
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	687a      	ldr	r2, [r7, #4]
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	d869      	bhi.n	8019b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019ab4:	4b43      	ldr	r3, [pc, #268]	; (8019bc4 <pvPortMalloc+0x18c>)
 8019ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019ab8:	4b42      	ldr	r3, [pc, #264]	; (8019bc4 <pvPortMalloc+0x18c>)
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019abe:	e004      	b.n	8019aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019acc:	685b      	ldr	r3, [r3, #4]
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d903      	bls.n	8019adc <pvPortMalloc+0xa4>
 8019ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d1f1      	bne.n	8019ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019adc:	4b36      	ldr	r3, [pc, #216]	; (8019bb8 <pvPortMalloc+0x180>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d050      	beq.n	8019b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019ae6:	6a3b      	ldr	r3, [r7, #32]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	2208      	movs	r2, #8
 8019aec:	4413      	add	r3, r2
 8019aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019af2:	681a      	ldr	r2, [r3, #0]
 8019af4:	6a3b      	ldr	r3, [r7, #32]
 8019af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019afa:	685a      	ldr	r2, [r3, #4]
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	1ad2      	subs	r2, r2, r3
 8019b00:	2308      	movs	r3, #8
 8019b02:	005b      	lsls	r3, r3, #1
 8019b04:	429a      	cmp	r2, r3
 8019b06:	d91f      	bls.n	8019b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	4413      	add	r3, r2
 8019b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b10:	69bb      	ldr	r3, [r7, #24]
 8019b12:	f003 0307 	and.w	r3, r3, #7
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d00a      	beq.n	8019b30 <pvPortMalloc+0xf8>
	__asm volatile
 8019b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b1e:	f383 8811 	msr	BASEPRI, r3
 8019b22:	f3bf 8f6f 	isb	sy
 8019b26:	f3bf 8f4f 	dsb	sy
 8019b2a:	613b      	str	r3, [r7, #16]
}
 8019b2c:	bf00      	nop
 8019b2e:	e7fe      	b.n	8019b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b32:	685a      	ldr	r2, [r3, #4]
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	1ad2      	subs	r2, r2, r3
 8019b38:	69bb      	ldr	r3, [r7, #24]
 8019b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019b42:	69b8      	ldr	r0, [r7, #24]
 8019b44:	f000 f908 	bl	8019d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019b48:	4b1d      	ldr	r3, [pc, #116]	; (8019bc0 <pvPortMalloc+0x188>)
 8019b4a:	681a      	ldr	r2, [r3, #0]
 8019b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b4e:	685b      	ldr	r3, [r3, #4]
 8019b50:	1ad3      	subs	r3, r2, r3
 8019b52:	4a1b      	ldr	r2, [pc, #108]	; (8019bc0 <pvPortMalloc+0x188>)
 8019b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019b56:	4b1a      	ldr	r3, [pc, #104]	; (8019bc0 <pvPortMalloc+0x188>)
 8019b58:	681a      	ldr	r2, [r3, #0]
 8019b5a:	4b1b      	ldr	r3, [pc, #108]	; (8019bc8 <pvPortMalloc+0x190>)
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d203      	bcs.n	8019b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019b62:	4b17      	ldr	r3, [pc, #92]	; (8019bc0 <pvPortMalloc+0x188>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	4a18      	ldr	r2, [pc, #96]	; (8019bc8 <pvPortMalloc+0x190>)
 8019b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b6c:	685a      	ldr	r2, [r3, #4]
 8019b6e:	4b13      	ldr	r3, [pc, #76]	; (8019bbc <pvPortMalloc+0x184>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	431a      	orrs	r2, r3
 8019b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b7a:	2200      	movs	r2, #0
 8019b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019b7e:	4b13      	ldr	r3, [pc, #76]	; (8019bcc <pvPortMalloc+0x194>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	3301      	adds	r3, #1
 8019b84:	4a11      	ldr	r2, [pc, #68]	; (8019bcc <pvPortMalloc+0x194>)
 8019b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019b88:	f7fe fbd8 	bl	801833c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b8c:	69fb      	ldr	r3, [r7, #28]
 8019b8e:	f003 0307 	and.w	r3, r3, #7
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d00a      	beq.n	8019bac <pvPortMalloc+0x174>
	__asm volatile
 8019b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b9a:	f383 8811 	msr	BASEPRI, r3
 8019b9e:	f3bf 8f6f 	isb	sy
 8019ba2:	f3bf 8f4f 	dsb	sy
 8019ba6:	60fb      	str	r3, [r7, #12]
}
 8019ba8:	bf00      	nop
 8019baa:	e7fe      	b.n	8019baa <pvPortMalloc+0x172>
	return pvReturn;
 8019bac:	69fb      	ldr	r3, [r7, #28]
}
 8019bae:	4618      	mov	r0, r3
 8019bb0:	3728      	adds	r7, #40	; 0x28
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	bd80      	pop	{r7, pc}
 8019bb6:	bf00      	nop
 8019bb8:	24009e10 	.word	0x24009e10
 8019bbc:	24009e24 	.word	0x24009e24
 8019bc0:	24009e14 	.word	0x24009e14
 8019bc4:	24009e08 	.word	0x24009e08
 8019bc8:	24009e18 	.word	0x24009e18
 8019bcc:	24009e1c 	.word	0x24009e1c

08019bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b086      	sub	sp, #24
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d04d      	beq.n	8019c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019be2:	2308      	movs	r3, #8
 8019be4:	425b      	negs	r3, r3
 8019be6:	697a      	ldr	r2, [r7, #20]
 8019be8:	4413      	add	r3, r2
 8019bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019bec:	697b      	ldr	r3, [r7, #20]
 8019bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019bf0:	693b      	ldr	r3, [r7, #16]
 8019bf2:	685a      	ldr	r2, [r3, #4]
 8019bf4:	4b24      	ldr	r3, [pc, #144]	; (8019c88 <vPortFree+0xb8>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	4013      	ands	r3, r2
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d10a      	bne.n	8019c14 <vPortFree+0x44>
	__asm volatile
 8019bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c02:	f383 8811 	msr	BASEPRI, r3
 8019c06:	f3bf 8f6f 	isb	sy
 8019c0a:	f3bf 8f4f 	dsb	sy
 8019c0e:	60fb      	str	r3, [r7, #12]
}
 8019c10:	bf00      	nop
 8019c12:	e7fe      	b.n	8019c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019c14:	693b      	ldr	r3, [r7, #16]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d00a      	beq.n	8019c32 <vPortFree+0x62>
	__asm volatile
 8019c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c20:	f383 8811 	msr	BASEPRI, r3
 8019c24:	f3bf 8f6f 	isb	sy
 8019c28:	f3bf 8f4f 	dsb	sy
 8019c2c:	60bb      	str	r3, [r7, #8]
}
 8019c2e:	bf00      	nop
 8019c30:	e7fe      	b.n	8019c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019c32:	693b      	ldr	r3, [r7, #16]
 8019c34:	685a      	ldr	r2, [r3, #4]
 8019c36:	4b14      	ldr	r3, [pc, #80]	; (8019c88 <vPortFree+0xb8>)
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	4013      	ands	r3, r2
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d01e      	beq.n	8019c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d11a      	bne.n	8019c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019c48:	693b      	ldr	r3, [r7, #16]
 8019c4a:	685a      	ldr	r2, [r3, #4]
 8019c4c:	4b0e      	ldr	r3, [pc, #56]	; (8019c88 <vPortFree+0xb8>)
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	43db      	mvns	r3, r3
 8019c52:	401a      	ands	r2, r3
 8019c54:	693b      	ldr	r3, [r7, #16]
 8019c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019c58:	f7fe fb62 	bl	8018320 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019c5c:	693b      	ldr	r3, [r7, #16]
 8019c5e:	685a      	ldr	r2, [r3, #4]
 8019c60:	4b0a      	ldr	r3, [pc, #40]	; (8019c8c <vPortFree+0xbc>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	4413      	add	r3, r2
 8019c66:	4a09      	ldr	r2, [pc, #36]	; (8019c8c <vPortFree+0xbc>)
 8019c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019c6a:	6938      	ldr	r0, [r7, #16]
 8019c6c:	f000 f874 	bl	8019d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019c70:	4b07      	ldr	r3, [pc, #28]	; (8019c90 <vPortFree+0xc0>)
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	3301      	adds	r3, #1
 8019c76:	4a06      	ldr	r2, [pc, #24]	; (8019c90 <vPortFree+0xc0>)
 8019c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019c7a:	f7fe fb5f 	bl	801833c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019c7e:	bf00      	nop
 8019c80:	3718      	adds	r7, #24
 8019c82:	46bd      	mov	sp, r7
 8019c84:	bd80      	pop	{r7, pc}
 8019c86:	bf00      	nop
 8019c88:	24009e24 	.word	0x24009e24
 8019c8c:	24009e14 	.word	0x24009e14
 8019c90:	24009e20 	.word	0x24009e20

08019c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019c94:	b480      	push	{r7}
 8019c96:	b085      	sub	sp, #20
 8019c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019ca0:	4b27      	ldr	r3, [pc, #156]	; (8019d40 <prvHeapInit+0xac>)
 8019ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	f003 0307 	and.w	r3, r3, #7
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d00c      	beq.n	8019cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	3307      	adds	r3, #7
 8019cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	f023 0307 	bic.w	r3, r3, #7
 8019cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019cbc:	68ba      	ldr	r2, [r7, #8]
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	1ad3      	subs	r3, r2, r3
 8019cc2:	4a1f      	ldr	r2, [pc, #124]	; (8019d40 <prvHeapInit+0xac>)
 8019cc4:	4413      	add	r3, r2
 8019cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019ccc:	4a1d      	ldr	r2, [pc, #116]	; (8019d44 <prvHeapInit+0xb0>)
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019cd2:	4b1c      	ldr	r3, [pc, #112]	; (8019d44 <prvHeapInit+0xb0>)
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	68ba      	ldr	r2, [r7, #8]
 8019cdc:	4413      	add	r3, r2
 8019cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019ce0:	2208      	movs	r2, #8
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	1a9b      	subs	r3, r3, r2
 8019ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	f023 0307 	bic.w	r3, r3, #7
 8019cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	4a15      	ldr	r2, [pc, #84]	; (8019d48 <prvHeapInit+0xb4>)
 8019cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019cf6:	4b14      	ldr	r3, [pc, #80]	; (8019d48 <prvHeapInit+0xb4>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	2200      	movs	r2, #0
 8019cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019cfe:	4b12      	ldr	r3, [pc, #72]	; (8019d48 <prvHeapInit+0xb4>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	2200      	movs	r2, #0
 8019d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	68fa      	ldr	r2, [r7, #12]
 8019d0e:	1ad2      	subs	r2, r2, r3
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019d14:	4b0c      	ldr	r3, [pc, #48]	; (8019d48 <prvHeapInit+0xb4>)
 8019d16:	681a      	ldr	r2, [r3, #0]
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	685b      	ldr	r3, [r3, #4]
 8019d20:	4a0a      	ldr	r2, [pc, #40]	; (8019d4c <prvHeapInit+0xb8>)
 8019d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	685b      	ldr	r3, [r3, #4]
 8019d28:	4a09      	ldr	r2, [pc, #36]	; (8019d50 <prvHeapInit+0xbc>)
 8019d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019d2c:	4b09      	ldr	r3, [pc, #36]	; (8019d54 <prvHeapInit+0xc0>)
 8019d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019d32:	601a      	str	r2, [r3, #0]
}
 8019d34:	bf00      	nop
 8019d36:	3714      	adds	r7, #20
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d3e:	4770      	bx	lr
 8019d40:	24006208 	.word	0x24006208
 8019d44:	24009e08 	.word	0x24009e08
 8019d48:	24009e10 	.word	0x24009e10
 8019d4c:	24009e18 	.word	0x24009e18
 8019d50:	24009e14 	.word	0x24009e14
 8019d54:	24009e24 	.word	0x24009e24

08019d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019d58:	b480      	push	{r7}
 8019d5a:	b085      	sub	sp, #20
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019d60:	4b28      	ldr	r3, [pc, #160]	; (8019e04 <prvInsertBlockIntoFreeList+0xac>)
 8019d62:	60fb      	str	r3, [r7, #12]
 8019d64:	e002      	b.n	8019d6c <prvInsertBlockIntoFreeList+0x14>
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	60fb      	str	r3, [r7, #12]
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	687a      	ldr	r2, [r7, #4]
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d8f7      	bhi.n	8019d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	685b      	ldr	r3, [r3, #4]
 8019d7e:	68ba      	ldr	r2, [r7, #8]
 8019d80:	4413      	add	r3, r2
 8019d82:	687a      	ldr	r2, [r7, #4]
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d108      	bne.n	8019d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	685a      	ldr	r2, [r3, #4]
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	685b      	ldr	r3, [r3, #4]
 8019d90:	441a      	add	r2, r3
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	685b      	ldr	r3, [r3, #4]
 8019da2:	68ba      	ldr	r2, [r7, #8]
 8019da4:	441a      	add	r2, r3
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d118      	bne.n	8019de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	681a      	ldr	r2, [r3, #0]
 8019db2:	4b15      	ldr	r3, [pc, #84]	; (8019e08 <prvInsertBlockIntoFreeList+0xb0>)
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	429a      	cmp	r2, r3
 8019db8:	d00d      	beq.n	8019dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	685a      	ldr	r2, [r3, #4]
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	685b      	ldr	r3, [r3, #4]
 8019dc4:	441a      	add	r2, r3
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	681a      	ldr	r2, [r3, #0]
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	601a      	str	r2, [r3, #0]
 8019dd4:	e008      	b.n	8019de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019dd6:	4b0c      	ldr	r3, [pc, #48]	; (8019e08 <prvInsertBlockIntoFreeList+0xb0>)
 8019dd8:	681a      	ldr	r2, [r3, #0]
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	601a      	str	r2, [r3, #0]
 8019dde:	e003      	b.n	8019de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	681a      	ldr	r2, [r3, #0]
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019de8:	68fa      	ldr	r2, [r7, #12]
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d002      	beq.n	8019df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	687a      	ldr	r2, [r7, #4]
 8019df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019df6:	bf00      	nop
 8019df8:	3714      	adds	r7, #20
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e00:	4770      	bx	lr
 8019e02:	bf00      	nop
 8019e04:	24009e08 	.word	0x24009e08
 8019e08:	24009e10 	.word	0x24009e10

08019e0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b084      	sub	sp, #16
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
 8019e14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8019e16:	f007 fb99 	bl	802154c <sys_timeouts_sleeptime>
 8019e1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e22:	d10b      	bne.n	8019e3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8019e24:	4813      	ldr	r0, [pc, #76]	; (8019e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8019e26:	f00c face 	bl	80263c6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	6839      	ldr	r1, [r7, #0]
 8019e2e:	6878      	ldr	r0, [r7, #4]
 8019e30:	f00c fa56 	bl	80262e0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8019e34:	480f      	ldr	r0, [pc, #60]	; (8019e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8019e36:	f00c fab7 	bl	80263a8 <sys_mutex_lock>
    return;
 8019e3a:	e018      	b.n	8019e6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d102      	bne.n	8019e48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8019e42:	f007 fb49 	bl	80214d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8019e46:	e7e6      	b.n	8019e16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8019e48:	480a      	ldr	r0, [pc, #40]	; (8019e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8019e4a:	f00c fabc 	bl	80263c6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8019e4e:	68fa      	ldr	r2, [r7, #12]
 8019e50:	6839      	ldr	r1, [r7, #0]
 8019e52:	6878      	ldr	r0, [r7, #4]
 8019e54:	f00c fa44 	bl	80262e0 <sys_arch_mbox_fetch>
 8019e58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8019e5a:	4806      	ldr	r0, [pc, #24]	; (8019e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8019e5c:	f00c faa4 	bl	80263a8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e66:	d102      	bne.n	8019e6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8019e68:	f007 fb36 	bl	80214d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8019e6c:	e7d3      	b.n	8019e16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8019e6e:	3710      	adds	r7, #16
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}
 8019e74:	24009e34 	.word	0x24009e34

08019e78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b084      	sub	sp, #16
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8019e80:	4810      	ldr	r0, [pc, #64]	; (8019ec4 <tcpip_thread+0x4c>)
 8019e82:	f00c fa91 	bl	80263a8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8019e86:	4b10      	ldr	r3, [pc, #64]	; (8019ec8 <tcpip_thread+0x50>)
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d005      	beq.n	8019e9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8019e8e:	4b0e      	ldr	r3, [pc, #56]	; (8019ec8 <tcpip_thread+0x50>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	4a0e      	ldr	r2, [pc, #56]	; (8019ecc <tcpip_thread+0x54>)
 8019e94:	6812      	ldr	r2, [r2, #0]
 8019e96:	4610      	mov	r0, r2
 8019e98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8019e9a:	f107 030c 	add.w	r3, r7, #12
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	480b      	ldr	r0, [pc, #44]	; (8019ed0 <tcpip_thread+0x58>)
 8019ea2:	f7ff ffb3 	bl	8019e0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d106      	bne.n	8019eba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019eac:	4b09      	ldr	r3, [pc, #36]	; (8019ed4 <tcpip_thread+0x5c>)
 8019eae:	2291      	movs	r2, #145	; 0x91
 8019eb0:	4909      	ldr	r1, [pc, #36]	; (8019ed8 <tcpip_thread+0x60>)
 8019eb2:	480a      	ldr	r0, [pc, #40]	; (8019edc <tcpip_thread+0x64>)
 8019eb4:	f00d fb00 	bl	80274b8 <iprintf>
      continue;
 8019eb8:	e003      	b.n	8019ec2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f000 f80f 	bl	8019ee0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8019ec2:	e7ea      	b.n	8019e9a <tcpip_thread+0x22>
 8019ec4:	24009e34 	.word	0x24009e34
 8019ec8:	24009e28 	.word	0x24009e28
 8019ecc:	24009e2c 	.word	0x24009e2c
 8019ed0:	24009e30 	.word	0x24009e30
 8019ed4:	0802848c 	.word	0x0802848c
 8019ed8:	080284bc 	.word	0x080284bc
 8019edc:	080284dc 	.word	0x080284dc

08019ee0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	b082      	sub	sp, #8
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	2b02      	cmp	r3, #2
 8019eee:	d026      	beq.n	8019f3e <tcpip_thread_handle_msg+0x5e>
 8019ef0:	2b02      	cmp	r3, #2
 8019ef2:	dc2b      	bgt.n	8019f4c <tcpip_thread_handle_msg+0x6c>
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d002      	beq.n	8019efe <tcpip_thread_handle_msg+0x1e>
 8019ef8:	2b01      	cmp	r3, #1
 8019efa:	d015      	beq.n	8019f28 <tcpip_thread_handle_msg+0x48>
 8019efc:	e026      	b.n	8019f4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	68db      	ldr	r3, [r3, #12]
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	6850      	ldr	r0, [r2, #4]
 8019f06:	687a      	ldr	r2, [r7, #4]
 8019f08:	6892      	ldr	r2, [r2, #8]
 8019f0a:	4611      	mov	r1, r2
 8019f0c:	4798      	blx	r3
 8019f0e:	4603      	mov	r3, r0
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d004      	beq.n	8019f1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	685b      	ldr	r3, [r3, #4]
 8019f18:	4618      	mov	r0, r3
 8019f1a:	f001 fdcf 	bl	801babc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019f1e:	6879      	ldr	r1, [r7, #4]
 8019f20:	2009      	movs	r0, #9
 8019f22:	f000 ff1b 	bl	801ad5c <memp_free>
      break;
 8019f26:	e018      	b.n	8019f5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	685b      	ldr	r3, [r3, #4]
 8019f2c:	687a      	ldr	r2, [r7, #4]
 8019f2e:	6892      	ldr	r2, [r2, #8]
 8019f30:	4610      	mov	r0, r2
 8019f32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019f34:	6879      	ldr	r1, [r7, #4]
 8019f36:	2008      	movs	r0, #8
 8019f38:	f000 ff10 	bl	801ad5c <memp_free>
      break;
 8019f3c:	e00d      	b.n	8019f5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	687a      	ldr	r2, [r7, #4]
 8019f44:	6892      	ldr	r2, [r2, #8]
 8019f46:	4610      	mov	r0, r2
 8019f48:	4798      	blx	r3
      break;
 8019f4a:	e006      	b.n	8019f5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019f4c:	4b05      	ldr	r3, [pc, #20]	; (8019f64 <tcpip_thread_handle_msg+0x84>)
 8019f4e:	22cf      	movs	r2, #207	; 0xcf
 8019f50:	4905      	ldr	r1, [pc, #20]	; (8019f68 <tcpip_thread_handle_msg+0x88>)
 8019f52:	4806      	ldr	r0, [pc, #24]	; (8019f6c <tcpip_thread_handle_msg+0x8c>)
 8019f54:	f00d fab0 	bl	80274b8 <iprintf>
      break;
 8019f58:	bf00      	nop
  }
}
 8019f5a:	bf00      	nop
 8019f5c:	3708      	adds	r7, #8
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}
 8019f62:	bf00      	nop
 8019f64:	0802848c 	.word	0x0802848c
 8019f68:	080284bc 	.word	0x080284bc
 8019f6c:	080284dc 	.word	0x080284dc

08019f70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b086      	sub	sp, #24
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	60f8      	str	r0, [r7, #12]
 8019f78:	60b9      	str	r1, [r7, #8]
 8019f7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019f7c:	481a      	ldr	r0, [pc, #104]	; (8019fe8 <tcpip_inpkt+0x78>)
 8019f7e:	f00c f9e0 	bl	8026342 <sys_mbox_valid>
 8019f82:	4603      	mov	r3, r0
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d105      	bne.n	8019f94 <tcpip_inpkt+0x24>
 8019f88:	4b18      	ldr	r3, [pc, #96]	; (8019fec <tcpip_inpkt+0x7c>)
 8019f8a:	22fc      	movs	r2, #252	; 0xfc
 8019f8c:	4918      	ldr	r1, [pc, #96]	; (8019ff0 <tcpip_inpkt+0x80>)
 8019f8e:	4819      	ldr	r0, [pc, #100]	; (8019ff4 <tcpip_inpkt+0x84>)
 8019f90:	f00d fa92 	bl	80274b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8019f94:	2009      	movs	r0, #9
 8019f96:	f000 fe6b 	bl	801ac70 <memp_malloc>
 8019f9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8019f9c:	697b      	ldr	r3, [r7, #20]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d102      	bne.n	8019fa8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8019fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa6:	e01a      	b.n	8019fde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8019fa8:	697b      	ldr	r3, [r7, #20]
 8019faa:	2200      	movs	r2, #0
 8019fac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8019fae:	697b      	ldr	r3, [r7, #20]
 8019fb0:	68fa      	ldr	r2, [r7, #12]
 8019fb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8019fb4:	697b      	ldr	r3, [r7, #20]
 8019fb6:	68ba      	ldr	r2, [r7, #8]
 8019fb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8019fba:	697b      	ldr	r3, [r7, #20]
 8019fbc:	687a      	ldr	r2, [r7, #4]
 8019fbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019fc0:	6979      	ldr	r1, [r7, #20]
 8019fc2:	4809      	ldr	r0, [pc, #36]	; (8019fe8 <tcpip_inpkt+0x78>)
 8019fc4:	f00c f972 	bl	80262ac <sys_mbox_trypost>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d006      	beq.n	8019fdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019fce:	6979      	ldr	r1, [r7, #20]
 8019fd0:	2009      	movs	r0, #9
 8019fd2:	f000 fec3 	bl	801ad5c <memp_free>
    return ERR_MEM;
 8019fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8019fda:	e000      	b.n	8019fde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8019fdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8019fde:	4618      	mov	r0, r3
 8019fe0:	3718      	adds	r7, #24
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}
 8019fe6:	bf00      	nop
 8019fe8:	24009e30 	.word	0x24009e30
 8019fec:	0802848c 	.word	0x0802848c
 8019ff0:	08028504 	.word	0x08028504
 8019ff4:	080284dc 	.word	0x080284dc

08019ff8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b082      	sub	sp, #8
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
 801a000:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801a002:	683b      	ldr	r3, [r7, #0]
 801a004:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a008:	f003 0318 	and.w	r3, r3, #24
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d006      	beq.n	801a01e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801a010:	4a08      	ldr	r2, [pc, #32]	; (801a034 <tcpip_input+0x3c>)
 801a012:	6839      	ldr	r1, [r7, #0]
 801a014:	6878      	ldr	r0, [r7, #4]
 801a016:	f7ff ffab 	bl	8019f70 <tcpip_inpkt>
 801a01a:	4603      	mov	r3, r0
 801a01c:	e005      	b.n	801a02a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801a01e:	4a06      	ldr	r2, [pc, #24]	; (801a038 <tcpip_input+0x40>)
 801a020:	6839      	ldr	r1, [r7, #0]
 801a022:	6878      	ldr	r0, [r7, #4]
 801a024:	f7ff ffa4 	bl	8019f70 <tcpip_inpkt>
 801a028:	4603      	mov	r3, r0
}
 801a02a:	4618      	mov	r0, r3
 801a02c:	3708      	adds	r7, #8
 801a02e:	46bd      	mov	sp, r7
 801a030:	bd80      	pop	{r7, pc}
 801a032:	bf00      	nop
 801a034:	080260cd 	.word	0x080260cd
 801a038:	08024f99 	.word	0x08024f99

0801a03c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801a03c:	b580      	push	{r7, lr}
 801a03e:	b084      	sub	sp, #16
 801a040:	af00      	add	r7, sp, #0
 801a042:	6078      	str	r0, [r7, #4]
 801a044:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801a046:	4819      	ldr	r0, [pc, #100]	; (801a0ac <tcpip_try_callback+0x70>)
 801a048:	f00c f97b 	bl	8026342 <sys_mbox_valid>
 801a04c:	4603      	mov	r3, r0
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d106      	bne.n	801a060 <tcpip_try_callback+0x24>
 801a052:	4b17      	ldr	r3, [pc, #92]	; (801a0b0 <tcpip_try_callback+0x74>)
 801a054:	f240 125d 	movw	r2, #349	; 0x15d
 801a058:	4916      	ldr	r1, [pc, #88]	; (801a0b4 <tcpip_try_callback+0x78>)
 801a05a:	4817      	ldr	r0, [pc, #92]	; (801a0b8 <tcpip_try_callback+0x7c>)
 801a05c:	f00d fa2c 	bl	80274b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801a060:	2008      	movs	r0, #8
 801a062:	f000 fe05 	bl	801ac70 <memp_malloc>
 801a066:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d102      	bne.n	801a074 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801a06e:	f04f 33ff 	mov.w	r3, #4294967295
 801a072:	e017      	b.n	801a0a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	2201      	movs	r2, #1
 801a078:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	687a      	ldr	r2, [r7, #4]
 801a07e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	683a      	ldr	r2, [r7, #0]
 801a084:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801a086:	68f9      	ldr	r1, [r7, #12]
 801a088:	4808      	ldr	r0, [pc, #32]	; (801a0ac <tcpip_try_callback+0x70>)
 801a08a:	f00c f90f 	bl	80262ac <sys_mbox_trypost>
 801a08e:	4603      	mov	r3, r0
 801a090:	2b00      	cmp	r3, #0
 801a092:	d006      	beq.n	801a0a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801a094:	68f9      	ldr	r1, [r7, #12]
 801a096:	2008      	movs	r0, #8
 801a098:	f000 fe60 	bl	801ad5c <memp_free>
    return ERR_MEM;
 801a09c:	f04f 33ff 	mov.w	r3, #4294967295
 801a0a0:	e000      	b.n	801a0a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801a0a2:	2300      	movs	r3, #0
}
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	3710      	adds	r7, #16
 801a0a8:	46bd      	mov	sp, r7
 801a0aa:	bd80      	pop	{r7, pc}
 801a0ac:	24009e30 	.word	0x24009e30
 801a0b0:	0802848c 	.word	0x0802848c
 801a0b4:	08028504 	.word	0x08028504
 801a0b8:	080284dc 	.word	0x080284dc

0801a0bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b084      	sub	sp, #16
 801a0c0:	af02      	add	r7, sp, #8
 801a0c2:	6078      	str	r0, [r7, #4]
 801a0c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 801a0c6:	f000 f92d 	bl	801a324 <lwip_init>

  tcpip_init_done = initfunc;
 801a0ca:	4a17      	ldr	r2, [pc, #92]	; (801a128 <tcpip_init+0x6c>)
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801a0d0:	4a16      	ldr	r2, [pc, #88]	; (801a12c <tcpip_init+0x70>)
 801a0d2:	683b      	ldr	r3, [r7, #0]
 801a0d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801a0d6:	2106      	movs	r1, #6
 801a0d8:	4815      	ldr	r0, [pc, #84]	; (801a130 <tcpip_init+0x74>)
 801a0da:	f00c f8cd 	bl	8026278 <sys_mbox_new>
 801a0de:	4603      	mov	r3, r0
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d006      	beq.n	801a0f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801a0e4:	4b13      	ldr	r3, [pc, #76]	; (801a134 <tcpip_init+0x78>)
 801a0e6:	f240 2261 	movw	r2, #609	; 0x261
 801a0ea:	4913      	ldr	r1, [pc, #76]	; (801a138 <tcpip_init+0x7c>)
 801a0ec:	4813      	ldr	r0, [pc, #76]	; (801a13c <tcpip_init+0x80>)
 801a0ee:	f00d f9e3 	bl	80274b8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801a0f2:	4813      	ldr	r0, [pc, #76]	; (801a140 <tcpip_init+0x84>)
 801a0f4:	f00c f942 	bl	802637c <sys_mutex_new>
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d006      	beq.n	801a10c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801a0fe:	4b0d      	ldr	r3, [pc, #52]	; (801a134 <tcpip_init+0x78>)
 801a100:	f240 2265 	movw	r2, #613	; 0x265
 801a104:	490f      	ldr	r1, [pc, #60]	; (801a144 <tcpip_init+0x88>)
 801a106:	480d      	ldr	r0, [pc, #52]	; (801a13c <tcpip_init+0x80>)
 801a108:	f00d f9d6 	bl	80274b8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801a10c:	2318      	movs	r3, #24
 801a10e:	9300      	str	r3, [sp, #0]
 801a110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a114:	2200      	movs	r2, #0
 801a116:	490c      	ldr	r1, [pc, #48]	; (801a148 <tcpip_init+0x8c>)
 801a118:	480c      	ldr	r0, [pc, #48]	; (801a14c <tcpip_init+0x90>)
 801a11a:	f00c f961 	bl	80263e0 <sys_thread_new>
}
 801a11e:	bf00      	nop
 801a120:	3708      	adds	r7, #8
 801a122:	46bd      	mov	sp, r7
 801a124:	bd80      	pop	{r7, pc}
 801a126:	bf00      	nop
 801a128:	24009e28 	.word	0x24009e28
 801a12c:	24009e2c 	.word	0x24009e2c
 801a130:	24009e30 	.word	0x24009e30
 801a134:	0802848c 	.word	0x0802848c
 801a138:	08028514 	.word	0x08028514
 801a13c:	080284dc 	.word	0x080284dc
 801a140:	24009e34 	.word	0x24009e34
 801a144:	08028538 	.word	0x08028538
 801a148:	08019e79 	.word	0x08019e79
 801a14c:	0802855c 	.word	0x0802855c

0801a150 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801a150:	b480      	push	{r7}
 801a152:	b083      	sub	sp, #12
 801a154:	af00      	add	r7, sp, #0
 801a156:	4603      	mov	r3, r0
 801a158:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801a15a:	88fb      	ldrh	r3, [r7, #6]
 801a15c:	021b      	lsls	r3, r3, #8
 801a15e:	b21a      	sxth	r2, r3
 801a160:	88fb      	ldrh	r3, [r7, #6]
 801a162:	0a1b      	lsrs	r3, r3, #8
 801a164:	b29b      	uxth	r3, r3
 801a166:	b21b      	sxth	r3, r3
 801a168:	4313      	orrs	r3, r2
 801a16a:	b21b      	sxth	r3, r3
 801a16c:	b29b      	uxth	r3, r3
}
 801a16e:	4618      	mov	r0, r3
 801a170:	370c      	adds	r7, #12
 801a172:	46bd      	mov	sp, r7
 801a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a178:	4770      	bx	lr

0801a17a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801a17a:	b480      	push	{r7}
 801a17c:	b083      	sub	sp, #12
 801a17e:	af00      	add	r7, sp, #0
 801a180:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	061a      	lsls	r2, r3, #24
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	021b      	lsls	r3, r3, #8
 801a18a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a18e:	431a      	orrs	r2, r3
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	0a1b      	lsrs	r3, r3, #8
 801a194:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a198:	431a      	orrs	r2, r3
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	0e1b      	lsrs	r3, r3, #24
 801a19e:	4313      	orrs	r3, r2
}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	370c      	adds	r7, #12
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1aa:	4770      	bx	lr

0801a1ac <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801a1ac:	b480      	push	{r7}
 801a1ae:	b089      	sub	sp, #36	; 0x24
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
 801a1b4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801a1c2:	69fb      	ldr	r3, [r7, #28]
 801a1c4:	f003 0301 	and.w	r3, r3, #1
 801a1c8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801a1ca:	693b      	ldr	r3, [r7, #16]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d00d      	beq.n	801a1ec <lwip_standard_chksum+0x40>
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	dd0a      	ble.n	801a1ec <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801a1d6:	69fa      	ldr	r2, [r7, #28]
 801a1d8:	1c53      	adds	r3, r2, #1
 801a1da:	61fb      	str	r3, [r7, #28]
 801a1dc:	f107 030e 	add.w	r3, r7, #14
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	7812      	ldrb	r2, [r2, #0]
 801a1e4:	701a      	strb	r2, [r3, #0]
    len--;
 801a1e6:	683b      	ldr	r3, [r7, #0]
 801a1e8:	3b01      	subs	r3, #1
 801a1ea:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801a1ec:	69fb      	ldr	r3, [r7, #28]
 801a1ee:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801a1f0:	e00a      	b.n	801a208 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801a1f2:	69bb      	ldr	r3, [r7, #24]
 801a1f4:	1c9a      	adds	r2, r3, #2
 801a1f6:	61ba      	str	r2, [r7, #24]
 801a1f8:	881b      	ldrh	r3, [r3, #0]
 801a1fa:	461a      	mov	r2, r3
 801a1fc:	697b      	ldr	r3, [r7, #20]
 801a1fe:	4413      	add	r3, r2
 801a200:	617b      	str	r3, [r7, #20]
    len -= 2;
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	3b02      	subs	r3, #2
 801a206:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	2b01      	cmp	r3, #1
 801a20c:	dcf1      	bgt.n	801a1f2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	2b00      	cmp	r3, #0
 801a212:	dd04      	ble.n	801a21e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801a214:	f107 030e 	add.w	r3, r7, #14
 801a218:	69ba      	ldr	r2, [r7, #24]
 801a21a:	7812      	ldrb	r2, [r2, #0]
 801a21c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801a21e:	89fb      	ldrh	r3, [r7, #14]
 801a220:	461a      	mov	r2, r3
 801a222:	697b      	ldr	r3, [r7, #20]
 801a224:	4413      	add	r3, r2
 801a226:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801a228:	697b      	ldr	r3, [r7, #20]
 801a22a:	0c1a      	lsrs	r2, r3, #16
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	b29b      	uxth	r3, r3
 801a230:	4413      	add	r3, r2
 801a232:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 801a234:	697b      	ldr	r3, [r7, #20]
 801a236:	0c1a      	lsrs	r2, r3, #16
 801a238:	697b      	ldr	r3, [r7, #20]
 801a23a:	b29b      	uxth	r3, r3
 801a23c:	4413      	add	r3, r2
 801a23e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801a240:	693b      	ldr	r3, [r7, #16]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d007      	beq.n	801a256 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801a246:	697b      	ldr	r3, [r7, #20]
 801a248:	021b      	lsls	r3, r3, #8
 801a24a:	b29a      	uxth	r2, r3
 801a24c:	697b      	ldr	r3, [r7, #20]
 801a24e:	0a1b      	lsrs	r3, r3, #8
 801a250:	b2db      	uxtb	r3, r3
 801a252:	4313      	orrs	r3, r2
 801a254:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801a256:	697b      	ldr	r3, [r7, #20]
 801a258:	b29b      	uxth	r3, r3
}
 801a25a:	4618      	mov	r0, r3
 801a25c:	3724      	adds	r7, #36	; 0x24
 801a25e:	46bd      	mov	sp, r7
 801a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a264:	4770      	bx	lr

0801a266 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801a266:	b580      	push	{r7, lr}
 801a268:	b082      	sub	sp, #8
 801a26a:	af00      	add	r7, sp, #0
 801a26c:	6078      	str	r0, [r7, #4]
 801a26e:	460b      	mov	r3, r1
 801a270:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801a272:	887b      	ldrh	r3, [r7, #2]
 801a274:	4619      	mov	r1, r3
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f7ff ff98 	bl	801a1ac <lwip_standard_chksum>
 801a27c:	4603      	mov	r3, r0
 801a27e:	43db      	mvns	r3, r3
 801a280:	b29b      	uxth	r3, r3
}
 801a282:	4618      	mov	r0, r3
 801a284:	3708      	adds	r7, #8
 801a286:	46bd      	mov	sp, r7
 801a288:	bd80      	pop	{r7, pc}

0801a28a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801a28a:	b580      	push	{r7, lr}
 801a28c:	b086      	sub	sp, #24
 801a28e:	af00      	add	r7, sp, #0
 801a290:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 801a292:	2300      	movs	r3, #0
 801a294:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801a296:	2300      	movs	r3, #0
 801a298:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	613b      	str	r3, [r7, #16]
 801a29e:	e02b      	b.n	801a2f8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801a2a0:	693b      	ldr	r3, [r7, #16]
 801a2a2:	685a      	ldr	r2, [r3, #4]
 801a2a4:	693b      	ldr	r3, [r7, #16]
 801a2a6:	895b      	ldrh	r3, [r3, #10]
 801a2a8:	4619      	mov	r1, r3
 801a2aa:	4610      	mov	r0, r2
 801a2ac:	f7ff ff7e 	bl	801a1ac <lwip_standard_chksum>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	461a      	mov	r2, r3
 801a2b4:	697b      	ldr	r3, [r7, #20]
 801a2b6:	4413      	add	r3, r2
 801a2b8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801a2ba:	697b      	ldr	r3, [r7, #20]
 801a2bc:	0c1a      	lsrs	r2, r3, #16
 801a2be:	697b      	ldr	r3, [r7, #20]
 801a2c0:	b29b      	uxth	r3, r3
 801a2c2:	4413      	add	r3, r2
 801a2c4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801a2c6:	693b      	ldr	r3, [r7, #16]
 801a2c8:	895b      	ldrh	r3, [r3, #10]
 801a2ca:	f003 0301 	and.w	r3, r3, #1
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d00e      	beq.n	801a2f2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	bf0c      	ite	eq
 801a2da:	2301      	moveq	r3, #1
 801a2dc:	2300      	movne	r3, #0
 801a2de:	b2db      	uxtb	r3, r3
 801a2e0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 801a2e2:	697b      	ldr	r3, [r7, #20]
 801a2e4:	021b      	lsls	r3, r3, #8
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	697b      	ldr	r3, [r7, #20]
 801a2ea:	0a1b      	lsrs	r3, r3, #8
 801a2ec:	b2db      	uxtb	r3, r3
 801a2ee:	4313      	orrs	r3, r2
 801a2f0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801a2f2:	693b      	ldr	r3, [r7, #16]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	613b      	str	r3, [r7, #16]
 801a2f8:	693b      	ldr	r3, [r7, #16]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d1d0      	bne.n	801a2a0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d007      	beq.n	801a314 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 801a304:	697b      	ldr	r3, [r7, #20]
 801a306:	021b      	lsls	r3, r3, #8
 801a308:	b29a      	uxth	r2, r3
 801a30a:	697b      	ldr	r3, [r7, #20]
 801a30c:	0a1b      	lsrs	r3, r3, #8
 801a30e:	b2db      	uxtb	r3, r3
 801a310:	4313      	orrs	r3, r2
 801a312:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	b29b      	uxth	r3, r3
 801a318:	43db      	mvns	r3, r3
 801a31a:	b29b      	uxth	r3, r3
}
 801a31c:	4618      	mov	r0, r3
 801a31e:	3718      	adds	r7, #24
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}

0801a324 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b082      	sub	sp, #8
 801a328:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801a32a:	2300      	movs	r3, #0
 801a32c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801a32e:	f00c f819 	bl	8026364 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801a332:	f000 f8d5 	bl	801a4e0 <mem_init>
  memp_init();
 801a336:	f000 fc2d 	bl	801ab94 <memp_init>
  pbuf_init();
  netif_init();
 801a33a:	f000 fd39 	bl	801adb0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801a33e:	f007 f93d 	bl	80215bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801a342:	f001 fe65 	bl	801c010 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801a346:	f007 f87f 	bl	8021448 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801a34a:	bf00      	nop
 801a34c:	3708      	adds	r7, #8
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}
	...

0801a354 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801a354:	b480      	push	{r7}
 801a356:	b083      	sub	sp, #12
 801a358:	af00      	add	r7, sp, #0
 801a35a:	4603      	mov	r3, r0
 801a35c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801a35e:	4b05      	ldr	r3, [pc, #20]	; (801a374 <ptr_to_mem+0x20>)
 801a360:	681a      	ldr	r2, [r3, #0]
 801a362:	88fb      	ldrh	r3, [r7, #6]
 801a364:	4413      	add	r3, r2
}
 801a366:	4618      	mov	r0, r3
 801a368:	370c      	adds	r7, #12
 801a36a:	46bd      	mov	sp, r7
 801a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a370:	4770      	bx	lr
 801a372:	bf00      	nop
 801a374:	24009e50 	.word	0x24009e50

0801a378 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801a378:	b480      	push	{r7}
 801a37a:	b083      	sub	sp, #12
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801a380:	4b05      	ldr	r3, [pc, #20]	; (801a398 <mem_to_ptr+0x20>)
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	687a      	ldr	r2, [r7, #4]
 801a386:	1ad3      	subs	r3, r2, r3
 801a388:	b29b      	uxth	r3, r3
}
 801a38a:	4618      	mov	r0, r3
 801a38c:	370c      	adds	r7, #12
 801a38e:	46bd      	mov	sp, r7
 801a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a394:	4770      	bx	lr
 801a396:	bf00      	nop
 801a398:	24009e50 	.word	0x24009e50

0801a39c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801a39c:	b590      	push	{r4, r7, lr}
 801a39e:	b085      	sub	sp, #20
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801a3a4:	4b45      	ldr	r3, [pc, #276]	; (801a4bc <plug_holes+0x120>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	687a      	ldr	r2, [r7, #4]
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d206      	bcs.n	801a3bc <plug_holes+0x20>
 801a3ae:	4b44      	ldr	r3, [pc, #272]	; (801a4c0 <plug_holes+0x124>)
 801a3b0:	f240 12df 	movw	r2, #479	; 0x1df
 801a3b4:	4943      	ldr	r1, [pc, #268]	; (801a4c4 <plug_holes+0x128>)
 801a3b6:	4844      	ldr	r0, [pc, #272]	; (801a4c8 <plug_holes+0x12c>)
 801a3b8:	f00d f87e 	bl	80274b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801a3bc:	4b43      	ldr	r3, [pc, #268]	; (801a4cc <plug_holes+0x130>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	687a      	ldr	r2, [r7, #4]
 801a3c2:	429a      	cmp	r2, r3
 801a3c4:	d306      	bcc.n	801a3d4 <plug_holes+0x38>
 801a3c6:	4b3e      	ldr	r3, [pc, #248]	; (801a4c0 <plug_holes+0x124>)
 801a3c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a3cc:	4940      	ldr	r1, [pc, #256]	; (801a4d0 <plug_holes+0x134>)
 801a3ce:	483e      	ldr	r0, [pc, #248]	; (801a4c8 <plug_holes+0x12c>)
 801a3d0:	f00d f872 	bl	80274b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	791b      	ldrb	r3, [r3, #4]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d006      	beq.n	801a3ea <plug_holes+0x4e>
 801a3dc:	4b38      	ldr	r3, [pc, #224]	; (801a4c0 <plug_holes+0x124>)
 801a3de:	f240 12e1 	movw	r2, #481	; 0x1e1
 801a3e2:	493c      	ldr	r1, [pc, #240]	; (801a4d4 <plug_holes+0x138>)
 801a3e4:	4838      	ldr	r0, [pc, #224]	; (801a4c8 <plug_holes+0x12c>)
 801a3e6:	f00d f867 	bl	80274b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	881b      	ldrh	r3, [r3, #0]
 801a3ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a3f2:	d906      	bls.n	801a402 <plug_holes+0x66>
 801a3f4:	4b32      	ldr	r3, [pc, #200]	; (801a4c0 <plug_holes+0x124>)
 801a3f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801a3fa:	4937      	ldr	r1, [pc, #220]	; (801a4d8 <plug_holes+0x13c>)
 801a3fc:	4832      	ldr	r0, [pc, #200]	; (801a4c8 <plug_holes+0x12c>)
 801a3fe:	f00d f85b 	bl	80274b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	881b      	ldrh	r3, [r3, #0]
 801a406:	4618      	mov	r0, r3
 801a408:	f7ff ffa4 	bl	801a354 <ptr_to_mem>
 801a40c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801a40e:	687a      	ldr	r2, [r7, #4]
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	429a      	cmp	r2, r3
 801a414:	d024      	beq.n	801a460 <plug_holes+0xc4>
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	791b      	ldrb	r3, [r3, #4]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d120      	bne.n	801a460 <plug_holes+0xc4>
 801a41e:	4b2b      	ldr	r3, [pc, #172]	; (801a4cc <plug_holes+0x130>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	68fa      	ldr	r2, [r7, #12]
 801a424:	429a      	cmp	r2, r3
 801a426:	d01b      	beq.n	801a460 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801a428:	4b2c      	ldr	r3, [pc, #176]	; (801a4dc <plug_holes+0x140>)
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	68fa      	ldr	r2, [r7, #12]
 801a42e:	429a      	cmp	r2, r3
 801a430:	d102      	bne.n	801a438 <plug_holes+0x9c>
      lfree = mem;
 801a432:	4a2a      	ldr	r2, [pc, #168]	; (801a4dc <plug_holes+0x140>)
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	881a      	ldrh	r2, [r3, #0]
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	881b      	ldrh	r3, [r3, #0]
 801a444:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a448:	d00a      	beq.n	801a460 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	881b      	ldrh	r3, [r3, #0]
 801a44e:	4618      	mov	r0, r3
 801a450:	f7ff ff80 	bl	801a354 <ptr_to_mem>
 801a454:	4604      	mov	r4, r0
 801a456:	6878      	ldr	r0, [r7, #4]
 801a458:	f7ff ff8e 	bl	801a378 <mem_to_ptr>
 801a45c:	4603      	mov	r3, r0
 801a45e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	885b      	ldrh	r3, [r3, #2]
 801a464:	4618      	mov	r0, r3
 801a466:	f7ff ff75 	bl	801a354 <ptr_to_mem>
 801a46a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801a46c:	68ba      	ldr	r2, [r7, #8]
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	429a      	cmp	r2, r3
 801a472:	d01f      	beq.n	801a4b4 <plug_holes+0x118>
 801a474:	68bb      	ldr	r3, [r7, #8]
 801a476:	791b      	ldrb	r3, [r3, #4]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d11b      	bne.n	801a4b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801a47c:	4b17      	ldr	r3, [pc, #92]	; (801a4dc <plug_holes+0x140>)
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	687a      	ldr	r2, [r7, #4]
 801a482:	429a      	cmp	r2, r3
 801a484:	d102      	bne.n	801a48c <plug_holes+0xf0>
      lfree = pmem;
 801a486:	4a15      	ldr	r2, [pc, #84]	; (801a4dc <plug_holes+0x140>)
 801a488:	68bb      	ldr	r3, [r7, #8]
 801a48a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	881a      	ldrh	r2, [r3, #0]
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	881b      	ldrh	r3, [r3, #0]
 801a498:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a49c:	d00a      	beq.n	801a4b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	881b      	ldrh	r3, [r3, #0]
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7ff ff56 	bl	801a354 <ptr_to_mem>
 801a4a8:	4604      	mov	r4, r0
 801a4aa:	68b8      	ldr	r0, [r7, #8]
 801a4ac:	f7ff ff64 	bl	801a378 <mem_to_ptr>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801a4b4:	bf00      	nop
 801a4b6:	3714      	adds	r7, #20
 801a4b8:	46bd      	mov	sp, r7
 801a4ba:	bd90      	pop	{r4, r7, pc}
 801a4bc:	24009e50 	.word	0x24009e50
 801a4c0:	0802856c 	.word	0x0802856c
 801a4c4:	0802859c 	.word	0x0802859c
 801a4c8:	080285b4 	.word	0x080285b4
 801a4cc:	24009e54 	.word	0x24009e54
 801a4d0:	080285dc 	.word	0x080285dc
 801a4d4:	080285f8 	.word	0x080285f8
 801a4d8:	08028614 	.word	0x08028614
 801a4dc:	24009e5c 	.word	0x24009e5c

0801a4e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b082      	sub	sp, #8
 801a4e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a4e6:	4b1d      	ldr	r3, [pc, #116]	; (801a55c <mem_init+0x7c>)
 801a4e8:	4a1d      	ldr	r2, [pc, #116]	; (801a560 <mem_init+0x80>)
 801a4ea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801a4ec:	4b1b      	ldr	r3, [pc, #108]	; (801a55c <mem_init+0x7c>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801a4f8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	2200      	movs	r2, #0
 801a504:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801a506:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801a50a:	f7ff ff23 	bl	801a354 <ptr_to_mem>
 801a50e:	4603      	mov	r3, r0
 801a510:	4a14      	ldr	r2, [pc, #80]	; (801a564 <mem_init+0x84>)
 801a512:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801a514:	4b13      	ldr	r3, [pc, #76]	; (801a564 <mem_init+0x84>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	2201      	movs	r2, #1
 801a51a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801a51c:	4b11      	ldr	r3, [pc, #68]	; (801a564 <mem_init+0x84>)
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801a524:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801a526:	4b0f      	ldr	r3, [pc, #60]	; (801a564 <mem_init+0x84>)
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801a52e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801a530:	4b0a      	ldr	r3, [pc, #40]	; (801a55c <mem_init+0x7c>)
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	4a0c      	ldr	r2, [pc, #48]	; (801a568 <mem_init+0x88>)
 801a536:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801a538:	480c      	ldr	r0, [pc, #48]	; (801a56c <mem_init+0x8c>)
 801a53a:	f00b ff1f 	bl	802637c <sys_mutex_new>
 801a53e:	4603      	mov	r3, r0
 801a540:	2b00      	cmp	r3, #0
 801a542:	d006      	beq.n	801a552 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801a544:	4b0a      	ldr	r3, [pc, #40]	; (801a570 <mem_init+0x90>)
 801a546:	f240 221f 	movw	r2, #543	; 0x21f
 801a54a:	490a      	ldr	r1, [pc, #40]	; (801a574 <mem_init+0x94>)
 801a54c:	480a      	ldr	r0, [pc, #40]	; (801a578 <mem_init+0x98>)
 801a54e:	f00c ffb3 	bl	80274b8 <iprintf>
  }
}
 801a552:	bf00      	nop
 801a554:	3708      	adds	r7, #8
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}
 801a55a:	bf00      	nop
 801a55c:	24009e50 	.word	0x24009e50
 801a560:	30044000 	.word	0x30044000
 801a564:	24009e54 	.word	0x24009e54
 801a568:	24009e5c 	.word	0x24009e5c
 801a56c:	24009e58 	.word	0x24009e58
 801a570:	0802856c 	.word	0x0802856c
 801a574:	08028640 	.word	0x08028640
 801a578:	080285b4 	.word	0x080285b4

0801a57c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b086      	sub	sp, #24
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801a584:	6878      	ldr	r0, [r7, #4]
 801a586:	f7ff fef7 	bl	801a378 <mem_to_ptr>
 801a58a:	4603      	mov	r3, r0
 801a58c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	881b      	ldrh	r3, [r3, #0]
 801a592:	4618      	mov	r0, r3
 801a594:	f7ff fede 	bl	801a354 <ptr_to_mem>
 801a598:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	885b      	ldrh	r3, [r3, #2]
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f7ff fed8 	bl	801a354 <ptr_to_mem>
 801a5a4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	881b      	ldrh	r3, [r3, #0]
 801a5aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a5ae:	d818      	bhi.n	801a5e2 <mem_link_valid+0x66>
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	885b      	ldrh	r3, [r3, #2]
 801a5b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a5b8:	d813      	bhi.n	801a5e2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801a5be:	8afa      	ldrh	r2, [r7, #22]
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	d004      	beq.n	801a5ce <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	881b      	ldrh	r3, [r3, #0]
 801a5c8:	8afa      	ldrh	r2, [r7, #22]
 801a5ca:	429a      	cmp	r2, r3
 801a5cc:	d109      	bne.n	801a5e2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801a5ce:	4b08      	ldr	r3, [pc, #32]	; (801a5f0 <mem_link_valid+0x74>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801a5d2:	693a      	ldr	r2, [r7, #16]
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d006      	beq.n	801a5e6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801a5d8:	693b      	ldr	r3, [r7, #16]
 801a5da:	885b      	ldrh	r3, [r3, #2]
 801a5dc:	8afa      	ldrh	r2, [r7, #22]
 801a5de:	429a      	cmp	r2, r3
 801a5e0:	d001      	beq.n	801a5e6 <mem_link_valid+0x6a>
    return 0;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	e000      	b.n	801a5e8 <mem_link_valid+0x6c>
  }
  return 1;
 801a5e6:	2301      	movs	r3, #1
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3718      	adds	r7, #24
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}
 801a5f0:	24009e54 	.word	0x24009e54

0801a5f4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b088      	sub	sp, #32
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d070      	beq.n	801a6e4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	f003 0303 	and.w	r3, r3, #3
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d00d      	beq.n	801a628 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801a60c:	4b37      	ldr	r3, [pc, #220]	; (801a6ec <mem_free+0xf8>)
 801a60e:	f240 2273 	movw	r2, #627	; 0x273
 801a612:	4937      	ldr	r1, [pc, #220]	; (801a6f0 <mem_free+0xfc>)
 801a614:	4837      	ldr	r0, [pc, #220]	; (801a6f4 <mem_free+0x100>)
 801a616:	f00c ff4f 	bl	80274b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a61a:	f00b ff01 	bl	8026420 <sys_arch_protect>
 801a61e:	60f8      	str	r0, [r7, #12]
 801a620:	68f8      	ldr	r0, [r7, #12]
 801a622:	f00b ff0b 	bl	802643c <sys_arch_unprotect>
    return;
 801a626:	e05e      	b.n	801a6e6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	3b08      	subs	r3, #8
 801a62c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801a62e:	4b32      	ldr	r3, [pc, #200]	; (801a6f8 <mem_free+0x104>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	69fa      	ldr	r2, [r7, #28]
 801a634:	429a      	cmp	r2, r3
 801a636:	d306      	bcc.n	801a646 <mem_free+0x52>
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	f103 020c 	add.w	r2, r3, #12
 801a63e:	4b2f      	ldr	r3, [pc, #188]	; (801a6fc <mem_free+0x108>)
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	429a      	cmp	r2, r3
 801a644:	d90d      	bls.n	801a662 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801a646:	4b29      	ldr	r3, [pc, #164]	; (801a6ec <mem_free+0xf8>)
 801a648:	f240 227f 	movw	r2, #639	; 0x27f
 801a64c:	492c      	ldr	r1, [pc, #176]	; (801a700 <mem_free+0x10c>)
 801a64e:	4829      	ldr	r0, [pc, #164]	; (801a6f4 <mem_free+0x100>)
 801a650:	f00c ff32 	bl	80274b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a654:	f00b fee4 	bl	8026420 <sys_arch_protect>
 801a658:	6138      	str	r0, [r7, #16]
 801a65a:	6938      	ldr	r0, [r7, #16]
 801a65c:	f00b feee 	bl	802643c <sys_arch_unprotect>
    return;
 801a660:	e041      	b.n	801a6e6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801a662:	4828      	ldr	r0, [pc, #160]	; (801a704 <mem_free+0x110>)
 801a664:	f00b fea0 	bl	80263a8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801a668:	69fb      	ldr	r3, [r7, #28]
 801a66a:	791b      	ldrb	r3, [r3, #4]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d110      	bne.n	801a692 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801a670:	4b1e      	ldr	r3, [pc, #120]	; (801a6ec <mem_free+0xf8>)
 801a672:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801a676:	4924      	ldr	r1, [pc, #144]	; (801a708 <mem_free+0x114>)
 801a678:	481e      	ldr	r0, [pc, #120]	; (801a6f4 <mem_free+0x100>)
 801a67a:	f00c ff1d 	bl	80274b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801a67e:	4821      	ldr	r0, [pc, #132]	; (801a704 <mem_free+0x110>)
 801a680:	f00b fea1 	bl	80263c6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a684:	f00b fecc 	bl	8026420 <sys_arch_protect>
 801a688:	6178      	str	r0, [r7, #20]
 801a68a:	6978      	ldr	r0, [r7, #20]
 801a68c:	f00b fed6 	bl	802643c <sys_arch_unprotect>
    return;
 801a690:	e029      	b.n	801a6e6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801a692:	69f8      	ldr	r0, [r7, #28]
 801a694:	f7ff ff72 	bl	801a57c <mem_link_valid>
 801a698:	4603      	mov	r3, r0
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d110      	bne.n	801a6c0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801a69e:	4b13      	ldr	r3, [pc, #76]	; (801a6ec <mem_free+0xf8>)
 801a6a0:	f240 2295 	movw	r2, #661	; 0x295
 801a6a4:	4919      	ldr	r1, [pc, #100]	; (801a70c <mem_free+0x118>)
 801a6a6:	4813      	ldr	r0, [pc, #76]	; (801a6f4 <mem_free+0x100>)
 801a6a8:	f00c ff06 	bl	80274b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801a6ac:	4815      	ldr	r0, [pc, #84]	; (801a704 <mem_free+0x110>)
 801a6ae:	f00b fe8a 	bl	80263c6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a6b2:	f00b feb5 	bl	8026420 <sys_arch_protect>
 801a6b6:	61b8      	str	r0, [r7, #24]
 801a6b8:	69b8      	ldr	r0, [r7, #24]
 801a6ba:	f00b febf 	bl	802643c <sys_arch_unprotect>
    return;
 801a6be:	e012      	b.n	801a6e6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801a6c0:	69fb      	ldr	r3, [r7, #28]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801a6c6:	4b12      	ldr	r3, [pc, #72]	; (801a710 <mem_free+0x11c>)
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	69fa      	ldr	r2, [r7, #28]
 801a6cc:	429a      	cmp	r2, r3
 801a6ce:	d202      	bcs.n	801a6d6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801a6d0:	4a0f      	ldr	r2, [pc, #60]	; (801a710 <mem_free+0x11c>)
 801a6d2:	69fb      	ldr	r3, [r7, #28]
 801a6d4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801a6d6:	69f8      	ldr	r0, [r7, #28]
 801a6d8:	f7ff fe60 	bl	801a39c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801a6dc:	4809      	ldr	r0, [pc, #36]	; (801a704 <mem_free+0x110>)
 801a6de:	f00b fe72 	bl	80263c6 <sys_mutex_unlock>
 801a6e2:	e000      	b.n	801a6e6 <mem_free+0xf2>
    return;
 801a6e4:	bf00      	nop
}
 801a6e6:	3720      	adds	r7, #32
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	bd80      	pop	{r7, pc}
 801a6ec:	0802856c 	.word	0x0802856c
 801a6f0:	0802865c 	.word	0x0802865c
 801a6f4:	080285b4 	.word	0x080285b4
 801a6f8:	24009e50 	.word	0x24009e50
 801a6fc:	24009e54 	.word	0x24009e54
 801a700:	08028680 	.word	0x08028680
 801a704:	24009e58 	.word	0x24009e58
 801a708:	0802869c 	.word	0x0802869c
 801a70c:	080286c4 	.word	0x080286c4
 801a710:	24009e5c 	.word	0x24009e5c

0801a714 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b088      	sub	sp, #32
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
 801a71c:	460b      	mov	r3, r1
 801a71e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801a720:	887b      	ldrh	r3, [r7, #2]
 801a722:	3303      	adds	r3, #3
 801a724:	b29b      	uxth	r3, r3
 801a726:	f023 0303 	bic.w	r3, r3, #3
 801a72a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801a72c:	8bfb      	ldrh	r3, [r7, #30]
 801a72e:	2b0b      	cmp	r3, #11
 801a730:	d801      	bhi.n	801a736 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801a732:	230c      	movs	r3, #12
 801a734:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801a736:	8bfb      	ldrh	r3, [r7, #30]
 801a738:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a73c:	d803      	bhi.n	801a746 <mem_trim+0x32>
 801a73e:	8bfa      	ldrh	r2, [r7, #30]
 801a740:	887b      	ldrh	r3, [r7, #2]
 801a742:	429a      	cmp	r2, r3
 801a744:	d201      	bcs.n	801a74a <mem_trim+0x36>
    return NULL;
 801a746:	2300      	movs	r3, #0
 801a748:	e0d8      	b.n	801a8fc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801a74a:	4b6e      	ldr	r3, [pc, #440]	; (801a904 <mem_trim+0x1f0>)
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	429a      	cmp	r2, r3
 801a752:	d304      	bcc.n	801a75e <mem_trim+0x4a>
 801a754:	4b6c      	ldr	r3, [pc, #432]	; (801a908 <mem_trim+0x1f4>)
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	687a      	ldr	r2, [r7, #4]
 801a75a:	429a      	cmp	r2, r3
 801a75c:	d306      	bcc.n	801a76c <mem_trim+0x58>
 801a75e:	4b6b      	ldr	r3, [pc, #428]	; (801a90c <mem_trim+0x1f8>)
 801a760:	f240 22d1 	movw	r2, #721	; 0x2d1
 801a764:	496a      	ldr	r1, [pc, #424]	; (801a910 <mem_trim+0x1fc>)
 801a766:	486b      	ldr	r0, [pc, #428]	; (801a914 <mem_trim+0x200>)
 801a768:	f00c fea6 	bl	80274b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801a76c:	4b65      	ldr	r3, [pc, #404]	; (801a904 <mem_trim+0x1f0>)
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	687a      	ldr	r2, [r7, #4]
 801a772:	429a      	cmp	r2, r3
 801a774:	d304      	bcc.n	801a780 <mem_trim+0x6c>
 801a776:	4b64      	ldr	r3, [pc, #400]	; (801a908 <mem_trim+0x1f4>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	687a      	ldr	r2, [r7, #4]
 801a77c:	429a      	cmp	r2, r3
 801a77e:	d307      	bcc.n	801a790 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a780:	f00b fe4e 	bl	8026420 <sys_arch_protect>
 801a784:	60b8      	str	r0, [r7, #8]
 801a786:	68b8      	ldr	r0, [r7, #8]
 801a788:	f00b fe58 	bl	802643c <sys_arch_unprotect>
    return rmem;
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	e0b5      	b.n	801a8fc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	3b08      	subs	r3, #8
 801a794:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801a796:	69b8      	ldr	r0, [r7, #24]
 801a798:	f7ff fdee 	bl	801a378 <mem_to_ptr>
 801a79c:	4603      	mov	r3, r0
 801a79e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a7a0:	69bb      	ldr	r3, [r7, #24]
 801a7a2:	881a      	ldrh	r2, [r3, #0]
 801a7a4:	8afb      	ldrh	r3, [r7, #22]
 801a7a6:	1ad3      	subs	r3, r2, r3
 801a7a8:	b29b      	uxth	r3, r3
 801a7aa:	3b08      	subs	r3, #8
 801a7ac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801a7ae:	8bfa      	ldrh	r2, [r7, #30]
 801a7b0:	8abb      	ldrh	r3, [r7, #20]
 801a7b2:	429a      	cmp	r2, r3
 801a7b4:	d906      	bls.n	801a7c4 <mem_trim+0xb0>
 801a7b6:	4b55      	ldr	r3, [pc, #340]	; (801a90c <mem_trim+0x1f8>)
 801a7b8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801a7bc:	4956      	ldr	r1, [pc, #344]	; (801a918 <mem_trim+0x204>)
 801a7be:	4855      	ldr	r0, [pc, #340]	; (801a914 <mem_trim+0x200>)
 801a7c0:	f00c fe7a 	bl	80274b8 <iprintf>
  if (newsize > size) {
 801a7c4:	8bfa      	ldrh	r2, [r7, #30]
 801a7c6:	8abb      	ldrh	r3, [r7, #20]
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	d901      	bls.n	801a7d0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	e095      	b.n	801a8fc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801a7d0:	8bfa      	ldrh	r2, [r7, #30]
 801a7d2:	8abb      	ldrh	r3, [r7, #20]
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	d101      	bne.n	801a7dc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	e08f      	b.n	801a8fc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801a7dc:	484f      	ldr	r0, [pc, #316]	; (801a91c <mem_trim+0x208>)
 801a7de:	f00b fde3 	bl	80263a8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801a7e2:	69bb      	ldr	r3, [r7, #24]
 801a7e4:	881b      	ldrh	r3, [r3, #0]
 801a7e6:	4618      	mov	r0, r3
 801a7e8:	f7ff fdb4 	bl	801a354 <ptr_to_mem>
 801a7ec:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801a7ee:	693b      	ldr	r3, [r7, #16]
 801a7f0:	791b      	ldrb	r3, [r3, #4]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d13f      	bne.n	801a876 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a7f6:	69bb      	ldr	r3, [r7, #24]
 801a7f8:	881b      	ldrh	r3, [r3, #0]
 801a7fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a7fe:	d106      	bne.n	801a80e <mem_trim+0xfa>
 801a800:	4b42      	ldr	r3, [pc, #264]	; (801a90c <mem_trim+0x1f8>)
 801a802:	f240 22f5 	movw	r2, #757	; 0x2f5
 801a806:	4946      	ldr	r1, [pc, #280]	; (801a920 <mem_trim+0x20c>)
 801a808:	4842      	ldr	r0, [pc, #264]	; (801a914 <mem_trim+0x200>)
 801a80a:	f00c fe55 	bl	80274b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801a80e:	693b      	ldr	r3, [r7, #16]
 801a810:	881b      	ldrh	r3, [r3, #0]
 801a812:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a814:	8afa      	ldrh	r2, [r7, #22]
 801a816:	8bfb      	ldrh	r3, [r7, #30]
 801a818:	4413      	add	r3, r2
 801a81a:	b29b      	uxth	r3, r3
 801a81c:	3308      	adds	r3, #8
 801a81e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801a820:	4b40      	ldr	r3, [pc, #256]	; (801a924 <mem_trim+0x210>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	693a      	ldr	r2, [r7, #16]
 801a826:	429a      	cmp	r2, r3
 801a828:	d106      	bne.n	801a838 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801a82a:	89fb      	ldrh	r3, [r7, #14]
 801a82c:	4618      	mov	r0, r3
 801a82e:	f7ff fd91 	bl	801a354 <ptr_to_mem>
 801a832:	4603      	mov	r3, r0
 801a834:	4a3b      	ldr	r2, [pc, #236]	; (801a924 <mem_trim+0x210>)
 801a836:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801a838:	89fb      	ldrh	r3, [r7, #14]
 801a83a:	4618      	mov	r0, r3
 801a83c:	f7ff fd8a 	bl	801a354 <ptr_to_mem>
 801a840:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801a842:	693b      	ldr	r3, [r7, #16]
 801a844:	2200      	movs	r2, #0
 801a846:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801a848:	693b      	ldr	r3, [r7, #16]
 801a84a:	89ba      	ldrh	r2, [r7, #12]
 801a84c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801a84e:	693b      	ldr	r3, [r7, #16]
 801a850:	8afa      	ldrh	r2, [r7, #22]
 801a852:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801a854:	69bb      	ldr	r3, [r7, #24]
 801a856:	89fa      	ldrh	r2, [r7, #14]
 801a858:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a85a:	693b      	ldr	r3, [r7, #16]
 801a85c:	881b      	ldrh	r3, [r3, #0]
 801a85e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a862:	d047      	beq.n	801a8f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a864:	693b      	ldr	r3, [r7, #16]
 801a866:	881b      	ldrh	r3, [r3, #0]
 801a868:	4618      	mov	r0, r3
 801a86a:	f7ff fd73 	bl	801a354 <ptr_to_mem>
 801a86e:	4602      	mov	r2, r0
 801a870:	89fb      	ldrh	r3, [r7, #14]
 801a872:	8053      	strh	r3, [r2, #2]
 801a874:	e03e      	b.n	801a8f4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801a876:	8bfb      	ldrh	r3, [r7, #30]
 801a878:	f103 0214 	add.w	r2, r3, #20
 801a87c:	8abb      	ldrh	r3, [r7, #20]
 801a87e:	429a      	cmp	r2, r3
 801a880:	d838      	bhi.n	801a8f4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a882:	8afa      	ldrh	r2, [r7, #22]
 801a884:	8bfb      	ldrh	r3, [r7, #30]
 801a886:	4413      	add	r3, r2
 801a888:	b29b      	uxth	r3, r3
 801a88a:	3308      	adds	r3, #8
 801a88c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a88e:	69bb      	ldr	r3, [r7, #24]
 801a890:	881b      	ldrh	r3, [r3, #0]
 801a892:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a896:	d106      	bne.n	801a8a6 <mem_trim+0x192>
 801a898:	4b1c      	ldr	r3, [pc, #112]	; (801a90c <mem_trim+0x1f8>)
 801a89a:	f240 3216 	movw	r2, #790	; 0x316
 801a89e:	4920      	ldr	r1, [pc, #128]	; (801a920 <mem_trim+0x20c>)
 801a8a0:	481c      	ldr	r0, [pc, #112]	; (801a914 <mem_trim+0x200>)
 801a8a2:	f00c fe09 	bl	80274b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801a8a6:	89fb      	ldrh	r3, [r7, #14]
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7ff fd53 	bl	801a354 <ptr_to_mem>
 801a8ae:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801a8b0:	4b1c      	ldr	r3, [pc, #112]	; (801a924 <mem_trim+0x210>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	693a      	ldr	r2, [r7, #16]
 801a8b6:	429a      	cmp	r2, r3
 801a8b8:	d202      	bcs.n	801a8c0 <mem_trim+0x1ac>
      lfree = mem2;
 801a8ba:	4a1a      	ldr	r2, [pc, #104]	; (801a924 <mem_trim+0x210>)
 801a8bc:	693b      	ldr	r3, [r7, #16]
 801a8be:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801a8c0:	693b      	ldr	r3, [r7, #16]
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801a8c6:	69bb      	ldr	r3, [r7, #24]
 801a8c8:	881a      	ldrh	r2, [r3, #0]
 801a8ca:	693b      	ldr	r3, [r7, #16]
 801a8cc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801a8ce:	693b      	ldr	r3, [r7, #16]
 801a8d0:	8afa      	ldrh	r2, [r7, #22]
 801a8d2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801a8d4:	69bb      	ldr	r3, [r7, #24]
 801a8d6:	89fa      	ldrh	r2, [r7, #14]
 801a8d8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a8da:	693b      	ldr	r3, [r7, #16]
 801a8dc:	881b      	ldrh	r3, [r3, #0]
 801a8de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a8e2:	d007      	beq.n	801a8f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a8e4:	693b      	ldr	r3, [r7, #16]
 801a8e6:	881b      	ldrh	r3, [r3, #0]
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	f7ff fd33 	bl	801a354 <ptr_to_mem>
 801a8ee:	4602      	mov	r2, r0
 801a8f0:	89fb      	ldrh	r3, [r7, #14]
 801a8f2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801a8f4:	4809      	ldr	r0, [pc, #36]	; (801a91c <mem_trim+0x208>)
 801a8f6:	f00b fd66 	bl	80263c6 <sys_mutex_unlock>
  return rmem;
 801a8fa:	687b      	ldr	r3, [r7, #4]
}
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	3720      	adds	r7, #32
 801a900:	46bd      	mov	sp, r7
 801a902:	bd80      	pop	{r7, pc}
 801a904:	24009e50 	.word	0x24009e50
 801a908:	24009e54 	.word	0x24009e54
 801a90c:	0802856c 	.word	0x0802856c
 801a910:	080286f8 	.word	0x080286f8
 801a914:	080285b4 	.word	0x080285b4
 801a918:	08028710 	.word	0x08028710
 801a91c:	24009e58 	.word	0x24009e58
 801a920:	08028730 	.word	0x08028730
 801a924:	24009e5c 	.word	0x24009e5c

0801a928 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b088      	sub	sp, #32
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	4603      	mov	r3, r0
 801a930:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801a932:	88fb      	ldrh	r3, [r7, #6]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d101      	bne.n	801a93c <mem_malloc+0x14>
    return NULL;
 801a938:	2300      	movs	r3, #0
 801a93a:	e0e2      	b.n	801ab02 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a93c:	88fb      	ldrh	r3, [r7, #6]
 801a93e:	3303      	adds	r3, #3
 801a940:	b29b      	uxth	r3, r3
 801a942:	f023 0303 	bic.w	r3, r3, #3
 801a946:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801a948:	8bbb      	ldrh	r3, [r7, #28]
 801a94a:	2b0b      	cmp	r3, #11
 801a94c:	d801      	bhi.n	801a952 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801a94e:	230c      	movs	r3, #12
 801a950:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a952:	8bbb      	ldrh	r3, [r7, #28]
 801a954:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a958:	d803      	bhi.n	801a962 <mem_malloc+0x3a>
 801a95a:	8bba      	ldrh	r2, [r7, #28]
 801a95c:	88fb      	ldrh	r3, [r7, #6]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d201      	bcs.n	801a966 <mem_malloc+0x3e>
    return NULL;
 801a962:	2300      	movs	r3, #0
 801a964:	e0cd      	b.n	801ab02 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801a966:	4869      	ldr	r0, [pc, #420]	; (801ab0c <mem_malloc+0x1e4>)
 801a968:	f00b fd1e 	bl	80263a8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a96c:	4b68      	ldr	r3, [pc, #416]	; (801ab10 <mem_malloc+0x1e8>)
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	4618      	mov	r0, r3
 801a972:	f7ff fd01 	bl	801a378 <mem_to_ptr>
 801a976:	4603      	mov	r3, r0
 801a978:	83fb      	strh	r3, [r7, #30]
 801a97a:	e0b7      	b.n	801aaec <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801a97c:	8bfb      	ldrh	r3, [r7, #30]
 801a97e:	4618      	mov	r0, r3
 801a980:	f7ff fce8 	bl	801a354 <ptr_to_mem>
 801a984:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801a986:	697b      	ldr	r3, [r7, #20]
 801a988:	791b      	ldrb	r3, [r3, #4]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	f040 80a7 	bne.w	801aade <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a990:	697b      	ldr	r3, [r7, #20]
 801a992:	881b      	ldrh	r3, [r3, #0]
 801a994:	461a      	mov	r2, r3
 801a996:	8bfb      	ldrh	r3, [r7, #30]
 801a998:	1ad3      	subs	r3, r2, r3
 801a99a:	f1a3 0208 	sub.w	r2, r3, #8
 801a99e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801a9a0:	429a      	cmp	r2, r3
 801a9a2:	f0c0 809c 	bcc.w	801aade <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801a9a6:	697b      	ldr	r3, [r7, #20]
 801a9a8:	881b      	ldrh	r3, [r3, #0]
 801a9aa:	461a      	mov	r2, r3
 801a9ac:	8bfb      	ldrh	r3, [r7, #30]
 801a9ae:	1ad3      	subs	r3, r2, r3
 801a9b0:	f1a3 0208 	sub.w	r2, r3, #8
 801a9b4:	8bbb      	ldrh	r3, [r7, #28]
 801a9b6:	3314      	adds	r3, #20
 801a9b8:	429a      	cmp	r2, r3
 801a9ba:	d333      	bcc.n	801aa24 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a9bc:	8bfa      	ldrh	r2, [r7, #30]
 801a9be:	8bbb      	ldrh	r3, [r7, #28]
 801a9c0:	4413      	add	r3, r2
 801a9c2:	b29b      	uxth	r3, r3
 801a9c4:	3308      	adds	r3, #8
 801a9c6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a9c8:	8a7b      	ldrh	r3, [r7, #18]
 801a9ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a9ce:	d106      	bne.n	801a9de <mem_malloc+0xb6>
 801a9d0:	4b50      	ldr	r3, [pc, #320]	; (801ab14 <mem_malloc+0x1ec>)
 801a9d2:	f240 3287 	movw	r2, #903	; 0x387
 801a9d6:	4950      	ldr	r1, [pc, #320]	; (801ab18 <mem_malloc+0x1f0>)
 801a9d8:	4850      	ldr	r0, [pc, #320]	; (801ab1c <mem_malloc+0x1f4>)
 801a9da:	f00c fd6d 	bl	80274b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801a9de:	8a7b      	ldrh	r3, [r7, #18]
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7ff fcb7 	bl	801a354 <ptr_to_mem>
 801a9e6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	2200      	movs	r2, #0
 801a9ec:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801a9ee:	697b      	ldr	r3, [r7, #20]
 801a9f0:	881a      	ldrh	r2, [r3, #0]
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	8bfa      	ldrh	r2, [r7, #30]
 801a9fa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801a9fc:	697b      	ldr	r3, [r7, #20]
 801a9fe:	8a7a      	ldrh	r2, [r7, #18]
 801aa00:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801aa02:	697b      	ldr	r3, [r7, #20]
 801aa04:	2201      	movs	r2, #1
 801aa06:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	881b      	ldrh	r3, [r3, #0]
 801aa0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801aa10:	d00b      	beq.n	801aa2a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	881b      	ldrh	r3, [r3, #0]
 801aa16:	4618      	mov	r0, r3
 801aa18:	f7ff fc9c 	bl	801a354 <ptr_to_mem>
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	8a7b      	ldrh	r3, [r7, #18]
 801aa20:	8053      	strh	r3, [r2, #2]
 801aa22:	e002      	b.n	801aa2a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801aa24:	697b      	ldr	r3, [r7, #20]
 801aa26:	2201      	movs	r2, #1
 801aa28:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801aa2a:	4b39      	ldr	r3, [pc, #228]	; (801ab10 <mem_malloc+0x1e8>)
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	697a      	ldr	r2, [r7, #20]
 801aa30:	429a      	cmp	r2, r3
 801aa32:	d127      	bne.n	801aa84 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801aa34:	4b36      	ldr	r3, [pc, #216]	; (801ab10 <mem_malloc+0x1e8>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801aa3a:	e005      	b.n	801aa48 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801aa3c:	69bb      	ldr	r3, [r7, #24]
 801aa3e:	881b      	ldrh	r3, [r3, #0]
 801aa40:	4618      	mov	r0, r3
 801aa42:	f7ff fc87 	bl	801a354 <ptr_to_mem>
 801aa46:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801aa48:	69bb      	ldr	r3, [r7, #24]
 801aa4a:	791b      	ldrb	r3, [r3, #4]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d004      	beq.n	801aa5a <mem_malloc+0x132>
 801aa50:	4b33      	ldr	r3, [pc, #204]	; (801ab20 <mem_malloc+0x1f8>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	69ba      	ldr	r2, [r7, #24]
 801aa56:	429a      	cmp	r2, r3
 801aa58:	d1f0      	bne.n	801aa3c <mem_malloc+0x114>
          }
          lfree = cur;
 801aa5a:	4a2d      	ldr	r2, [pc, #180]	; (801ab10 <mem_malloc+0x1e8>)
 801aa5c:	69bb      	ldr	r3, [r7, #24]
 801aa5e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801aa60:	4b2b      	ldr	r3, [pc, #172]	; (801ab10 <mem_malloc+0x1e8>)
 801aa62:	681a      	ldr	r2, [r3, #0]
 801aa64:	4b2e      	ldr	r3, [pc, #184]	; (801ab20 <mem_malloc+0x1f8>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	d00b      	beq.n	801aa84 <mem_malloc+0x15c>
 801aa6c:	4b28      	ldr	r3, [pc, #160]	; (801ab10 <mem_malloc+0x1e8>)
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	791b      	ldrb	r3, [r3, #4]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d006      	beq.n	801aa84 <mem_malloc+0x15c>
 801aa76:	4b27      	ldr	r3, [pc, #156]	; (801ab14 <mem_malloc+0x1ec>)
 801aa78:	f240 32b5 	movw	r2, #949	; 0x3b5
 801aa7c:	4929      	ldr	r1, [pc, #164]	; (801ab24 <mem_malloc+0x1fc>)
 801aa7e:	4827      	ldr	r0, [pc, #156]	; (801ab1c <mem_malloc+0x1f4>)
 801aa80:	f00c fd1a 	bl	80274b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801aa84:	4821      	ldr	r0, [pc, #132]	; (801ab0c <mem_malloc+0x1e4>)
 801aa86:	f00b fc9e 	bl	80263c6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801aa8a:	8bba      	ldrh	r2, [r7, #28]
 801aa8c:	697b      	ldr	r3, [r7, #20]
 801aa8e:	4413      	add	r3, r2
 801aa90:	3308      	adds	r3, #8
 801aa92:	4a23      	ldr	r2, [pc, #140]	; (801ab20 <mem_malloc+0x1f8>)
 801aa94:	6812      	ldr	r2, [r2, #0]
 801aa96:	4293      	cmp	r3, r2
 801aa98:	d906      	bls.n	801aaa8 <mem_malloc+0x180>
 801aa9a:	4b1e      	ldr	r3, [pc, #120]	; (801ab14 <mem_malloc+0x1ec>)
 801aa9c:	f240 32b9 	movw	r2, #953	; 0x3b9
 801aaa0:	4921      	ldr	r1, [pc, #132]	; (801ab28 <mem_malloc+0x200>)
 801aaa2:	481e      	ldr	r0, [pc, #120]	; (801ab1c <mem_malloc+0x1f4>)
 801aaa4:	f00c fd08 	bl	80274b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801aaa8:	697b      	ldr	r3, [r7, #20]
 801aaaa:	f003 0303 	and.w	r3, r3, #3
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d006      	beq.n	801aac0 <mem_malloc+0x198>
 801aab2:	4b18      	ldr	r3, [pc, #96]	; (801ab14 <mem_malloc+0x1ec>)
 801aab4:	f240 32bb 	movw	r2, #955	; 0x3bb
 801aab8:	491c      	ldr	r1, [pc, #112]	; (801ab2c <mem_malloc+0x204>)
 801aaba:	4818      	ldr	r0, [pc, #96]	; (801ab1c <mem_malloc+0x1f4>)
 801aabc:	f00c fcfc 	bl	80274b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801aac0:	697b      	ldr	r3, [r7, #20]
 801aac2:	f003 0303 	and.w	r3, r3, #3
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d006      	beq.n	801aad8 <mem_malloc+0x1b0>
 801aaca:	4b12      	ldr	r3, [pc, #72]	; (801ab14 <mem_malloc+0x1ec>)
 801aacc:	f240 32bd 	movw	r2, #957	; 0x3bd
 801aad0:	4917      	ldr	r1, [pc, #92]	; (801ab30 <mem_malloc+0x208>)
 801aad2:	4812      	ldr	r0, [pc, #72]	; (801ab1c <mem_malloc+0x1f4>)
 801aad4:	f00c fcf0 	bl	80274b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	3308      	adds	r3, #8
 801aadc:	e011      	b.n	801ab02 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801aade:	8bfb      	ldrh	r3, [r7, #30]
 801aae0:	4618      	mov	r0, r3
 801aae2:	f7ff fc37 	bl	801a354 <ptr_to_mem>
 801aae6:	4603      	mov	r3, r0
 801aae8:	881b      	ldrh	r3, [r3, #0]
 801aaea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801aaec:	8bfa      	ldrh	r2, [r7, #30]
 801aaee:	8bbb      	ldrh	r3, [r7, #28]
 801aaf0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801aaf4:	429a      	cmp	r2, r3
 801aaf6:	f4ff af41 	bcc.w	801a97c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801aafa:	4804      	ldr	r0, [pc, #16]	; (801ab0c <mem_malloc+0x1e4>)
 801aafc:	f00b fc63 	bl	80263c6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801ab00:	2300      	movs	r3, #0
}
 801ab02:	4618      	mov	r0, r3
 801ab04:	3720      	adds	r7, #32
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd80      	pop	{r7, pc}
 801ab0a:	bf00      	nop
 801ab0c:	24009e58 	.word	0x24009e58
 801ab10:	24009e5c 	.word	0x24009e5c
 801ab14:	0802856c 	.word	0x0802856c
 801ab18:	08028730 	.word	0x08028730
 801ab1c:	080285b4 	.word	0x080285b4
 801ab20:	24009e54 	.word	0x24009e54
 801ab24:	08028744 	.word	0x08028744
 801ab28:	08028760 	.word	0x08028760
 801ab2c:	08028790 	.word	0x08028790
 801ab30:	080287c0 	.word	0x080287c0

0801ab34 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801ab34:	b480      	push	{r7}
 801ab36:	b085      	sub	sp, #20
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	689b      	ldr	r3, [r3, #8]
 801ab40:	2200      	movs	r2, #0
 801ab42:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	685b      	ldr	r3, [r3, #4]
 801ab48:	3303      	adds	r3, #3
 801ab4a:	f023 0303 	bic.w	r3, r3, #3
 801ab4e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801ab50:	2300      	movs	r3, #0
 801ab52:	60fb      	str	r3, [r7, #12]
 801ab54:	e011      	b.n	801ab7a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	689b      	ldr	r3, [r3, #8]
 801ab5a:	681a      	ldr	r2, [r3, #0]
 801ab5c:	68bb      	ldr	r3, [r7, #8]
 801ab5e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	689b      	ldr	r3, [r3, #8]
 801ab64:	68ba      	ldr	r2, [r7, #8]
 801ab66:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	881b      	ldrh	r3, [r3, #0]
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	68bb      	ldr	r3, [r7, #8]
 801ab70:	4413      	add	r3, r2
 801ab72:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	3301      	adds	r3, #1
 801ab78:	60fb      	str	r3, [r7, #12]
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	885b      	ldrh	r3, [r3, #2]
 801ab7e:	461a      	mov	r2, r3
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	4293      	cmp	r3, r2
 801ab84:	dbe7      	blt.n	801ab56 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801ab86:	bf00      	nop
 801ab88:	bf00      	nop
 801ab8a:	3714      	adds	r7, #20
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab92:	4770      	bx	lr

0801ab94 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b082      	sub	sp, #8
 801ab98:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	80fb      	strh	r3, [r7, #6]
 801ab9e:	e009      	b.n	801abb4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801aba0:	88fb      	ldrh	r3, [r7, #6]
 801aba2:	4a08      	ldr	r2, [pc, #32]	; (801abc4 <memp_init+0x30>)
 801aba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aba8:	4618      	mov	r0, r3
 801abaa:	f7ff ffc3 	bl	801ab34 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801abae:	88fb      	ldrh	r3, [r7, #6]
 801abb0:	3301      	adds	r3, #1
 801abb2:	80fb      	strh	r3, [r7, #6]
 801abb4:	88fb      	ldrh	r3, [r7, #6]
 801abb6:	2b0c      	cmp	r3, #12
 801abb8:	d9f2      	bls.n	801aba0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801abba:	bf00      	nop
 801abbc:	bf00      	nop
 801abbe:	3708      	adds	r7, #8
 801abc0:	46bd      	mov	sp, r7
 801abc2:	bd80      	pop	{r7, pc}
 801abc4:	0802bac8 	.word	0x0802bac8

0801abc8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b084      	sub	sp, #16
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801abd0:	f00b fc26 	bl	8026420 <sys_arch_protect>
 801abd4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	689b      	ldr	r3, [r3, #8]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801abde:	68bb      	ldr	r3, [r7, #8]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d015      	beq.n	801ac10 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	689b      	ldr	r3, [r3, #8]
 801abe8:	68ba      	ldr	r2, [r7, #8]
 801abea:	6812      	ldr	r2, [r2, #0]
 801abec:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	f003 0303 	and.w	r3, r3, #3
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d006      	beq.n	801ac06 <do_memp_malloc_pool+0x3e>
 801abf8:	4b09      	ldr	r3, [pc, #36]	; (801ac20 <do_memp_malloc_pool+0x58>)
 801abfa:	f44f 728c 	mov.w	r2, #280	; 0x118
 801abfe:	4909      	ldr	r1, [pc, #36]	; (801ac24 <do_memp_malloc_pool+0x5c>)
 801ac00:	4809      	ldr	r0, [pc, #36]	; (801ac28 <do_memp_malloc_pool+0x60>)
 801ac02:	f00c fc59 	bl	80274b8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801ac06:	68f8      	ldr	r0, [r7, #12]
 801ac08:	f00b fc18 	bl	802643c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801ac0c:	68bb      	ldr	r3, [r7, #8]
 801ac0e:	e003      	b.n	801ac18 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801ac10:	68f8      	ldr	r0, [r7, #12]
 801ac12:	f00b fc13 	bl	802643c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801ac16:	2300      	movs	r3, #0
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3710      	adds	r7, #16
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}
 801ac20:	080287e4 	.word	0x080287e4
 801ac24:	08028814 	.word	0x08028814
 801ac28:	08028838 	.word	0x08028838

0801ac2c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b082      	sub	sp, #8
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d106      	bne.n	801ac48 <memp_malloc_pool+0x1c>
 801ac3a:	4b0a      	ldr	r3, [pc, #40]	; (801ac64 <memp_malloc_pool+0x38>)
 801ac3c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801ac40:	4909      	ldr	r1, [pc, #36]	; (801ac68 <memp_malloc_pool+0x3c>)
 801ac42:	480a      	ldr	r0, [pc, #40]	; (801ac6c <memp_malloc_pool+0x40>)
 801ac44:	f00c fc38 	bl	80274b8 <iprintf>
  if (desc == NULL) {
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d101      	bne.n	801ac52 <memp_malloc_pool+0x26>
    return NULL;
 801ac4e:	2300      	movs	r3, #0
 801ac50:	e003      	b.n	801ac5a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801ac52:	6878      	ldr	r0, [r7, #4]
 801ac54:	f7ff ffb8 	bl	801abc8 <do_memp_malloc_pool>
 801ac58:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	3708      	adds	r7, #8
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
 801ac62:	bf00      	nop
 801ac64:	080287e4 	.word	0x080287e4
 801ac68:	08028860 	.word	0x08028860
 801ac6c:	08028838 	.word	0x08028838

0801ac70 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b084      	sub	sp, #16
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	4603      	mov	r3, r0
 801ac78:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801ac7a:	79fb      	ldrb	r3, [r7, #7]
 801ac7c:	2b0c      	cmp	r3, #12
 801ac7e:	d908      	bls.n	801ac92 <memp_malloc+0x22>
 801ac80:	4b0a      	ldr	r3, [pc, #40]	; (801acac <memp_malloc+0x3c>)
 801ac82:	f240 1257 	movw	r2, #343	; 0x157
 801ac86:	490a      	ldr	r1, [pc, #40]	; (801acb0 <memp_malloc+0x40>)
 801ac88:	480a      	ldr	r0, [pc, #40]	; (801acb4 <memp_malloc+0x44>)
 801ac8a:	f00c fc15 	bl	80274b8 <iprintf>
 801ac8e:	2300      	movs	r3, #0
 801ac90:	e008      	b.n	801aca4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801ac92:	79fb      	ldrb	r3, [r7, #7]
 801ac94:	4a08      	ldr	r2, [pc, #32]	; (801acb8 <memp_malloc+0x48>)
 801ac96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	f7ff ff94 	bl	801abc8 <do_memp_malloc_pool>
 801aca0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801aca2:	68fb      	ldr	r3, [r7, #12]
}
 801aca4:	4618      	mov	r0, r3
 801aca6:	3710      	adds	r7, #16
 801aca8:	46bd      	mov	sp, r7
 801acaa:	bd80      	pop	{r7, pc}
 801acac:	080287e4 	.word	0x080287e4
 801acb0:	08028874 	.word	0x08028874
 801acb4:	08028838 	.word	0x08028838
 801acb8:	0802bac8 	.word	0x0802bac8

0801acbc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b084      	sub	sp, #16
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801acc6:	683b      	ldr	r3, [r7, #0]
 801acc8:	f003 0303 	and.w	r3, r3, #3
 801accc:	2b00      	cmp	r3, #0
 801acce:	d006      	beq.n	801acde <do_memp_free_pool+0x22>
 801acd0:	4b0d      	ldr	r3, [pc, #52]	; (801ad08 <do_memp_free_pool+0x4c>)
 801acd2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801acd6:	490d      	ldr	r1, [pc, #52]	; (801ad0c <do_memp_free_pool+0x50>)
 801acd8:	480d      	ldr	r0, [pc, #52]	; (801ad10 <do_memp_free_pool+0x54>)
 801acda:	f00c fbed 	bl	80274b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801acde:	683b      	ldr	r3, [r7, #0]
 801ace0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801ace2:	f00b fb9d 	bl	8026420 <sys_arch_protect>
 801ace6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	689b      	ldr	r3, [r3, #8]
 801acec:	681a      	ldr	r2, [r3, #0]
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	689b      	ldr	r3, [r3, #8]
 801acf6:	68fa      	ldr	r2, [r7, #12]
 801acf8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801acfa:	68b8      	ldr	r0, [r7, #8]
 801acfc:	f00b fb9e 	bl	802643c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801ad00:	bf00      	nop
 801ad02:	3710      	adds	r7, #16
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}
 801ad08:	080287e4 	.word	0x080287e4
 801ad0c:	08028894 	.word	0x08028894
 801ad10:	08028838 	.word	0x08028838

0801ad14 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b082      	sub	sp, #8
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	6078      	str	r0, [r7, #4]
 801ad1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d106      	bne.n	801ad32 <memp_free_pool+0x1e>
 801ad24:	4b0a      	ldr	r3, [pc, #40]	; (801ad50 <memp_free_pool+0x3c>)
 801ad26:	f240 1295 	movw	r2, #405	; 0x195
 801ad2a:	490a      	ldr	r1, [pc, #40]	; (801ad54 <memp_free_pool+0x40>)
 801ad2c:	480a      	ldr	r0, [pc, #40]	; (801ad58 <memp_free_pool+0x44>)
 801ad2e:	f00c fbc3 	bl	80274b8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d007      	beq.n	801ad48 <memp_free_pool+0x34>
 801ad38:	683b      	ldr	r3, [r7, #0]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d004      	beq.n	801ad48 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801ad3e:	6839      	ldr	r1, [r7, #0]
 801ad40:	6878      	ldr	r0, [r7, #4]
 801ad42:	f7ff ffbb 	bl	801acbc <do_memp_free_pool>
 801ad46:	e000      	b.n	801ad4a <memp_free_pool+0x36>
    return;
 801ad48:	bf00      	nop
}
 801ad4a:	3708      	adds	r7, #8
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bd80      	pop	{r7, pc}
 801ad50:	080287e4 	.word	0x080287e4
 801ad54:	08028860 	.word	0x08028860
 801ad58:	08028838 	.word	0x08028838

0801ad5c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801ad5c:	b580      	push	{r7, lr}
 801ad5e:	b082      	sub	sp, #8
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	4603      	mov	r3, r0
 801ad64:	6039      	str	r1, [r7, #0]
 801ad66:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801ad68:	79fb      	ldrb	r3, [r7, #7]
 801ad6a:	2b0c      	cmp	r3, #12
 801ad6c:	d907      	bls.n	801ad7e <memp_free+0x22>
 801ad6e:	4b0c      	ldr	r3, [pc, #48]	; (801ada0 <memp_free+0x44>)
 801ad70:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801ad74:	490b      	ldr	r1, [pc, #44]	; (801ada4 <memp_free+0x48>)
 801ad76:	480c      	ldr	r0, [pc, #48]	; (801ada8 <memp_free+0x4c>)
 801ad78:	f00c fb9e 	bl	80274b8 <iprintf>
 801ad7c:	e00c      	b.n	801ad98 <memp_free+0x3c>

  if (mem == NULL) {
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d008      	beq.n	801ad96 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801ad84:	79fb      	ldrb	r3, [r7, #7]
 801ad86:	4a09      	ldr	r2, [pc, #36]	; (801adac <memp_free+0x50>)
 801ad88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ad8c:	6839      	ldr	r1, [r7, #0]
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7ff ff94 	bl	801acbc <do_memp_free_pool>
 801ad94:	e000      	b.n	801ad98 <memp_free+0x3c>
    return;
 801ad96:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801ad98:	3708      	adds	r7, #8
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	bd80      	pop	{r7, pc}
 801ad9e:	bf00      	nop
 801ada0:	080287e4 	.word	0x080287e4
 801ada4:	080288b4 	.word	0x080288b4
 801ada8:	08028838 	.word	0x08028838
 801adac:	0802bac8 	.word	0x0802bac8

0801adb0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801adb0:	b480      	push	{r7}
 801adb2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801adb4:	bf00      	nop
 801adb6:	46bd      	mov	sp, r7
 801adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adbc:	4770      	bx	lr
	...

0801adc0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801adc0:	b580      	push	{r7, lr}
 801adc2:	b086      	sub	sp, #24
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	60f8      	str	r0, [r7, #12]
 801adc8:	60b9      	str	r1, [r7, #8]
 801adca:	607a      	str	r2, [r7, #4]
 801adcc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d108      	bne.n	801ade6 <netif_add+0x26>
 801add4:	4b5b      	ldr	r3, [pc, #364]	; (801af44 <netif_add+0x184>)
 801add6:	f240 1227 	movw	r2, #295	; 0x127
 801adda:	495b      	ldr	r1, [pc, #364]	; (801af48 <netif_add+0x188>)
 801addc:	485b      	ldr	r0, [pc, #364]	; (801af4c <netif_add+0x18c>)
 801adde:	f00c fb6b 	bl	80274b8 <iprintf>
 801ade2:	2300      	movs	r3, #0
 801ade4:	e0a9      	b.n	801af3a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d108      	bne.n	801adfe <netif_add+0x3e>
 801adec:	4b55      	ldr	r3, [pc, #340]	; (801af44 <netif_add+0x184>)
 801adee:	f44f 7294 	mov.w	r2, #296	; 0x128
 801adf2:	4957      	ldr	r1, [pc, #348]	; (801af50 <netif_add+0x190>)
 801adf4:	4855      	ldr	r0, [pc, #340]	; (801af4c <netif_add+0x18c>)
 801adf6:	f00c fb5f 	bl	80274b8 <iprintf>
 801adfa:	2300      	movs	r3, #0
 801adfc:	e09d      	b.n	801af3a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801adfe:	68bb      	ldr	r3, [r7, #8]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d101      	bne.n	801ae08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801ae04:	4b53      	ldr	r3, [pc, #332]	; (801af54 <netif_add+0x194>)
 801ae06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d101      	bne.n	801ae12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801ae0e:	4b51      	ldr	r3, [pc, #324]	; (801af54 <netif_add+0x194>)
 801ae10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801ae12:	683b      	ldr	r3, [r7, #0]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d101      	bne.n	801ae1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801ae18:	4b4e      	ldr	r3, [pc, #312]	; (801af54 <netif_add+0x194>)
 801ae1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	2200      	movs	r2, #0
 801ae20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	2200      	movs	r2, #0
 801ae26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	4a49      	ldr	r2, [pc, #292]	; (801af58 <netif_add+0x198>)
 801ae32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	2200      	movs	r2, #0
 801ae38:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	3324      	adds	r3, #36	; 0x24
 801ae46:	2204      	movs	r2, #4
 801ae48:	2100      	movs	r1, #0
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f00c fa36 	bl	80272bc <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	2200      	movs	r2, #0
 801ae54:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	6a3a      	ldr	r2, [r7, #32]
 801ae5a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801ae5c:	4b3f      	ldr	r3, [pc, #252]	; (801af5c <netif_add+0x19c>)
 801ae5e:	781a      	ldrb	r2, [r3, #0]
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ae6a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801ae6c:	683b      	ldr	r3, [r7, #0]
 801ae6e:	687a      	ldr	r2, [r7, #4]
 801ae70:	68b9      	ldr	r1, [r7, #8]
 801ae72:	68f8      	ldr	r0, [r7, #12]
 801ae74:	f000 f914 	bl	801b0a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae7a:	68f8      	ldr	r0, [r7, #12]
 801ae7c:	4798      	blx	r3
 801ae7e:	4603      	mov	r3, r0
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d001      	beq.n	801ae88 <netif_add+0xc8>
    return NULL;
 801ae84:	2300      	movs	r3, #0
 801ae86:	e058      	b.n	801af3a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ae8e:	2bff      	cmp	r3, #255	; 0xff
 801ae90:	d103      	bne.n	801ae9a <netif_add+0xda>
        netif->num = 0;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	2200      	movs	r2, #0
 801ae96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801ae9a:	2300      	movs	r3, #0
 801ae9c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801ae9e:	4b30      	ldr	r3, [pc, #192]	; (801af60 <netif_add+0x1a0>)
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	617b      	str	r3, [r7, #20]
 801aea4:	e02b      	b.n	801aefe <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801aea6:	697a      	ldr	r2, [r7, #20]
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	429a      	cmp	r2, r3
 801aeac:	d106      	bne.n	801aebc <netif_add+0xfc>
 801aeae:	4b25      	ldr	r3, [pc, #148]	; (801af44 <netif_add+0x184>)
 801aeb0:	f240 128b 	movw	r2, #395	; 0x18b
 801aeb4:	492b      	ldr	r1, [pc, #172]	; (801af64 <netif_add+0x1a4>)
 801aeb6:	4825      	ldr	r0, [pc, #148]	; (801af4c <netif_add+0x18c>)
 801aeb8:	f00c fafe 	bl	80274b8 <iprintf>
        num_netifs++;
 801aebc:	693b      	ldr	r3, [r7, #16]
 801aebe:	3301      	adds	r3, #1
 801aec0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801aec2:	693b      	ldr	r3, [r7, #16]
 801aec4:	2bff      	cmp	r3, #255	; 0xff
 801aec6:	dd06      	ble.n	801aed6 <netif_add+0x116>
 801aec8:	4b1e      	ldr	r3, [pc, #120]	; (801af44 <netif_add+0x184>)
 801aeca:	f240 128d 	movw	r2, #397	; 0x18d
 801aece:	4926      	ldr	r1, [pc, #152]	; (801af68 <netif_add+0x1a8>)
 801aed0:	481e      	ldr	r0, [pc, #120]	; (801af4c <netif_add+0x18c>)
 801aed2:	f00c faf1 	bl	80274b8 <iprintf>
        if (netif2->num == netif->num) {
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801aee2:	429a      	cmp	r2, r3
 801aee4:	d108      	bne.n	801aef8 <netif_add+0x138>
          netif->num++;
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801aeec:	3301      	adds	r3, #1
 801aeee:	b2da      	uxtb	r2, r3
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801aef6:	e005      	b.n	801af04 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801aef8:	697b      	ldr	r3, [r7, #20]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	617b      	str	r3, [r7, #20]
 801aefe:	697b      	ldr	r3, [r7, #20]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d1d0      	bne.n	801aea6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d1be      	bne.n	801ae88 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801af10:	2bfe      	cmp	r3, #254	; 0xfe
 801af12:	d103      	bne.n	801af1c <netif_add+0x15c>
    netif_num = 0;
 801af14:	4b11      	ldr	r3, [pc, #68]	; (801af5c <netif_add+0x19c>)
 801af16:	2200      	movs	r2, #0
 801af18:	701a      	strb	r2, [r3, #0]
 801af1a:	e006      	b.n	801af2a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801af22:	3301      	adds	r3, #1
 801af24:	b2da      	uxtb	r2, r3
 801af26:	4b0d      	ldr	r3, [pc, #52]	; (801af5c <netif_add+0x19c>)
 801af28:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801af2a:	4b0d      	ldr	r3, [pc, #52]	; (801af60 <netif_add+0x1a0>)
 801af2c:	681a      	ldr	r2, [r3, #0]
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801af32:	4a0b      	ldr	r2, [pc, #44]	; (801af60 <netif_add+0x1a0>)
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801af38:	68fb      	ldr	r3, [r7, #12]
}
 801af3a:	4618      	mov	r0, r3
 801af3c:	3718      	adds	r7, #24
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}
 801af42:	bf00      	nop
 801af44:	080288d0 	.word	0x080288d0
 801af48:	08028964 	.word	0x08028964
 801af4c:	08028920 	.word	0x08028920
 801af50:	08028980 	.word	0x08028980
 801af54:	0802bb4c 	.word	0x0802bb4c
 801af58:	0801b383 	.word	0x0801b383
 801af5c:	2400cf54 	.word	0x2400cf54
 801af60:	2400cf4c 	.word	0x2400cf4c
 801af64:	080289a4 	.word	0x080289a4
 801af68:	080289b8 	.word	0x080289b8

0801af6c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	b082      	sub	sp, #8
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
 801af74:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801af76:	6839      	ldr	r1, [r7, #0]
 801af78:	6878      	ldr	r0, [r7, #4]
 801af7a:	f002 fb91 	bl	801d6a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801af7e:	6839      	ldr	r1, [r7, #0]
 801af80:	6878      	ldr	r0, [r7, #4]
 801af82:	f006 ffa7 	bl	8021ed4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801af86:	bf00      	nop
 801af88:	3708      	adds	r7, #8
 801af8a:	46bd      	mov	sp, r7
 801af8c:	bd80      	pop	{r7, pc}
	...

0801af90 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b086      	sub	sp, #24
 801af94:	af00      	add	r7, sp, #0
 801af96:	60f8      	str	r0, [r7, #12]
 801af98:	60b9      	str	r1, [r7, #8]
 801af9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801af9c:	68bb      	ldr	r3, [r7, #8]
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d106      	bne.n	801afb0 <netif_do_set_ipaddr+0x20>
 801afa2:	4b1d      	ldr	r3, [pc, #116]	; (801b018 <netif_do_set_ipaddr+0x88>)
 801afa4:	f240 12cb 	movw	r2, #459	; 0x1cb
 801afa8:	491c      	ldr	r1, [pc, #112]	; (801b01c <netif_do_set_ipaddr+0x8c>)
 801afaa:	481d      	ldr	r0, [pc, #116]	; (801b020 <netif_do_set_ipaddr+0x90>)
 801afac:	f00c fa84 	bl	80274b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d106      	bne.n	801afc4 <netif_do_set_ipaddr+0x34>
 801afb6:	4b18      	ldr	r3, [pc, #96]	; (801b018 <netif_do_set_ipaddr+0x88>)
 801afb8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801afbc:	4917      	ldr	r1, [pc, #92]	; (801b01c <netif_do_set_ipaddr+0x8c>)
 801afbe:	4818      	ldr	r0, [pc, #96]	; (801b020 <netif_do_set_ipaddr+0x90>)
 801afc0:	f00c fa7a 	bl	80274b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	681a      	ldr	r2, [r3, #0]
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	3304      	adds	r3, #4
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	429a      	cmp	r2, r3
 801afd0:	d01c      	beq.n	801b00c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801afd2:	68bb      	ldr	r3, [r7, #8]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	3304      	adds	r3, #4
 801afdc:	681a      	ldr	r2, [r3, #0]
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801afe2:	f107 0314 	add.w	r3, r7, #20
 801afe6:	4619      	mov	r1, r3
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f7ff ffbf 	bl	801af6c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801afee:	68bb      	ldr	r3, [r7, #8]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d002      	beq.n	801affa <netif_do_set_ipaddr+0x6a>
 801aff4:	68bb      	ldr	r3, [r7, #8]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	e000      	b.n	801affc <netif_do_set_ipaddr+0x6c>
 801affa:	2300      	movs	r3, #0
 801affc:	68fa      	ldr	r2, [r7, #12]
 801affe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801b000:	2101      	movs	r1, #1
 801b002:	68f8      	ldr	r0, [r7, #12]
 801b004:	f000 f8d2 	bl	801b1ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801b008:	2301      	movs	r3, #1
 801b00a:	e000      	b.n	801b00e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801b00c:	2300      	movs	r3, #0
}
 801b00e:	4618      	mov	r0, r3
 801b010:	3718      	adds	r7, #24
 801b012:	46bd      	mov	sp, r7
 801b014:	bd80      	pop	{r7, pc}
 801b016:	bf00      	nop
 801b018:	080288d0 	.word	0x080288d0
 801b01c:	080289e8 	.word	0x080289e8
 801b020:	08028920 	.word	0x08028920

0801b024 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801b024:	b480      	push	{r7}
 801b026:	b085      	sub	sp, #20
 801b028:	af00      	add	r7, sp, #0
 801b02a:	60f8      	str	r0, [r7, #12]
 801b02c:	60b9      	str	r1, [r7, #8]
 801b02e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801b030:	68bb      	ldr	r3, [r7, #8]
 801b032:	681a      	ldr	r2, [r3, #0]
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	3308      	adds	r3, #8
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	429a      	cmp	r2, r3
 801b03c:	d00a      	beq.n	801b054 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801b03e:	68bb      	ldr	r3, [r7, #8]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d002      	beq.n	801b04a <netif_do_set_netmask+0x26>
 801b044:	68bb      	ldr	r3, [r7, #8]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	e000      	b.n	801b04c <netif_do_set_netmask+0x28>
 801b04a:	2300      	movs	r3, #0
 801b04c:	68fa      	ldr	r2, [r7, #12]
 801b04e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801b050:	2301      	movs	r3, #1
 801b052:	e000      	b.n	801b056 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801b054:	2300      	movs	r3, #0
}
 801b056:	4618      	mov	r0, r3
 801b058:	3714      	adds	r7, #20
 801b05a:	46bd      	mov	sp, r7
 801b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b060:	4770      	bx	lr

0801b062 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801b062:	b480      	push	{r7}
 801b064:	b085      	sub	sp, #20
 801b066:	af00      	add	r7, sp, #0
 801b068:	60f8      	str	r0, [r7, #12]
 801b06a:	60b9      	str	r1, [r7, #8]
 801b06c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801b06e:	68bb      	ldr	r3, [r7, #8]
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	330c      	adds	r3, #12
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	429a      	cmp	r2, r3
 801b07a:	d00a      	beq.n	801b092 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801b07c:	68bb      	ldr	r3, [r7, #8]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d002      	beq.n	801b088 <netif_do_set_gw+0x26>
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	e000      	b.n	801b08a <netif_do_set_gw+0x28>
 801b088:	2300      	movs	r3, #0
 801b08a:	68fa      	ldr	r2, [r7, #12]
 801b08c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801b08e:	2301      	movs	r3, #1
 801b090:	e000      	b.n	801b094 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801b092:	2300      	movs	r3, #0
}
 801b094:	4618      	mov	r0, r3
 801b096:	3714      	adds	r7, #20
 801b098:	46bd      	mov	sp, r7
 801b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09e:	4770      	bx	lr

0801b0a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b088      	sub	sp, #32
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	60f8      	str	r0, [r7, #12]
 801b0a8:	60b9      	str	r1, [r7, #8]
 801b0aa:	607a      	str	r2, [r7, #4]
 801b0ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b0b6:	68bb      	ldr	r3, [r7, #8]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d101      	bne.n	801b0c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801b0bc:	4b1c      	ldr	r3, [pc, #112]	; (801b130 <netif_set_addr+0x90>)
 801b0be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d101      	bne.n	801b0ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801b0c6:	4b1a      	ldr	r3, [pc, #104]	; (801b130 <netif_set_addr+0x90>)
 801b0c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801b0ca:	683b      	ldr	r3, [r7, #0]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d101      	bne.n	801b0d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801b0d0:	4b17      	ldr	r3, [pc, #92]	; (801b130 <netif_set_addr+0x90>)
 801b0d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801b0d4:	68bb      	ldr	r3, [r7, #8]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d003      	beq.n	801b0e2 <netif_set_addr+0x42>
 801b0da:	68bb      	ldr	r3, [r7, #8]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d101      	bne.n	801b0e6 <netif_set_addr+0x46>
 801b0e2:	2301      	movs	r3, #1
 801b0e4:	e000      	b.n	801b0e8 <netif_set_addr+0x48>
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d006      	beq.n	801b0fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801b0f0:	f107 0310 	add.w	r3, r7, #16
 801b0f4:	461a      	mov	r2, r3
 801b0f6:	68b9      	ldr	r1, [r7, #8]
 801b0f8:	68f8      	ldr	r0, [r7, #12]
 801b0fa:	f7ff ff49 	bl	801af90 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801b0fe:	69fa      	ldr	r2, [r7, #28]
 801b100:	6879      	ldr	r1, [r7, #4]
 801b102:	68f8      	ldr	r0, [r7, #12]
 801b104:	f7ff ff8e 	bl	801b024 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801b108:	69ba      	ldr	r2, [r7, #24]
 801b10a:	6839      	ldr	r1, [r7, #0]
 801b10c:	68f8      	ldr	r0, [r7, #12]
 801b10e:	f7ff ffa8 	bl	801b062 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801b112:	697b      	ldr	r3, [r7, #20]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d106      	bne.n	801b126 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801b118:	f107 0310 	add.w	r3, r7, #16
 801b11c:	461a      	mov	r2, r3
 801b11e:	68b9      	ldr	r1, [r7, #8]
 801b120:	68f8      	ldr	r0, [r7, #12]
 801b122:	f7ff ff35 	bl	801af90 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801b126:	bf00      	nop
 801b128:	3720      	adds	r7, #32
 801b12a:	46bd      	mov	sp, r7
 801b12c:	bd80      	pop	{r7, pc}
 801b12e:	bf00      	nop
 801b130:	0802bb4c 	.word	0x0802bb4c

0801b134 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801b134:	b480      	push	{r7}
 801b136:	b083      	sub	sp, #12
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801b13c:	4a04      	ldr	r2, [pc, #16]	; (801b150 <netif_set_default+0x1c>)
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801b142:	bf00      	nop
 801b144:	370c      	adds	r7, #12
 801b146:	46bd      	mov	sp, r7
 801b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14c:	4770      	bx	lr
 801b14e:	bf00      	nop
 801b150:	2400cf50 	.word	0x2400cf50

0801b154 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801b154:	b580      	push	{r7, lr}
 801b156:	b082      	sub	sp, #8
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d107      	bne.n	801b172 <netif_set_up+0x1e>
 801b162:	4b0f      	ldr	r3, [pc, #60]	; (801b1a0 <netif_set_up+0x4c>)
 801b164:	f44f 7254 	mov.w	r2, #848	; 0x350
 801b168:	490e      	ldr	r1, [pc, #56]	; (801b1a4 <netif_set_up+0x50>)
 801b16a:	480f      	ldr	r0, [pc, #60]	; (801b1a8 <netif_set_up+0x54>)
 801b16c:	f00c f9a4 	bl	80274b8 <iprintf>
 801b170:	e013      	b.n	801b19a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b178:	f003 0301 	and.w	r3, r3, #1
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d10c      	bne.n	801b19a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b186:	f043 0301 	orr.w	r3, r3, #1
 801b18a:	b2da      	uxtb	r2, r3
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801b192:	2103      	movs	r1, #3
 801b194:	6878      	ldr	r0, [r7, #4]
 801b196:	f000 f809 	bl	801b1ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801b19a:	3708      	adds	r7, #8
 801b19c:	46bd      	mov	sp, r7
 801b19e:	bd80      	pop	{r7, pc}
 801b1a0:	080288d0 	.word	0x080288d0
 801b1a4:	08028a58 	.word	0x08028a58
 801b1a8:	08028920 	.word	0x08028920

0801b1ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b082      	sub	sp, #8
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	6078      	str	r0, [r7, #4]
 801b1b4:	460b      	mov	r3, r1
 801b1b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d106      	bne.n	801b1cc <netif_issue_reports+0x20>
 801b1be:	4b18      	ldr	r3, [pc, #96]	; (801b220 <netif_issue_reports+0x74>)
 801b1c0:	f240 326d 	movw	r2, #877	; 0x36d
 801b1c4:	4917      	ldr	r1, [pc, #92]	; (801b224 <netif_issue_reports+0x78>)
 801b1c6:	4818      	ldr	r0, [pc, #96]	; (801b228 <netif_issue_reports+0x7c>)
 801b1c8:	f00c f976 	bl	80274b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b1d2:	f003 0304 	and.w	r3, r3, #4
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d01e      	beq.n	801b218 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b1e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d017      	beq.n	801b218 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801b1e8:	78fb      	ldrb	r3, [r7, #3]
 801b1ea:	f003 0301 	and.w	r3, r3, #1
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d013      	beq.n	801b21a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	3304      	adds	r3, #4
 801b1f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d00e      	beq.n	801b21a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b202:	f003 0308 	and.w	r3, r3, #8
 801b206:	2b00      	cmp	r3, #0
 801b208:	d007      	beq.n	801b21a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	3304      	adds	r3, #4
 801b20e:	4619      	mov	r1, r3
 801b210:	6878      	ldr	r0, [r7, #4]
 801b212:	f009 fc61 	bl	8024ad8 <etharp_request>
 801b216:	e000      	b.n	801b21a <netif_issue_reports+0x6e>
    return;
 801b218:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801b21a:	3708      	adds	r7, #8
 801b21c:	46bd      	mov	sp, r7
 801b21e:	bd80      	pop	{r7, pc}
 801b220:	080288d0 	.word	0x080288d0
 801b224:	08028a74 	.word	0x08028a74
 801b228:	08028920 	.word	0x08028920

0801b22c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b082      	sub	sp, #8
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d107      	bne.n	801b24a <netif_set_down+0x1e>
 801b23a:	4b12      	ldr	r3, [pc, #72]	; (801b284 <netif_set_down+0x58>)
 801b23c:	f240 329b 	movw	r2, #923	; 0x39b
 801b240:	4911      	ldr	r1, [pc, #68]	; (801b288 <netif_set_down+0x5c>)
 801b242:	4812      	ldr	r0, [pc, #72]	; (801b28c <netif_set_down+0x60>)
 801b244:	f00c f938 	bl	80274b8 <iprintf>
 801b248:	e019      	b.n	801b27e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b250:	f003 0301 	and.w	r3, r3, #1
 801b254:	2b00      	cmp	r3, #0
 801b256:	d012      	beq.n	801b27e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b25e:	f023 0301 	bic.w	r3, r3, #1
 801b262:	b2da      	uxtb	r2, r3
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b270:	f003 0308 	and.w	r3, r3, #8
 801b274:	2b00      	cmp	r3, #0
 801b276:	d002      	beq.n	801b27e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801b278:	6878      	ldr	r0, [r7, #4]
 801b27a:	f008 ffe7 	bl	802424c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801b27e:	3708      	adds	r7, #8
 801b280:	46bd      	mov	sp, r7
 801b282:	bd80      	pop	{r7, pc}
 801b284:	080288d0 	.word	0x080288d0
 801b288:	08028a98 	.word	0x08028a98
 801b28c:	08028920 	.word	0x08028920

0801b290 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b082      	sub	sp, #8
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d107      	bne.n	801b2ae <netif_set_link_up+0x1e>
 801b29e:	4b15      	ldr	r3, [pc, #84]	; (801b2f4 <netif_set_link_up+0x64>)
 801b2a0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801b2a4:	4914      	ldr	r1, [pc, #80]	; (801b2f8 <netif_set_link_up+0x68>)
 801b2a6:	4815      	ldr	r0, [pc, #84]	; (801b2fc <netif_set_link_up+0x6c>)
 801b2a8:	f00c f906 	bl	80274b8 <iprintf>
 801b2ac:	e01e      	b.n	801b2ec <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b2b4:	f003 0304 	and.w	r3, r3, #4
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d117      	bne.n	801b2ec <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b2c2:	f043 0304 	orr.w	r3, r3, #4
 801b2c6:	b2da      	uxtb	r2, r3
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801b2ce:	6878      	ldr	r0, [r7, #4]
 801b2d0:	f007 fa2c 	bl	802272c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801b2d4:	2103      	movs	r1, #3
 801b2d6:	6878      	ldr	r0, [r7, #4]
 801b2d8:	f7ff ff68 	bl	801b1ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	69db      	ldr	r3, [r3, #28]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d003      	beq.n	801b2ec <netif_set_link_up+0x5c>
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	69db      	ldr	r3, [r3, #28]
 801b2e8:	6878      	ldr	r0, [r7, #4]
 801b2ea:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801b2ec:	3708      	adds	r7, #8
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}
 801b2f2:	bf00      	nop
 801b2f4:	080288d0 	.word	0x080288d0
 801b2f8:	08028ab8 	.word	0x08028ab8
 801b2fc:	08028920 	.word	0x08028920

0801b300 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b082      	sub	sp, #8
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d107      	bne.n	801b31e <netif_set_link_down+0x1e>
 801b30e:	4b11      	ldr	r3, [pc, #68]	; (801b354 <netif_set_link_down+0x54>)
 801b310:	f240 4206 	movw	r2, #1030	; 0x406
 801b314:	4910      	ldr	r1, [pc, #64]	; (801b358 <netif_set_link_down+0x58>)
 801b316:	4811      	ldr	r0, [pc, #68]	; (801b35c <netif_set_link_down+0x5c>)
 801b318:	f00c f8ce 	bl	80274b8 <iprintf>
 801b31c:	e017      	b.n	801b34e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b324:	f003 0304 	and.w	r3, r3, #4
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d010      	beq.n	801b34e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b332:	f023 0304 	bic.w	r3, r3, #4
 801b336:	b2da      	uxtb	r2, r3
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	69db      	ldr	r3, [r3, #28]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d003      	beq.n	801b34e <netif_set_link_down+0x4e>
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	69db      	ldr	r3, [r3, #28]
 801b34a:	6878      	ldr	r0, [r7, #4]
 801b34c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801b34e:	3708      	adds	r7, #8
 801b350:	46bd      	mov	sp, r7
 801b352:	bd80      	pop	{r7, pc}
 801b354:	080288d0 	.word	0x080288d0
 801b358:	08028adc 	.word	0x08028adc
 801b35c:	08028920 	.word	0x08028920

0801b360 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801b360:	b480      	push	{r7}
 801b362:	b083      	sub	sp, #12
 801b364:	af00      	add	r7, sp, #0
 801b366:	6078      	str	r0, [r7, #4]
 801b368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d002      	beq.n	801b376 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	683a      	ldr	r2, [r7, #0]
 801b374:	61da      	str	r2, [r3, #28]
  }
}
 801b376:	bf00      	nop
 801b378:	370c      	adds	r7, #12
 801b37a:	46bd      	mov	sp, r7
 801b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b380:	4770      	bx	lr

0801b382 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801b382:	b480      	push	{r7}
 801b384:	b085      	sub	sp, #20
 801b386:	af00      	add	r7, sp, #0
 801b388:	60f8      	str	r0, [r7, #12]
 801b38a:	60b9      	str	r1, [r7, #8]
 801b38c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801b38e:	f06f 030b 	mvn.w	r3, #11
}
 801b392:	4618      	mov	r0, r3
 801b394:	3714      	adds	r7, #20
 801b396:	46bd      	mov	sp, r7
 801b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39c:	4770      	bx	lr
	...

0801b3a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801b3a0:	b480      	push	{r7}
 801b3a2:	b085      	sub	sp, #20
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801b3aa:	79fb      	ldrb	r3, [r7, #7]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d013      	beq.n	801b3d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801b3b0:	4b0d      	ldr	r3, [pc, #52]	; (801b3e8 <netif_get_by_index+0x48>)
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	60fb      	str	r3, [r7, #12]
 801b3b6:	e00c      	b.n	801b3d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b3be:	3301      	adds	r3, #1
 801b3c0:	b2db      	uxtb	r3, r3
 801b3c2:	79fa      	ldrb	r2, [r7, #7]
 801b3c4:	429a      	cmp	r2, r3
 801b3c6:	d101      	bne.n	801b3cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	e006      	b.n	801b3da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	60fb      	str	r3, [r7, #12]
 801b3d2:	68fb      	ldr	r3, [r7, #12]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d1ef      	bne.n	801b3b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801b3d8:	2300      	movs	r3, #0
}
 801b3da:	4618      	mov	r0, r3
 801b3dc:	3714      	adds	r7, #20
 801b3de:	46bd      	mov	sp, r7
 801b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e4:	4770      	bx	lr
 801b3e6:	bf00      	nop
 801b3e8:	2400cf4c 	.word	0x2400cf4c

0801b3ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b082      	sub	sp, #8
 801b3f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801b3f2:	f00b f815 	bl	8026420 <sys_arch_protect>
 801b3f6:	6038      	str	r0, [r7, #0]
 801b3f8:	4b0d      	ldr	r3, [pc, #52]	; (801b430 <pbuf_free_ooseq+0x44>)
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	701a      	strb	r2, [r3, #0]
 801b3fe:	6838      	ldr	r0, [r7, #0]
 801b400:	f00b f81c 	bl	802643c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801b404:	4b0b      	ldr	r3, [pc, #44]	; (801b434 <pbuf_free_ooseq+0x48>)
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	607b      	str	r3, [r7, #4]
 801b40a:	e00a      	b.n	801b422 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b410:	2b00      	cmp	r3, #0
 801b412:	d003      	beq.n	801b41c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801b414:	6878      	ldr	r0, [r7, #4]
 801b416:	f002 f981 	bl	801d71c <tcp_free_ooseq>
      return;
 801b41a:	e005      	b.n	801b428 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	68db      	ldr	r3, [r3, #12]
 801b420:	607b      	str	r3, [r7, #4]
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d1f1      	bne.n	801b40c <pbuf_free_ooseq+0x20>
    }
  }
}
 801b428:	3708      	adds	r7, #8
 801b42a:	46bd      	mov	sp, r7
 801b42c:	bd80      	pop	{r7, pc}
 801b42e:	bf00      	nop
 801b430:	2400cf55 	.word	0x2400cf55
 801b434:	2400cf64 	.word	0x2400cf64

0801b438 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801b440:	f7ff ffd4 	bl	801b3ec <pbuf_free_ooseq>
}
 801b444:	bf00      	nop
 801b446:	3708      	adds	r7, #8
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}

0801b44c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b082      	sub	sp, #8
 801b450:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801b452:	f00a ffe5 	bl	8026420 <sys_arch_protect>
 801b456:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801b458:	4b0f      	ldr	r3, [pc, #60]	; (801b498 <pbuf_pool_is_empty+0x4c>)
 801b45a:	781b      	ldrb	r3, [r3, #0]
 801b45c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801b45e:	4b0e      	ldr	r3, [pc, #56]	; (801b498 <pbuf_pool_is_empty+0x4c>)
 801b460:	2201      	movs	r2, #1
 801b462:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801b464:	6878      	ldr	r0, [r7, #4]
 801b466:	f00a ffe9 	bl	802643c <sys_arch_unprotect>

  if (!queued) {
 801b46a:	78fb      	ldrb	r3, [r7, #3]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d10f      	bne.n	801b490 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801b470:	2100      	movs	r1, #0
 801b472:	480a      	ldr	r0, [pc, #40]	; (801b49c <pbuf_pool_is_empty+0x50>)
 801b474:	f7fe fde2 	bl	801a03c <tcpip_try_callback>
 801b478:	4603      	mov	r3, r0
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d008      	beq.n	801b490 <pbuf_pool_is_empty+0x44>
 801b47e:	f00a ffcf 	bl	8026420 <sys_arch_protect>
 801b482:	6078      	str	r0, [r7, #4]
 801b484:	4b04      	ldr	r3, [pc, #16]	; (801b498 <pbuf_pool_is_empty+0x4c>)
 801b486:	2200      	movs	r2, #0
 801b488:	701a      	strb	r2, [r3, #0]
 801b48a:	6878      	ldr	r0, [r7, #4]
 801b48c:	f00a ffd6 	bl	802643c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801b490:	bf00      	nop
 801b492:	3708      	adds	r7, #8
 801b494:	46bd      	mov	sp, r7
 801b496:	bd80      	pop	{r7, pc}
 801b498:	2400cf55 	.word	0x2400cf55
 801b49c:	0801b439 	.word	0x0801b439

0801b4a0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801b4a0:	b480      	push	{r7}
 801b4a2:	b085      	sub	sp, #20
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	60f8      	str	r0, [r7, #12]
 801b4a8:	60b9      	str	r1, [r7, #8]
 801b4aa:	4611      	mov	r1, r2
 801b4ac:	461a      	mov	r2, r3
 801b4ae:	460b      	mov	r3, r1
 801b4b0:	80fb      	strh	r3, [r7, #6]
 801b4b2:	4613      	mov	r3, r2
 801b4b4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	68ba      	ldr	r2, [r7, #8]
 801b4c0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	88fa      	ldrh	r2, [r7, #6]
 801b4c6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	88ba      	ldrh	r2, [r7, #4]
 801b4cc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801b4ce:	8b3b      	ldrh	r3, [r7, #24]
 801b4d0:	b2da      	uxtb	r2, r3
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	7f3a      	ldrb	r2, [r7, #28]
 801b4da:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	2201      	movs	r2, #1
 801b4e0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	73da      	strb	r2, [r3, #15]
}
 801b4e8:	bf00      	nop
 801b4ea:	3714      	adds	r7, #20
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f2:	4770      	bx	lr

0801b4f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b08c      	sub	sp, #48	; 0x30
 801b4f8:	af02      	add	r7, sp, #8
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	71fb      	strb	r3, [r7, #7]
 801b4fe:	460b      	mov	r3, r1
 801b500:	80bb      	strh	r3, [r7, #4]
 801b502:	4613      	mov	r3, r2
 801b504:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801b506:	79fb      	ldrb	r3, [r7, #7]
 801b508:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801b50a:	887b      	ldrh	r3, [r7, #2]
 801b50c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801b510:	d07f      	beq.n	801b612 <pbuf_alloc+0x11e>
 801b512:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801b516:	f300 80c8 	bgt.w	801b6aa <pbuf_alloc+0x1b6>
 801b51a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801b51e:	d010      	beq.n	801b542 <pbuf_alloc+0x4e>
 801b520:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801b524:	f300 80c1 	bgt.w	801b6aa <pbuf_alloc+0x1b6>
 801b528:	2b01      	cmp	r3, #1
 801b52a:	d002      	beq.n	801b532 <pbuf_alloc+0x3e>
 801b52c:	2b41      	cmp	r3, #65	; 0x41
 801b52e:	f040 80bc 	bne.w	801b6aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801b532:	887a      	ldrh	r2, [r7, #2]
 801b534:	88bb      	ldrh	r3, [r7, #4]
 801b536:	4619      	mov	r1, r3
 801b538:	2000      	movs	r0, #0
 801b53a:	f000 f8d1 	bl	801b6e0 <pbuf_alloc_reference>
 801b53e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801b540:	e0bd      	b.n	801b6be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801b542:	2300      	movs	r3, #0
 801b544:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801b546:	2300      	movs	r3, #0
 801b548:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801b54a:	88bb      	ldrh	r3, [r7, #4]
 801b54c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801b54e:	200c      	movs	r0, #12
 801b550:	f7ff fb8e 	bl	801ac70 <memp_malloc>
 801b554:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801b556:	693b      	ldr	r3, [r7, #16]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d109      	bne.n	801b570 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801b55c:	f7ff ff76 	bl	801b44c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b562:	2b00      	cmp	r3, #0
 801b564:	d002      	beq.n	801b56c <pbuf_alloc+0x78>
            pbuf_free(p);
 801b566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b568:	f000 faa8 	bl	801babc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801b56c:	2300      	movs	r3, #0
 801b56e:	e0a7      	b.n	801b6c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801b570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b572:	3303      	adds	r3, #3
 801b574:	b29b      	uxth	r3, r3
 801b576:	f023 0303 	bic.w	r3, r3, #3
 801b57a:	b29b      	uxth	r3, r3
 801b57c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801b580:	b29b      	uxth	r3, r3
 801b582:	8b7a      	ldrh	r2, [r7, #26]
 801b584:	4293      	cmp	r3, r2
 801b586:	bf28      	it	cs
 801b588:	4613      	movcs	r3, r2
 801b58a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801b58c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b58e:	3310      	adds	r3, #16
 801b590:	693a      	ldr	r2, [r7, #16]
 801b592:	4413      	add	r3, r2
 801b594:	3303      	adds	r3, #3
 801b596:	f023 0303 	bic.w	r3, r3, #3
 801b59a:	4618      	mov	r0, r3
 801b59c:	89f9      	ldrh	r1, [r7, #14]
 801b59e:	8b7a      	ldrh	r2, [r7, #26]
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	9301      	str	r3, [sp, #4]
 801b5a4:	887b      	ldrh	r3, [r7, #2]
 801b5a6:	9300      	str	r3, [sp, #0]
 801b5a8:	460b      	mov	r3, r1
 801b5aa:	4601      	mov	r1, r0
 801b5ac:	6938      	ldr	r0, [r7, #16]
 801b5ae:	f7ff ff77 	bl	801b4a0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801b5b2:	693b      	ldr	r3, [r7, #16]
 801b5b4:	685b      	ldr	r3, [r3, #4]
 801b5b6:	f003 0303 	and.w	r3, r3, #3
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d006      	beq.n	801b5cc <pbuf_alloc+0xd8>
 801b5be:	4b42      	ldr	r3, [pc, #264]	; (801b6c8 <pbuf_alloc+0x1d4>)
 801b5c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b5c4:	4941      	ldr	r1, [pc, #260]	; (801b6cc <pbuf_alloc+0x1d8>)
 801b5c6:	4842      	ldr	r0, [pc, #264]	; (801b6d0 <pbuf_alloc+0x1dc>)
 801b5c8:	f00b ff76 	bl	80274b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801b5cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b5ce:	3303      	adds	r3, #3
 801b5d0:	f023 0303 	bic.w	r3, r3, #3
 801b5d4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801b5d8:	d106      	bne.n	801b5e8 <pbuf_alloc+0xf4>
 801b5da:	4b3b      	ldr	r3, [pc, #236]	; (801b6c8 <pbuf_alloc+0x1d4>)
 801b5dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 801b5e0:	493c      	ldr	r1, [pc, #240]	; (801b6d4 <pbuf_alloc+0x1e0>)
 801b5e2:	483b      	ldr	r0, [pc, #236]	; (801b6d0 <pbuf_alloc+0x1dc>)
 801b5e4:	f00b ff68 	bl	80274b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d102      	bne.n	801b5f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801b5ee:	693b      	ldr	r3, [r7, #16]
 801b5f0:	627b      	str	r3, [r7, #36]	; 0x24
 801b5f2:	e002      	b.n	801b5fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801b5f4:	69fb      	ldr	r3, [r7, #28]
 801b5f6:	693a      	ldr	r2, [r7, #16]
 801b5f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801b5fa:	693b      	ldr	r3, [r7, #16]
 801b5fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801b5fe:	8b7a      	ldrh	r2, [r7, #26]
 801b600:	89fb      	ldrh	r3, [r7, #14]
 801b602:	1ad3      	subs	r3, r2, r3
 801b604:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801b606:	2300      	movs	r3, #0
 801b608:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801b60a:	8b7b      	ldrh	r3, [r7, #26]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d19e      	bne.n	801b54e <pbuf_alloc+0x5a>
      break;
 801b610:	e055      	b.n	801b6be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801b612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b614:	3303      	adds	r3, #3
 801b616:	b29b      	uxth	r3, r3
 801b618:	f023 0303 	bic.w	r3, r3, #3
 801b61c:	b29a      	uxth	r2, r3
 801b61e:	88bb      	ldrh	r3, [r7, #4]
 801b620:	3303      	adds	r3, #3
 801b622:	b29b      	uxth	r3, r3
 801b624:	f023 0303 	bic.w	r3, r3, #3
 801b628:	b29b      	uxth	r3, r3
 801b62a:	4413      	add	r3, r2
 801b62c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801b62e:	8b3b      	ldrh	r3, [r7, #24]
 801b630:	3310      	adds	r3, #16
 801b632:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801b634:	8b3a      	ldrh	r2, [r7, #24]
 801b636:	88bb      	ldrh	r3, [r7, #4]
 801b638:	3303      	adds	r3, #3
 801b63a:	f023 0303 	bic.w	r3, r3, #3
 801b63e:	429a      	cmp	r2, r3
 801b640:	d306      	bcc.n	801b650 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801b642:	8afa      	ldrh	r2, [r7, #22]
 801b644:	88bb      	ldrh	r3, [r7, #4]
 801b646:	3303      	adds	r3, #3
 801b648:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801b64c:	429a      	cmp	r2, r3
 801b64e:	d201      	bcs.n	801b654 <pbuf_alloc+0x160>
        return NULL;
 801b650:	2300      	movs	r3, #0
 801b652:	e035      	b.n	801b6c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801b654:	8afb      	ldrh	r3, [r7, #22]
 801b656:	4618      	mov	r0, r3
 801b658:	f7ff f966 	bl	801a928 <mem_malloc>
 801b65c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b660:	2b00      	cmp	r3, #0
 801b662:	d101      	bne.n	801b668 <pbuf_alloc+0x174>
        return NULL;
 801b664:	2300      	movs	r3, #0
 801b666:	e02b      	b.n	801b6c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801b668:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b66a:	3310      	adds	r3, #16
 801b66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b66e:	4413      	add	r3, r2
 801b670:	3303      	adds	r3, #3
 801b672:	f023 0303 	bic.w	r3, r3, #3
 801b676:	4618      	mov	r0, r3
 801b678:	88b9      	ldrh	r1, [r7, #4]
 801b67a:	88ba      	ldrh	r2, [r7, #4]
 801b67c:	2300      	movs	r3, #0
 801b67e:	9301      	str	r3, [sp, #4]
 801b680:	887b      	ldrh	r3, [r7, #2]
 801b682:	9300      	str	r3, [sp, #0]
 801b684:	460b      	mov	r3, r1
 801b686:	4601      	mov	r1, r0
 801b688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b68a:	f7ff ff09 	bl	801b4a0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b690:	685b      	ldr	r3, [r3, #4]
 801b692:	f003 0303 	and.w	r3, r3, #3
 801b696:	2b00      	cmp	r3, #0
 801b698:	d010      	beq.n	801b6bc <pbuf_alloc+0x1c8>
 801b69a:	4b0b      	ldr	r3, [pc, #44]	; (801b6c8 <pbuf_alloc+0x1d4>)
 801b69c:	f44f 7291 	mov.w	r2, #290	; 0x122
 801b6a0:	490d      	ldr	r1, [pc, #52]	; (801b6d8 <pbuf_alloc+0x1e4>)
 801b6a2:	480b      	ldr	r0, [pc, #44]	; (801b6d0 <pbuf_alloc+0x1dc>)
 801b6a4:	f00b ff08 	bl	80274b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801b6a8:	e008      	b.n	801b6bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801b6aa:	4b07      	ldr	r3, [pc, #28]	; (801b6c8 <pbuf_alloc+0x1d4>)
 801b6ac:	f240 1227 	movw	r2, #295	; 0x127
 801b6b0:	490a      	ldr	r1, [pc, #40]	; (801b6dc <pbuf_alloc+0x1e8>)
 801b6b2:	4807      	ldr	r0, [pc, #28]	; (801b6d0 <pbuf_alloc+0x1dc>)
 801b6b4:	f00b ff00 	bl	80274b8 <iprintf>
      return NULL;
 801b6b8:	2300      	movs	r3, #0
 801b6ba:	e001      	b.n	801b6c0 <pbuf_alloc+0x1cc>
      break;
 801b6bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	3728      	adds	r7, #40	; 0x28
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bd80      	pop	{r7, pc}
 801b6c8:	08028b00 	.word	0x08028b00
 801b6cc:	08028b30 	.word	0x08028b30
 801b6d0:	08028b60 	.word	0x08028b60
 801b6d4:	08028b88 	.word	0x08028b88
 801b6d8:	08028bbc 	.word	0x08028bbc
 801b6dc:	08028be8 	.word	0x08028be8

0801b6e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b086      	sub	sp, #24
 801b6e4:	af02      	add	r7, sp, #8
 801b6e6:	6078      	str	r0, [r7, #4]
 801b6e8:	460b      	mov	r3, r1
 801b6ea:	807b      	strh	r3, [r7, #2]
 801b6ec:	4613      	mov	r3, r2
 801b6ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801b6f0:	883b      	ldrh	r3, [r7, #0]
 801b6f2:	2b41      	cmp	r3, #65	; 0x41
 801b6f4:	d009      	beq.n	801b70a <pbuf_alloc_reference+0x2a>
 801b6f6:	883b      	ldrh	r3, [r7, #0]
 801b6f8:	2b01      	cmp	r3, #1
 801b6fa:	d006      	beq.n	801b70a <pbuf_alloc_reference+0x2a>
 801b6fc:	4b0f      	ldr	r3, [pc, #60]	; (801b73c <pbuf_alloc_reference+0x5c>)
 801b6fe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801b702:	490f      	ldr	r1, [pc, #60]	; (801b740 <pbuf_alloc_reference+0x60>)
 801b704:	480f      	ldr	r0, [pc, #60]	; (801b744 <pbuf_alloc_reference+0x64>)
 801b706:	f00b fed7 	bl	80274b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801b70a:	200b      	movs	r0, #11
 801b70c:	f7ff fab0 	bl	801ac70 <memp_malloc>
 801b710:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d101      	bne.n	801b71c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801b718:	2300      	movs	r3, #0
 801b71a:	e00b      	b.n	801b734 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801b71c:	8879      	ldrh	r1, [r7, #2]
 801b71e:	887a      	ldrh	r2, [r7, #2]
 801b720:	2300      	movs	r3, #0
 801b722:	9301      	str	r3, [sp, #4]
 801b724:	883b      	ldrh	r3, [r7, #0]
 801b726:	9300      	str	r3, [sp, #0]
 801b728:	460b      	mov	r3, r1
 801b72a:	6879      	ldr	r1, [r7, #4]
 801b72c:	68f8      	ldr	r0, [r7, #12]
 801b72e:	f7ff feb7 	bl	801b4a0 <pbuf_init_alloced_pbuf>
  return p;
 801b732:	68fb      	ldr	r3, [r7, #12]
}
 801b734:	4618      	mov	r0, r3
 801b736:	3710      	adds	r7, #16
 801b738:	46bd      	mov	sp, r7
 801b73a:	bd80      	pop	{r7, pc}
 801b73c:	08028b00 	.word	0x08028b00
 801b740:	08028c04 	.word	0x08028c04
 801b744:	08028b60 	.word	0x08028b60

0801b748 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b088      	sub	sp, #32
 801b74c:	af02      	add	r7, sp, #8
 801b74e:	607b      	str	r3, [r7, #4]
 801b750:	4603      	mov	r3, r0
 801b752:	73fb      	strb	r3, [r7, #15]
 801b754:	460b      	mov	r3, r1
 801b756:	81bb      	strh	r3, [r7, #12]
 801b758:	4613      	mov	r3, r2
 801b75a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801b75c:	7bfb      	ldrb	r3, [r7, #15]
 801b75e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801b760:	8a7b      	ldrh	r3, [r7, #18]
 801b762:	3303      	adds	r3, #3
 801b764:	f023 0203 	bic.w	r2, r3, #3
 801b768:	89bb      	ldrh	r3, [r7, #12]
 801b76a:	441a      	add	r2, r3
 801b76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b76e:	429a      	cmp	r2, r3
 801b770:	d901      	bls.n	801b776 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801b772:	2300      	movs	r3, #0
 801b774:	e018      	b.n	801b7a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801b776:	6a3b      	ldr	r3, [r7, #32]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d007      	beq.n	801b78c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801b77c:	8a7b      	ldrh	r3, [r7, #18]
 801b77e:	3303      	adds	r3, #3
 801b780:	f023 0303 	bic.w	r3, r3, #3
 801b784:	6a3a      	ldr	r2, [r7, #32]
 801b786:	4413      	add	r3, r2
 801b788:	617b      	str	r3, [r7, #20]
 801b78a:	e001      	b.n	801b790 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801b78c:	2300      	movs	r3, #0
 801b78e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	89b9      	ldrh	r1, [r7, #12]
 801b794:	89ba      	ldrh	r2, [r7, #12]
 801b796:	2302      	movs	r3, #2
 801b798:	9301      	str	r3, [sp, #4]
 801b79a:	897b      	ldrh	r3, [r7, #10]
 801b79c:	9300      	str	r3, [sp, #0]
 801b79e:	460b      	mov	r3, r1
 801b7a0:	6979      	ldr	r1, [r7, #20]
 801b7a2:	f7ff fe7d 	bl	801b4a0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801b7a6:	687b      	ldr	r3, [r7, #4]
}
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	3718      	adds	r7, #24
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	bd80      	pop	{r7, pc}

0801b7b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b084      	sub	sp, #16
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
 801b7b8:	460b      	mov	r3, r1
 801b7ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d106      	bne.n	801b7d0 <pbuf_realloc+0x20>
 801b7c2:	4b3a      	ldr	r3, [pc, #232]	; (801b8ac <pbuf_realloc+0xfc>)
 801b7c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801b7c8:	4939      	ldr	r1, [pc, #228]	; (801b8b0 <pbuf_realloc+0x100>)
 801b7ca:	483a      	ldr	r0, [pc, #232]	; (801b8b4 <pbuf_realloc+0x104>)
 801b7cc:	f00b fe74 	bl	80274b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	891b      	ldrh	r3, [r3, #8]
 801b7d4:	887a      	ldrh	r2, [r7, #2]
 801b7d6:	429a      	cmp	r2, r3
 801b7d8:	d263      	bcs.n	801b8a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	891a      	ldrh	r2, [r3, #8]
 801b7de:	887b      	ldrh	r3, [r7, #2]
 801b7e0:	1ad3      	subs	r3, r2, r3
 801b7e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801b7e4:	887b      	ldrh	r3, [r7, #2]
 801b7e6:	817b      	strh	r3, [r7, #10]
  q = p;
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801b7ec:	e018      	b.n	801b820 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801b7ee:	68fb      	ldr	r3, [r7, #12]
 801b7f0:	895b      	ldrh	r3, [r3, #10]
 801b7f2:	897a      	ldrh	r2, [r7, #10]
 801b7f4:	1ad3      	subs	r3, r2, r3
 801b7f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	891a      	ldrh	r2, [r3, #8]
 801b7fc:	893b      	ldrh	r3, [r7, #8]
 801b7fe:	1ad3      	subs	r3, r2, r3
 801b800:	b29a      	uxth	r2, r3
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801b80c:	68fb      	ldr	r3, [r7, #12]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d106      	bne.n	801b820 <pbuf_realloc+0x70>
 801b812:	4b26      	ldr	r3, [pc, #152]	; (801b8ac <pbuf_realloc+0xfc>)
 801b814:	f240 12af 	movw	r2, #431	; 0x1af
 801b818:	4927      	ldr	r1, [pc, #156]	; (801b8b8 <pbuf_realloc+0x108>)
 801b81a:	4826      	ldr	r0, [pc, #152]	; (801b8b4 <pbuf_realloc+0x104>)
 801b81c:	f00b fe4c 	bl	80274b8 <iprintf>
  while (rem_len > q->len) {
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	895b      	ldrh	r3, [r3, #10]
 801b824:	897a      	ldrh	r2, [r7, #10]
 801b826:	429a      	cmp	r2, r3
 801b828:	d8e1      	bhi.n	801b7ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	7b1b      	ldrb	r3, [r3, #12]
 801b82e:	f003 030f 	and.w	r3, r3, #15
 801b832:	2b00      	cmp	r3, #0
 801b834:	d121      	bne.n	801b87a <pbuf_realloc+0xca>
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	895b      	ldrh	r3, [r3, #10]
 801b83a:	897a      	ldrh	r2, [r7, #10]
 801b83c:	429a      	cmp	r2, r3
 801b83e:	d01c      	beq.n	801b87a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	7b5b      	ldrb	r3, [r3, #13]
 801b844:	f003 0302 	and.w	r3, r3, #2
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d116      	bne.n	801b87a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	685a      	ldr	r2, [r3, #4]
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	1ad3      	subs	r3, r2, r3
 801b854:	b29a      	uxth	r2, r3
 801b856:	897b      	ldrh	r3, [r7, #10]
 801b858:	4413      	add	r3, r2
 801b85a:	b29b      	uxth	r3, r3
 801b85c:	4619      	mov	r1, r3
 801b85e:	68f8      	ldr	r0, [r7, #12]
 801b860:	f7fe ff58 	bl	801a714 <mem_trim>
 801b864:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d106      	bne.n	801b87a <pbuf_realloc+0xca>
 801b86c:	4b0f      	ldr	r3, [pc, #60]	; (801b8ac <pbuf_realloc+0xfc>)
 801b86e:	f240 12bd 	movw	r2, #445	; 0x1bd
 801b872:	4912      	ldr	r1, [pc, #72]	; (801b8bc <pbuf_realloc+0x10c>)
 801b874:	480f      	ldr	r0, [pc, #60]	; (801b8b4 <pbuf_realloc+0x104>)
 801b876:	f00b fe1f 	bl	80274b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	897a      	ldrh	r2, [r7, #10]
 801b87e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	895a      	ldrh	r2, [r3, #10]
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d004      	beq.n	801b89a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	4618      	mov	r0, r3
 801b896:	f000 f911 	bl	801babc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	2200      	movs	r2, #0
 801b89e:	601a      	str	r2, [r3, #0]
 801b8a0:	e000      	b.n	801b8a4 <pbuf_realloc+0xf4>
    return;
 801b8a2:	bf00      	nop

}
 801b8a4:	3710      	adds	r7, #16
 801b8a6:	46bd      	mov	sp, r7
 801b8a8:	bd80      	pop	{r7, pc}
 801b8aa:	bf00      	nop
 801b8ac:	08028b00 	.word	0x08028b00
 801b8b0:	08028c18 	.word	0x08028c18
 801b8b4:	08028b60 	.word	0x08028b60
 801b8b8:	08028c30 	.word	0x08028c30
 801b8bc:	08028c48 	.word	0x08028c48

0801b8c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b086      	sub	sp, #24
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	60f8      	str	r0, [r7, #12]
 801b8c8:	60b9      	str	r1, [r7, #8]
 801b8ca:	4613      	mov	r3, r2
 801b8cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d106      	bne.n	801b8e2 <pbuf_add_header_impl+0x22>
 801b8d4:	4b2b      	ldr	r3, [pc, #172]	; (801b984 <pbuf_add_header_impl+0xc4>)
 801b8d6:	f240 12df 	movw	r2, #479	; 0x1df
 801b8da:	492b      	ldr	r1, [pc, #172]	; (801b988 <pbuf_add_header_impl+0xc8>)
 801b8dc:	482b      	ldr	r0, [pc, #172]	; (801b98c <pbuf_add_header_impl+0xcc>)
 801b8de:	f00b fdeb 	bl	80274b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d003      	beq.n	801b8f0 <pbuf_add_header_impl+0x30>
 801b8e8:	68bb      	ldr	r3, [r7, #8]
 801b8ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b8ee:	d301      	bcc.n	801b8f4 <pbuf_add_header_impl+0x34>
    return 1;
 801b8f0:	2301      	movs	r3, #1
 801b8f2:	e043      	b.n	801b97c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801b8f4:	68bb      	ldr	r3, [r7, #8]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d101      	bne.n	801b8fe <pbuf_add_header_impl+0x3e>
    return 0;
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	e03e      	b.n	801b97c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801b8fe:	68bb      	ldr	r3, [r7, #8]
 801b900:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	891a      	ldrh	r2, [r3, #8]
 801b906:	8a7b      	ldrh	r3, [r7, #18]
 801b908:	4413      	add	r3, r2
 801b90a:	b29b      	uxth	r3, r3
 801b90c:	8a7a      	ldrh	r2, [r7, #18]
 801b90e:	429a      	cmp	r2, r3
 801b910:	d901      	bls.n	801b916 <pbuf_add_header_impl+0x56>
    return 1;
 801b912:	2301      	movs	r3, #1
 801b914:	e032      	b.n	801b97c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	7b1b      	ldrb	r3, [r3, #12]
 801b91a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b91c:	8a3b      	ldrh	r3, [r7, #16]
 801b91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b922:	2b00      	cmp	r3, #0
 801b924:	d00c      	beq.n	801b940 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	685a      	ldr	r2, [r3, #4]
 801b92a:	68bb      	ldr	r3, [r7, #8]
 801b92c:	425b      	negs	r3, r3
 801b92e:	4413      	add	r3, r2
 801b930:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	3310      	adds	r3, #16
 801b936:	697a      	ldr	r2, [r7, #20]
 801b938:	429a      	cmp	r2, r3
 801b93a:	d20d      	bcs.n	801b958 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801b93c:	2301      	movs	r3, #1
 801b93e:	e01d      	b.n	801b97c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801b940:	79fb      	ldrb	r3, [r7, #7]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d006      	beq.n	801b954 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	685a      	ldr	r2, [r3, #4]
 801b94a:	68bb      	ldr	r3, [r7, #8]
 801b94c:	425b      	negs	r3, r3
 801b94e:	4413      	add	r3, r2
 801b950:	617b      	str	r3, [r7, #20]
 801b952:	e001      	b.n	801b958 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801b954:	2301      	movs	r3, #1
 801b956:	e011      	b.n	801b97c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	697a      	ldr	r2, [r7, #20]
 801b95c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	895a      	ldrh	r2, [r3, #10]
 801b962:	8a7b      	ldrh	r3, [r7, #18]
 801b964:	4413      	add	r3, r2
 801b966:	b29a      	uxth	r2, r3
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	891a      	ldrh	r2, [r3, #8]
 801b970:	8a7b      	ldrh	r3, [r7, #18]
 801b972:	4413      	add	r3, r2
 801b974:	b29a      	uxth	r2, r3
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	811a      	strh	r2, [r3, #8]


  return 0;
 801b97a:	2300      	movs	r3, #0
}
 801b97c:	4618      	mov	r0, r3
 801b97e:	3718      	adds	r7, #24
 801b980:	46bd      	mov	sp, r7
 801b982:	bd80      	pop	{r7, pc}
 801b984:	08028b00 	.word	0x08028b00
 801b988:	08028c64 	.word	0x08028c64
 801b98c:	08028b60 	.word	0x08028b60

0801b990 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801b990:	b580      	push	{r7, lr}
 801b992:	b082      	sub	sp, #8
 801b994:	af00      	add	r7, sp, #0
 801b996:	6078      	str	r0, [r7, #4]
 801b998:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801b99a:	2200      	movs	r2, #0
 801b99c:	6839      	ldr	r1, [r7, #0]
 801b99e:	6878      	ldr	r0, [r7, #4]
 801b9a0:	f7ff ff8e 	bl	801b8c0 <pbuf_add_header_impl>
 801b9a4:	4603      	mov	r3, r0
}
 801b9a6:	4618      	mov	r0, r3
 801b9a8:	3708      	adds	r7, #8
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd80      	pop	{r7, pc}
	...

0801b9b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b084      	sub	sp, #16
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
 801b9b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d106      	bne.n	801b9ce <pbuf_remove_header+0x1e>
 801b9c0:	4b20      	ldr	r3, [pc, #128]	; (801ba44 <pbuf_remove_header+0x94>)
 801b9c2:	f240 224b 	movw	r2, #587	; 0x24b
 801b9c6:	4920      	ldr	r1, [pc, #128]	; (801ba48 <pbuf_remove_header+0x98>)
 801b9c8:	4820      	ldr	r0, [pc, #128]	; (801ba4c <pbuf_remove_header+0x9c>)
 801b9ca:	f00b fd75 	bl	80274b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d003      	beq.n	801b9dc <pbuf_remove_header+0x2c>
 801b9d4:	683b      	ldr	r3, [r7, #0]
 801b9d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b9da:	d301      	bcc.n	801b9e0 <pbuf_remove_header+0x30>
    return 1;
 801b9dc:	2301      	movs	r3, #1
 801b9de:	e02c      	b.n	801ba3a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801b9e0:	683b      	ldr	r3, [r7, #0]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d101      	bne.n	801b9ea <pbuf_remove_header+0x3a>
    return 0;
 801b9e6:	2300      	movs	r3, #0
 801b9e8:	e027      	b.n	801ba3a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	895b      	ldrh	r3, [r3, #10]
 801b9f2:	89fa      	ldrh	r2, [r7, #14]
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d908      	bls.n	801ba0a <pbuf_remove_header+0x5a>
 801b9f8:	4b12      	ldr	r3, [pc, #72]	; (801ba44 <pbuf_remove_header+0x94>)
 801b9fa:	f240 2255 	movw	r2, #597	; 0x255
 801b9fe:	4914      	ldr	r1, [pc, #80]	; (801ba50 <pbuf_remove_header+0xa0>)
 801ba00:	4812      	ldr	r0, [pc, #72]	; (801ba4c <pbuf_remove_header+0x9c>)
 801ba02:	f00b fd59 	bl	80274b8 <iprintf>
 801ba06:	2301      	movs	r3, #1
 801ba08:	e017      	b.n	801ba3a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	685b      	ldr	r3, [r3, #4]
 801ba0e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	685a      	ldr	r2, [r3, #4]
 801ba14:	683b      	ldr	r3, [r7, #0]
 801ba16:	441a      	add	r2, r3
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	895a      	ldrh	r2, [r3, #10]
 801ba20:	89fb      	ldrh	r3, [r7, #14]
 801ba22:	1ad3      	subs	r3, r2, r3
 801ba24:	b29a      	uxth	r2, r3
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	891a      	ldrh	r2, [r3, #8]
 801ba2e:	89fb      	ldrh	r3, [r7, #14]
 801ba30:	1ad3      	subs	r3, r2, r3
 801ba32:	b29a      	uxth	r2, r3
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801ba38:	2300      	movs	r3, #0
}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	3710      	adds	r7, #16
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	bd80      	pop	{r7, pc}
 801ba42:	bf00      	nop
 801ba44:	08028b00 	.word	0x08028b00
 801ba48:	08028c64 	.word	0x08028c64
 801ba4c:	08028b60 	.word	0x08028b60
 801ba50:	08028c70 	.word	0x08028c70

0801ba54 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b082      	sub	sp, #8
 801ba58:	af00      	add	r7, sp, #0
 801ba5a:	6078      	str	r0, [r7, #4]
 801ba5c:	460b      	mov	r3, r1
 801ba5e:	807b      	strh	r3, [r7, #2]
 801ba60:	4613      	mov	r3, r2
 801ba62:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801ba64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	da08      	bge.n	801ba7e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801ba6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ba70:	425b      	negs	r3, r3
 801ba72:	4619      	mov	r1, r3
 801ba74:	6878      	ldr	r0, [r7, #4]
 801ba76:	f7ff ff9b 	bl	801b9b0 <pbuf_remove_header>
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	e007      	b.n	801ba8e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801ba7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ba82:	787a      	ldrb	r2, [r7, #1]
 801ba84:	4619      	mov	r1, r3
 801ba86:	6878      	ldr	r0, [r7, #4]
 801ba88:	f7ff ff1a 	bl	801b8c0 <pbuf_add_header_impl>
 801ba8c:	4603      	mov	r3, r0
  }
}
 801ba8e:	4618      	mov	r0, r3
 801ba90:	3708      	adds	r7, #8
 801ba92:	46bd      	mov	sp, r7
 801ba94:	bd80      	pop	{r7, pc}

0801ba96 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801ba96:	b580      	push	{r7, lr}
 801ba98:	b082      	sub	sp, #8
 801ba9a:	af00      	add	r7, sp, #0
 801ba9c:	6078      	str	r0, [r7, #4]
 801ba9e:	460b      	mov	r3, r1
 801baa0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801baa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801baa6:	2201      	movs	r2, #1
 801baa8:	4619      	mov	r1, r3
 801baaa:	6878      	ldr	r0, [r7, #4]
 801baac:	f7ff ffd2 	bl	801ba54 <pbuf_header_impl>
 801bab0:	4603      	mov	r3, r0
}
 801bab2:	4618      	mov	r0, r3
 801bab4:	3708      	adds	r7, #8
 801bab6:	46bd      	mov	sp, r7
 801bab8:	bd80      	pop	{r7, pc}
	...

0801babc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801babc:	b580      	push	{r7, lr}
 801babe:	b088      	sub	sp, #32
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d10b      	bne.n	801bae2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d106      	bne.n	801bade <pbuf_free+0x22>
 801bad0:	4b3b      	ldr	r3, [pc, #236]	; (801bbc0 <pbuf_free+0x104>)
 801bad2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801bad6:	493b      	ldr	r1, [pc, #236]	; (801bbc4 <pbuf_free+0x108>)
 801bad8:	483b      	ldr	r0, [pc, #236]	; (801bbc8 <pbuf_free+0x10c>)
 801bada:	f00b fced 	bl	80274b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801bade:	2300      	movs	r3, #0
 801bae0:	e069      	b.n	801bbb6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801bae2:	2300      	movs	r3, #0
 801bae4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801bae6:	e062      	b.n	801bbae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801bae8:	f00a fc9a 	bl	8026420 <sys_arch_protect>
 801baec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	7b9b      	ldrb	r3, [r3, #14]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d106      	bne.n	801bb04 <pbuf_free+0x48>
 801baf6:	4b32      	ldr	r3, [pc, #200]	; (801bbc0 <pbuf_free+0x104>)
 801baf8:	f240 22f1 	movw	r2, #753	; 0x2f1
 801bafc:	4933      	ldr	r1, [pc, #204]	; (801bbcc <pbuf_free+0x110>)
 801bafe:	4832      	ldr	r0, [pc, #200]	; (801bbc8 <pbuf_free+0x10c>)
 801bb00:	f00b fcda 	bl	80274b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	7b9b      	ldrb	r3, [r3, #14]
 801bb08:	3b01      	subs	r3, #1
 801bb0a:	b2da      	uxtb	r2, r3
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	739a      	strb	r2, [r3, #14]
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	7b9b      	ldrb	r3, [r3, #14]
 801bb14:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801bb16:	69b8      	ldr	r0, [r7, #24]
 801bb18:	f00a fc90 	bl	802643c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801bb1c:	7dfb      	ldrb	r3, [r7, #23]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d143      	bne.n	801bbaa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	7b1b      	ldrb	r3, [r3, #12]
 801bb2c:	f003 030f 	and.w	r3, r3, #15
 801bb30:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	7b5b      	ldrb	r3, [r3, #13]
 801bb36:	f003 0302 	and.w	r3, r3, #2
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d011      	beq.n	801bb62 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801bb42:	68bb      	ldr	r3, [r7, #8]
 801bb44:	691b      	ldr	r3, [r3, #16]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d106      	bne.n	801bb58 <pbuf_free+0x9c>
 801bb4a:	4b1d      	ldr	r3, [pc, #116]	; (801bbc0 <pbuf_free+0x104>)
 801bb4c:	f240 22ff 	movw	r2, #767	; 0x2ff
 801bb50:	491f      	ldr	r1, [pc, #124]	; (801bbd0 <pbuf_free+0x114>)
 801bb52:	481d      	ldr	r0, [pc, #116]	; (801bbc8 <pbuf_free+0x10c>)
 801bb54:	f00b fcb0 	bl	80274b8 <iprintf>
        pc->custom_free_function(p);
 801bb58:	68bb      	ldr	r3, [r7, #8]
 801bb5a:	691b      	ldr	r3, [r3, #16]
 801bb5c:	6878      	ldr	r0, [r7, #4]
 801bb5e:	4798      	blx	r3
 801bb60:	e01d      	b.n	801bb9e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801bb62:	7bfb      	ldrb	r3, [r7, #15]
 801bb64:	2b02      	cmp	r3, #2
 801bb66:	d104      	bne.n	801bb72 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801bb68:	6879      	ldr	r1, [r7, #4]
 801bb6a:	200c      	movs	r0, #12
 801bb6c:	f7ff f8f6 	bl	801ad5c <memp_free>
 801bb70:	e015      	b.n	801bb9e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801bb72:	7bfb      	ldrb	r3, [r7, #15]
 801bb74:	2b01      	cmp	r3, #1
 801bb76:	d104      	bne.n	801bb82 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801bb78:	6879      	ldr	r1, [r7, #4]
 801bb7a:	200b      	movs	r0, #11
 801bb7c:	f7ff f8ee 	bl	801ad5c <memp_free>
 801bb80:	e00d      	b.n	801bb9e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801bb82:	7bfb      	ldrb	r3, [r7, #15]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d103      	bne.n	801bb90 <pbuf_free+0xd4>
          mem_free(p);
 801bb88:	6878      	ldr	r0, [r7, #4]
 801bb8a:	f7fe fd33 	bl	801a5f4 <mem_free>
 801bb8e:	e006      	b.n	801bb9e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801bb90:	4b0b      	ldr	r3, [pc, #44]	; (801bbc0 <pbuf_free+0x104>)
 801bb92:	f240 320f 	movw	r2, #783	; 0x30f
 801bb96:	490f      	ldr	r1, [pc, #60]	; (801bbd4 <pbuf_free+0x118>)
 801bb98:	480b      	ldr	r0, [pc, #44]	; (801bbc8 <pbuf_free+0x10c>)
 801bb9a:	f00b fc8d 	bl	80274b8 <iprintf>
        }
      }
      count++;
 801bb9e:	7ffb      	ldrb	r3, [r7, #31]
 801bba0:	3301      	adds	r3, #1
 801bba2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801bba4:	693b      	ldr	r3, [r7, #16]
 801bba6:	607b      	str	r3, [r7, #4]
 801bba8:	e001      	b.n	801bbae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801bbaa:	2300      	movs	r3, #0
 801bbac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d199      	bne.n	801bae8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801bbb4:	7ffb      	ldrb	r3, [r7, #31]
}
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	3720      	adds	r7, #32
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	bd80      	pop	{r7, pc}
 801bbbe:	bf00      	nop
 801bbc0:	08028b00 	.word	0x08028b00
 801bbc4:	08028c64 	.word	0x08028c64
 801bbc8:	08028b60 	.word	0x08028b60
 801bbcc:	08028c90 	.word	0x08028c90
 801bbd0:	08028ca8 	.word	0x08028ca8
 801bbd4:	08028ccc 	.word	0x08028ccc

0801bbd8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801bbd8:	b480      	push	{r7}
 801bbda:	b085      	sub	sp, #20
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801bbe4:	e005      	b.n	801bbf2 <pbuf_clen+0x1a>
    ++len;
 801bbe6:	89fb      	ldrh	r3, [r7, #14]
 801bbe8:	3301      	adds	r3, #1
 801bbea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d1f6      	bne.n	801bbe6 <pbuf_clen+0xe>
  }
  return len;
 801bbf8:	89fb      	ldrh	r3, [r7, #14]
}
 801bbfa:	4618      	mov	r0, r3
 801bbfc:	3714      	adds	r7, #20
 801bbfe:	46bd      	mov	sp, r7
 801bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc04:	4770      	bx	lr
	...

0801bc08 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b084      	sub	sp, #16
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d016      	beq.n	801bc44 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801bc16:	f00a fc03 	bl	8026420 <sys_arch_protect>
 801bc1a:	60f8      	str	r0, [r7, #12]
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	7b9b      	ldrb	r3, [r3, #14]
 801bc20:	3301      	adds	r3, #1
 801bc22:	b2da      	uxtb	r2, r3
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	739a      	strb	r2, [r3, #14]
 801bc28:	68f8      	ldr	r0, [r7, #12]
 801bc2a:	f00a fc07 	bl	802643c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	7b9b      	ldrb	r3, [r3, #14]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d106      	bne.n	801bc44 <pbuf_ref+0x3c>
 801bc36:	4b05      	ldr	r3, [pc, #20]	; (801bc4c <pbuf_ref+0x44>)
 801bc38:	f240 3242 	movw	r2, #834	; 0x342
 801bc3c:	4904      	ldr	r1, [pc, #16]	; (801bc50 <pbuf_ref+0x48>)
 801bc3e:	4805      	ldr	r0, [pc, #20]	; (801bc54 <pbuf_ref+0x4c>)
 801bc40:	f00b fc3a 	bl	80274b8 <iprintf>
  }
}
 801bc44:	bf00      	nop
 801bc46:	3710      	adds	r7, #16
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	bd80      	pop	{r7, pc}
 801bc4c:	08028b00 	.word	0x08028b00
 801bc50:	08028ce0 	.word	0x08028ce0
 801bc54:	08028b60 	.word	0x08028b60

0801bc58 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b084      	sub	sp, #16
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
 801bc60:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d002      	beq.n	801bc6e <pbuf_cat+0x16>
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d107      	bne.n	801bc7e <pbuf_cat+0x26>
 801bc6e:	4b20      	ldr	r3, [pc, #128]	; (801bcf0 <pbuf_cat+0x98>)
 801bc70:	f240 3259 	movw	r2, #857	; 0x359
 801bc74:	491f      	ldr	r1, [pc, #124]	; (801bcf4 <pbuf_cat+0x9c>)
 801bc76:	4820      	ldr	r0, [pc, #128]	; (801bcf8 <pbuf_cat+0xa0>)
 801bc78:	f00b fc1e 	bl	80274b8 <iprintf>
 801bc7c:	e034      	b.n	801bce8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	60fb      	str	r3, [r7, #12]
 801bc82:	e00a      	b.n	801bc9a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	891a      	ldrh	r2, [r3, #8]
 801bc88:	683b      	ldr	r3, [r7, #0]
 801bc8a:	891b      	ldrh	r3, [r3, #8]
 801bc8c:	4413      	add	r3, r2
 801bc8e:	b29a      	uxth	r2, r3
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	60fb      	str	r3, [r7, #12]
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d1f0      	bne.n	801bc84 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	891a      	ldrh	r2, [r3, #8]
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	895b      	ldrh	r3, [r3, #10]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d006      	beq.n	801bcbc <pbuf_cat+0x64>
 801bcae:	4b10      	ldr	r3, [pc, #64]	; (801bcf0 <pbuf_cat+0x98>)
 801bcb0:	f240 3262 	movw	r2, #866	; 0x362
 801bcb4:	4911      	ldr	r1, [pc, #68]	; (801bcfc <pbuf_cat+0xa4>)
 801bcb6:	4810      	ldr	r0, [pc, #64]	; (801bcf8 <pbuf_cat+0xa0>)
 801bcb8:	f00b fbfe 	bl	80274b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d006      	beq.n	801bcd2 <pbuf_cat+0x7a>
 801bcc4:	4b0a      	ldr	r3, [pc, #40]	; (801bcf0 <pbuf_cat+0x98>)
 801bcc6:	f240 3263 	movw	r2, #867	; 0x363
 801bcca:	490d      	ldr	r1, [pc, #52]	; (801bd00 <pbuf_cat+0xa8>)
 801bccc:	480a      	ldr	r0, [pc, #40]	; (801bcf8 <pbuf_cat+0xa0>)
 801bcce:	f00b fbf3 	bl	80274b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801bcd2:	68fb      	ldr	r3, [r7, #12]
 801bcd4:	891a      	ldrh	r2, [r3, #8]
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	891b      	ldrh	r3, [r3, #8]
 801bcda:	4413      	add	r3, r2
 801bcdc:	b29a      	uxth	r2, r3
 801bcde:	68fb      	ldr	r3, [r7, #12]
 801bce0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	683a      	ldr	r2, [r7, #0]
 801bce6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801bce8:	3710      	adds	r7, #16
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}
 801bcee:	bf00      	nop
 801bcf0:	08028b00 	.word	0x08028b00
 801bcf4:	08028cf4 	.word	0x08028cf4
 801bcf8:	08028b60 	.word	0x08028b60
 801bcfc:	08028d2c 	.word	0x08028d2c
 801bd00:	08028d5c 	.word	0x08028d5c

0801bd04 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b082      	sub	sp, #8
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
 801bd0c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801bd0e:	6839      	ldr	r1, [r7, #0]
 801bd10:	6878      	ldr	r0, [r7, #4]
 801bd12:	f7ff ffa1 	bl	801bc58 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801bd16:	6838      	ldr	r0, [r7, #0]
 801bd18:	f7ff ff76 	bl	801bc08 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801bd1c:	bf00      	nop
 801bd1e:	3708      	adds	r7, #8
 801bd20:	46bd      	mov	sp, r7
 801bd22:	bd80      	pop	{r7, pc}

0801bd24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b086      	sub	sp, #24
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
 801bd2c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801bd2e:	2300      	movs	r3, #0
 801bd30:	617b      	str	r3, [r7, #20]
 801bd32:	2300      	movs	r3, #0
 801bd34:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d008      	beq.n	801bd4e <pbuf_copy+0x2a>
 801bd3c:	683b      	ldr	r3, [r7, #0]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d005      	beq.n	801bd4e <pbuf_copy+0x2a>
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	891a      	ldrh	r2, [r3, #8]
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	891b      	ldrh	r3, [r3, #8]
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d209      	bcs.n	801bd62 <pbuf_copy+0x3e>
 801bd4e:	4b57      	ldr	r3, [pc, #348]	; (801beac <pbuf_copy+0x188>)
 801bd50:	f240 32c9 	movw	r2, #969	; 0x3c9
 801bd54:	4956      	ldr	r1, [pc, #344]	; (801beb0 <pbuf_copy+0x18c>)
 801bd56:	4857      	ldr	r0, [pc, #348]	; (801beb4 <pbuf_copy+0x190>)
 801bd58:	f00b fbae 	bl	80274b8 <iprintf>
 801bd5c:	f06f 030f 	mvn.w	r3, #15
 801bd60:	e09f      	b.n	801bea2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	895b      	ldrh	r3, [r3, #10]
 801bd66:	461a      	mov	r2, r3
 801bd68:	697b      	ldr	r3, [r7, #20]
 801bd6a:	1ad2      	subs	r2, r2, r3
 801bd6c:	683b      	ldr	r3, [r7, #0]
 801bd6e:	895b      	ldrh	r3, [r3, #10]
 801bd70:	4619      	mov	r1, r3
 801bd72:	693b      	ldr	r3, [r7, #16]
 801bd74:	1acb      	subs	r3, r1, r3
 801bd76:	429a      	cmp	r2, r3
 801bd78:	d306      	bcc.n	801bd88 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801bd7a:	683b      	ldr	r3, [r7, #0]
 801bd7c:	895b      	ldrh	r3, [r3, #10]
 801bd7e:	461a      	mov	r2, r3
 801bd80:	693b      	ldr	r3, [r7, #16]
 801bd82:	1ad3      	subs	r3, r2, r3
 801bd84:	60fb      	str	r3, [r7, #12]
 801bd86:	e005      	b.n	801bd94 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	895b      	ldrh	r3, [r3, #10]
 801bd8c:	461a      	mov	r2, r3
 801bd8e:	697b      	ldr	r3, [r7, #20]
 801bd90:	1ad3      	subs	r3, r2, r3
 801bd92:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	685a      	ldr	r2, [r3, #4]
 801bd98:	697b      	ldr	r3, [r7, #20]
 801bd9a:	18d0      	adds	r0, r2, r3
 801bd9c:	683b      	ldr	r3, [r7, #0]
 801bd9e:	685a      	ldr	r2, [r3, #4]
 801bda0:	693b      	ldr	r3, [r7, #16]
 801bda2:	4413      	add	r3, r2
 801bda4:	68fa      	ldr	r2, [r7, #12]
 801bda6:	4619      	mov	r1, r3
 801bda8:	f00b fa60 	bl	802726c <memcpy>
    offset_to += len;
 801bdac:	697a      	ldr	r2, [r7, #20]
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	4413      	add	r3, r2
 801bdb2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801bdb4:	693a      	ldr	r2, [r7, #16]
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	4413      	add	r3, r2
 801bdba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	895b      	ldrh	r3, [r3, #10]
 801bdc0:	461a      	mov	r2, r3
 801bdc2:	697b      	ldr	r3, [r7, #20]
 801bdc4:	4293      	cmp	r3, r2
 801bdc6:	d906      	bls.n	801bdd6 <pbuf_copy+0xb2>
 801bdc8:	4b38      	ldr	r3, [pc, #224]	; (801beac <pbuf_copy+0x188>)
 801bdca:	f240 32d9 	movw	r2, #985	; 0x3d9
 801bdce:	493a      	ldr	r1, [pc, #232]	; (801beb8 <pbuf_copy+0x194>)
 801bdd0:	4838      	ldr	r0, [pc, #224]	; (801beb4 <pbuf_copy+0x190>)
 801bdd2:	f00b fb71 	bl	80274b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801bdd6:	683b      	ldr	r3, [r7, #0]
 801bdd8:	895b      	ldrh	r3, [r3, #10]
 801bdda:	461a      	mov	r2, r3
 801bddc:	693b      	ldr	r3, [r7, #16]
 801bdde:	4293      	cmp	r3, r2
 801bde0:	d906      	bls.n	801bdf0 <pbuf_copy+0xcc>
 801bde2:	4b32      	ldr	r3, [pc, #200]	; (801beac <pbuf_copy+0x188>)
 801bde4:	f240 32da 	movw	r2, #986	; 0x3da
 801bde8:	4934      	ldr	r1, [pc, #208]	; (801bebc <pbuf_copy+0x198>)
 801bdea:	4832      	ldr	r0, [pc, #200]	; (801beb4 <pbuf_copy+0x190>)
 801bdec:	f00b fb64 	bl	80274b8 <iprintf>
    if (offset_from >= p_from->len) {
 801bdf0:	683b      	ldr	r3, [r7, #0]
 801bdf2:	895b      	ldrh	r3, [r3, #10]
 801bdf4:	461a      	mov	r2, r3
 801bdf6:	693b      	ldr	r3, [r7, #16]
 801bdf8:	4293      	cmp	r3, r2
 801bdfa:	d304      	bcc.n	801be06 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801bdfc:	2300      	movs	r3, #0
 801bdfe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	895b      	ldrh	r3, [r3, #10]
 801be0a:	461a      	mov	r2, r3
 801be0c:	697b      	ldr	r3, [r7, #20]
 801be0e:	4293      	cmp	r3, r2
 801be10:	d114      	bne.n	801be3c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801be12:	2300      	movs	r3, #0
 801be14:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d10c      	bne.n	801be3c <pbuf_copy+0x118>
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d009      	beq.n	801be3c <pbuf_copy+0x118>
 801be28:	4b20      	ldr	r3, [pc, #128]	; (801beac <pbuf_copy+0x188>)
 801be2a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801be2e:	4924      	ldr	r1, [pc, #144]	; (801bec0 <pbuf_copy+0x19c>)
 801be30:	4820      	ldr	r0, [pc, #128]	; (801beb4 <pbuf_copy+0x190>)
 801be32:	f00b fb41 	bl	80274b8 <iprintf>
 801be36:	f06f 030f 	mvn.w	r3, #15
 801be3a:	e032      	b.n	801bea2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d013      	beq.n	801be6a <pbuf_copy+0x146>
 801be42:	683b      	ldr	r3, [r7, #0]
 801be44:	895a      	ldrh	r2, [r3, #10]
 801be46:	683b      	ldr	r3, [r7, #0]
 801be48:	891b      	ldrh	r3, [r3, #8]
 801be4a:	429a      	cmp	r2, r3
 801be4c:	d10d      	bne.n	801be6a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801be4e:	683b      	ldr	r3, [r7, #0]
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	2b00      	cmp	r3, #0
 801be54:	d009      	beq.n	801be6a <pbuf_copy+0x146>
 801be56:	4b15      	ldr	r3, [pc, #84]	; (801beac <pbuf_copy+0x188>)
 801be58:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801be5c:	4919      	ldr	r1, [pc, #100]	; (801bec4 <pbuf_copy+0x1a0>)
 801be5e:	4815      	ldr	r0, [pc, #84]	; (801beb4 <pbuf_copy+0x190>)
 801be60:	f00b fb2a 	bl	80274b8 <iprintf>
 801be64:	f06f 0305 	mvn.w	r3, #5
 801be68:	e01b      	b.n	801bea2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d013      	beq.n	801be98 <pbuf_copy+0x174>
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	895a      	ldrh	r2, [r3, #10]
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	891b      	ldrh	r3, [r3, #8]
 801be78:	429a      	cmp	r2, r3
 801be7a:	d10d      	bne.n	801be98 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d009      	beq.n	801be98 <pbuf_copy+0x174>
 801be84:	4b09      	ldr	r3, [pc, #36]	; (801beac <pbuf_copy+0x188>)
 801be86:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801be8a:	490e      	ldr	r1, [pc, #56]	; (801bec4 <pbuf_copy+0x1a0>)
 801be8c:	4809      	ldr	r0, [pc, #36]	; (801beb4 <pbuf_copy+0x190>)
 801be8e:	f00b fb13 	bl	80274b8 <iprintf>
 801be92:	f06f 0305 	mvn.w	r3, #5
 801be96:	e004      	b.n	801bea2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801be98:	683b      	ldr	r3, [r7, #0]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	f47f af61 	bne.w	801bd62 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801bea0:	2300      	movs	r3, #0
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	3718      	adds	r7, #24
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bd80      	pop	{r7, pc}
 801beaa:	bf00      	nop
 801beac:	08028b00 	.word	0x08028b00
 801beb0:	08028da8 	.word	0x08028da8
 801beb4:	08028b60 	.word	0x08028b60
 801beb8:	08028dd8 	.word	0x08028dd8
 801bebc:	08028df0 	.word	0x08028df0
 801bec0:	08028e0c 	.word	0x08028e0c
 801bec4:	08028e1c 	.word	0x08028e1c

0801bec8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801bec8:	b580      	push	{r7, lr}
 801beca:	b088      	sub	sp, #32
 801becc:	af00      	add	r7, sp, #0
 801bece:	60f8      	str	r0, [r7, #12]
 801bed0:	60b9      	str	r1, [r7, #8]
 801bed2:	4611      	mov	r1, r2
 801bed4:	461a      	mov	r2, r3
 801bed6:	460b      	mov	r3, r1
 801bed8:	80fb      	strh	r3, [r7, #6]
 801beda:	4613      	mov	r3, r2
 801bedc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801bede:	2300      	movs	r3, #0
 801bee0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801bee2:	2300      	movs	r3, #0
 801bee4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d108      	bne.n	801befe <pbuf_copy_partial+0x36>
 801beec:	4b2b      	ldr	r3, [pc, #172]	; (801bf9c <pbuf_copy_partial+0xd4>)
 801beee:	f240 420a 	movw	r2, #1034	; 0x40a
 801bef2:	492b      	ldr	r1, [pc, #172]	; (801bfa0 <pbuf_copy_partial+0xd8>)
 801bef4:	482b      	ldr	r0, [pc, #172]	; (801bfa4 <pbuf_copy_partial+0xdc>)
 801bef6:	f00b fadf 	bl	80274b8 <iprintf>
 801befa:	2300      	movs	r3, #0
 801befc:	e04a      	b.n	801bf94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801befe:	68bb      	ldr	r3, [r7, #8]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d108      	bne.n	801bf16 <pbuf_copy_partial+0x4e>
 801bf04:	4b25      	ldr	r3, [pc, #148]	; (801bf9c <pbuf_copy_partial+0xd4>)
 801bf06:	f240 420b 	movw	r2, #1035	; 0x40b
 801bf0a:	4927      	ldr	r1, [pc, #156]	; (801bfa8 <pbuf_copy_partial+0xe0>)
 801bf0c:	4825      	ldr	r0, [pc, #148]	; (801bfa4 <pbuf_copy_partial+0xdc>)
 801bf0e:	f00b fad3 	bl	80274b8 <iprintf>
 801bf12:	2300      	movs	r3, #0
 801bf14:	e03e      	b.n	801bf94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	61fb      	str	r3, [r7, #28]
 801bf1a:	e034      	b.n	801bf86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801bf1c:	88bb      	ldrh	r3, [r7, #4]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d00a      	beq.n	801bf38 <pbuf_copy_partial+0x70>
 801bf22:	69fb      	ldr	r3, [r7, #28]
 801bf24:	895b      	ldrh	r3, [r3, #10]
 801bf26:	88ba      	ldrh	r2, [r7, #4]
 801bf28:	429a      	cmp	r2, r3
 801bf2a:	d305      	bcc.n	801bf38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801bf2c:	69fb      	ldr	r3, [r7, #28]
 801bf2e:	895b      	ldrh	r3, [r3, #10]
 801bf30:	88ba      	ldrh	r2, [r7, #4]
 801bf32:	1ad3      	subs	r3, r2, r3
 801bf34:	80bb      	strh	r3, [r7, #4]
 801bf36:	e023      	b.n	801bf80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801bf38:	69fb      	ldr	r3, [r7, #28]
 801bf3a:	895a      	ldrh	r2, [r3, #10]
 801bf3c:	88bb      	ldrh	r3, [r7, #4]
 801bf3e:	1ad3      	subs	r3, r2, r3
 801bf40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801bf42:	8b3a      	ldrh	r2, [r7, #24]
 801bf44:	88fb      	ldrh	r3, [r7, #6]
 801bf46:	429a      	cmp	r2, r3
 801bf48:	d901      	bls.n	801bf4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801bf4a:	88fb      	ldrh	r3, [r7, #6]
 801bf4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801bf4e:	8b7b      	ldrh	r3, [r7, #26]
 801bf50:	68ba      	ldr	r2, [r7, #8]
 801bf52:	18d0      	adds	r0, r2, r3
 801bf54:	69fb      	ldr	r3, [r7, #28]
 801bf56:	685a      	ldr	r2, [r3, #4]
 801bf58:	88bb      	ldrh	r3, [r7, #4]
 801bf5a:	4413      	add	r3, r2
 801bf5c:	8b3a      	ldrh	r2, [r7, #24]
 801bf5e:	4619      	mov	r1, r3
 801bf60:	f00b f984 	bl	802726c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801bf64:	8afa      	ldrh	r2, [r7, #22]
 801bf66:	8b3b      	ldrh	r3, [r7, #24]
 801bf68:	4413      	add	r3, r2
 801bf6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801bf6c:	8b7a      	ldrh	r2, [r7, #26]
 801bf6e:	8b3b      	ldrh	r3, [r7, #24]
 801bf70:	4413      	add	r3, r2
 801bf72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801bf74:	88fa      	ldrh	r2, [r7, #6]
 801bf76:	8b3b      	ldrh	r3, [r7, #24]
 801bf78:	1ad3      	subs	r3, r2, r3
 801bf7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801bf7c:	2300      	movs	r3, #0
 801bf7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801bf80:	69fb      	ldr	r3, [r7, #28]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	61fb      	str	r3, [r7, #28]
 801bf86:	88fb      	ldrh	r3, [r7, #6]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d002      	beq.n	801bf92 <pbuf_copy_partial+0xca>
 801bf8c:	69fb      	ldr	r3, [r7, #28]
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d1c4      	bne.n	801bf1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801bf92:	8afb      	ldrh	r3, [r7, #22]
}
 801bf94:	4618      	mov	r0, r3
 801bf96:	3720      	adds	r7, #32
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	bd80      	pop	{r7, pc}
 801bf9c:	08028b00 	.word	0x08028b00
 801bfa0:	08028e48 	.word	0x08028e48
 801bfa4:	08028b60 	.word	0x08028b60
 801bfa8:	08028e68 	.word	0x08028e68

0801bfac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b084      	sub	sp, #16
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	603a      	str	r2, [r7, #0]
 801bfb6:	71fb      	strb	r3, [r7, #7]
 801bfb8:	460b      	mov	r3, r1
 801bfba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801bfbc:	683b      	ldr	r3, [r7, #0]
 801bfbe:	8919      	ldrh	r1, [r3, #8]
 801bfc0:	88ba      	ldrh	r2, [r7, #4]
 801bfc2:	79fb      	ldrb	r3, [r7, #7]
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f7ff fa95 	bl	801b4f4 <pbuf_alloc>
 801bfca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d101      	bne.n	801bfd6 <pbuf_clone+0x2a>
    return NULL;
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	e011      	b.n	801bffa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801bfd6:	6839      	ldr	r1, [r7, #0]
 801bfd8:	68f8      	ldr	r0, [r7, #12]
 801bfda:	f7ff fea3 	bl	801bd24 <pbuf_copy>
 801bfde:	4603      	mov	r3, r0
 801bfe0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801bfe2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d006      	beq.n	801bff8 <pbuf_clone+0x4c>
 801bfea:	4b06      	ldr	r3, [pc, #24]	; (801c004 <pbuf_clone+0x58>)
 801bfec:	f240 5224 	movw	r2, #1316	; 0x524
 801bff0:	4905      	ldr	r1, [pc, #20]	; (801c008 <pbuf_clone+0x5c>)
 801bff2:	4806      	ldr	r0, [pc, #24]	; (801c00c <pbuf_clone+0x60>)
 801bff4:	f00b fa60 	bl	80274b8 <iprintf>
  return q;
 801bff8:	68fb      	ldr	r3, [r7, #12]
}
 801bffa:	4618      	mov	r0, r3
 801bffc:	3710      	adds	r7, #16
 801bffe:	46bd      	mov	sp, r7
 801c000:	bd80      	pop	{r7, pc}
 801c002:	bf00      	nop
 801c004:	08028b00 	.word	0x08028b00
 801c008:	08028f74 	.word	0x08028f74
 801c00c:	08028b60 	.word	0x08028b60

0801c010 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801c010:	b580      	push	{r7, lr}
 801c012:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c014:	f00b fade 	bl	80275d4 <rand>
 801c018:	4603      	mov	r3, r0
 801c01a:	b29b      	uxth	r3, r3
 801c01c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c020:	b29b      	uxth	r3, r3
 801c022:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c026:	b29a      	uxth	r2, r3
 801c028:	4b01      	ldr	r3, [pc, #4]	; (801c030 <tcp_init+0x20>)
 801c02a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c02c:	bf00      	nop
 801c02e:	bd80      	pop	{r7, pc}
 801c030:	24000458 	.word	0x24000458

0801c034 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b082      	sub	sp, #8
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	7d1b      	ldrb	r3, [r3, #20]
 801c040:	2b01      	cmp	r3, #1
 801c042:	d105      	bne.n	801c050 <tcp_free+0x1c>
 801c044:	4b06      	ldr	r3, [pc, #24]	; (801c060 <tcp_free+0x2c>)
 801c046:	22d4      	movs	r2, #212	; 0xd4
 801c048:	4906      	ldr	r1, [pc, #24]	; (801c064 <tcp_free+0x30>)
 801c04a:	4807      	ldr	r0, [pc, #28]	; (801c068 <tcp_free+0x34>)
 801c04c:	f00b fa34 	bl	80274b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801c050:	6879      	ldr	r1, [r7, #4]
 801c052:	2001      	movs	r0, #1
 801c054:	f7fe fe82 	bl	801ad5c <memp_free>
}
 801c058:	bf00      	nop
 801c05a:	3708      	adds	r7, #8
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bd80      	pop	{r7, pc}
 801c060:	08029000 	.word	0x08029000
 801c064:	08029030 	.word	0x08029030
 801c068:	08029044 	.word	0x08029044

0801c06c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801c06c:	b580      	push	{r7, lr}
 801c06e:	b082      	sub	sp, #8
 801c070:	af00      	add	r7, sp, #0
 801c072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	7d1b      	ldrb	r3, [r3, #20]
 801c078:	2b01      	cmp	r3, #1
 801c07a:	d105      	bne.n	801c088 <tcp_free_listen+0x1c>
 801c07c:	4b06      	ldr	r3, [pc, #24]	; (801c098 <tcp_free_listen+0x2c>)
 801c07e:	22df      	movs	r2, #223	; 0xdf
 801c080:	4906      	ldr	r1, [pc, #24]	; (801c09c <tcp_free_listen+0x30>)
 801c082:	4807      	ldr	r0, [pc, #28]	; (801c0a0 <tcp_free_listen+0x34>)
 801c084:	f00b fa18 	bl	80274b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801c088:	6879      	ldr	r1, [r7, #4]
 801c08a:	2002      	movs	r0, #2
 801c08c:	f7fe fe66 	bl	801ad5c <memp_free>
}
 801c090:	bf00      	nop
 801c092:	3708      	adds	r7, #8
 801c094:	46bd      	mov	sp, r7
 801c096:	bd80      	pop	{r7, pc}
 801c098:	08029000 	.word	0x08029000
 801c09c:	0802906c 	.word	0x0802906c
 801c0a0:	08029044 	.word	0x08029044

0801c0a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801c0a8:	f000 fea2 	bl	801cdf0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801c0ac:	4b07      	ldr	r3, [pc, #28]	; (801c0cc <tcp_tmr+0x28>)
 801c0ae:	781b      	ldrb	r3, [r3, #0]
 801c0b0:	3301      	adds	r3, #1
 801c0b2:	b2da      	uxtb	r2, r3
 801c0b4:	4b05      	ldr	r3, [pc, #20]	; (801c0cc <tcp_tmr+0x28>)
 801c0b6:	701a      	strb	r2, [r3, #0]
 801c0b8:	4b04      	ldr	r3, [pc, #16]	; (801c0cc <tcp_tmr+0x28>)
 801c0ba:	781b      	ldrb	r3, [r3, #0]
 801c0bc:	f003 0301 	and.w	r3, r3, #1
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d001      	beq.n	801c0c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801c0c4:	f000 fb54 	bl	801c770 <tcp_slowtmr>
  }
}
 801c0c8:	bf00      	nop
 801c0ca:	bd80      	pop	{r7, pc}
 801c0cc:	2400cf6d 	.word	0x2400cf6d

0801c0d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801c0d0:	b580      	push	{r7, lr}
 801c0d2:	b084      	sub	sp, #16
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	6078      	str	r0, [r7, #4]
 801c0d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801c0da:	683b      	ldr	r3, [r7, #0]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d105      	bne.n	801c0ec <tcp_remove_listener+0x1c>
 801c0e0:	4b0d      	ldr	r3, [pc, #52]	; (801c118 <tcp_remove_listener+0x48>)
 801c0e2:	22ff      	movs	r2, #255	; 0xff
 801c0e4:	490d      	ldr	r1, [pc, #52]	; (801c11c <tcp_remove_listener+0x4c>)
 801c0e6:	480e      	ldr	r0, [pc, #56]	; (801c120 <tcp_remove_listener+0x50>)
 801c0e8:	f00b f9e6 	bl	80274b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	60fb      	str	r3, [r7, #12]
 801c0f0:	e00a      	b.n	801c108 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c0f6:	683a      	ldr	r2, [r7, #0]
 801c0f8:	429a      	cmp	r2, r3
 801c0fa:	d102      	bne.n	801c102 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	2200      	movs	r2, #0
 801c100:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	68db      	ldr	r3, [r3, #12]
 801c106:	60fb      	str	r3, [r7, #12]
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d1f1      	bne.n	801c0f2 <tcp_remove_listener+0x22>
    }
  }
}
 801c10e:	bf00      	nop
 801c110:	bf00      	nop
 801c112:	3710      	adds	r7, #16
 801c114:	46bd      	mov	sp, r7
 801c116:	bd80      	pop	{r7, pc}
 801c118:	08029000 	.word	0x08029000
 801c11c:	08029088 	.word	0x08029088
 801c120:	08029044 	.word	0x08029044

0801c124 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801c124:	b580      	push	{r7, lr}
 801c126:	b084      	sub	sp, #16
 801c128:	af00      	add	r7, sp, #0
 801c12a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d106      	bne.n	801c140 <tcp_listen_closed+0x1c>
 801c132:	4b14      	ldr	r3, [pc, #80]	; (801c184 <tcp_listen_closed+0x60>)
 801c134:	f240 1211 	movw	r2, #273	; 0x111
 801c138:	4913      	ldr	r1, [pc, #76]	; (801c188 <tcp_listen_closed+0x64>)
 801c13a:	4814      	ldr	r0, [pc, #80]	; (801c18c <tcp_listen_closed+0x68>)
 801c13c:	f00b f9bc 	bl	80274b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	7d1b      	ldrb	r3, [r3, #20]
 801c144:	2b01      	cmp	r3, #1
 801c146:	d006      	beq.n	801c156 <tcp_listen_closed+0x32>
 801c148:	4b0e      	ldr	r3, [pc, #56]	; (801c184 <tcp_listen_closed+0x60>)
 801c14a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801c14e:	4910      	ldr	r1, [pc, #64]	; (801c190 <tcp_listen_closed+0x6c>)
 801c150:	480e      	ldr	r0, [pc, #56]	; (801c18c <tcp_listen_closed+0x68>)
 801c152:	f00b f9b1 	bl	80274b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801c156:	2301      	movs	r3, #1
 801c158:	60fb      	str	r3, [r7, #12]
 801c15a:	e00b      	b.n	801c174 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801c15c:	4a0d      	ldr	r2, [pc, #52]	; (801c194 <tcp_listen_closed+0x70>)
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	6879      	ldr	r1, [r7, #4]
 801c168:	4618      	mov	r0, r3
 801c16a:	f7ff ffb1 	bl	801c0d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	3301      	adds	r3, #1
 801c172:	60fb      	str	r3, [r7, #12]
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	2b03      	cmp	r3, #3
 801c178:	d9f0      	bls.n	801c15c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801c17a:	bf00      	nop
 801c17c:	bf00      	nop
 801c17e:	3710      	adds	r7, #16
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}
 801c184:	08029000 	.word	0x08029000
 801c188:	080290b0 	.word	0x080290b0
 801c18c:	08029044 	.word	0x08029044
 801c190:	080290bc 	.word	0x080290bc
 801c194:	0802bb14 	.word	0x0802bb14

0801c198 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801c198:	b5b0      	push	{r4, r5, r7, lr}
 801c19a:	b088      	sub	sp, #32
 801c19c:	af04      	add	r7, sp, #16
 801c19e:	6078      	str	r0, [r7, #4]
 801c1a0:	460b      	mov	r3, r1
 801c1a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d106      	bne.n	801c1b8 <tcp_close_shutdown+0x20>
 801c1aa:	4b63      	ldr	r3, [pc, #396]	; (801c338 <tcp_close_shutdown+0x1a0>)
 801c1ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801c1b0:	4962      	ldr	r1, [pc, #392]	; (801c33c <tcp_close_shutdown+0x1a4>)
 801c1b2:	4863      	ldr	r0, [pc, #396]	; (801c340 <tcp_close_shutdown+0x1a8>)
 801c1b4:	f00b f980 	bl	80274b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801c1b8:	78fb      	ldrb	r3, [r7, #3]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d066      	beq.n	801c28c <tcp_close_shutdown+0xf4>
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	7d1b      	ldrb	r3, [r3, #20]
 801c1c2:	2b04      	cmp	r3, #4
 801c1c4:	d003      	beq.n	801c1ce <tcp_close_shutdown+0x36>
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	7d1b      	ldrb	r3, [r3, #20]
 801c1ca:	2b07      	cmp	r3, #7
 801c1cc:	d15e      	bne.n	801c28c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d104      	bne.n	801c1e0 <tcp_close_shutdown+0x48>
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c1da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c1de:	d055      	beq.n	801c28c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	8b5b      	ldrh	r3, [r3, #26]
 801c1e4:	f003 0310 	and.w	r3, r3, #16
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d106      	bne.n	801c1fa <tcp_close_shutdown+0x62>
 801c1ec:	4b52      	ldr	r3, [pc, #328]	; (801c338 <tcp_close_shutdown+0x1a0>)
 801c1ee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801c1f2:	4954      	ldr	r1, [pc, #336]	; (801c344 <tcp_close_shutdown+0x1ac>)
 801c1f4:	4852      	ldr	r0, [pc, #328]	; (801c340 <tcp_close_shutdown+0x1a8>)
 801c1f6:	f00b f95f 	bl	80274b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801c202:	687d      	ldr	r5, [r7, #4]
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	3304      	adds	r3, #4
 801c208:	687a      	ldr	r2, [r7, #4]
 801c20a:	8ad2      	ldrh	r2, [r2, #22]
 801c20c:	6879      	ldr	r1, [r7, #4]
 801c20e:	8b09      	ldrh	r1, [r1, #24]
 801c210:	9102      	str	r1, [sp, #8]
 801c212:	9201      	str	r2, [sp, #4]
 801c214:	9300      	str	r3, [sp, #0]
 801c216:	462b      	mov	r3, r5
 801c218:	4622      	mov	r2, r4
 801c21a:	4601      	mov	r1, r0
 801c21c:	6878      	ldr	r0, [r7, #4]
 801c21e:	f004 fe91 	bl	8020f44 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801c222:	6878      	ldr	r0, [r7, #4]
 801c224:	f001 f8c6 	bl	801d3b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801c228:	4b47      	ldr	r3, [pc, #284]	; (801c348 <tcp_close_shutdown+0x1b0>)
 801c22a:	681b      	ldr	r3, [r3, #0]
 801c22c:	687a      	ldr	r2, [r7, #4]
 801c22e:	429a      	cmp	r2, r3
 801c230:	d105      	bne.n	801c23e <tcp_close_shutdown+0xa6>
 801c232:	4b45      	ldr	r3, [pc, #276]	; (801c348 <tcp_close_shutdown+0x1b0>)
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	68db      	ldr	r3, [r3, #12]
 801c238:	4a43      	ldr	r2, [pc, #268]	; (801c348 <tcp_close_shutdown+0x1b0>)
 801c23a:	6013      	str	r3, [r2, #0]
 801c23c:	e013      	b.n	801c266 <tcp_close_shutdown+0xce>
 801c23e:	4b42      	ldr	r3, [pc, #264]	; (801c348 <tcp_close_shutdown+0x1b0>)
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	60fb      	str	r3, [r7, #12]
 801c244:	e00c      	b.n	801c260 <tcp_close_shutdown+0xc8>
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	68db      	ldr	r3, [r3, #12]
 801c24a:	687a      	ldr	r2, [r7, #4]
 801c24c:	429a      	cmp	r2, r3
 801c24e:	d104      	bne.n	801c25a <tcp_close_shutdown+0xc2>
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	68da      	ldr	r2, [r3, #12]
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	60da      	str	r2, [r3, #12]
 801c258:	e005      	b.n	801c266 <tcp_close_shutdown+0xce>
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	68db      	ldr	r3, [r3, #12]
 801c25e:	60fb      	str	r3, [r7, #12]
 801c260:	68fb      	ldr	r3, [r7, #12]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d1ef      	bne.n	801c246 <tcp_close_shutdown+0xae>
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	2200      	movs	r2, #0
 801c26a:	60da      	str	r2, [r3, #12]
 801c26c:	4b37      	ldr	r3, [pc, #220]	; (801c34c <tcp_close_shutdown+0x1b4>)
 801c26e:	2201      	movs	r2, #1
 801c270:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801c272:	4b37      	ldr	r3, [pc, #220]	; (801c350 <tcp_close_shutdown+0x1b8>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	687a      	ldr	r2, [r7, #4]
 801c278:	429a      	cmp	r2, r3
 801c27a:	d102      	bne.n	801c282 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801c27c:	f003 fd5e 	bl	801fd3c <tcp_trigger_input_pcb_close>
 801c280:	e002      	b.n	801c288 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801c282:	6878      	ldr	r0, [r7, #4]
 801c284:	f7ff fed6 	bl	801c034 <tcp_free>
      }
      return ERR_OK;
 801c288:	2300      	movs	r3, #0
 801c28a:	e050      	b.n	801c32e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	7d1b      	ldrb	r3, [r3, #20]
 801c290:	2b02      	cmp	r3, #2
 801c292:	d03b      	beq.n	801c30c <tcp_close_shutdown+0x174>
 801c294:	2b02      	cmp	r3, #2
 801c296:	dc44      	bgt.n	801c322 <tcp_close_shutdown+0x18a>
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d002      	beq.n	801c2a2 <tcp_close_shutdown+0x10a>
 801c29c:	2b01      	cmp	r3, #1
 801c29e:	d02a      	beq.n	801c2f6 <tcp_close_shutdown+0x15e>
 801c2a0:	e03f      	b.n	801c322 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	8adb      	ldrh	r3, [r3, #22]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d021      	beq.n	801c2ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c2aa:	4b2a      	ldr	r3, [pc, #168]	; (801c354 <tcp_close_shutdown+0x1bc>)
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	687a      	ldr	r2, [r7, #4]
 801c2b0:	429a      	cmp	r2, r3
 801c2b2:	d105      	bne.n	801c2c0 <tcp_close_shutdown+0x128>
 801c2b4:	4b27      	ldr	r3, [pc, #156]	; (801c354 <tcp_close_shutdown+0x1bc>)
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	68db      	ldr	r3, [r3, #12]
 801c2ba:	4a26      	ldr	r2, [pc, #152]	; (801c354 <tcp_close_shutdown+0x1bc>)
 801c2bc:	6013      	str	r3, [r2, #0]
 801c2be:	e013      	b.n	801c2e8 <tcp_close_shutdown+0x150>
 801c2c0:	4b24      	ldr	r3, [pc, #144]	; (801c354 <tcp_close_shutdown+0x1bc>)
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	60bb      	str	r3, [r7, #8]
 801c2c6:	e00c      	b.n	801c2e2 <tcp_close_shutdown+0x14a>
 801c2c8:	68bb      	ldr	r3, [r7, #8]
 801c2ca:	68db      	ldr	r3, [r3, #12]
 801c2cc:	687a      	ldr	r2, [r7, #4]
 801c2ce:	429a      	cmp	r2, r3
 801c2d0:	d104      	bne.n	801c2dc <tcp_close_shutdown+0x144>
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	68da      	ldr	r2, [r3, #12]
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	60da      	str	r2, [r3, #12]
 801c2da:	e005      	b.n	801c2e8 <tcp_close_shutdown+0x150>
 801c2dc:	68bb      	ldr	r3, [r7, #8]
 801c2de:	68db      	ldr	r3, [r3, #12]
 801c2e0:	60bb      	str	r3, [r7, #8]
 801c2e2:	68bb      	ldr	r3, [r7, #8]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d1ef      	bne.n	801c2c8 <tcp_close_shutdown+0x130>
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	2200      	movs	r2, #0
 801c2ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801c2ee:	6878      	ldr	r0, [r7, #4]
 801c2f0:	f7ff fea0 	bl	801c034 <tcp_free>
      break;
 801c2f4:	e01a      	b.n	801c32c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801c2f6:	6878      	ldr	r0, [r7, #4]
 801c2f8:	f7ff ff14 	bl	801c124 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801c2fc:	6879      	ldr	r1, [r7, #4]
 801c2fe:	4816      	ldr	r0, [pc, #88]	; (801c358 <tcp_close_shutdown+0x1c0>)
 801c300:	f001 f8a8 	bl	801d454 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801c304:	6878      	ldr	r0, [r7, #4]
 801c306:	f7ff feb1 	bl	801c06c <tcp_free_listen>
      break;
 801c30a:	e00f      	b.n	801c32c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c30c:	6879      	ldr	r1, [r7, #4]
 801c30e:	480e      	ldr	r0, [pc, #56]	; (801c348 <tcp_close_shutdown+0x1b0>)
 801c310:	f001 f8a0 	bl	801d454 <tcp_pcb_remove>
 801c314:	4b0d      	ldr	r3, [pc, #52]	; (801c34c <tcp_close_shutdown+0x1b4>)
 801c316:	2201      	movs	r2, #1
 801c318:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801c31a:	6878      	ldr	r0, [r7, #4]
 801c31c:	f7ff fe8a 	bl	801c034 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801c320:	e004      	b.n	801c32c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801c322:	6878      	ldr	r0, [r7, #4]
 801c324:	f000 f81a 	bl	801c35c <tcp_close_shutdown_fin>
 801c328:	4603      	mov	r3, r0
 801c32a:	e000      	b.n	801c32e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801c32c:	2300      	movs	r3, #0
}
 801c32e:	4618      	mov	r0, r3
 801c330:	3710      	adds	r7, #16
 801c332:	46bd      	mov	sp, r7
 801c334:	bdb0      	pop	{r4, r5, r7, pc}
 801c336:	bf00      	nop
 801c338:	08029000 	.word	0x08029000
 801c33c:	080290d4 	.word	0x080290d4
 801c340:	08029044 	.word	0x08029044
 801c344:	080290f4 	.word	0x080290f4
 801c348:	2400cf64 	.word	0x2400cf64
 801c34c:	2400cf6c 	.word	0x2400cf6c
 801c350:	2400cfa4 	.word	0x2400cfa4
 801c354:	2400cf5c 	.word	0x2400cf5c
 801c358:	2400cf60 	.word	0x2400cf60

0801c35c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b084      	sub	sp, #16
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d106      	bne.n	801c378 <tcp_close_shutdown_fin+0x1c>
 801c36a:	4b2e      	ldr	r3, [pc, #184]	; (801c424 <tcp_close_shutdown_fin+0xc8>)
 801c36c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801c370:	492d      	ldr	r1, [pc, #180]	; (801c428 <tcp_close_shutdown_fin+0xcc>)
 801c372:	482e      	ldr	r0, [pc, #184]	; (801c42c <tcp_close_shutdown_fin+0xd0>)
 801c374:	f00b f8a0 	bl	80274b8 <iprintf>

  switch (pcb->state) {
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	7d1b      	ldrb	r3, [r3, #20]
 801c37c:	2b07      	cmp	r3, #7
 801c37e:	d020      	beq.n	801c3c2 <tcp_close_shutdown_fin+0x66>
 801c380:	2b07      	cmp	r3, #7
 801c382:	dc2b      	bgt.n	801c3dc <tcp_close_shutdown_fin+0x80>
 801c384:	2b03      	cmp	r3, #3
 801c386:	d002      	beq.n	801c38e <tcp_close_shutdown_fin+0x32>
 801c388:	2b04      	cmp	r3, #4
 801c38a:	d00d      	beq.n	801c3a8 <tcp_close_shutdown_fin+0x4c>
 801c38c:	e026      	b.n	801c3dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801c38e:	6878      	ldr	r0, [r7, #4]
 801c390:	f003 fee6 	bl	8020160 <tcp_send_fin>
 801c394:	4603      	mov	r3, r0
 801c396:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801c398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d11f      	bne.n	801c3e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	2205      	movs	r2, #5
 801c3a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c3a6:	e01b      	b.n	801c3e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801c3a8:	6878      	ldr	r0, [r7, #4]
 801c3aa:	f003 fed9 	bl	8020160 <tcp_send_fin>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801c3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d114      	bne.n	801c3e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	2205      	movs	r2, #5
 801c3be:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c3c0:	e010      	b.n	801c3e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801c3c2:	6878      	ldr	r0, [r7, #4]
 801c3c4:	f003 fecc 	bl	8020160 <tcp_send_fin>
 801c3c8:	4603      	mov	r3, r0
 801c3ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801c3cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d109      	bne.n	801c3e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	2209      	movs	r2, #9
 801c3d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c3da:	e005      	b.n	801c3e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801c3dc:	2300      	movs	r3, #0
 801c3de:	e01c      	b.n	801c41a <tcp_close_shutdown_fin+0xbe>
      break;
 801c3e0:	bf00      	nop
 801c3e2:	e002      	b.n	801c3ea <tcp_close_shutdown_fin+0x8e>
      break;
 801c3e4:	bf00      	nop
 801c3e6:	e000      	b.n	801c3ea <tcp_close_shutdown_fin+0x8e>
      break;
 801c3e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 801c3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d103      	bne.n	801c3fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801c3f2:	6878      	ldr	r0, [r7, #4]
 801c3f4:	f003 fff2 	bl	80203dc <tcp_output>
 801c3f8:	e00d      	b.n	801c416 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801c3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c402:	d108      	bne.n	801c416 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	8b5b      	ldrh	r3, [r3, #26]
 801c408:	f043 0308 	orr.w	r3, r3, #8
 801c40c:	b29a      	uxth	r2, r3
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801c412:	2300      	movs	r3, #0
 801c414:	e001      	b.n	801c41a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801c416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c41a:	4618      	mov	r0, r3
 801c41c:	3710      	adds	r7, #16
 801c41e:	46bd      	mov	sp, r7
 801c420:	bd80      	pop	{r7, pc}
 801c422:	bf00      	nop
 801c424:	08029000 	.word	0x08029000
 801c428:	080290b0 	.word	0x080290b0
 801c42c:	08029044 	.word	0x08029044

0801c430 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801c430:	b580      	push	{r7, lr}
 801c432:	b082      	sub	sp, #8
 801c434:	af00      	add	r7, sp, #0
 801c436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d109      	bne.n	801c452 <tcp_close+0x22>
 801c43e:	4b0f      	ldr	r3, [pc, #60]	; (801c47c <tcp_close+0x4c>)
 801c440:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801c444:	490e      	ldr	r1, [pc, #56]	; (801c480 <tcp_close+0x50>)
 801c446:	480f      	ldr	r0, [pc, #60]	; (801c484 <tcp_close+0x54>)
 801c448:	f00b f836 	bl	80274b8 <iprintf>
 801c44c:	f06f 030f 	mvn.w	r3, #15
 801c450:	e00f      	b.n	801c472 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	7d1b      	ldrb	r3, [r3, #20]
 801c456:	2b01      	cmp	r3, #1
 801c458:	d006      	beq.n	801c468 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	8b5b      	ldrh	r3, [r3, #26]
 801c45e:	f043 0310 	orr.w	r3, r3, #16
 801c462:	b29a      	uxth	r2, r3
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801c468:	2101      	movs	r1, #1
 801c46a:	6878      	ldr	r0, [r7, #4]
 801c46c:	f7ff fe94 	bl	801c198 <tcp_close_shutdown>
 801c470:	4603      	mov	r3, r0
}
 801c472:	4618      	mov	r0, r3
 801c474:	3708      	adds	r7, #8
 801c476:	46bd      	mov	sp, r7
 801c478:	bd80      	pop	{r7, pc}
 801c47a:	bf00      	nop
 801c47c:	08029000 	.word	0x08029000
 801c480:	08029110 	.word	0x08029110
 801c484:	08029044 	.word	0x08029044

0801c488 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	b08e      	sub	sp, #56	; 0x38
 801c48c:	af04      	add	r7, sp, #16
 801c48e:	6078      	str	r0, [r7, #4]
 801c490:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	2b00      	cmp	r3, #0
 801c496:	d107      	bne.n	801c4a8 <tcp_abandon+0x20>
 801c498:	4b52      	ldr	r3, [pc, #328]	; (801c5e4 <tcp_abandon+0x15c>)
 801c49a:	f240 223d 	movw	r2, #573	; 0x23d
 801c49e:	4952      	ldr	r1, [pc, #328]	; (801c5e8 <tcp_abandon+0x160>)
 801c4a0:	4852      	ldr	r0, [pc, #328]	; (801c5ec <tcp_abandon+0x164>)
 801c4a2:	f00b f809 	bl	80274b8 <iprintf>
 801c4a6:	e099      	b.n	801c5dc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	7d1b      	ldrb	r3, [r3, #20]
 801c4ac:	2b01      	cmp	r3, #1
 801c4ae:	d106      	bne.n	801c4be <tcp_abandon+0x36>
 801c4b0:	4b4c      	ldr	r3, [pc, #304]	; (801c5e4 <tcp_abandon+0x15c>)
 801c4b2:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c4b6:	494e      	ldr	r1, [pc, #312]	; (801c5f0 <tcp_abandon+0x168>)
 801c4b8:	484c      	ldr	r0, [pc, #304]	; (801c5ec <tcp_abandon+0x164>)
 801c4ba:	f00a fffd 	bl	80274b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	7d1b      	ldrb	r3, [r3, #20]
 801c4c2:	2b0a      	cmp	r3, #10
 801c4c4:	d107      	bne.n	801c4d6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801c4c6:	6879      	ldr	r1, [r7, #4]
 801c4c8:	484a      	ldr	r0, [pc, #296]	; (801c5f4 <tcp_abandon+0x16c>)
 801c4ca:	f000 ffc3 	bl	801d454 <tcp_pcb_remove>
    tcp_free(pcb);
 801c4ce:	6878      	ldr	r0, [r7, #4]
 801c4d0:	f7ff fdb0 	bl	801c034 <tcp_free>
 801c4d4:	e082      	b.n	801c5dc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801c4d6:	2300      	movs	r3, #0
 801c4d8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801c4da:	2300      	movs	r3, #0
 801c4dc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c4e2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c4e8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c4f0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	691b      	ldr	r3, [r3, #16]
 801c4f6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	7d1b      	ldrb	r3, [r3, #20]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d126      	bne.n	801c54e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	8adb      	ldrh	r3, [r3, #22]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d02e      	beq.n	801c566 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c508:	4b3b      	ldr	r3, [pc, #236]	; (801c5f8 <tcp_abandon+0x170>)
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	687a      	ldr	r2, [r7, #4]
 801c50e:	429a      	cmp	r2, r3
 801c510:	d105      	bne.n	801c51e <tcp_abandon+0x96>
 801c512:	4b39      	ldr	r3, [pc, #228]	; (801c5f8 <tcp_abandon+0x170>)
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	68db      	ldr	r3, [r3, #12]
 801c518:	4a37      	ldr	r2, [pc, #220]	; (801c5f8 <tcp_abandon+0x170>)
 801c51a:	6013      	str	r3, [r2, #0]
 801c51c:	e013      	b.n	801c546 <tcp_abandon+0xbe>
 801c51e:	4b36      	ldr	r3, [pc, #216]	; (801c5f8 <tcp_abandon+0x170>)
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	61fb      	str	r3, [r7, #28]
 801c524:	e00c      	b.n	801c540 <tcp_abandon+0xb8>
 801c526:	69fb      	ldr	r3, [r7, #28]
 801c528:	68db      	ldr	r3, [r3, #12]
 801c52a:	687a      	ldr	r2, [r7, #4]
 801c52c:	429a      	cmp	r2, r3
 801c52e:	d104      	bne.n	801c53a <tcp_abandon+0xb2>
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	68da      	ldr	r2, [r3, #12]
 801c534:	69fb      	ldr	r3, [r7, #28]
 801c536:	60da      	str	r2, [r3, #12]
 801c538:	e005      	b.n	801c546 <tcp_abandon+0xbe>
 801c53a:	69fb      	ldr	r3, [r7, #28]
 801c53c:	68db      	ldr	r3, [r3, #12]
 801c53e:	61fb      	str	r3, [r7, #28]
 801c540:	69fb      	ldr	r3, [r7, #28]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d1ef      	bne.n	801c526 <tcp_abandon+0x9e>
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	2200      	movs	r2, #0
 801c54a:	60da      	str	r2, [r3, #12]
 801c54c:	e00b      	b.n	801c566 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801c54e:	683b      	ldr	r3, [r7, #0]
 801c550:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	8adb      	ldrh	r3, [r3, #22]
 801c556:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c558:	6879      	ldr	r1, [r7, #4]
 801c55a:	4828      	ldr	r0, [pc, #160]	; (801c5fc <tcp_abandon+0x174>)
 801c55c:	f000 ff7a 	bl	801d454 <tcp_pcb_remove>
 801c560:	4b27      	ldr	r3, [pc, #156]	; (801c600 <tcp_abandon+0x178>)
 801c562:	2201      	movs	r2, #1
 801c564:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d004      	beq.n	801c578 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c572:	4618      	mov	r0, r3
 801c574:	f000 fd1c 	bl	801cfb0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d004      	beq.n	801c58a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c584:	4618      	mov	r0, r3
 801c586:	f000 fd13 	bl	801cfb0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d004      	beq.n	801c59c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c596:	4618      	mov	r0, r3
 801c598:	f000 fd0a 	bl	801cfb0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d00e      	beq.n	801c5c0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801c5a2:	6879      	ldr	r1, [r7, #4]
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	3304      	adds	r3, #4
 801c5a8:	687a      	ldr	r2, [r7, #4]
 801c5aa:	8b12      	ldrh	r2, [r2, #24]
 801c5ac:	9202      	str	r2, [sp, #8]
 801c5ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c5b0:	9201      	str	r2, [sp, #4]
 801c5b2:	9300      	str	r3, [sp, #0]
 801c5b4:	460b      	mov	r3, r1
 801c5b6:	697a      	ldr	r2, [r7, #20]
 801c5b8:	69b9      	ldr	r1, [r7, #24]
 801c5ba:	6878      	ldr	r0, [r7, #4]
 801c5bc:	f004 fcc2 	bl	8020f44 <tcp_rst>
    }
    last_state = pcb->state;
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	7d1b      	ldrb	r3, [r3, #20]
 801c5c4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801c5c6:	6878      	ldr	r0, [r7, #4]
 801c5c8:	f7ff fd34 	bl	801c034 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c5cc:	693b      	ldr	r3, [r7, #16]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d004      	beq.n	801c5dc <tcp_abandon+0x154>
 801c5d2:	693b      	ldr	r3, [r7, #16]
 801c5d4:	f06f 010c 	mvn.w	r1, #12
 801c5d8:	68f8      	ldr	r0, [r7, #12]
 801c5da:	4798      	blx	r3
  }
}
 801c5dc:	3728      	adds	r7, #40	; 0x28
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	bd80      	pop	{r7, pc}
 801c5e2:	bf00      	nop
 801c5e4:	08029000 	.word	0x08029000
 801c5e8:	08029144 	.word	0x08029144
 801c5ec:	08029044 	.word	0x08029044
 801c5f0:	08029160 	.word	0x08029160
 801c5f4:	2400cf68 	.word	0x2400cf68
 801c5f8:	2400cf5c 	.word	0x2400cf5c
 801c5fc:	2400cf64 	.word	0x2400cf64
 801c600:	2400cf6c 	.word	0x2400cf6c

0801c604 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801c604:	b580      	push	{r7, lr}
 801c606:	b082      	sub	sp, #8
 801c608:	af00      	add	r7, sp, #0
 801c60a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801c60c:	2101      	movs	r1, #1
 801c60e:	6878      	ldr	r0, [r7, #4]
 801c610:	f7ff ff3a 	bl	801c488 <tcp_abandon>
}
 801c614:	bf00      	nop
 801c616:	3708      	adds	r7, #8
 801c618:	46bd      	mov	sp, r7
 801c61a:	bd80      	pop	{r7, pc}

0801c61c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801c61c:	b580      	push	{r7, lr}
 801c61e:	b084      	sub	sp, #16
 801c620:	af00      	add	r7, sp, #0
 801c622:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d106      	bne.n	801c638 <tcp_update_rcv_ann_wnd+0x1c>
 801c62a:	4b25      	ldr	r3, [pc, #148]	; (801c6c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801c62c:	f240 32a6 	movw	r2, #934	; 0x3a6
 801c630:	4924      	ldr	r1, [pc, #144]	; (801c6c4 <tcp_update_rcv_ann_wnd+0xa8>)
 801c632:	4825      	ldr	r0, [pc, #148]	; (801c6c8 <tcp_update_rcv_ann_wnd+0xac>)
 801c634:	f00a ff40 	bl	80274b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c63c:	687a      	ldr	r2, [r7, #4]
 801c63e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801c640:	4413      	add	r3, r2
 801c642:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c648:	687a      	ldr	r2, [r7, #4]
 801c64a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801c64c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801c650:	bf28      	it	cs
 801c652:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801c656:	b292      	uxth	r2, r2
 801c658:	4413      	add	r3, r2
 801c65a:	68fa      	ldr	r2, [r7, #12]
 801c65c:	1ad3      	subs	r3, r2, r3
 801c65e:	2b00      	cmp	r3, #0
 801c660:	db08      	blt.n	801c674 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c66e:	68fa      	ldr	r2, [r7, #12]
 801c670:	1ad3      	subs	r3, r2, r3
 801c672:	e020      	b.n	801c6b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c67c:	1ad3      	subs	r3, r2, r3
 801c67e:	2b00      	cmp	r3, #0
 801c680:	dd03      	ble.n	801c68a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	2200      	movs	r2, #0
 801c686:	855a      	strh	r2, [r3, #42]	; 0x2a
 801c688:	e014      	b.n	801c6b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c692:	1ad3      	subs	r3, r2, r3
 801c694:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801c696:	68bb      	ldr	r3, [r7, #8]
 801c698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c69c:	d306      	bcc.n	801c6ac <tcp_update_rcv_ann_wnd+0x90>
 801c69e:	4b08      	ldr	r3, [pc, #32]	; (801c6c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801c6a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 801c6a4:	4909      	ldr	r1, [pc, #36]	; (801c6cc <tcp_update_rcv_ann_wnd+0xb0>)
 801c6a6:	4808      	ldr	r0, [pc, #32]	; (801c6c8 <tcp_update_rcv_ann_wnd+0xac>)
 801c6a8:	f00a ff06 	bl	80274b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801c6ac:	68bb      	ldr	r3, [r7, #8]
 801c6ae:	b29a      	uxth	r2, r3
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801c6b4:	2300      	movs	r3, #0
  }
}
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	3710      	adds	r7, #16
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	bd80      	pop	{r7, pc}
 801c6be:	bf00      	nop
 801c6c0:	08029000 	.word	0x08029000
 801c6c4:	0802925c 	.word	0x0802925c
 801c6c8:	08029044 	.word	0x08029044
 801c6cc:	08029280 	.word	0x08029280

0801c6d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801c6d0:	b580      	push	{r7, lr}
 801c6d2:	b084      	sub	sp, #16
 801c6d4:	af00      	add	r7, sp, #0
 801c6d6:	6078      	str	r0, [r7, #4]
 801c6d8:	460b      	mov	r3, r1
 801c6da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d107      	bne.n	801c6f2 <tcp_recved+0x22>
 801c6e2:	4b1f      	ldr	r3, [pc, #124]	; (801c760 <tcp_recved+0x90>)
 801c6e4:	f240 32cf 	movw	r2, #975	; 0x3cf
 801c6e8:	491e      	ldr	r1, [pc, #120]	; (801c764 <tcp_recved+0x94>)
 801c6ea:	481f      	ldr	r0, [pc, #124]	; (801c768 <tcp_recved+0x98>)
 801c6ec:	f00a fee4 	bl	80274b8 <iprintf>
 801c6f0:	e032      	b.n	801c758 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	7d1b      	ldrb	r3, [r3, #20]
 801c6f6:	2b01      	cmp	r3, #1
 801c6f8:	d106      	bne.n	801c708 <tcp_recved+0x38>
 801c6fa:	4b19      	ldr	r3, [pc, #100]	; (801c760 <tcp_recved+0x90>)
 801c6fc:	f240 32d2 	movw	r2, #978	; 0x3d2
 801c700:	491a      	ldr	r1, [pc, #104]	; (801c76c <tcp_recved+0x9c>)
 801c702:	4819      	ldr	r0, [pc, #100]	; (801c768 <tcp_recved+0x98>)
 801c704:	f00a fed8 	bl	80274b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c70c:	887b      	ldrh	r3, [r7, #2]
 801c70e:	4413      	add	r3, r2
 801c710:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801c712:	89fb      	ldrh	r3, [r7, #14]
 801c714:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c718:	d804      	bhi.n	801c724 <tcp_recved+0x54>
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c71e:	89fa      	ldrh	r2, [r7, #14]
 801c720:	429a      	cmp	r2, r3
 801c722:	d204      	bcs.n	801c72e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801c72a:	851a      	strh	r2, [r3, #40]	; 0x28
 801c72c:	e002      	b.n	801c734 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	89fa      	ldrh	r2, [r7, #14]
 801c732:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801c734:	6878      	ldr	r0, [r7, #4]
 801c736:	f7ff ff71 	bl	801c61c <tcp_update_rcv_ann_wnd>
 801c73a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801c73c:	68bb      	ldr	r3, [r7, #8]
 801c73e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801c742:	d309      	bcc.n	801c758 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	8b5b      	ldrh	r3, [r3, #26]
 801c748:	f043 0302 	orr.w	r3, r3, #2
 801c74c:	b29a      	uxth	r2, r3
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c752:	6878      	ldr	r0, [r7, #4]
 801c754:	f003 fe42 	bl	80203dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801c758:	3710      	adds	r7, #16
 801c75a:	46bd      	mov	sp, r7
 801c75c:	bd80      	pop	{r7, pc}
 801c75e:	bf00      	nop
 801c760:	08029000 	.word	0x08029000
 801c764:	0802929c 	.word	0x0802929c
 801c768:	08029044 	.word	0x08029044
 801c76c:	080292b4 	.word	0x080292b4

0801c770 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801c770:	b5b0      	push	{r4, r5, r7, lr}
 801c772:	b090      	sub	sp, #64	; 0x40
 801c774:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801c776:	2300      	movs	r3, #0
 801c778:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801c77c:	4b94      	ldr	r3, [pc, #592]	; (801c9d0 <tcp_slowtmr+0x260>)
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	3301      	adds	r3, #1
 801c782:	4a93      	ldr	r2, [pc, #588]	; (801c9d0 <tcp_slowtmr+0x260>)
 801c784:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801c786:	4b93      	ldr	r3, [pc, #588]	; (801c9d4 <tcp_slowtmr+0x264>)
 801c788:	781b      	ldrb	r3, [r3, #0]
 801c78a:	3301      	adds	r3, #1
 801c78c:	b2da      	uxtb	r2, r3
 801c78e:	4b91      	ldr	r3, [pc, #580]	; (801c9d4 <tcp_slowtmr+0x264>)
 801c790:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801c792:	2300      	movs	r3, #0
 801c794:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801c796:	4b90      	ldr	r3, [pc, #576]	; (801c9d8 <tcp_slowtmr+0x268>)
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801c79c:	e29d      	b.n	801ccda <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801c79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7a0:	7d1b      	ldrb	r3, [r3, #20]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d106      	bne.n	801c7b4 <tcp_slowtmr+0x44>
 801c7a6:	4b8d      	ldr	r3, [pc, #564]	; (801c9dc <tcp_slowtmr+0x26c>)
 801c7a8:	f240 42be 	movw	r2, #1214	; 0x4be
 801c7ac:	498c      	ldr	r1, [pc, #560]	; (801c9e0 <tcp_slowtmr+0x270>)
 801c7ae:	488d      	ldr	r0, [pc, #564]	; (801c9e4 <tcp_slowtmr+0x274>)
 801c7b0:	f00a fe82 	bl	80274b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801c7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7b6:	7d1b      	ldrb	r3, [r3, #20]
 801c7b8:	2b01      	cmp	r3, #1
 801c7ba:	d106      	bne.n	801c7ca <tcp_slowtmr+0x5a>
 801c7bc:	4b87      	ldr	r3, [pc, #540]	; (801c9dc <tcp_slowtmr+0x26c>)
 801c7be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801c7c2:	4989      	ldr	r1, [pc, #548]	; (801c9e8 <tcp_slowtmr+0x278>)
 801c7c4:	4887      	ldr	r0, [pc, #540]	; (801c9e4 <tcp_slowtmr+0x274>)
 801c7c6:	f00a fe77 	bl	80274b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7cc:	7d1b      	ldrb	r3, [r3, #20]
 801c7ce:	2b0a      	cmp	r3, #10
 801c7d0:	d106      	bne.n	801c7e0 <tcp_slowtmr+0x70>
 801c7d2:	4b82      	ldr	r3, [pc, #520]	; (801c9dc <tcp_slowtmr+0x26c>)
 801c7d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801c7d8:	4984      	ldr	r1, [pc, #528]	; (801c9ec <tcp_slowtmr+0x27c>)
 801c7da:	4882      	ldr	r0, [pc, #520]	; (801c9e4 <tcp_slowtmr+0x274>)
 801c7dc:	f00a fe6c 	bl	80274b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7e2:	7f9a      	ldrb	r2, [r3, #30]
 801c7e4:	4b7b      	ldr	r3, [pc, #492]	; (801c9d4 <tcp_slowtmr+0x264>)
 801c7e6:	781b      	ldrb	r3, [r3, #0]
 801c7e8:	429a      	cmp	r2, r3
 801c7ea:	d105      	bne.n	801c7f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7f2:	68db      	ldr	r3, [r3, #12]
 801c7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801c7f6:	e270      	b.n	801ccda <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801c7f8:	4b76      	ldr	r3, [pc, #472]	; (801c9d4 <tcp_slowtmr+0x264>)
 801c7fa:	781a      	ldrb	r2, [r3, #0]
 801c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801c800:	2300      	movs	r3, #0
 801c802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801c806:	2300      	movs	r3, #0
 801c808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c80e:	7d1b      	ldrb	r3, [r3, #20]
 801c810:	2b02      	cmp	r3, #2
 801c812:	d10a      	bne.n	801c82a <tcp_slowtmr+0xba>
 801c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c81a:	2b05      	cmp	r3, #5
 801c81c:	d905      	bls.n	801c82a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801c81e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c822:	3301      	adds	r3, #1
 801c824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c828:	e11e      	b.n	801ca68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c82c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c830:	2b0b      	cmp	r3, #11
 801c832:	d905      	bls.n	801c840 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801c834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c838:	3301      	adds	r3, #1
 801c83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c83e:	e113      	b.n	801ca68 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801c840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c842:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c846:	2b00      	cmp	r3, #0
 801c848:	d075      	beq.n	801c936 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d006      	beq.n	801c860 <tcp_slowtmr+0xf0>
 801c852:	4b62      	ldr	r3, [pc, #392]	; (801c9dc <tcp_slowtmr+0x26c>)
 801c854:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801c858:	4965      	ldr	r1, [pc, #404]	; (801c9f0 <tcp_slowtmr+0x280>)
 801c85a:	4862      	ldr	r0, [pc, #392]	; (801c9e4 <tcp_slowtmr+0x274>)
 801c85c:	f00a fe2c 	bl	80274b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c864:	2b00      	cmp	r3, #0
 801c866:	d106      	bne.n	801c876 <tcp_slowtmr+0x106>
 801c868:	4b5c      	ldr	r3, [pc, #368]	; (801c9dc <tcp_slowtmr+0x26c>)
 801c86a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801c86e:	4961      	ldr	r1, [pc, #388]	; (801c9f4 <tcp_slowtmr+0x284>)
 801c870:	485c      	ldr	r0, [pc, #368]	; (801c9e4 <tcp_slowtmr+0x274>)
 801c872:	f00a fe21 	bl	80274b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c878:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c87c:	2b0b      	cmp	r3, #11
 801c87e:	d905      	bls.n	801c88c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801c880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c884:	3301      	adds	r3, #1
 801c886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c88a:	e0ed      	b.n	801ca68 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c88e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c892:	3b01      	subs	r3, #1
 801c894:	4a58      	ldr	r2, [pc, #352]	; (801c9f8 <tcp_slowtmr+0x288>)
 801c896:	5cd3      	ldrb	r3, [r2, r3]
 801c898:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c89c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801c8a0:	7c7a      	ldrb	r2, [r7, #17]
 801c8a2:	429a      	cmp	r2, r3
 801c8a4:	d907      	bls.n	801c8b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801c8ac:	3301      	adds	r3, #1
 801c8ae:	b2da      	uxtb	r2, r3
 801c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801c8bc:	7c7a      	ldrb	r2, [r7, #17]
 801c8be:	429a      	cmp	r2, r3
 801c8c0:	f200 80d2 	bhi.w	801ca68 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801c8c4:	2301      	movs	r3, #1
 801c8c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d108      	bne.n	801c8e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801c8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c8d4:	f004 fc2a 	bl	802112c <tcp_zero_window_probe>
 801c8d8:	4603      	mov	r3, r0
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d014      	beq.n	801c908 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801c8de:	2300      	movs	r3, #0
 801c8e0:	623b      	str	r3, [r7, #32]
 801c8e2:	e011      	b.n	801c908 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c8ea:	4619      	mov	r1, r3
 801c8ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c8ee:	f003 faef 	bl	801fed0 <tcp_split_unsent_seg>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d107      	bne.n	801c908 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801c8f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c8fa:	f003 fd6f 	bl	80203dc <tcp_output>
 801c8fe:	4603      	mov	r3, r0
 801c900:	2b00      	cmp	r3, #0
 801c902:	d101      	bne.n	801c908 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801c904:	2300      	movs	r3, #0
 801c906:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801c908:	6a3b      	ldr	r3, [r7, #32]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	f000 80ac 	beq.w	801ca68 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c912:	2200      	movs	r2, #0
 801c914:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c91a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c91e:	2b06      	cmp	r3, #6
 801c920:	f200 80a2 	bhi.w	801ca68 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c926:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c92a:	3301      	adds	r3, #1
 801c92c:	b2da      	uxtb	r2, r3
 801c92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c930:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801c934:	e098      	b.n	801ca68 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c938:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	db0f      	blt.n	801c960 <tcp_slowtmr+0x1f0>
 801c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c942:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c946:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c94a:	4293      	cmp	r3, r2
 801c94c:	d008      	beq.n	801c960 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801c94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c950:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c954:	b29b      	uxth	r3, r3
 801c956:	3301      	adds	r3, #1
 801c958:	b29b      	uxth	r3, r3
 801c95a:	b21a      	sxth	r2, r3
 801c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c95e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801c960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c962:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c968:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801c96c:	429a      	cmp	r2, r3
 801c96e:	db7b      	blt.n	801ca68 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801c970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c972:	f004 f825 	bl	80209c0 <tcp_rexmit_rto_prepare>
 801c976:	4603      	mov	r3, r0
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d007      	beq.n	801c98c <tcp_slowtmr+0x21c>
 801c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c97e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c980:	2b00      	cmp	r3, #0
 801c982:	d171      	bne.n	801ca68 <tcp_slowtmr+0x2f8>
 801c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d06d      	beq.n	801ca68 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c98e:	7d1b      	ldrb	r3, [r3, #20]
 801c990:	2b02      	cmp	r3, #2
 801c992:	d03a      	beq.n	801ca0a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c99a:	2b0c      	cmp	r3, #12
 801c99c:	bf28      	it	cs
 801c99e:	230c      	movcs	r3, #12
 801c9a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801c9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c9a8:	10db      	asrs	r3, r3, #3
 801c9aa:	b21b      	sxth	r3, r3
 801c9ac:	461a      	mov	r2, r3
 801c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c9b4:	4413      	add	r3, r2
 801c9b6:	7efa      	ldrb	r2, [r7, #27]
 801c9b8:	4910      	ldr	r1, [pc, #64]	; (801c9fc <tcp_slowtmr+0x28c>)
 801c9ba:	5c8a      	ldrb	r2, [r1, r2]
 801c9bc:	4093      	lsls	r3, r2
 801c9be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801c9c0:	697b      	ldr	r3, [r7, #20]
 801c9c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801c9c6:	4293      	cmp	r3, r2
 801c9c8:	dc1a      	bgt.n	801ca00 <tcp_slowtmr+0x290>
 801c9ca:	697b      	ldr	r3, [r7, #20]
 801c9cc:	b21a      	sxth	r2, r3
 801c9ce:	e019      	b.n	801ca04 <tcp_slowtmr+0x294>
 801c9d0:	2400cf58 	.word	0x2400cf58
 801c9d4:	2400cf6e 	.word	0x2400cf6e
 801c9d8:	2400cf64 	.word	0x2400cf64
 801c9dc:	08029000 	.word	0x08029000
 801c9e0:	08029344 	.word	0x08029344
 801c9e4:	08029044 	.word	0x08029044
 801c9e8:	08029370 	.word	0x08029370
 801c9ec:	0802939c 	.word	0x0802939c
 801c9f0:	080293cc 	.word	0x080293cc
 801c9f4:	08029400 	.word	0x08029400
 801c9f8:	0802bb0c 	.word	0x0802bb0c
 801c9fc:	0802bafc 	.word	0x0802bafc
 801ca00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801ca0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ca1c:	4293      	cmp	r3, r2
 801ca1e:	bf28      	it	cs
 801ca20:	4613      	movcs	r3, r2
 801ca22:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801ca24:	8a7b      	ldrh	r3, [r7, #18]
 801ca26:	085b      	lsrs	r3, r3, #1
 801ca28:	b29a      	uxth	r2, r3
 801ca2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801ca30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca3a:	005b      	lsls	r3, r3, #1
 801ca3c:	b29b      	uxth	r3, r3
 801ca3e:	429a      	cmp	r2, r3
 801ca40:	d206      	bcs.n	801ca50 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801ca42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca46:	005b      	lsls	r3, r3, #1
 801ca48:	b29a      	uxth	r2, r3
 801ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca52:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801ca62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ca64:	f004 f81c 	bl	8020aa0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca6a:	7d1b      	ldrb	r3, [r3, #20]
 801ca6c:	2b06      	cmp	r3, #6
 801ca6e:	d111      	bne.n	801ca94 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801ca70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca72:	8b5b      	ldrh	r3, [r3, #26]
 801ca74:	f003 0310 	and.w	r3, r3, #16
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d00b      	beq.n	801ca94 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ca7c:	4b9c      	ldr	r3, [pc, #624]	; (801ccf0 <tcp_slowtmr+0x580>)
 801ca7e:	681a      	ldr	r2, [r3, #0]
 801ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca82:	6a1b      	ldr	r3, [r3, #32]
 801ca84:	1ad3      	subs	r3, r2, r3
 801ca86:	2b28      	cmp	r3, #40	; 0x28
 801ca88:	d904      	bls.n	801ca94 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801ca8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca8e:	3301      	adds	r3, #1
 801ca90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca96:	7a5b      	ldrb	r3, [r3, #9]
 801ca98:	f003 0308 	and.w	r3, r3, #8
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d04a      	beq.n	801cb36 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caa2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801caa4:	2b04      	cmp	r3, #4
 801caa6:	d003      	beq.n	801cab0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caaa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801caac:	2b07      	cmp	r3, #7
 801caae:	d142      	bne.n	801cb36 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cab0:	4b8f      	ldr	r3, [pc, #572]	; (801ccf0 <tcp_slowtmr+0x580>)
 801cab2:	681a      	ldr	r2, [r3, #0]
 801cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cab6:	6a1b      	ldr	r3, [r3, #32]
 801cab8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cabc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801cac0:	4b8c      	ldr	r3, [pc, #560]	; (801ccf4 <tcp_slowtmr+0x584>)
 801cac2:	440b      	add	r3, r1
 801cac4:	498c      	ldr	r1, [pc, #560]	; (801ccf8 <tcp_slowtmr+0x588>)
 801cac6:	fba1 1303 	umull	r1, r3, r1, r3
 801caca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cacc:	429a      	cmp	r2, r3
 801cace:	d90a      	bls.n	801cae6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801cad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cad4:	3301      	adds	r3, #1
 801cad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801cada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cade:	3301      	adds	r3, #1
 801cae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801cae4:	e027      	b.n	801cb36 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cae6:	4b82      	ldr	r3, [pc, #520]	; (801ccf0 <tcp_slowtmr+0x580>)
 801cae8:	681a      	ldr	r2, [r3, #0]
 801caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caec:	6a1b      	ldr	r3, [r3, #32]
 801caee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caf2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caf8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801cafc:	4618      	mov	r0, r3
 801cafe:	4b7f      	ldr	r3, [pc, #508]	; (801ccfc <tcp_slowtmr+0x58c>)
 801cb00:	fb00 f303 	mul.w	r3, r0, r3
 801cb04:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801cb06:	497c      	ldr	r1, [pc, #496]	; (801ccf8 <tcp_slowtmr+0x588>)
 801cb08:	fba1 1303 	umull	r1, r3, r1, r3
 801cb0c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cb0e:	429a      	cmp	r2, r3
 801cb10:	d911      	bls.n	801cb36 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801cb12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb14:	f004 faca 	bl	80210ac <tcp_keepalive>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801cb1e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d107      	bne.n	801cb36 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb28:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801cb2c:	3301      	adds	r3, #1
 801cb2e:	b2da      	uxtb	r2, r3
 801cb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb32:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801cb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d011      	beq.n	801cb62 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801cb3e:	4b6c      	ldr	r3, [pc, #432]	; (801ccf0 <tcp_slowtmr+0x580>)
 801cb40:	681a      	ldr	r2, [r3, #0]
 801cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb44:	6a1b      	ldr	r3, [r3, #32]
 801cb46:	1ad2      	subs	r2, r2, r3
 801cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb4a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801cb4e:	4619      	mov	r1, r3
 801cb50:	460b      	mov	r3, r1
 801cb52:	005b      	lsls	r3, r3, #1
 801cb54:	440b      	add	r3, r1
 801cb56:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801cb58:	429a      	cmp	r2, r3
 801cb5a:	d302      	bcc.n	801cb62 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801cb5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb5e:	f000 fddd 	bl	801d71c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb64:	7d1b      	ldrb	r3, [r3, #20]
 801cb66:	2b03      	cmp	r3, #3
 801cb68:	d10b      	bne.n	801cb82 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cb6a:	4b61      	ldr	r3, [pc, #388]	; (801ccf0 <tcp_slowtmr+0x580>)
 801cb6c:	681a      	ldr	r2, [r3, #0]
 801cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb70:	6a1b      	ldr	r3, [r3, #32]
 801cb72:	1ad3      	subs	r3, r2, r3
 801cb74:	2b28      	cmp	r3, #40	; 0x28
 801cb76:	d904      	bls.n	801cb82 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801cb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb7c:	3301      	adds	r3, #1
 801cb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb84:	7d1b      	ldrb	r3, [r3, #20]
 801cb86:	2b09      	cmp	r3, #9
 801cb88:	d10b      	bne.n	801cba2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801cb8a:	4b59      	ldr	r3, [pc, #356]	; (801ccf0 <tcp_slowtmr+0x580>)
 801cb8c:	681a      	ldr	r2, [r3, #0]
 801cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb90:	6a1b      	ldr	r3, [r3, #32]
 801cb92:	1ad3      	subs	r3, r2, r3
 801cb94:	2bf0      	cmp	r3, #240	; 0xf0
 801cb96:	d904      	bls.n	801cba2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801cb98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb9c:	3301      	adds	r3, #1
 801cb9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801cba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d060      	beq.n	801cc6c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cbb0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801cbb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cbb4:	f000 fbfe 	bl	801d3b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801cbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d010      	beq.n	801cbe0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801cbbe:	4b50      	ldr	r3, [pc, #320]	; (801cd00 <tcp_slowtmr+0x590>)
 801cbc0:	681b      	ldr	r3, [r3, #0]
 801cbc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cbc4:	429a      	cmp	r2, r3
 801cbc6:	d106      	bne.n	801cbd6 <tcp_slowtmr+0x466>
 801cbc8:	4b4e      	ldr	r3, [pc, #312]	; (801cd04 <tcp_slowtmr+0x594>)
 801cbca:	f240 526d 	movw	r2, #1389	; 0x56d
 801cbce:	494e      	ldr	r1, [pc, #312]	; (801cd08 <tcp_slowtmr+0x598>)
 801cbd0:	484e      	ldr	r0, [pc, #312]	; (801cd0c <tcp_slowtmr+0x59c>)
 801cbd2:	f00a fc71 	bl	80274b8 <iprintf>
        prev->next = pcb->next;
 801cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbd8:	68da      	ldr	r2, [r3, #12]
 801cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbdc:	60da      	str	r2, [r3, #12]
 801cbde:	e00f      	b.n	801cc00 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801cbe0:	4b47      	ldr	r3, [pc, #284]	; (801cd00 <tcp_slowtmr+0x590>)
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	d006      	beq.n	801cbf8 <tcp_slowtmr+0x488>
 801cbea:	4b46      	ldr	r3, [pc, #280]	; (801cd04 <tcp_slowtmr+0x594>)
 801cbec:	f240 5271 	movw	r2, #1393	; 0x571
 801cbf0:	4947      	ldr	r1, [pc, #284]	; (801cd10 <tcp_slowtmr+0x5a0>)
 801cbf2:	4846      	ldr	r0, [pc, #280]	; (801cd0c <tcp_slowtmr+0x59c>)
 801cbf4:	f00a fc60 	bl	80274b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 801cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbfa:	68db      	ldr	r3, [r3, #12]
 801cbfc:	4a40      	ldr	r2, [pc, #256]	; (801cd00 <tcp_slowtmr+0x590>)
 801cbfe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801cc00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d013      	beq.n	801cc30 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc0a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801cc10:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc14:	3304      	adds	r3, #4
 801cc16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc18:	8ad2      	ldrh	r2, [r2, #22]
 801cc1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cc1c:	8b09      	ldrh	r1, [r1, #24]
 801cc1e:	9102      	str	r1, [sp, #8]
 801cc20:	9201      	str	r2, [sp, #4]
 801cc22:	9300      	str	r3, [sp, #0]
 801cc24:	462b      	mov	r3, r5
 801cc26:	4622      	mov	r2, r4
 801cc28:	4601      	mov	r1, r0
 801cc2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cc2c:	f004 f98a 	bl	8020f44 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc32:	691b      	ldr	r3, [r3, #16]
 801cc34:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc38:	7d1b      	ldrb	r3, [r3, #20]
 801cc3a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc3e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc42:	68db      	ldr	r3, [r3, #12]
 801cc44:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801cc46:	6838      	ldr	r0, [r7, #0]
 801cc48:	f7ff f9f4 	bl	801c034 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801cc4c:	4b31      	ldr	r3, [pc, #196]	; (801cd14 <tcp_slowtmr+0x5a4>)
 801cc4e:	2200      	movs	r2, #0
 801cc50:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d004      	beq.n	801cc62 <tcp_slowtmr+0x4f2>
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	f06f 010c 	mvn.w	r1, #12
 801cc5e:	68b8      	ldr	r0, [r7, #8]
 801cc60:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801cc62:	4b2c      	ldr	r3, [pc, #176]	; (801cd14 <tcp_slowtmr+0x5a4>)
 801cc64:	781b      	ldrb	r3, [r3, #0]
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d037      	beq.n	801ccda <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801cc6a:	e592      	b.n	801c792 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc72:	68db      	ldr	r3, [r3, #12]
 801cc74:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc78:	7f1b      	ldrb	r3, [r3, #28]
 801cc7a:	3301      	adds	r3, #1
 801cc7c:	b2da      	uxtb	r2, r3
 801cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc80:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801cc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc84:	7f1a      	ldrb	r2, [r3, #28]
 801cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc88:	7f5b      	ldrb	r3, [r3, #29]
 801cc8a:	429a      	cmp	r2, r3
 801cc8c:	d325      	bcc.n	801ccda <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801cc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc90:	2200      	movs	r2, #0
 801cc92:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801cc94:	4b1f      	ldr	r3, [pc, #124]	; (801cd14 <tcp_slowtmr+0x5a4>)
 801cc96:	2200      	movs	r2, #0
 801cc98:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801cc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d00b      	beq.n	801ccbc <tcp_slowtmr+0x54c>
 801cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ccaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ccac:	6912      	ldr	r2, [r2, #16]
 801ccae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ccb0:	4610      	mov	r0, r2
 801ccb2:	4798      	blx	r3
 801ccb4:	4603      	mov	r3, r0
 801ccb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ccba:	e002      	b.n	801ccc2 <tcp_slowtmr+0x552>
 801ccbc:	2300      	movs	r3, #0
 801ccbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801ccc2:	4b14      	ldr	r3, [pc, #80]	; (801cd14 <tcp_slowtmr+0x5a4>)
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d000      	beq.n	801cccc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801ccca:	e562      	b.n	801c792 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801cccc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d102      	bne.n	801ccda <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801ccd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ccd6:	f003 fb81 	bl	80203dc <tcp_output>
  while (pcb != NULL) {
 801ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	f47f ad5e 	bne.w	801c79e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801cce2:	2300      	movs	r3, #0
 801cce4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801cce6:	4b0c      	ldr	r3, [pc, #48]	; (801cd18 <tcp_slowtmr+0x5a8>)
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801ccec:	e069      	b.n	801cdc2 <tcp_slowtmr+0x652>
 801ccee:	bf00      	nop
 801ccf0:	2400cf58 	.word	0x2400cf58
 801ccf4:	000a4cb8 	.word	0x000a4cb8
 801ccf8:	10624dd3 	.word	0x10624dd3
 801ccfc:	000124f8 	.word	0x000124f8
 801cd00:	2400cf64 	.word	0x2400cf64
 801cd04:	08029000 	.word	0x08029000
 801cd08:	08029438 	.word	0x08029438
 801cd0c:	08029044 	.word	0x08029044
 801cd10:	08029464 	.word	0x08029464
 801cd14:	2400cf6c 	.word	0x2400cf6c
 801cd18:	2400cf68 	.word	0x2400cf68
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd1e:	7d1b      	ldrb	r3, [r3, #20]
 801cd20:	2b0a      	cmp	r3, #10
 801cd22:	d006      	beq.n	801cd32 <tcp_slowtmr+0x5c2>
 801cd24:	4b2b      	ldr	r3, [pc, #172]	; (801cdd4 <tcp_slowtmr+0x664>)
 801cd26:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801cd2a:	492b      	ldr	r1, [pc, #172]	; (801cdd8 <tcp_slowtmr+0x668>)
 801cd2c:	482b      	ldr	r0, [pc, #172]	; (801cddc <tcp_slowtmr+0x66c>)
 801cd2e:	f00a fbc3 	bl	80274b8 <iprintf>
    pcb_remove = 0;
 801cd32:	2300      	movs	r3, #0
 801cd34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801cd38:	4b29      	ldr	r3, [pc, #164]	; (801cde0 <tcp_slowtmr+0x670>)
 801cd3a:	681a      	ldr	r2, [r3, #0]
 801cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd3e:	6a1b      	ldr	r3, [r3, #32]
 801cd40:	1ad3      	subs	r3, r2, r3
 801cd42:	2bf0      	cmp	r3, #240	; 0xf0
 801cd44:	d904      	bls.n	801cd50 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801cd46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cd4a:	3301      	adds	r3, #1
 801cd4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801cd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d02f      	beq.n	801cdb8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801cd58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cd5a:	f000 fb2b 	bl	801d3b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d010      	beq.n	801cd86 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801cd64:	4b1f      	ldr	r3, [pc, #124]	; (801cde4 <tcp_slowtmr+0x674>)
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd6a:	429a      	cmp	r2, r3
 801cd6c:	d106      	bne.n	801cd7c <tcp_slowtmr+0x60c>
 801cd6e:	4b19      	ldr	r3, [pc, #100]	; (801cdd4 <tcp_slowtmr+0x664>)
 801cd70:	f240 52af 	movw	r2, #1455	; 0x5af
 801cd74:	491c      	ldr	r1, [pc, #112]	; (801cde8 <tcp_slowtmr+0x678>)
 801cd76:	4819      	ldr	r0, [pc, #100]	; (801cddc <tcp_slowtmr+0x66c>)
 801cd78:	f00a fb9e 	bl	80274b8 <iprintf>
        prev->next = pcb->next;
 801cd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd7e:	68da      	ldr	r2, [r3, #12]
 801cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd82:	60da      	str	r2, [r3, #12]
 801cd84:	e00f      	b.n	801cda6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801cd86:	4b17      	ldr	r3, [pc, #92]	; (801cde4 <tcp_slowtmr+0x674>)
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd8c:	429a      	cmp	r2, r3
 801cd8e:	d006      	beq.n	801cd9e <tcp_slowtmr+0x62e>
 801cd90:	4b10      	ldr	r3, [pc, #64]	; (801cdd4 <tcp_slowtmr+0x664>)
 801cd92:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801cd96:	4915      	ldr	r1, [pc, #84]	; (801cdec <tcp_slowtmr+0x67c>)
 801cd98:	4810      	ldr	r0, [pc, #64]	; (801cddc <tcp_slowtmr+0x66c>)
 801cd9a:	f00a fb8d 	bl	80274b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cda0:	68db      	ldr	r3, [r3, #12]
 801cda2:	4a10      	ldr	r2, [pc, #64]	; (801cde4 <tcp_slowtmr+0x674>)
 801cda4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cda8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdac:	68db      	ldr	r3, [r3, #12]
 801cdae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801cdb0:	69f8      	ldr	r0, [r7, #28]
 801cdb2:	f7ff f93f 	bl	801c034 <tcp_free>
 801cdb6:	e004      	b.n	801cdc2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdbe:	68db      	ldr	r3, [r3, #12]
 801cdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d1a9      	bne.n	801cd1c <tcp_slowtmr+0x5ac>
    }
  }
}
 801cdc8:	bf00      	nop
 801cdca:	bf00      	nop
 801cdcc:	3730      	adds	r7, #48	; 0x30
 801cdce:	46bd      	mov	sp, r7
 801cdd0:	bdb0      	pop	{r4, r5, r7, pc}
 801cdd2:	bf00      	nop
 801cdd4:	08029000 	.word	0x08029000
 801cdd8:	08029490 	.word	0x08029490
 801cddc:	08029044 	.word	0x08029044
 801cde0:	2400cf58 	.word	0x2400cf58
 801cde4:	2400cf68 	.word	0x2400cf68
 801cde8:	080294c0 	.word	0x080294c0
 801cdec:	080294e8 	.word	0x080294e8

0801cdf0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801cdf0:	b580      	push	{r7, lr}
 801cdf2:	b082      	sub	sp, #8
 801cdf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801cdf6:	4b2d      	ldr	r3, [pc, #180]	; (801ceac <tcp_fasttmr+0xbc>)
 801cdf8:	781b      	ldrb	r3, [r3, #0]
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	b2da      	uxtb	r2, r3
 801cdfe:	4b2b      	ldr	r3, [pc, #172]	; (801ceac <tcp_fasttmr+0xbc>)
 801ce00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801ce02:	4b2b      	ldr	r3, [pc, #172]	; (801ceb0 <tcp_fasttmr+0xc0>)
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801ce08:	e048      	b.n	801ce9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	7f9a      	ldrb	r2, [r3, #30]
 801ce0e:	4b27      	ldr	r3, [pc, #156]	; (801ceac <tcp_fasttmr+0xbc>)
 801ce10:	781b      	ldrb	r3, [r3, #0]
 801ce12:	429a      	cmp	r2, r3
 801ce14:	d03f      	beq.n	801ce96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801ce16:	4b25      	ldr	r3, [pc, #148]	; (801ceac <tcp_fasttmr+0xbc>)
 801ce18:	781a      	ldrb	r2, [r3, #0]
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	8b5b      	ldrh	r3, [r3, #26]
 801ce22:	f003 0301 	and.w	r3, r3, #1
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d010      	beq.n	801ce4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	8b5b      	ldrh	r3, [r3, #26]
 801ce2e:	f043 0302 	orr.w	r3, r3, #2
 801ce32:	b29a      	uxth	r2, r3
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801ce38:	6878      	ldr	r0, [r7, #4]
 801ce3a:	f003 facf 	bl	80203dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	8b5b      	ldrh	r3, [r3, #26]
 801ce42:	f023 0303 	bic.w	r3, r3, #3
 801ce46:	b29a      	uxth	r2, r3
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	8b5b      	ldrh	r3, [r3, #26]
 801ce50:	f003 0308 	and.w	r3, r3, #8
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d009      	beq.n	801ce6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	8b5b      	ldrh	r3, [r3, #26]
 801ce5c:	f023 0308 	bic.w	r3, r3, #8
 801ce60:	b29a      	uxth	r2, r3
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801ce66:	6878      	ldr	r0, [r7, #4]
 801ce68:	f7ff fa78 	bl	801c35c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	68db      	ldr	r3, [r3, #12]
 801ce70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d00a      	beq.n	801ce90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801ce7a:	4b0e      	ldr	r3, [pc, #56]	; (801ceb4 <tcp_fasttmr+0xc4>)
 801ce7c:	2200      	movs	r2, #0
 801ce7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801ce80:	6878      	ldr	r0, [r7, #4]
 801ce82:	f000 f819 	bl	801ceb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801ce86:	4b0b      	ldr	r3, [pc, #44]	; (801ceb4 <tcp_fasttmr+0xc4>)
 801ce88:	781b      	ldrb	r3, [r3, #0]
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d000      	beq.n	801ce90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801ce8e:	e7b8      	b.n	801ce02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801ce90:	683b      	ldr	r3, [r7, #0]
 801ce92:	607b      	str	r3, [r7, #4]
 801ce94:	e002      	b.n	801ce9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	68db      	ldr	r3, [r3, #12]
 801ce9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d1b3      	bne.n	801ce0a <tcp_fasttmr+0x1a>
    }
  }
}
 801cea2:	bf00      	nop
 801cea4:	bf00      	nop
 801cea6:	3708      	adds	r7, #8
 801cea8:	46bd      	mov	sp, r7
 801ceaa:	bd80      	pop	{r7, pc}
 801ceac:	2400cf6e 	.word	0x2400cf6e
 801ceb0:	2400cf64 	.word	0x2400cf64
 801ceb4:	2400cf6c 	.word	0x2400cf6c

0801ceb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ceb8:	b590      	push	{r4, r7, lr}
 801ceba:	b085      	sub	sp, #20
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d109      	bne.n	801ceda <tcp_process_refused_data+0x22>
 801cec6:	4b37      	ldr	r3, [pc, #220]	; (801cfa4 <tcp_process_refused_data+0xec>)
 801cec8:	f240 6209 	movw	r2, #1545	; 0x609
 801cecc:	4936      	ldr	r1, [pc, #216]	; (801cfa8 <tcp_process_refused_data+0xf0>)
 801cece:	4837      	ldr	r0, [pc, #220]	; (801cfac <tcp_process_refused_data+0xf4>)
 801ced0:	f00a faf2 	bl	80274b8 <iprintf>
 801ced4:	f06f 030f 	mvn.w	r3, #15
 801ced8:	e060      	b.n	801cf9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cede:	7b5b      	ldrb	r3, [r3, #13]
 801cee0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cee6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2200      	movs	r2, #0
 801ceec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d00b      	beq.n	801cf10 <tcp_process_refused_data+0x58>
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	6918      	ldr	r0, [r3, #16]
 801cf02:	2300      	movs	r3, #0
 801cf04:	68ba      	ldr	r2, [r7, #8]
 801cf06:	6879      	ldr	r1, [r7, #4]
 801cf08:	47a0      	blx	r4
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	73fb      	strb	r3, [r7, #15]
 801cf0e:	e007      	b.n	801cf20 <tcp_process_refused_data+0x68>
 801cf10:	2300      	movs	r3, #0
 801cf12:	68ba      	ldr	r2, [r7, #8]
 801cf14:	6879      	ldr	r1, [r7, #4]
 801cf16:	2000      	movs	r0, #0
 801cf18:	f000 f8a4 	bl	801d064 <tcp_recv_null>
 801cf1c:	4603      	mov	r3, r0
 801cf1e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801cf20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d12a      	bne.n	801cf7e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801cf28:	7bbb      	ldrb	r3, [r7, #14]
 801cf2a:	f003 0320 	and.w	r3, r3, #32
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d033      	beq.n	801cf9a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cf36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801cf3a:	d005      	beq.n	801cf48 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cf40:	3301      	adds	r3, #1
 801cf42:	b29a      	uxth	r2, r3
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d00b      	beq.n	801cf6a <tcp_process_refused_data+0xb2>
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	6918      	ldr	r0, [r3, #16]
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	2200      	movs	r2, #0
 801cf60:	6879      	ldr	r1, [r7, #4]
 801cf62:	47a0      	blx	r4
 801cf64:	4603      	mov	r3, r0
 801cf66:	73fb      	strb	r3, [r7, #15]
 801cf68:	e001      	b.n	801cf6e <tcp_process_refused_data+0xb6>
 801cf6a:	2300      	movs	r3, #0
 801cf6c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801cf6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf72:	f113 0f0d 	cmn.w	r3, #13
 801cf76:	d110      	bne.n	801cf9a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801cf78:	f06f 030c 	mvn.w	r3, #12
 801cf7c:	e00e      	b.n	801cf9c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801cf7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf82:	f113 0f0d 	cmn.w	r3, #13
 801cf86:	d102      	bne.n	801cf8e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801cf88:	f06f 030c 	mvn.w	r3, #12
 801cf8c:	e006      	b.n	801cf9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	68ba      	ldr	r2, [r7, #8]
 801cf92:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801cf94:	f06f 0304 	mvn.w	r3, #4
 801cf98:	e000      	b.n	801cf9c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801cf9a:	2300      	movs	r3, #0
}
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	3714      	adds	r7, #20
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	bd90      	pop	{r4, r7, pc}
 801cfa4:	08029000 	.word	0x08029000
 801cfa8:	08029510 	.word	0x08029510
 801cfac:	08029044 	.word	0x08029044

0801cfb0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b084      	sub	sp, #16
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801cfb8:	e007      	b.n	801cfca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801cfc0:	6878      	ldr	r0, [r7, #4]
 801cfc2:	f000 f80a 	bl	801cfda <tcp_seg_free>
    seg = next;
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d1f4      	bne.n	801cfba <tcp_segs_free+0xa>
  }
}
 801cfd0:	bf00      	nop
 801cfd2:	bf00      	nop
 801cfd4:	3710      	adds	r7, #16
 801cfd6:	46bd      	mov	sp, r7
 801cfd8:	bd80      	pop	{r7, pc}

0801cfda <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801cfda:	b580      	push	{r7, lr}
 801cfdc:	b082      	sub	sp, #8
 801cfde:	af00      	add	r7, sp, #0
 801cfe0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d00c      	beq.n	801d002 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	685b      	ldr	r3, [r3, #4]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d004      	beq.n	801cffa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	685b      	ldr	r3, [r3, #4]
 801cff4:	4618      	mov	r0, r3
 801cff6:	f7fe fd61 	bl	801babc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801cffa:	6879      	ldr	r1, [r7, #4]
 801cffc:	2003      	movs	r0, #3
 801cffe:	f7fd fead 	bl	801ad5c <memp_free>
  }
}
 801d002:	bf00      	nop
 801d004:	3708      	adds	r7, #8
 801d006:	46bd      	mov	sp, r7
 801d008:	bd80      	pop	{r7, pc}
	...

0801d00c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b084      	sub	sp, #16
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d106      	bne.n	801d028 <tcp_seg_copy+0x1c>
 801d01a:	4b0f      	ldr	r3, [pc, #60]	; (801d058 <tcp_seg_copy+0x4c>)
 801d01c:	f240 6282 	movw	r2, #1666	; 0x682
 801d020:	490e      	ldr	r1, [pc, #56]	; (801d05c <tcp_seg_copy+0x50>)
 801d022:	480f      	ldr	r0, [pc, #60]	; (801d060 <tcp_seg_copy+0x54>)
 801d024:	f00a fa48 	bl	80274b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801d028:	2003      	movs	r0, #3
 801d02a:	f7fd fe21 	bl	801ac70 <memp_malloc>
 801d02e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d101      	bne.n	801d03a <tcp_seg_copy+0x2e>
    return NULL;
 801d036:	2300      	movs	r3, #0
 801d038:	e00a      	b.n	801d050 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801d03a:	2210      	movs	r2, #16
 801d03c:	6879      	ldr	r1, [r7, #4]
 801d03e:	68f8      	ldr	r0, [r7, #12]
 801d040:	f00a f914 	bl	802726c <memcpy>
  pbuf_ref(cseg->p);
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	685b      	ldr	r3, [r3, #4]
 801d048:	4618      	mov	r0, r3
 801d04a:	f7fe fddd 	bl	801bc08 <pbuf_ref>
  return cseg;
 801d04e:	68fb      	ldr	r3, [r7, #12]
}
 801d050:	4618      	mov	r0, r3
 801d052:	3710      	adds	r7, #16
 801d054:	46bd      	mov	sp, r7
 801d056:	bd80      	pop	{r7, pc}
 801d058:	08029000 	.word	0x08029000
 801d05c:	08029554 	.word	0x08029554
 801d060:	08029044 	.word	0x08029044

0801d064 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801d064:	b580      	push	{r7, lr}
 801d066:	b084      	sub	sp, #16
 801d068:	af00      	add	r7, sp, #0
 801d06a:	60f8      	str	r0, [r7, #12]
 801d06c:	60b9      	str	r1, [r7, #8]
 801d06e:	607a      	str	r2, [r7, #4]
 801d070:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801d072:	68bb      	ldr	r3, [r7, #8]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d109      	bne.n	801d08c <tcp_recv_null+0x28>
 801d078:	4b12      	ldr	r3, [pc, #72]	; (801d0c4 <tcp_recv_null+0x60>)
 801d07a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801d07e:	4912      	ldr	r1, [pc, #72]	; (801d0c8 <tcp_recv_null+0x64>)
 801d080:	4812      	ldr	r0, [pc, #72]	; (801d0cc <tcp_recv_null+0x68>)
 801d082:	f00a fa19 	bl	80274b8 <iprintf>
 801d086:	f06f 030f 	mvn.w	r3, #15
 801d08a:	e016      	b.n	801d0ba <tcp_recv_null+0x56>

  if (p != NULL) {
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d009      	beq.n	801d0a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	891b      	ldrh	r3, [r3, #8]
 801d096:	4619      	mov	r1, r3
 801d098:	68b8      	ldr	r0, [r7, #8]
 801d09a:	f7ff fb19 	bl	801c6d0 <tcp_recved>
    pbuf_free(p);
 801d09e:	6878      	ldr	r0, [r7, #4]
 801d0a0:	f7fe fd0c 	bl	801babc <pbuf_free>
 801d0a4:	e008      	b.n	801d0b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801d0a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d104      	bne.n	801d0b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801d0ae:	68b8      	ldr	r0, [r7, #8]
 801d0b0:	f7ff f9be 	bl	801c430 <tcp_close>
 801d0b4:	4603      	mov	r3, r0
 801d0b6:	e000      	b.n	801d0ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801d0b8:	2300      	movs	r3, #0
}
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	3710      	adds	r7, #16
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	bd80      	pop	{r7, pc}
 801d0c2:	bf00      	nop
 801d0c4:	08029000 	.word	0x08029000
 801d0c8:	08029570 	.word	0x08029570
 801d0cc:	08029044 	.word	0x08029044

0801d0d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801d0d0:	b580      	push	{r7, lr}
 801d0d2:	b086      	sub	sp, #24
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	4603      	mov	r3, r0
 801d0d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801d0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	db01      	blt.n	801d0e6 <tcp_kill_prio+0x16>
 801d0e2:	79fb      	ldrb	r3, [r7, #7]
 801d0e4:	e000      	b.n	801d0e8 <tcp_kill_prio+0x18>
 801d0e6:	237f      	movs	r3, #127	; 0x7f
 801d0e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801d0ea:	7afb      	ldrb	r3, [r7, #11]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d034      	beq.n	801d15a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801d0f0:	7afb      	ldrb	r3, [r7, #11]
 801d0f2:	3b01      	subs	r3, #1
 801d0f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801d0fa:	2300      	movs	r3, #0
 801d0fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d0fe:	4b19      	ldr	r3, [pc, #100]	; (801d164 <tcp_kill_prio+0x94>)
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	617b      	str	r3, [r7, #20]
 801d104:	e01f      	b.n	801d146 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801d106:	697b      	ldr	r3, [r7, #20]
 801d108:	7d5b      	ldrb	r3, [r3, #21]
 801d10a:	7afa      	ldrb	r2, [r7, #11]
 801d10c:	429a      	cmp	r2, r3
 801d10e:	d80c      	bhi.n	801d12a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801d110:	697b      	ldr	r3, [r7, #20]
 801d112:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801d114:	7afa      	ldrb	r2, [r7, #11]
 801d116:	429a      	cmp	r2, r3
 801d118:	d112      	bne.n	801d140 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801d11a:	4b13      	ldr	r3, [pc, #76]	; (801d168 <tcp_kill_prio+0x98>)
 801d11c:	681a      	ldr	r2, [r3, #0]
 801d11e:	697b      	ldr	r3, [r7, #20]
 801d120:	6a1b      	ldr	r3, [r3, #32]
 801d122:	1ad3      	subs	r3, r2, r3
 801d124:	68fa      	ldr	r2, [r7, #12]
 801d126:	429a      	cmp	r2, r3
 801d128:	d80a      	bhi.n	801d140 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801d12a:	4b0f      	ldr	r3, [pc, #60]	; (801d168 <tcp_kill_prio+0x98>)
 801d12c:	681a      	ldr	r2, [r3, #0]
 801d12e:	697b      	ldr	r3, [r7, #20]
 801d130:	6a1b      	ldr	r3, [r3, #32]
 801d132:	1ad3      	subs	r3, r2, r3
 801d134:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801d136:	697b      	ldr	r3, [r7, #20]
 801d138:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801d13a:	697b      	ldr	r3, [r7, #20]
 801d13c:	7d5b      	ldrb	r3, [r3, #21]
 801d13e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d140:	697b      	ldr	r3, [r7, #20]
 801d142:	68db      	ldr	r3, [r3, #12]
 801d144:	617b      	str	r3, [r7, #20]
 801d146:	697b      	ldr	r3, [r7, #20]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d1dc      	bne.n	801d106 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801d14c:	693b      	ldr	r3, [r7, #16]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d004      	beq.n	801d15c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801d152:	6938      	ldr	r0, [r7, #16]
 801d154:	f7ff fa56 	bl	801c604 <tcp_abort>
 801d158:	e000      	b.n	801d15c <tcp_kill_prio+0x8c>
    return;
 801d15a:	bf00      	nop
  }
}
 801d15c:	3718      	adds	r7, #24
 801d15e:	46bd      	mov	sp, r7
 801d160:	bd80      	pop	{r7, pc}
 801d162:	bf00      	nop
 801d164:	2400cf64 	.word	0x2400cf64
 801d168:	2400cf58 	.word	0x2400cf58

0801d16c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801d16c:	b580      	push	{r7, lr}
 801d16e:	b086      	sub	sp, #24
 801d170:	af00      	add	r7, sp, #0
 801d172:	4603      	mov	r3, r0
 801d174:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801d176:	79fb      	ldrb	r3, [r7, #7]
 801d178:	2b08      	cmp	r3, #8
 801d17a:	d009      	beq.n	801d190 <tcp_kill_state+0x24>
 801d17c:	79fb      	ldrb	r3, [r7, #7]
 801d17e:	2b09      	cmp	r3, #9
 801d180:	d006      	beq.n	801d190 <tcp_kill_state+0x24>
 801d182:	4b1a      	ldr	r3, [pc, #104]	; (801d1ec <tcp_kill_state+0x80>)
 801d184:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801d188:	4919      	ldr	r1, [pc, #100]	; (801d1f0 <tcp_kill_state+0x84>)
 801d18a:	481a      	ldr	r0, [pc, #104]	; (801d1f4 <tcp_kill_state+0x88>)
 801d18c:	f00a f994 	bl	80274b8 <iprintf>

  inactivity = 0;
 801d190:	2300      	movs	r3, #0
 801d192:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801d194:	2300      	movs	r3, #0
 801d196:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d198:	4b17      	ldr	r3, [pc, #92]	; (801d1f8 <tcp_kill_state+0x8c>)
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	617b      	str	r3, [r7, #20]
 801d19e:	e017      	b.n	801d1d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801d1a0:	697b      	ldr	r3, [r7, #20]
 801d1a2:	7d1b      	ldrb	r3, [r3, #20]
 801d1a4:	79fa      	ldrb	r2, [r7, #7]
 801d1a6:	429a      	cmp	r2, r3
 801d1a8:	d10f      	bne.n	801d1ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d1aa:	4b14      	ldr	r3, [pc, #80]	; (801d1fc <tcp_kill_state+0x90>)
 801d1ac:	681a      	ldr	r2, [r3, #0]
 801d1ae:	697b      	ldr	r3, [r7, #20]
 801d1b0:	6a1b      	ldr	r3, [r3, #32]
 801d1b2:	1ad3      	subs	r3, r2, r3
 801d1b4:	68fa      	ldr	r2, [r7, #12]
 801d1b6:	429a      	cmp	r2, r3
 801d1b8:	d807      	bhi.n	801d1ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801d1ba:	4b10      	ldr	r3, [pc, #64]	; (801d1fc <tcp_kill_state+0x90>)
 801d1bc:	681a      	ldr	r2, [r3, #0]
 801d1be:	697b      	ldr	r3, [r7, #20]
 801d1c0:	6a1b      	ldr	r3, [r3, #32]
 801d1c2:	1ad3      	subs	r3, r2, r3
 801d1c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801d1c6:	697b      	ldr	r3, [r7, #20]
 801d1c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d1ca:	697b      	ldr	r3, [r7, #20]
 801d1cc:	68db      	ldr	r3, [r3, #12]
 801d1ce:	617b      	str	r3, [r7, #20]
 801d1d0:	697b      	ldr	r3, [r7, #20]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d1e4      	bne.n	801d1a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801d1d6:	693b      	ldr	r3, [r7, #16]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d003      	beq.n	801d1e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801d1dc:	2100      	movs	r1, #0
 801d1de:	6938      	ldr	r0, [r7, #16]
 801d1e0:	f7ff f952 	bl	801c488 <tcp_abandon>
  }
}
 801d1e4:	bf00      	nop
 801d1e6:	3718      	adds	r7, #24
 801d1e8:	46bd      	mov	sp, r7
 801d1ea:	bd80      	pop	{r7, pc}
 801d1ec:	08029000 	.word	0x08029000
 801d1f0:	0802958c 	.word	0x0802958c
 801d1f4:	08029044 	.word	0x08029044
 801d1f8:	2400cf64 	.word	0x2400cf64
 801d1fc:	2400cf58 	.word	0x2400cf58

0801d200 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801d200:	b580      	push	{r7, lr}
 801d202:	b084      	sub	sp, #16
 801d204:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801d206:	2300      	movs	r3, #0
 801d208:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801d20a:	2300      	movs	r3, #0
 801d20c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d20e:	4b12      	ldr	r3, [pc, #72]	; (801d258 <tcp_kill_timewait+0x58>)
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	60fb      	str	r3, [r7, #12]
 801d214:	e012      	b.n	801d23c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d216:	4b11      	ldr	r3, [pc, #68]	; (801d25c <tcp_kill_timewait+0x5c>)
 801d218:	681a      	ldr	r2, [r3, #0]
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	6a1b      	ldr	r3, [r3, #32]
 801d21e:	1ad3      	subs	r3, r2, r3
 801d220:	687a      	ldr	r2, [r7, #4]
 801d222:	429a      	cmp	r2, r3
 801d224:	d807      	bhi.n	801d236 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801d226:	4b0d      	ldr	r3, [pc, #52]	; (801d25c <tcp_kill_timewait+0x5c>)
 801d228:	681a      	ldr	r2, [r3, #0]
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	6a1b      	ldr	r3, [r3, #32]
 801d22e:	1ad3      	subs	r3, r2, r3
 801d230:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	68db      	ldr	r3, [r3, #12]
 801d23a:	60fb      	str	r3, [r7, #12]
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d1e9      	bne.n	801d216 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801d242:	68bb      	ldr	r3, [r7, #8]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d002      	beq.n	801d24e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801d248:	68b8      	ldr	r0, [r7, #8]
 801d24a:	f7ff f9db 	bl	801c604 <tcp_abort>
  }
}
 801d24e:	bf00      	nop
 801d250:	3710      	adds	r7, #16
 801d252:	46bd      	mov	sp, r7
 801d254:	bd80      	pop	{r7, pc}
 801d256:	bf00      	nop
 801d258:	2400cf68 	.word	0x2400cf68
 801d25c:	2400cf58 	.word	0x2400cf58

0801d260 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b082      	sub	sp, #8
 801d264:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801d266:	4b10      	ldr	r3, [pc, #64]	; (801d2a8 <tcp_handle_closepend+0x48>)
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801d26c:	e014      	b.n	801d298 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	68db      	ldr	r3, [r3, #12]
 801d272:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	8b5b      	ldrh	r3, [r3, #26]
 801d278:	f003 0308 	and.w	r3, r3, #8
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d009      	beq.n	801d294 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	8b5b      	ldrh	r3, [r3, #26]
 801d284:	f023 0308 	bic.w	r3, r3, #8
 801d288:	b29a      	uxth	r2, r3
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801d28e:	6878      	ldr	r0, [r7, #4]
 801d290:	f7ff f864 	bl	801c35c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801d294:	683b      	ldr	r3, [r7, #0]
 801d296:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d1e7      	bne.n	801d26e <tcp_handle_closepend+0xe>
  }
}
 801d29e:	bf00      	nop
 801d2a0:	bf00      	nop
 801d2a2:	3708      	adds	r7, #8
 801d2a4:	46bd      	mov	sp, r7
 801d2a6:	bd80      	pop	{r7, pc}
 801d2a8:	2400cf64 	.word	0x2400cf64

0801d2ac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b084      	sub	sp, #16
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d2b6:	2001      	movs	r0, #1
 801d2b8:	f7fd fcda 	bl	801ac70 <memp_malloc>
 801d2bc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d126      	bne.n	801d312 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801d2c4:	f7ff ffcc 	bl	801d260 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801d2c8:	f7ff ff9a 	bl	801d200 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d2cc:	2001      	movs	r0, #1
 801d2ce:	f7fd fccf 	bl	801ac70 <memp_malloc>
 801d2d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d11b      	bne.n	801d312 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801d2da:	2009      	movs	r0, #9
 801d2dc:	f7ff ff46 	bl	801d16c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d2e0:	2001      	movs	r0, #1
 801d2e2:	f7fd fcc5 	bl	801ac70 <memp_malloc>
 801d2e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	d111      	bne.n	801d312 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801d2ee:	2008      	movs	r0, #8
 801d2f0:	f7ff ff3c 	bl	801d16c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d2f4:	2001      	movs	r0, #1
 801d2f6:	f7fd fcbb 	bl	801ac70 <memp_malloc>
 801d2fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d107      	bne.n	801d312 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801d302:	79fb      	ldrb	r3, [r7, #7]
 801d304:	4618      	mov	r0, r3
 801d306:	f7ff fee3 	bl	801d0d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d30a:	2001      	movs	r0, #1
 801d30c:	f7fd fcb0 	bl	801ac70 <memp_malloc>
 801d310:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	2b00      	cmp	r3, #0
 801d316:	d03f      	beq.n	801d398 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801d318:	229c      	movs	r2, #156	; 0x9c
 801d31a:	2100      	movs	r1, #0
 801d31c:	68f8      	ldr	r0, [r7, #12]
 801d31e:	f009 ffcd 	bl	80272bc <memset>
    pcb->prio = prio;
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	79fa      	ldrb	r2, [r7, #7]
 801d326:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801d32e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801d338:	855a      	strh	r2, [r3, #42]	; 0x2a
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	22ff      	movs	r2, #255	; 0xff
 801d346:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d34e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801d350:	68fb      	ldr	r3, [r7, #12]
 801d352:	2206      	movs	r2, #6
 801d354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	2206      	movs	r2, #6
 801d35c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d364:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	2201      	movs	r2, #1
 801d36a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801d36e:	4b0d      	ldr	r3, [pc, #52]	; (801d3a4 <tcp_alloc+0xf8>)
 801d370:	681a      	ldr	r2, [r3, #0]
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801d376:	4b0c      	ldr	r3, [pc, #48]	; (801d3a8 <tcp_alloc+0xfc>)
 801d378:	781a      	ldrb	r2, [r3, #0]
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801d384:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	4a08      	ldr	r2, [pc, #32]	; (801d3ac <tcp_alloc+0x100>)
 801d38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	4a07      	ldr	r2, [pc, #28]	; (801d3b0 <tcp_alloc+0x104>)
 801d394:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801d398:	68fb      	ldr	r3, [r7, #12]
}
 801d39a:	4618      	mov	r0, r3
 801d39c:	3710      	adds	r7, #16
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	bd80      	pop	{r7, pc}
 801d3a2:	bf00      	nop
 801d3a4:	2400cf58 	.word	0x2400cf58
 801d3a8:	2400cf6e 	.word	0x2400cf6e
 801d3ac:	0801d065 	.word	0x0801d065
 801d3b0:	006ddd00 	.word	0x006ddd00

0801d3b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801d3b4:	b580      	push	{r7, lr}
 801d3b6:	b082      	sub	sp, #8
 801d3b8:	af00      	add	r7, sp, #0
 801d3ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d107      	bne.n	801d3d2 <tcp_pcb_purge+0x1e>
 801d3c2:	4b21      	ldr	r3, [pc, #132]	; (801d448 <tcp_pcb_purge+0x94>)
 801d3c4:	f640 0251 	movw	r2, #2129	; 0x851
 801d3c8:	4920      	ldr	r1, [pc, #128]	; (801d44c <tcp_pcb_purge+0x98>)
 801d3ca:	4821      	ldr	r0, [pc, #132]	; (801d450 <tcp_pcb_purge+0x9c>)
 801d3cc:	f00a f874 	bl	80274b8 <iprintf>
 801d3d0:	e037      	b.n	801d442 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	7d1b      	ldrb	r3, [r3, #20]
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	d033      	beq.n	801d442 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801d3de:	2b0a      	cmp	r3, #10
 801d3e0:	d02f      	beq.n	801d442 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801d3e6:	2b01      	cmp	r3, #1
 801d3e8:	d02b      	beq.n	801d442 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d007      	beq.n	801d402 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d3f6:	4618      	mov	r0, r3
 801d3f8:	f7fe fb60 	bl	801babc <pbuf_free>
      pcb->refused_data = NULL;
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	2200      	movs	r2, #0
 801d400:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d406:	2b00      	cmp	r3, #0
 801d408:	d002      	beq.n	801d410 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	f000 f986 	bl	801d71c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d416:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d41c:	4618      	mov	r0, r3
 801d41e:	f7ff fdc7 	bl	801cfb0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d426:	4618      	mov	r0, r3
 801d428:	f7ff fdc2 	bl	801cfb0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	2200      	movs	r2, #0
 801d430:	66da      	str	r2, [r3, #108]	; 0x6c
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	2200      	movs	r2, #0
 801d43e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801d442:	3708      	adds	r7, #8
 801d444:	46bd      	mov	sp, r7
 801d446:	bd80      	pop	{r7, pc}
 801d448:	08029000 	.word	0x08029000
 801d44c:	0802964c 	.word	0x0802964c
 801d450:	08029044 	.word	0x08029044

0801d454 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801d454:	b580      	push	{r7, lr}
 801d456:	b084      	sub	sp, #16
 801d458:	af00      	add	r7, sp, #0
 801d45a:	6078      	str	r0, [r7, #4]
 801d45c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d45e:	683b      	ldr	r3, [r7, #0]
 801d460:	2b00      	cmp	r3, #0
 801d462:	d106      	bne.n	801d472 <tcp_pcb_remove+0x1e>
 801d464:	4b3e      	ldr	r3, [pc, #248]	; (801d560 <tcp_pcb_remove+0x10c>)
 801d466:	f640 0283 	movw	r2, #2179	; 0x883
 801d46a:	493e      	ldr	r1, [pc, #248]	; (801d564 <tcp_pcb_remove+0x110>)
 801d46c:	483e      	ldr	r0, [pc, #248]	; (801d568 <tcp_pcb_remove+0x114>)
 801d46e:	f00a f823 	bl	80274b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d106      	bne.n	801d486 <tcp_pcb_remove+0x32>
 801d478:	4b39      	ldr	r3, [pc, #228]	; (801d560 <tcp_pcb_remove+0x10c>)
 801d47a:	f640 0284 	movw	r2, #2180	; 0x884
 801d47e:	493b      	ldr	r1, [pc, #236]	; (801d56c <tcp_pcb_remove+0x118>)
 801d480:	4839      	ldr	r0, [pc, #228]	; (801d568 <tcp_pcb_remove+0x114>)
 801d482:	f00a f819 	bl	80274b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	683a      	ldr	r2, [r7, #0]
 801d48c:	429a      	cmp	r2, r3
 801d48e:	d105      	bne.n	801d49c <tcp_pcb_remove+0x48>
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	68da      	ldr	r2, [r3, #12]
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	601a      	str	r2, [r3, #0]
 801d49a:	e013      	b.n	801d4c4 <tcp_pcb_remove+0x70>
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	60fb      	str	r3, [r7, #12]
 801d4a2:	e00c      	b.n	801d4be <tcp_pcb_remove+0x6a>
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	68db      	ldr	r3, [r3, #12]
 801d4a8:	683a      	ldr	r2, [r7, #0]
 801d4aa:	429a      	cmp	r2, r3
 801d4ac:	d104      	bne.n	801d4b8 <tcp_pcb_remove+0x64>
 801d4ae:	683b      	ldr	r3, [r7, #0]
 801d4b0:	68da      	ldr	r2, [r3, #12]
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	60da      	str	r2, [r3, #12]
 801d4b6:	e005      	b.n	801d4c4 <tcp_pcb_remove+0x70>
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	68db      	ldr	r3, [r3, #12]
 801d4bc:	60fb      	str	r3, [r7, #12]
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d1ef      	bne.n	801d4a4 <tcp_pcb_remove+0x50>
 801d4c4:	683b      	ldr	r3, [r7, #0]
 801d4c6:	2200      	movs	r2, #0
 801d4c8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801d4ca:	6838      	ldr	r0, [r7, #0]
 801d4cc:	f7ff ff72 	bl	801d3b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801d4d0:	683b      	ldr	r3, [r7, #0]
 801d4d2:	7d1b      	ldrb	r3, [r3, #20]
 801d4d4:	2b0a      	cmp	r3, #10
 801d4d6:	d013      	beq.n	801d500 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801d4d8:	683b      	ldr	r3, [r7, #0]
 801d4da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801d4dc:	2b01      	cmp	r3, #1
 801d4de:	d00f      	beq.n	801d500 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801d4e0:	683b      	ldr	r3, [r7, #0]
 801d4e2:	8b5b      	ldrh	r3, [r3, #26]
 801d4e4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d009      	beq.n	801d500 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801d4ec:	683b      	ldr	r3, [r7, #0]
 801d4ee:	8b5b      	ldrh	r3, [r3, #26]
 801d4f0:	f043 0302 	orr.w	r3, r3, #2
 801d4f4:	b29a      	uxth	r2, r3
 801d4f6:	683b      	ldr	r3, [r7, #0]
 801d4f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d4fa:	6838      	ldr	r0, [r7, #0]
 801d4fc:	f002 ff6e 	bl	80203dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801d500:	683b      	ldr	r3, [r7, #0]
 801d502:	7d1b      	ldrb	r3, [r3, #20]
 801d504:	2b01      	cmp	r3, #1
 801d506:	d020      	beq.n	801d54a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d508:	683b      	ldr	r3, [r7, #0]
 801d50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d006      	beq.n	801d51e <tcp_pcb_remove+0xca>
 801d510:	4b13      	ldr	r3, [pc, #76]	; (801d560 <tcp_pcb_remove+0x10c>)
 801d512:	f640 0293 	movw	r2, #2195	; 0x893
 801d516:	4916      	ldr	r1, [pc, #88]	; (801d570 <tcp_pcb_remove+0x11c>)
 801d518:	4813      	ldr	r0, [pc, #76]	; (801d568 <tcp_pcb_remove+0x114>)
 801d51a:	f009 ffcd 	bl	80274b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801d51e:	683b      	ldr	r3, [r7, #0]
 801d520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d522:	2b00      	cmp	r3, #0
 801d524:	d006      	beq.n	801d534 <tcp_pcb_remove+0xe0>
 801d526:	4b0e      	ldr	r3, [pc, #56]	; (801d560 <tcp_pcb_remove+0x10c>)
 801d528:	f640 0294 	movw	r2, #2196	; 0x894
 801d52c:	4911      	ldr	r1, [pc, #68]	; (801d574 <tcp_pcb_remove+0x120>)
 801d52e:	480e      	ldr	r0, [pc, #56]	; (801d568 <tcp_pcb_remove+0x114>)
 801d530:	f009 ffc2 	bl	80274b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801d534:	683b      	ldr	r3, [r7, #0]
 801d536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d006      	beq.n	801d54a <tcp_pcb_remove+0xf6>
 801d53c:	4b08      	ldr	r3, [pc, #32]	; (801d560 <tcp_pcb_remove+0x10c>)
 801d53e:	f640 0296 	movw	r2, #2198	; 0x896
 801d542:	490d      	ldr	r1, [pc, #52]	; (801d578 <tcp_pcb_remove+0x124>)
 801d544:	4808      	ldr	r0, [pc, #32]	; (801d568 <tcp_pcb_remove+0x114>)
 801d546:	f009 ffb7 	bl	80274b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801d54a:	683b      	ldr	r3, [r7, #0]
 801d54c:	2200      	movs	r2, #0
 801d54e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801d550:	683b      	ldr	r3, [r7, #0]
 801d552:	2200      	movs	r2, #0
 801d554:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801d556:	bf00      	nop
 801d558:	3710      	adds	r7, #16
 801d55a:	46bd      	mov	sp, r7
 801d55c:	bd80      	pop	{r7, pc}
 801d55e:	bf00      	nop
 801d560:	08029000 	.word	0x08029000
 801d564:	08029668 	.word	0x08029668
 801d568:	08029044 	.word	0x08029044
 801d56c:	08029684 	.word	0x08029684
 801d570:	080296a4 	.word	0x080296a4
 801d574:	080296bc 	.word	0x080296bc
 801d578:	080296d8 	.word	0x080296d8

0801d57c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801d57c:	b580      	push	{r7, lr}
 801d57e:	b082      	sub	sp, #8
 801d580:	af00      	add	r7, sp, #0
 801d582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d106      	bne.n	801d598 <tcp_next_iss+0x1c>
 801d58a:	4b0a      	ldr	r3, [pc, #40]	; (801d5b4 <tcp_next_iss+0x38>)
 801d58c:	f640 02af 	movw	r2, #2223	; 0x8af
 801d590:	4909      	ldr	r1, [pc, #36]	; (801d5b8 <tcp_next_iss+0x3c>)
 801d592:	480a      	ldr	r0, [pc, #40]	; (801d5bc <tcp_next_iss+0x40>)
 801d594:	f009 ff90 	bl	80274b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801d598:	4b09      	ldr	r3, [pc, #36]	; (801d5c0 <tcp_next_iss+0x44>)
 801d59a:	681a      	ldr	r2, [r3, #0]
 801d59c:	4b09      	ldr	r3, [pc, #36]	; (801d5c4 <tcp_next_iss+0x48>)
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	4413      	add	r3, r2
 801d5a2:	4a07      	ldr	r2, [pc, #28]	; (801d5c0 <tcp_next_iss+0x44>)
 801d5a4:	6013      	str	r3, [r2, #0]
  return iss;
 801d5a6:	4b06      	ldr	r3, [pc, #24]	; (801d5c0 <tcp_next_iss+0x44>)
 801d5a8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	3708      	adds	r7, #8
 801d5ae:	46bd      	mov	sp, r7
 801d5b0:	bd80      	pop	{r7, pc}
 801d5b2:	bf00      	nop
 801d5b4:	08029000 	.word	0x08029000
 801d5b8:	080296f0 	.word	0x080296f0
 801d5bc:	08029044 	.word	0x08029044
 801d5c0:	2400045c 	.word	0x2400045c
 801d5c4:	2400cf58 	.word	0x2400cf58

0801d5c8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801d5c8:	b580      	push	{r7, lr}
 801d5ca:	b086      	sub	sp, #24
 801d5cc:	af00      	add	r7, sp, #0
 801d5ce:	4603      	mov	r3, r0
 801d5d0:	60b9      	str	r1, [r7, #8]
 801d5d2:	607a      	str	r2, [r7, #4]
 801d5d4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d106      	bne.n	801d5ea <tcp_eff_send_mss_netif+0x22>
 801d5dc:	4b14      	ldr	r3, [pc, #80]	; (801d630 <tcp_eff_send_mss_netif+0x68>)
 801d5de:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801d5e2:	4914      	ldr	r1, [pc, #80]	; (801d634 <tcp_eff_send_mss_netif+0x6c>)
 801d5e4:	4814      	ldr	r0, [pc, #80]	; (801d638 <tcp_eff_send_mss_netif+0x70>)
 801d5e6:	f009 ff67 	bl	80274b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801d5ea:	68bb      	ldr	r3, [r7, #8]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d101      	bne.n	801d5f4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801d5f0:	89fb      	ldrh	r3, [r7, #14]
 801d5f2:	e019      	b.n	801d628 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801d5f4:	68bb      	ldr	r3, [r7, #8]
 801d5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d5f8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801d5fa:	8afb      	ldrh	r3, [r7, #22]
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d012      	beq.n	801d626 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801d600:	2328      	movs	r3, #40	; 0x28
 801d602:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801d604:	8afa      	ldrh	r2, [r7, #22]
 801d606:	8abb      	ldrh	r3, [r7, #20]
 801d608:	429a      	cmp	r2, r3
 801d60a:	d904      	bls.n	801d616 <tcp_eff_send_mss_netif+0x4e>
 801d60c:	8afa      	ldrh	r2, [r7, #22]
 801d60e:	8abb      	ldrh	r3, [r7, #20]
 801d610:	1ad3      	subs	r3, r2, r3
 801d612:	b29b      	uxth	r3, r3
 801d614:	e000      	b.n	801d618 <tcp_eff_send_mss_netif+0x50>
 801d616:	2300      	movs	r3, #0
 801d618:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801d61a:	8a7a      	ldrh	r2, [r7, #18]
 801d61c:	89fb      	ldrh	r3, [r7, #14]
 801d61e:	4293      	cmp	r3, r2
 801d620:	bf28      	it	cs
 801d622:	4613      	movcs	r3, r2
 801d624:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801d626:	89fb      	ldrh	r3, [r7, #14]
}
 801d628:	4618      	mov	r0, r3
 801d62a:	3718      	adds	r7, #24
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}
 801d630:	08029000 	.word	0x08029000
 801d634:	0802970c 	.word	0x0802970c
 801d638:	08029044 	.word	0x08029044

0801d63c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801d63c:	b580      	push	{r7, lr}
 801d63e:	b084      	sub	sp, #16
 801d640:	af00      	add	r7, sp, #0
 801d642:	6078      	str	r0, [r7, #4]
 801d644:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801d646:	683b      	ldr	r3, [r7, #0]
 801d648:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d119      	bne.n	801d684 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801d650:	4b10      	ldr	r3, [pc, #64]	; (801d694 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801d652:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801d656:	4910      	ldr	r1, [pc, #64]	; (801d698 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801d658:	4810      	ldr	r0, [pc, #64]	; (801d69c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801d65a:	f009 ff2d 	bl	80274b8 <iprintf>

  while (pcb != NULL) {
 801d65e:	e011      	b.n	801d684 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	681a      	ldr	r2, [r3, #0]
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	429a      	cmp	r2, r3
 801d66a:	d108      	bne.n	801d67e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	68db      	ldr	r3, [r3, #12]
 801d670:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801d672:	68f8      	ldr	r0, [r7, #12]
 801d674:	f7fe ffc6 	bl	801c604 <tcp_abort>
      pcb = next;
 801d678:	68bb      	ldr	r3, [r7, #8]
 801d67a:	60fb      	str	r3, [r7, #12]
 801d67c:	e002      	b.n	801d684 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	68db      	ldr	r3, [r3, #12]
 801d682:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	2b00      	cmp	r3, #0
 801d688:	d1ea      	bne.n	801d660 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801d68a:	bf00      	nop
 801d68c:	bf00      	nop
 801d68e:	3710      	adds	r7, #16
 801d690:	46bd      	mov	sp, r7
 801d692:	bd80      	pop	{r7, pc}
 801d694:	08029000 	.word	0x08029000
 801d698:	08029734 	.word	0x08029734
 801d69c:	08029044 	.word	0x08029044

0801d6a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	b084      	sub	sp, #16
 801d6a4:	af00      	add	r7, sp, #0
 801d6a6:	6078      	str	r0, [r7, #4]
 801d6a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	2b00      	cmp	r3, #0
 801d6ae:	d02a      	beq.n	801d706 <tcp_netif_ip_addr_changed+0x66>
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d026      	beq.n	801d706 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801d6b8:	4b15      	ldr	r3, [pc, #84]	; (801d710 <tcp_netif_ip_addr_changed+0x70>)
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	4619      	mov	r1, r3
 801d6be:	6878      	ldr	r0, [r7, #4]
 801d6c0:	f7ff ffbc 	bl	801d63c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801d6c4:	4b13      	ldr	r3, [pc, #76]	; (801d714 <tcp_netif_ip_addr_changed+0x74>)
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	4619      	mov	r1, r3
 801d6ca:	6878      	ldr	r0, [r7, #4]
 801d6cc:	f7ff ffb6 	bl	801d63c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801d6d0:	683b      	ldr	r3, [r7, #0]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d017      	beq.n	801d706 <tcp_netif_ip_addr_changed+0x66>
 801d6d6:	683b      	ldr	r3, [r7, #0]
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d013      	beq.n	801d706 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d6de:	4b0e      	ldr	r3, [pc, #56]	; (801d718 <tcp_netif_ip_addr_changed+0x78>)
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	60fb      	str	r3, [r7, #12]
 801d6e4:	e00c      	b.n	801d700 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	681a      	ldr	r2, [r3, #0]
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	429a      	cmp	r2, r3
 801d6f0:	d103      	bne.n	801d6fa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801d6f2:	683b      	ldr	r3, [r7, #0]
 801d6f4:	681a      	ldr	r2, [r3, #0]
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	68db      	ldr	r3, [r3, #12]
 801d6fe:	60fb      	str	r3, [r7, #12]
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	2b00      	cmp	r3, #0
 801d704:	d1ef      	bne.n	801d6e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801d706:	bf00      	nop
 801d708:	3710      	adds	r7, #16
 801d70a:	46bd      	mov	sp, r7
 801d70c:	bd80      	pop	{r7, pc}
 801d70e:	bf00      	nop
 801d710:	2400cf64 	.word	0x2400cf64
 801d714:	2400cf5c 	.word	0x2400cf5c
 801d718:	2400cf60 	.word	0x2400cf60

0801d71c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b082      	sub	sp, #8
 801d720:	af00      	add	r7, sp, #0
 801d722:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d007      	beq.n	801d73c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d730:	4618      	mov	r0, r3
 801d732:	f7ff fc3d 	bl	801cfb0 <tcp_segs_free>
    pcb->ooseq = NULL;
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	2200      	movs	r2, #0
 801d73a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801d73c:	bf00      	nop
 801d73e:	3708      	adds	r7, #8
 801d740:	46bd      	mov	sp, r7
 801d742:	bd80      	pop	{r7, pc}

0801d744 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801d744:	b590      	push	{r4, r7, lr}
 801d746:	b08d      	sub	sp, #52	; 0x34
 801d748:	af04      	add	r7, sp, #16
 801d74a:	6078      	str	r0, [r7, #4]
 801d74c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	2b00      	cmp	r3, #0
 801d752:	d105      	bne.n	801d760 <tcp_input+0x1c>
 801d754:	4b9b      	ldr	r3, [pc, #620]	; (801d9c4 <tcp_input+0x280>)
 801d756:	2283      	movs	r2, #131	; 0x83
 801d758:	499b      	ldr	r1, [pc, #620]	; (801d9c8 <tcp_input+0x284>)
 801d75a:	489c      	ldr	r0, [pc, #624]	; (801d9cc <tcp_input+0x288>)
 801d75c:	f009 feac 	bl	80274b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	685b      	ldr	r3, [r3, #4]
 801d764:	4a9a      	ldr	r2, [pc, #616]	; (801d9d0 <tcp_input+0x28c>)
 801d766:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	895b      	ldrh	r3, [r3, #10]
 801d76c:	2b13      	cmp	r3, #19
 801d76e:	f240 83d1 	bls.w	801df14 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d772:	4b98      	ldr	r3, [pc, #608]	; (801d9d4 <tcp_input+0x290>)
 801d774:	695b      	ldr	r3, [r3, #20]
 801d776:	4a97      	ldr	r2, [pc, #604]	; (801d9d4 <tcp_input+0x290>)
 801d778:	6812      	ldr	r2, [r2, #0]
 801d77a:	4611      	mov	r1, r2
 801d77c:	4618      	mov	r0, r3
 801d77e:	f007 fe25 	bl	80253cc <ip4_addr_isbroadcast_u32>
 801d782:	4603      	mov	r3, r0
 801d784:	2b00      	cmp	r3, #0
 801d786:	f040 83c7 	bne.w	801df18 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801d78a:	4b92      	ldr	r3, [pc, #584]	; (801d9d4 <tcp_input+0x290>)
 801d78c:	695b      	ldr	r3, [r3, #20]
 801d78e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d792:	2be0      	cmp	r3, #224	; 0xe0
 801d794:	f000 83c0 	beq.w	801df18 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801d798:	4b8d      	ldr	r3, [pc, #564]	; (801d9d0 <tcp_input+0x28c>)
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	899b      	ldrh	r3, [r3, #12]
 801d79e:	b29b      	uxth	r3, r3
 801d7a0:	4618      	mov	r0, r3
 801d7a2:	f7fc fcd5 	bl	801a150 <lwip_htons>
 801d7a6:	4603      	mov	r3, r0
 801d7a8:	0b1b      	lsrs	r3, r3, #12
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	b2db      	uxtb	r3, r3
 801d7ae:	009b      	lsls	r3, r3, #2
 801d7b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801d7b2:	7cbb      	ldrb	r3, [r7, #18]
 801d7b4:	2b13      	cmp	r3, #19
 801d7b6:	f240 83b1 	bls.w	801df1c <tcp_input+0x7d8>
 801d7ba:	7cbb      	ldrb	r3, [r7, #18]
 801d7bc:	b29a      	uxth	r2, r3
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	891b      	ldrh	r3, [r3, #8]
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	f200 83aa 	bhi.w	801df1c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d7c8:	7cbb      	ldrb	r3, [r7, #18]
 801d7ca:	b29b      	uxth	r3, r3
 801d7cc:	3b14      	subs	r3, #20
 801d7ce:	b29a      	uxth	r2, r3
 801d7d0:	4b81      	ldr	r3, [pc, #516]	; (801d9d8 <tcp_input+0x294>)
 801d7d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801d7d4:	4b81      	ldr	r3, [pc, #516]	; (801d9dc <tcp_input+0x298>)
 801d7d6:	2200      	movs	r2, #0
 801d7d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	895a      	ldrh	r2, [r3, #10]
 801d7de:	7cbb      	ldrb	r3, [r7, #18]
 801d7e0:	b29b      	uxth	r3, r3
 801d7e2:	429a      	cmp	r2, r3
 801d7e4:	d309      	bcc.n	801d7fa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801d7e6:	4b7c      	ldr	r3, [pc, #496]	; (801d9d8 <tcp_input+0x294>)
 801d7e8:	881a      	ldrh	r2, [r3, #0]
 801d7ea:	4b7d      	ldr	r3, [pc, #500]	; (801d9e0 <tcp_input+0x29c>)
 801d7ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801d7ee:	7cbb      	ldrb	r3, [r7, #18]
 801d7f0:	4619      	mov	r1, r3
 801d7f2:	6878      	ldr	r0, [r7, #4]
 801d7f4:	f7fe f8dc 	bl	801b9b0 <pbuf_remove_header>
 801d7f8:	e04e      	b.n	801d898 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d105      	bne.n	801d80e <tcp_input+0xca>
 801d802:	4b70      	ldr	r3, [pc, #448]	; (801d9c4 <tcp_input+0x280>)
 801d804:	22c2      	movs	r2, #194	; 0xc2
 801d806:	4977      	ldr	r1, [pc, #476]	; (801d9e4 <tcp_input+0x2a0>)
 801d808:	4870      	ldr	r0, [pc, #448]	; (801d9cc <tcp_input+0x288>)
 801d80a:	f009 fe55 	bl	80274b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801d80e:	2114      	movs	r1, #20
 801d810:	6878      	ldr	r0, [r7, #4]
 801d812:	f7fe f8cd 	bl	801b9b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	895a      	ldrh	r2, [r3, #10]
 801d81a:	4b71      	ldr	r3, [pc, #452]	; (801d9e0 <tcp_input+0x29c>)
 801d81c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d81e:	4b6e      	ldr	r3, [pc, #440]	; (801d9d8 <tcp_input+0x294>)
 801d820:	881a      	ldrh	r2, [r3, #0]
 801d822:	4b6f      	ldr	r3, [pc, #444]	; (801d9e0 <tcp_input+0x29c>)
 801d824:	881b      	ldrh	r3, [r3, #0]
 801d826:	1ad3      	subs	r3, r2, r3
 801d828:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801d82a:	4b6d      	ldr	r3, [pc, #436]	; (801d9e0 <tcp_input+0x29c>)
 801d82c:	881b      	ldrh	r3, [r3, #0]
 801d82e:	4619      	mov	r1, r3
 801d830:	6878      	ldr	r0, [r7, #4]
 801d832:	f7fe f8bd 	bl	801b9b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	895b      	ldrh	r3, [r3, #10]
 801d83c:	8a3a      	ldrh	r2, [r7, #16]
 801d83e:	429a      	cmp	r2, r3
 801d840:	f200 836e 	bhi.w	801df20 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	685b      	ldr	r3, [r3, #4]
 801d84a:	4a64      	ldr	r2, [pc, #400]	; (801d9dc <tcp_input+0x298>)
 801d84c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	681b      	ldr	r3, [r3, #0]
 801d852:	8a3a      	ldrh	r2, [r7, #16]
 801d854:	4611      	mov	r1, r2
 801d856:	4618      	mov	r0, r3
 801d858:	f7fe f8aa 	bl	801b9b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	891a      	ldrh	r2, [r3, #8]
 801d860:	8a3b      	ldrh	r3, [r7, #16]
 801d862:	1ad3      	subs	r3, r2, r3
 801d864:	b29a      	uxth	r2, r3
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	895b      	ldrh	r3, [r3, #10]
 801d86e:	2b00      	cmp	r3, #0
 801d870:	d005      	beq.n	801d87e <tcp_input+0x13a>
 801d872:	4b54      	ldr	r3, [pc, #336]	; (801d9c4 <tcp_input+0x280>)
 801d874:	22df      	movs	r2, #223	; 0xdf
 801d876:	495c      	ldr	r1, [pc, #368]	; (801d9e8 <tcp_input+0x2a4>)
 801d878:	4854      	ldr	r0, [pc, #336]	; (801d9cc <tcp_input+0x288>)
 801d87a:	f009 fe1d 	bl	80274b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	891a      	ldrh	r2, [r3, #8]
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	891b      	ldrh	r3, [r3, #8]
 801d888:	429a      	cmp	r2, r3
 801d88a:	d005      	beq.n	801d898 <tcp_input+0x154>
 801d88c:	4b4d      	ldr	r3, [pc, #308]	; (801d9c4 <tcp_input+0x280>)
 801d88e:	22e0      	movs	r2, #224	; 0xe0
 801d890:	4956      	ldr	r1, [pc, #344]	; (801d9ec <tcp_input+0x2a8>)
 801d892:	484e      	ldr	r0, [pc, #312]	; (801d9cc <tcp_input+0x288>)
 801d894:	f009 fe10 	bl	80274b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d898:	4b4d      	ldr	r3, [pc, #308]	; (801d9d0 <tcp_input+0x28c>)
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	881b      	ldrh	r3, [r3, #0]
 801d89e:	b29b      	uxth	r3, r3
 801d8a0:	4a4b      	ldr	r2, [pc, #300]	; (801d9d0 <tcp_input+0x28c>)
 801d8a2:	6814      	ldr	r4, [r2, #0]
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f7fc fc53 	bl	801a150 <lwip_htons>
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d8ae:	4b48      	ldr	r3, [pc, #288]	; (801d9d0 <tcp_input+0x28c>)
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	885b      	ldrh	r3, [r3, #2]
 801d8b4:	b29b      	uxth	r3, r3
 801d8b6:	4a46      	ldr	r2, [pc, #280]	; (801d9d0 <tcp_input+0x28c>)
 801d8b8:	6814      	ldr	r4, [r2, #0]
 801d8ba:	4618      	mov	r0, r3
 801d8bc:	f7fc fc48 	bl	801a150 <lwip_htons>
 801d8c0:	4603      	mov	r3, r0
 801d8c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d8c4:	4b42      	ldr	r3, [pc, #264]	; (801d9d0 <tcp_input+0x28c>)
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	685b      	ldr	r3, [r3, #4]
 801d8ca:	4a41      	ldr	r2, [pc, #260]	; (801d9d0 <tcp_input+0x28c>)
 801d8cc:	6814      	ldr	r4, [r2, #0]
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	f7fc fc53 	bl	801a17a <lwip_htonl>
 801d8d4:	4603      	mov	r3, r0
 801d8d6:	6063      	str	r3, [r4, #4]
 801d8d8:	6863      	ldr	r3, [r4, #4]
 801d8da:	4a45      	ldr	r2, [pc, #276]	; (801d9f0 <tcp_input+0x2ac>)
 801d8dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d8de:	4b3c      	ldr	r3, [pc, #240]	; (801d9d0 <tcp_input+0x28c>)
 801d8e0:	681b      	ldr	r3, [r3, #0]
 801d8e2:	689b      	ldr	r3, [r3, #8]
 801d8e4:	4a3a      	ldr	r2, [pc, #232]	; (801d9d0 <tcp_input+0x28c>)
 801d8e6:	6814      	ldr	r4, [r2, #0]
 801d8e8:	4618      	mov	r0, r3
 801d8ea:	f7fc fc46 	bl	801a17a <lwip_htonl>
 801d8ee:	4603      	mov	r3, r0
 801d8f0:	60a3      	str	r3, [r4, #8]
 801d8f2:	68a3      	ldr	r3, [r4, #8]
 801d8f4:	4a3f      	ldr	r2, [pc, #252]	; (801d9f4 <tcp_input+0x2b0>)
 801d8f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d8f8:	4b35      	ldr	r3, [pc, #212]	; (801d9d0 <tcp_input+0x28c>)
 801d8fa:	681b      	ldr	r3, [r3, #0]
 801d8fc:	89db      	ldrh	r3, [r3, #14]
 801d8fe:	b29b      	uxth	r3, r3
 801d900:	4a33      	ldr	r2, [pc, #204]	; (801d9d0 <tcp_input+0x28c>)
 801d902:	6814      	ldr	r4, [r2, #0]
 801d904:	4618      	mov	r0, r3
 801d906:	f7fc fc23 	bl	801a150 <lwip_htons>
 801d90a:	4603      	mov	r3, r0
 801d90c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801d90e:	4b30      	ldr	r3, [pc, #192]	; (801d9d0 <tcp_input+0x28c>)
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	899b      	ldrh	r3, [r3, #12]
 801d914:	b29b      	uxth	r3, r3
 801d916:	4618      	mov	r0, r3
 801d918:	f7fc fc1a 	bl	801a150 <lwip_htons>
 801d91c:	4603      	mov	r3, r0
 801d91e:	b2db      	uxtb	r3, r3
 801d920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d924:	b2da      	uxtb	r2, r3
 801d926:	4b34      	ldr	r3, [pc, #208]	; (801d9f8 <tcp_input+0x2b4>)
 801d928:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	891a      	ldrh	r2, [r3, #8]
 801d92e:	4b33      	ldr	r3, [pc, #204]	; (801d9fc <tcp_input+0x2b8>)
 801d930:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801d932:	4b31      	ldr	r3, [pc, #196]	; (801d9f8 <tcp_input+0x2b4>)
 801d934:	781b      	ldrb	r3, [r3, #0]
 801d936:	f003 0303 	and.w	r3, r3, #3
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d00c      	beq.n	801d958 <tcp_input+0x214>
    tcplen++;
 801d93e:	4b2f      	ldr	r3, [pc, #188]	; (801d9fc <tcp_input+0x2b8>)
 801d940:	881b      	ldrh	r3, [r3, #0]
 801d942:	3301      	adds	r3, #1
 801d944:	b29a      	uxth	r2, r3
 801d946:	4b2d      	ldr	r3, [pc, #180]	; (801d9fc <tcp_input+0x2b8>)
 801d948:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	891a      	ldrh	r2, [r3, #8]
 801d94e:	4b2b      	ldr	r3, [pc, #172]	; (801d9fc <tcp_input+0x2b8>)
 801d950:	881b      	ldrh	r3, [r3, #0]
 801d952:	429a      	cmp	r2, r3
 801d954:	f200 82e6 	bhi.w	801df24 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801d958:	2300      	movs	r3, #0
 801d95a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d95c:	4b28      	ldr	r3, [pc, #160]	; (801da00 <tcp_input+0x2bc>)
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	61fb      	str	r3, [r7, #28]
 801d962:	e09d      	b.n	801daa0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d964:	69fb      	ldr	r3, [r7, #28]
 801d966:	7d1b      	ldrb	r3, [r3, #20]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d105      	bne.n	801d978 <tcp_input+0x234>
 801d96c:	4b15      	ldr	r3, [pc, #84]	; (801d9c4 <tcp_input+0x280>)
 801d96e:	22fb      	movs	r2, #251	; 0xfb
 801d970:	4924      	ldr	r1, [pc, #144]	; (801da04 <tcp_input+0x2c0>)
 801d972:	4816      	ldr	r0, [pc, #88]	; (801d9cc <tcp_input+0x288>)
 801d974:	f009 fda0 	bl	80274b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d978:	69fb      	ldr	r3, [r7, #28]
 801d97a:	7d1b      	ldrb	r3, [r3, #20]
 801d97c:	2b0a      	cmp	r3, #10
 801d97e:	d105      	bne.n	801d98c <tcp_input+0x248>
 801d980:	4b10      	ldr	r3, [pc, #64]	; (801d9c4 <tcp_input+0x280>)
 801d982:	22fc      	movs	r2, #252	; 0xfc
 801d984:	4920      	ldr	r1, [pc, #128]	; (801da08 <tcp_input+0x2c4>)
 801d986:	4811      	ldr	r0, [pc, #68]	; (801d9cc <tcp_input+0x288>)
 801d988:	f009 fd96 	bl	80274b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d98c:	69fb      	ldr	r3, [r7, #28]
 801d98e:	7d1b      	ldrb	r3, [r3, #20]
 801d990:	2b01      	cmp	r3, #1
 801d992:	d105      	bne.n	801d9a0 <tcp_input+0x25c>
 801d994:	4b0b      	ldr	r3, [pc, #44]	; (801d9c4 <tcp_input+0x280>)
 801d996:	22fd      	movs	r2, #253	; 0xfd
 801d998:	491c      	ldr	r1, [pc, #112]	; (801da0c <tcp_input+0x2c8>)
 801d99a:	480c      	ldr	r0, [pc, #48]	; (801d9cc <tcp_input+0x288>)
 801d99c:	f009 fd8c 	bl	80274b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d9a0:	69fb      	ldr	r3, [r7, #28]
 801d9a2:	7a1b      	ldrb	r3, [r3, #8]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d033      	beq.n	801da10 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d9a8:	69fb      	ldr	r3, [r7, #28]
 801d9aa:	7a1a      	ldrb	r2, [r3, #8]
 801d9ac:	4b09      	ldr	r3, [pc, #36]	; (801d9d4 <tcp_input+0x290>)
 801d9ae:	685b      	ldr	r3, [r3, #4]
 801d9b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d9b4:	3301      	adds	r3, #1
 801d9b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d9b8:	429a      	cmp	r2, r3
 801d9ba:	d029      	beq.n	801da10 <tcp_input+0x2cc>
      prev = pcb;
 801d9bc:	69fb      	ldr	r3, [r7, #28]
 801d9be:	61bb      	str	r3, [r7, #24]
      continue;
 801d9c0:	e06b      	b.n	801da9a <tcp_input+0x356>
 801d9c2:	bf00      	nop
 801d9c4:	08029768 	.word	0x08029768
 801d9c8:	0802979c 	.word	0x0802979c
 801d9cc:	080297b4 	.word	0x080297b4
 801d9d0:	2400cf80 	.word	0x2400cf80
 801d9d4:	24009e38 	.word	0x24009e38
 801d9d8:	2400cf84 	.word	0x2400cf84
 801d9dc:	2400cf88 	.word	0x2400cf88
 801d9e0:	2400cf86 	.word	0x2400cf86
 801d9e4:	080297dc 	.word	0x080297dc
 801d9e8:	080297ec 	.word	0x080297ec
 801d9ec:	080297f8 	.word	0x080297f8
 801d9f0:	2400cf90 	.word	0x2400cf90
 801d9f4:	2400cf94 	.word	0x2400cf94
 801d9f8:	2400cf9c 	.word	0x2400cf9c
 801d9fc:	2400cf9a 	.word	0x2400cf9a
 801da00:	2400cf64 	.word	0x2400cf64
 801da04:	08029818 	.word	0x08029818
 801da08:	08029840 	.word	0x08029840
 801da0c:	0802986c 	.word	0x0802986c
    }

    if (pcb->remote_port == tcphdr->src &&
 801da10:	69fb      	ldr	r3, [r7, #28]
 801da12:	8b1a      	ldrh	r2, [r3, #24]
 801da14:	4b72      	ldr	r3, [pc, #456]	; (801dbe0 <tcp_input+0x49c>)
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	881b      	ldrh	r3, [r3, #0]
 801da1a:	b29b      	uxth	r3, r3
 801da1c:	429a      	cmp	r2, r3
 801da1e:	d13a      	bne.n	801da96 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801da20:	69fb      	ldr	r3, [r7, #28]
 801da22:	8ada      	ldrh	r2, [r3, #22]
 801da24:	4b6e      	ldr	r3, [pc, #440]	; (801dbe0 <tcp_input+0x49c>)
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	885b      	ldrh	r3, [r3, #2]
 801da2a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801da2c:	429a      	cmp	r2, r3
 801da2e:	d132      	bne.n	801da96 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801da30:	69fb      	ldr	r3, [r7, #28]
 801da32:	685a      	ldr	r2, [r3, #4]
 801da34:	4b6b      	ldr	r3, [pc, #428]	; (801dbe4 <tcp_input+0x4a0>)
 801da36:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801da38:	429a      	cmp	r2, r3
 801da3a:	d12c      	bne.n	801da96 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801da3c:	69fb      	ldr	r3, [r7, #28]
 801da3e:	681a      	ldr	r2, [r3, #0]
 801da40:	4b68      	ldr	r3, [pc, #416]	; (801dbe4 <tcp_input+0x4a0>)
 801da42:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801da44:	429a      	cmp	r2, r3
 801da46:	d126      	bne.n	801da96 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801da48:	69fb      	ldr	r3, [r7, #28]
 801da4a:	68db      	ldr	r3, [r3, #12]
 801da4c:	69fa      	ldr	r2, [r7, #28]
 801da4e:	429a      	cmp	r2, r3
 801da50:	d106      	bne.n	801da60 <tcp_input+0x31c>
 801da52:	4b65      	ldr	r3, [pc, #404]	; (801dbe8 <tcp_input+0x4a4>)
 801da54:	f240 120d 	movw	r2, #269	; 0x10d
 801da58:	4964      	ldr	r1, [pc, #400]	; (801dbec <tcp_input+0x4a8>)
 801da5a:	4865      	ldr	r0, [pc, #404]	; (801dbf0 <tcp_input+0x4ac>)
 801da5c:	f009 fd2c 	bl	80274b8 <iprintf>
      if (prev != NULL) {
 801da60:	69bb      	ldr	r3, [r7, #24]
 801da62:	2b00      	cmp	r3, #0
 801da64:	d00a      	beq.n	801da7c <tcp_input+0x338>
        prev->next = pcb->next;
 801da66:	69fb      	ldr	r3, [r7, #28]
 801da68:	68da      	ldr	r2, [r3, #12]
 801da6a:	69bb      	ldr	r3, [r7, #24]
 801da6c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801da6e:	4b61      	ldr	r3, [pc, #388]	; (801dbf4 <tcp_input+0x4b0>)
 801da70:	681a      	ldr	r2, [r3, #0]
 801da72:	69fb      	ldr	r3, [r7, #28]
 801da74:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801da76:	4a5f      	ldr	r2, [pc, #380]	; (801dbf4 <tcp_input+0x4b0>)
 801da78:	69fb      	ldr	r3, [r7, #28]
 801da7a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801da7c:	69fb      	ldr	r3, [r7, #28]
 801da7e:	68db      	ldr	r3, [r3, #12]
 801da80:	69fa      	ldr	r2, [r7, #28]
 801da82:	429a      	cmp	r2, r3
 801da84:	d111      	bne.n	801daaa <tcp_input+0x366>
 801da86:	4b58      	ldr	r3, [pc, #352]	; (801dbe8 <tcp_input+0x4a4>)
 801da88:	f240 1215 	movw	r2, #277	; 0x115
 801da8c:	495a      	ldr	r1, [pc, #360]	; (801dbf8 <tcp_input+0x4b4>)
 801da8e:	4858      	ldr	r0, [pc, #352]	; (801dbf0 <tcp_input+0x4ac>)
 801da90:	f009 fd12 	bl	80274b8 <iprintf>
      break;
 801da94:	e009      	b.n	801daaa <tcp_input+0x366>
    }
    prev = pcb;
 801da96:	69fb      	ldr	r3, [r7, #28]
 801da98:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801da9a:	69fb      	ldr	r3, [r7, #28]
 801da9c:	68db      	ldr	r3, [r3, #12]
 801da9e:	61fb      	str	r3, [r7, #28]
 801daa0:	69fb      	ldr	r3, [r7, #28]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	f47f af5e 	bne.w	801d964 <tcp_input+0x220>
 801daa8:	e000      	b.n	801daac <tcp_input+0x368>
      break;
 801daaa:	bf00      	nop
  }

  if (pcb == NULL) {
 801daac:	69fb      	ldr	r3, [r7, #28]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	f040 80aa 	bne.w	801dc08 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dab4:	4b51      	ldr	r3, [pc, #324]	; (801dbfc <tcp_input+0x4b8>)
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	61fb      	str	r3, [r7, #28]
 801daba:	e03f      	b.n	801db3c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dabc:	69fb      	ldr	r3, [r7, #28]
 801dabe:	7d1b      	ldrb	r3, [r3, #20]
 801dac0:	2b0a      	cmp	r3, #10
 801dac2:	d006      	beq.n	801dad2 <tcp_input+0x38e>
 801dac4:	4b48      	ldr	r3, [pc, #288]	; (801dbe8 <tcp_input+0x4a4>)
 801dac6:	f240 121f 	movw	r2, #287	; 0x11f
 801daca:	494d      	ldr	r1, [pc, #308]	; (801dc00 <tcp_input+0x4bc>)
 801dacc:	4848      	ldr	r0, [pc, #288]	; (801dbf0 <tcp_input+0x4ac>)
 801dace:	f009 fcf3 	bl	80274b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dad2:	69fb      	ldr	r3, [r7, #28]
 801dad4:	7a1b      	ldrb	r3, [r3, #8]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d009      	beq.n	801daee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801dada:	69fb      	ldr	r3, [r7, #28]
 801dadc:	7a1a      	ldrb	r2, [r3, #8]
 801dade:	4b41      	ldr	r3, [pc, #260]	; (801dbe4 <tcp_input+0x4a0>)
 801dae0:	685b      	ldr	r3, [r3, #4]
 801dae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dae6:	3301      	adds	r3, #1
 801dae8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801daea:	429a      	cmp	r2, r3
 801daec:	d122      	bne.n	801db34 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801daee:	69fb      	ldr	r3, [r7, #28]
 801daf0:	8b1a      	ldrh	r2, [r3, #24]
 801daf2:	4b3b      	ldr	r3, [pc, #236]	; (801dbe0 <tcp_input+0x49c>)
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	881b      	ldrh	r3, [r3, #0]
 801daf8:	b29b      	uxth	r3, r3
 801dafa:	429a      	cmp	r2, r3
 801dafc:	d11b      	bne.n	801db36 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801dafe:	69fb      	ldr	r3, [r7, #28]
 801db00:	8ada      	ldrh	r2, [r3, #22]
 801db02:	4b37      	ldr	r3, [pc, #220]	; (801dbe0 <tcp_input+0x49c>)
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	885b      	ldrh	r3, [r3, #2]
 801db08:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801db0a:	429a      	cmp	r2, r3
 801db0c:	d113      	bne.n	801db36 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801db0e:	69fb      	ldr	r3, [r7, #28]
 801db10:	685a      	ldr	r2, [r3, #4]
 801db12:	4b34      	ldr	r3, [pc, #208]	; (801dbe4 <tcp_input+0x4a0>)
 801db14:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801db16:	429a      	cmp	r2, r3
 801db18:	d10d      	bne.n	801db36 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801db1a:	69fb      	ldr	r3, [r7, #28]
 801db1c:	681a      	ldr	r2, [r3, #0]
 801db1e:	4b31      	ldr	r3, [pc, #196]	; (801dbe4 <tcp_input+0x4a0>)
 801db20:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801db22:	429a      	cmp	r2, r3
 801db24:	d107      	bne.n	801db36 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801db26:	69f8      	ldr	r0, [r7, #28]
 801db28:	f000 fb56 	bl	801e1d8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801db2c:	6878      	ldr	r0, [r7, #4]
 801db2e:	f7fd ffc5 	bl	801babc <pbuf_free>
        return;
 801db32:	e1fd      	b.n	801df30 <tcp_input+0x7ec>
        continue;
 801db34:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801db36:	69fb      	ldr	r3, [r7, #28]
 801db38:	68db      	ldr	r3, [r3, #12]
 801db3a:	61fb      	str	r3, [r7, #28]
 801db3c:	69fb      	ldr	r3, [r7, #28]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d1bc      	bne.n	801dabc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801db42:	2300      	movs	r3, #0
 801db44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801db46:	4b2f      	ldr	r3, [pc, #188]	; (801dc04 <tcp_input+0x4c0>)
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	617b      	str	r3, [r7, #20]
 801db4c:	e02a      	b.n	801dba4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801db4e:	697b      	ldr	r3, [r7, #20]
 801db50:	7a1b      	ldrb	r3, [r3, #8]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d00c      	beq.n	801db70 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801db56:	697b      	ldr	r3, [r7, #20]
 801db58:	7a1a      	ldrb	r2, [r3, #8]
 801db5a:	4b22      	ldr	r3, [pc, #136]	; (801dbe4 <tcp_input+0x4a0>)
 801db5c:	685b      	ldr	r3, [r3, #4]
 801db5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801db62:	3301      	adds	r3, #1
 801db64:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801db66:	429a      	cmp	r2, r3
 801db68:	d002      	beq.n	801db70 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801db6a:	697b      	ldr	r3, [r7, #20]
 801db6c:	61bb      	str	r3, [r7, #24]
        continue;
 801db6e:	e016      	b.n	801db9e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801db70:	697b      	ldr	r3, [r7, #20]
 801db72:	8ada      	ldrh	r2, [r3, #22]
 801db74:	4b1a      	ldr	r3, [pc, #104]	; (801dbe0 <tcp_input+0x49c>)
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	885b      	ldrh	r3, [r3, #2]
 801db7a:	b29b      	uxth	r3, r3
 801db7c:	429a      	cmp	r2, r3
 801db7e:	d10c      	bne.n	801db9a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801db80:	697b      	ldr	r3, [r7, #20]
 801db82:	681a      	ldr	r2, [r3, #0]
 801db84:	4b17      	ldr	r3, [pc, #92]	; (801dbe4 <tcp_input+0x4a0>)
 801db86:	695b      	ldr	r3, [r3, #20]
 801db88:	429a      	cmp	r2, r3
 801db8a:	d00f      	beq.n	801dbac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801db8c:	697b      	ldr	r3, [r7, #20]
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d00d      	beq.n	801dbae <tcp_input+0x46a>
 801db92:	697b      	ldr	r3, [r7, #20]
 801db94:	681b      	ldr	r3, [r3, #0]
 801db96:	2b00      	cmp	r3, #0
 801db98:	d009      	beq.n	801dbae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801db9a:	697b      	ldr	r3, [r7, #20]
 801db9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801db9e:	697b      	ldr	r3, [r7, #20]
 801dba0:	68db      	ldr	r3, [r3, #12]
 801dba2:	617b      	str	r3, [r7, #20]
 801dba4:	697b      	ldr	r3, [r7, #20]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d1d1      	bne.n	801db4e <tcp_input+0x40a>
 801dbaa:	e000      	b.n	801dbae <tcp_input+0x46a>
            break;
 801dbac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801dbae:	697b      	ldr	r3, [r7, #20]
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d029      	beq.n	801dc08 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801dbb4:	69bb      	ldr	r3, [r7, #24]
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d00a      	beq.n	801dbd0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801dbba:	697b      	ldr	r3, [r7, #20]
 801dbbc:	68da      	ldr	r2, [r3, #12]
 801dbbe:	69bb      	ldr	r3, [r7, #24]
 801dbc0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801dbc2:	4b10      	ldr	r3, [pc, #64]	; (801dc04 <tcp_input+0x4c0>)
 801dbc4:	681a      	ldr	r2, [r3, #0]
 801dbc6:	697b      	ldr	r3, [r7, #20]
 801dbc8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801dbca:	4a0e      	ldr	r2, [pc, #56]	; (801dc04 <tcp_input+0x4c0>)
 801dbcc:	697b      	ldr	r3, [r7, #20]
 801dbce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801dbd0:	6978      	ldr	r0, [r7, #20]
 801dbd2:	f000 fa03 	bl	801dfdc <tcp_listen_input>
      }
      pbuf_free(p);
 801dbd6:	6878      	ldr	r0, [r7, #4]
 801dbd8:	f7fd ff70 	bl	801babc <pbuf_free>
      return;
 801dbdc:	e1a8      	b.n	801df30 <tcp_input+0x7ec>
 801dbde:	bf00      	nop
 801dbe0:	2400cf80 	.word	0x2400cf80
 801dbe4:	24009e38 	.word	0x24009e38
 801dbe8:	08029768 	.word	0x08029768
 801dbec:	08029894 	.word	0x08029894
 801dbf0:	080297b4 	.word	0x080297b4
 801dbf4:	2400cf64 	.word	0x2400cf64
 801dbf8:	080298c0 	.word	0x080298c0
 801dbfc:	2400cf68 	.word	0x2400cf68
 801dc00:	080298ec 	.word	0x080298ec
 801dc04:	2400cf60 	.word	0x2400cf60
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801dc08:	69fb      	ldr	r3, [r7, #28]
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	f000 8158 	beq.w	801dec0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801dc10:	4b95      	ldr	r3, [pc, #596]	; (801de68 <tcp_input+0x724>)
 801dc12:	2200      	movs	r2, #0
 801dc14:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	891a      	ldrh	r2, [r3, #8]
 801dc1a:	4b93      	ldr	r3, [pc, #588]	; (801de68 <tcp_input+0x724>)
 801dc1c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801dc1e:	4a92      	ldr	r2, [pc, #584]	; (801de68 <tcp_input+0x724>)
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801dc24:	4b91      	ldr	r3, [pc, #580]	; (801de6c <tcp_input+0x728>)
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	4a8f      	ldr	r2, [pc, #572]	; (801de68 <tcp_input+0x724>)
 801dc2a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801dc2c:	4b90      	ldr	r3, [pc, #576]	; (801de70 <tcp_input+0x72c>)
 801dc2e:	2200      	movs	r2, #0
 801dc30:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801dc32:	4b90      	ldr	r3, [pc, #576]	; (801de74 <tcp_input+0x730>)
 801dc34:	2200      	movs	r2, #0
 801dc36:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801dc38:	4b8f      	ldr	r3, [pc, #572]	; (801de78 <tcp_input+0x734>)
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801dc3e:	4b8f      	ldr	r3, [pc, #572]	; (801de7c <tcp_input+0x738>)
 801dc40:	781b      	ldrb	r3, [r3, #0]
 801dc42:	f003 0308 	and.w	r3, r3, #8
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d006      	beq.n	801dc58 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	7b5b      	ldrb	r3, [r3, #13]
 801dc4e:	f043 0301 	orr.w	r3, r3, #1
 801dc52:	b2da      	uxtb	r2, r3
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801dc58:	69fb      	ldr	r3, [r7, #28]
 801dc5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d017      	beq.n	801dc90 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801dc60:	69f8      	ldr	r0, [r7, #28]
 801dc62:	f7ff f929 	bl	801ceb8 <tcp_process_refused_data>
 801dc66:	4603      	mov	r3, r0
 801dc68:	f113 0f0d 	cmn.w	r3, #13
 801dc6c:	d007      	beq.n	801dc7e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801dc6e:	69fb      	ldr	r3, [r7, #28]
 801dc70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d00c      	beq.n	801dc90 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801dc76:	4b82      	ldr	r3, [pc, #520]	; (801de80 <tcp_input+0x73c>)
 801dc78:	881b      	ldrh	r3, [r3, #0]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d008      	beq.n	801dc90 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801dc7e:	69fb      	ldr	r3, [r7, #28]
 801dc80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	f040 80e3 	bne.w	801de4e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801dc88:	69f8      	ldr	r0, [r7, #28]
 801dc8a:	f003 f9ad 	bl	8020fe8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801dc8e:	e0de      	b.n	801de4e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801dc90:	4a7c      	ldr	r2, [pc, #496]	; (801de84 <tcp_input+0x740>)
 801dc92:	69fb      	ldr	r3, [r7, #28]
 801dc94:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801dc96:	69f8      	ldr	r0, [r7, #28]
 801dc98:	f000 fb18 	bl	801e2cc <tcp_process>
 801dc9c:	4603      	mov	r3, r0
 801dc9e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801dca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dca4:	f113 0f0d 	cmn.w	r3, #13
 801dca8:	f000 80d3 	beq.w	801de52 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801dcac:	4b71      	ldr	r3, [pc, #452]	; (801de74 <tcp_input+0x730>)
 801dcae:	781b      	ldrb	r3, [r3, #0]
 801dcb0:	f003 0308 	and.w	r3, r3, #8
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d015      	beq.n	801dce4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801dcb8:	69fb      	ldr	r3, [r7, #28]
 801dcba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d008      	beq.n	801dcd4 <tcp_input+0x590>
 801dcc2:	69fb      	ldr	r3, [r7, #28]
 801dcc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dcc8:	69fa      	ldr	r2, [r7, #28]
 801dcca:	6912      	ldr	r2, [r2, #16]
 801dccc:	f06f 010d 	mvn.w	r1, #13
 801dcd0:	4610      	mov	r0, r2
 801dcd2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801dcd4:	69f9      	ldr	r1, [r7, #28]
 801dcd6:	486c      	ldr	r0, [pc, #432]	; (801de88 <tcp_input+0x744>)
 801dcd8:	f7ff fbbc 	bl	801d454 <tcp_pcb_remove>
        tcp_free(pcb);
 801dcdc:	69f8      	ldr	r0, [r7, #28]
 801dcde:	f7fe f9a9 	bl	801c034 <tcp_free>
 801dce2:	e0da      	b.n	801de9a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801dce4:	2300      	movs	r3, #0
 801dce6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801dce8:	4b63      	ldr	r3, [pc, #396]	; (801de78 <tcp_input+0x734>)
 801dcea:	881b      	ldrh	r3, [r3, #0]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d01d      	beq.n	801dd2c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801dcf0:	4b61      	ldr	r3, [pc, #388]	; (801de78 <tcp_input+0x734>)
 801dcf2:	881b      	ldrh	r3, [r3, #0]
 801dcf4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801dcf6:	69fb      	ldr	r3, [r7, #28]
 801dcf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d00a      	beq.n	801dd16 <tcp_input+0x5d2>
 801dd00:	69fb      	ldr	r3, [r7, #28]
 801dd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801dd06:	69fa      	ldr	r2, [r7, #28]
 801dd08:	6910      	ldr	r0, [r2, #16]
 801dd0a:	89fa      	ldrh	r2, [r7, #14]
 801dd0c:	69f9      	ldr	r1, [r7, #28]
 801dd0e:	4798      	blx	r3
 801dd10:	4603      	mov	r3, r0
 801dd12:	74fb      	strb	r3, [r7, #19]
 801dd14:	e001      	b.n	801dd1a <tcp_input+0x5d6>
 801dd16:	2300      	movs	r3, #0
 801dd18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801dd1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dd1e:	f113 0f0d 	cmn.w	r3, #13
 801dd22:	f000 8098 	beq.w	801de56 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801dd26:	4b54      	ldr	r3, [pc, #336]	; (801de78 <tcp_input+0x734>)
 801dd28:	2200      	movs	r2, #0
 801dd2a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801dd2c:	69f8      	ldr	r0, [r7, #28]
 801dd2e:	f000 f915 	bl	801df5c <tcp_input_delayed_close>
 801dd32:	4603      	mov	r3, r0
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	f040 8090 	bne.w	801de5a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801dd3a:	4b4d      	ldr	r3, [pc, #308]	; (801de70 <tcp_input+0x72c>)
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d041      	beq.n	801ddc6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801dd42:	69fb      	ldr	r3, [r7, #28]
 801dd44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d006      	beq.n	801dd58 <tcp_input+0x614>
 801dd4a:	4b50      	ldr	r3, [pc, #320]	; (801de8c <tcp_input+0x748>)
 801dd4c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801dd50:	494f      	ldr	r1, [pc, #316]	; (801de90 <tcp_input+0x74c>)
 801dd52:	4850      	ldr	r0, [pc, #320]	; (801de94 <tcp_input+0x750>)
 801dd54:	f009 fbb0 	bl	80274b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801dd58:	69fb      	ldr	r3, [r7, #28]
 801dd5a:	8b5b      	ldrh	r3, [r3, #26]
 801dd5c:	f003 0310 	and.w	r3, r3, #16
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d008      	beq.n	801dd76 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801dd64:	4b42      	ldr	r3, [pc, #264]	; (801de70 <tcp_input+0x72c>)
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f7fd fea7 	bl	801babc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801dd6e:	69f8      	ldr	r0, [r7, #28]
 801dd70:	f7fe fc48 	bl	801c604 <tcp_abort>
            goto aborted;
 801dd74:	e091      	b.n	801de9a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801dd76:	69fb      	ldr	r3, [r7, #28]
 801dd78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d00c      	beq.n	801dd9a <tcp_input+0x656>
 801dd80:	69fb      	ldr	r3, [r7, #28]
 801dd82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801dd86:	69fb      	ldr	r3, [r7, #28]
 801dd88:	6918      	ldr	r0, [r3, #16]
 801dd8a:	4b39      	ldr	r3, [pc, #228]	; (801de70 <tcp_input+0x72c>)
 801dd8c:	681a      	ldr	r2, [r3, #0]
 801dd8e:	2300      	movs	r3, #0
 801dd90:	69f9      	ldr	r1, [r7, #28]
 801dd92:	47a0      	blx	r4
 801dd94:	4603      	mov	r3, r0
 801dd96:	74fb      	strb	r3, [r7, #19]
 801dd98:	e008      	b.n	801ddac <tcp_input+0x668>
 801dd9a:	4b35      	ldr	r3, [pc, #212]	; (801de70 <tcp_input+0x72c>)
 801dd9c:	681a      	ldr	r2, [r3, #0]
 801dd9e:	2300      	movs	r3, #0
 801dda0:	69f9      	ldr	r1, [r7, #28]
 801dda2:	2000      	movs	r0, #0
 801dda4:	f7ff f95e 	bl	801d064 <tcp_recv_null>
 801dda8:	4603      	mov	r3, r0
 801ddaa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801ddac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ddb0:	f113 0f0d 	cmn.w	r3, #13
 801ddb4:	d053      	beq.n	801de5e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801ddb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d003      	beq.n	801ddc6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801ddbe:	4b2c      	ldr	r3, [pc, #176]	; (801de70 <tcp_input+0x72c>)
 801ddc0:	681a      	ldr	r2, [r3, #0]
 801ddc2:	69fb      	ldr	r3, [r7, #28]
 801ddc4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801ddc6:	4b2b      	ldr	r3, [pc, #172]	; (801de74 <tcp_input+0x730>)
 801ddc8:	781b      	ldrb	r3, [r3, #0]
 801ddca:	f003 0320 	and.w	r3, r3, #32
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d030      	beq.n	801de34 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801ddd2:	69fb      	ldr	r3, [r7, #28]
 801ddd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d009      	beq.n	801ddee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801ddda:	69fb      	ldr	r3, [r7, #28]
 801dddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ddde:	7b5a      	ldrb	r2, [r3, #13]
 801dde0:	69fb      	ldr	r3, [r7, #28]
 801dde2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dde4:	f042 0220 	orr.w	r2, r2, #32
 801dde8:	b2d2      	uxtb	r2, r2
 801ddea:	735a      	strb	r2, [r3, #13]
 801ddec:	e022      	b.n	801de34 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ddee:	69fb      	ldr	r3, [r7, #28]
 801ddf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ddf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801ddf6:	d005      	beq.n	801de04 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801ddf8:	69fb      	ldr	r3, [r7, #28]
 801ddfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ddfc:	3301      	adds	r3, #1
 801ddfe:	b29a      	uxth	r2, r3
 801de00:	69fb      	ldr	r3, [r7, #28]
 801de02:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801de04:	69fb      	ldr	r3, [r7, #28]
 801de06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d00b      	beq.n	801de26 <tcp_input+0x6e2>
 801de0e:	69fb      	ldr	r3, [r7, #28]
 801de10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801de14:	69fb      	ldr	r3, [r7, #28]
 801de16:	6918      	ldr	r0, [r3, #16]
 801de18:	2300      	movs	r3, #0
 801de1a:	2200      	movs	r2, #0
 801de1c:	69f9      	ldr	r1, [r7, #28]
 801de1e:	47a0      	blx	r4
 801de20:	4603      	mov	r3, r0
 801de22:	74fb      	strb	r3, [r7, #19]
 801de24:	e001      	b.n	801de2a <tcp_input+0x6e6>
 801de26:	2300      	movs	r3, #0
 801de28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801de2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801de2e:	f113 0f0d 	cmn.w	r3, #13
 801de32:	d016      	beq.n	801de62 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801de34:	4b13      	ldr	r3, [pc, #76]	; (801de84 <tcp_input+0x740>)
 801de36:	2200      	movs	r2, #0
 801de38:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801de3a:	69f8      	ldr	r0, [r7, #28]
 801de3c:	f000 f88e 	bl	801df5c <tcp_input_delayed_close>
 801de40:	4603      	mov	r3, r0
 801de42:	2b00      	cmp	r3, #0
 801de44:	d128      	bne.n	801de98 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801de46:	69f8      	ldr	r0, [r7, #28]
 801de48:	f002 fac8 	bl	80203dc <tcp_output>
 801de4c:	e025      	b.n	801de9a <tcp_input+0x756>
        goto aborted;
 801de4e:	bf00      	nop
 801de50:	e023      	b.n	801de9a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801de52:	bf00      	nop
 801de54:	e021      	b.n	801de9a <tcp_input+0x756>
              goto aborted;
 801de56:	bf00      	nop
 801de58:	e01f      	b.n	801de9a <tcp_input+0x756>
          goto aborted;
 801de5a:	bf00      	nop
 801de5c:	e01d      	b.n	801de9a <tcp_input+0x756>
            goto aborted;
 801de5e:	bf00      	nop
 801de60:	e01b      	b.n	801de9a <tcp_input+0x756>
              goto aborted;
 801de62:	bf00      	nop
 801de64:	e019      	b.n	801de9a <tcp_input+0x756>
 801de66:	bf00      	nop
 801de68:	2400cf70 	.word	0x2400cf70
 801de6c:	2400cf80 	.word	0x2400cf80
 801de70:	2400cfa0 	.word	0x2400cfa0
 801de74:	2400cf9d 	.word	0x2400cf9d
 801de78:	2400cf98 	.word	0x2400cf98
 801de7c:	2400cf9c 	.word	0x2400cf9c
 801de80:	2400cf9a 	.word	0x2400cf9a
 801de84:	2400cfa4 	.word	0x2400cfa4
 801de88:	2400cf64 	.word	0x2400cf64
 801de8c:	08029768 	.word	0x08029768
 801de90:	0802991c 	.word	0x0802991c
 801de94:	080297b4 	.word	0x080297b4
          goto aborted;
 801de98:	bf00      	nop
    tcp_input_pcb = NULL;
 801de9a:	4b27      	ldr	r3, [pc, #156]	; (801df38 <tcp_input+0x7f4>)
 801de9c:	2200      	movs	r2, #0
 801de9e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801dea0:	4b26      	ldr	r3, [pc, #152]	; (801df3c <tcp_input+0x7f8>)
 801dea2:	2200      	movs	r2, #0
 801dea4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801dea6:	4b26      	ldr	r3, [pc, #152]	; (801df40 <tcp_input+0x7fc>)
 801dea8:	685b      	ldr	r3, [r3, #4]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d03f      	beq.n	801df2e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801deae:	4b24      	ldr	r3, [pc, #144]	; (801df40 <tcp_input+0x7fc>)
 801deb0:	685b      	ldr	r3, [r3, #4]
 801deb2:	4618      	mov	r0, r3
 801deb4:	f7fd fe02 	bl	801babc <pbuf_free>
      inseg.p = NULL;
 801deb8:	4b21      	ldr	r3, [pc, #132]	; (801df40 <tcp_input+0x7fc>)
 801deba:	2200      	movs	r2, #0
 801debc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801debe:	e036      	b.n	801df2e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801dec0:	4b20      	ldr	r3, [pc, #128]	; (801df44 <tcp_input+0x800>)
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	899b      	ldrh	r3, [r3, #12]
 801dec6:	b29b      	uxth	r3, r3
 801dec8:	4618      	mov	r0, r3
 801deca:	f7fc f941 	bl	801a150 <lwip_htons>
 801dece:	4603      	mov	r3, r0
 801ded0:	b2db      	uxtb	r3, r3
 801ded2:	f003 0304 	and.w	r3, r3, #4
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	d118      	bne.n	801df0c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801deda:	4b1b      	ldr	r3, [pc, #108]	; (801df48 <tcp_input+0x804>)
 801dedc:	6819      	ldr	r1, [r3, #0]
 801dede:	4b1b      	ldr	r3, [pc, #108]	; (801df4c <tcp_input+0x808>)
 801dee0:	881b      	ldrh	r3, [r3, #0]
 801dee2:	461a      	mov	r2, r3
 801dee4:	4b1a      	ldr	r3, [pc, #104]	; (801df50 <tcp_input+0x80c>)
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801deea:	4b16      	ldr	r3, [pc, #88]	; (801df44 <tcp_input+0x800>)
 801deec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801deee:	885b      	ldrh	r3, [r3, #2]
 801def0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801def2:	4a14      	ldr	r2, [pc, #80]	; (801df44 <tcp_input+0x800>)
 801def4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801def6:	8812      	ldrh	r2, [r2, #0]
 801def8:	b292      	uxth	r2, r2
 801defa:	9202      	str	r2, [sp, #8]
 801defc:	9301      	str	r3, [sp, #4]
 801defe:	4b15      	ldr	r3, [pc, #84]	; (801df54 <tcp_input+0x810>)
 801df00:	9300      	str	r3, [sp, #0]
 801df02:	4b15      	ldr	r3, [pc, #84]	; (801df58 <tcp_input+0x814>)
 801df04:	4602      	mov	r2, r0
 801df06:	2000      	movs	r0, #0
 801df08:	f003 f81c 	bl	8020f44 <tcp_rst>
    pbuf_free(p);
 801df0c:	6878      	ldr	r0, [r7, #4]
 801df0e:	f7fd fdd5 	bl	801babc <pbuf_free>
  return;
 801df12:	e00c      	b.n	801df2e <tcp_input+0x7ea>
    goto dropped;
 801df14:	bf00      	nop
 801df16:	e006      	b.n	801df26 <tcp_input+0x7e2>
    goto dropped;
 801df18:	bf00      	nop
 801df1a:	e004      	b.n	801df26 <tcp_input+0x7e2>
    goto dropped;
 801df1c:	bf00      	nop
 801df1e:	e002      	b.n	801df26 <tcp_input+0x7e2>
      goto dropped;
 801df20:	bf00      	nop
 801df22:	e000      	b.n	801df26 <tcp_input+0x7e2>
      goto dropped;
 801df24:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801df26:	6878      	ldr	r0, [r7, #4]
 801df28:	f7fd fdc8 	bl	801babc <pbuf_free>
 801df2c:	e000      	b.n	801df30 <tcp_input+0x7ec>
  return;
 801df2e:	bf00      	nop
}
 801df30:	3724      	adds	r7, #36	; 0x24
 801df32:	46bd      	mov	sp, r7
 801df34:	bd90      	pop	{r4, r7, pc}
 801df36:	bf00      	nop
 801df38:	2400cfa4 	.word	0x2400cfa4
 801df3c:	2400cfa0 	.word	0x2400cfa0
 801df40:	2400cf70 	.word	0x2400cf70
 801df44:	2400cf80 	.word	0x2400cf80
 801df48:	2400cf94 	.word	0x2400cf94
 801df4c:	2400cf9a 	.word	0x2400cf9a
 801df50:	2400cf90 	.word	0x2400cf90
 801df54:	24009e48 	.word	0x24009e48
 801df58:	24009e4c 	.word	0x24009e4c

0801df5c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b082      	sub	sp, #8
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d106      	bne.n	801df78 <tcp_input_delayed_close+0x1c>
 801df6a:	4b17      	ldr	r3, [pc, #92]	; (801dfc8 <tcp_input_delayed_close+0x6c>)
 801df6c:	f240 225a 	movw	r2, #602	; 0x25a
 801df70:	4916      	ldr	r1, [pc, #88]	; (801dfcc <tcp_input_delayed_close+0x70>)
 801df72:	4817      	ldr	r0, [pc, #92]	; (801dfd0 <tcp_input_delayed_close+0x74>)
 801df74:	f009 faa0 	bl	80274b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801df78:	4b16      	ldr	r3, [pc, #88]	; (801dfd4 <tcp_input_delayed_close+0x78>)
 801df7a:	781b      	ldrb	r3, [r3, #0]
 801df7c:	f003 0310 	and.w	r3, r3, #16
 801df80:	2b00      	cmp	r3, #0
 801df82:	d01c      	beq.n	801dfbe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	8b5b      	ldrh	r3, [r3, #26]
 801df88:	f003 0310 	and.w	r3, r3, #16
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d10d      	bne.n	801dfac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df96:	2b00      	cmp	r3, #0
 801df98:	d008      	beq.n	801dfac <tcp_input_delayed_close+0x50>
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dfa0:	687a      	ldr	r2, [r7, #4]
 801dfa2:	6912      	ldr	r2, [r2, #16]
 801dfa4:	f06f 010e 	mvn.w	r1, #14
 801dfa8:	4610      	mov	r0, r2
 801dfaa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801dfac:	6879      	ldr	r1, [r7, #4]
 801dfae:	480a      	ldr	r0, [pc, #40]	; (801dfd8 <tcp_input_delayed_close+0x7c>)
 801dfb0:	f7ff fa50 	bl	801d454 <tcp_pcb_remove>
    tcp_free(pcb);
 801dfb4:	6878      	ldr	r0, [r7, #4]
 801dfb6:	f7fe f83d 	bl	801c034 <tcp_free>
    return 1;
 801dfba:	2301      	movs	r3, #1
 801dfbc:	e000      	b.n	801dfc0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801dfbe:	2300      	movs	r3, #0
}
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	3708      	adds	r7, #8
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	bd80      	pop	{r7, pc}
 801dfc8:	08029768 	.word	0x08029768
 801dfcc:	08029938 	.word	0x08029938
 801dfd0:	080297b4 	.word	0x080297b4
 801dfd4:	2400cf9d 	.word	0x2400cf9d
 801dfd8:	2400cf64 	.word	0x2400cf64

0801dfdc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801dfdc:	b590      	push	{r4, r7, lr}
 801dfde:	b08b      	sub	sp, #44	; 0x2c
 801dfe0:	af04      	add	r7, sp, #16
 801dfe2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801dfe4:	4b6f      	ldr	r3, [pc, #444]	; (801e1a4 <tcp_listen_input+0x1c8>)
 801dfe6:	781b      	ldrb	r3, [r3, #0]
 801dfe8:	f003 0304 	and.w	r3, r3, #4
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	f040 80d2 	bne.w	801e196 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d106      	bne.n	801e006 <tcp_listen_input+0x2a>
 801dff8:	4b6b      	ldr	r3, [pc, #428]	; (801e1a8 <tcp_listen_input+0x1cc>)
 801dffa:	f240 2281 	movw	r2, #641	; 0x281
 801dffe:	496b      	ldr	r1, [pc, #428]	; (801e1ac <tcp_listen_input+0x1d0>)
 801e000:	486b      	ldr	r0, [pc, #428]	; (801e1b0 <tcp_listen_input+0x1d4>)
 801e002:	f009 fa59 	bl	80274b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801e006:	4b67      	ldr	r3, [pc, #412]	; (801e1a4 <tcp_listen_input+0x1c8>)
 801e008:	781b      	ldrb	r3, [r3, #0]
 801e00a:	f003 0310 	and.w	r3, r3, #16
 801e00e:	2b00      	cmp	r3, #0
 801e010:	d019      	beq.n	801e046 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e012:	4b68      	ldr	r3, [pc, #416]	; (801e1b4 <tcp_listen_input+0x1d8>)
 801e014:	6819      	ldr	r1, [r3, #0]
 801e016:	4b68      	ldr	r3, [pc, #416]	; (801e1b8 <tcp_listen_input+0x1dc>)
 801e018:	881b      	ldrh	r3, [r3, #0]
 801e01a:	461a      	mov	r2, r3
 801e01c:	4b67      	ldr	r3, [pc, #412]	; (801e1bc <tcp_listen_input+0x1e0>)
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e022:	4b67      	ldr	r3, [pc, #412]	; (801e1c0 <tcp_listen_input+0x1e4>)
 801e024:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e026:	885b      	ldrh	r3, [r3, #2]
 801e028:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e02a:	4a65      	ldr	r2, [pc, #404]	; (801e1c0 <tcp_listen_input+0x1e4>)
 801e02c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e02e:	8812      	ldrh	r2, [r2, #0]
 801e030:	b292      	uxth	r2, r2
 801e032:	9202      	str	r2, [sp, #8]
 801e034:	9301      	str	r3, [sp, #4]
 801e036:	4b63      	ldr	r3, [pc, #396]	; (801e1c4 <tcp_listen_input+0x1e8>)
 801e038:	9300      	str	r3, [sp, #0]
 801e03a:	4b63      	ldr	r3, [pc, #396]	; (801e1c8 <tcp_listen_input+0x1ec>)
 801e03c:	4602      	mov	r2, r0
 801e03e:	6878      	ldr	r0, [r7, #4]
 801e040:	f002 ff80 	bl	8020f44 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801e044:	e0a9      	b.n	801e19a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801e046:	4b57      	ldr	r3, [pc, #348]	; (801e1a4 <tcp_listen_input+0x1c8>)
 801e048:	781b      	ldrb	r3, [r3, #0]
 801e04a:	f003 0302 	and.w	r3, r3, #2
 801e04e:	2b00      	cmp	r3, #0
 801e050:	f000 80a3 	beq.w	801e19a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	7d5b      	ldrb	r3, [r3, #21]
 801e058:	4618      	mov	r0, r3
 801e05a:	f7ff f927 	bl	801d2ac <tcp_alloc>
 801e05e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801e060:	697b      	ldr	r3, [r7, #20]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d111      	bne.n	801e08a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	699b      	ldr	r3, [r3, #24]
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	d00a      	beq.n	801e084 <tcp_listen_input+0xa8>
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	699b      	ldr	r3, [r3, #24]
 801e072:	687a      	ldr	r2, [r7, #4]
 801e074:	6910      	ldr	r0, [r2, #16]
 801e076:	f04f 32ff 	mov.w	r2, #4294967295
 801e07a:	2100      	movs	r1, #0
 801e07c:	4798      	blx	r3
 801e07e:	4603      	mov	r3, r0
 801e080:	73bb      	strb	r3, [r7, #14]
      return;
 801e082:	e08b      	b.n	801e19c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801e084:	23f0      	movs	r3, #240	; 0xf0
 801e086:	73bb      	strb	r3, [r7, #14]
      return;
 801e088:	e088      	b.n	801e19c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801e08a:	4b50      	ldr	r3, [pc, #320]	; (801e1cc <tcp_listen_input+0x1f0>)
 801e08c:	695a      	ldr	r2, [r3, #20]
 801e08e:	697b      	ldr	r3, [r7, #20]
 801e090:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801e092:	4b4e      	ldr	r3, [pc, #312]	; (801e1cc <tcp_listen_input+0x1f0>)
 801e094:	691a      	ldr	r2, [r3, #16]
 801e096:	697b      	ldr	r3, [r7, #20]
 801e098:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	8ada      	ldrh	r2, [r3, #22]
 801e09e:	697b      	ldr	r3, [r7, #20]
 801e0a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801e0a2:	4b47      	ldr	r3, [pc, #284]	; (801e1c0 <tcp_listen_input+0x1e4>)
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	881b      	ldrh	r3, [r3, #0]
 801e0a8:	b29a      	uxth	r2, r3
 801e0aa:	697b      	ldr	r3, [r7, #20]
 801e0ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801e0ae:	697b      	ldr	r3, [r7, #20]
 801e0b0:	2203      	movs	r2, #3
 801e0b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801e0b4:	4b41      	ldr	r3, [pc, #260]	; (801e1bc <tcp_listen_input+0x1e0>)
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	1c5a      	adds	r2, r3, #1
 801e0ba:	697b      	ldr	r3, [r7, #20]
 801e0bc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801e0be:	697b      	ldr	r3, [r7, #20]
 801e0c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e0c2:	697b      	ldr	r3, [r7, #20]
 801e0c4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801e0c6:	6978      	ldr	r0, [r7, #20]
 801e0c8:	f7ff fa58 	bl	801d57c <tcp_next_iss>
 801e0cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801e0ce:	697b      	ldr	r3, [r7, #20]
 801e0d0:	693a      	ldr	r2, [r7, #16]
 801e0d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801e0d4:	697b      	ldr	r3, [r7, #20]
 801e0d6:	693a      	ldr	r2, [r7, #16]
 801e0d8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801e0da:	697b      	ldr	r3, [r7, #20]
 801e0dc:	693a      	ldr	r2, [r7, #16]
 801e0de:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801e0e0:	697b      	ldr	r3, [r7, #20]
 801e0e2:	693a      	ldr	r2, [r7, #16]
 801e0e4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801e0e6:	4b35      	ldr	r3, [pc, #212]	; (801e1bc <tcp_listen_input+0x1e0>)
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	1e5a      	subs	r2, r3, #1
 801e0ec:	697b      	ldr	r3, [r7, #20]
 801e0ee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	691a      	ldr	r2, [r3, #16]
 801e0f4:	697b      	ldr	r3, [r7, #20]
 801e0f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801e0f8:	697b      	ldr	r3, [r7, #20]
 801e0fa:	687a      	ldr	r2, [r7, #4]
 801e0fc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	7a5b      	ldrb	r3, [r3, #9]
 801e102:	f003 030c 	and.w	r3, r3, #12
 801e106:	b2da      	uxtb	r2, r3
 801e108:	697b      	ldr	r3, [r7, #20]
 801e10a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	7a1a      	ldrb	r2, [r3, #8]
 801e110:	697b      	ldr	r3, [r7, #20]
 801e112:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801e114:	4b2e      	ldr	r3, [pc, #184]	; (801e1d0 <tcp_listen_input+0x1f4>)
 801e116:	681a      	ldr	r2, [r3, #0]
 801e118:	697b      	ldr	r3, [r7, #20]
 801e11a:	60da      	str	r2, [r3, #12]
 801e11c:	4a2c      	ldr	r2, [pc, #176]	; (801e1d0 <tcp_listen_input+0x1f4>)
 801e11e:	697b      	ldr	r3, [r7, #20]
 801e120:	6013      	str	r3, [r2, #0]
 801e122:	f003 f8d1 	bl	80212c8 <tcp_timer_needed>
 801e126:	4b2b      	ldr	r3, [pc, #172]	; (801e1d4 <tcp_listen_input+0x1f8>)
 801e128:	2201      	movs	r2, #1
 801e12a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801e12c:	6978      	ldr	r0, [r7, #20]
 801e12e:	f001 fd8f 	bl	801fc50 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801e132:	4b23      	ldr	r3, [pc, #140]	; (801e1c0 <tcp_listen_input+0x1e4>)
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	89db      	ldrh	r3, [r3, #14]
 801e138:	b29a      	uxth	r2, r3
 801e13a:	697b      	ldr	r3, [r7, #20]
 801e13c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801e140:	697b      	ldr	r3, [r7, #20]
 801e142:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e146:	697b      	ldr	r3, [r7, #20]
 801e148:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801e14c:	697b      	ldr	r3, [r7, #20]
 801e14e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801e150:	697b      	ldr	r3, [r7, #20]
 801e152:	3304      	adds	r3, #4
 801e154:	4618      	mov	r0, r3
 801e156:	f006 fe85 	bl	8024e64 <ip4_route>
 801e15a:	4601      	mov	r1, r0
 801e15c:	697b      	ldr	r3, [r7, #20]
 801e15e:	3304      	adds	r3, #4
 801e160:	461a      	mov	r2, r3
 801e162:	4620      	mov	r0, r4
 801e164:	f7ff fa30 	bl	801d5c8 <tcp_eff_send_mss_netif>
 801e168:	4603      	mov	r3, r0
 801e16a:	461a      	mov	r2, r3
 801e16c:	697b      	ldr	r3, [r7, #20]
 801e16e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801e170:	2112      	movs	r1, #18
 801e172:	6978      	ldr	r0, [r7, #20]
 801e174:	f002 f844 	bl	8020200 <tcp_enqueue_flags>
 801e178:	4603      	mov	r3, r0
 801e17a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801e17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e180:	2b00      	cmp	r3, #0
 801e182:	d004      	beq.n	801e18e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801e184:	2100      	movs	r1, #0
 801e186:	6978      	ldr	r0, [r7, #20]
 801e188:	f7fe f97e 	bl	801c488 <tcp_abandon>
      return;
 801e18c:	e006      	b.n	801e19c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801e18e:	6978      	ldr	r0, [r7, #20]
 801e190:	f002 f924 	bl	80203dc <tcp_output>
  return;
 801e194:	e001      	b.n	801e19a <tcp_listen_input+0x1be>
    return;
 801e196:	bf00      	nop
 801e198:	e000      	b.n	801e19c <tcp_listen_input+0x1c0>
  return;
 801e19a:	bf00      	nop
}
 801e19c:	371c      	adds	r7, #28
 801e19e:	46bd      	mov	sp, r7
 801e1a0:	bd90      	pop	{r4, r7, pc}
 801e1a2:	bf00      	nop
 801e1a4:	2400cf9c 	.word	0x2400cf9c
 801e1a8:	08029768 	.word	0x08029768
 801e1ac:	08029960 	.word	0x08029960
 801e1b0:	080297b4 	.word	0x080297b4
 801e1b4:	2400cf94 	.word	0x2400cf94
 801e1b8:	2400cf9a 	.word	0x2400cf9a
 801e1bc:	2400cf90 	.word	0x2400cf90
 801e1c0:	2400cf80 	.word	0x2400cf80
 801e1c4:	24009e48 	.word	0x24009e48
 801e1c8:	24009e4c 	.word	0x24009e4c
 801e1cc:	24009e38 	.word	0x24009e38
 801e1d0:	2400cf64 	.word	0x2400cf64
 801e1d4:	2400cf6c 	.word	0x2400cf6c

0801e1d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b086      	sub	sp, #24
 801e1dc:	af04      	add	r7, sp, #16
 801e1de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801e1e0:	4b2f      	ldr	r3, [pc, #188]	; (801e2a0 <tcp_timewait_input+0xc8>)
 801e1e2:	781b      	ldrb	r3, [r3, #0]
 801e1e4:	f003 0304 	and.w	r3, r3, #4
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d153      	bne.n	801e294 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d106      	bne.n	801e200 <tcp_timewait_input+0x28>
 801e1f2:	4b2c      	ldr	r3, [pc, #176]	; (801e2a4 <tcp_timewait_input+0xcc>)
 801e1f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 801e1f8:	492b      	ldr	r1, [pc, #172]	; (801e2a8 <tcp_timewait_input+0xd0>)
 801e1fa:	482c      	ldr	r0, [pc, #176]	; (801e2ac <tcp_timewait_input+0xd4>)
 801e1fc:	f009 f95c 	bl	80274b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801e200:	4b27      	ldr	r3, [pc, #156]	; (801e2a0 <tcp_timewait_input+0xc8>)
 801e202:	781b      	ldrb	r3, [r3, #0]
 801e204:	f003 0302 	and.w	r3, r3, #2
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d02a      	beq.n	801e262 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801e20c:	4b28      	ldr	r3, [pc, #160]	; (801e2b0 <tcp_timewait_input+0xd8>)
 801e20e:	681a      	ldr	r2, [r3, #0]
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e214:	1ad3      	subs	r3, r2, r3
 801e216:	2b00      	cmp	r3, #0
 801e218:	db2d      	blt.n	801e276 <tcp_timewait_input+0x9e>
 801e21a:	4b25      	ldr	r3, [pc, #148]	; (801e2b0 <tcp_timewait_input+0xd8>)
 801e21c:	681a      	ldr	r2, [r3, #0]
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e222:	6879      	ldr	r1, [r7, #4]
 801e224:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e226:	440b      	add	r3, r1
 801e228:	1ad3      	subs	r3, r2, r3
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	dc23      	bgt.n	801e276 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e22e:	4b21      	ldr	r3, [pc, #132]	; (801e2b4 <tcp_timewait_input+0xdc>)
 801e230:	6819      	ldr	r1, [r3, #0]
 801e232:	4b21      	ldr	r3, [pc, #132]	; (801e2b8 <tcp_timewait_input+0xe0>)
 801e234:	881b      	ldrh	r3, [r3, #0]
 801e236:	461a      	mov	r2, r3
 801e238:	4b1d      	ldr	r3, [pc, #116]	; (801e2b0 <tcp_timewait_input+0xd8>)
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e23e:	4b1f      	ldr	r3, [pc, #124]	; (801e2bc <tcp_timewait_input+0xe4>)
 801e240:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e242:	885b      	ldrh	r3, [r3, #2]
 801e244:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e246:	4a1d      	ldr	r2, [pc, #116]	; (801e2bc <tcp_timewait_input+0xe4>)
 801e248:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e24a:	8812      	ldrh	r2, [r2, #0]
 801e24c:	b292      	uxth	r2, r2
 801e24e:	9202      	str	r2, [sp, #8]
 801e250:	9301      	str	r3, [sp, #4]
 801e252:	4b1b      	ldr	r3, [pc, #108]	; (801e2c0 <tcp_timewait_input+0xe8>)
 801e254:	9300      	str	r3, [sp, #0]
 801e256:	4b1b      	ldr	r3, [pc, #108]	; (801e2c4 <tcp_timewait_input+0xec>)
 801e258:	4602      	mov	r2, r0
 801e25a:	6878      	ldr	r0, [r7, #4]
 801e25c:	f002 fe72 	bl	8020f44 <tcp_rst>
      return;
 801e260:	e01b      	b.n	801e29a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801e262:	4b0f      	ldr	r3, [pc, #60]	; (801e2a0 <tcp_timewait_input+0xc8>)
 801e264:	781b      	ldrb	r3, [r3, #0]
 801e266:	f003 0301 	and.w	r3, r3, #1
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d003      	beq.n	801e276 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801e26e:	4b16      	ldr	r3, [pc, #88]	; (801e2c8 <tcp_timewait_input+0xf0>)
 801e270:	681a      	ldr	r2, [r3, #0]
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801e276:	4b10      	ldr	r3, [pc, #64]	; (801e2b8 <tcp_timewait_input+0xe0>)
 801e278:	881b      	ldrh	r3, [r3, #0]
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	d00c      	beq.n	801e298 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	8b5b      	ldrh	r3, [r3, #26]
 801e282:	f043 0302 	orr.w	r3, r3, #2
 801e286:	b29a      	uxth	r2, r3
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801e28c:	6878      	ldr	r0, [r7, #4]
 801e28e:	f002 f8a5 	bl	80203dc <tcp_output>
  }
  return;
 801e292:	e001      	b.n	801e298 <tcp_timewait_input+0xc0>
    return;
 801e294:	bf00      	nop
 801e296:	e000      	b.n	801e29a <tcp_timewait_input+0xc2>
  return;
 801e298:	bf00      	nop
}
 801e29a:	3708      	adds	r7, #8
 801e29c:	46bd      	mov	sp, r7
 801e29e:	bd80      	pop	{r7, pc}
 801e2a0:	2400cf9c 	.word	0x2400cf9c
 801e2a4:	08029768 	.word	0x08029768
 801e2a8:	08029980 	.word	0x08029980
 801e2ac:	080297b4 	.word	0x080297b4
 801e2b0:	2400cf90 	.word	0x2400cf90
 801e2b4:	2400cf94 	.word	0x2400cf94
 801e2b8:	2400cf9a 	.word	0x2400cf9a
 801e2bc:	2400cf80 	.word	0x2400cf80
 801e2c0:	24009e48 	.word	0x24009e48
 801e2c4:	24009e4c 	.word	0x24009e4c
 801e2c8:	2400cf58 	.word	0x2400cf58

0801e2cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801e2cc:	b590      	push	{r4, r7, lr}
 801e2ce:	b08d      	sub	sp, #52	; 0x34
 801e2d0:	af04      	add	r7, sp, #16
 801e2d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801e2d4:	2300      	movs	r3, #0
 801e2d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801e2d8:	2300      	movs	r3, #0
 801e2da:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d106      	bne.n	801e2f0 <tcp_process+0x24>
 801e2e2:	4b9d      	ldr	r3, [pc, #628]	; (801e558 <tcp_process+0x28c>)
 801e2e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801e2e8:	499c      	ldr	r1, [pc, #624]	; (801e55c <tcp_process+0x290>)
 801e2ea:	489d      	ldr	r0, [pc, #628]	; (801e560 <tcp_process+0x294>)
 801e2ec:	f009 f8e4 	bl	80274b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801e2f0:	4b9c      	ldr	r3, [pc, #624]	; (801e564 <tcp_process+0x298>)
 801e2f2:	781b      	ldrb	r3, [r3, #0]
 801e2f4:	f003 0304 	and.w	r3, r3, #4
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d04e      	beq.n	801e39a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	7d1b      	ldrb	r3, [r3, #20]
 801e300:	2b02      	cmp	r3, #2
 801e302:	d108      	bne.n	801e316 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e308:	4b97      	ldr	r3, [pc, #604]	; (801e568 <tcp_process+0x29c>)
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	429a      	cmp	r2, r3
 801e30e:	d123      	bne.n	801e358 <tcp_process+0x8c>
        acceptable = 1;
 801e310:	2301      	movs	r3, #1
 801e312:	76fb      	strb	r3, [r7, #27]
 801e314:	e020      	b.n	801e358 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e31a:	4b94      	ldr	r3, [pc, #592]	; (801e56c <tcp_process+0x2a0>)
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	429a      	cmp	r2, r3
 801e320:	d102      	bne.n	801e328 <tcp_process+0x5c>
        acceptable = 1;
 801e322:	2301      	movs	r3, #1
 801e324:	76fb      	strb	r3, [r7, #27]
 801e326:	e017      	b.n	801e358 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e328:	4b90      	ldr	r3, [pc, #576]	; (801e56c <tcp_process+0x2a0>)
 801e32a:	681a      	ldr	r2, [r3, #0]
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e330:	1ad3      	subs	r3, r2, r3
 801e332:	2b00      	cmp	r3, #0
 801e334:	db10      	blt.n	801e358 <tcp_process+0x8c>
 801e336:	4b8d      	ldr	r3, [pc, #564]	; (801e56c <tcp_process+0x2a0>)
 801e338:	681a      	ldr	r2, [r3, #0]
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e33e:	6879      	ldr	r1, [r7, #4]
 801e340:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e342:	440b      	add	r3, r1
 801e344:	1ad3      	subs	r3, r2, r3
 801e346:	2b00      	cmp	r3, #0
 801e348:	dc06      	bgt.n	801e358 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	8b5b      	ldrh	r3, [r3, #26]
 801e34e:	f043 0302 	orr.w	r3, r3, #2
 801e352:	b29a      	uxth	r2, r3
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801e358:	7efb      	ldrb	r3, [r7, #27]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d01b      	beq.n	801e396 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	7d1b      	ldrb	r3, [r3, #20]
 801e362:	2b00      	cmp	r3, #0
 801e364:	d106      	bne.n	801e374 <tcp_process+0xa8>
 801e366:	4b7c      	ldr	r3, [pc, #496]	; (801e558 <tcp_process+0x28c>)
 801e368:	f44f 724e 	mov.w	r2, #824	; 0x338
 801e36c:	4980      	ldr	r1, [pc, #512]	; (801e570 <tcp_process+0x2a4>)
 801e36e:	487c      	ldr	r0, [pc, #496]	; (801e560 <tcp_process+0x294>)
 801e370:	f009 f8a2 	bl	80274b8 <iprintf>
      recv_flags |= TF_RESET;
 801e374:	4b7f      	ldr	r3, [pc, #508]	; (801e574 <tcp_process+0x2a8>)
 801e376:	781b      	ldrb	r3, [r3, #0]
 801e378:	f043 0308 	orr.w	r3, r3, #8
 801e37c:	b2da      	uxtb	r2, r3
 801e37e:	4b7d      	ldr	r3, [pc, #500]	; (801e574 <tcp_process+0x2a8>)
 801e380:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	8b5b      	ldrh	r3, [r3, #26]
 801e386:	f023 0301 	bic.w	r3, r3, #1
 801e38a:	b29a      	uxth	r2, r3
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801e390:	f06f 030d 	mvn.w	r3, #13
 801e394:	e37a      	b.n	801ea8c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801e396:	2300      	movs	r3, #0
 801e398:	e378      	b.n	801ea8c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801e39a:	4b72      	ldr	r3, [pc, #456]	; (801e564 <tcp_process+0x298>)
 801e39c:	781b      	ldrb	r3, [r3, #0]
 801e39e:	f003 0302 	and.w	r3, r3, #2
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d010      	beq.n	801e3c8 <tcp_process+0xfc>
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	7d1b      	ldrb	r3, [r3, #20]
 801e3aa:	2b02      	cmp	r3, #2
 801e3ac:	d00c      	beq.n	801e3c8 <tcp_process+0xfc>
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	7d1b      	ldrb	r3, [r3, #20]
 801e3b2:	2b03      	cmp	r3, #3
 801e3b4:	d008      	beq.n	801e3c8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	8b5b      	ldrh	r3, [r3, #26]
 801e3ba:	f043 0302 	orr.w	r3, r3, #2
 801e3be:	b29a      	uxth	r2, r3
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801e3c4:	2300      	movs	r3, #0
 801e3c6:	e361      	b.n	801ea8c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	8b5b      	ldrh	r3, [r3, #26]
 801e3cc:	f003 0310 	and.w	r3, r3, #16
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d103      	bne.n	801e3dc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801e3d4:	4b68      	ldr	r3, [pc, #416]	; (801e578 <tcp_process+0x2ac>)
 801e3d6:	681a      	ldr	r2, [r3, #0]
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	2200      	movs	r2, #0
 801e3e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	2200      	movs	r2, #0
 801e3e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801e3ec:	6878      	ldr	r0, [r7, #4]
 801e3ee:	f001 fc2f 	bl	801fc50 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	7d1b      	ldrb	r3, [r3, #20]
 801e3f6:	3b02      	subs	r3, #2
 801e3f8:	2b07      	cmp	r3, #7
 801e3fa:	f200 8337 	bhi.w	801ea6c <tcp_process+0x7a0>
 801e3fe:	a201      	add	r2, pc, #4	; (adr r2, 801e404 <tcp_process+0x138>)
 801e400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e404:	0801e425 	.word	0x0801e425
 801e408:	0801e655 	.word	0x0801e655
 801e40c:	0801e7cd 	.word	0x0801e7cd
 801e410:	0801e7f7 	.word	0x0801e7f7
 801e414:	0801e91b 	.word	0x0801e91b
 801e418:	0801e7cd 	.word	0x0801e7cd
 801e41c:	0801e9a7 	.word	0x0801e9a7
 801e420:	0801ea37 	.word	0x0801ea37
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801e424:	4b4f      	ldr	r3, [pc, #316]	; (801e564 <tcp_process+0x298>)
 801e426:	781b      	ldrb	r3, [r3, #0]
 801e428:	f003 0310 	and.w	r3, r3, #16
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	f000 80e4 	beq.w	801e5fa <tcp_process+0x32e>
 801e432:	4b4c      	ldr	r3, [pc, #304]	; (801e564 <tcp_process+0x298>)
 801e434:	781b      	ldrb	r3, [r3, #0]
 801e436:	f003 0302 	and.w	r3, r3, #2
 801e43a:	2b00      	cmp	r3, #0
 801e43c:	f000 80dd 	beq.w	801e5fa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e444:	1c5a      	adds	r2, r3, #1
 801e446:	4b48      	ldr	r3, [pc, #288]	; (801e568 <tcp_process+0x29c>)
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	429a      	cmp	r2, r3
 801e44c:	f040 80d5 	bne.w	801e5fa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801e450:	4b46      	ldr	r3, [pc, #280]	; (801e56c <tcp_process+0x2a0>)
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	1c5a      	adds	r2, r3, #1
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801e462:	4b41      	ldr	r3, [pc, #260]	; (801e568 <tcp_process+0x29c>)
 801e464:	681a      	ldr	r2, [r3, #0]
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801e46a:	4b44      	ldr	r3, [pc, #272]	; (801e57c <tcp_process+0x2b0>)
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	89db      	ldrh	r3, [r3, #14]
 801e470:	b29a      	uxth	r2, r3
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801e484:	4b39      	ldr	r3, [pc, #228]	; (801e56c <tcp_process+0x2a0>)
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	1e5a      	subs	r2, r3, #1
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	2204      	movs	r2, #4
 801e492:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	3304      	adds	r3, #4
 801e49c:	4618      	mov	r0, r3
 801e49e:	f006 fce1 	bl	8024e64 <ip4_route>
 801e4a2:	4601      	mov	r1, r0
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	3304      	adds	r3, #4
 801e4a8:	461a      	mov	r2, r3
 801e4aa:	4620      	mov	r0, r4
 801e4ac:	f7ff f88c 	bl	801d5c8 <tcp_eff_send_mss_netif>
 801e4b0:	4603      	mov	r3, r0
 801e4b2:	461a      	mov	r2, r3
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e4bc:	009a      	lsls	r2, r3, #2
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e4c2:	005b      	lsls	r3, r3, #1
 801e4c4:	f241 111c 	movw	r1, #4380	; 0x111c
 801e4c8:	428b      	cmp	r3, r1
 801e4ca:	bf38      	it	cc
 801e4cc:	460b      	movcc	r3, r1
 801e4ce:	429a      	cmp	r2, r3
 801e4d0:	d204      	bcs.n	801e4dc <tcp_process+0x210>
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e4d6:	009b      	lsls	r3, r3, #2
 801e4d8:	b29b      	uxth	r3, r3
 801e4da:	e00d      	b.n	801e4f8 <tcp_process+0x22c>
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e4e0:	005b      	lsls	r3, r3, #1
 801e4e2:	f241 121c 	movw	r2, #4380	; 0x111c
 801e4e6:	4293      	cmp	r3, r2
 801e4e8:	d904      	bls.n	801e4f4 <tcp_process+0x228>
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e4ee:	005b      	lsls	r3, r3, #1
 801e4f0:	b29b      	uxth	r3, r3
 801e4f2:	e001      	b.n	801e4f8 <tcp_process+0x22c>
 801e4f4:	f241 131c 	movw	r3, #4380	; 0x111c
 801e4f8:	687a      	ldr	r2, [r7, #4]
 801e4fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e504:	2b00      	cmp	r3, #0
 801e506:	d106      	bne.n	801e516 <tcp_process+0x24a>
 801e508:	4b13      	ldr	r3, [pc, #76]	; (801e558 <tcp_process+0x28c>)
 801e50a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801e50e:	491c      	ldr	r1, [pc, #112]	; (801e580 <tcp_process+0x2b4>)
 801e510:	4813      	ldr	r0, [pc, #76]	; (801e560 <tcp_process+0x294>)
 801e512:	f008 ffd1 	bl	80274b8 <iprintf>
        --pcb->snd_queuelen;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e51c:	3b01      	subs	r3, #1
 801e51e:	b29a      	uxth	r2, r3
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e52a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801e52c:	69fb      	ldr	r3, [r7, #28]
 801e52e:	2b00      	cmp	r3, #0
 801e530:	d12a      	bne.n	801e588 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e536:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e538:	69fb      	ldr	r3, [r7, #28]
 801e53a:	2b00      	cmp	r3, #0
 801e53c:	d106      	bne.n	801e54c <tcp_process+0x280>
 801e53e:	4b06      	ldr	r3, [pc, #24]	; (801e558 <tcp_process+0x28c>)
 801e540:	f44f 725d 	mov.w	r2, #884	; 0x374
 801e544:	490f      	ldr	r1, [pc, #60]	; (801e584 <tcp_process+0x2b8>)
 801e546:	4806      	ldr	r0, [pc, #24]	; (801e560 <tcp_process+0x294>)
 801e548:	f008 ffb6 	bl	80274b8 <iprintf>
          pcb->unsent = rseg->next;
 801e54c:	69fb      	ldr	r3, [r7, #28]
 801e54e:	681a      	ldr	r2, [r3, #0]
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	66da      	str	r2, [r3, #108]	; 0x6c
 801e554:	e01c      	b.n	801e590 <tcp_process+0x2c4>
 801e556:	bf00      	nop
 801e558:	08029768 	.word	0x08029768
 801e55c:	080299a0 	.word	0x080299a0
 801e560:	080297b4 	.word	0x080297b4
 801e564:	2400cf9c 	.word	0x2400cf9c
 801e568:	2400cf94 	.word	0x2400cf94
 801e56c:	2400cf90 	.word	0x2400cf90
 801e570:	080299bc 	.word	0x080299bc
 801e574:	2400cf9d 	.word	0x2400cf9d
 801e578:	2400cf58 	.word	0x2400cf58
 801e57c:	2400cf80 	.word	0x2400cf80
 801e580:	080299dc 	.word	0x080299dc
 801e584:	080299f4 	.word	0x080299f4
        } else {
          pcb->unacked = rseg->next;
 801e588:	69fb      	ldr	r3, [r7, #28]
 801e58a:	681a      	ldr	r2, [r3, #0]
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801e590:	69f8      	ldr	r0, [r7, #28]
 801e592:	f7fe fd22 	bl	801cfda <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d104      	bne.n	801e5a8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e5a4:	861a      	strh	r2, [r3, #48]	; 0x30
 801e5a6:	e006      	b.n	801e5b6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	2200      	movs	r2, #0
 801e5b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d00a      	beq.n	801e5d6 <tcp_process+0x30a>
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e5c6:	687a      	ldr	r2, [r7, #4]
 801e5c8:	6910      	ldr	r0, [r2, #16]
 801e5ca:	2200      	movs	r2, #0
 801e5cc:	6879      	ldr	r1, [r7, #4]
 801e5ce:	4798      	blx	r3
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	76bb      	strb	r3, [r7, #26]
 801e5d4:	e001      	b.n	801e5da <tcp_process+0x30e>
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801e5da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e5de:	f113 0f0d 	cmn.w	r3, #13
 801e5e2:	d102      	bne.n	801e5ea <tcp_process+0x31e>
          return ERR_ABRT;
 801e5e4:	f06f 030c 	mvn.w	r3, #12
 801e5e8:	e250      	b.n	801ea8c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	8b5b      	ldrh	r3, [r3, #26]
 801e5ee:	f043 0302 	orr.w	r3, r3, #2
 801e5f2:	b29a      	uxth	r2, r3
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801e5f8:	e23a      	b.n	801ea70 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801e5fa:	4b98      	ldr	r3, [pc, #608]	; (801e85c <tcp_process+0x590>)
 801e5fc:	781b      	ldrb	r3, [r3, #0]
 801e5fe:	f003 0310 	and.w	r3, r3, #16
 801e602:	2b00      	cmp	r3, #0
 801e604:	f000 8234 	beq.w	801ea70 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e608:	4b95      	ldr	r3, [pc, #596]	; (801e860 <tcp_process+0x594>)
 801e60a:	6819      	ldr	r1, [r3, #0]
 801e60c:	4b95      	ldr	r3, [pc, #596]	; (801e864 <tcp_process+0x598>)
 801e60e:	881b      	ldrh	r3, [r3, #0]
 801e610:	461a      	mov	r2, r3
 801e612:	4b95      	ldr	r3, [pc, #596]	; (801e868 <tcp_process+0x59c>)
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e618:	4b94      	ldr	r3, [pc, #592]	; (801e86c <tcp_process+0x5a0>)
 801e61a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e61c:	885b      	ldrh	r3, [r3, #2]
 801e61e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e620:	4a92      	ldr	r2, [pc, #584]	; (801e86c <tcp_process+0x5a0>)
 801e622:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e624:	8812      	ldrh	r2, [r2, #0]
 801e626:	b292      	uxth	r2, r2
 801e628:	9202      	str	r2, [sp, #8]
 801e62a:	9301      	str	r3, [sp, #4]
 801e62c:	4b90      	ldr	r3, [pc, #576]	; (801e870 <tcp_process+0x5a4>)
 801e62e:	9300      	str	r3, [sp, #0]
 801e630:	4b90      	ldr	r3, [pc, #576]	; (801e874 <tcp_process+0x5a8>)
 801e632:	4602      	mov	r2, r0
 801e634:	6878      	ldr	r0, [r7, #4]
 801e636:	f002 fc85 	bl	8020f44 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e640:	2b05      	cmp	r3, #5
 801e642:	f200 8215 	bhi.w	801ea70 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	2200      	movs	r2, #0
 801e64a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801e64c:	6878      	ldr	r0, [r7, #4]
 801e64e:	f002 fa4f 	bl	8020af0 <tcp_rexmit_rto>
      break;
 801e652:	e20d      	b.n	801ea70 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801e654:	4b81      	ldr	r3, [pc, #516]	; (801e85c <tcp_process+0x590>)
 801e656:	781b      	ldrb	r3, [r3, #0]
 801e658:	f003 0310 	and.w	r3, r3, #16
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	f000 80a1 	beq.w	801e7a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e662:	4b7f      	ldr	r3, [pc, #508]	; (801e860 <tcp_process+0x594>)
 801e664:	681a      	ldr	r2, [r3, #0]
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e66a:	1ad3      	subs	r3, r2, r3
 801e66c:	3b01      	subs	r3, #1
 801e66e:	2b00      	cmp	r3, #0
 801e670:	db7e      	blt.n	801e770 <tcp_process+0x4a4>
 801e672:	4b7b      	ldr	r3, [pc, #492]	; (801e860 <tcp_process+0x594>)
 801e674:	681a      	ldr	r2, [r3, #0]
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e67a:	1ad3      	subs	r3, r2, r3
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	dc77      	bgt.n	801e770 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	2204      	movs	r2, #4
 801e684:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d102      	bne.n	801e694 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801e68e:	23fa      	movs	r3, #250	; 0xfa
 801e690:	76bb      	strb	r3, [r7, #26]
 801e692:	e01d      	b.n	801e6d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e698:	699b      	ldr	r3, [r3, #24]
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d106      	bne.n	801e6ac <tcp_process+0x3e0>
 801e69e:	4b76      	ldr	r3, [pc, #472]	; (801e878 <tcp_process+0x5ac>)
 801e6a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801e6a4:	4975      	ldr	r1, [pc, #468]	; (801e87c <tcp_process+0x5b0>)
 801e6a6:	4876      	ldr	r0, [pc, #472]	; (801e880 <tcp_process+0x5b4>)
 801e6a8:	f008 ff06 	bl	80274b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e6b0:	699b      	ldr	r3, [r3, #24]
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d00a      	beq.n	801e6cc <tcp_process+0x400>
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e6ba:	699b      	ldr	r3, [r3, #24]
 801e6bc:	687a      	ldr	r2, [r7, #4]
 801e6be:	6910      	ldr	r0, [r2, #16]
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	6879      	ldr	r1, [r7, #4]
 801e6c4:	4798      	blx	r3
 801e6c6:	4603      	mov	r3, r0
 801e6c8:	76bb      	strb	r3, [r7, #26]
 801e6ca:	e001      	b.n	801e6d0 <tcp_process+0x404>
 801e6cc:	23f0      	movs	r3, #240	; 0xf0
 801e6ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801e6d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d00a      	beq.n	801e6ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801e6d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e6dc:	f113 0f0d 	cmn.w	r3, #13
 801e6e0:	d002      	beq.n	801e6e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 801e6e2:	6878      	ldr	r0, [r7, #4]
 801e6e4:	f7fd ff8e 	bl	801c604 <tcp_abort>
            }
            return ERR_ABRT;
 801e6e8:	f06f 030c 	mvn.w	r3, #12
 801e6ec:	e1ce      	b.n	801ea8c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801e6ee:	6878      	ldr	r0, [r7, #4]
 801e6f0:	f000 fae0 	bl	801ecb4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801e6f4:	4b63      	ldr	r3, [pc, #396]	; (801e884 <tcp_process+0x5b8>)
 801e6f6:	881b      	ldrh	r3, [r3, #0]
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d005      	beq.n	801e708 <tcp_process+0x43c>
            recv_acked--;
 801e6fc:	4b61      	ldr	r3, [pc, #388]	; (801e884 <tcp_process+0x5b8>)
 801e6fe:	881b      	ldrh	r3, [r3, #0]
 801e700:	3b01      	subs	r3, #1
 801e702:	b29a      	uxth	r2, r3
 801e704:	4b5f      	ldr	r3, [pc, #380]	; (801e884 <tcp_process+0x5b8>)
 801e706:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e70c:	009a      	lsls	r2, r3, #2
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e712:	005b      	lsls	r3, r3, #1
 801e714:	f241 111c 	movw	r1, #4380	; 0x111c
 801e718:	428b      	cmp	r3, r1
 801e71a:	bf38      	it	cc
 801e71c:	460b      	movcc	r3, r1
 801e71e:	429a      	cmp	r2, r3
 801e720:	d204      	bcs.n	801e72c <tcp_process+0x460>
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e726:	009b      	lsls	r3, r3, #2
 801e728:	b29b      	uxth	r3, r3
 801e72a:	e00d      	b.n	801e748 <tcp_process+0x47c>
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e730:	005b      	lsls	r3, r3, #1
 801e732:	f241 121c 	movw	r2, #4380	; 0x111c
 801e736:	4293      	cmp	r3, r2
 801e738:	d904      	bls.n	801e744 <tcp_process+0x478>
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e73e:	005b      	lsls	r3, r3, #1
 801e740:	b29b      	uxth	r3, r3
 801e742:	e001      	b.n	801e748 <tcp_process+0x47c>
 801e744:	f241 131c 	movw	r3, #4380	; 0x111c
 801e748:	687a      	ldr	r2, [r7, #4]
 801e74a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801e74e:	4b4e      	ldr	r3, [pc, #312]	; (801e888 <tcp_process+0x5bc>)
 801e750:	781b      	ldrb	r3, [r3, #0]
 801e752:	f003 0320 	and.w	r3, r3, #32
 801e756:	2b00      	cmp	r3, #0
 801e758:	d037      	beq.n	801e7ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	8b5b      	ldrh	r3, [r3, #26]
 801e75e:	f043 0302 	orr.w	r3, r3, #2
 801e762:	b29a      	uxth	r2, r3
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	2207      	movs	r2, #7
 801e76c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801e76e:	e02c      	b.n	801e7ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e770:	4b3b      	ldr	r3, [pc, #236]	; (801e860 <tcp_process+0x594>)
 801e772:	6819      	ldr	r1, [r3, #0]
 801e774:	4b3b      	ldr	r3, [pc, #236]	; (801e864 <tcp_process+0x598>)
 801e776:	881b      	ldrh	r3, [r3, #0]
 801e778:	461a      	mov	r2, r3
 801e77a:	4b3b      	ldr	r3, [pc, #236]	; (801e868 <tcp_process+0x59c>)
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e780:	4b3a      	ldr	r3, [pc, #232]	; (801e86c <tcp_process+0x5a0>)
 801e782:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e784:	885b      	ldrh	r3, [r3, #2]
 801e786:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e788:	4a38      	ldr	r2, [pc, #224]	; (801e86c <tcp_process+0x5a0>)
 801e78a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e78c:	8812      	ldrh	r2, [r2, #0]
 801e78e:	b292      	uxth	r2, r2
 801e790:	9202      	str	r2, [sp, #8]
 801e792:	9301      	str	r3, [sp, #4]
 801e794:	4b36      	ldr	r3, [pc, #216]	; (801e870 <tcp_process+0x5a4>)
 801e796:	9300      	str	r3, [sp, #0]
 801e798:	4b36      	ldr	r3, [pc, #216]	; (801e874 <tcp_process+0x5a8>)
 801e79a:	4602      	mov	r2, r0
 801e79c:	6878      	ldr	r0, [r7, #4]
 801e79e:	f002 fbd1 	bl	8020f44 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801e7a2:	e167      	b.n	801ea74 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801e7a4:	4b2d      	ldr	r3, [pc, #180]	; (801e85c <tcp_process+0x590>)
 801e7a6:	781b      	ldrb	r3, [r3, #0]
 801e7a8:	f003 0302 	and.w	r3, r3, #2
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	f000 8161 	beq.w	801ea74 <tcp_process+0x7a8>
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7b6:	1e5a      	subs	r2, r3, #1
 801e7b8:	4b2b      	ldr	r3, [pc, #172]	; (801e868 <tcp_process+0x59c>)
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	429a      	cmp	r2, r3
 801e7be:	f040 8159 	bne.w	801ea74 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801e7c2:	6878      	ldr	r0, [r7, #4]
 801e7c4:	f002 f9b6 	bl	8020b34 <tcp_rexmit>
      break;
 801e7c8:	e154      	b.n	801ea74 <tcp_process+0x7a8>
 801e7ca:	e153      	b.n	801ea74 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801e7cc:	6878      	ldr	r0, [r7, #4]
 801e7ce:	f000 fa71 	bl	801ecb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801e7d2:	4b2d      	ldr	r3, [pc, #180]	; (801e888 <tcp_process+0x5bc>)
 801e7d4:	781b      	ldrb	r3, [r3, #0]
 801e7d6:	f003 0320 	and.w	r3, r3, #32
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	f000 814c 	beq.w	801ea78 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	8b5b      	ldrh	r3, [r3, #26]
 801e7e4:	f043 0302 	orr.w	r3, r3, #2
 801e7e8:	b29a      	uxth	r2, r3
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	2207      	movs	r2, #7
 801e7f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 801e7f4:	e140      	b.n	801ea78 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801e7f6:	6878      	ldr	r0, [r7, #4]
 801e7f8:	f000 fa5c 	bl	801ecb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e7fc:	4b22      	ldr	r3, [pc, #136]	; (801e888 <tcp_process+0x5bc>)
 801e7fe:	781b      	ldrb	r3, [r3, #0]
 801e800:	f003 0320 	and.w	r3, r3, #32
 801e804:	2b00      	cmp	r3, #0
 801e806:	d071      	beq.n	801e8ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e808:	4b14      	ldr	r3, [pc, #80]	; (801e85c <tcp_process+0x590>)
 801e80a:	781b      	ldrb	r3, [r3, #0]
 801e80c:	f003 0310 	and.w	r3, r3, #16
 801e810:	2b00      	cmp	r3, #0
 801e812:	d060      	beq.n	801e8d6 <tcp_process+0x60a>
 801e814:	687b      	ldr	r3, [r7, #4]
 801e816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e818:	4b11      	ldr	r3, [pc, #68]	; (801e860 <tcp_process+0x594>)
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	429a      	cmp	r2, r3
 801e81e:	d15a      	bne.n	801e8d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e824:	2b00      	cmp	r3, #0
 801e826:	d156      	bne.n	801e8d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	8b5b      	ldrh	r3, [r3, #26]
 801e82c:	f043 0302 	orr.w	r3, r3, #2
 801e830:	b29a      	uxth	r2, r3
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801e836:	6878      	ldr	r0, [r7, #4]
 801e838:	f7fe fdbc 	bl	801d3b4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801e83c:	4b13      	ldr	r3, [pc, #76]	; (801e88c <tcp_process+0x5c0>)
 801e83e:	681b      	ldr	r3, [r3, #0]
 801e840:	687a      	ldr	r2, [r7, #4]
 801e842:	429a      	cmp	r2, r3
 801e844:	d105      	bne.n	801e852 <tcp_process+0x586>
 801e846:	4b11      	ldr	r3, [pc, #68]	; (801e88c <tcp_process+0x5c0>)
 801e848:	681b      	ldr	r3, [r3, #0]
 801e84a:	68db      	ldr	r3, [r3, #12]
 801e84c:	4a0f      	ldr	r2, [pc, #60]	; (801e88c <tcp_process+0x5c0>)
 801e84e:	6013      	str	r3, [r2, #0]
 801e850:	e02e      	b.n	801e8b0 <tcp_process+0x5e4>
 801e852:	4b0e      	ldr	r3, [pc, #56]	; (801e88c <tcp_process+0x5c0>)
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	617b      	str	r3, [r7, #20]
 801e858:	e027      	b.n	801e8aa <tcp_process+0x5de>
 801e85a:	bf00      	nop
 801e85c:	2400cf9c 	.word	0x2400cf9c
 801e860:	2400cf94 	.word	0x2400cf94
 801e864:	2400cf9a 	.word	0x2400cf9a
 801e868:	2400cf90 	.word	0x2400cf90
 801e86c:	2400cf80 	.word	0x2400cf80
 801e870:	24009e48 	.word	0x24009e48
 801e874:	24009e4c 	.word	0x24009e4c
 801e878:	08029768 	.word	0x08029768
 801e87c:	08029a08 	.word	0x08029a08
 801e880:	080297b4 	.word	0x080297b4
 801e884:	2400cf98 	.word	0x2400cf98
 801e888:	2400cf9d 	.word	0x2400cf9d
 801e88c:	2400cf64 	.word	0x2400cf64
 801e890:	697b      	ldr	r3, [r7, #20]
 801e892:	68db      	ldr	r3, [r3, #12]
 801e894:	687a      	ldr	r2, [r7, #4]
 801e896:	429a      	cmp	r2, r3
 801e898:	d104      	bne.n	801e8a4 <tcp_process+0x5d8>
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	68da      	ldr	r2, [r3, #12]
 801e89e:	697b      	ldr	r3, [r7, #20]
 801e8a0:	60da      	str	r2, [r3, #12]
 801e8a2:	e005      	b.n	801e8b0 <tcp_process+0x5e4>
 801e8a4:	697b      	ldr	r3, [r7, #20]
 801e8a6:	68db      	ldr	r3, [r3, #12]
 801e8a8:	617b      	str	r3, [r7, #20]
 801e8aa:	697b      	ldr	r3, [r7, #20]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d1ef      	bne.n	801e890 <tcp_process+0x5c4>
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	60da      	str	r2, [r3, #12]
 801e8b6:	4b77      	ldr	r3, [pc, #476]	; (801ea94 <tcp_process+0x7c8>)
 801e8b8:	2201      	movs	r2, #1
 801e8ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	220a      	movs	r2, #10
 801e8c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801e8c2:	4b75      	ldr	r3, [pc, #468]	; (801ea98 <tcp_process+0x7cc>)
 801e8c4:	681a      	ldr	r2, [r3, #0]
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	60da      	str	r2, [r3, #12]
 801e8ca:	4a73      	ldr	r2, [pc, #460]	; (801ea98 <tcp_process+0x7cc>)
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	6013      	str	r3, [r2, #0]
 801e8d0:	f002 fcfa 	bl	80212c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801e8d4:	e0d2      	b.n	801ea7c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	8b5b      	ldrh	r3, [r3, #26]
 801e8da:	f043 0302 	orr.w	r3, r3, #2
 801e8de:	b29a      	uxth	r2, r3
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	2208      	movs	r2, #8
 801e8e8:	751a      	strb	r2, [r3, #20]
      break;
 801e8ea:	e0c7      	b.n	801ea7c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e8ec:	4b6b      	ldr	r3, [pc, #428]	; (801ea9c <tcp_process+0x7d0>)
 801e8ee:	781b      	ldrb	r3, [r3, #0]
 801e8f0:	f003 0310 	and.w	r3, r3, #16
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	f000 80c1 	beq.w	801ea7c <tcp_process+0x7b0>
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e8fe:	4b68      	ldr	r3, [pc, #416]	; (801eaa0 <tcp_process+0x7d4>)
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	429a      	cmp	r2, r3
 801e904:	f040 80ba 	bne.w	801ea7c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	f040 80b5 	bne.w	801ea7c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	2206      	movs	r2, #6
 801e916:	751a      	strb	r2, [r3, #20]
      break;
 801e918:	e0b0      	b.n	801ea7c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801e91a:	6878      	ldr	r0, [r7, #4]
 801e91c:	f000 f9ca 	bl	801ecb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e920:	4b60      	ldr	r3, [pc, #384]	; (801eaa4 <tcp_process+0x7d8>)
 801e922:	781b      	ldrb	r3, [r3, #0]
 801e924:	f003 0320 	and.w	r3, r3, #32
 801e928:	2b00      	cmp	r3, #0
 801e92a:	f000 80a9 	beq.w	801ea80 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	8b5b      	ldrh	r3, [r3, #26]
 801e932:	f043 0302 	orr.w	r3, r3, #2
 801e936:	b29a      	uxth	r2, r3
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801e93c:	6878      	ldr	r0, [r7, #4]
 801e93e:	f7fe fd39 	bl	801d3b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e942:	4b59      	ldr	r3, [pc, #356]	; (801eaa8 <tcp_process+0x7dc>)
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	687a      	ldr	r2, [r7, #4]
 801e948:	429a      	cmp	r2, r3
 801e94a:	d105      	bne.n	801e958 <tcp_process+0x68c>
 801e94c:	4b56      	ldr	r3, [pc, #344]	; (801eaa8 <tcp_process+0x7dc>)
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	68db      	ldr	r3, [r3, #12]
 801e952:	4a55      	ldr	r2, [pc, #340]	; (801eaa8 <tcp_process+0x7dc>)
 801e954:	6013      	str	r3, [r2, #0]
 801e956:	e013      	b.n	801e980 <tcp_process+0x6b4>
 801e958:	4b53      	ldr	r3, [pc, #332]	; (801eaa8 <tcp_process+0x7dc>)
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	613b      	str	r3, [r7, #16]
 801e95e:	e00c      	b.n	801e97a <tcp_process+0x6ae>
 801e960:	693b      	ldr	r3, [r7, #16]
 801e962:	68db      	ldr	r3, [r3, #12]
 801e964:	687a      	ldr	r2, [r7, #4]
 801e966:	429a      	cmp	r2, r3
 801e968:	d104      	bne.n	801e974 <tcp_process+0x6a8>
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	68da      	ldr	r2, [r3, #12]
 801e96e:	693b      	ldr	r3, [r7, #16]
 801e970:	60da      	str	r2, [r3, #12]
 801e972:	e005      	b.n	801e980 <tcp_process+0x6b4>
 801e974:	693b      	ldr	r3, [r7, #16]
 801e976:	68db      	ldr	r3, [r3, #12]
 801e978:	613b      	str	r3, [r7, #16]
 801e97a:	693b      	ldr	r3, [r7, #16]
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d1ef      	bne.n	801e960 <tcp_process+0x694>
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	2200      	movs	r2, #0
 801e984:	60da      	str	r2, [r3, #12]
 801e986:	4b43      	ldr	r3, [pc, #268]	; (801ea94 <tcp_process+0x7c8>)
 801e988:	2201      	movs	r2, #1
 801e98a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	220a      	movs	r2, #10
 801e990:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e992:	4b41      	ldr	r3, [pc, #260]	; (801ea98 <tcp_process+0x7cc>)
 801e994:	681a      	ldr	r2, [r3, #0]
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	60da      	str	r2, [r3, #12]
 801e99a:	4a3f      	ldr	r2, [pc, #252]	; (801ea98 <tcp_process+0x7cc>)
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	6013      	str	r3, [r2, #0]
 801e9a0:	f002 fc92 	bl	80212c8 <tcp_timer_needed>
      }
      break;
 801e9a4:	e06c      	b.n	801ea80 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801e9a6:	6878      	ldr	r0, [r7, #4]
 801e9a8:	f000 f984 	bl	801ecb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e9ac:	4b3b      	ldr	r3, [pc, #236]	; (801ea9c <tcp_process+0x7d0>)
 801e9ae:	781b      	ldrb	r3, [r3, #0]
 801e9b0:	f003 0310 	and.w	r3, r3, #16
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d065      	beq.n	801ea84 <tcp_process+0x7b8>
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9bc:	4b38      	ldr	r3, [pc, #224]	; (801eaa0 <tcp_process+0x7d4>)
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	429a      	cmp	r2, r3
 801e9c2:	d15f      	bne.n	801ea84 <tcp_process+0x7b8>
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e9c8:	2b00      	cmp	r3, #0
 801e9ca:	d15b      	bne.n	801ea84 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801e9cc:	6878      	ldr	r0, [r7, #4]
 801e9ce:	f7fe fcf1 	bl	801d3b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e9d2:	4b35      	ldr	r3, [pc, #212]	; (801eaa8 <tcp_process+0x7dc>)
 801e9d4:	681b      	ldr	r3, [r3, #0]
 801e9d6:	687a      	ldr	r2, [r7, #4]
 801e9d8:	429a      	cmp	r2, r3
 801e9da:	d105      	bne.n	801e9e8 <tcp_process+0x71c>
 801e9dc:	4b32      	ldr	r3, [pc, #200]	; (801eaa8 <tcp_process+0x7dc>)
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	68db      	ldr	r3, [r3, #12]
 801e9e2:	4a31      	ldr	r2, [pc, #196]	; (801eaa8 <tcp_process+0x7dc>)
 801e9e4:	6013      	str	r3, [r2, #0]
 801e9e6:	e013      	b.n	801ea10 <tcp_process+0x744>
 801e9e8:	4b2f      	ldr	r3, [pc, #188]	; (801eaa8 <tcp_process+0x7dc>)
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	60fb      	str	r3, [r7, #12]
 801e9ee:	e00c      	b.n	801ea0a <tcp_process+0x73e>
 801e9f0:	68fb      	ldr	r3, [r7, #12]
 801e9f2:	68db      	ldr	r3, [r3, #12]
 801e9f4:	687a      	ldr	r2, [r7, #4]
 801e9f6:	429a      	cmp	r2, r3
 801e9f8:	d104      	bne.n	801ea04 <tcp_process+0x738>
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	68da      	ldr	r2, [r3, #12]
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	60da      	str	r2, [r3, #12]
 801ea02:	e005      	b.n	801ea10 <tcp_process+0x744>
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	68db      	ldr	r3, [r3, #12]
 801ea08:	60fb      	str	r3, [r7, #12]
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d1ef      	bne.n	801e9f0 <tcp_process+0x724>
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	2200      	movs	r2, #0
 801ea14:	60da      	str	r2, [r3, #12]
 801ea16:	4b1f      	ldr	r3, [pc, #124]	; (801ea94 <tcp_process+0x7c8>)
 801ea18:	2201      	movs	r2, #1
 801ea1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	220a      	movs	r2, #10
 801ea20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801ea22:	4b1d      	ldr	r3, [pc, #116]	; (801ea98 <tcp_process+0x7cc>)
 801ea24:	681a      	ldr	r2, [r3, #0]
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	60da      	str	r2, [r3, #12]
 801ea2a:	4a1b      	ldr	r2, [pc, #108]	; (801ea98 <tcp_process+0x7cc>)
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	6013      	str	r3, [r2, #0]
 801ea30:	f002 fc4a 	bl	80212c8 <tcp_timer_needed>
      }
      break;
 801ea34:	e026      	b.n	801ea84 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801ea36:	6878      	ldr	r0, [r7, #4]
 801ea38:	f000 f93c 	bl	801ecb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ea3c:	4b17      	ldr	r3, [pc, #92]	; (801ea9c <tcp_process+0x7d0>)
 801ea3e:	781b      	ldrb	r3, [r3, #0]
 801ea40:	f003 0310 	and.w	r3, r3, #16
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d01f      	beq.n	801ea88 <tcp_process+0x7bc>
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ea4c:	4b14      	ldr	r3, [pc, #80]	; (801eaa0 <tcp_process+0x7d4>)
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	429a      	cmp	r2, r3
 801ea52:	d119      	bne.n	801ea88 <tcp_process+0x7bc>
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	d115      	bne.n	801ea88 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801ea5c:	4b11      	ldr	r3, [pc, #68]	; (801eaa4 <tcp_process+0x7d8>)
 801ea5e:	781b      	ldrb	r3, [r3, #0]
 801ea60:	f043 0310 	orr.w	r3, r3, #16
 801ea64:	b2da      	uxtb	r2, r3
 801ea66:	4b0f      	ldr	r3, [pc, #60]	; (801eaa4 <tcp_process+0x7d8>)
 801ea68:	701a      	strb	r2, [r3, #0]
      }
      break;
 801ea6a:	e00d      	b.n	801ea88 <tcp_process+0x7bc>
    default:
      break;
 801ea6c:	bf00      	nop
 801ea6e:	e00c      	b.n	801ea8a <tcp_process+0x7be>
      break;
 801ea70:	bf00      	nop
 801ea72:	e00a      	b.n	801ea8a <tcp_process+0x7be>
      break;
 801ea74:	bf00      	nop
 801ea76:	e008      	b.n	801ea8a <tcp_process+0x7be>
      break;
 801ea78:	bf00      	nop
 801ea7a:	e006      	b.n	801ea8a <tcp_process+0x7be>
      break;
 801ea7c:	bf00      	nop
 801ea7e:	e004      	b.n	801ea8a <tcp_process+0x7be>
      break;
 801ea80:	bf00      	nop
 801ea82:	e002      	b.n	801ea8a <tcp_process+0x7be>
      break;
 801ea84:	bf00      	nop
 801ea86:	e000      	b.n	801ea8a <tcp_process+0x7be>
      break;
 801ea88:	bf00      	nop
  }
  return ERR_OK;
 801ea8a:	2300      	movs	r3, #0
}
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	3724      	adds	r7, #36	; 0x24
 801ea90:	46bd      	mov	sp, r7
 801ea92:	bd90      	pop	{r4, r7, pc}
 801ea94:	2400cf6c 	.word	0x2400cf6c
 801ea98:	2400cf68 	.word	0x2400cf68
 801ea9c:	2400cf9c 	.word	0x2400cf9c
 801eaa0:	2400cf94 	.word	0x2400cf94
 801eaa4:	2400cf9d 	.word	0x2400cf9d
 801eaa8:	2400cf64 	.word	0x2400cf64

0801eaac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801eaac:	b590      	push	{r4, r7, lr}
 801eaae:	b085      	sub	sp, #20
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	6078      	str	r0, [r7, #4]
 801eab4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d106      	bne.n	801eaca <tcp_oos_insert_segment+0x1e>
 801eabc:	4b3b      	ldr	r3, [pc, #236]	; (801ebac <tcp_oos_insert_segment+0x100>)
 801eabe:	f240 421f 	movw	r2, #1055	; 0x41f
 801eac2:	493b      	ldr	r1, [pc, #236]	; (801ebb0 <tcp_oos_insert_segment+0x104>)
 801eac4:	483b      	ldr	r0, [pc, #236]	; (801ebb4 <tcp_oos_insert_segment+0x108>)
 801eac6:	f008 fcf7 	bl	80274b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	68db      	ldr	r3, [r3, #12]
 801eace:	899b      	ldrh	r3, [r3, #12]
 801ead0:	b29b      	uxth	r3, r3
 801ead2:	4618      	mov	r0, r3
 801ead4:	f7fb fb3c 	bl	801a150 <lwip_htons>
 801ead8:	4603      	mov	r3, r0
 801eada:	b2db      	uxtb	r3, r3
 801eadc:	f003 0301 	and.w	r3, r3, #1
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	d028      	beq.n	801eb36 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801eae4:	6838      	ldr	r0, [r7, #0]
 801eae6:	f7fe fa63 	bl	801cfb0 <tcp_segs_free>
    next = NULL;
 801eaea:	2300      	movs	r3, #0
 801eaec:	603b      	str	r3, [r7, #0]
 801eaee:	e056      	b.n	801eb9e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801eaf0:	683b      	ldr	r3, [r7, #0]
 801eaf2:	68db      	ldr	r3, [r3, #12]
 801eaf4:	899b      	ldrh	r3, [r3, #12]
 801eaf6:	b29b      	uxth	r3, r3
 801eaf8:	4618      	mov	r0, r3
 801eafa:	f7fb fb29 	bl	801a150 <lwip_htons>
 801eafe:	4603      	mov	r3, r0
 801eb00:	b2db      	uxtb	r3, r3
 801eb02:	f003 0301 	and.w	r3, r3, #1
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d00d      	beq.n	801eb26 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	68db      	ldr	r3, [r3, #12]
 801eb0e:	899b      	ldrh	r3, [r3, #12]
 801eb10:	b29c      	uxth	r4, r3
 801eb12:	2001      	movs	r0, #1
 801eb14:	f7fb fb1c 	bl	801a150 <lwip_htons>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	461a      	mov	r2, r3
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	68db      	ldr	r3, [r3, #12]
 801eb20:	4322      	orrs	r2, r4
 801eb22:	b292      	uxth	r2, r2
 801eb24:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801eb26:	683b      	ldr	r3, [r7, #0]
 801eb28:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801eb2a:	683b      	ldr	r3, [r7, #0]
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801eb30:	68f8      	ldr	r0, [r7, #12]
 801eb32:	f7fe fa52 	bl	801cfda <tcp_seg_free>
    while (next &&
 801eb36:	683b      	ldr	r3, [r7, #0]
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d00e      	beq.n	801eb5a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	891b      	ldrh	r3, [r3, #8]
 801eb40:	461a      	mov	r2, r3
 801eb42:	4b1d      	ldr	r3, [pc, #116]	; (801ebb8 <tcp_oos_insert_segment+0x10c>)
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	441a      	add	r2, r3
 801eb48:	683b      	ldr	r3, [r7, #0]
 801eb4a:	68db      	ldr	r3, [r3, #12]
 801eb4c:	685b      	ldr	r3, [r3, #4]
 801eb4e:	6839      	ldr	r1, [r7, #0]
 801eb50:	8909      	ldrh	r1, [r1, #8]
 801eb52:	440b      	add	r3, r1
 801eb54:	1ad3      	subs	r3, r2, r3
    while (next &&
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	daca      	bge.n	801eaf0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801eb5a:	683b      	ldr	r3, [r7, #0]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d01e      	beq.n	801eb9e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	891b      	ldrh	r3, [r3, #8]
 801eb64:	461a      	mov	r2, r3
 801eb66:	4b14      	ldr	r3, [pc, #80]	; (801ebb8 <tcp_oos_insert_segment+0x10c>)
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	441a      	add	r2, r3
 801eb6c:	683b      	ldr	r3, [r7, #0]
 801eb6e:	68db      	ldr	r3, [r3, #12]
 801eb70:	685b      	ldr	r3, [r3, #4]
 801eb72:	1ad3      	subs	r3, r2, r3
    if (next &&
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	dd12      	ble.n	801eb9e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801eb78:	683b      	ldr	r3, [r7, #0]
 801eb7a:	68db      	ldr	r3, [r3, #12]
 801eb7c:	685b      	ldr	r3, [r3, #4]
 801eb7e:	b29a      	uxth	r2, r3
 801eb80:	4b0d      	ldr	r3, [pc, #52]	; (801ebb8 <tcp_oos_insert_segment+0x10c>)
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	b29b      	uxth	r3, r3
 801eb86:	1ad3      	subs	r3, r2, r3
 801eb88:	b29a      	uxth	r2, r3
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	685a      	ldr	r2, [r3, #4]
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	891b      	ldrh	r3, [r3, #8]
 801eb96:	4619      	mov	r1, r3
 801eb98:	4610      	mov	r0, r2
 801eb9a:	f7fc fe09 	bl	801b7b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	683a      	ldr	r2, [r7, #0]
 801eba2:	601a      	str	r2, [r3, #0]
}
 801eba4:	bf00      	nop
 801eba6:	3714      	adds	r7, #20
 801eba8:	46bd      	mov	sp, r7
 801ebaa:	bd90      	pop	{r4, r7, pc}
 801ebac:	08029768 	.word	0x08029768
 801ebb0:	08029a28 	.word	0x08029a28
 801ebb4:	080297b4 	.word	0x080297b4
 801ebb8:	2400cf90 	.word	0x2400cf90

0801ebbc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801ebbc:	b5b0      	push	{r4, r5, r7, lr}
 801ebbe:	b086      	sub	sp, #24
 801ebc0:	af00      	add	r7, sp, #0
 801ebc2:	60f8      	str	r0, [r7, #12]
 801ebc4:	60b9      	str	r1, [r7, #8]
 801ebc6:	607a      	str	r2, [r7, #4]
 801ebc8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801ebca:	e03e      	b.n	801ec4a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801ebcc:	68bb      	ldr	r3, [r7, #8]
 801ebce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801ebd0:	68bb      	ldr	r3, [r7, #8]
 801ebd2:	681b      	ldr	r3, [r3, #0]
 801ebd4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801ebd6:	697b      	ldr	r3, [r7, #20]
 801ebd8:	685b      	ldr	r3, [r3, #4]
 801ebda:	4618      	mov	r0, r3
 801ebdc:	f7fc fffc 	bl	801bbd8 <pbuf_clen>
 801ebe0:	4603      	mov	r3, r0
 801ebe2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ebea:	8a7a      	ldrh	r2, [r7, #18]
 801ebec:	429a      	cmp	r2, r3
 801ebee:	d906      	bls.n	801ebfe <tcp_free_acked_segments+0x42>
 801ebf0:	4b2a      	ldr	r3, [pc, #168]	; (801ec9c <tcp_free_acked_segments+0xe0>)
 801ebf2:	f240 4257 	movw	r2, #1111	; 0x457
 801ebf6:	492a      	ldr	r1, [pc, #168]	; (801eca0 <tcp_free_acked_segments+0xe4>)
 801ebf8:	482a      	ldr	r0, [pc, #168]	; (801eca4 <tcp_free_acked_segments+0xe8>)
 801ebfa:	f008 fc5d 	bl	80274b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801ebfe:	68fb      	ldr	r3, [r7, #12]
 801ec00:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801ec04:	8a7b      	ldrh	r3, [r7, #18]
 801ec06:	1ad3      	subs	r3, r2, r3
 801ec08:	b29a      	uxth	r2, r3
 801ec0a:	68fb      	ldr	r3, [r7, #12]
 801ec0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ec10:	697b      	ldr	r3, [r7, #20]
 801ec12:	891a      	ldrh	r2, [r3, #8]
 801ec14:	4b24      	ldr	r3, [pc, #144]	; (801eca8 <tcp_free_acked_segments+0xec>)
 801ec16:	881b      	ldrh	r3, [r3, #0]
 801ec18:	4413      	add	r3, r2
 801ec1a:	b29a      	uxth	r2, r3
 801ec1c:	4b22      	ldr	r3, [pc, #136]	; (801eca8 <tcp_free_acked_segments+0xec>)
 801ec1e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801ec20:	6978      	ldr	r0, [r7, #20]
 801ec22:	f7fe f9da 	bl	801cfda <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801ec26:	68fb      	ldr	r3, [r7, #12]
 801ec28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d00c      	beq.n	801ec4a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801ec30:	68bb      	ldr	r3, [r7, #8]
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	d109      	bne.n	801ec4a <tcp_free_acked_segments+0x8e>
 801ec36:	683b      	ldr	r3, [r7, #0]
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d106      	bne.n	801ec4a <tcp_free_acked_segments+0x8e>
 801ec3c:	4b17      	ldr	r3, [pc, #92]	; (801ec9c <tcp_free_acked_segments+0xe0>)
 801ec3e:	f240 4261 	movw	r2, #1121	; 0x461
 801ec42:	491a      	ldr	r1, [pc, #104]	; (801ecac <tcp_free_acked_segments+0xf0>)
 801ec44:	4817      	ldr	r0, [pc, #92]	; (801eca4 <tcp_free_acked_segments+0xe8>)
 801ec46:	f008 fc37 	bl	80274b8 <iprintf>
  while (seg_list != NULL &&
 801ec4a:	68bb      	ldr	r3, [r7, #8]
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d020      	beq.n	801ec92 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801ec50:	68bb      	ldr	r3, [r7, #8]
 801ec52:	68db      	ldr	r3, [r3, #12]
 801ec54:	685b      	ldr	r3, [r3, #4]
 801ec56:	4618      	mov	r0, r3
 801ec58:	f7fb fa8f 	bl	801a17a <lwip_htonl>
 801ec5c:	4604      	mov	r4, r0
 801ec5e:	68bb      	ldr	r3, [r7, #8]
 801ec60:	891b      	ldrh	r3, [r3, #8]
 801ec62:	461d      	mov	r5, r3
 801ec64:	68bb      	ldr	r3, [r7, #8]
 801ec66:	68db      	ldr	r3, [r3, #12]
 801ec68:	899b      	ldrh	r3, [r3, #12]
 801ec6a:	b29b      	uxth	r3, r3
 801ec6c:	4618      	mov	r0, r3
 801ec6e:	f7fb fa6f 	bl	801a150 <lwip_htons>
 801ec72:	4603      	mov	r3, r0
 801ec74:	b2db      	uxtb	r3, r3
 801ec76:	f003 0303 	and.w	r3, r3, #3
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d001      	beq.n	801ec82 <tcp_free_acked_segments+0xc6>
 801ec7e:	2301      	movs	r3, #1
 801ec80:	e000      	b.n	801ec84 <tcp_free_acked_segments+0xc8>
 801ec82:	2300      	movs	r3, #0
 801ec84:	442b      	add	r3, r5
 801ec86:	18e2      	adds	r2, r4, r3
 801ec88:	4b09      	ldr	r3, [pc, #36]	; (801ecb0 <tcp_free_acked_segments+0xf4>)
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	dd9c      	ble.n	801ebcc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801ec92:	68bb      	ldr	r3, [r7, #8]
}
 801ec94:	4618      	mov	r0, r3
 801ec96:	3718      	adds	r7, #24
 801ec98:	46bd      	mov	sp, r7
 801ec9a:	bdb0      	pop	{r4, r5, r7, pc}
 801ec9c:	08029768 	.word	0x08029768
 801eca0:	08029a50 	.word	0x08029a50
 801eca4:	080297b4 	.word	0x080297b4
 801eca8:	2400cf98 	.word	0x2400cf98
 801ecac:	08029a78 	.word	0x08029a78
 801ecb0:	2400cf94 	.word	0x2400cf94

0801ecb4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801ecb4:	b5b0      	push	{r4, r5, r7, lr}
 801ecb6:	b094      	sub	sp, #80	; 0x50
 801ecb8:	af00      	add	r7, sp, #0
 801ecba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d106      	bne.n	801ecd4 <tcp_receive+0x20>
 801ecc6:	4b91      	ldr	r3, [pc, #580]	; (801ef0c <tcp_receive+0x258>)
 801ecc8:	f240 427b 	movw	r2, #1147	; 0x47b
 801eccc:	4990      	ldr	r1, [pc, #576]	; (801ef10 <tcp_receive+0x25c>)
 801ecce:	4891      	ldr	r0, [pc, #580]	; (801ef14 <tcp_receive+0x260>)
 801ecd0:	f008 fbf2 	bl	80274b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	7d1b      	ldrb	r3, [r3, #20]
 801ecd8:	2b03      	cmp	r3, #3
 801ecda:	d806      	bhi.n	801ecea <tcp_receive+0x36>
 801ecdc:	4b8b      	ldr	r3, [pc, #556]	; (801ef0c <tcp_receive+0x258>)
 801ecde:	f240 427c 	movw	r2, #1148	; 0x47c
 801ece2:	498d      	ldr	r1, [pc, #564]	; (801ef18 <tcp_receive+0x264>)
 801ece4:	488b      	ldr	r0, [pc, #556]	; (801ef14 <tcp_receive+0x260>)
 801ece6:	f008 fbe7 	bl	80274b8 <iprintf>

  if (flags & TCP_ACK) {
 801ecea:	4b8c      	ldr	r3, [pc, #560]	; (801ef1c <tcp_receive+0x268>)
 801ecec:	781b      	ldrb	r3, [r3, #0]
 801ecee:	f003 0310 	and.w	r3, r3, #16
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	f000 8264 	beq.w	801f1c0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ecfe:	461a      	mov	r2, r3
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ed04:	4413      	add	r3, r2
 801ed06:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ed0c:	4b84      	ldr	r3, [pc, #528]	; (801ef20 <tcp_receive+0x26c>)
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	1ad3      	subs	r3, r2, r3
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	db1b      	blt.n	801ed4e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ed1a:	4b81      	ldr	r3, [pc, #516]	; (801ef20 <tcp_receive+0x26c>)
 801ed1c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ed1e:	429a      	cmp	r2, r3
 801ed20:	d106      	bne.n	801ed30 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ed26:	4b7f      	ldr	r3, [pc, #508]	; (801ef24 <tcp_receive+0x270>)
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	1ad3      	subs	r3, r2, r3
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	db0e      	blt.n	801ed4e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ed34:	4b7b      	ldr	r3, [pc, #492]	; (801ef24 <tcp_receive+0x270>)
 801ed36:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ed38:	429a      	cmp	r2, r3
 801ed3a:	d125      	bne.n	801ed88 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ed3c:	4b7a      	ldr	r3, [pc, #488]	; (801ef28 <tcp_receive+0x274>)
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	89db      	ldrh	r3, [r3, #14]
 801ed42:	b29a      	uxth	r2, r3
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ed4a:	429a      	cmp	r2, r3
 801ed4c:	d91c      	bls.n	801ed88 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ed4e:	4b76      	ldr	r3, [pc, #472]	; (801ef28 <tcp_receive+0x274>)
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	89db      	ldrh	r3, [r3, #14]
 801ed54:	b29a      	uxth	r2, r3
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ed68:	429a      	cmp	r2, r3
 801ed6a:	d205      	bcs.n	801ed78 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801ed78:	4b69      	ldr	r3, [pc, #420]	; (801ef20 <tcp_receive+0x26c>)
 801ed7a:	681a      	ldr	r2, [r3, #0]
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801ed80:	4b68      	ldr	r3, [pc, #416]	; (801ef24 <tcp_receive+0x270>)
 801ed82:	681a      	ldr	r2, [r3, #0]
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ed88:	4b66      	ldr	r3, [pc, #408]	; (801ef24 <tcp_receive+0x270>)
 801ed8a:	681a      	ldr	r2, [r3, #0]
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ed90:	1ad3      	subs	r3, r2, r3
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	dc58      	bgt.n	801ee48 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801ed96:	4b65      	ldr	r3, [pc, #404]	; (801ef2c <tcp_receive+0x278>)
 801ed98:	881b      	ldrh	r3, [r3, #0]
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	d14b      	bne.n	801ee36 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ed9e:	687b      	ldr	r3, [r7, #4]
 801eda0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801eda2:	687a      	ldr	r2, [r7, #4]
 801eda4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801eda8:	4413      	add	r3, r2
 801edaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801edac:	429a      	cmp	r2, r3
 801edae:	d142      	bne.n	801ee36 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	db3d      	blt.n	801ee36 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801edbe:	4b59      	ldr	r3, [pc, #356]	; (801ef24 <tcp_receive+0x270>)
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	429a      	cmp	r2, r3
 801edc4:	d137      	bne.n	801ee36 <tcp_receive+0x182>
              found_dupack = 1;
 801edc6:	2301      	movs	r3, #1
 801edc8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801edd0:	2bff      	cmp	r3, #255	; 0xff
 801edd2:	d007      	beq.n	801ede4 <tcp_receive+0x130>
                ++pcb->dupacks;
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801edda:	3301      	adds	r3, #1
 801eddc:	b2da      	uxtb	r2, r3
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801edea:	2b03      	cmp	r3, #3
 801edec:	d91b      	bls.n	801ee26 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801edf8:	4413      	add	r3, r2
 801edfa:	b29a      	uxth	r2, r3
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ee02:	429a      	cmp	r2, r3
 801ee04:	d30a      	bcc.n	801ee1c <tcp_receive+0x168>
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ee10:	4413      	add	r3, r2
 801ee12:	b29a      	uxth	r2, r3
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ee1a:	e004      	b.n	801ee26 <tcp_receive+0x172>
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ee22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ee2c:	2b02      	cmp	r3, #2
 801ee2e:	d902      	bls.n	801ee36 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ee30:	6878      	ldr	r0, [r7, #4]
 801ee32:	f001 feeb 	bl	8020c0c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ee36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	f040 8161 	bne.w	801f100 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	2200      	movs	r2, #0
 801ee42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ee46:	e15b      	b.n	801f100 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ee48:	4b36      	ldr	r3, [pc, #216]	; (801ef24 <tcp_receive+0x270>)
 801ee4a:	681a      	ldr	r2, [r3, #0]
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ee50:	1ad3      	subs	r3, r2, r3
 801ee52:	3b01      	subs	r3, #1
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	f2c0 814e 	blt.w	801f0f6 <tcp_receive+0x442>
 801ee5a:	4b32      	ldr	r3, [pc, #200]	; (801ef24 <tcp_receive+0x270>)
 801ee5c:	681a      	ldr	r2, [r3, #0]
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee62:	1ad3      	subs	r3, r2, r3
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	f300 8146 	bgt.w	801f0f6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	8b5b      	ldrh	r3, [r3, #26]
 801ee6e:	f003 0304 	and.w	r3, r3, #4
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d010      	beq.n	801ee98 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	8b5b      	ldrh	r3, [r3, #26]
 801ee7a:	f023 0304 	bic.w	r3, r3, #4
 801ee7e:	b29a      	uxth	r2, r3
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	2200      	movs	r2, #0
 801ee94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	2200      	movs	r2, #0
 801ee9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801eea6:	10db      	asrs	r3, r3, #3
 801eea8:	b21b      	sxth	r3, r3
 801eeaa:	b29a      	uxth	r2, r3
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801eeb2:	b29b      	uxth	r3, r3
 801eeb4:	4413      	add	r3, r2
 801eeb6:	b29b      	uxth	r3, r3
 801eeb8:	b21a      	sxth	r2, r3
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801eec0:	4b18      	ldr	r3, [pc, #96]	; (801ef24 <tcp_receive+0x270>)
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	b29a      	uxth	r2, r3
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eeca:	b29b      	uxth	r3, r3
 801eecc:	1ad3      	subs	r3, r2, r3
 801eece:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	2200      	movs	r2, #0
 801eed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801eed8:	4b12      	ldr	r3, [pc, #72]	; (801ef24 <tcp_receive+0x270>)
 801eeda:	681a      	ldr	r2, [r3, #0]
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	7d1b      	ldrb	r3, [r3, #20]
 801eee4:	2b03      	cmp	r3, #3
 801eee6:	f240 8097 	bls.w	801f018 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801eef6:	429a      	cmp	r2, r3
 801eef8:	d245      	bcs.n	801ef86 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	8b5b      	ldrh	r3, [r3, #26]
 801eefe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d014      	beq.n	801ef30 <tcp_receive+0x27c>
 801ef06:	2301      	movs	r3, #1
 801ef08:	e013      	b.n	801ef32 <tcp_receive+0x27e>
 801ef0a:	bf00      	nop
 801ef0c:	08029768 	.word	0x08029768
 801ef10:	08029a98 	.word	0x08029a98
 801ef14:	080297b4 	.word	0x080297b4
 801ef18:	08029ab4 	.word	0x08029ab4
 801ef1c:	2400cf9c 	.word	0x2400cf9c
 801ef20:	2400cf90 	.word	0x2400cf90
 801ef24:	2400cf94 	.word	0x2400cf94
 801ef28:	2400cf80 	.word	0x2400cf80
 801ef2c:	2400cf9a 	.word	0x2400cf9a
 801ef30:	2302      	movs	r3, #2
 801ef32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801ef36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ef3a:	b29a      	uxth	r2, r3
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ef40:	fb12 f303 	smulbb	r3, r2, r3
 801ef44:	b29b      	uxth	r3, r3
 801ef46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ef48:	4293      	cmp	r3, r2
 801ef4a:	bf28      	it	cs
 801ef4c:	4613      	movcs	r3, r2
 801ef4e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ef56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ef58:	4413      	add	r3, r2
 801ef5a:	b29a      	uxth	r2, r3
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ef62:	429a      	cmp	r2, r3
 801ef64:	d309      	bcc.n	801ef7a <tcp_receive+0x2c6>
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ef6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ef6e:	4413      	add	r3, r2
 801ef70:	b29a      	uxth	r2, r3
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ef78:	e04e      	b.n	801f018 <tcp_receive+0x364>
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ef80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ef84:	e048      	b.n	801f018 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801ef8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ef8e:	4413      	add	r3, r2
 801ef90:	b29a      	uxth	r2, r3
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801ef98:	429a      	cmp	r2, r3
 801ef9a:	d309      	bcc.n	801efb0 <tcp_receive+0x2fc>
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801efa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801efa4:	4413      	add	r3, r2
 801efa6:	b29a      	uxth	r2, r3
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801efae:	e004      	b.n	801efba <tcp_receive+0x306>
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801efb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801efc6:	429a      	cmp	r2, r3
 801efc8:	d326      	bcc.n	801f018 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801efd6:	1ad3      	subs	r3, r2, r3
 801efd8:	b29a      	uxth	r2, r3
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801efea:	4413      	add	r3, r2
 801efec:	b29a      	uxth	r2, r3
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801eff4:	429a      	cmp	r2, r3
 801eff6:	d30a      	bcc.n	801f00e <tcp_receive+0x35a>
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f002:	4413      	add	r3, r2
 801f004:	b29a      	uxth	r2, r3
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801f00c:	e004      	b.n	801f018 <tcp_receive+0x364>
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f014:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f020:	4a98      	ldr	r2, [pc, #608]	; (801f284 <tcp_receive+0x5d0>)
 801f022:	6878      	ldr	r0, [r7, #4]
 801f024:	f7ff fdca 	bl	801ebbc <tcp_free_acked_segments>
 801f028:	4602      	mov	r2, r0
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f036:	4a94      	ldr	r2, [pc, #592]	; (801f288 <tcp_receive+0x5d4>)
 801f038:	6878      	ldr	r0, [r7, #4]
 801f03a:	f7ff fdbf 	bl	801ebbc <tcp_free_acked_segments>
 801f03e:	4602      	mov	r2, r0
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d104      	bne.n	801f056 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f052:	861a      	strh	r2, [r3, #48]	; 0x30
 801f054:	e002      	b.n	801f05c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	2200      	movs	r2, #0
 801f05a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	2200      	movs	r2, #0
 801f060:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f066:	2b00      	cmp	r3, #0
 801f068:	d103      	bne.n	801f072 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	2200      	movs	r2, #0
 801f06e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801f078:	4b84      	ldr	r3, [pc, #528]	; (801f28c <tcp_receive+0x5d8>)
 801f07a:	881b      	ldrh	r3, [r3, #0]
 801f07c:	4413      	add	r3, r2
 801f07e:	b29a      	uxth	r2, r3
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	8b5b      	ldrh	r3, [r3, #26]
 801f08a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d035      	beq.n	801f0fe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f096:	2b00      	cmp	r3, #0
 801f098:	d118      	bne.n	801f0cc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d00c      	beq.n	801f0bc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f0aa:	68db      	ldr	r3, [r3, #12]
 801f0ac:	685b      	ldr	r3, [r3, #4]
 801f0ae:	4618      	mov	r0, r3
 801f0b0:	f7fb f863 	bl	801a17a <lwip_htonl>
 801f0b4:	4603      	mov	r3, r0
 801f0b6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801f0b8:	2b00      	cmp	r3, #0
 801f0ba:	dc20      	bgt.n	801f0fe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	8b5b      	ldrh	r3, [r3, #26]
 801f0c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f0c4:	b29a      	uxth	r2, r3
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f0ca:	e018      	b.n	801f0fe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f0d4:	68db      	ldr	r3, [r3, #12]
 801f0d6:	685b      	ldr	r3, [r3, #4]
 801f0d8:	4618      	mov	r0, r3
 801f0da:	f7fb f84e 	bl	801a17a <lwip_htonl>
 801f0de:	4603      	mov	r3, r0
 801f0e0:	1ae3      	subs	r3, r4, r3
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	dc0b      	bgt.n	801f0fe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	8b5b      	ldrh	r3, [r3, #26]
 801f0ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f0ee:	b29a      	uxth	r2, r3
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f0f4:	e003      	b.n	801f0fe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801f0f6:	6878      	ldr	r0, [r7, #4]
 801f0f8:	f001 ff76 	bl	8020fe8 <tcp_send_empty_ack>
 801f0fc:	e000      	b.n	801f100 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f0fe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f104:	2b00      	cmp	r3, #0
 801f106:	d05b      	beq.n	801f1c0 <tcp_receive+0x50c>
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f10c:	4b60      	ldr	r3, [pc, #384]	; (801f290 <tcp_receive+0x5dc>)
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	1ad3      	subs	r3, r2, r3
 801f112:	2b00      	cmp	r3, #0
 801f114:	da54      	bge.n	801f1c0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801f116:	4b5f      	ldr	r3, [pc, #380]	; (801f294 <tcp_receive+0x5e0>)
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	b29a      	uxth	r2, r3
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f120:	b29b      	uxth	r3, r3
 801f122:	1ad3      	subs	r3, r2, r3
 801f124:	b29b      	uxth	r3, r3
 801f126:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801f12a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801f134:	10db      	asrs	r3, r3, #3
 801f136:	b21b      	sxth	r3, r3
 801f138:	b29b      	uxth	r3, r3
 801f13a:	1ad3      	subs	r3, r2, r3
 801f13c:	b29b      	uxth	r3, r3
 801f13e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801f148:	b29a      	uxth	r2, r3
 801f14a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801f14e:	4413      	add	r3, r2
 801f150:	b29b      	uxth	r3, r3
 801f152:	b21a      	sxth	r2, r3
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801f158:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801f15c:	2b00      	cmp	r3, #0
 801f15e:	da05      	bge.n	801f16c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801f160:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801f164:	425b      	negs	r3, r3
 801f166:	b29b      	uxth	r3, r3
 801f168:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801f16c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801f176:	109b      	asrs	r3, r3, #2
 801f178:	b21b      	sxth	r3, r3
 801f17a:	b29b      	uxth	r3, r3
 801f17c:	1ad3      	subs	r3, r2, r3
 801f17e:	b29b      	uxth	r3, r3
 801f180:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801f18a:	b29a      	uxth	r2, r3
 801f18c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801f190:	4413      	add	r3, r2
 801f192:	b29b      	uxth	r3, r3
 801f194:	b21a      	sxth	r2, r3
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801f1a0:	10db      	asrs	r3, r3, #3
 801f1a2:	b21b      	sxth	r3, r3
 801f1a4:	b29a      	uxth	r2, r3
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801f1ac:	b29b      	uxth	r3, r3
 801f1ae:	4413      	add	r3, r2
 801f1b0:	b29b      	uxth	r3, r3
 801f1b2:	b21a      	sxth	r2, r3
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	2200      	movs	r2, #0
 801f1be:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801f1c0:	4b35      	ldr	r3, [pc, #212]	; (801f298 <tcp_receive+0x5e4>)
 801f1c2:	881b      	ldrh	r3, [r3, #0]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	f000 84e2 	beq.w	801fb8e <tcp_receive+0xeda>
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	7d1b      	ldrb	r3, [r3, #20]
 801f1ce:	2b06      	cmp	r3, #6
 801f1d0:	f200 84dd 	bhi.w	801fb8e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f1d8:	4b30      	ldr	r3, [pc, #192]	; (801f29c <tcp_receive+0x5e8>)
 801f1da:	681b      	ldr	r3, [r3, #0]
 801f1dc:	1ad3      	subs	r3, r2, r3
 801f1de:	3b01      	subs	r3, #1
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	f2c0 808f 	blt.w	801f304 <tcp_receive+0x650>
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f1ea:	4b2b      	ldr	r3, [pc, #172]	; (801f298 <tcp_receive+0x5e4>)
 801f1ec:	881b      	ldrh	r3, [r3, #0]
 801f1ee:	4619      	mov	r1, r3
 801f1f0:	4b2a      	ldr	r3, [pc, #168]	; (801f29c <tcp_receive+0x5e8>)
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	440b      	add	r3, r1
 801f1f6:	1ad3      	subs	r3, r2, r3
 801f1f8:	3301      	adds	r3, #1
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	f300 8082 	bgt.w	801f304 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801f200:	4b27      	ldr	r3, [pc, #156]	; (801f2a0 <tcp_receive+0x5ec>)
 801f202:	685b      	ldr	r3, [r3, #4]
 801f204:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f20a:	4b24      	ldr	r3, [pc, #144]	; (801f29c <tcp_receive+0x5e8>)
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	1ad3      	subs	r3, r2, r3
 801f210:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801f212:	4b23      	ldr	r3, [pc, #140]	; (801f2a0 <tcp_receive+0x5ec>)
 801f214:	685b      	ldr	r3, [r3, #4]
 801f216:	2b00      	cmp	r3, #0
 801f218:	d106      	bne.n	801f228 <tcp_receive+0x574>
 801f21a:	4b22      	ldr	r3, [pc, #136]	; (801f2a4 <tcp_receive+0x5f0>)
 801f21c:	f240 5294 	movw	r2, #1428	; 0x594
 801f220:	4921      	ldr	r1, [pc, #132]	; (801f2a8 <tcp_receive+0x5f4>)
 801f222:	4822      	ldr	r0, [pc, #136]	; (801f2ac <tcp_receive+0x5f8>)
 801f224:	f008 f948 	bl	80274b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f22a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f22e:	4293      	cmp	r3, r2
 801f230:	d906      	bls.n	801f240 <tcp_receive+0x58c>
 801f232:	4b1c      	ldr	r3, [pc, #112]	; (801f2a4 <tcp_receive+0x5f0>)
 801f234:	f240 5295 	movw	r2, #1429	; 0x595
 801f238:	491d      	ldr	r1, [pc, #116]	; (801f2b0 <tcp_receive+0x5fc>)
 801f23a:	481c      	ldr	r0, [pc, #112]	; (801f2ac <tcp_receive+0x5f8>)
 801f23c:	f008 f93c 	bl	80274b8 <iprintf>
      off = (u16_t)off32;
 801f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f242:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801f246:	4b16      	ldr	r3, [pc, #88]	; (801f2a0 <tcp_receive+0x5ec>)
 801f248:	685b      	ldr	r3, [r3, #4]
 801f24a:	891b      	ldrh	r3, [r3, #8]
 801f24c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f250:	429a      	cmp	r2, r3
 801f252:	d906      	bls.n	801f262 <tcp_receive+0x5ae>
 801f254:	4b13      	ldr	r3, [pc, #76]	; (801f2a4 <tcp_receive+0x5f0>)
 801f256:	f240 5297 	movw	r2, #1431	; 0x597
 801f25a:	4916      	ldr	r1, [pc, #88]	; (801f2b4 <tcp_receive+0x600>)
 801f25c:	4813      	ldr	r0, [pc, #76]	; (801f2ac <tcp_receive+0x5f8>)
 801f25e:	f008 f92b 	bl	80274b8 <iprintf>
      inseg.len -= off;
 801f262:	4b0f      	ldr	r3, [pc, #60]	; (801f2a0 <tcp_receive+0x5ec>)
 801f264:	891a      	ldrh	r2, [r3, #8]
 801f266:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f26a:	1ad3      	subs	r3, r2, r3
 801f26c:	b29a      	uxth	r2, r3
 801f26e:	4b0c      	ldr	r3, [pc, #48]	; (801f2a0 <tcp_receive+0x5ec>)
 801f270:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801f272:	4b0b      	ldr	r3, [pc, #44]	; (801f2a0 <tcp_receive+0x5ec>)
 801f274:	685b      	ldr	r3, [r3, #4]
 801f276:	891a      	ldrh	r2, [r3, #8]
 801f278:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f27c:	1ad3      	subs	r3, r2, r3
 801f27e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801f280:	e02a      	b.n	801f2d8 <tcp_receive+0x624>
 801f282:	bf00      	nop
 801f284:	08029ad0 	.word	0x08029ad0
 801f288:	08029ad8 	.word	0x08029ad8
 801f28c:	2400cf98 	.word	0x2400cf98
 801f290:	2400cf94 	.word	0x2400cf94
 801f294:	2400cf58 	.word	0x2400cf58
 801f298:	2400cf9a 	.word	0x2400cf9a
 801f29c:	2400cf90 	.word	0x2400cf90
 801f2a0:	2400cf70 	.word	0x2400cf70
 801f2a4:	08029768 	.word	0x08029768
 801f2a8:	08029ae0 	.word	0x08029ae0
 801f2ac:	080297b4 	.word	0x080297b4
 801f2b0:	08029af0 	.word	0x08029af0
 801f2b4:	08029b00 	.word	0x08029b00
        off -= p->len;
 801f2b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f2ba:	895b      	ldrh	r3, [r3, #10]
 801f2bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f2c0:	1ad3      	subs	r3, r2, r3
 801f2c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801f2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f2c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f2ca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801f2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f2ce:	2200      	movs	r2, #0
 801f2d0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801f2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801f2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f2da:	895b      	ldrh	r3, [r3, #10]
 801f2dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f2e0:	429a      	cmp	r2, r3
 801f2e2:	d8e9      	bhi.n	801f2b8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801f2e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f2e8:	4619      	mov	r1, r3
 801f2ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f2ec:	f7fc fb60 	bl	801b9b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2f4:	4a91      	ldr	r2, [pc, #580]	; (801f53c <tcp_receive+0x888>)
 801f2f6:	6013      	str	r3, [r2, #0]
 801f2f8:	4b91      	ldr	r3, [pc, #580]	; (801f540 <tcp_receive+0x88c>)
 801f2fa:	68db      	ldr	r3, [r3, #12]
 801f2fc:	4a8f      	ldr	r2, [pc, #572]	; (801f53c <tcp_receive+0x888>)
 801f2fe:	6812      	ldr	r2, [r2, #0]
 801f300:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801f302:	e00d      	b.n	801f320 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801f304:	4b8d      	ldr	r3, [pc, #564]	; (801f53c <tcp_receive+0x888>)
 801f306:	681a      	ldr	r2, [r3, #0]
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f30c:	1ad3      	subs	r3, r2, r3
 801f30e:	2b00      	cmp	r3, #0
 801f310:	da06      	bge.n	801f320 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	8b5b      	ldrh	r3, [r3, #26]
 801f316:	f043 0302 	orr.w	r3, r3, #2
 801f31a:	b29a      	uxth	r2, r3
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f320:	4b86      	ldr	r3, [pc, #536]	; (801f53c <tcp_receive+0x888>)
 801f322:	681a      	ldr	r2, [r3, #0]
 801f324:	687b      	ldr	r3, [r7, #4]
 801f326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f328:	1ad3      	subs	r3, r2, r3
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	f2c0 842a 	blt.w	801fb84 <tcp_receive+0xed0>
 801f330:	4b82      	ldr	r3, [pc, #520]	; (801f53c <tcp_receive+0x888>)
 801f332:	681a      	ldr	r2, [r3, #0]
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f338:	6879      	ldr	r1, [r7, #4]
 801f33a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f33c:	440b      	add	r3, r1
 801f33e:	1ad3      	subs	r3, r2, r3
 801f340:	3301      	adds	r3, #1
 801f342:	2b00      	cmp	r3, #0
 801f344:	f300 841e 	bgt.w	801fb84 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f34c:	4b7b      	ldr	r3, [pc, #492]	; (801f53c <tcp_receive+0x888>)
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	429a      	cmp	r2, r3
 801f352:	f040 829a 	bne.w	801f88a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801f356:	4b7a      	ldr	r3, [pc, #488]	; (801f540 <tcp_receive+0x88c>)
 801f358:	891c      	ldrh	r4, [r3, #8]
 801f35a:	4b79      	ldr	r3, [pc, #484]	; (801f540 <tcp_receive+0x88c>)
 801f35c:	68db      	ldr	r3, [r3, #12]
 801f35e:	899b      	ldrh	r3, [r3, #12]
 801f360:	b29b      	uxth	r3, r3
 801f362:	4618      	mov	r0, r3
 801f364:	f7fa fef4 	bl	801a150 <lwip_htons>
 801f368:	4603      	mov	r3, r0
 801f36a:	b2db      	uxtb	r3, r3
 801f36c:	f003 0303 	and.w	r3, r3, #3
 801f370:	2b00      	cmp	r3, #0
 801f372:	d001      	beq.n	801f378 <tcp_receive+0x6c4>
 801f374:	2301      	movs	r3, #1
 801f376:	e000      	b.n	801f37a <tcp_receive+0x6c6>
 801f378:	2300      	movs	r3, #0
 801f37a:	4423      	add	r3, r4
 801f37c:	b29a      	uxth	r2, r3
 801f37e:	4b71      	ldr	r3, [pc, #452]	; (801f544 <tcp_receive+0x890>)
 801f380:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f386:	4b6f      	ldr	r3, [pc, #444]	; (801f544 <tcp_receive+0x890>)
 801f388:	881b      	ldrh	r3, [r3, #0]
 801f38a:	429a      	cmp	r2, r3
 801f38c:	d275      	bcs.n	801f47a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f38e:	4b6c      	ldr	r3, [pc, #432]	; (801f540 <tcp_receive+0x88c>)
 801f390:	68db      	ldr	r3, [r3, #12]
 801f392:	899b      	ldrh	r3, [r3, #12]
 801f394:	b29b      	uxth	r3, r3
 801f396:	4618      	mov	r0, r3
 801f398:	f7fa feda 	bl	801a150 <lwip_htons>
 801f39c:	4603      	mov	r3, r0
 801f39e:	b2db      	uxtb	r3, r3
 801f3a0:	f003 0301 	and.w	r3, r3, #1
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d01f      	beq.n	801f3e8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801f3a8:	4b65      	ldr	r3, [pc, #404]	; (801f540 <tcp_receive+0x88c>)
 801f3aa:	68db      	ldr	r3, [r3, #12]
 801f3ac:	899b      	ldrh	r3, [r3, #12]
 801f3ae:	b29b      	uxth	r3, r3
 801f3b0:	b21b      	sxth	r3, r3
 801f3b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f3b6:	b21c      	sxth	r4, r3
 801f3b8:	4b61      	ldr	r3, [pc, #388]	; (801f540 <tcp_receive+0x88c>)
 801f3ba:	68db      	ldr	r3, [r3, #12]
 801f3bc:	899b      	ldrh	r3, [r3, #12]
 801f3be:	b29b      	uxth	r3, r3
 801f3c0:	4618      	mov	r0, r3
 801f3c2:	f7fa fec5 	bl	801a150 <lwip_htons>
 801f3c6:	4603      	mov	r3, r0
 801f3c8:	b2db      	uxtb	r3, r3
 801f3ca:	b29b      	uxth	r3, r3
 801f3cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801f3d0:	b29b      	uxth	r3, r3
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	f7fa febc 	bl	801a150 <lwip_htons>
 801f3d8:	4603      	mov	r3, r0
 801f3da:	b21b      	sxth	r3, r3
 801f3dc:	4323      	orrs	r3, r4
 801f3de:	b21a      	sxth	r2, r3
 801f3e0:	4b57      	ldr	r3, [pc, #348]	; (801f540 <tcp_receive+0x88c>)
 801f3e2:	68db      	ldr	r3, [r3, #12]
 801f3e4:	b292      	uxth	r2, r2
 801f3e6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f3ec:	4b54      	ldr	r3, [pc, #336]	; (801f540 <tcp_receive+0x88c>)
 801f3ee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801f3f0:	4b53      	ldr	r3, [pc, #332]	; (801f540 <tcp_receive+0x88c>)
 801f3f2:	68db      	ldr	r3, [r3, #12]
 801f3f4:	899b      	ldrh	r3, [r3, #12]
 801f3f6:	b29b      	uxth	r3, r3
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	f7fa fea9 	bl	801a150 <lwip_htons>
 801f3fe:	4603      	mov	r3, r0
 801f400:	b2db      	uxtb	r3, r3
 801f402:	f003 0302 	and.w	r3, r3, #2
 801f406:	2b00      	cmp	r3, #0
 801f408:	d005      	beq.n	801f416 <tcp_receive+0x762>
            inseg.len -= 1;
 801f40a:	4b4d      	ldr	r3, [pc, #308]	; (801f540 <tcp_receive+0x88c>)
 801f40c:	891b      	ldrh	r3, [r3, #8]
 801f40e:	3b01      	subs	r3, #1
 801f410:	b29a      	uxth	r2, r3
 801f412:	4b4b      	ldr	r3, [pc, #300]	; (801f540 <tcp_receive+0x88c>)
 801f414:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801f416:	4b4a      	ldr	r3, [pc, #296]	; (801f540 <tcp_receive+0x88c>)
 801f418:	685b      	ldr	r3, [r3, #4]
 801f41a:	4a49      	ldr	r2, [pc, #292]	; (801f540 <tcp_receive+0x88c>)
 801f41c:	8912      	ldrh	r2, [r2, #8]
 801f41e:	4611      	mov	r1, r2
 801f420:	4618      	mov	r0, r3
 801f422:	f7fc f9c5 	bl	801b7b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801f426:	4b46      	ldr	r3, [pc, #280]	; (801f540 <tcp_receive+0x88c>)
 801f428:	891c      	ldrh	r4, [r3, #8]
 801f42a:	4b45      	ldr	r3, [pc, #276]	; (801f540 <tcp_receive+0x88c>)
 801f42c:	68db      	ldr	r3, [r3, #12]
 801f42e:	899b      	ldrh	r3, [r3, #12]
 801f430:	b29b      	uxth	r3, r3
 801f432:	4618      	mov	r0, r3
 801f434:	f7fa fe8c 	bl	801a150 <lwip_htons>
 801f438:	4603      	mov	r3, r0
 801f43a:	b2db      	uxtb	r3, r3
 801f43c:	f003 0303 	and.w	r3, r3, #3
 801f440:	2b00      	cmp	r3, #0
 801f442:	d001      	beq.n	801f448 <tcp_receive+0x794>
 801f444:	2301      	movs	r3, #1
 801f446:	e000      	b.n	801f44a <tcp_receive+0x796>
 801f448:	2300      	movs	r3, #0
 801f44a:	4423      	add	r3, r4
 801f44c:	b29a      	uxth	r2, r3
 801f44e:	4b3d      	ldr	r3, [pc, #244]	; (801f544 <tcp_receive+0x890>)
 801f450:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801f452:	4b3c      	ldr	r3, [pc, #240]	; (801f544 <tcp_receive+0x890>)
 801f454:	881b      	ldrh	r3, [r3, #0]
 801f456:	461a      	mov	r2, r3
 801f458:	4b38      	ldr	r3, [pc, #224]	; (801f53c <tcp_receive+0x888>)
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	441a      	add	r2, r3
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f462:	6879      	ldr	r1, [r7, #4]
 801f464:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f466:	440b      	add	r3, r1
 801f468:	429a      	cmp	r2, r3
 801f46a:	d006      	beq.n	801f47a <tcp_receive+0x7c6>
 801f46c:	4b36      	ldr	r3, [pc, #216]	; (801f548 <tcp_receive+0x894>)
 801f46e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801f472:	4936      	ldr	r1, [pc, #216]	; (801f54c <tcp_receive+0x898>)
 801f474:	4836      	ldr	r0, [pc, #216]	; (801f550 <tcp_receive+0x89c>)
 801f476:	f008 f81f 	bl	80274b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f47e:	2b00      	cmp	r3, #0
 801f480:	f000 80e7 	beq.w	801f652 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f484:	4b2e      	ldr	r3, [pc, #184]	; (801f540 <tcp_receive+0x88c>)
 801f486:	68db      	ldr	r3, [r3, #12]
 801f488:	899b      	ldrh	r3, [r3, #12]
 801f48a:	b29b      	uxth	r3, r3
 801f48c:	4618      	mov	r0, r3
 801f48e:	f7fa fe5f 	bl	801a150 <lwip_htons>
 801f492:	4603      	mov	r3, r0
 801f494:	b2db      	uxtb	r3, r3
 801f496:	f003 0301 	and.w	r3, r3, #1
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d010      	beq.n	801f4c0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801f49e:	e00a      	b.n	801f4b6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f4a4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f4aa:	681a      	ldr	r2, [r3, #0]
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801f4b0:	68f8      	ldr	r0, [r7, #12]
 801f4b2:	f7fd fd92 	bl	801cfda <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d1f0      	bne.n	801f4a0 <tcp_receive+0x7ec>
 801f4be:	e0c8      	b.n	801f652 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801f4c6:	e052      	b.n	801f56e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801f4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f4ca:	68db      	ldr	r3, [r3, #12]
 801f4cc:	899b      	ldrh	r3, [r3, #12]
 801f4ce:	b29b      	uxth	r3, r3
 801f4d0:	4618      	mov	r0, r3
 801f4d2:	f7fa fe3d 	bl	801a150 <lwip_htons>
 801f4d6:	4603      	mov	r3, r0
 801f4d8:	b2db      	uxtb	r3, r3
 801f4da:	f003 0301 	and.w	r3, r3, #1
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d03d      	beq.n	801f55e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801f4e2:	4b17      	ldr	r3, [pc, #92]	; (801f540 <tcp_receive+0x88c>)
 801f4e4:	68db      	ldr	r3, [r3, #12]
 801f4e6:	899b      	ldrh	r3, [r3, #12]
 801f4e8:	b29b      	uxth	r3, r3
 801f4ea:	4618      	mov	r0, r3
 801f4ec:	f7fa fe30 	bl	801a150 <lwip_htons>
 801f4f0:	4603      	mov	r3, r0
 801f4f2:	b2db      	uxtb	r3, r3
 801f4f4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d130      	bne.n	801f55e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801f4fc:	4b10      	ldr	r3, [pc, #64]	; (801f540 <tcp_receive+0x88c>)
 801f4fe:	68db      	ldr	r3, [r3, #12]
 801f500:	899b      	ldrh	r3, [r3, #12]
 801f502:	b29c      	uxth	r4, r3
 801f504:	2001      	movs	r0, #1
 801f506:	f7fa fe23 	bl	801a150 <lwip_htons>
 801f50a:	4603      	mov	r3, r0
 801f50c:	461a      	mov	r2, r3
 801f50e:	4b0c      	ldr	r3, [pc, #48]	; (801f540 <tcp_receive+0x88c>)
 801f510:	68db      	ldr	r3, [r3, #12]
 801f512:	4322      	orrs	r2, r4
 801f514:	b292      	uxth	r2, r2
 801f516:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801f518:	4b09      	ldr	r3, [pc, #36]	; (801f540 <tcp_receive+0x88c>)
 801f51a:	891c      	ldrh	r4, [r3, #8]
 801f51c:	4b08      	ldr	r3, [pc, #32]	; (801f540 <tcp_receive+0x88c>)
 801f51e:	68db      	ldr	r3, [r3, #12]
 801f520:	899b      	ldrh	r3, [r3, #12]
 801f522:	b29b      	uxth	r3, r3
 801f524:	4618      	mov	r0, r3
 801f526:	f7fa fe13 	bl	801a150 <lwip_htons>
 801f52a:	4603      	mov	r3, r0
 801f52c:	b2db      	uxtb	r3, r3
 801f52e:	f003 0303 	and.w	r3, r3, #3
 801f532:	2b00      	cmp	r3, #0
 801f534:	d00e      	beq.n	801f554 <tcp_receive+0x8a0>
 801f536:	2301      	movs	r3, #1
 801f538:	e00d      	b.n	801f556 <tcp_receive+0x8a2>
 801f53a:	bf00      	nop
 801f53c:	2400cf90 	.word	0x2400cf90
 801f540:	2400cf70 	.word	0x2400cf70
 801f544:	2400cf9a 	.word	0x2400cf9a
 801f548:	08029768 	.word	0x08029768
 801f54c:	08029b10 	.word	0x08029b10
 801f550:	080297b4 	.word	0x080297b4
 801f554:	2300      	movs	r3, #0
 801f556:	4423      	add	r3, r4
 801f558:	b29a      	uxth	r2, r3
 801f55a:	4b98      	ldr	r3, [pc, #608]	; (801f7bc <tcp_receive+0xb08>)
 801f55c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801f55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f560:	613b      	str	r3, [r7, #16]
              next = next->next;
 801f562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f564:	681b      	ldr	r3, [r3, #0]
 801f566:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801f568:	6938      	ldr	r0, [r7, #16]
 801f56a:	f7fd fd36 	bl	801cfda <tcp_seg_free>
            while (next &&
 801f56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f570:	2b00      	cmp	r3, #0
 801f572:	d00e      	beq.n	801f592 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801f574:	4b91      	ldr	r3, [pc, #580]	; (801f7bc <tcp_receive+0xb08>)
 801f576:	881b      	ldrh	r3, [r3, #0]
 801f578:	461a      	mov	r2, r3
 801f57a:	4b91      	ldr	r3, [pc, #580]	; (801f7c0 <tcp_receive+0xb0c>)
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	441a      	add	r2, r3
 801f580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f582:	68db      	ldr	r3, [r3, #12]
 801f584:	685b      	ldr	r3, [r3, #4]
 801f586:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f588:	8909      	ldrh	r1, [r1, #8]
 801f58a:	440b      	add	r3, r1
 801f58c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801f58e:	2b00      	cmp	r3, #0
 801f590:	da9a      	bge.n	801f4c8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801f592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f594:	2b00      	cmp	r3, #0
 801f596:	d059      	beq.n	801f64c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801f598:	4b88      	ldr	r3, [pc, #544]	; (801f7bc <tcp_receive+0xb08>)
 801f59a:	881b      	ldrh	r3, [r3, #0]
 801f59c:	461a      	mov	r2, r3
 801f59e:	4b88      	ldr	r3, [pc, #544]	; (801f7c0 <tcp_receive+0xb0c>)
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	441a      	add	r2, r3
 801f5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f5a6:	68db      	ldr	r3, [r3, #12]
 801f5a8:	685b      	ldr	r3, [r3, #4]
 801f5aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	dd4d      	ble.n	801f64c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801f5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f5b2:	68db      	ldr	r3, [r3, #12]
 801f5b4:	685b      	ldr	r3, [r3, #4]
 801f5b6:	b29a      	uxth	r2, r3
 801f5b8:	4b81      	ldr	r3, [pc, #516]	; (801f7c0 <tcp_receive+0xb0c>)
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	b29b      	uxth	r3, r3
 801f5be:	1ad3      	subs	r3, r2, r3
 801f5c0:	b29a      	uxth	r2, r3
 801f5c2:	4b80      	ldr	r3, [pc, #512]	; (801f7c4 <tcp_receive+0xb10>)
 801f5c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801f5c6:	4b7f      	ldr	r3, [pc, #508]	; (801f7c4 <tcp_receive+0xb10>)
 801f5c8:	68db      	ldr	r3, [r3, #12]
 801f5ca:	899b      	ldrh	r3, [r3, #12]
 801f5cc:	b29b      	uxth	r3, r3
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	f7fa fdbe 	bl	801a150 <lwip_htons>
 801f5d4:	4603      	mov	r3, r0
 801f5d6:	b2db      	uxtb	r3, r3
 801f5d8:	f003 0302 	and.w	r3, r3, #2
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d005      	beq.n	801f5ec <tcp_receive+0x938>
                inseg.len -= 1;
 801f5e0:	4b78      	ldr	r3, [pc, #480]	; (801f7c4 <tcp_receive+0xb10>)
 801f5e2:	891b      	ldrh	r3, [r3, #8]
 801f5e4:	3b01      	subs	r3, #1
 801f5e6:	b29a      	uxth	r2, r3
 801f5e8:	4b76      	ldr	r3, [pc, #472]	; (801f7c4 <tcp_receive+0xb10>)
 801f5ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801f5ec:	4b75      	ldr	r3, [pc, #468]	; (801f7c4 <tcp_receive+0xb10>)
 801f5ee:	685b      	ldr	r3, [r3, #4]
 801f5f0:	4a74      	ldr	r2, [pc, #464]	; (801f7c4 <tcp_receive+0xb10>)
 801f5f2:	8912      	ldrh	r2, [r2, #8]
 801f5f4:	4611      	mov	r1, r2
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	f7fc f8da 	bl	801b7b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801f5fc:	4b71      	ldr	r3, [pc, #452]	; (801f7c4 <tcp_receive+0xb10>)
 801f5fe:	891c      	ldrh	r4, [r3, #8]
 801f600:	4b70      	ldr	r3, [pc, #448]	; (801f7c4 <tcp_receive+0xb10>)
 801f602:	68db      	ldr	r3, [r3, #12]
 801f604:	899b      	ldrh	r3, [r3, #12]
 801f606:	b29b      	uxth	r3, r3
 801f608:	4618      	mov	r0, r3
 801f60a:	f7fa fda1 	bl	801a150 <lwip_htons>
 801f60e:	4603      	mov	r3, r0
 801f610:	b2db      	uxtb	r3, r3
 801f612:	f003 0303 	and.w	r3, r3, #3
 801f616:	2b00      	cmp	r3, #0
 801f618:	d001      	beq.n	801f61e <tcp_receive+0x96a>
 801f61a:	2301      	movs	r3, #1
 801f61c:	e000      	b.n	801f620 <tcp_receive+0x96c>
 801f61e:	2300      	movs	r3, #0
 801f620:	4423      	add	r3, r4
 801f622:	b29a      	uxth	r2, r3
 801f624:	4b65      	ldr	r3, [pc, #404]	; (801f7bc <tcp_receive+0xb08>)
 801f626:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801f628:	4b64      	ldr	r3, [pc, #400]	; (801f7bc <tcp_receive+0xb08>)
 801f62a:	881b      	ldrh	r3, [r3, #0]
 801f62c:	461a      	mov	r2, r3
 801f62e:	4b64      	ldr	r3, [pc, #400]	; (801f7c0 <tcp_receive+0xb0c>)
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	441a      	add	r2, r3
 801f634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f636:	68db      	ldr	r3, [r3, #12]
 801f638:	685b      	ldr	r3, [r3, #4]
 801f63a:	429a      	cmp	r2, r3
 801f63c:	d006      	beq.n	801f64c <tcp_receive+0x998>
 801f63e:	4b62      	ldr	r3, [pc, #392]	; (801f7c8 <tcp_receive+0xb14>)
 801f640:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801f644:	4961      	ldr	r1, [pc, #388]	; (801f7cc <tcp_receive+0xb18>)
 801f646:	4862      	ldr	r0, [pc, #392]	; (801f7d0 <tcp_receive+0xb1c>)
 801f648:	f007 ff36 	bl	80274b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f650:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801f652:	4b5a      	ldr	r3, [pc, #360]	; (801f7bc <tcp_receive+0xb08>)
 801f654:	881b      	ldrh	r3, [r3, #0]
 801f656:	461a      	mov	r2, r3
 801f658:	4b59      	ldr	r3, [pc, #356]	; (801f7c0 <tcp_receive+0xb0c>)
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	441a      	add	r2, r3
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f666:	4b55      	ldr	r3, [pc, #340]	; (801f7bc <tcp_receive+0xb08>)
 801f668:	881b      	ldrh	r3, [r3, #0]
 801f66a:	429a      	cmp	r2, r3
 801f66c:	d206      	bcs.n	801f67c <tcp_receive+0x9c8>
 801f66e:	4b56      	ldr	r3, [pc, #344]	; (801f7c8 <tcp_receive+0xb14>)
 801f670:	f240 6207 	movw	r2, #1543	; 0x607
 801f674:	4957      	ldr	r1, [pc, #348]	; (801f7d4 <tcp_receive+0xb20>)
 801f676:	4856      	ldr	r0, [pc, #344]	; (801f7d0 <tcp_receive+0xb1c>)
 801f678:	f007 ff1e 	bl	80274b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f680:	4b4e      	ldr	r3, [pc, #312]	; (801f7bc <tcp_receive+0xb08>)
 801f682:	881b      	ldrh	r3, [r3, #0]
 801f684:	1ad3      	subs	r3, r2, r3
 801f686:	b29a      	uxth	r2, r3
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801f68c:	6878      	ldr	r0, [r7, #4]
 801f68e:	f7fc ffc5 	bl	801c61c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801f692:	4b4c      	ldr	r3, [pc, #304]	; (801f7c4 <tcp_receive+0xb10>)
 801f694:	685b      	ldr	r3, [r3, #4]
 801f696:	891b      	ldrh	r3, [r3, #8]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d006      	beq.n	801f6aa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801f69c:	4b49      	ldr	r3, [pc, #292]	; (801f7c4 <tcp_receive+0xb10>)
 801f69e:	685b      	ldr	r3, [r3, #4]
 801f6a0:	4a4d      	ldr	r2, [pc, #308]	; (801f7d8 <tcp_receive+0xb24>)
 801f6a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801f6a4:	4b47      	ldr	r3, [pc, #284]	; (801f7c4 <tcp_receive+0xb10>)
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f6aa:	4b46      	ldr	r3, [pc, #280]	; (801f7c4 <tcp_receive+0xb10>)
 801f6ac:	68db      	ldr	r3, [r3, #12]
 801f6ae:	899b      	ldrh	r3, [r3, #12]
 801f6b0:	b29b      	uxth	r3, r3
 801f6b2:	4618      	mov	r0, r3
 801f6b4:	f7fa fd4c 	bl	801a150 <lwip_htons>
 801f6b8:	4603      	mov	r3, r0
 801f6ba:	b2db      	uxtb	r3, r3
 801f6bc:	f003 0301 	and.w	r3, r3, #1
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	f000 80b8 	beq.w	801f836 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801f6c6:	4b45      	ldr	r3, [pc, #276]	; (801f7dc <tcp_receive+0xb28>)
 801f6c8:	781b      	ldrb	r3, [r3, #0]
 801f6ca:	f043 0320 	orr.w	r3, r3, #32
 801f6ce:	b2da      	uxtb	r2, r3
 801f6d0:	4b42      	ldr	r3, [pc, #264]	; (801f7dc <tcp_receive+0xb28>)
 801f6d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801f6d4:	e0af      	b.n	801f836 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f6da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f6e0:	68db      	ldr	r3, [r3, #12]
 801f6e2:	685b      	ldr	r3, [r3, #4]
 801f6e4:	4a36      	ldr	r2, [pc, #216]	; (801f7c0 <tcp_receive+0xb0c>)
 801f6e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801f6e8:	68bb      	ldr	r3, [r7, #8]
 801f6ea:	891b      	ldrh	r3, [r3, #8]
 801f6ec:	461c      	mov	r4, r3
 801f6ee:	68bb      	ldr	r3, [r7, #8]
 801f6f0:	68db      	ldr	r3, [r3, #12]
 801f6f2:	899b      	ldrh	r3, [r3, #12]
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	4618      	mov	r0, r3
 801f6f8:	f7fa fd2a 	bl	801a150 <lwip_htons>
 801f6fc:	4603      	mov	r3, r0
 801f6fe:	b2db      	uxtb	r3, r3
 801f700:	f003 0303 	and.w	r3, r3, #3
 801f704:	2b00      	cmp	r3, #0
 801f706:	d001      	beq.n	801f70c <tcp_receive+0xa58>
 801f708:	2301      	movs	r3, #1
 801f70a:	e000      	b.n	801f70e <tcp_receive+0xa5a>
 801f70c:	2300      	movs	r3, #0
 801f70e:	191a      	adds	r2, r3, r4
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f714:	441a      	add	r2, r3
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f71e:	461c      	mov	r4, r3
 801f720:	68bb      	ldr	r3, [r7, #8]
 801f722:	891b      	ldrh	r3, [r3, #8]
 801f724:	461d      	mov	r5, r3
 801f726:	68bb      	ldr	r3, [r7, #8]
 801f728:	68db      	ldr	r3, [r3, #12]
 801f72a:	899b      	ldrh	r3, [r3, #12]
 801f72c:	b29b      	uxth	r3, r3
 801f72e:	4618      	mov	r0, r3
 801f730:	f7fa fd0e 	bl	801a150 <lwip_htons>
 801f734:	4603      	mov	r3, r0
 801f736:	b2db      	uxtb	r3, r3
 801f738:	f003 0303 	and.w	r3, r3, #3
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d001      	beq.n	801f744 <tcp_receive+0xa90>
 801f740:	2301      	movs	r3, #1
 801f742:	e000      	b.n	801f746 <tcp_receive+0xa92>
 801f744:	2300      	movs	r3, #0
 801f746:	442b      	add	r3, r5
 801f748:	429c      	cmp	r4, r3
 801f74a:	d206      	bcs.n	801f75a <tcp_receive+0xaa6>
 801f74c:	4b1e      	ldr	r3, [pc, #120]	; (801f7c8 <tcp_receive+0xb14>)
 801f74e:	f240 622b 	movw	r2, #1579	; 0x62b
 801f752:	4923      	ldr	r1, [pc, #140]	; (801f7e0 <tcp_receive+0xb2c>)
 801f754:	481e      	ldr	r0, [pc, #120]	; (801f7d0 <tcp_receive+0xb1c>)
 801f756:	f007 feaf 	bl	80274b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801f75a:	68bb      	ldr	r3, [r7, #8]
 801f75c:	891b      	ldrh	r3, [r3, #8]
 801f75e:	461c      	mov	r4, r3
 801f760:	68bb      	ldr	r3, [r7, #8]
 801f762:	68db      	ldr	r3, [r3, #12]
 801f764:	899b      	ldrh	r3, [r3, #12]
 801f766:	b29b      	uxth	r3, r3
 801f768:	4618      	mov	r0, r3
 801f76a:	f7fa fcf1 	bl	801a150 <lwip_htons>
 801f76e:	4603      	mov	r3, r0
 801f770:	b2db      	uxtb	r3, r3
 801f772:	f003 0303 	and.w	r3, r3, #3
 801f776:	2b00      	cmp	r3, #0
 801f778:	d001      	beq.n	801f77e <tcp_receive+0xaca>
 801f77a:	2301      	movs	r3, #1
 801f77c:	e000      	b.n	801f780 <tcp_receive+0xacc>
 801f77e:	2300      	movs	r3, #0
 801f780:	1919      	adds	r1, r3, r4
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f786:	b28b      	uxth	r3, r1
 801f788:	1ad3      	subs	r3, r2, r3
 801f78a:	b29a      	uxth	r2, r3
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801f790:	6878      	ldr	r0, [r7, #4]
 801f792:	f7fc ff43 	bl	801c61c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801f796:	68bb      	ldr	r3, [r7, #8]
 801f798:	685b      	ldr	r3, [r3, #4]
 801f79a:	891b      	ldrh	r3, [r3, #8]
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d028      	beq.n	801f7f2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801f7a0:	4b0d      	ldr	r3, [pc, #52]	; (801f7d8 <tcp_receive+0xb24>)
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	d01d      	beq.n	801f7e4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801f7a8:	4b0b      	ldr	r3, [pc, #44]	; (801f7d8 <tcp_receive+0xb24>)
 801f7aa:	681a      	ldr	r2, [r3, #0]
 801f7ac:	68bb      	ldr	r3, [r7, #8]
 801f7ae:	685b      	ldr	r3, [r3, #4]
 801f7b0:	4619      	mov	r1, r3
 801f7b2:	4610      	mov	r0, r2
 801f7b4:	f7fc fa50 	bl	801bc58 <pbuf_cat>
 801f7b8:	e018      	b.n	801f7ec <tcp_receive+0xb38>
 801f7ba:	bf00      	nop
 801f7bc:	2400cf9a 	.word	0x2400cf9a
 801f7c0:	2400cf90 	.word	0x2400cf90
 801f7c4:	2400cf70 	.word	0x2400cf70
 801f7c8:	08029768 	.word	0x08029768
 801f7cc:	08029b48 	.word	0x08029b48
 801f7d0:	080297b4 	.word	0x080297b4
 801f7d4:	08029b84 	.word	0x08029b84
 801f7d8:	2400cfa0 	.word	0x2400cfa0
 801f7dc:	2400cf9d 	.word	0x2400cf9d
 801f7e0:	08029ba4 	.word	0x08029ba4
            } else {
              recv_data = cseg->p;
 801f7e4:	68bb      	ldr	r3, [r7, #8]
 801f7e6:	685b      	ldr	r3, [r3, #4]
 801f7e8:	4a70      	ldr	r2, [pc, #448]	; (801f9ac <tcp_receive+0xcf8>)
 801f7ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801f7ec:	68bb      	ldr	r3, [r7, #8]
 801f7ee:	2200      	movs	r2, #0
 801f7f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801f7f2:	68bb      	ldr	r3, [r7, #8]
 801f7f4:	68db      	ldr	r3, [r3, #12]
 801f7f6:	899b      	ldrh	r3, [r3, #12]
 801f7f8:	b29b      	uxth	r3, r3
 801f7fa:	4618      	mov	r0, r3
 801f7fc:	f7fa fca8 	bl	801a150 <lwip_htons>
 801f800:	4603      	mov	r3, r0
 801f802:	b2db      	uxtb	r3, r3
 801f804:	f003 0301 	and.w	r3, r3, #1
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d00d      	beq.n	801f828 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801f80c:	4b68      	ldr	r3, [pc, #416]	; (801f9b0 <tcp_receive+0xcfc>)
 801f80e:	781b      	ldrb	r3, [r3, #0]
 801f810:	f043 0320 	orr.w	r3, r3, #32
 801f814:	b2da      	uxtb	r2, r3
 801f816:	4b66      	ldr	r3, [pc, #408]	; (801f9b0 <tcp_receive+0xcfc>)
 801f818:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	7d1b      	ldrb	r3, [r3, #20]
 801f81e:	2b04      	cmp	r3, #4
 801f820:	d102      	bne.n	801f828 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	2207      	movs	r2, #7
 801f826:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801f828:	68bb      	ldr	r3, [r7, #8]
 801f82a:	681a      	ldr	r2, [r3, #0]
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801f830:	68b8      	ldr	r0, [r7, #8]
 801f832:	f7fd fbd2 	bl	801cfda <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d008      	beq.n	801f850 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f842:	68db      	ldr	r3, [r3, #12]
 801f844:	685a      	ldr	r2, [r3, #4]
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801f84a:	429a      	cmp	r2, r3
 801f84c:	f43f af43 	beq.w	801f6d6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	8b5b      	ldrh	r3, [r3, #26]
 801f854:	f003 0301 	and.w	r3, r3, #1
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d00e      	beq.n	801f87a <tcp_receive+0xbc6>
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	8b5b      	ldrh	r3, [r3, #26]
 801f860:	f023 0301 	bic.w	r3, r3, #1
 801f864:	b29a      	uxth	r2, r3
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	835a      	strh	r2, [r3, #26]
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	8b5b      	ldrh	r3, [r3, #26]
 801f86e:	f043 0302 	orr.w	r3, r3, #2
 801f872:	b29a      	uxth	r2, r3
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f878:	e188      	b.n	801fb8c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	8b5b      	ldrh	r3, [r3, #26]
 801f87e:	f043 0301 	orr.w	r3, r3, #1
 801f882:	b29a      	uxth	r2, r3
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f888:	e180      	b.n	801fb8c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f88e:	2b00      	cmp	r3, #0
 801f890:	d106      	bne.n	801f8a0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801f892:	4848      	ldr	r0, [pc, #288]	; (801f9b4 <tcp_receive+0xd00>)
 801f894:	f7fd fbba 	bl	801d00c <tcp_seg_copy>
 801f898:	4602      	mov	r2, r0
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	675a      	str	r2, [r3, #116]	; 0x74
 801f89e:	e16d      	b.n	801fb7c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801f8a0:	2300      	movs	r3, #0
 801f8a2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f8a8:	63bb      	str	r3, [r7, #56]	; 0x38
 801f8aa:	e157      	b.n	801fb5c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801f8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f8ae:	68db      	ldr	r3, [r3, #12]
 801f8b0:	685a      	ldr	r2, [r3, #4]
 801f8b2:	4b41      	ldr	r3, [pc, #260]	; (801f9b8 <tcp_receive+0xd04>)
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	429a      	cmp	r2, r3
 801f8b8:	d11d      	bne.n	801f8f6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801f8ba:	4b3e      	ldr	r3, [pc, #248]	; (801f9b4 <tcp_receive+0xd00>)
 801f8bc:	891a      	ldrh	r2, [r3, #8]
 801f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f8c0:	891b      	ldrh	r3, [r3, #8]
 801f8c2:	429a      	cmp	r2, r3
 801f8c4:	f240 814f 	bls.w	801fb66 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f8c8:	483a      	ldr	r0, [pc, #232]	; (801f9b4 <tcp_receive+0xd00>)
 801f8ca:	f7fd fb9f 	bl	801d00c <tcp_seg_copy>
 801f8ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801f8d0:	697b      	ldr	r3, [r7, #20]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	f000 8149 	beq.w	801fb6a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801f8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d003      	beq.n	801f8e6 <tcp_receive+0xc32>
                    prev->next = cseg;
 801f8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8e0:	697a      	ldr	r2, [r7, #20]
 801f8e2:	601a      	str	r2, [r3, #0]
 801f8e4:	e002      	b.n	801f8ec <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	697a      	ldr	r2, [r7, #20]
 801f8ea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801f8ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801f8ee:	6978      	ldr	r0, [r7, #20]
 801f8f0:	f7ff f8dc 	bl	801eaac <tcp_oos_insert_segment>
                }
                break;
 801f8f4:	e139      	b.n	801fb6a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801f8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	d117      	bne.n	801f92c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801f8fc:	4b2e      	ldr	r3, [pc, #184]	; (801f9b8 <tcp_receive+0xd04>)
 801f8fe:	681a      	ldr	r2, [r3, #0]
 801f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f902:	68db      	ldr	r3, [r3, #12]
 801f904:	685b      	ldr	r3, [r3, #4]
 801f906:	1ad3      	subs	r3, r2, r3
 801f908:	2b00      	cmp	r3, #0
 801f90a:	da57      	bge.n	801f9bc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f90c:	4829      	ldr	r0, [pc, #164]	; (801f9b4 <tcp_receive+0xd00>)
 801f90e:	f7fd fb7d 	bl	801d00c <tcp_seg_copy>
 801f912:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801f914:	69bb      	ldr	r3, [r7, #24]
 801f916:	2b00      	cmp	r3, #0
 801f918:	f000 8129 	beq.w	801fb6e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	69ba      	ldr	r2, [r7, #24]
 801f920:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801f922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801f924:	69b8      	ldr	r0, [r7, #24]
 801f926:	f7ff f8c1 	bl	801eaac <tcp_oos_insert_segment>
                  }
                  break;
 801f92a:	e120      	b.n	801fb6e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801f92c:	4b22      	ldr	r3, [pc, #136]	; (801f9b8 <tcp_receive+0xd04>)
 801f92e:	681a      	ldr	r2, [r3, #0]
 801f930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f932:	68db      	ldr	r3, [r3, #12]
 801f934:	685b      	ldr	r3, [r3, #4]
 801f936:	1ad3      	subs	r3, r2, r3
 801f938:	3b01      	subs	r3, #1
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	db3e      	blt.n	801f9bc <tcp_receive+0xd08>
 801f93e:	4b1e      	ldr	r3, [pc, #120]	; (801f9b8 <tcp_receive+0xd04>)
 801f940:	681a      	ldr	r2, [r3, #0]
 801f942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f944:	68db      	ldr	r3, [r3, #12]
 801f946:	685b      	ldr	r3, [r3, #4]
 801f948:	1ad3      	subs	r3, r2, r3
 801f94a:	3301      	adds	r3, #1
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	dc35      	bgt.n	801f9bc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f950:	4818      	ldr	r0, [pc, #96]	; (801f9b4 <tcp_receive+0xd00>)
 801f952:	f7fd fb5b 	bl	801d00c <tcp_seg_copy>
 801f956:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801f958:	69fb      	ldr	r3, [r7, #28]
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	f000 8109 	beq.w	801fb72 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801f960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f962:	68db      	ldr	r3, [r3, #12]
 801f964:	685b      	ldr	r3, [r3, #4]
 801f966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f968:	8912      	ldrh	r2, [r2, #8]
 801f96a:	441a      	add	r2, r3
 801f96c:	4b12      	ldr	r3, [pc, #72]	; (801f9b8 <tcp_receive+0xd04>)
 801f96e:	681b      	ldr	r3, [r3, #0]
 801f970:	1ad3      	subs	r3, r2, r3
 801f972:	2b00      	cmp	r3, #0
 801f974:	dd12      	ble.n	801f99c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801f976:	4b10      	ldr	r3, [pc, #64]	; (801f9b8 <tcp_receive+0xd04>)
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	b29a      	uxth	r2, r3
 801f97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f97e:	68db      	ldr	r3, [r3, #12]
 801f980:	685b      	ldr	r3, [r3, #4]
 801f982:	b29b      	uxth	r3, r3
 801f984:	1ad3      	subs	r3, r2, r3
 801f986:	b29a      	uxth	r2, r3
 801f988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f98a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801f98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f98e:	685a      	ldr	r2, [r3, #4]
 801f990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f992:	891b      	ldrh	r3, [r3, #8]
 801f994:	4619      	mov	r1, r3
 801f996:	4610      	mov	r0, r2
 801f998:	f7fb ff0a 	bl	801b7b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801f99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f99e:	69fa      	ldr	r2, [r7, #28]
 801f9a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801f9a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801f9a4:	69f8      	ldr	r0, [r7, #28]
 801f9a6:	f7ff f881 	bl	801eaac <tcp_oos_insert_segment>
                  }
                  break;
 801f9aa:	e0e2      	b.n	801fb72 <tcp_receive+0xebe>
 801f9ac:	2400cfa0 	.word	0x2400cfa0
 801f9b0:	2400cf9d 	.word	0x2400cf9d
 801f9b4:	2400cf70 	.word	0x2400cf70
 801f9b8:	2400cf90 	.word	0x2400cf90
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801f9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9be:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9c2:	681b      	ldr	r3, [r3, #0]
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	f040 80c6 	bne.w	801fb56 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801f9ca:	4b80      	ldr	r3, [pc, #512]	; (801fbcc <tcp_receive+0xf18>)
 801f9cc:	681a      	ldr	r2, [r3, #0]
 801f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9d0:	68db      	ldr	r3, [r3, #12]
 801f9d2:	685b      	ldr	r3, [r3, #4]
 801f9d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	f340 80bd 	ble.w	801fb56 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9de:	68db      	ldr	r3, [r3, #12]
 801f9e0:	899b      	ldrh	r3, [r3, #12]
 801f9e2:	b29b      	uxth	r3, r3
 801f9e4:	4618      	mov	r0, r3
 801f9e6:	f7fa fbb3 	bl	801a150 <lwip_htons>
 801f9ea:	4603      	mov	r3, r0
 801f9ec:	b2db      	uxtb	r3, r3
 801f9ee:	f003 0301 	and.w	r3, r3, #1
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	f040 80bf 	bne.w	801fb76 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801f9f8:	4875      	ldr	r0, [pc, #468]	; (801fbd0 <tcp_receive+0xf1c>)
 801f9fa:	f7fd fb07 	bl	801d00c <tcp_seg_copy>
 801f9fe:	4602      	mov	r2, r0
 801fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa02:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	f000 80b6 	beq.w	801fb7a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801fa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa10:	68db      	ldr	r3, [r3, #12]
 801fa12:	685b      	ldr	r3, [r3, #4]
 801fa14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fa16:	8912      	ldrh	r2, [r2, #8]
 801fa18:	441a      	add	r2, r3
 801fa1a:	4b6c      	ldr	r3, [pc, #432]	; (801fbcc <tcp_receive+0xf18>)
 801fa1c:	681b      	ldr	r3, [r3, #0]
 801fa1e:	1ad3      	subs	r3, r2, r3
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	dd12      	ble.n	801fa4a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801fa24:	4b69      	ldr	r3, [pc, #420]	; (801fbcc <tcp_receive+0xf18>)
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	b29a      	uxth	r2, r3
 801fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa2c:	68db      	ldr	r3, [r3, #12]
 801fa2e:	685b      	ldr	r3, [r3, #4]
 801fa30:	b29b      	uxth	r3, r3
 801fa32:	1ad3      	subs	r3, r2, r3
 801fa34:	b29a      	uxth	r2, r3
 801fa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa38:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa3c:	685a      	ldr	r2, [r3, #4]
 801fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa40:	891b      	ldrh	r3, [r3, #8]
 801fa42:	4619      	mov	r1, r3
 801fa44:	4610      	mov	r0, r2
 801fa46:	f7fb feb3 	bl	801b7b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801fa4a:	4b62      	ldr	r3, [pc, #392]	; (801fbd4 <tcp_receive+0xf20>)
 801fa4c:	881b      	ldrh	r3, [r3, #0]
 801fa4e:	461a      	mov	r2, r3
 801fa50:	4b5e      	ldr	r3, [pc, #376]	; (801fbcc <tcp_receive+0xf18>)
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	441a      	add	r2, r3
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa5a:	6879      	ldr	r1, [r7, #4]
 801fa5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801fa5e:	440b      	add	r3, r1
 801fa60:	1ad3      	subs	r3, r2, r3
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	f340 8089 	ble.w	801fb7a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	68db      	ldr	r3, [r3, #12]
 801fa6e:	899b      	ldrh	r3, [r3, #12]
 801fa70:	b29b      	uxth	r3, r3
 801fa72:	4618      	mov	r0, r3
 801fa74:	f7fa fb6c 	bl	801a150 <lwip_htons>
 801fa78:	4603      	mov	r3, r0
 801fa7a:	b2db      	uxtb	r3, r3
 801fa7c:	f003 0301 	and.w	r3, r3, #1
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d022      	beq.n	801faca <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801fa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	68db      	ldr	r3, [r3, #12]
 801fa8a:	899b      	ldrh	r3, [r3, #12]
 801fa8c:	b29b      	uxth	r3, r3
 801fa8e:	b21b      	sxth	r3, r3
 801fa90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801fa94:	b21c      	sxth	r4, r3
 801fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	68db      	ldr	r3, [r3, #12]
 801fa9c:	899b      	ldrh	r3, [r3, #12]
 801fa9e:	b29b      	uxth	r3, r3
 801faa0:	4618      	mov	r0, r3
 801faa2:	f7fa fb55 	bl	801a150 <lwip_htons>
 801faa6:	4603      	mov	r3, r0
 801faa8:	b2db      	uxtb	r3, r3
 801faaa:	b29b      	uxth	r3, r3
 801faac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801fab0:	b29b      	uxth	r3, r3
 801fab2:	4618      	mov	r0, r3
 801fab4:	f7fa fb4c 	bl	801a150 <lwip_htons>
 801fab8:	4603      	mov	r3, r0
 801faba:	b21b      	sxth	r3, r3
 801fabc:	4323      	orrs	r3, r4
 801fabe:	b21a      	sxth	r2, r3
 801fac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fac2:	681b      	ldr	r3, [r3, #0]
 801fac4:	68db      	ldr	r3, [r3, #12]
 801fac6:	b292      	uxth	r2, r2
 801fac8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801face:	b29a      	uxth	r2, r3
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fad4:	4413      	add	r3, r2
 801fad6:	b299      	uxth	r1, r3
 801fad8:	4b3c      	ldr	r3, [pc, #240]	; (801fbcc <tcp_receive+0xf18>)
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	b29a      	uxth	r2, r3
 801fade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	1a8a      	subs	r2, r1, r2
 801fae4:	b292      	uxth	r2, r2
 801fae6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	685a      	ldr	r2, [r3, #4]
 801faee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	891b      	ldrh	r3, [r3, #8]
 801faf4:	4619      	mov	r1, r3
 801faf6:	4610      	mov	r0, r2
 801faf8:	f7fb fe5a 	bl	801b7b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801fafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fafe:	681b      	ldr	r3, [r3, #0]
 801fb00:	891c      	ldrh	r4, [r3, #8]
 801fb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	68db      	ldr	r3, [r3, #12]
 801fb08:	899b      	ldrh	r3, [r3, #12]
 801fb0a:	b29b      	uxth	r3, r3
 801fb0c:	4618      	mov	r0, r3
 801fb0e:	f7fa fb1f 	bl	801a150 <lwip_htons>
 801fb12:	4603      	mov	r3, r0
 801fb14:	b2db      	uxtb	r3, r3
 801fb16:	f003 0303 	and.w	r3, r3, #3
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d001      	beq.n	801fb22 <tcp_receive+0xe6e>
 801fb1e:	2301      	movs	r3, #1
 801fb20:	e000      	b.n	801fb24 <tcp_receive+0xe70>
 801fb22:	2300      	movs	r3, #0
 801fb24:	4423      	add	r3, r4
 801fb26:	b29a      	uxth	r2, r3
 801fb28:	4b2a      	ldr	r3, [pc, #168]	; (801fbd4 <tcp_receive+0xf20>)
 801fb2a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801fb2c:	4b29      	ldr	r3, [pc, #164]	; (801fbd4 <tcp_receive+0xf20>)
 801fb2e:	881b      	ldrh	r3, [r3, #0]
 801fb30:	461a      	mov	r2, r3
 801fb32:	4b26      	ldr	r3, [pc, #152]	; (801fbcc <tcp_receive+0xf18>)
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	441a      	add	r2, r3
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb3c:	6879      	ldr	r1, [r7, #4]
 801fb3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801fb40:	440b      	add	r3, r1
 801fb42:	429a      	cmp	r2, r3
 801fb44:	d019      	beq.n	801fb7a <tcp_receive+0xec6>
 801fb46:	4b24      	ldr	r3, [pc, #144]	; (801fbd8 <tcp_receive+0xf24>)
 801fb48:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801fb4c:	4923      	ldr	r1, [pc, #140]	; (801fbdc <tcp_receive+0xf28>)
 801fb4e:	4824      	ldr	r0, [pc, #144]	; (801fbe0 <tcp_receive+0xf2c>)
 801fb50:	f007 fcb2 	bl	80274b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801fb54:	e011      	b.n	801fb7a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801fb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	63bb      	str	r3, [r7, #56]	; 0x38
 801fb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	f47f aea4 	bne.w	801f8ac <tcp_receive+0xbf8>
 801fb64:	e00a      	b.n	801fb7c <tcp_receive+0xec8>
                break;
 801fb66:	bf00      	nop
 801fb68:	e008      	b.n	801fb7c <tcp_receive+0xec8>
                break;
 801fb6a:	bf00      	nop
 801fb6c:	e006      	b.n	801fb7c <tcp_receive+0xec8>
                  break;
 801fb6e:	bf00      	nop
 801fb70:	e004      	b.n	801fb7c <tcp_receive+0xec8>
                  break;
 801fb72:	bf00      	nop
 801fb74:	e002      	b.n	801fb7c <tcp_receive+0xec8>
                  break;
 801fb76:	bf00      	nop
 801fb78:	e000      	b.n	801fb7c <tcp_receive+0xec8>
                break;
 801fb7a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801fb7c:	6878      	ldr	r0, [r7, #4]
 801fb7e:	f001 fa33 	bl	8020fe8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801fb82:	e003      	b.n	801fb8c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801fb84:	6878      	ldr	r0, [r7, #4]
 801fb86:	f001 fa2f 	bl	8020fe8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801fb8a:	e01a      	b.n	801fbc2 <tcp_receive+0xf0e>
 801fb8c:	e019      	b.n	801fbc2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801fb8e:	4b0f      	ldr	r3, [pc, #60]	; (801fbcc <tcp_receive+0xf18>)
 801fb90:	681a      	ldr	r2, [r3, #0]
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb96:	1ad3      	subs	r3, r2, r3
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	db0a      	blt.n	801fbb2 <tcp_receive+0xefe>
 801fb9c:	4b0b      	ldr	r3, [pc, #44]	; (801fbcc <tcp_receive+0xf18>)
 801fb9e:	681a      	ldr	r2, [r3, #0]
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fba4:	6879      	ldr	r1, [r7, #4]
 801fba6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801fba8:	440b      	add	r3, r1
 801fbaa:	1ad3      	subs	r3, r2, r3
 801fbac:	3301      	adds	r3, #1
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	dd07      	ble.n	801fbc2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	8b5b      	ldrh	r3, [r3, #26]
 801fbb6:	f043 0302 	orr.w	r3, r3, #2
 801fbba:	b29a      	uxth	r2, r3
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801fbc0:	e7ff      	b.n	801fbc2 <tcp_receive+0xf0e>
 801fbc2:	bf00      	nop
 801fbc4:	3750      	adds	r7, #80	; 0x50
 801fbc6:	46bd      	mov	sp, r7
 801fbc8:	bdb0      	pop	{r4, r5, r7, pc}
 801fbca:	bf00      	nop
 801fbcc:	2400cf90 	.word	0x2400cf90
 801fbd0:	2400cf70 	.word	0x2400cf70
 801fbd4:	2400cf9a 	.word	0x2400cf9a
 801fbd8:	08029768 	.word	0x08029768
 801fbdc:	08029b10 	.word	0x08029b10
 801fbe0:	080297b4 	.word	0x080297b4

0801fbe4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801fbe4:	b480      	push	{r7}
 801fbe6:	b083      	sub	sp, #12
 801fbe8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801fbea:	4b15      	ldr	r3, [pc, #84]	; (801fc40 <tcp_get_next_optbyte+0x5c>)
 801fbec:	881b      	ldrh	r3, [r3, #0]
 801fbee:	1c5a      	adds	r2, r3, #1
 801fbf0:	b291      	uxth	r1, r2
 801fbf2:	4a13      	ldr	r2, [pc, #76]	; (801fc40 <tcp_get_next_optbyte+0x5c>)
 801fbf4:	8011      	strh	r1, [r2, #0]
 801fbf6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801fbf8:	4b12      	ldr	r3, [pc, #72]	; (801fc44 <tcp_get_next_optbyte+0x60>)
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d004      	beq.n	801fc0a <tcp_get_next_optbyte+0x26>
 801fc00:	4b11      	ldr	r3, [pc, #68]	; (801fc48 <tcp_get_next_optbyte+0x64>)
 801fc02:	881b      	ldrh	r3, [r3, #0]
 801fc04:	88fa      	ldrh	r2, [r7, #6]
 801fc06:	429a      	cmp	r2, r3
 801fc08:	d208      	bcs.n	801fc1c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801fc0a:	4b10      	ldr	r3, [pc, #64]	; (801fc4c <tcp_get_next_optbyte+0x68>)
 801fc0c:	681b      	ldr	r3, [r3, #0]
 801fc0e:	3314      	adds	r3, #20
 801fc10:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801fc12:	88fb      	ldrh	r3, [r7, #6]
 801fc14:	683a      	ldr	r2, [r7, #0]
 801fc16:	4413      	add	r3, r2
 801fc18:	781b      	ldrb	r3, [r3, #0]
 801fc1a:	e00b      	b.n	801fc34 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801fc1c:	88fb      	ldrh	r3, [r7, #6]
 801fc1e:	b2da      	uxtb	r2, r3
 801fc20:	4b09      	ldr	r3, [pc, #36]	; (801fc48 <tcp_get_next_optbyte+0x64>)
 801fc22:	881b      	ldrh	r3, [r3, #0]
 801fc24:	b2db      	uxtb	r3, r3
 801fc26:	1ad3      	subs	r3, r2, r3
 801fc28:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801fc2a:	4b06      	ldr	r3, [pc, #24]	; (801fc44 <tcp_get_next_optbyte+0x60>)
 801fc2c:	681a      	ldr	r2, [r3, #0]
 801fc2e:	797b      	ldrb	r3, [r7, #5]
 801fc30:	4413      	add	r3, r2
 801fc32:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fc34:	4618      	mov	r0, r3
 801fc36:	370c      	adds	r7, #12
 801fc38:	46bd      	mov	sp, r7
 801fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc3e:	4770      	bx	lr
 801fc40:	2400cf8c 	.word	0x2400cf8c
 801fc44:	2400cf88 	.word	0x2400cf88
 801fc48:	2400cf86 	.word	0x2400cf86
 801fc4c:	2400cf80 	.word	0x2400cf80

0801fc50 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801fc50:	b580      	push	{r7, lr}
 801fc52:	b084      	sub	sp, #16
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d106      	bne.n	801fc6c <tcp_parseopt+0x1c>
 801fc5e:	4b32      	ldr	r3, [pc, #200]	; (801fd28 <tcp_parseopt+0xd8>)
 801fc60:	f240 727d 	movw	r2, #1917	; 0x77d
 801fc64:	4931      	ldr	r1, [pc, #196]	; (801fd2c <tcp_parseopt+0xdc>)
 801fc66:	4832      	ldr	r0, [pc, #200]	; (801fd30 <tcp_parseopt+0xe0>)
 801fc68:	f007 fc26 	bl	80274b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801fc6c:	4b31      	ldr	r3, [pc, #196]	; (801fd34 <tcp_parseopt+0xe4>)
 801fc6e:	881b      	ldrh	r3, [r3, #0]
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	d055      	beq.n	801fd20 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801fc74:	4b30      	ldr	r3, [pc, #192]	; (801fd38 <tcp_parseopt+0xe8>)
 801fc76:	2200      	movs	r2, #0
 801fc78:	801a      	strh	r2, [r3, #0]
 801fc7a:	e045      	b.n	801fd08 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801fc7c:	f7ff ffb2 	bl	801fbe4 <tcp_get_next_optbyte>
 801fc80:	4603      	mov	r3, r0
 801fc82:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801fc84:	7bfb      	ldrb	r3, [r7, #15]
 801fc86:	2b02      	cmp	r3, #2
 801fc88:	d006      	beq.n	801fc98 <tcp_parseopt+0x48>
 801fc8a:	2b02      	cmp	r3, #2
 801fc8c:	dc2b      	bgt.n	801fce6 <tcp_parseopt+0x96>
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	d041      	beq.n	801fd16 <tcp_parseopt+0xc6>
 801fc92:	2b01      	cmp	r3, #1
 801fc94:	d127      	bne.n	801fce6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801fc96:	e037      	b.n	801fd08 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801fc98:	f7ff ffa4 	bl	801fbe4 <tcp_get_next_optbyte>
 801fc9c:	4603      	mov	r3, r0
 801fc9e:	2b04      	cmp	r3, #4
 801fca0:	d13b      	bne.n	801fd1a <tcp_parseopt+0xca>
 801fca2:	4b25      	ldr	r3, [pc, #148]	; (801fd38 <tcp_parseopt+0xe8>)
 801fca4:	881b      	ldrh	r3, [r3, #0]
 801fca6:	3301      	adds	r3, #1
 801fca8:	4a22      	ldr	r2, [pc, #136]	; (801fd34 <tcp_parseopt+0xe4>)
 801fcaa:	8812      	ldrh	r2, [r2, #0]
 801fcac:	4293      	cmp	r3, r2
 801fcae:	da34      	bge.n	801fd1a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801fcb0:	f7ff ff98 	bl	801fbe4 <tcp_get_next_optbyte>
 801fcb4:	4603      	mov	r3, r0
 801fcb6:	b29b      	uxth	r3, r3
 801fcb8:	021b      	lsls	r3, r3, #8
 801fcba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801fcbc:	f7ff ff92 	bl	801fbe4 <tcp_get_next_optbyte>
 801fcc0:	4603      	mov	r3, r0
 801fcc2:	b29a      	uxth	r2, r3
 801fcc4:	89bb      	ldrh	r3, [r7, #12]
 801fcc6:	4313      	orrs	r3, r2
 801fcc8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801fcca:	89bb      	ldrh	r3, [r7, #12]
 801fccc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801fcd0:	d804      	bhi.n	801fcdc <tcp_parseopt+0x8c>
 801fcd2:	89bb      	ldrh	r3, [r7, #12]
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d001      	beq.n	801fcdc <tcp_parseopt+0x8c>
 801fcd8:	89ba      	ldrh	r2, [r7, #12]
 801fcda:	e001      	b.n	801fce0 <tcp_parseopt+0x90>
 801fcdc:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801fce4:	e010      	b.n	801fd08 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801fce6:	f7ff ff7d 	bl	801fbe4 <tcp_get_next_optbyte>
 801fcea:	4603      	mov	r3, r0
 801fcec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801fcee:	7afb      	ldrb	r3, [r7, #11]
 801fcf0:	2b01      	cmp	r3, #1
 801fcf2:	d914      	bls.n	801fd1e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801fcf4:	7afb      	ldrb	r3, [r7, #11]
 801fcf6:	b29a      	uxth	r2, r3
 801fcf8:	4b0f      	ldr	r3, [pc, #60]	; (801fd38 <tcp_parseopt+0xe8>)
 801fcfa:	881b      	ldrh	r3, [r3, #0]
 801fcfc:	4413      	add	r3, r2
 801fcfe:	b29b      	uxth	r3, r3
 801fd00:	3b02      	subs	r3, #2
 801fd02:	b29a      	uxth	r2, r3
 801fd04:	4b0c      	ldr	r3, [pc, #48]	; (801fd38 <tcp_parseopt+0xe8>)
 801fd06:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801fd08:	4b0b      	ldr	r3, [pc, #44]	; (801fd38 <tcp_parseopt+0xe8>)
 801fd0a:	881a      	ldrh	r2, [r3, #0]
 801fd0c:	4b09      	ldr	r3, [pc, #36]	; (801fd34 <tcp_parseopt+0xe4>)
 801fd0e:	881b      	ldrh	r3, [r3, #0]
 801fd10:	429a      	cmp	r2, r3
 801fd12:	d3b3      	bcc.n	801fc7c <tcp_parseopt+0x2c>
 801fd14:	e004      	b.n	801fd20 <tcp_parseopt+0xd0>
          return;
 801fd16:	bf00      	nop
 801fd18:	e002      	b.n	801fd20 <tcp_parseopt+0xd0>
            return;
 801fd1a:	bf00      	nop
 801fd1c:	e000      	b.n	801fd20 <tcp_parseopt+0xd0>
            return;
 801fd1e:	bf00      	nop
      }
    }
  }
}
 801fd20:	3710      	adds	r7, #16
 801fd22:	46bd      	mov	sp, r7
 801fd24:	bd80      	pop	{r7, pc}
 801fd26:	bf00      	nop
 801fd28:	08029768 	.word	0x08029768
 801fd2c:	08029bcc 	.word	0x08029bcc
 801fd30:	080297b4 	.word	0x080297b4
 801fd34:	2400cf84 	.word	0x2400cf84
 801fd38:	2400cf8c 	.word	0x2400cf8c

0801fd3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801fd3c:	b480      	push	{r7}
 801fd3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801fd40:	4b05      	ldr	r3, [pc, #20]	; (801fd58 <tcp_trigger_input_pcb_close+0x1c>)
 801fd42:	781b      	ldrb	r3, [r3, #0]
 801fd44:	f043 0310 	orr.w	r3, r3, #16
 801fd48:	b2da      	uxtb	r2, r3
 801fd4a:	4b03      	ldr	r3, [pc, #12]	; (801fd58 <tcp_trigger_input_pcb_close+0x1c>)
 801fd4c:	701a      	strb	r2, [r3, #0]
}
 801fd4e:	bf00      	nop
 801fd50:	46bd      	mov	sp, r7
 801fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd56:	4770      	bx	lr
 801fd58:	2400cf9d 	.word	0x2400cf9d

0801fd5c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801fd5c:	b580      	push	{r7, lr}
 801fd5e:	b084      	sub	sp, #16
 801fd60:	af00      	add	r7, sp, #0
 801fd62:	60f8      	str	r0, [r7, #12]
 801fd64:	60b9      	str	r1, [r7, #8]
 801fd66:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801fd68:	68fb      	ldr	r3, [r7, #12]
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	d00a      	beq.n	801fd84 <tcp_route+0x28>
 801fd6e:	68fb      	ldr	r3, [r7, #12]
 801fd70:	7a1b      	ldrb	r3, [r3, #8]
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d006      	beq.n	801fd84 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801fd76:	68fb      	ldr	r3, [r7, #12]
 801fd78:	7a1b      	ldrb	r3, [r3, #8]
 801fd7a:	4618      	mov	r0, r3
 801fd7c:	f7fb fb10 	bl	801b3a0 <netif_get_by_index>
 801fd80:	4603      	mov	r3, r0
 801fd82:	e003      	b.n	801fd8c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801fd84:	6878      	ldr	r0, [r7, #4]
 801fd86:	f005 f86d 	bl	8024e64 <ip4_route>
 801fd8a:	4603      	mov	r3, r0
  }
}
 801fd8c:	4618      	mov	r0, r3
 801fd8e:	3710      	adds	r7, #16
 801fd90:	46bd      	mov	sp, r7
 801fd92:	bd80      	pop	{r7, pc}

0801fd94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801fd94:	b590      	push	{r4, r7, lr}
 801fd96:	b087      	sub	sp, #28
 801fd98:	af00      	add	r7, sp, #0
 801fd9a:	60f8      	str	r0, [r7, #12]
 801fd9c:	60b9      	str	r1, [r7, #8]
 801fd9e:	603b      	str	r3, [r7, #0]
 801fda0:	4613      	mov	r3, r2
 801fda2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fda4:	68fb      	ldr	r3, [r7, #12]
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d105      	bne.n	801fdb6 <tcp_create_segment+0x22>
 801fdaa:	4b44      	ldr	r3, [pc, #272]	; (801febc <tcp_create_segment+0x128>)
 801fdac:	22a3      	movs	r2, #163	; 0xa3
 801fdae:	4944      	ldr	r1, [pc, #272]	; (801fec0 <tcp_create_segment+0x12c>)
 801fdb0:	4844      	ldr	r0, [pc, #272]	; (801fec4 <tcp_create_segment+0x130>)
 801fdb2:	f007 fb81 	bl	80274b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801fdb6:	68bb      	ldr	r3, [r7, #8]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d105      	bne.n	801fdc8 <tcp_create_segment+0x34>
 801fdbc:	4b3f      	ldr	r3, [pc, #252]	; (801febc <tcp_create_segment+0x128>)
 801fdbe:	22a4      	movs	r2, #164	; 0xa4
 801fdc0:	4941      	ldr	r1, [pc, #260]	; (801fec8 <tcp_create_segment+0x134>)
 801fdc2:	4840      	ldr	r0, [pc, #256]	; (801fec4 <tcp_create_segment+0x130>)
 801fdc4:	f007 fb78 	bl	80274b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fdc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801fdcc:	009b      	lsls	r3, r3, #2
 801fdce:	b2db      	uxtb	r3, r3
 801fdd0:	f003 0304 	and.w	r3, r3, #4
 801fdd4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801fdd6:	2003      	movs	r0, #3
 801fdd8:	f7fa ff4a 	bl	801ac70 <memp_malloc>
 801fddc:	6138      	str	r0, [r7, #16]
 801fdde:	693b      	ldr	r3, [r7, #16]
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d104      	bne.n	801fdee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801fde4:	68b8      	ldr	r0, [r7, #8]
 801fde6:	f7fb fe69 	bl	801babc <pbuf_free>
    return NULL;
 801fdea:	2300      	movs	r3, #0
 801fdec:	e061      	b.n	801feb2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801fdee:	693b      	ldr	r3, [r7, #16]
 801fdf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801fdf4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801fdf6:	693b      	ldr	r3, [r7, #16]
 801fdf8:	2200      	movs	r2, #0
 801fdfa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801fdfc:	693b      	ldr	r3, [r7, #16]
 801fdfe:	68ba      	ldr	r2, [r7, #8]
 801fe00:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fe02:	68bb      	ldr	r3, [r7, #8]
 801fe04:	891a      	ldrh	r2, [r3, #8]
 801fe06:	7dfb      	ldrb	r3, [r7, #23]
 801fe08:	b29b      	uxth	r3, r3
 801fe0a:	429a      	cmp	r2, r3
 801fe0c:	d205      	bcs.n	801fe1a <tcp_create_segment+0x86>
 801fe0e:	4b2b      	ldr	r3, [pc, #172]	; (801febc <tcp_create_segment+0x128>)
 801fe10:	22b0      	movs	r2, #176	; 0xb0
 801fe12:	492e      	ldr	r1, [pc, #184]	; (801fecc <tcp_create_segment+0x138>)
 801fe14:	482b      	ldr	r0, [pc, #172]	; (801fec4 <tcp_create_segment+0x130>)
 801fe16:	f007 fb4f 	bl	80274b8 <iprintf>
  seg->len = p->tot_len - optlen;
 801fe1a:	68bb      	ldr	r3, [r7, #8]
 801fe1c:	891a      	ldrh	r2, [r3, #8]
 801fe1e:	7dfb      	ldrb	r3, [r7, #23]
 801fe20:	b29b      	uxth	r3, r3
 801fe22:	1ad3      	subs	r3, r2, r3
 801fe24:	b29a      	uxth	r2, r3
 801fe26:	693b      	ldr	r3, [r7, #16]
 801fe28:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801fe2a:	2114      	movs	r1, #20
 801fe2c:	68b8      	ldr	r0, [r7, #8]
 801fe2e:	f7fb fdaf 	bl	801b990 <pbuf_add_header>
 801fe32:	4603      	mov	r3, r0
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d004      	beq.n	801fe42 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801fe38:	6938      	ldr	r0, [r7, #16]
 801fe3a:	f7fd f8ce 	bl	801cfda <tcp_seg_free>
    return NULL;
 801fe3e:	2300      	movs	r3, #0
 801fe40:	e037      	b.n	801feb2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fe42:	693b      	ldr	r3, [r7, #16]
 801fe44:	685b      	ldr	r3, [r3, #4]
 801fe46:	685a      	ldr	r2, [r3, #4]
 801fe48:	693b      	ldr	r3, [r7, #16]
 801fe4a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801fe4c:	68fb      	ldr	r3, [r7, #12]
 801fe4e:	8ada      	ldrh	r2, [r3, #22]
 801fe50:	693b      	ldr	r3, [r7, #16]
 801fe52:	68dc      	ldr	r4, [r3, #12]
 801fe54:	4610      	mov	r0, r2
 801fe56:	f7fa f97b 	bl	801a150 <lwip_htons>
 801fe5a:	4603      	mov	r3, r0
 801fe5c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801fe5e:	68fb      	ldr	r3, [r7, #12]
 801fe60:	8b1a      	ldrh	r2, [r3, #24]
 801fe62:	693b      	ldr	r3, [r7, #16]
 801fe64:	68dc      	ldr	r4, [r3, #12]
 801fe66:	4610      	mov	r0, r2
 801fe68:	f7fa f972 	bl	801a150 <lwip_htons>
 801fe6c:	4603      	mov	r3, r0
 801fe6e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801fe70:	693b      	ldr	r3, [r7, #16]
 801fe72:	68dc      	ldr	r4, [r3, #12]
 801fe74:	6838      	ldr	r0, [r7, #0]
 801fe76:	f7fa f980 	bl	801a17a <lwip_htonl>
 801fe7a:	4603      	mov	r3, r0
 801fe7c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fe7e:	7dfb      	ldrb	r3, [r7, #23]
 801fe80:	089b      	lsrs	r3, r3, #2
 801fe82:	b2db      	uxtb	r3, r3
 801fe84:	b29b      	uxth	r3, r3
 801fe86:	3305      	adds	r3, #5
 801fe88:	b29b      	uxth	r3, r3
 801fe8a:	031b      	lsls	r3, r3, #12
 801fe8c:	b29a      	uxth	r2, r3
 801fe8e:	79fb      	ldrb	r3, [r7, #7]
 801fe90:	b29b      	uxth	r3, r3
 801fe92:	4313      	orrs	r3, r2
 801fe94:	b29a      	uxth	r2, r3
 801fe96:	693b      	ldr	r3, [r7, #16]
 801fe98:	68dc      	ldr	r4, [r3, #12]
 801fe9a:	4610      	mov	r0, r2
 801fe9c:	f7fa f958 	bl	801a150 <lwip_htons>
 801fea0:	4603      	mov	r3, r0
 801fea2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801fea4:	693b      	ldr	r3, [r7, #16]
 801fea6:	68db      	ldr	r3, [r3, #12]
 801fea8:	2200      	movs	r2, #0
 801feaa:	749a      	strb	r2, [r3, #18]
 801feac:	2200      	movs	r2, #0
 801feae:	74da      	strb	r2, [r3, #19]
  return seg;
 801feb0:	693b      	ldr	r3, [r7, #16]
}
 801feb2:	4618      	mov	r0, r3
 801feb4:	371c      	adds	r7, #28
 801feb6:	46bd      	mov	sp, r7
 801feb8:	bd90      	pop	{r4, r7, pc}
 801feba:	bf00      	nop
 801febc:	08029be8 	.word	0x08029be8
 801fec0:	08029c1c 	.word	0x08029c1c
 801fec4:	08029c3c 	.word	0x08029c3c
 801fec8:	08029c64 	.word	0x08029c64
 801fecc:	08029c88 	.word	0x08029c88

0801fed0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801fed0:	b590      	push	{r4, r7, lr}
 801fed2:	b08b      	sub	sp, #44	; 0x2c
 801fed4:	af02      	add	r7, sp, #8
 801fed6:	6078      	str	r0, [r7, #4]
 801fed8:	460b      	mov	r3, r1
 801feda:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801fedc:	2300      	movs	r3, #0
 801fede:	61fb      	str	r3, [r7, #28]
 801fee0:	2300      	movs	r3, #0
 801fee2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801fee4:	2300      	movs	r3, #0
 801fee6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	2b00      	cmp	r3, #0
 801feec:	d106      	bne.n	801fefc <tcp_split_unsent_seg+0x2c>
 801feee:	4b95      	ldr	r3, [pc, #596]	; (8020144 <tcp_split_unsent_seg+0x274>)
 801fef0:	f240 324b 	movw	r2, #843	; 0x34b
 801fef4:	4994      	ldr	r1, [pc, #592]	; (8020148 <tcp_split_unsent_seg+0x278>)
 801fef6:	4895      	ldr	r0, [pc, #596]	; (802014c <tcp_split_unsent_seg+0x27c>)
 801fef8:	f007 fade 	bl	80274b8 <iprintf>

  useg = pcb->unsent;
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ff00:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ff02:	697b      	ldr	r3, [r7, #20]
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d102      	bne.n	801ff0e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801ff08:	f04f 33ff 	mov.w	r3, #4294967295
 801ff0c:	e116      	b.n	802013c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801ff0e:	887b      	ldrh	r3, [r7, #2]
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d109      	bne.n	801ff28 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ff14:	4b8b      	ldr	r3, [pc, #556]	; (8020144 <tcp_split_unsent_seg+0x274>)
 801ff16:	f240 3253 	movw	r2, #851	; 0x353
 801ff1a:	498d      	ldr	r1, [pc, #564]	; (8020150 <tcp_split_unsent_seg+0x280>)
 801ff1c:	488b      	ldr	r0, [pc, #556]	; (802014c <tcp_split_unsent_seg+0x27c>)
 801ff1e:	f007 facb 	bl	80274b8 <iprintf>
    return ERR_VAL;
 801ff22:	f06f 0305 	mvn.w	r3, #5
 801ff26:	e109      	b.n	802013c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801ff28:	697b      	ldr	r3, [r7, #20]
 801ff2a:	891b      	ldrh	r3, [r3, #8]
 801ff2c:	887a      	ldrh	r2, [r7, #2]
 801ff2e:	429a      	cmp	r2, r3
 801ff30:	d301      	bcc.n	801ff36 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801ff32:	2300      	movs	r3, #0
 801ff34:	e102      	b.n	802013c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff3a:	887a      	ldrh	r2, [r7, #2]
 801ff3c:	429a      	cmp	r2, r3
 801ff3e:	d906      	bls.n	801ff4e <tcp_split_unsent_seg+0x7e>
 801ff40:	4b80      	ldr	r3, [pc, #512]	; (8020144 <tcp_split_unsent_seg+0x274>)
 801ff42:	f240 325b 	movw	r2, #859	; 0x35b
 801ff46:	4983      	ldr	r1, [pc, #524]	; (8020154 <tcp_split_unsent_seg+0x284>)
 801ff48:	4880      	ldr	r0, [pc, #512]	; (802014c <tcp_split_unsent_seg+0x27c>)
 801ff4a:	f007 fab5 	bl	80274b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ff4e:	697b      	ldr	r3, [r7, #20]
 801ff50:	891b      	ldrh	r3, [r3, #8]
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d106      	bne.n	801ff64 <tcp_split_unsent_seg+0x94>
 801ff56:	4b7b      	ldr	r3, [pc, #492]	; (8020144 <tcp_split_unsent_seg+0x274>)
 801ff58:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ff5c:	497e      	ldr	r1, [pc, #504]	; (8020158 <tcp_split_unsent_seg+0x288>)
 801ff5e:	487b      	ldr	r0, [pc, #492]	; (802014c <tcp_split_unsent_seg+0x27c>)
 801ff60:	f007 faaa 	bl	80274b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ff64:	697b      	ldr	r3, [r7, #20]
 801ff66:	7a9b      	ldrb	r3, [r3, #10]
 801ff68:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ff6a:	7bfb      	ldrb	r3, [r7, #15]
 801ff6c:	009b      	lsls	r3, r3, #2
 801ff6e:	b2db      	uxtb	r3, r3
 801ff70:	f003 0304 	and.w	r3, r3, #4
 801ff74:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ff76:	697b      	ldr	r3, [r7, #20]
 801ff78:	891a      	ldrh	r2, [r3, #8]
 801ff7a:	887b      	ldrh	r3, [r7, #2]
 801ff7c:	1ad3      	subs	r3, r2, r3
 801ff7e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ff80:	7bbb      	ldrb	r3, [r7, #14]
 801ff82:	b29a      	uxth	r2, r3
 801ff84:	89bb      	ldrh	r3, [r7, #12]
 801ff86:	4413      	add	r3, r2
 801ff88:	b29b      	uxth	r3, r3
 801ff8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ff8e:	4619      	mov	r1, r3
 801ff90:	2036      	movs	r0, #54	; 0x36
 801ff92:	f7fb faaf 	bl	801b4f4 <pbuf_alloc>
 801ff96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ff98:	693b      	ldr	r3, [r7, #16]
 801ff9a:	2b00      	cmp	r3, #0
 801ff9c:	f000 80b7 	beq.w	802010e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ffa0:	697b      	ldr	r3, [r7, #20]
 801ffa2:	685b      	ldr	r3, [r3, #4]
 801ffa4:	891a      	ldrh	r2, [r3, #8]
 801ffa6:	697b      	ldr	r3, [r7, #20]
 801ffa8:	891b      	ldrh	r3, [r3, #8]
 801ffaa:	1ad3      	subs	r3, r2, r3
 801ffac:	b29a      	uxth	r2, r3
 801ffae:	887b      	ldrh	r3, [r7, #2]
 801ffb0:	4413      	add	r3, r2
 801ffb2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ffb4:	697b      	ldr	r3, [r7, #20]
 801ffb6:	6858      	ldr	r0, [r3, #4]
 801ffb8:	693b      	ldr	r3, [r7, #16]
 801ffba:	685a      	ldr	r2, [r3, #4]
 801ffbc:	7bbb      	ldrb	r3, [r7, #14]
 801ffbe:	18d1      	adds	r1, r2, r3
 801ffc0:	897b      	ldrh	r3, [r7, #10]
 801ffc2:	89ba      	ldrh	r2, [r7, #12]
 801ffc4:	f7fb ff80 	bl	801bec8 <pbuf_copy_partial>
 801ffc8:	4603      	mov	r3, r0
 801ffca:	461a      	mov	r2, r3
 801ffcc:	89bb      	ldrh	r3, [r7, #12]
 801ffce:	4293      	cmp	r3, r2
 801ffd0:	f040 809f 	bne.w	8020112 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801ffd4:	697b      	ldr	r3, [r7, #20]
 801ffd6:	68db      	ldr	r3, [r3, #12]
 801ffd8:	899b      	ldrh	r3, [r3, #12]
 801ffda:	b29b      	uxth	r3, r3
 801ffdc:	4618      	mov	r0, r3
 801ffde:	f7fa f8b7 	bl	801a150 <lwip_htons>
 801ffe2:	4603      	mov	r3, r0
 801ffe4:	b2db      	uxtb	r3, r3
 801ffe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ffea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801ffec:	2300      	movs	r3, #0
 801ffee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801fff0:	7efb      	ldrb	r3, [r7, #27]
 801fff2:	f003 0308 	and.w	r3, r3, #8
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d007      	beq.n	802000a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801fffa:	7efb      	ldrb	r3, [r7, #27]
 801fffc:	f023 0308 	bic.w	r3, r3, #8
 8020000:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8020002:	7ebb      	ldrb	r3, [r7, #26]
 8020004:	f043 0308 	orr.w	r3, r3, #8
 8020008:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 802000a:	7efb      	ldrb	r3, [r7, #27]
 802000c:	f003 0301 	and.w	r3, r3, #1
 8020010:	2b00      	cmp	r3, #0
 8020012:	d007      	beq.n	8020024 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8020014:	7efb      	ldrb	r3, [r7, #27]
 8020016:	f023 0301 	bic.w	r3, r3, #1
 802001a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 802001c:	7ebb      	ldrb	r3, [r7, #26]
 802001e:	f043 0301 	orr.w	r3, r3, #1
 8020022:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8020024:	697b      	ldr	r3, [r7, #20]
 8020026:	68db      	ldr	r3, [r3, #12]
 8020028:	685b      	ldr	r3, [r3, #4]
 802002a:	4618      	mov	r0, r3
 802002c:	f7fa f8a5 	bl	801a17a <lwip_htonl>
 8020030:	4602      	mov	r2, r0
 8020032:	887b      	ldrh	r3, [r7, #2]
 8020034:	18d1      	adds	r1, r2, r3
 8020036:	7eba      	ldrb	r2, [r7, #26]
 8020038:	7bfb      	ldrb	r3, [r7, #15]
 802003a:	9300      	str	r3, [sp, #0]
 802003c:	460b      	mov	r3, r1
 802003e:	6939      	ldr	r1, [r7, #16]
 8020040:	6878      	ldr	r0, [r7, #4]
 8020042:	f7ff fea7 	bl	801fd94 <tcp_create_segment>
 8020046:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8020048:	69fb      	ldr	r3, [r7, #28]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d063      	beq.n	8020116 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 802004e:	697b      	ldr	r3, [r7, #20]
 8020050:	685b      	ldr	r3, [r3, #4]
 8020052:	4618      	mov	r0, r3
 8020054:	f7fb fdc0 	bl	801bbd8 <pbuf_clen>
 8020058:	4603      	mov	r3, r0
 802005a:	461a      	mov	r2, r3
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020062:	1a9b      	subs	r3, r3, r2
 8020064:	b29a      	uxth	r2, r3
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 802006c:	697b      	ldr	r3, [r7, #20]
 802006e:	6858      	ldr	r0, [r3, #4]
 8020070:	697b      	ldr	r3, [r7, #20]
 8020072:	685b      	ldr	r3, [r3, #4]
 8020074:	891a      	ldrh	r2, [r3, #8]
 8020076:	89bb      	ldrh	r3, [r7, #12]
 8020078:	1ad3      	subs	r3, r2, r3
 802007a:	b29b      	uxth	r3, r3
 802007c:	4619      	mov	r1, r3
 802007e:	f7fb fb97 	bl	801b7b0 <pbuf_realloc>
  useg->len -= remainder;
 8020082:	697b      	ldr	r3, [r7, #20]
 8020084:	891a      	ldrh	r2, [r3, #8]
 8020086:	89bb      	ldrh	r3, [r7, #12]
 8020088:	1ad3      	subs	r3, r2, r3
 802008a:	b29a      	uxth	r2, r3
 802008c:	697b      	ldr	r3, [r7, #20]
 802008e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020090:	697b      	ldr	r3, [r7, #20]
 8020092:	68db      	ldr	r3, [r3, #12]
 8020094:	899b      	ldrh	r3, [r3, #12]
 8020096:	b29c      	uxth	r4, r3
 8020098:	7efb      	ldrb	r3, [r7, #27]
 802009a:	b29b      	uxth	r3, r3
 802009c:	4618      	mov	r0, r3
 802009e:	f7fa f857 	bl	801a150 <lwip_htons>
 80200a2:	4603      	mov	r3, r0
 80200a4:	461a      	mov	r2, r3
 80200a6:	697b      	ldr	r3, [r7, #20]
 80200a8:	68db      	ldr	r3, [r3, #12]
 80200aa:	4322      	orrs	r2, r4
 80200ac:	b292      	uxth	r2, r2
 80200ae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80200b0:	697b      	ldr	r3, [r7, #20]
 80200b2:	685b      	ldr	r3, [r3, #4]
 80200b4:	4618      	mov	r0, r3
 80200b6:	f7fb fd8f 	bl	801bbd8 <pbuf_clen>
 80200ba:	4603      	mov	r3, r0
 80200bc:	461a      	mov	r2, r3
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80200c4:	4413      	add	r3, r2
 80200c6:	b29a      	uxth	r2, r3
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80200ce:	69fb      	ldr	r3, [r7, #28]
 80200d0:	685b      	ldr	r3, [r3, #4]
 80200d2:	4618      	mov	r0, r3
 80200d4:	f7fb fd80 	bl	801bbd8 <pbuf_clen>
 80200d8:	4603      	mov	r3, r0
 80200da:	461a      	mov	r2, r3
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80200e2:	4413      	add	r3, r2
 80200e4:	b29a      	uxth	r2, r3
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80200ec:	697b      	ldr	r3, [r7, #20]
 80200ee:	681a      	ldr	r2, [r3, #0]
 80200f0:	69fb      	ldr	r3, [r7, #28]
 80200f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80200f4:	697b      	ldr	r3, [r7, #20]
 80200f6:	69fa      	ldr	r2, [r7, #28]
 80200f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80200fa:	69fb      	ldr	r3, [r7, #28]
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d103      	bne.n	802010a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	2200      	movs	r2, #0
 8020106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 802010a:	2300      	movs	r3, #0
 802010c:	e016      	b.n	802013c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 802010e:	bf00      	nop
 8020110:	e002      	b.n	8020118 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020112:	bf00      	nop
 8020114:	e000      	b.n	8020118 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020116:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8020118:	69fb      	ldr	r3, [r7, #28]
 802011a:	2b00      	cmp	r3, #0
 802011c:	d006      	beq.n	802012c <tcp_split_unsent_seg+0x25c>
 802011e:	4b09      	ldr	r3, [pc, #36]	; (8020144 <tcp_split_unsent_seg+0x274>)
 8020120:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8020124:	490d      	ldr	r1, [pc, #52]	; (802015c <tcp_split_unsent_seg+0x28c>)
 8020126:	4809      	ldr	r0, [pc, #36]	; (802014c <tcp_split_unsent_seg+0x27c>)
 8020128:	f007 f9c6 	bl	80274b8 <iprintf>
  if (p != NULL) {
 802012c:	693b      	ldr	r3, [r7, #16]
 802012e:	2b00      	cmp	r3, #0
 8020130:	d002      	beq.n	8020138 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8020132:	6938      	ldr	r0, [r7, #16]
 8020134:	f7fb fcc2 	bl	801babc <pbuf_free>
  }

  return ERR_MEM;
 8020138:	f04f 33ff 	mov.w	r3, #4294967295
}
 802013c:	4618      	mov	r0, r3
 802013e:	3724      	adds	r7, #36	; 0x24
 8020140:	46bd      	mov	sp, r7
 8020142:	bd90      	pop	{r4, r7, pc}
 8020144:	08029be8 	.word	0x08029be8
 8020148:	08029f7c 	.word	0x08029f7c
 802014c:	08029c3c 	.word	0x08029c3c
 8020150:	08029fa0 	.word	0x08029fa0
 8020154:	08029fc4 	.word	0x08029fc4
 8020158:	08029fd4 	.word	0x08029fd4
 802015c:	08029fe4 	.word	0x08029fe4

08020160 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8020160:	b590      	push	{r4, r7, lr}
 8020162:	b085      	sub	sp, #20
 8020164:	af00      	add	r7, sp, #0
 8020166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	2b00      	cmp	r3, #0
 802016c:	d106      	bne.n	802017c <tcp_send_fin+0x1c>
 802016e:	4b21      	ldr	r3, [pc, #132]	; (80201f4 <tcp_send_fin+0x94>)
 8020170:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8020174:	4920      	ldr	r1, [pc, #128]	; (80201f8 <tcp_send_fin+0x98>)
 8020176:	4821      	ldr	r0, [pc, #132]	; (80201fc <tcp_send_fin+0x9c>)
 8020178:	f007 f99e 	bl	80274b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020180:	2b00      	cmp	r3, #0
 8020182:	d02e      	beq.n	80201e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020188:	60fb      	str	r3, [r7, #12]
 802018a:	e002      	b.n	8020192 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	681b      	ldr	r3, [r3, #0]
 8020190:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020192:	68fb      	ldr	r3, [r7, #12]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	2b00      	cmp	r3, #0
 8020198:	d1f8      	bne.n	802018c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 802019a:	68fb      	ldr	r3, [r7, #12]
 802019c:	68db      	ldr	r3, [r3, #12]
 802019e:	899b      	ldrh	r3, [r3, #12]
 80201a0:	b29b      	uxth	r3, r3
 80201a2:	4618      	mov	r0, r3
 80201a4:	f7f9 ffd4 	bl	801a150 <lwip_htons>
 80201a8:	4603      	mov	r3, r0
 80201aa:	b2db      	uxtb	r3, r3
 80201ac:	f003 0307 	and.w	r3, r3, #7
 80201b0:	2b00      	cmp	r3, #0
 80201b2:	d116      	bne.n	80201e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80201b4:	68fb      	ldr	r3, [r7, #12]
 80201b6:	68db      	ldr	r3, [r3, #12]
 80201b8:	899b      	ldrh	r3, [r3, #12]
 80201ba:	b29c      	uxth	r4, r3
 80201bc:	2001      	movs	r0, #1
 80201be:	f7f9 ffc7 	bl	801a150 <lwip_htons>
 80201c2:	4603      	mov	r3, r0
 80201c4:	461a      	mov	r2, r3
 80201c6:	68fb      	ldr	r3, [r7, #12]
 80201c8:	68db      	ldr	r3, [r3, #12]
 80201ca:	4322      	orrs	r2, r4
 80201cc:	b292      	uxth	r2, r2
 80201ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	8b5b      	ldrh	r3, [r3, #26]
 80201d4:	f043 0320 	orr.w	r3, r3, #32
 80201d8:	b29a      	uxth	r2, r3
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80201de:	2300      	movs	r3, #0
 80201e0:	e004      	b.n	80201ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80201e2:	2101      	movs	r1, #1
 80201e4:	6878      	ldr	r0, [r7, #4]
 80201e6:	f000 f80b 	bl	8020200 <tcp_enqueue_flags>
 80201ea:	4603      	mov	r3, r0
}
 80201ec:	4618      	mov	r0, r3
 80201ee:	3714      	adds	r7, #20
 80201f0:	46bd      	mov	sp, r7
 80201f2:	bd90      	pop	{r4, r7, pc}
 80201f4:	08029be8 	.word	0x08029be8
 80201f8:	08029ff0 	.word	0x08029ff0
 80201fc:	08029c3c 	.word	0x08029c3c

08020200 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8020200:	b580      	push	{r7, lr}
 8020202:	b08a      	sub	sp, #40	; 0x28
 8020204:	af02      	add	r7, sp, #8
 8020206:	6078      	str	r0, [r7, #4]
 8020208:	460b      	mov	r3, r1
 802020a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 802020c:	2300      	movs	r3, #0
 802020e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8020210:	2300      	movs	r3, #0
 8020212:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8020214:	78fb      	ldrb	r3, [r7, #3]
 8020216:	f003 0303 	and.w	r3, r3, #3
 802021a:	2b00      	cmp	r3, #0
 802021c:	d106      	bne.n	802022c <tcp_enqueue_flags+0x2c>
 802021e:	4b67      	ldr	r3, [pc, #412]	; (80203bc <tcp_enqueue_flags+0x1bc>)
 8020220:	f240 4211 	movw	r2, #1041	; 0x411
 8020224:	4966      	ldr	r1, [pc, #408]	; (80203c0 <tcp_enqueue_flags+0x1c0>)
 8020226:	4867      	ldr	r0, [pc, #412]	; (80203c4 <tcp_enqueue_flags+0x1c4>)
 8020228:	f007 f946 	bl	80274b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	2b00      	cmp	r3, #0
 8020230:	d106      	bne.n	8020240 <tcp_enqueue_flags+0x40>
 8020232:	4b62      	ldr	r3, [pc, #392]	; (80203bc <tcp_enqueue_flags+0x1bc>)
 8020234:	f240 4213 	movw	r2, #1043	; 0x413
 8020238:	4963      	ldr	r1, [pc, #396]	; (80203c8 <tcp_enqueue_flags+0x1c8>)
 802023a:	4862      	ldr	r0, [pc, #392]	; (80203c4 <tcp_enqueue_flags+0x1c4>)
 802023c:	f007 f93c 	bl	80274b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8020240:	78fb      	ldrb	r3, [r7, #3]
 8020242:	f003 0302 	and.w	r3, r3, #2
 8020246:	2b00      	cmp	r3, #0
 8020248:	d001      	beq.n	802024e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 802024a:	2301      	movs	r3, #1
 802024c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 802024e:	7ffb      	ldrb	r3, [r7, #31]
 8020250:	009b      	lsls	r3, r3, #2
 8020252:	b2db      	uxtb	r3, r3
 8020254:	f003 0304 	and.w	r3, r3, #4
 8020258:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802025a:	7dfb      	ldrb	r3, [r7, #23]
 802025c:	b29b      	uxth	r3, r3
 802025e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020262:	4619      	mov	r1, r3
 8020264:	2036      	movs	r0, #54	; 0x36
 8020266:	f7fb f945 	bl	801b4f4 <pbuf_alloc>
 802026a:	6138      	str	r0, [r7, #16]
 802026c:	693b      	ldr	r3, [r7, #16]
 802026e:	2b00      	cmp	r3, #0
 8020270:	d109      	bne.n	8020286 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	8b5b      	ldrh	r3, [r3, #26]
 8020276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802027a:	b29a      	uxth	r2, r3
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8020280:	f04f 33ff 	mov.w	r3, #4294967295
 8020284:	e095      	b.n	80203b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020286:	693b      	ldr	r3, [r7, #16]
 8020288:	895a      	ldrh	r2, [r3, #10]
 802028a:	7dfb      	ldrb	r3, [r7, #23]
 802028c:	b29b      	uxth	r3, r3
 802028e:	429a      	cmp	r2, r3
 8020290:	d206      	bcs.n	80202a0 <tcp_enqueue_flags+0xa0>
 8020292:	4b4a      	ldr	r3, [pc, #296]	; (80203bc <tcp_enqueue_flags+0x1bc>)
 8020294:	f240 4239 	movw	r2, #1081	; 0x439
 8020298:	494c      	ldr	r1, [pc, #304]	; (80203cc <tcp_enqueue_flags+0x1cc>)
 802029a:	484a      	ldr	r0, [pc, #296]	; (80203c4 <tcp_enqueue_flags+0x1c4>)
 802029c:	f007 f90c 	bl	80274b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80202a4:	78fa      	ldrb	r2, [r7, #3]
 80202a6:	7ffb      	ldrb	r3, [r7, #31]
 80202a8:	9300      	str	r3, [sp, #0]
 80202aa:	460b      	mov	r3, r1
 80202ac:	6939      	ldr	r1, [r7, #16]
 80202ae:	6878      	ldr	r0, [r7, #4]
 80202b0:	f7ff fd70 	bl	801fd94 <tcp_create_segment>
 80202b4:	60f8      	str	r0, [r7, #12]
 80202b6:	68fb      	ldr	r3, [r7, #12]
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	d109      	bne.n	80202d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	8b5b      	ldrh	r3, [r3, #26]
 80202c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80202c4:	b29a      	uxth	r2, r3
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80202ca:	f04f 33ff 	mov.w	r3, #4294967295
 80202ce:	e070      	b.n	80203b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80202d0:	68fb      	ldr	r3, [r7, #12]
 80202d2:	68db      	ldr	r3, [r3, #12]
 80202d4:	f003 0303 	and.w	r3, r3, #3
 80202d8:	2b00      	cmp	r3, #0
 80202da:	d006      	beq.n	80202ea <tcp_enqueue_flags+0xea>
 80202dc:	4b37      	ldr	r3, [pc, #220]	; (80203bc <tcp_enqueue_flags+0x1bc>)
 80202de:	f240 4242 	movw	r2, #1090	; 0x442
 80202e2:	493b      	ldr	r1, [pc, #236]	; (80203d0 <tcp_enqueue_flags+0x1d0>)
 80202e4:	4837      	ldr	r0, [pc, #220]	; (80203c4 <tcp_enqueue_flags+0x1c4>)
 80202e6:	f007 f8e7 	bl	80274b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80202ea:	68fb      	ldr	r3, [r7, #12]
 80202ec:	891b      	ldrh	r3, [r3, #8]
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d006      	beq.n	8020300 <tcp_enqueue_flags+0x100>
 80202f2:	4b32      	ldr	r3, [pc, #200]	; (80203bc <tcp_enqueue_flags+0x1bc>)
 80202f4:	f240 4243 	movw	r2, #1091	; 0x443
 80202f8:	4936      	ldr	r1, [pc, #216]	; (80203d4 <tcp_enqueue_flags+0x1d4>)
 80202fa:	4832      	ldr	r0, [pc, #200]	; (80203c4 <tcp_enqueue_flags+0x1c4>)
 80202fc:	f007 f8dc 	bl	80274b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020304:	2b00      	cmp	r3, #0
 8020306:	d103      	bne.n	8020310 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	68fa      	ldr	r2, [r7, #12]
 802030c:	66da      	str	r2, [r3, #108]	; 0x6c
 802030e:	e00d      	b.n	802032c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020314:	61bb      	str	r3, [r7, #24]
 8020316:	e002      	b.n	802031e <tcp_enqueue_flags+0x11e>
 8020318:	69bb      	ldr	r3, [r7, #24]
 802031a:	681b      	ldr	r3, [r3, #0]
 802031c:	61bb      	str	r3, [r7, #24]
 802031e:	69bb      	ldr	r3, [r7, #24]
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	2b00      	cmp	r3, #0
 8020324:	d1f8      	bne.n	8020318 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8020326:	69bb      	ldr	r3, [r7, #24]
 8020328:	68fa      	ldr	r2, [r7, #12]
 802032a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	2200      	movs	r2, #0
 8020330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020334:	78fb      	ldrb	r3, [r7, #3]
 8020336:	f003 0302 	and.w	r3, r3, #2
 802033a:	2b00      	cmp	r3, #0
 802033c:	d104      	bne.n	8020348 <tcp_enqueue_flags+0x148>
 802033e:	78fb      	ldrb	r3, [r7, #3]
 8020340:	f003 0301 	and.w	r3, r3, #1
 8020344:	2b00      	cmp	r3, #0
 8020346:	d004      	beq.n	8020352 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802034c:	1c5a      	adds	r2, r3, #1
 802034e:	687b      	ldr	r3, [r7, #4]
 8020350:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8020352:	78fb      	ldrb	r3, [r7, #3]
 8020354:	f003 0301 	and.w	r3, r3, #1
 8020358:	2b00      	cmp	r3, #0
 802035a:	d006      	beq.n	802036a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	8b5b      	ldrh	r3, [r3, #26]
 8020360:	f043 0320 	orr.w	r3, r3, #32
 8020364:	b29a      	uxth	r2, r3
 8020366:	687b      	ldr	r3, [r7, #4]
 8020368:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 802036a:	68fb      	ldr	r3, [r7, #12]
 802036c:	685b      	ldr	r3, [r3, #4]
 802036e:	4618      	mov	r0, r3
 8020370:	f7fb fc32 	bl	801bbd8 <pbuf_clen>
 8020374:	4603      	mov	r3, r0
 8020376:	461a      	mov	r2, r3
 8020378:	687b      	ldr	r3, [r7, #4]
 802037a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802037e:	4413      	add	r3, r2
 8020380:	b29a      	uxth	r2, r3
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802038e:	2b00      	cmp	r3, #0
 8020390:	d00e      	beq.n	80203b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020396:	2b00      	cmp	r3, #0
 8020398:	d10a      	bne.n	80203b0 <tcp_enqueue_flags+0x1b0>
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d106      	bne.n	80203b0 <tcp_enqueue_flags+0x1b0>
 80203a2:	4b06      	ldr	r3, [pc, #24]	; (80203bc <tcp_enqueue_flags+0x1bc>)
 80203a4:	f240 4265 	movw	r2, #1125	; 0x465
 80203a8:	490b      	ldr	r1, [pc, #44]	; (80203d8 <tcp_enqueue_flags+0x1d8>)
 80203aa:	4806      	ldr	r0, [pc, #24]	; (80203c4 <tcp_enqueue_flags+0x1c4>)
 80203ac:	f007 f884 	bl	80274b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80203b0:	2300      	movs	r3, #0
}
 80203b2:	4618      	mov	r0, r3
 80203b4:	3720      	adds	r7, #32
 80203b6:	46bd      	mov	sp, r7
 80203b8:	bd80      	pop	{r7, pc}
 80203ba:	bf00      	nop
 80203bc:	08029be8 	.word	0x08029be8
 80203c0:	0802a00c 	.word	0x0802a00c
 80203c4:	08029c3c 	.word	0x08029c3c
 80203c8:	0802a064 	.word	0x0802a064
 80203cc:	0802a084 	.word	0x0802a084
 80203d0:	0802a0c0 	.word	0x0802a0c0
 80203d4:	0802a0d8 	.word	0x0802a0d8
 80203d8:	0802a104 	.word	0x0802a104

080203dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80203dc:	b5b0      	push	{r4, r5, r7, lr}
 80203de:	b08a      	sub	sp, #40	; 0x28
 80203e0:	af00      	add	r7, sp, #0
 80203e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	d106      	bne.n	80203f8 <tcp_output+0x1c>
 80203ea:	4b8a      	ldr	r3, [pc, #552]	; (8020614 <tcp_output+0x238>)
 80203ec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80203f0:	4989      	ldr	r1, [pc, #548]	; (8020618 <tcp_output+0x23c>)
 80203f2:	488a      	ldr	r0, [pc, #552]	; (802061c <tcp_output+0x240>)
 80203f4:	f007 f860 	bl	80274b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	7d1b      	ldrb	r3, [r3, #20]
 80203fc:	2b01      	cmp	r3, #1
 80203fe:	d106      	bne.n	802040e <tcp_output+0x32>
 8020400:	4b84      	ldr	r3, [pc, #528]	; (8020614 <tcp_output+0x238>)
 8020402:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8020406:	4986      	ldr	r1, [pc, #536]	; (8020620 <tcp_output+0x244>)
 8020408:	4884      	ldr	r0, [pc, #528]	; (802061c <tcp_output+0x240>)
 802040a:	f007 f855 	bl	80274b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 802040e:	4b85      	ldr	r3, [pc, #532]	; (8020624 <tcp_output+0x248>)
 8020410:	681b      	ldr	r3, [r3, #0]
 8020412:	687a      	ldr	r2, [r7, #4]
 8020414:	429a      	cmp	r2, r3
 8020416:	d101      	bne.n	802041c <tcp_output+0x40>
    return ERR_OK;
 8020418:	2300      	movs	r3, #0
 802041a:	e1ce      	b.n	80207ba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020428:	4293      	cmp	r3, r2
 802042a:	bf28      	it	cs
 802042c:	4613      	movcs	r3, r2
 802042e:	b29b      	uxth	r3, r3
 8020430:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020436:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8020438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802043a:	2b00      	cmp	r3, #0
 802043c:	d10b      	bne.n	8020456 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	8b5b      	ldrh	r3, [r3, #26]
 8020442:	f003 0302 	and.w	r3, r3, #2
 8020446:	2b00      	cmp	r3, #0
 8020448:	f000 81aa 	beq.w	80207a0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 802044c:	6878      	ldr	r0, [r7, #4]
 802044e:	f000 fdcb 	bl	8020fe8 <tcp_send_empty_ack>
 8020452:	4603      	mov	r3, r0
 8020454:	e1b1      	b.n	80207ba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8020456:	6879      	ldr	r1, [r7, #4]
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	3304      	adds	r3, #4
 802045c:	461a      	mov	r2, r3
 802045e:	6878      	ldr	r0, [r7, #4]
 8020460:	f7ff fc7c 	bl	801fd5c <tcp_route>
 8020464:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8020466:	697b      	ldr	r3, [r7, #20]
 8020468:	2b00      	cmp	r3, #0
 802046a:	d102      	bne.n	8020472 <tcp_output+0x96>
    return ERR_RTE;
 802046c:	f06f 0303 	mvn.w	r3, #3
 8020470:	e1a3      	b.n	80207ba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8020472:	687b      	ldr	r3, [r7, #4]
 8020474:	2b00      	cmp	r3, #0
 8020476:	d003      	beq.n	8020480 <tcp_output+0xa4>
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	681b      	ldr	r3, [r3, #0]
 802047c:	2b00      	cmp	r3, #0
 802047e:	d111      	bne.n	80204a4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8020480:	697b      	ldr	r3, [r7, #20]
 8020482:	2b00      	cmp	r3, #0
 8020484:	d002      	beq.n	802048c <tcp_output+0xb0>
 8020486:	697b      	ldr	r3, [r7, #20]
 8020488:	3304      	adds	r3, #4
 802048a:	e000      	b.n	802048e <tcp_output+0xb2>
 802048c:	2300      	movs	r3, #0
 802048e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8020490:	693b      	ldr	r3, [r7, #16]
 8020492:	2b00      	cmp	r3, #0
 8020494:	d102      	bne.n	802049c <tcp_output+0xc0>
      return ERR_RTE;
 8020496:	f06f 0303 	mvn.w	r3, #3
 802049a:	e18e      	b.n	80207ba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 802049c:	693b      	ldr	r3, [r7, #16]
 802049e:	681a      	ldr	r2, [r3, #0]
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80204a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204a6:	68db      	ldr	r3, [r3, #12]
 80204a8:	685b      	ldr	r3, [r3, #4]
 80204aa:	4618      	mov	r0, r3
 80204ac:	f7f9 fe65 	bl	801a17a <lwip_htonl>
 80204b0:	4602      	mov	r2, r0
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80204b6:	1ad3      	subs	r3, r2, r3
 80204b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80204ba:	8912      	ldrh	r2, [r2, #8]
 80204bc:	4413      	add	r3, r2
 80204be:	69ba      	ldr	r2, [r7, #24]
 80204c0:	429a      	cmp	r2, r3
 80204c2:	d227      	bcs.n	8020514 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80204ca:	461a      	mov	r2, r3
 80204cc:	69bb      	ldr	r3, [r7, #24]
 80204ce:	4293      	cmp	r3, r2
 80204d0:	d114      	bne.n	80204fc <tcp_output+0x120>
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d110      	bne.n	80204fc <tcp_output+0x120>
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80204e0:	2b00      	cmp	r3, #0
 80204e2:	d10b      	bne.n	80204fc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	2200      	movs	r2, #0
 80204e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	2201      	movs	r2, #1
 80204f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	2200      	movs	r2, #0
 80204f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	8b5b      	ldrh	r3, [r3, #26]
 8020500:	f003 0302 	and.w	r3, r3, #2
 8020504:	2b00      	cmp	r3, #0
 8020506:	f000 814d 	beq.w	80207a4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 802050a:	6878      	ldr	r0, [r7, #4]
 802050c:	f000 fd6c 	bl	8020fe8 <tcp_send_empty_ack>
 8020510:	4603      	mov	r3, r0
 8020512:	e152      	b.n	80207ba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8020514:	687b      	ldr	r3, [r7, #4]
 8020516:	2200      	movs	r2, #0
 8020518:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020520:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8020522:	6a3b      	ldr	r3, [r7, #32]
 8020524:	2b00      	cmp	r3, #0
 8020526:	f000 811c 	beq.w	8020762 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 802052a:	e002      	b.n	8020532 <tcp_output+0x156>
 802052c:	6a3b      	ldr	r3, [r7, #32]
 802052e:	681b      	ldr	r3, [r3, #0]
 8020530:	623b      	str	r3, [r7, #32]
 8020532:	6a3b      	ldr	r3, [r7, #32]
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	2b00      	cmp	r3, #0
 8020538:	d1f8      	bne.n	802052c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 802053a:	e112      	b.n	8020762 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 802053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802053e:	68db      	ldr	r3, [r3, #12]
 8020540:	899b      	ldrh	r3, [r3, #12]
 8020542:	b29b      	uxth	r3, r3
 8020544:	4618      	mov	r0, r3
 8020546:	f7f9 fe03 	bl	801a150 <lwip_htons>
 802054a:	4603      	mov	r3, r0
 802054c:	b2db      	uxtb	r3, r3
 802054e:	f003 0304 	and.w	r3, r3, #4
 8020552:	2b00      	cmp	r3, #0
 8020554:	d006      	beq.n	8020564 <tcp_output+0x188>
 8020556:	4b2f      	ldr	r3, [pc, #188]	; (8020614 <tcp_output+0x238>)
 8020558:	f240 5236 	movw	r2, #1334	; 0x536
 802055c:	4932      	ldr	r1, [pc, #200]	; (8020628 <tcp_output+0x24c>)
 802055e:	482f      	ldr	r0, [pc, #188]	; (802061c <tcp_output+0x240>)
 8020560:	f006 ffaa 	bl	80274b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020564:	687b      	ldr	r3, [r7, #4]
 8020566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020568:	2b00      	cmp	r3, #0
 802056a:	d01f      	beq.n	80205ac <tcp_output+0x1d0>
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	8b5b      	ldrh	r3, [r3, #26]
 8020570:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8020574:	2b00      	cmp	r3, #0
 8020576:	d119      	bne.n	80205ac <tcp_output+0x1d0>
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802057c:	2b00      	cmp	r3, #0
 802057e:	d00b      	beq.n	8020598 <tcp_output+0x1bc>
 8020580:	687b      	ldr	r3, [r7, #4]
 8020582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	2b00      	cmp	r3, #0
 8020588:	d110      	bne.n	80205ac <tcp_output+0x1d0>
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802058e:	891a      	ldrh	r2, [r3, #8]
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020594:	429a      	cmp	r2, r3
 8020596:	d209      	bcs.n	80205ac <tcp_output+0x1d0>
 8020598:	687b      	ldr	r3, [r7, #4]
 802059a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d004      	beq.n	80205ac <tcp_output+0x1d0>
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80205a8:	2b08      	cmp	r3, #8
 80205aa:	d901      	bls.n	80205b0 <tcp_output+0x1d4>
 80205ac:	2301      	movs	r3, #1
 80205ae:	e000      	b.n	80205b2 <tcp_output+0x1d6>
 80205b0:	2300      	movs	r3, #0
 80205b2:	2b00      	cmp	r3, #0
 80205b4:	d106      	bne.n	80205c4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	8b5b      	ldrh	r3, [r3, #26]
 80205ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80205be:	2b00      	cmp	r3, #0
 80205c0:	f000 80e4 	beq.w	802078c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	7d1b      	ldrb	r3, [r3, #20]
 80205c8:	2b02      	cmp	r3, #2
 80205ca:	d00d      	beq.n	80205e8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80205cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205ce:	68db      	ldr	r3, [r3, #12]
 80205d0:	899b      	ldrh	r3, [r3, #12]
 80205d2:	b29c      	uxth	r4, r3
 80205d4:	2010      	movs	r0, #16
 80205d6:	f7f9 fdbb 	bl	801a150 <lwip_htons>
 80205da:	4603      	mov	r3, r0
 80205dc:	461a      	mov	r2, r3
 80205de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205e0:	68db      	ldr	r3, [r3, #12]
 80205e2:	4322      	orrs	r2, r4
 80205e4:	b292      	uxth	r2, r2
 80205e6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80205e8:	697a      	ldr	r2, [r7, #20]
 80205ea:	6879      	ldr	r1, [r7, #4]
 80205ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80205ee:	f000 f909 	bl	8020804 <tcp_output_segment>
 80205f2:	4603      	mov	r3, r0
 80205f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80205f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	d016      	beq.n	802062c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80205fe:	687b      	ldr	r3, [r7, #4]
 8020600:	8b5b      	ldrh	r3, [r3, #26]
 8020602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020606:	b29a      	uxth	r2, r3
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	835a      	strh	r2, [r3, #26]
      return err;
 802060c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020610:	e0d3      	b.n	80207ba <tcp_output+0x3de>
 8020612:	bf00      	nop
 8020614:	08029be8 	.word	0x08029be8
 8020618:	0802a12c 	.word	0x0802a12c
 802061c:	08029c3c 	.word	0x08029c3c
 8020620:	0802a144 	.word	0x0802a144
 8020624:	2400cfa4 	.word	0x2400cfa4
 8020628:	0802a16c 	.word	0x0802a16c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 802062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802062e:	681a      	ldr	r2, [r3, #0]
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	7d1b      	ldrb	r3, [r3, #20]
 8020638:	2b02      	cmp	r3, #2
 802063a:	d006      	beq.n	802064a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	8b5b      	ldrh	r3, [r3, #26]
 8020640:	f023 0303 	bic.w	r3, r3, #3
 8020644:	b29a      	uxth	r2, r3
 8020646:	687b      	ldr	r3, [r7, #4]
 8020648:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 802064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802064c:	68db      	ldr	r3, [r3, #12]
 802064e:	685b      	ldr	r3, [r3, #4]
 8020650:	4618      	mov	r0, r3
 8020652:	f7f9 fd92 	bl	801a17a <lwip_htonl>
 8020656:	4604      	mov	r4, r0
 8020658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802065a:	891b      	ldrh	r3, [r3, #8]
 802065c:	461d      	mov	r5, r3
 802065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020660:	68db      	ldr	r3, [r3, #12]
 8020662:	899b      	ldrh	r3, [r3, #12]
 8020664:	b29b      	uxth	r3, r3
 8020666:	4618      	mov	r0, r3
 8020668:	f7f9 fd72 	bl	801a150 <lwip_htons>
 802066c:	4603      	mov	r3, r0
 802066e:	b2db      	uxtb	r3, r3
 8020670:	f003 0303 	and.w	r3, r3, #3
 8020674:	2b00      	cmp	r3, #0
 8020676:	d001      	beq.n	802067c <tcp_output+0x2a0>
 8020678:	2301      	movs	r3, #1
 802067a:	e000      	b.n	802067e <tcp_output+0x2a2>
 802067c:	2300      	movs	r3, #0
 802067e:	442b      	add	r3, r5
 8020680:	4423      	add	r3, r4
 8020682:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020688:	68bb      	ldr	r3, [r7, #8]
 802068a:	1ad3      	subs	r3, r2, r3
 802068c:	2b00      	cmp	r3, #0
 802068e:	da02      	bge.n	8020696 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	68ba      	ldr	r2, [r7, #8]
 8020694:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8020696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020698:	891b      	ldrh	r3, [r3, #8]
 802069a:	461c      	mov	r4, r3
 802069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802069e:	68db      	ldr	r3, [r3, #12]
 80206a0:	899b      	ldrh	r3, [r3, #12]
 80206a2:	b29b      	uxth	r3, r3
 80206a4:	4618      	mov	r0, r3
 80206a6:	f7f9 fd53 	bl	801a150 <lwip_htons>
 80206aa:	4603      	mov	r3, r0
 80206ac:	b2db      	uxtb	r3, r3
 80206ae:	f003 0303 	and.w	r3, r3, #3
 80206b2:	2b00      	cmp	r3, #0
 80206b4:	d001      	beq.n	80206ba <tcp_output+0x2de>
 80206b6:	2301      	movs	r3, #1
 80206b8:	e000      	b.n	80206bc <tcp_output+0x2e0>
 80206ba:	2300      	movs	r3, #0
 80206bc:	4423      	add	r3, r4
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d049      	beq.n	8020756 <tcp_output+0x37a>
      seg->next = NULL;
 80206c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206c4:	2200      	movs	r2, #0
 80206c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	d105      	bne.n	80206dc <tcp_output+0x300>
        pcb->unacked = seg;
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80206d4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80206d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206d8:	623b      	str	r3, [r7, #32]
 80206da:	e03f      	b.n	802075c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80206dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80206de:	68db      	ldr	r3, [r3, #12]
 80206e0:	685b      	ldr	r3, [r3, #4]
 80206e2:	4618      	mov	r0, r3
 80206e4:	f7f9 fd49 	bl	801a17a <lwip_htonl>
 80206e8:	4604      	mov	r4, r0
 80206ea:	6a3b      	ldr	r3, [r7, #32]
 80206ec:	68db      	ldr	r3, [r3, #12]
 80206ee:	685b      	ldr	r3, [r3, #4]
 80206f0:	4618      	mov	r0, r3
 80206f2:	f7f9 fd42 	bl	801a17a <lwip_htonl>
 80206f6:	4603      	mov	r3, r0
 80206f8:	1ae3      	subs	r3, r4, r3
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	da24      	bge.n	8020748 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	3370      	adds	r3, #112	; 0x70
 8020702:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8020704:	e002      	b.n	802070c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8020706:	69fb      	ldr	r3, [r7, #28]
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 802070c:	69fb      	ldr	r3, [r7, #28]
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d011      	beq.n	8020738 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020714:	69fb      	ldr	r3, [r7, #28]
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	68db      	ldr	r3, [r3, #12]
 802071a:	685b      	ldr	r3, [r3, #4]
 802071c:	4618      	mov	r0, r3
 802071e:	f7f9 fd2c 	bl	801a17a <lwip_htonl>
 8020722:	4604      	mov	r4, r0
 8020724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020726:	68db      	ldr	r3, [r3, #12]
 8020728:	685b      	ldr	r3, [r3, #4]
 802072a:	4618      	mov	r0, r3
 802072c:	f7f9 fd25 	bl	801a17a <lwip_htonl>
 8020730:	4603      	mov	r3, r0
 8020732:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8020734:	2b00      	cmp	r3, #0
 8020736:	dbe6      	blt.n	8020706 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8020738:	69fb      	ldr	r3, [r7, #28]
 802073a:	681a      	ldr	r2, [r3, #0]
 802073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802073e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8020740:	69fb      	ldr	r3, [r7, #28]
 8020742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020744:	601a      	str	r2, [r3, #0]
 8020746:	e009      	b.n	802075c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8020748:	6a3b      	ldr	r3, [r7, #32]
 802074a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802074c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 802074e:	6a3b      	ldr	r3, [r7, #32]
 8020750:	681b      	ldr	r3, [r3, #0]
 8020752:	623b      	str	r3, [r7, #32]
 8020754:	e002      	b.n	802075c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8020756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020758:	f7fc fc3f 	bl	801cfda <tcp_seg_free>
    }
    seg = pcb->unsent;
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020760:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8020762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020764:	2b00      	cmp	r3, #0
 8020766:	d012      	beq.n	802078e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8020768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802076a:	68db      	ldr	r3, [r3, #12]
 802076c:	685b      	ldr	r3, [r3, #4]
 802076e:	4618      	mov	r0, r3
 8020770:	f7f9 fd03 	bl	801a17a <lwip_htonl>
 8020774:	4602      	mov	r2, r0
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802077a:	1ad3      	subs	r3, r2, r3
 802077c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802077e:	8912      	ldrh	r2, [r2, #8]
 8020780:	4413      	add	r3, r2
  while (seg != NULL &&
 8020782:	69ba      	ldr	r2, [r7, #24]
 8020784:	429a      	cmp	r2, r3
 8020786:	f4bf aed9 	bcs.w	802053c <tcp_output+0x160>
 802078a:	e000      	b.n	802078e <tcp_output+0x3b2>
      break;
 802078c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020792:	2b00      	cmp	r3, #0
 8020794:	d108      	bne.n	80207a8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	2200      	movs	r2, #0
 802079a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 802079e:	e004      	b.n	80207aa <tcp_output+0x3ce>
    goto output_done;
 80207a0:	bf00      	nop
 80207a2:	e002      	b.n	80207aa <tcp_output+0x3ce>
    goto output_done;
 80207a4:	bf00      	nop
 80207a6:	e000      	b.n	80207aa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80207a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80207aa:	687b      	ldr	r3, [r7, #4]
 80207ac:	8b5b      	ldrh	r3, [r3, #26]
 80207ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80207b2:	b29a      	uxth	r2, r3
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80207b8:	2300      	movs	r3, #0
}
 80207ba:	4618      	mov	r0, r3
 80207bc:	3728      	adds	r7, #40	; 0x28
 80207be:	46bd      	mov	sp, r7
 80207c0:	bdb0      	pop	{r4, r5, r7, pc}
 80207c2:	bf00      	nop

080207c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d106      	bne.n	80207e0 <tcp_output_segment_busy+0x1c>
 80207d2:	4b09      	ldr	r3, [pc, #36]	; (80207f8 <tcp_output_segment_busy+0x34>)
 80207d4:	f240 529a 	movw	r2, #1434	; 0x59a
 80207d8:	4908      	ldr	r1, [pc, #32]	; (80207fc <tcp_output_segment_busy+0x38>)
 80207da:	4809      	ldr	r0, [pc, #36]	; (8020800 <tcp_output_segment_busy+0x3c>)
 80207dc:	f006 fe6c 	bl	80274b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	685b      	ldr	r3, [r3, #4]
 80207e4:	7b9b      	ldrb	r3, [r3, #14]
 80207e6:	2b01      	cmp	r3, #1
 80207e8:	d001      	beq.n	80207ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80207ea:	2301      	movs	r3, #1
 80207ec:	e000      	b.n	80207f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80207ee:	2300      	movs	r3, #0
}
 80207f0:	4618      	mov	r0, r3
 80207f2:	3708      	adds	r7, #8
 80207f4:	46bd      	mov	sp, r7
 80207f6:	bd80      	pop	{r7, pc}
 80207f8:	08029be8 	.word	0x08029be8
 80207fc:	0802a184 	.word	0x0802a184
 8020800:	08029c3c 	.word	0x08029c3c

08020804 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8020804:	b5b0      	push	{r4, r5, r7, lr}
 8020806:	b08c      	sub	sp, #48	; 0x30
 8020808:	af04      	add	r7, sp, #16
 802080a:	60f8      	str	r0, [r7, #12]
 802080c:	60b9      	str	r1, [r7, #8]
 802080e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8020810:	68fb      	ldr	r3, [r7, #12]
 8020812:	2b00      	cmp	r3, #0
 8020814:	d106      	bne.n	8020824 <tcp_output_segment+0x20>
 8020816:	4b63      	ldr	r3, [pc, #396]	; (80209a4 <tcp_output_segment+0x1a0>)
 8020818:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 802081c:	4962      	ldr	r1, [pc, #392]	; (80209a8 <tcp_output_segment+0x1a4>)
 802081e:	4863      	ldr	r0, [pc, #396]	; (80209ac <tcp_output_segment+0x1a8>)
 8020820:	f006 fe4a 	bl	80274b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8020824:	68bb      	ldr	r3, [r7, #8]
 8020826:	2b00      	cmp	r3, #0
 8020828:	d106      	bne.n	8020838 <tcp_output_segment+0x34>
 802082a:	4b5e      	ldr	r3, [pc, #376]	; (80209a4 <tcp_output_segment+0x1a0>)
 802082c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8020830:	495f      	ldr	r1, [pc, #380]	; (80209b0 <tcp_output_segment+0x1ac>)
 8020832:	485e      	ldr	r0, [pc, #376]	; (80209ac <tcp_output_segment+0x1a8>)
 8020834:	f006 fe40 	bl	80274b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	2b00      	cmp	r3, #0
 802083c:	d106      	bne.n	802084c <tcp_output_segment+0x48>
 802083e:	4b59      	ldr	r3, [pc, #356]	; (80209a4 <tcp_output_segment+0x1a0>)
 8020840:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8020844:	495b      	ldr	r1, [pc, #364]	; (80209b4 <tcp_output_segment+0x1b0>)
 8020846:	4859      	ldr	r0, [pc, #356]	; (80209ac <tcp_output_segment+0x1a8>)
 8020848:	f006 fe36 	bl	80274b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 802084c:	68f8      	ldr	r0, [r7, #12]
 802084e:	f7ff ffb9 	bl	80207c4 <tcp_output_segment_busy>
 8020852:	4603      	mov	r3, r0
 8020854:	2b00      	cmp	r3, #0
 8020856:	d001      	beq.n	802085c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8020858:	2300      	movs	r3, #0
 802085a:	e09f      	b.n	802099c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 802085c:	68bb      	ldr	r3, [r7, #8]
 802085e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	68dc      	ldr	r4, [r3, #12]
 8020864:	4610      	mov	r0, r2
 8020866:	f7f9 fc88 	bl	801a17a <lwip_htonl>
 802086a:	4603      	mov	r3, r0
 802086c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 802086e:	68bb      	ldr	r3, [r7, #8]
 8020870:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8020872:	68fb      	ldr	r3, [r7, #12]
 8020874:	68dc      	ldr	r4, [r3, #12]
 8020876:	4610      	mov	r0, r2
 8020878:	f7f9 fc6a 	bl	801a150 <lwip_htons>
 802087c:	4603      	mov	r3, r0
 802087e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020880:	68bb      	ldr	r3, [r7, #8]
 8020882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020884:	68ba      	ldr	r2, [r7, #8]
 8020886:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8020888:	441a      	add	r2, r3
 802088a:	68bb      	ldr	r3, [r7, #8]
 802088c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 802088e:	68fb      	ldr	r3, [r7, #12]
 8020890:	68db      	ldr	r3, [r3, #12]
 8020892:	3314      	adds	r3, #20
 8020894:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8020896:	68fb      	ldr	r3, [r7, #12]
 8020898:	7a9b      	ldrb	r3, [r3, #10]
 802089a:	f003 0301 	and.w	r3, r3, #1
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d015      	beq.n	80208ce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80208a2:	68bb      	ldr	r3, [r7, #8]
 80208a4:	3304      	adds	r3, #4
 80208a6:	461a      	mov	r2, r3
 80208a8:	6879      	ldr	r1, [r7, #4]
 80208aa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80208ae:	f7fc fe8b 	bl	801d5c8 <tcp_eff_send_mss_netif>
 80208b2:	4603      	mov	r3, r0
 80208b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80208b6:	8b7b      	ldrh	r3, [r7, #26]
 80208b8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80208bc:	4618      	mov	r0, r3
 80208be:	f7f9 fc5c 	bl	801a17a <lwip_htonl>
 80208c2:	4602      	mov	r2, r0
 80208c4:	69fb      	ldr	r3, [r7, #28]
 80208c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80208c8:	69fb      	ldr	r3, [r7, #28]
 80208ca:	3304      	adds	r3, #4
 80208cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80208ce:	68bb      	ldr	r3, [r7, #8]
 80208d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	da02      	bge.n	80208de <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80208d8:	68bb      	ldr	r3, [r7, #8]
 80208da:	2200      	movs	r2, #0
 80208dc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80208de:	68bb      	ldr	r3, [r7, #8]
 80208e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80208e2:	2b00      	cmp	r3, #0
 80208e4:	d10c      	bne.n	8020900 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80208e6:	4b34      	ldr	r3, [pc, #208]	; (80209b8 <tcp_output_segment+0x1b4>)
 80208e8:	681a      	ldr	r2, [r3, #0]
 80208ea:	68bb      	ldr	r3, [r7, #8]
 80208ec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80208ee:	68fb      	ldr	r3, [r7, #12]
 80208f0:	68db      	ldr	r3, [r3, #12]
 80208f2:	685b      	ldr	r3, [r3, #4]
 80208f4:	4618      	mov	r0, r3
 80208f6:	f7f9 fc40 	bl	801a17a <lwip_htonl>
 80208fa:	4602      	mov	r2, r0
 80208fc:	68bb      	ldr	r3, [r7, #8]
 80208fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020900:	68fb      	ldr	r3, [r7, #12]
 8020902:	68da      	ldr	r2, [r3, #12]
 8020904:	68fb      	ldr	r3, [r7, #12]
 8020906:	685b      	ldr	r3, [r3, #4]
 8020908:	685b      	ldr	r3, [r3, #4]
 802090a:	1ad3      	subs	r3, r2, r3
 802090c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 802090e:	68fb      	ldr	r3, [r7, #12]
 8020910:	685b      	ldr	r3, [r3, #4]
 8020912:	8959      	ldrh	r1, [r3, #10]
 8020914:	68fb      	ldr	r3, [r7, #12]
 8020916:	685b      	ldr	r3, [r3, #4]
 8020918:	8b3a      	ldrh	r2, [r7, #24]
 802091a:	1a8a      	subs	r2, r1, r2
 802091c:	b292      	uxth	r2, r2
 802091e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8020920:	68fb      	ldr	r3, [r7, #12]
 8020922:	685b      	ldr	r3, [r3, #4]
 8020924:	8919      	ldrh	r1, [r3, #8]
 8020926:	68fb      	ldr	r3, [r7, #12]
 8020928:	685b      	ldr	r3, [r3, #4]
 802092a:	8b3a      	ldrh	r2, [r7, #24]
 802092c:	1a8a      	subs	r2, r1, r2
 802092e:	b292      	uxth	r2, r2
 8020930:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8020932:	68fb      	ldr	r3, [r7, #12]
 8020934:	685b      	ldr	r3, [r3, #4]
 8020936:	68fa      	ldr	r2, [r7, #12]
 8020938:	68d2      	ldr	r2, [r2, #12]
 802093a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 802093c:	68fb      	ldr	r3, [r7, #12]
 802093e:	68db      	ldr	r3, [r3, #12]
 8020940:	2200      	movs	r2, #0
 8020942:	741a      	strb	r2, [r3, #16]
 8020944:	2200      	movs	r2, #0
 8020946:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	68db      	ldr	r3, [r3, #12]
 802094c:	f103 0214 	add.w	r2, r3, #20
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	7a9b      	ldrb	r3, [r3, #10]
 8020954:	009b      	lsls	r3, r3, #2
 8020956:	f003 0304 	and.w	r3, r3, #4
 802095a:	4413      	add	r3, r2
 802095c:	69fa      	ldr	r2, [r7, #28]
 802095e:	429a      	cmp	r2, r3
 8020960:	d006      	beq.n	8020970 <tcp_output_segment+0x16c>
 8020962:	4b10      	ldr	r3, [pc, #64]	; (80209a4 <tcp_output_segment+0x1a0>)
 8020964:	f240 621c 	movw	r2, #1564	; 0x61c
 8020968:	4914      	ldr	r1, [pc, #80]	; (80209bc <tcp_output_segment+0x1b8>)
 802096a:	4810      	ldr	r0, [pc, #64]	; (80209ac <tcp_output_segment+0x1a8>)
 802096c:	f006 fda4 	bl	80274b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8020970:	68fb      	ldr	r3, [r7, #12]
 8020972:	6858      	ldr	r0, [r3, #4]
 8020974:	68b9      	ldr	r1, [r7, #8]
 8020976:	68bb      	ldr	r3, [r7, #8]
 8020978:	1d1c      	adds	r4, r3, #4
 802097a:	68bb      	ldr	r3, [r7, #8]
 802097c:	7add      	ldrb	r5, [r3, #11]
 802097e:	68bb      	ldr	r3, [r7, #8]
 8020980:	7a9b      	ldrb	r3, [r3, #10]
 8020982:	687a      	ldr	r2, [r7, #4]
 8020984:	9202      	str	r2, [sp, #8]
 8020986:	2206      	movs	r2, #6
 8020988:	9201      	str	r2, [sp, #4]
 802098a:	9300      	str	r3, [sp, #0]
 802098c:	462b      	mov	r3, r5
 802098e:	4622      	mov	r2, r4
 8020990:	f004 fc44 	bl	802521c <ip4_output_if>
 8020994:	4603      	mov	r3, r0
 8020996:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8020998:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802099c:	4618      	mov	r0, r3
 802099e:	3720      	adds	r7, #32
 80209a0:	46bd      	mov	sp, r7
 80209a2:	bdb0      	pop	{r4, r5, r7, pc}
 80209a4:	08029be8 	.word	0x08029be8
 80209a8:	0802a1ac 	.word	0x0802a1ac
 80209ac:	08029c3c 	.word	0x08029c3c
 80209b0:	0802a1cc 	.word	0x0802a1cc
 80209b4:	0802a1ec 	.word	0x0802a1ec
 80209b8:	2400cf58 	.word	0x2400cf58
 80209bc:	0802a210 	.word	0x0802a210

080209c0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80209c0:	b5b0      	push	{r4, r5, r7, lr}
 80209c2:	b084      	sub	sp, #16
 80209c4:	af00      	add	r7, sp, #0
 80209c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d106      	bne.n	80209dc <tcp_rexmit_rto_prepare+0x1c>
 80209ce:	4b31      	ldr	r3, [pc, #196]	; (8020a94 <tcp_rexmit_rto_prepare+0xd4>)
 80209d0:	f240 6263 	movw	r2, #1635	; 0x663
 80209d4:	4930      	ldr	r1, [pc, #192]	; (8020a98 <tcp_rexmit_rto_prepare+0xd8>)
 80209d6:	4831      	ldr	r0, [pc, #196]	; (8020a9c <tcp_rexmit_rto_prepare+0xdc>)
 80209d8:	f006 fd6e 	bl	80274b8 <iprintf>

  if (pcb->unacked == NULL) {
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d102      	bne.n	80209ea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80209e4:	f06f 0305 	mvn.w	r3, #5
 80209e8:	e050      	b.n	8020a8c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80209ee:	60fb      	str	r3, [r7, #12]
 80209f0:	e00b      	b.n	8020a0a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80209f2:	68f8      	ldr	r0, [r7, #12]
 80209f4:	f7ff fee6 	bl	80207c4 <tcp_output_segment_busy>
 80209f8:	4603      	mov	r3, r0
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d002      	beq.n	8020a04 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80209fe:	f06f 0305 	mvn.w	r3, #5
 8020a02:	e043      	b.n	8020a8c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	60fb      	str	r3, [r7, #12]
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d1ef      	bne.n	80209f2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8020a12:	68f8      	ldr	r0, [r7, #12]
 8020a14:	f7ff fed6 	bl	80207c4 <tcp_output_segment_busy>
 8020a18:	4603      	mov	r3, r0
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d002      	beq.n	8020a24 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8020a1e:	f06f 0305 	mvn.w	r3, #5
 8020a22:	e033      	b.n	8020a8c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8020a28:	68fb      	ldr	r3, [r7, #12]
 8020a2a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	2200      	movs	r2, #0
 8020a38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	8b5b      	ldrh	r3, [r3, #26]
 8020a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020a42:	b29a      	uxth	r2, r3
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	68db      	ldr	r3, [r3, #12]
 8020a4c:	685b      	ldr	r3, [r3, #4]
 8020a4e:	4618      	mov	r0, r3
 8020a50:	f7f9 fb93 	bl	801a17a <lwip_htonl>
 8020a54:	4604      	mov	r4, r0
 8020a56:	68fb      	ldr	r3, [r7, #12]
 8020a58:	891b      	ldrh	r3, [r3, #8]
 8020a5a:	461d      	mov	r5, r3
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	68db      	ldr	r3, [r3, #12]
 8020a60:	899b      	ldrh	r3, [r3, #12]
 8020a62:	b29b      	uxth	r3, r3
 8020a64:	4618      	mov	r0, r3
 8020a66:	f7f9 fb73 	bl	801a150 <lwip_htons>
 8020a6a:	4603      	mov	r3, r0
 8020a6c:	b2db      	uxtb	r3, r3
 8020a6e:	f003 0303 	and.w	r3, r3, #3
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	d001      	beq.n	8020a7a <tcp_rexmit_rto_prepare+0xba>
 8020a76:	2301      	movs	r3, #1
 8020a78:	e000      	b.n	8020a7c <tcp_rexmit_rto_prepare+0xbc>
 8020a7a:	2300      	movs	r3, #0
 8020a7c:	442b      	add	r3, r5
 8020a7e:	18e2      	adds	r2, r4, r3
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	2200      	movs	r2, #0
 8020a88:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8020a8a:	2300      	movs	r3, #0
}
 8020a8c:	4618      	mov	r0, r3
 8020a8e:	3710      	adds	r7, #16
 8020a90:	46bd      	mov	sp, r7
 8020a92:	bdb0      	pop	{r4, r5, r7, pc}
 8020a94:	08029be8 	.word	0x08029be8
 8020a98:	0802a224 	.word	0x0802a224
 8020a9c:	08029c3c 	.word	0x08029c3c

08020aa0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8020aa0:	b580      	push	{r7, lr}
 8020aa2:	b082      	sub	sp, #8
 8020aa4:	af00      	add	r7, sp, #0
 8020aa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d106      	bne.n	8020abc <tcp_rexmit_rto_commit+0x1c>
 8020aae:	4b0d      	ldr	r3, [pc, #52]	; (8020ae4 <tcp_rexmit_rto_commit+0x44>)
 8020ab0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020ab4:	490c      	ldr	r1, [pc, #48]	; (8020ae8 <tcp_rexmit_rto_commit+0x48>)
 8020ab6:	480d      	ldr	r0, [pc, #52]	; (8020aec <tcp_rexmit_rto_commit+0x4c>)
 8020ab8:	f006 fcfe 	bl	80274b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020ac2:	2bff      	cmp	r3, #255	; 0xff
 8020ac4:	d007      	beq.n	8020ad6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020acc:	3301      	adds	r3, #1
 8020ace:	b2da      	uxtb	r2, r3
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8020ad6:	6878      	ldr	r0, [r7, #4]
 8020ad8:	f7ff fc80 	bl	80203dc <tcp_output>
}
 8020adc:	bf00      	nop
 8020ade:	3708      	adds	r7, #8
 8020ae0:	46bd      	mov	sp, r7
 8020ae2:	bd80      	pop	{r7, pc}
 8020ae4:	08029be8 	.word	0x08029be8
 8020ae8:	0802a248 	.word	0x0802a248
 8020aec:	08029c3c 	.word	0x08029c3c

08020af0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8020af0:	b580      	push	{r7, lr}
 8020af2:	b082      	sub	sp, #8
 8020af4:	af00      	add	r7, sp, #0
 8020af6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d106      	bne.n	8020b0c <tcp_rexmit_rto+0x1c>
 8020afe:	4b0a      	ldr	r3, [pc, #40]	; (8020b28 <tcp_rexmit_rto+0x38>)
 8020b00:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8020b04:	4909      	ldr	r1, [pc, #36]	; (8020b2c <tcp_rexmit_rto+0x3c>)
 8020b06:	480a      	ldr	r0, [pc, #40]	; (8020b30 <tcp_rexmit_rto+0x40>)
 8020b08:	f006 fcd6 	bl	80274b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8020b0c:	6878      	ldr	r0, [r7, #4]
 8020b0e:	f7ff ff57 	bl	80209c0 <tcp_rexmit_rto_prepare>
 8020b12:	4603      	mov	r3, r0
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d102      	bne.n	8020b1e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8020b18:	6878      	ldr	r0, [r7, #4]
 8020b1a:	f7ff ffc1 	bl	8020aa0 <tcp_rexmit_rto_commit>
  }
}
 8020b1e:	bf00      	nop
 8020b20:	3708      	adds	r7, #8
 8020b22:	46bd      	mov	sp, r7
 8020b24:	bd80      	pop	{r7, pc}
 8020b26:	bf00      	nop
 8020b28:	08029be8 	.word	0x08029be8
 8020b2c:	0802a26c 	.word	0x0802a26c
 8020b30:	08029c3c 	.word	0x08029c3c

08020b34 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8020b34:	b590      	push	{r4, r7, lr}
 8020b36:	b085      	sub	sp, #20
 8020b38:	af00      	add	r7, sp, #0
 8020b3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d106      	bne.n	8020b50 <tcp_rexmit+0x1c>
 8020b42:	4b2f      	ldr	r3, [pc, #188]	; (8020c00 <tcp_rexmit+0xcc>)
 8020b44:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8020b48:	492e      	ldr	r1, [pc, #184]	; (8020c04 <tcp_rexmit+0xd0>)
 8020b4a:	482f      	ldr	r0, [pc, #188]	; (8020c08 <tcp_rexmit+0xd4>)
 8020b4c:	f006 fcb4 	bl	80274b8 <iprintf>

  if (pcb->unacked == NULL) {
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d102      	bne.n	8020b5e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8020b58:	f06f 0305 	mvn.w	r3, #5
 8020b5c:	e04c      	b.n	8020bf8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b62:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8020b64:	68b8      	ldr	r0, [r7, #8]
 8020b66:	f7ff fe2d 	bl	80207c4 <tcp_output_segment_busy>
 8020b6a:	4603      	mov	r3, r0
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d002      	beq.n	8020b76 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8020b70:	f06f 0305 	mvn.w	r3, #5
 8020b74:	e040      	b.n	8020bf8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8020b76:	68bb      	ldr	r3, [r7, #8]
 8020b78:	681a      	ldr	r2, [r3, #0]
 8020b7a:	687b      	ldr	r3, [r7, #4]
 8020b7c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	336c      	adds	r3, #108	; 0x6c
 8020b82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020b84:	e002      	b.n	8020b8c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8020b86:	68fb      	ldr	r3, [r7, #12]
 8020b88:	681b      	ldr	r3, [r3, #0]
 8020b8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	681b      	ldr	r3, [r3, #0]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d011      	beq.n	8020bb8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020b94:	68fb      	ldr	r3, [r7, #12]
 8020b96:	681b      	ldr	r3, [r3, #0]
 8020b98:	68db      	ldr	r3, [r3, #12]
 8020b9a:	685b      	ldr	r3, [r3, #4]
 8020b9c:	4618      	mov	r0, r3
 8020b9e:	f7f9 faec 	bl	801a17a <lwip_htonl>
 8020ba2:	4604      	mov	r4, r0
 8020ba4:	68bb      	ldr	r3, [r7, #8]
 8020ba6:	68db      	ldr	r3, [r3, #12]
 8020ba8:	685b      	ldr	r3, [r3, #4]
 8020baa:	4618      	mov	r0, r3
 8020bac:	f7f9 fae5 	bl	801a17a <lwip_htonl>
 8020bb0:	4603      	mov	r3, r0
 8020bb2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	dbe6      	blt.n	8020b86 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	681a      	ldr	r2, [r3, #0]
 8020bbc:	68bb      	ldr	r3, [r7, #8]
 8020bbe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	68ba      	ldr	r2, [r7, #8]
 8020bc4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8020bc6:	68bb      	ldr	r3, [r7, #8]
 8020bc8:	681b      	ldr	r3, [r3, #0]
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	d103      	bne.n	8020bd6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8020bce:	687b      	ldr	r3, [r7, #4]
 8020bd0:	2200      	movs	r2, #0
 8020bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020bdc:	2bff      	cmp	r3, #255	; 0xff
 8020bde:	d007      	beq.n	8020bf0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8020be0:	687b      	ldr	r3, [r7, #4]
 8020be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020be6:	3301      	adds	r3, #1
 8020be8:	b2da      	uxtb	r2, r3
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	2200      	movs	r2, #0
 8020bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8020bf6:	2300      	movs	r3, #0
}
 8020bf8:	4618      	mov	r0, r3
 8020bfa:	3714      	adds	r7, #20
 8020bfc:	46bd      	mov	sp, r7
 8020bfe:	bd90      	pop	{r4, r7, pc}
 8020c00:	08029be8 	.word	0x08029be8
 8020c04:	0802a288 	.word	0x0802a288
 8020c08:	08029c3c 	.word	0x08029c3c

08020c0c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8020c0c:	b580      	push	{r7, lr}
 8020c0e:	b082      	sub	sp, #8
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d106      	bne.n	8020c28 <tcp_rexmit_fast+0x1c>
 8020c1a:	4b2a      	ldr	r3, [pc, #168]	; (8020cc4 <tcp_rexmit_fast+0xb8>)
 8020c1c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8020c20:	4929      	ldr	r1, [pc, #164]	; (8020cc8 <tcp_rexmit_fast+0xbc>)
 8020c22:	482a      	ldr	r0, [pc, #168]	; (8020ccc <tcp_rexmit_fast+0xc0>)
 8020c24:	f006 fc48 	bl	80274b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d045      	beq.n	8020cbc <tcp_rexmit_fast+0xb0>
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	8b5b      	ldrh	r3, [r3, #26]
 8020c34:	f003 0304 	and.w	r3, r3, #4
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	d13f      	bne.n	8020cbc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8020c3c:	6878      	ldr	r0, [r7, #4]
 8020c3e:	f7ff ff79 	bl	8020b34 <tcp_rexmit>
 8020c42:	4603      	mov	r3, r0
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	d139      	bne.n	8020cbc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8020c54:	4293      	cmp	r3, r2
 8020c56:	bf28      	it	cs
 8020c58:	4613      	movcs	r3, r2
 8020c5a:	b29b      	uxth	r3, r3
 8020c5c:	2b00      	cmp	r3, #0
 8020c5e:	da00      	bge.n	8020c62 <tcp_rexmit_fast+0x56>
 8020c60:	3301      	adds	r3, #1
 8020c62:	105b      	asrs	r3, r3, #1
 8020c64:	b29a      	uxth	r2, r3
 8020c66:	687b      	ldr	r3, [r7, #4]
 8020c68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8020c72:	461a      	mov	r2, r3
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020c78:	005b      	lsls	r3, r3, #1
 8020c7a:	429a      	cmp	r2, r3
 8020c7c:	d206      	bcs.n	8020c8c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020c82:	005b      	lsls	r3, r3, #1
 8020c84:	b29a      	uxth	r2, r3
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020c96:	4619      	mov	r1, r3
 8020c98:	0049      	lsls	r1, r1, #1
 8020c9a:	440b      	add	r3, r1
 8020c9c:	b29b      	uxth	r3, r3
 8020c9e:	4413      	add	r3, r2
 8020ca0:	b29a      	uxth	r2, r3
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	8b5b      	ldrh	r3, [r3, #26]
 8020cac:	f043 0304 	orr.w	r3, r3, #4
 8020cb0:	b29a      	uxth	r2, r3
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	2200      	movs	r2, #0
 8020cba:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8020cbc:	bf00      	nop
 8020cbe:	3708      	adds	r7, #8
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	bd80      	pop	{r7, pc}
 8020cc4:	08029be8 	.word	0x08029be8
 8020cc8:	0802a2a0 	.word	0x0802a2a0
 8020ccc:	08029c3c 	.word	0x08029c3c

08020cd0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8020cd0:	b580      	push	{r7, lr}
 8020cd2:	b086      	sub	sp, #24
 8020cd4:	af00      	add	r7, sp, #0
 8020cd6:	60f8      	str	r0, [r7, #12]
 8020cd8:	607b      	str	r3, [r7, #4]
 8020cda:	460b      	mov	r3, r1
 8020cdc:	817b      	strh	r3, [r7, #10]
 8020cde:	4613      	mov	r3, r2
 8020ce0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8020ce2:	897a      	ldrh	r2, [r7, #10]
 8020ce4:	893b      	ldrh	r3, [r7, #8]
 8020ce6:	4413      	add	r3, r2
 8020ce8:	b29b      	uxth	r3, r3
 8020cea:	3314      	adds	r3, #20
 8020cec:	b29b      	uxth	r3, r3
 8020cee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020cf2:	4619      	mov	r1, r3
 8020cf4:	2022      	movs	r0, #34	; 0x22
 8020cf6:	f7fa fbfd 	bl	801b4f4 <pbuf_alloc>
 8020cfa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020cfc:	697b      	ldr	r3, [r7, #20]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d04d      	beq.n	8020d9e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8020d02:	897b      	ldrh	r3, [r7, #10]
 8020d04:	3313      	adds	r3, #19
 8020d06:	697a      	ldr	r2, [r7, #20]
 8020d08:	8952      	ldrh	r2, [r2, #10]
 8020d0a:	4293      	cmp	r3, r2
 8020d0c:	db06      	blt.n	8020d1c <tcp_output_alloc_header_common+0x4c>
 8020d0e:	4b26      	ldr	r3, [pc, #152]	; (8020da8 <tcp_output_alloc_header_common+0xd8>)
 8020d10:	f240 7223 	movw	r2, #1827	; 0x723
 8020d14:	4925      	ldr	r1, [pc, #148]	; (8020dac <tcp_output_alloc_header_common+0xdc>)
 8020d16:	4826      	ldr	r0, [pc, #152]	; (8020db0 <tcp_output_alloc_header_common+0xe0>)
 8020d18:	f006 fbce 	bl	80274b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020d1c:	697b      	ldr	r3, [r7, #20]
 8020d1e:	685b      	ldr	r3, [r3, #4]
 8020d20:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8020d22:	8c3b      	ldrh	r3, [r7, #32]
 8020d24:	4618      	mov	r0, r3
 8020d26:	f7f9 fa13 	bl	801a150 <lwip_htons>
 8020d2a:	4603      	mov	r3, r0
 8020d2c:	461a      	mov	r2, r3
 8020d2e:	693b      	ldr	r3, [r7, #16]
 8020d30:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8020d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020d34:	4618      	mov	r0, r3
 8020d36:	f7f9 fa0b 	bl	801a150 <lwip_htons>
 8020d3a:	4603      	mov	r3, r0
 8020d3c:	461a      	mov	r2, r3
 8020d3e:	693b      	ldr	r3, [r7, #16]
 8020d40:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020d42:	693b      	ldr	r3, [r7, #16]
 8020d44:	687a      	ldr	r2, [r7, #4]
 8020d46:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8020d48:	68f8      	ldr	r0, [r7, #12]
 8020d4a:	f7f9 fa16 	bl	801a17a <lwip_htonl>
 8020d4e:	4602      	mov	r2, r0
 8020d50:	693b      	ldr	r3, [r7, #16]
 8020d52:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8020d54:	897b      	ldrh	r3, [r7, #10]
 8020d56:	089b      	lsrs	r3, r3, #2
 8020d58:	b29b      	uxth	r3, r3
 8020d5a:	3305      	adds	r3, #5
 8020d5c:	b29b      	uxth	r3, r3
 8020d5e:	031b      	lsls	r3, r3, #12
 8020d60:	b29a      	uxth	r2, r3
 8020d62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020d66:	b29b      	uxth	r3, r3
 8020d68:	4313      	orrs	r3, r2
 8020d6a:	b29b      	uxth	r3, r3
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f7f9 f9ef 	bl	801a150 <lwip_htons>
 8020d72:	4603      	mov	r3, r0
 8020d74:	461a      	mov	r2, r3
 8020d76:	693b      	ldr	r3, [r7, #16]
 8020d78:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8020d7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8020d7c:	4618      	mov	r0, r3
 8020d7e:	f7f9 f9e7 	bl	801a150 <lwip_htons>
 8020d82:	4603      	mov	r3, r0
 8020d84:	461a      	mov	r2, r3
 8020d86:	693b      	ldr	r3, [r7, #16]
 8020d88:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020d8a:	693b      	ldr	r3, [r7, #16]
 8020d8c:	2200      	movs	r2, #0
 8020d8e:	741a      	strb	r2, [r3, #16]
 8020d90:	2200      	movs	r2, #0
 8020d92:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8020d94:	693b      	ldr	r3, [r7, #16]
 8020d96:	2200      	movs	r2, #0
 8020d98:	749a      	strb	r2, [r3, #18]
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8020d9e:	697b      	ldr	r3, [r7, #20]
}
 8020da0:	4618      	mov	r0, r3
 8020da2:	3718      	adds	r7, #24
 8020da4:	46bd      	mov	sp, r7
 8020da6:	bd80      	pop	{r7, pc}
 8020da8:	08029be8 	.word	0x08029be8
 8020dac:	0802a2c0 	.word	0x0802a2c0
 8020db0:	08029c3c 	.word	0x08029c3c

08020db4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8020db4:	b5b0      	push	{r4, r5, r7, lr}
 8020db6:	b08a      	sub	sp, #40	; 0x28
 8020db8:	af04      	add	r7, sp, #16
 8020dba:	60f8      	str	r0, [r7, #12]
 8020dbc:	607b      	str	r3, [r7, #4]
 8020dbe:	460b      	mov	r3, r1
 8020dc0:	817b      	strh	r3, [r7, #10]
 8020dc2:	4613      	mov	r3, r2
 8020dc4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8020dc6:	68fb      	ldr	r3, [r7, #12]
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	d106      	bne.n	8020dda <tcp_output_alloc_header+0x26>
 8020dcc:	4b15      	ldr	r3, [pc, #84]	; (8020e24 <tcp_output_alloc_header+0x70>)
 8020dce:	f240 7242 	movw	r2, #1858	; 0x742
 8020dd2:	4915      	ldr	r1, [pc, #84]	; (8020e28 <tcp_output_alloc_header+0x74>)
 8020dd4:	4815      	ldr	r0, [pc, #84]	; (8020e2c <tcp_output_alloc_header+0x78>)
 8020dd6:	f006 fb6f 	bl	80274b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8020dda:	68fb      	ldr	r3, [r7, #12]
 8020ddc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8020dde:	68fb      	ldr	r3, [r7, #12]
 8020de0:	8adb      	ldrh	r3, [r3, #22]
 8020de2:	68fa      	ldr	r2, [r7, #12]
 8020de4:	8b12      	ldrh	r2, [r2, #24]
 8020de6:	68f9      	ldr	r1, [r7, #12]
 8020de8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8020dea:	893d      	ldrh	r5, [r7, #8]
 8020dec:	897c      	ldrh	r4, [r7, #10]
 8020dee:	9103      	str	r1, [sp, #12]
 8020df0:	2110      	movs	r1, #16
 8020df2:	9102      	str	r1, [sp, #8]
 8020df4:	9201      	str	r2, [sp, #4]
 8020df6:	9300      	str	r3, [sp, #0]
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	462a      	mov	r2, r5
 8020dfc:	4621      	mov	r1, r4
 8020dfe:	f7ff ff67 	bl	8020cd0 <tcp_output_alloc_header_common>
 8020e02:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8020e04:	697b      	ldr	r3, [r7, #20]
 8020e06:	2b00      	cmp	r3, #0
 8020e08:	d006      	beq.n	8020e18 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020e0a:	68fb      	ldr	r3, [r7, #12]
 8020e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e0e:	68fa      	ldr	r2, [r7, #12]
 8020e10:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8020e12:	441a      	add	r2, r3
 8020e14:	68fb      	ldr	r3, [r7, #12]
 8020e16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8020e18:	697b      	ldr	r3, [r7, #20]
}
 8020e1a:	4618      	mov	r0, r3
 8020e1c:	3718      	adds	r7, #24
 8020e1e:	46bd      	mov	sp, r7
 8020e20:	bdb0      	pop	{r4, r5, r7, pc}
 8020e22:	bf00      	nop
 8020e24:	08029be8 	.word	0x08029be8
 8020e28:	0802a2f0 	.word	0x0802a2f0
 8020e2c:	08029c3c 	.word	0x08029c3c

08020e30 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8020e30:	b580      	push	{r7, lr}
 8020e32:	b088      	sub	sp, #32
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	60f8      	str	r0, [r7, #12]
 8020e38:	60b9      	str	r1, [r7, #8]
 8020e3a:	4611      	mov	r1, r2
 8020e3c:	461a      	mov	r2, r3
 8020e3e:	460b      	mov	r3, r1
 8020e40:	71fb      	strb	r3, [r7, #7]
 8020e42:	4613      	mov	r3, r2
 8020e44:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8020e46:	2300      	movs	r3, #0
 8020e48:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8020e4a:	68bb      	ldr	r3, [r7, #8]
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d106      	bne.n	8020e5e <tcp_output_fill_options+0x2e>
 8020e50:	4b13      	ldr	r3, [pc, #76]	; (8020ea0 <tcp_output_fill_options+0x70>)
 8020e52:	f240 7256 	movw	r2, #1878	; 0x756
 8020e56:	4913      	ldr	r1, [pc, #76]	; (8020ea4 <tcp_output_fill_options+0x74>)
 8020e58:	4813      	ldr	r0, [pc, #76]	; (8020ea8 <tcp_output_fill_options+0x78>)
 8020e5a:	f006 fb2d 	bl	80274b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8020e5e:	68bb      	ldr	r3, [r7, #8]
 8020e60:	685b      	ldr	r3, [r3, #4]
 8020e62:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8020e64:	69bb      	ldr	r3, [r7, #24]
 8020e66:	3314      	adds	r3, #20
 8020e68:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8020e6a:	69bb      	ldr	r3, [r7, #24]
 8020e6c:	f103 0214 	add.w	r2, r3, #20
 8020e70:	8bfb      	ldrh	r3, [r7, #30]
 8020e72:	009b      	lsls	r3, r3, #2
 8020e74:	4619      	mov	r1, r3
 8020e76:	79fb      	ldrb	r3, [r7, #7]
 8020e78:	009b      	lsls	r3, r3, #2
 8020e7a:	f003 0304 	and.w	r3, r3, #4
 8020e7e:	440b      	add	r3, r1
 8020e80:	4413      	add	r3, r2
 8020e82:	697a      	ldr	r2, [r7, #20]
 8020e84:	429a      	cmp	r2, r3
 8020e86:	d006      	beq.n	8020e96 <tcp_output_fill_options+0x66>
 8020e88:	4b05      	ldr	r3, [pc, #20]	; (8020ea0 <tcp_output_fill_options+0x70>)
 8020e8a:	f240 7275 	movw	r2, #1909	; 0x775
 8020e8e:	4907      	ldr	r1, [pc, #28]	; (8020eac <tcp_output_fill_options+0x7c>)
 8020e90:	4805      	ldr	r0, [pc, #20]	; (8020ea8 <tcp_output_fill_options+0x78>)
 8020e92:	f006 fb11 	bl	80274b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8020e96:	bf00      	nop
 8020e98:	3720      	adds	r7, #32
 8020e9a:	46bd      	mov	sp, r7
 8020e9c:	bd80      	pop	{r7, pc}
 8020e9e:	bf00      	nop
 8020ea0:	08029be8 	.word	0x08029be8
 8020ea4:	0802a318 	.word	0x0802a318
 8020ea8:	08029c3c 	.word	0x08029c3c
 8020eac:	0802a210 	.word	0x0802a210

08020eb0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8020eb0:	b580      	push	{r7, lr}
 8020eb2:	b08a      	sub	sp, #40	; 0x28
 8020eb4:	af04      	add	r7, sp, #16
 8020eb6:	60f8      	str	r0, [r7, #12]
 8020eb8:	60b9      	str	r1, [r7, #8]
 8020eba:	607a      	str	r2, [r7, #4]
 8020ebc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8020ebe:	68bb      	ldr	r3, [r7, #8]
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d106      	bne.n	8020ed2 <tcp_output_control_segment+0x22>
 8020ec4:	4b1c      	ldr	r3, [pc, #112]	; (8020f38 <tcp_output_control_segment+0x88>)
 8020ec6:	f240 7287 	movw	r2, #1927	; 0x787
 8020eca:	491c      	ldr	r1, [pc, #112]	; (8020f3c <tcp_output_control_segment+0x8c>)
 8020ecc:	481c      	ldr	r0, [pc, #112]	; (8020f40 <tcp_output_control_segment+0x90>)
 8020ece:	f006 faf3 	bl	80274b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8020ed2:	683a      	ldr	r2, [r7, #0]
 8020ed4:	6879      	ldr	r1, [r7, #4]
 8020ed6:	68f8      	ldr	r0, [r7, #12]
 8020ed8:	f7fe ff40 	bl	801fd5c <tcp_route>
 8020edc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8020ede:	693b      	ldr	r3, [r7, #16]
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d102      	bne.n	8020eea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8020ee4:	23fc      	movs	r3, #252	; 0xfc
 8020ee6:	75fb      	strb	r3, [r7, #23]
 8020ee8:	e01c      	b.n	8020f24 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8020eea:	68fb      	ldr	r3, [r7, #12]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d006      	beq.n	8020efe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8020ef0:	68fb      	ldr	r3, [r7, #12]
 8020ef2:	7adb      	ldrb	r3, [r3, #11]
 8020ef4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8020ef6:	68fb      	ldr	r3, [r7, #12]
 8020ef8:	7a9b      	ldrb	r3, [r3, #10]
 8020efa:	757b      	strb	r3, [r7, #21]
 8020efc:	e003      	b.n	8020f06 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8020efe:	23ff      	movs	r3, #255	; 0xff
 8020f00:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8020f02:	2300      	movs	r3, #0
 8020f04:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8020f06:	7dba      	ldrb	r2, [r7, #22]
 8020f08:	693b      	ldr	r3, [r7, #16]
 8020f0a:	9302      	str	r3, [sp, #8]
 8020f0c:	2306      	movs	r3, #6
 8020f0e:	9301      	str	r3, [sp, #4]
 8020f10:	7d7b      	ldrb	r3, [r7, #21]
 8020f12:	9300      	str	r3, [sp, #0]
 8020f14:	4613      	mov	r3, r2
 8020f16:	683a      	ldr	r2, [r7, #0]
 8020f18:	6879      	ldr	r1, [r7, #4]
 8020f1a:	68b8      	ldr	r0, [r7, #8]
 8020f1c:	f004 f97e 	bl	802521c <ip4_output_if>
 8020f20:	4603      	mov	r3, r0
 8020f22:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8020f24:	68b8      	ldr	r0, [r7, #8]
 8020f26:	f7fa fdc9 	bl	801babc <pbuf_free>
  return err;
 8020f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020f2e:	4618      	mov	r0, r3
 8020f30:	3718      	adds	r7, #24
 8020f32:	46bd      	mov	sp, r7
 8020f34:	bd80      	pop	{r7, pc}
 8020f36:	bf00      	nop
 8020f38:	08029be8 	.word	0x08029be8
 8020f3c:	0802a340 	.word	0x0802a340
 8020f40:	08029c3c 	.word	0x08029c3c

08020f44 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020f44:	b590      	push	{r4, r7, lr}
 8020f46:	b08b      	sub	sp, #44	; 0x2c
 8020f48:	af04      	add	r7, sp, #16
 8020f4a:	60f8      	str	r0, [r7, #12]
 8020f4c:	60b9      	str	r1, [r7, #8]
 8020f4e:	607a      	str	r2, [r7, #4]
 8020f50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020f52:	683b      	ldr	r3, [r7, #0]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d106      	bne.n	8020f66 <tcp_rst+0x22>
 8020f58:	4b1f      	ldr	r3, [pc, #124]	; (8020fd8 <tcp_rst+0x94>)
 8020f5a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8020f5e:	491f      	ldr	r1, [pc, #124]	; (8020fdc <tcp_rst+0x98>)
 8020f60:	481f      	ldr	r0, [pc, #124]	; (8020fe0 <tcp_rst+0x9c>)
 8020f62:	f006 faa9 	bl	80274b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8020f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d106      	bne.n	8020f7a <tcp_rst+0x36>
 8020f6c:	4b1a      	ldr	r3, [pc, #104]	; (8020fd8 <tcp_rst+0x94>)
 8020f6e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8020f72:	491c      	ldr	r1, [pc, #112]	; (8020fe4 <tcp_rst+0xa0>)
 8020f74:	481a      	ldr	r0, [pc, #104]	; (8020fe0 <tcp_rst+0x9c>)
 8020f76:	f006 fa9f 	bl	80274b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020f7a:	2300      	movs	r3, #0
 8020f7c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8020f7e:	f246 0308 	movw	r3, #24584	; 0x6008
 8020f82:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020f84:	7dfb      	ldrb	r3, [r7, #23]
 8020f86:	b29c      	uxth	r4, r3
 8020f88:	68b8      	ldr	r0, [r7, #8]
 8020f8a:	f7f9 f8f6 	bl	801a17a <lwip_htonl>
 8020f8e:	4602      	mov	r2, r0
 8020f90:	8abb      	ldrh	r3, [r7, #20]
 8020f92:	9303      	str	r3, [sp, #12]
 8020f94:	2314      	movs	r3, #20
 8020f96:	9302      	str	r3, [sp, #8]
 8020f98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8020f9a:	9301      	str	r3, [sp, #4]
 8020f9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8020f9e:	9300      	str	r3, [sp, #0]
 8020fa0:	4613      	mov	r3, r2
 8020fa2:	2200      	movs	r2, #0
 8020fa4:	4621      	mov	r1, r4
 8020fa6:	6878      	ldr	r0, [r7, #4]
 8020fa8:	f7ff fe92 	bl	8020cd0 <tcp_output_alloc_header_common>
 8020fac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020fae:	693b      	ldr	r3, [r7, #16]
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d00c      	beq.n	8020fce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020fb4:	7dfb      	ldrb	r3, [r7, #23]
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	6939      	ldr	r1, [r7, #16]
 8020fba:	68f8      	ldr	r0, [r7, #12]
 8020fbc:	f7ff ff38 	bl	8020e30 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fc2:	683a      	ldr	r2, [r7, #0]
 8020fc4:	6939      	ldr	r1, [r7, #16]
 8020fc6:	68f8      	ldr	r0, [r7, #12]
 8020fc8:	f7ff ff72 	bl	8020eb0 <tcp_output_control_segment>
 8020fcc:	e000      	b.n	8020fd0 <tcp_rst+0x8c>
    return;
 8020fce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8020fd0:	371c      	adds	r7, #28
 8020fd2:	46bd      	mov	sp, r7
 8020fd4:	bd90      	pop	{r4, r7, pc}
 8020fd6:	bf00      	nop
 8020fd8:	08029be8 	.word	0x08029be8
 8020fdc:	0802a36c 	.word	0x0802a36c
 8020fe0:	08029c3c 	.word	0x08029c3c
 8020fe4:	0802a388 	.word	0x0802a388

08020fe8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8020fe8:	b590      	push	{r4, r7, lr}
 8020fea:	b087      	sub	sp, #28
 8020fec:	af00      	add	r7, sp, #0
 8020fee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8020ff0:	2300      	movs	r3, #0
 8020ff2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8020ff4:	2300      	movs	r3, #0
 8020ff6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d106      	bne.n	802100c <tcp_send_empty_ack+0x24>
 8020ffe:	4b28      	ldr	r3, [pc, #160]	; (80210a0 <tcp_send_empty_ack+0xb8>)
 8021000:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8021004:	4927      	ldr	r1, [pc, #156]	; (80210a4 <tcp_send_empty_ack+0xbc>)
 8021006:	4828      	ldr	r0, [pc, #160]	; (80210a8 <tcp_send_empty_ack+0xc0>)
 8021008:	f006 fa56 	bl	80274b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 802100c:	7dfb      	ldrb	r3, [r7, #23]
 802100e:	009b      	lsls	r3, r3, #2
 8021010:	b2db      	uxtb	r3, r3
 8021012:	f003 0304 	and.w	r3, r3, #4
 8021016:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8021018:	7d7b      	ldrb	r3, [r7, #21]
 802101a:	b29c      	uxth	r4, r3
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021020:	4618      	mov	r0, r3
 8021022:	f7f9 f8aa 	bl	801a17a <lwip_htonl>
 8021026:	4603      	mov	r3, r0
 8021028:	2200      	movs	r2, #0
 802102a:	4621      	mov	r1, r4
 802102c:	6878      	ldr	r0, [r7, #4]
 802102e:	f7ff fec1 	bl	8020db4 <tcp_output_alloc_header>
 8021032:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021034:	693b      	ldr	r3, [r7, #16]
 8021036:	2b00      	cmp	r3, #0
 8021038:	d109      	bne.n	802104e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802103a:	687b      	ldr	r3, [r7, #4]
 802103c:	8b5b      	ldrh	r3, [r3, #26]
 802103e:	f043 0303 	orr.w	r3, r3, #3
 8021042:	b29a      	uxth	r2, r3
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8021048:	f06f 0301 	mvn.w	r3, #1
 802104c:	e023      	b.n	8021096 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 802104e:	7dbb      	ldrb	r3, [r7, #22]
 8021050:	7dfa      	ldrb	r2, [r7, #23]
 8021052:	6939      	ldr	r1, [r7, #16]
 8021054:	6878      	ldr	r0, [r7, #4]
 8021056:	f7ff feeb 	bl	8020e30 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802105a:	687a      	ldr	r2, [r7, #4]
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	3304      	adds	r3, #4
 8021060:	6939      	ldr	r1, [r7, #16]
 8021062:	6878      	ldr	r0, [r7, #4]
 8021064:	f7ff ff24 	bl	8020eb0 <tcp_output_control_segment>
 8021068:	4603      	mov	r3, r0
 802106a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 802106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021070:	2b00      	cmp	r3, #0
 8021072:	d007      	beq.n	8021084 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	8b5b      	ldrh	r3, [r3, #26]
 8021078:	f043 0303 	orr.w	r3, r3, #3
 802107c:	b29a      	uxth	r2, r3
 802107e:	687b      	ldr	r3, [r7, #4]
 8021080:	835a      	strh	r2, [r3, #26]
 8021082:	e006      	b.n	8021092 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021084:	687b      	ldr	r3, [r7, #4]
 8021086:	8b5b      	ldrh	r3, [r3, #26]
 8021088:	f023 0303 	bic.w	r3, r3, #3
 802108c:	b29a      	uxth	r2, r3
 802108e:	687b      	ldr	r3, [r7, #4]
 8021090:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8021092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021096:	4618      	mov	r0, r3
 8021098:	371c      	adds	r7, #28
 802109a:	46bd      	mov	sp, r7
 802109c:	bd90      	pop	{r4, r7, pc}
 802109e:	bf00      	nop
 80210a0:	08029be8 	.word	0x08029be8
 80210a4:	0802a3a4 	.word	0x0802a3a4
 80210a8:	08029c3c 	.word	0x08029c3c

080210ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80210ac:	b590      	push	{r4, r7, lr}
 80210ae:	b087      	sub	sp, #28
 80210b0:	af00      	add	r7, sp, #0
 80210b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80210b4:	2300      	movs	r3, #0
 80210b6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	2b00      	cmp	r3, #0
 80210bc:	d106      	bne.n	80210cc <tcp_keepalive+0x20>
 80210be:	4b18      	ldr	r3, [pc, #96]	; (8021120 <tcp_keepalive+0x74>)
 80210c0:	f640 0224 	movw	r2, #2084	; 0x824
 80210c4:	4917      	ldr	r1, [pc, #92]	; (8021124 <tcp_keepalive+0x78>)
 80210c6:	4818      	ldr	r0, [pc, #96]	; (8021128 <tcp_keepalive+0x7c>)
 80210c8:	f006 f9f6 	bl	80274b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80210cc:	7dfb      	ldrb	r3, [r7, #23]
 80210ce:	b29c      	uxth	r4, r3
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80210d4:	3b01      	subs	r3, #1
 80210d6:	4618      	mov	r0, r3
 80210d8:	f7f9 f84f 	bl	801a17a <lwip_htonl>
 80210dc:	4603      	mov	r3, r0
 80210de:	2200      	movs	r2, #0
 80210e0:	4621      	mov	r1, r4
 80210e2:	6878      	ldr	r0, [r7, #4]
 80210e4:	f7ff fe66 	bl	8020db4 <tcp_output_alloc_header>
 80210e8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80210ea:	693b      	ldr	r3, [r7, #16]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	d102      	bne.n	80210f6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80210f0:	f04f 33ff 	mov.w	r3, #4294967295
 80210f4:	e010      	b.n	8021118 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80210f6:	7dfb      	ldrb	r3, [r7, #23]
 80210f8:	2200      	movs	r2, #0
 80210fa:	6939      	ldr	r1, [r7, #16]
 80210fc:	6878      	ldr	r0, [r7, #4]
 80210fe:	f7ff fe97 	bl	8020e30 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021102:	687a      	ldr	r2, [r7, #4]
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	3304      	adds	r3, #4
 8021108:	6939      	ldr	r1, [r7, #16]
 802110a:	6878      	ldr	r0, [r7, #4]
 802110c:	f7ff fed0 	bl	8020eb0 <tcp_output_control_segment>
 8021110:	4603      	mov	r3, r0
 8021112:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8021114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021118:	4618      	mov	r0, r3
 802111a:	371c      	adds	r7, #28
 802111c:	46bd      	mov	sp, r7
 802111e:	bd90      	pop	{r4, r7, pc}
 8021120:	08029be8 	.word	0x08029be8
 8021124:	0802a3c4 	.word	0x0802a3c4
 8021128:	08029c3c 	.word	0x08029c3c

0802112c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 802112c:	b590      	push	{r4, r7, lr}
 802112e:	b08b      	sub	sp, #44	; 0x2c
 8021130:	af00      	add	r7, sp, #0
 8021132:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021134:	2300      	movs	r3, #0
 8021136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	2b00      	cmp	r3, #0
 802113e:	d106      	bne.n	802114e <tcp_zero_window_probe+0x22>
 8021140:	4b4c      	ldr	r3, [pc, #304]	; (8021274 <tcp_zero_window_probe+0x148>)
 8021142:	f640 024f 	movw	r2, #2127	; 0x84f
 8021146:	494c      	ldr	r1, [pc, #304]	; (8021278 <tcp_zero_window_probe+0x14c>)
 8021148:	484c      	ldr	r0, [pc, #304]	; (802127c <tcp_zero_window_probe+0x150>)
 802114a:	f006 f9b5 	bl	80274b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021152:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8021154:	6a3b      	ldr	r3, [r7, #32]
 8021156:	2b00      	cmp	r3, #0
 8021158:	d101      	bne.n	802115e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802115a:	2300      	movs	r3, #0
 802115c:	e086      	b.n	802126c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8021164:	2bff      	cmp	r3, #255	; 0xff
 8021166:	d007      	beq.n	8021178 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 802116e:	3301      	adds	r3, #1
 8021170:	b2da      	uxtb	r2, r3
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8021178:	6a3b      	ldr	r3, [r7, #32]
 802117a:	68db      	ldr	r3, [r3, #12]
 802117c:	899b      	ldrh	r3, [r3, #12]
 802117e:	b29b      	uxth	r3, r3
 8021180:	4618      	mov	r0, r3
 8021182:	f7f8 ffe5 	bl	801a150 <lwip_htons>
 8021186:	4603      	mov	r3, r0
 8021188:	b2db      	uxtb	r3, r3
 802118a:	f003 0301 	and.w	r3, r3, #1
 802118e:	2b00      	cmp	r3, #0
 8021190:	d005      	beq.n	802119e <tcp_zero_window_probe+0x72>
 8021192:	6a3b      	ldr	r3, [r7, #32]
 8021194:	891b      	ldrh	r3, [r3, #8]
 8021196:	2b00      	cmp	r3, #0
 8021198:	d101      	bne.n	802119e <tcp_zero_window_probe+0x72>
 802119a:	2301      	movs	r3, #1
 802119c:	e000      	b.n	80211a0 <tcp_zero_window_probe+0x74>
 802119e:	2300      	movs	r3, #0
 80211a0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80211a2:	7ffb      	ldrb	r3, [r7, #31]
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	bf0c      	ite	eq
 80211a8:	2301      	moveq	r3, #1
 80211aa:	2300      	movne	r3, #0
 80211ac:	b2db      	uxtb	r3, r3
 80211ae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80211b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80211b4:	b299      	uxth	r1, r3
 80211b6:	6a3b      	ldr	r3, [r7, #32]
 80211b8:	68db      	ldr	r3, [r3, #12]
 80211ba:	685b      	ldr	r3, [r3, #4]
 80211bc:	8bba      	ldrh	r2, [r7, #28]
 80211be:	6878      	ldr	r0, [r7, #4]
 80211c0:	f7ff fdf8 	bl	8020db4 <tcp_output_alloc_header>
 80211c4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80211c6:	69bb      	ldr	r3, [r7, #24]
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d102      	bne.n	80211d2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80211cc:	f04f 33ff 	mov.w	r3, #4294967295
 80211d0:	e04c      	b.n	802126c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80211d2:	69bb      	ldr	r3, [r7, #24]
 80211d4:	685b      	ldr	r3, [r3, #4]
 80211d6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80211d8:	7ffb      	ldrb	r3, [r7, #31]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d011      	beq.n	8021202 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80211de:	697b      	ldr	r3, [r7, #20]
 80211e0:	899b      	ldrh	r3, [r3, #12]
 80211e2:	b29b      	uxth	r3, r3
 80211e4:	b21b      	sxth	r3, r3
 80211e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80211ea:	b21c      	sxth	r4, r3
 80211ec:	2011      	movs	r0, #17
 80211ee:	f7f8 ffaf 	bl	801a150 <lwip_htons>
 80211f2:	4603      	mov	r3, r0
 80211f4:	b21b      	sxth	r3, r3
 80211f6:	4323      	orrs	r3, r4
 80211f8:	b21b      	sxth	r3, r3
 80211fa:	b29a      	uxth	r2, r3
 80211fc:	697b      	ldr	r3, [r7, #20]
 80211fe:	819a      	strh	r2, [r3, #12]
 8021200:	e010      	b.n	8021224 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8021202:	69bb      	ldr	r3, [r7, #24]
 8021204:	685b      	ldr	r3, [r3, #4]
 8021206:	3314      	adds	r3, #20
 8021208:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 802120a:	6a3b      	ldr	r3, [r7, #32]
 802120c:	6858      	ldr	r0, [r3, #4]
 802120e:	6a3b      	ldr	r3, [r7, #32]
 8021210:	685b      	ldr	r3, [r3, #4]
 8021212:	891a      	ldrh	r2, [r3, #8]
 8021214:	6a3b      	ldr	r3, [r7, #32]
 8021216:	891b      	ldrh	r3, [r3, #8]
 8021218:	1ad3      	subs	r3, r2, r3
 802121a:	b29b      	uxth	r3, r3
 802121c:	2201      	movs	r2, #1
 802121e:	6939      	ldr	r1, [r7, #16]
 8021220:	f7fa fe52 	bl	801bec8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8021224:	6a3b      	ldr	r3, [r7, #32]
 8021226:	68db      	ldr	r3, [r3, #12]
 8021228:	685b      	ldr	r3, [r3, #4]
 802122a:	4618      	mov	r0, r3
 802122c:	f7f8 ffa5 	bl	801a17a <lwip_htonl>
 8021230:	4603      	mov	r3, r0
 8021232:	3301      	adds	r3, #1
 8021234:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802123a:	68fb      	ldr	r3, [r7, #12]
 802123c:	1ad3      	subs	r3, r2, r3
 802123e:	2b00      	cmp	r3, #0
 8021240:	da02      	bge.n	8021248 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	68fa      	ldr	r2, [r7, #12]
 8021246:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8021248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802124c:	2200      	movs	r2, #0
 802124e:	69b9      	ldr	r1, [r7, #24]
 8021250:	6878      	ldr	r0, [r7, #4]
 8021252:	f7ff fded 	bl	8020e30 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021256:	687a      	ldr	r2, [r7, #4]
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	3304      	adds	r3, #4
 802125c:	69b9      	ldr	r1, [r7, #24]
 802125e:	6878      	ldr	r0, [r7, #4]
 8021260:	f7ff fe26 	bl	8020eb0 <tcp_output_control_segment>
 8021264:	4603      	mov	r3, r0
 8021266:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8021268:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 802126c:	4618      	mov	r0, r3
 802126e:	372c      	adds	r7, #44	; 0x2c
 8021270:	46bd      	mov	sp, r7
 8021272:	bd90      	pop	{r4, r7, pc}
 8021274:	08029be8 	.word	0x08029be8
 8021278:	0802a3e0 	.word	0x0802a3e0
 802127c:	08029c3c 	.word	0x08029c3c

08021280 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8021280:	b580      	push	{r7, lr}
 8021282:	b082      	sub	sp, #8
 8021284:	af00      	add	r7, sp, #0
 8021286:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8021288:	f7fa ff0c 	bl	801c0a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 802128c:	4b0a      	ldr	r3, [pc, #40]	; (80212b8 <tcpip_tcp_timer+0x38>)
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	2b00      	cmp	r3, #0
 8021292:	d103      	bne.n	802129c <tcpip_tcp_timer+0x1c>
 8021294:	4b09      	ldr	r3, [pc, #36]	; (80212bc <tcpip_tcp_timer+0x3c>)
 8021296:	681b      	ldr	r3, [r3, #0]
 8021298:	2b00      	cmp	r3, #0
 802129a:	d005      	beq.n	80212a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 802129c:	2200      	movs	r2, #0
 802129e:	4908      	ldr	r1, [pc, #32]	; (80212c0 <tcpip_tcp_timer+0x40>)
 80212a0:	20fa      	movs	r0, #250	; 0xfa
 80212a2:	f000 f8f3 	bl	802148c <sys_timeout>
 80212a6:	e003      	b.n	80212b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80212a8:	4b06      	ldr	r3, [pc, #24]	; (80212c4 <tcpip_tcp_timer+0x44>)
 80212aa:	2200      	movs	r2, #0
 80212ac:	601a      	str	r2, [r3, #0]
  }
}
 80212ae:	bf00      	nop
 80212b0:	bf00      	nop
 80212b2:	3708      	adds	r7, #8
 80212b4:	46bd      	mov	sp, r7
 80212b6:	bd80      	pop	{r7, pc}
 80212b8:	2400cf64 	.word	0x2400cf64
 80212bc:	2400cf68 	.word	0x2400cf68
 80212c0:	08021281 	.word	0x08021281
 80212c4:	2400cfb0 	.word	0x2400cfb0

080212c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80212c8:	b580      	push	{r7, lr}
 80212ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80212cc:	4b0a      	ldr	r3, [pc, #40]	; (80212f8 <tcp_timer_needed+0x30>)
 80212ce:	681b      	ldr	r3, [r3, #0]
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	d10f      	bne.n	80212f4 <tcp_timer_needed+0x2c>
 80212d4:	4b09      	ldr	r3, [pc, #36]	; (80212fc <tcp_timer_needed+0x34>)
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d103      	bne.n	80212e4 <tcp_timer_needed+0x1c>
 80212dc:	4b08      	ldr	r3, [pc, #32]	; (8021300 <tcp_timer_needed+0x38>)
 80212de:	681b      	ldr	r3, [r3, #0]
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d007      	beq.n	80212f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80212e4:	4b04      	ldr	r3, [pc, #16]	; (80212f8 <tcp_timer_needed+0x30>)
 80212e6:	2201      	movs	r2, #1
 80212e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80212ea:	2200      	movs	r2, #0
 80212ec:	4905      	ldr	r1, [pc, #20]	; (8021304 <tcp_timer_needed+0x3c>)
 80212ee:	20fa      	movs	r0, #250	; 0xfa
 80212f0:	f000 f8cc 	bl	802148c <sys_timeout>
  }
}
 80212f4:	bf00      	nop
 80212f6:	bd80      	pop	{r7, pc}
 80212f8:	2400cfb0 	.word	0x2400cfb0
 80212fc:	2400cf64 	.word	0x2400cf64
 8021300:	2400cf68 	.word	0x2400cf68
 8021304:	08021281 	.word	0x08021281

08021308 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8021308:	b580      	push	{r7, lr}
 802130a:	b086      	sub	sp, #24
 802130c:	af00      	add	r7, sp, #0
 802130e:	60f8      	str	r0, [r7, #12]
 8021310:	60b9      	str	r1, [r7, #8]
 8021312:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8021314:	200a      	movs	r0, #10
 8021316:	f7f9 fcab 	bl	801ac70 <memp_malloc>
 802131a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 802131c:	693b      	ldr	r3, [r7, #16]
 802131e:	2b00      	cmp	r3, #0
 8021320:	d109      	bne.n	8021336 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8021322:	693b      	ldr	r3, [r7, #16]
 8021324:	2b00      	cmp	r3, #0
 8021326:	d151      	bne.n	80213cc <sys_timeout_abs+0xc4>
 8021328:	4b2a      	ldr	r3, [pc, #168]	; (80213d4 <sys_timeout_abs+0xcc>)
 802132a:	22be      	movs	r2, #190	; 0xbe
 802132c:	492a      	ldr	r1, [pc, #168]	; (80213d8 <sys_timeout_abs+0xd0>)
 802132e:	482b      	ldr	r0, [pc, #172]	; (80213dc <sys_timeout_abs+0xd4>)
 8021330:	f006 f8c2 	bl	80274b8 <iprintf>
    return;
 8021334:	e04a      	b.n	80213cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8021336:	693b      	ldr	r3, [r7, #16]
 8021338:	2200      	movs	r2, #0
 802133a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 802133c:	693b      	ldr	r3, [r7, #16]
 802133e:	68ba      	ldr	r2, [r7, #8]
 8021340:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8021342:	693b      	ldr	r3, [r7, #16]
 8021344:	687a      	ldr	r2, [r7, #4]
 8021346:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8021348:	693b      	ldr	r3, [r7, #16]
 802134a:	68fa      	ldr	r2, [r7, #12]
 802134c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 802134e:	4b24      	ldr	r3, [pc, #144]	; (80213e0 <sys_timeout_abs+0xd8>)
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	2b00      	cmp	r3, #0
 8021354:	d103      	bne.n	802135e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8021356:	4a22      	ldr	r2, [pc, #136]	; (80213e0 <sys_timeout_abs+0xd8>)
 8021358:	693b      	ldr	r3, [r7, #16]
 802135a:	6013      	str	r3, [r2, #0]
    return;
 802135c:	e037      	b.n	80213ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 802135e:	693b      	ldr	r3, [r7, #16]
 8021360:	685a      	ldr	r2, [r3, #4]
 8021362:	4b1f      	ldr	r3, [pc, #124]	; (80213e0 <sys_timeout_abs+0xd8>)
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	685b      	ldr	r3, [r3, #4]
 8021368:	1ad3      	subs	r3, r2, r3
 802136a:	0fdb      	lsrs	r3, r3, #31
 802136c:	f003 0301 	and.w	r3, r3, #1
 8021370:	b2db      	uxtb	r3, r3
 8021372:	2b00      	cmp	r3, #0
 8021374:	d007      	beq.n	8021386 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8021376:	4b1a      	ldr	r3, [pc, #104]	; (80213e0 <sys_timeout_abs+0xd8>)
 8021378:	681a      	ldr	r2, [r3, #0]
 802137a:	693b      	ldr	r3, [r7, #16]
 802137c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 802137e:	4a18      	ldr	r2, [pc, #96]	; (80213e0 <sys_timeout_abs+0xd8>)
 8021380:	693b      	ldr	r3, [r7, #16]
 8021382:	6013      	str	r3, [r2, #0]
 8021384:	e023      	b.n	80213ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8021386:	4b16      	ldr	r3, [pc, #88]	; (80213e0 <sys_timeout_abs+0xd8>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	617b      	str	r3, [r7, #20]
 802138c:	e01a      	b.n	80213c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 802138e:	697b      	ldr	r3, [r7, #20]
 8021390:	681b      	ldr	r3, [r3, #0]
 8021392:	2b00      	cmp	r3, #0
 8021394:	d00b      	beq.n	80213ae <sys_timeout_abs+0xa6>
 8021396:	693b      	ldr	r3, [r7, #16]
 8021398:	685a      	ldr	r2, [r3, #4]
 802139a:	697b      	ldr	r3, [r7, #20]
 802139c:	681b      	ldr	r3, [r3, #0]
 802139e:	685b      	ldr	r3, [r3, #4]
 80213a0:	1ad3      	subs	r3, r2, r3
 80213a2:	0fdb      	lsrs	r3, r3, #31
 80213a4:	f003 0301 	and.w	r3, r3, #1
 80213a8:	b2db      	uxtb	r3, r3
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	d007      	beq.n	80213be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80213ae:	697b      	ldr	r3, [r7, #20]
 80213b0:	681a      	ldr	r2, [r3, #0]
 80213b2:	693b      	ldr	r3, [r7, #16]
 80213b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80213b6:	697b      	ldr	r3, [r7, #20]
 80213b8:	693a      	ldr	r2, [r7, #16]
 80213ba:	601a      	str	r2, [r3, #0]
        break;
 80213bc:	e007      	b.n	80213ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80213be:	697b      	ldr	r3, [r7, #20]
 80213c0:	681b      	ldr	r3, [r3, #0]
 80213c2:	617b      	str	r3, [r7, #20]
 80213c4:	697b      	ldr	r3, [r7, #20]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d1e1      	bne.n	802138e <sys_timeout_abs+0x86>
 80213ca:	e000      	b.n	80213ce <sys_timeout_abs+0xc6>
    return;
 80213cc:	bf00      	nop
      }
    }
  }
}
 80213ce:	3718      	adds	r7, #24
 80213d0:	46bd      	mov	sp, r7
 80213d2:	bd80      	pop	{r7, pc}
 80213d4:	0802a404 	.word	0x0802a404
 80213d8:	0802a438 	.word	0x0802a438
 80213dc:	0802a478 	.word	0x0802a478
 80213e0:	2400cfa8 	.word	0x2400cfa8

080213e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80213e4:	b580      	push	{r7, lr}
 80213e6:	b086      	sub	sp, #24
 80213e8:	af00      	add	r7, sp, #0
 80213ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80213f0:	697b      	ldr	r3, [r7, #20]
 80213f2:	685b      	ldr	r3, [r3, #4]
 80213f4:	4798      	blx	r3

  now = sys_now();
 80213f6:	f7f2 fca1 	bl	8013d3c <sys_now>
 80213fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80213fc:	697b      	ldr	r3, [r7, #20]
 80213fe:	681a      	ldr	r2, [r3, #0]
 8021400:	4b0f      	ldr	r3, [pc, #60]	; (8021440 <lwip_cyclic_timer+0x5c>)
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	4413      	add	r3, r2
 8021406:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8021408:	68fa      	ldr	r2, [r7, #12]
 802140a:	693b      	ldr	r3, [r7, #16]
 802140c:	1ad3      	subs	r3, r2, r3
 802140e:	0fdb      	lsrs	r3, r3, #31
 8021410:	f003 0301 	and.w	r3, r3, #1
 8021414:	b2db      	uxtb	r3, r3
 8021416:	2b00      	cmp	r3, #0
 8021418:	d009      	beq.n	802142e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 802141a:	697b      	ldr	r3, [r7, #20]
 802141c:	681a      	ldr	r2, [r3, #0]
 802141e:	693b      	ldr	r3, [r7, #16]
 8021420:	4413      	add	r3, r2
 8021422:	687a      	ldr	r2, [r7, #4]
 8021424:	4907      	ldr	r1, [pc, #28]	; (8021444 <lwip_cyclic_timer+0x60>)
 8021426:	4618      	mov	r0, r3
 8021428:	f7ff ff6e 	bl	8021308 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 802142c:	e004      	b.n	8021438 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 802142e:	687a      	ldr	r2, [r7, #4]
 8021430:	4904      	ldr	r1, [pc, #16]	; (8021444 <lwip_cyclic_timer+0x60>)
 8021432:	68f8      	ldr	r0, [r7, #12]
 8021434:	f7ff ff68 	bl	8021308 <sys_timeout_abs>
}
 8021438:	bf00      	nop
 802143a:	3718      	adds	r7, #24
 802143c:	46bd      	mov	sp, r7
 802143e:	bd80      	pop	{r7, pc}
 8021440:	2400cfac 	.word	0x2400cfac
 8021444:	080213e5 	.word	0x080213e5

08021448 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8021448:	b580      	push	{r7, lr}
 802144a:	b082      	sub	sp, #8
 802144c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802144e:	2301      	movs	r3, #1
 8021450:	607b      	str	r3, [r7, #4]
 8021452:	e00e      	b.n	8021472 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8021454:	4a0b      	ldr	r2, [pc, #44]	; (8021484 <sys_timeouts_init+0x3c>)
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	00db      	lsls	r3, r3, #3
 8021460:	4a08      	ldr	r2, [pc, #32]	; (8021484 <sys_timeouts_init+0x3c>)
 8021462:	4413      	add	r3, r2
 8021464:	461a      	mov	r2, r3
 8021466:	4908      	ldr	r1, [pc, #32]	; (8021488 <sys_timeouts_init+0x40>)
 8021468:	f000 f810 	bl	802148c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	3301      	adds	r3, #1
 8021470:	607b      	str	r3, [r7, #4]
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	2b04      	cmp	r3, #4
 8021476:	d9ed      	bls.n	8021454 <sys_timeouts_init+0xc>
  }
}
 8021478:	bf00      	nop
 802147a:	bf00      	nop
 802147c:	3708      	adds	r7, #8
 802147e:	46bd      	mov	sp, r7
 8021480:	bd80      	pop	{r7, pc}
 8021482:	bf00      	nop
 8021484:	0802bb24 	.word	0x0802bb24
 8021488:	080213e5 	.word	0x080213e5

0802148c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 802148c:	b580      	push	{r7, lr}
 802148e:	b086      	sub	sp, #24
 8021490:	af00      	add	r7, sp, #0
 8021492:	60f8      	str	r0, [r7, #12]
 8021494:	60b9      	str	r1, [r7, #8]
 8021496:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021498:	68fb      	ldr	r3, [r7, #12]
 802149a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802149e:	d306      	bcc.n	80214ae <sys_timeout+0x22>
 80214a0:	4b0a      	ldr	r3, [pc, #40]	; (80214cc <sys_timeout+0x40>)
 80214a2:	f240 1229 	movw	r2, #297	; 0x129
 80214a6:	490a      	ldr	r1, [pc, #40]	; (80214d0 <sys_timeout+0x44>)
 80214a8:	480a      	ldr	r0, [pc, #40]	; (80214d4 <sys_timeout+0x48>)
 80214aa:	f006 f805 	bl	80274b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80214ae:	f7f2 fc45 	bl	8013d3c <sys_now>
 80214b2:	4602      	mov	r2, r0
 80214b4:	68fb      	ldr	r3, [r7, #12]
 80214b6:	4413      	add	r3, r2
 80214b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80214ba:	687a      	ldr	r2, [r7, #4]
 80214bc:	68b9      	ldr	r1, [r7, #8]
 80214be:	6978      	ldr	r0, [r7, #20]
 80214c0:	f7ff ff22 	bl	8021308 <sys_timeout_abs>
#endif
}
 80214c4:	bf00      	nop
 80214c6:	3718      	adds	r7, #24
 80214c8:	46bd      	mov	sp, r7
 80214ca:	bd80      	pop	{r7, pc}
 80214cc:	0802a404 	.word	0x0802a404
 80214d0:	0802a4a0 	.word	0x0802a4a0
 80214d4:	0802a478 	.word	0x0802a478

080214d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80214d8:	b580      	push	{r7, lr}
 80214da:	b084      	sub	sp, #16
 80214dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80214de:	f7f2 fc2d 	bl	8013d3c <sys_now>
 80214e2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80214e4:	4b17      	ldr	r3, [pc, #92]	; (8021544 <sys_check_timeouts+0x6c>)
 80214e6:	681b      	ldr	r3, [r3, #0]
 80214e8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80214ea:	68bb      	ldr	r3, [r7, #8]
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	d022      	beq.n	8021536 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80214f0:	68bb      	ldr	r3, [r7, #8]
 80214f2:	685b      	ldr	r3, [r3, #4]
 80214f4:	68fa      	ldr	r2, [r7, #12]
 80214f6:	1ad3      	subs	r3, r2, r3
 80214f8:	0fdb      	lsrs	r3, r3, #31
 80214fa:	f003 0301 	and.w	r3, r3, #1
 80214fe:	b2db      	uxtb	r3, r3
 8021500:	2b00      	cmp	r3, #0
 8021502:	d11a      	bne.n	802153a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8021504:	68bb      	ldr	r3, [r7, #8]
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	4a0e      	ldr	r2, [pc, #56]	; (8021544 <sys_check_timeouts+0x6c>)
 802150a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 802150c:	68bb      	ldr	r3, [r7, #8]
 802150e:	689b      	ldr	r3, [r3, #8]
 8021510:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8021512:	68bb      	ldr	r3, [r7, #8]
 8021514:	68db      	ldr	r3, [r3, #12]
 8021516:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8021518:	68bb      	ldr	r3, [r7, #8]
 802151a:	685b      	ldr	r3, [r3, #4]
 802151c:	4a0a      	ldr	r2, [pc, #40]	; (8021548 <sys_check_timeouts+0x70>)
 802151e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8021520:	68b9      	ldr	r1, [r7, #8]
 8021522:	200a      	movs	r0, #10
 8021524:	f7f9 fc1a 	bl	801ad5c <memp_free>
    if (handler != NULL) {
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	2b00      	cmp	r3, #0
 802152c:	d0da      	beq.n	80214e4 <sys_check_timeouts+0xc>
      handler(arg);
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	6838      	ldr	r0, [r7, #0]
 8021532:	4798      	blx	r3
  do {
 8021534:	e7d6      	b.n	80214e4 <sys_check_timeouts+0xc>
      return;
 8021536:	bf00      	nop
 8021538:	e000      	b.n	802153c <sys_check_timeouts+0x64>
      return;
 802153a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 802153c:	3710      	adds	r7, #16
 802153e:	46bd      	mov	sp, r7
 8021540:	bd80      	pop	{r7, pc}
 8021542:	bf00      	nop
 8021544:	2400cfa8 	.word	0x2400cfa8
 8021548:	2400cfac 	.word	0x2400cfac

0802154c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 802154c:	b580      	push	{r7, lr}
 802154e:	b082      	sub	sp, #8
 8021550:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8021552:	4b16      	ldr	r3, [pc, #88]	; (80215ac <sys_timeouts_sleeptime+0x60>)
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	2b00      	cmp	r3, #0
 8021558:	d102      	bne.n	8021560 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 802155a:	f04f 33ff 	mov.w	r3, #4294967295
 802155e:	e020      	b.n	80215a2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8021560:	f7f2 fbec 	bl	8013d3c <sys_now>
 8021564:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8021566:	4b11      	ldr	r3, [pc, #68]	; (80215ac <sys_timeouts_sleeptime+0x60>)
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	685a      	ldr	r2, [r3, #4]
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	1ad3      	subs	r3, r2, r3
 8021570:	0fdb      	lsrs	r3, r3, #31
 8021572:	f003 0301 	and.w	r3, r3, #1
 8021576:	b2db      	uxtb	r3, r3
 8021578:	2b00      	cmp	r3, #0
 802157a:	d001      	beq.n	8021580 <sys_timeouts_sleeptime+0x34>
    return 0;
 802157c:	2300      	movs	r3, #0
 802157e:	e010      	b.n	80215a2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8021580:	4b0a      	ldr	r3, [pc, #40]	; (80215ac <sys_timeouts_sleeptime+0x60>)
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	685a      	ldr	r2, [r3, #4]
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	1ad3      	subs	r3, r2, r3
 802158a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 802158c:	683b      	ldr	r3, [r7, #0]
 802158e:	2b00      	cmp	r3, #0
 8021590:	da06      	bge.n	80215a0 <sys_timeouts_sleeptime+0x54>
 8021592:	4b07      	ldr	r3, [pc, #28]	; (80215b0 <sys_timeouts_sleeptime+0x64>)
 8021594:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8021598:	4906      	ldr	r1, [pc, #24]	; (80215b4 <sys_timeouts_sleeptime+0x68>)
 802159a:	4807      	ldr	r0, [pc, #28]	; (80215b8 <sys_timeouts_sleeptime+0x6c>)
 802159c:	f005 ff8c 	bl	80274b8 <iprintf>
    return ret;
 80215a0:	683b      	ldr	r3, [r7, #0]
  }
}
 80215a2:	4618      	mov	r0, r3
 80215a4:	3708      	adds	r7, #8
 80215a6:	46bd      	mov	sp, r7
 80215a8:	bd80      	pop	{r7, pc}
 80215aa:	bf00      	nop
 80215ac:	2400cfa8 	.word	0x2400cfa8
 80215b0:	0802a404 	.word	0x0802a404
 80215b4:	0802a4d8 	.word	0x0802a4d8
 80215b8:	0802a478 	.word	0x0802a478

080215bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80215c0:	f006 f808 	bl	80275d4 <rand>
 80215c4:	4603      	mov	r3, r0
 80215c6:	b29b      	uxth	r3, r3
 80215c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80215cc:	b29b      	uxth	r3, r3
 80215ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80215d2:	b29a      	uxth	r2, r3
 80215d4:	4b01      	ldr	r3, [pc, #4]	; (80215dc <udp_init+0x20>)
 80215d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80215d8:	bf00      	nop
 80215da:	bd80      	pop	{r7, pc}
 80215dc:	24000460 	.word	0x24000460

080215e0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80215e0:	b480      	push	{r7}
 80215e2:	b083      	sub	sp, #12
 80215e4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80215e6:	2300      	movs	r3, #0
 80215e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80215ea:	4b17      	ldr	r3, [pc, #92]	; (8021648 <udp_new_port+0x68>)
 80215ec:	881b      	ldrh	r3, [r3, #0]
 80215ee:	1c5a      	adds	r2, r3, #1
 80215f0:	b291      	uxth	r1, r2
 80215f2:	4a15      	ldr	r2, [pc, #84]	; (8021648 <udp_new_port+0x68>)
 80215f4:	8011      	strh	r1, [r2, #0]
 80215f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80215fa:	4293      	cmp	r3, r2
 80215fc:	d103      	bne.n	8021606 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80215fe:	4b12      	ldr	r3, [pc, #72]	; (8021648 <udp_new_port+0x68>)
 8021600:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8021604:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021606:	4b11      	ldr	r3, [pc, #68]	; (802164c <udp_new_port+0x6c>)
 8021608:	681b      	ldr	r3, [r3, #0]
 802160a:	603b      	str	r3, [r7, #0]
 802160c:	e011      	b.n	8021632 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 802160e:	683b      	ldr	r3, [r7, #0]
 8021610:	8a5a      	ldrh	r2, [r3, #18]
 8021612:	4b0d      	ldr	r3, [pc, #52]	; (8021648 <udp_new_port+0x68>)
 8021614:	881b      	ldrh	r3, [r3, #0]
 8021616:	429a      	cmp	r2, r3
 8021618:	d108      	bne.n	802162c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 802161a:	88fb      	ldrh	r3, [r7, #6]
 802161c:	3301      	adds	r3, #1
 802161e:	80fb      	strh	r3, [r7, #6]
 8021620:	88fb      	ldrh	r3, [r7, #6]
 8021622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8021626:	d3e0      	bcc.n	80215ea <udp_new_port+0xa>
        return 0;
 8021628:	2300      	movs	r3, #0
 802162a:	e007      	b.n	802163c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802162c:	683b      	ldr	r3, [r7, #0]
 802162e:	68db      	ldr	r3, [r3, #12]
 8021630:	603b      	str	r3, [r7, #0]
 8021632:	683b      	ldr	r3, [r7, #0]
 8021634:	2b00      	cmp	r3, #0
 8021636:	d1ea      	bne.n	802160e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8021638:	4b03      	ldr	r3, [pc, #12]	; (8021648 <udp_new_port+0x68>)
 802163a:	881b      	ldrh	r3, [r3, #0]
}
 802163c:	4618      	mov	r0, r3
 802163e:	370c      	adds	r7, #12
 8021640:	46bd      	mov	sp, r7
 8021642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021646:	4770      	bx	lr
 8021648:	24000460 	.word	0x24000460
 802164c:	2400cfb4 	.word	0x2400cfb4

08021650 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8021650:	b580      	push	{r7, lr}
 8021652:	b084      	sub	sp, #16
 8021654:	af00      	add	r7, sp, #0
 8021656:	60f8      	str	r0, [r7, #12]
 8021658:	60b9      	str	r1, [r7, #8]
 802165a:	4613      	mov	r3, r2
 802165c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 802165e:	68fb      	ldr	r3, [r7, #12]
 8021660:	2b00      	cmp	r3, #0
 8021662:	d105      	bne.n	8021670 <udp_input_local_match+0x20>
 8021664:	4b27      	ldr	r3, [pc, #156]	; (8021704 <udp_input_local_match+0xb4>)
 8021666:	2287      	movs	r2, #135	; 0x87
 8021668:	4927      	ldr	r1, [pc, #156]	; (8021708 <udp_input_local_match+0xb8>)
 802166a:	4828      	ldr	r0, [pc, #160]	; (802170c <udp_input_local_match+0xbc>)
 802166c:	f005 ff24 	bl	80274b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021670:	68bb      	ldr	r3, [r7, #8]
 8021672:	2b00      	cmp	r3, #0
 8021674:	d105      	bne.n	8021682 <udp_input_local_match+0x32>
 8021676:	4b23      	ldr	r3, [pc, #140]	; (8021704 <udp_input_local_match+0xb4>)
 8021678:	2288      	movs	r2, #136	; 0x88
 802167a:	4925      	ldr	r1, [pc, #148]	; (8021710 <udp_input_local_match+0xc0>)
 802167c:	4823      	ldr	r0, [pc, #140]	; (802170c <udp_input_local_match+0xbc>)
 802167e:	f005 ff1b 	bl	80274b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	7a1b      	ldrb	r3, [r3, #8]
 8021686:	2b00      	cmp	r3, #0
 8021688:	d00b      	beq.n	80216a2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	7a1a      	ldrb	r2, [r3, #8]
 802168e:	4b21      	ldr	r3, [pc, #132]	; (8021714 <udp_input_local_match+0xc4>)
 8021690:	685b      	ldr	r3, [r3, #4]
 8021692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021696:	3301      	adds	r3, #1
 8021698:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802169a:	429a      	cmp	r2, r3
 802169c:	d001      	beq.n	80216a2 <udp_input_local_match+0x52>
    return 0;
 802169e:	2300      	movs	r3, #0
 80216a0:	e02b      	b.n	80216fa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80216a2:	79fb      	ldrb	r3, [r7, #7]
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d018      	beq.n	80216da <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80216a8:	68fb      	ldr	r3, [r7, #12]
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d013      	beq.n	80216d6 <udp_input_local_match+0x86>
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	681b      	ldr	r3, [r3, #0]
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d00f      	beq.n	80216d6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80216b6:	4b17      	ldr	r3, [pc, #92]	; (8021714 <udp_input_local_match+0xc4>)
 80216b8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80216ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80216be:	d00a      	beq.n	80216d6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80216c0:	68fb      	ldr	r3, [r7, #12]
 80216c2:	681a      	ldr	r2, [r3, #0]
 80216c4:	4b13      	ldr	r3, [pc, #76]	; (8021714 <udp_input_local_match+0xc4>)
 80216c6:	695b      	ldr	r3, [r3, #20]
 80216c8:	405a      	eors	r2, r3
 80216ca:	68bb      	ldr	r3, [r7, #8]
 80216cc:	3308      	adds	r3, #8
 80216ce:	681b      	ldr	r3, [r3, #0]
 80216d0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d110      	bne.n	80216f8 <udp_input_local_match+0xa8>
          return 1;
 80216d6:	2301      	movs	r3, #1
 80216d8:	e00f      	b.n	80216fa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80216da:	68fb      	ldr	r3, [r7, #12]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d009      	beq.n	80216f4 <udp_input_local_match+0xa4>
 80216e0:	68fb      	ldr	r3, [r7, #12]
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d005      	beq.n	80216f4 <udp_input_local_match+0xa4>
 80216e8:	68fb      	ldr	r3, [r7, #12]
 80216ea:	681a      	ldr	r2, [r3, #0]
 80216ec:	4b09      	ldr	r3, [pc, #36]	; (8021714 <udp_input_local_match+0xc4>)
 80216ee:	695b      	ldr	r3, [r3, #20]
 80216f0:	429a      	cmp	r2, r3
 80216f2:	d101      	bne.n	80216f8 <udp_input_local_match+0xa8>
        return 1;
 80216f4:	2301      	movs	r3, #1
 80216f6:	e000      	b.n	80216fa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80216f8:	2300      	movs	r3, #0
}
 80216fa:	4618      	mov	r0, r3
 80216fc:	3710      	adds	r7, #16
 80216fe:	46bd      	mov	sp, r7
 8021700:	bd80      	pop	{r7, pc}
 8021702:	bf00      	nop
 8021704:	0802a4ec 	.word	0x0802a4ec
 8021708:	0802a51c 	.word	0x0802a51c
 802170c:	0802a540 	.word	0x0802a540
 8021710:	0802a568 	.word	0x0802a568
 8021714:	24009e38 	.word	0x24009e38

08021718 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8021718:	b590      	push	{r4, r7, lr}
 802171a:	b08d      	sub	sp, #52	; 0x34
 802171c:	af02      	add	r7, sp, #8
 802171e:	6078      	str	r0, [r7, #4]
 8021720:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8021722:	2300      	movs	r3, #0
 8021724:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	2b00      	cmp	r3, #0
 802172a:	d105      	bne.n	8021738 <udp_input+0x20>
 802172c:	4b7c      	ldr	r3, [pc, #496]	; (8021920 <udp_input+0x208>)
 802172e:	22cf      	movs	r2, #207	; 0xcf
 8021730:	497c      	ldr	r1, [pc, #496]	; (8021924 <udp_input+0x20c>)
 8021732:	487d      	ldr	r0, [pc, #500]	; (8021928 <udp_input+0x210>)
 8021734:	f005 fec0 	bl	80274b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8021738:	683b      	ldr	r3, [r7, #0]
 802173a:	2b00      	cmp	r3, #0
 802173c:	d105      	bne.n	802174a <udp_input+0x32>
 802173e:	4b78      	ldr	r3, [pc, #480]	; (8021920 <udp_input+0x208>)
 8021740:	22d0      	movs	r2, #208	; 0xd0
 8021742:	497a      	ldr	r1, [pc, #488]	; (802192c <udp_input+0x214>)
 8021744:	4878      	ldr	r0, [pc, #480]	; (8021928 <udp_input+0x210>)
 8021746:	f005 feb7 	bl	80274b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	895b      	ldrh	r3, [r3, #10]
 802174e:	2b07      	cmp	r3, #7
 8021750:	d803      	bhi.n	802175a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8021752:	6878      	ldr	r0, [r7, #4]
 8021754:	f7fa f9b2 	bl	801babc <pbuf_free>
    goto end;
 8021758:	e0de      	b.n	8021918 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	685b      	ldr	r3, [r3, #4]
 802175e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8021760:	4b73      	ldr	r3, [pc, #460]	; (8021930 <udp_input+0x218>)
 8021762:	695b      	ldr	r3, [r3, #20]
 8021764:	4a72      	ldr	r2, [pc, #456]	; (8021930 <udp_input+0x218>)
 8021766:	6812      	ldr	r2, [r2, #0]
 8021768:	4611      	mov	r1, r2
 802176a:	4618      	mov	r0, r3
 802176c:	f003 fe2e 	bl	80253cc <ip4_addr_isbroadcast_u32>
 8021770:	4603      	mov	r3, r0
 8021772:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8021774:	697b      	ldr	r3, [r7, #20]
 8021776:	881b      	ldrh	r3, [r3, #0]
 8021778:	b29b      	uxth	r3, r3
 802177a:	4618      	mov	r0, r3
 802177c:	f7f8 fce8 	bl	801a150 <lwip_htons>
 8021780:	4603      	mov	r3, r0
 8021782:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8021784:	697b      	ldr	r3, [r7, #20]
 8021786:	885b      	ldrh	r3, [r3, #2]
 8021788:	b29b      	uxth	r3, r3
 802178a:	4618      	mov	r0, r3
 802178c:	f7f8 fce0 	bl	801a150 <lwip_htons>
 8021790:	4603      	mov	r3, r0
 8021792:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8021794:	2300      	movs	r3, #0
 8021796:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8021798:	2300      	movs	r3, #0
 802179a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 802179c:	2300      	movs	r3, #0
 802179e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80217a0:	4b64      	ldr	r3, [pc, #400]	; (8021934 <udp_input+0x21c>)
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	627b      	str	r3, [r7, #36]	; 0x24
 80217a6:	e054      	b.n	8021852 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80217a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217aa:	8a5b      	ldrh	r3, [r3, #18]
 80217ac:	89fa      	ldrh	r2, [r7, #14]
 80217ae:	429a      	cmp	r2, r3
 80217b0:	d14a      	bne.n	8021848 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80217b2:	7cfb      	ldrb	r3, [r7, #19]
 80217b4:	461a      	mov	r2, r3
 80217b6:	6839      	ldr	r1, [r7, #0]
 80217b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80217ba:	f7ff ff49 	bl	8021650 <udp_input_local_match>
 80217be:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80217c0:	2b00      	cmp	r3, #0
 80217c2:	d041      	beq.n	8021848 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80217c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217c6:	7c1b      	ldrb	r3, [r3, #16]
 80217c8:	f003 0304 	and.w	r3, r3, #4
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d11d      	bne.n	802180c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80217d0:	69fb      	ldr	r3, [r7, #28]
 80217d2:	2b00      	cmp	r3, #0
 80217d4:	d102      	bne.n	80217dc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80217d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217d8:	61fb      	str	r3, [r7, #28]
 80217da:	e017      	b.n	802180c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80217dc:	7cfb      	ldrb	r3, [r7, #19]
 80217de:	2b00      	cmp	r3, #0
 80217e0:	d014      	beq.n	802180c <udp_input+0xf4>
 80217e2:	4b53      	ldr	r3, [pc, #332]	; (8021930 <udp_input+0x218>)
 80217e4:	695b      	ldr	r3, [r3, #20]
 80217e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80217ea:	d10f      	bne.n	802180c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80217ec:	69fb      	ldr	r3, [r7, #28]
 80217ee:	681a      	ldr	r2, [r3, #0]
 80217f0:	683b      	ldr	r3, [r7, #0]
 80217f2:	3304      	adds	r3, #4
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	429a      	cmp	r2, r3
 80217f8:	d008      	beq.n	802180c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80217fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217fc:	681a      	ldr	r2, [r3, #0]
 80217fe:	683b      	ldr	r3, [r7, #0]
 8021800:	3304      	adds	r3, #4
 8021802:	681b      	ldr	r3, [r3, #0]
 8021804:	429a      	cmp	r2, r3
 8021806:	d101      	bne.n	802180c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8021808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802180a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 802180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802180e:	8a9b      	ldrh	r3, [r3, #20]
 8021810:	8a3a      	ldrh	r2, [r7, #16]
 8021812:	429a      	cmp	r2, r3
 8021814:	d118      	bne.n	8021848 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021818:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 802181a:	2b00      	cmp	r3, #0
 802181c:	d005      	beq.n	802182a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 802181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021820:	685a      	ldr	r2, [r3, #4]
 8021822:	4b43      	ldr	r3, [pc, #268]	; (8021930 <udp_input+0x218>)
 8021824:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021826:	429a      	cmp	r2, r3
 8021828:	d10e      	bne.n	8021848 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802182a:	6a3b      	ldr	r3, [r7, #32]
 802182c:	2b00      	cmp	r3, #0
 802182e:	d014      	beq.n	802185a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8021830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021832:	68da      	ldr	r2, [r3, #12]
 8021834:	6a3b      	ldr	r3, [r7, #32]
 8021836:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8021838:	4b3e      	ldr	r3, [pc, #248]	; (8021934 <udp_input+0x21c>)
 802183a:	681a      	ldr	r2, [r3, #0]
 802183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802183e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8021840:	4a3c      	ldr	r2, [pc, #240]	; (8021934 <udp_input+0x21c>)
 8021842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021844:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8021846:	e008      	b.n	802185a <udp_input+0x142>
      }
    }

    prev = pcb;
 8021848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802184a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802184e:	68db      	ldr	r3, [r3, #12]
 8021850:	627b      	str	r3, [r7, #36]	; 0x24
 8021852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021854:	2b00      	cmp	r3, #0
 8021856:	d1a7      	bne.n	80217a8 <udp_input+0x90>
 8021858:	e000      	b.n	802185c <udp_input+0x144>
        break;
 802185a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 802185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802185e:	2b00      	cmp	r3, #0
 8021860:	d101      	bne.n	8021866 <udp_input+0x14e>
    pcb = uncon_pcb;
 8021862:	69fb      	ldr	r3, [r7, #28]
 8021864:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8021866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021868:	2b00      	cmp	r3, #0
 802186a:	d002      	beq.n	8021872 <udp_input+0x15a>
    for_us = 1;
 802186c:	2301      	movs	r3, #1
 802186e:	76fb      	strb	r3, [r7, #27]
 8021870:	e00a      	b.n	8021888 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8021872:	683b      	ldr	r3, [r7, #0]
 8021874:	3304      	adds	r3, #4
 8021876:	681a      	ldr	r2, [r3, #0]
 8021878:	4b2d      	ldr	r3, [pc, #180]	; (8021930 <udp_input+0x218>)
 802187a:	695b      	ldr	r3, [r3, #20]
 802187c:	429a      	cmp	r2, r3
 802187e:	bf0c      	ite	eq
 8021880:	2301      	moveq	r3, #1
 8021882:	2300      	movne	r3, #0
 8021884:	b2db      	uxtb	r3, r3
 8021886:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8021888:	7efb      	ldrb	r3, [r7, #27]
 802188a:	2b00      	cmp	r3, #0
 802188c:	d041      	beq.n	8021912 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 802188e:	2108      	movs	r1, #8
 8021890:	6878      	ldr	r0, [r7, #4]
 8021892:	f7fa f88d 	bl	801b9b0 <pbuf_remove_header>
 8021896:	4603      	mov	r3, r0
 8021898:	2b00      	cmp	r3, #0
 802189a:	d00a      	beq.n	80218b2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 802189c:	4b20      	ldr	r3, [pc, #128]	; (8021920 <udp_input+0x208>)
 802189e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80218a2:	4925      	ldr	r1, [pc, #148]	; (8021938 <udp_input+0x220>)
 80218a4:	4820      	ldr	r0, [pc, #128]	; (8021928 <udp_input+0x210>)
 80218a6:	f005 fe07 	bl	80274b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80218aa:	6878      	ldr	r0, [r7, #4]
 80218ac:	f7fa f906 	bl	801babc <pbuf_free>
      goto end;
 80218b0:	e032      	b.n	8021918 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80218b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	d012      	beq.n	80218de <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80218b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ba:	699b      	ldr	r3, [r3, #24]
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d00a      	beq.n	80218d6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80218c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c2:	699c      	ldr	r4, [r3, #24]
 80218c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c6:	69d8      	ldr	r0, [r3, #28]
 80218c8:	8a3b      	ldrh	r3, [r7, #16]
 80218ca:	9300      	str	r3, [sp, #0]
 80218cc:	4b1b      	ldr	r3, [pc, #108]	; (802193c <udp_input+0x224>)
 80218ce:	687a      	ldr	r2, [r7, #4]
 80218d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80218d2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80218d4:	e021      	b.n	802191a <udp_input+0x202>
        pbuf_free(p);
 80218d6:	6878      	ldr	r0, [r7, #4]
 80218d8:	f7fa f8f0 	bl	801babc <pbuf_free>
        goto end;
 80218dc:	e01c      	b.n	8021918 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80218de:	7cfb      	ldrb	r3, [r7, #19]
 80218e0:	2b00      	cmp	r3, #0
 80218e2:	d112      	bne.n	802190a <udp_input+0x1f2>
 80218e4:	4b12      	ldr	r3, [pc, #72]	; (8021930 <udp_input+0x218>)
 80218e6:	695b      	ldr	r3, [r3, #20]
 80218e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80218ec:	2be0      	cmp	r3, #224	; 0xe0
 80218ee:	d00c      	beq.n	802190a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80218f0:	4b0f      	ldr	r3, [pc, #60]	; (8021930 <udp_input+0x218>)
 80218f2:	899b      	ldrh	r3, [r3, #12]
 80218f4:	3308      	adds	r3, #8
 80218f6:	b29b      	uxth	r3, r3
 80218f8:	b21b      	sxth	r3, r3
 80218fa:	4619      	mov	r1, r3
 80218fc:	6878      	ldr	r0, [r7, #4]
 80218fe:	f7fa f8ca 	bl	801ba96 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8021902:	2103      	movs	r1, #3
 8021904:	6878      	ldr	r0, [r7, #4]
 8021906:	f003 fa19 	bl	8024d3c <icmp_dest_unreach>
      pbuf_free(p);
 802190a:	6878      	ldr	r0, [r7, #4]
 802190c:	f7fa f8d6 	bl	801babc <pbuf_free>
  return;
 8021910:	e003      	b.n	802191a <udp_input+0x202>
    pbuf_free(p);
 8021912:	6878      	ldr	r0, [r7, #4]
 8021914:	f7fa f8d2 	bl	801babc <pbuf_free>
  return;
 8021918:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802191a:	372c      	adds	r7, #44	; 0x2c
 802191c:	46bd      	mov	sp, r7
 802191e:	bd90      	pop	{r4, r7, pc}
 8021920:	0802a4ec 	.word	0x0802a4ec
 8021924:	0802a590 	.word	0x0802a590
 8021928:	0802a540 	.word	0x0802a540
 802192c:	0802a5a8 	.word	0x0802a5a8
 8021930:	24009e38 	.word	0x24009e38
 8021934:	2400cfb4 	.word	0x2400cfb4
 8021938:	0802a5c4 	.word	0x0802a5c4
 802193c:	24009e48 	.word	0x24009e48

08021940 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8021940:	b580      	push	{r7, lr}
 8021942:	b088      	sub	sp, #32
 8021944:	af02      	add	r7, sp, #8
 8021946:	60f8      	str	r0, [r7, #12]
 8021948:	60b9      	str	r1, [r7, #8]
 802194a:	607a      	str	r2, [r7, #4]
 802194c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802194e:	68fb      	ldr	r3, [r7, #12]
 8021950:	2b00      	cmp	r3, #0
 8021952:	d109      	bne.n	8021968 <udp_sendto_if+0x28>
 8021954:	4b2e      	ldr	r3, [pc, #184]	; (8021a10 <udp_sendto_if+0xd0>)
 8021956:	f44f 7220 	mov.w	r2, #640	; 0x280
 802195a:	492e      	ldr	r1, [pc, #184]	; (8021a14 <udp_sendto_if+0xd4>)
 802195c:	482e      	ldr	r0, [pc, #184]	; (8021a18 <udp_sendto_if+0xd8>)
 802195e:	f005 fdab 	bl	80274b8 <iprintf>
 8021962:	f06f 030f 	mvn.w	r3, #15
 8021966:	e04f      	b.n	8021a08 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8021968:	68bb      	ldr	r3, [r7, #8]
 802196a:	2b00      	cmp	r3, #0
 802196c:	d109      	bne.n	8021982 <udp_sendto_if+0x42>
 802196e:	4b28      	ldr	r3, [pc, #160]	; (8021a10 <udp_sendto_if+0xd0>)
 8021970:	f240 2281 	movw	r2, #641	; 0x281
 8021974:	4929      	ldr	r1, [pc, #164]	; (8021a1c <udp_sendto_if+0xdc>)
 8021976:	4828      	ldr	r0, [pc, #160]	; (8021a18 <udp_sendto_if+0xd8>)
 8021978:	f005 fd9e 	bl	80274b8 <iprintf>
 802197c:	f06f 030f 	mvn.w	r3, #15
 8021980:	e042      	b.n	8021a08 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021982:	687b      	ldr	r3, [r7, #4]
 8021984:	2b00      	cmp	r3, #0
 8021986:	d109      	bne.n	802199c <udp_sendto_if+0x5c>
 8021988:	4b21      	ldr	r3, [pc, #132]	; (8021a10 <udp_sendto_if+0xd0>)
 802198a:	f240 2282 	movw	r2, #642	; 0x282
 802198e:	4924      	ldr	r1, [pc, #144]	; (8021a20 <udp_sendto_if+0xe0>)
 8021990:	4821      	ldr	r0, [pc, #132]	; (8021a18 <udp_sendto_if+0xd8>)
 8021992:	f005 fd91 	bl	80274b8 <iprintf>
 8021996:	f06f 030f 	mvn.w	r3, #15
 802199a:	e035      	b.n	8021a08 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 802199c:	6a3b      	ldr	r3, [r7, #32]
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d109      	bne.n	80219b6 <udp_sendto_if+0x76>
 80219a2:	4b1b      	ldr	r3, [pc, #108]	; (8021a10 <udp_sendto_if+0xd0>)
 80219a4:	f240 2283 	movw	r2, #643	; 0x283
 80219a8:	491e      	ldr	r1, [pc, #120]	; (8021a24 <udp_sendto_if+0xe4>)
 80219aa:	481b      	ldr	r0, [pc, #108]	; (8021a18 <udp_sendto_if+0xd8>)
 80219ac:	f005 fd84 	bl	80274b8 <iprintf>
 80219b0:	f06f 030f 	mvn.w	r3, #15
 80219b4:	e028      	b.n	8021a08 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80219b6:	68fb      	ldr	r3, [r7, #12]
 80219b8:	2b00      	cmp	r3, #0
 80219ba:	d009      	beq.n	80219d0 <udp_sendto_if+0x90>
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	681b      	ldr	r3, [r3, #0]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d005      	beq.n	80219d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80219c4:	68fb      	ldr	r3, [r7, #12]
 80219c6:	681b      	ldr	r3, [r3, #0]
 80219c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80219cc:	2be0      	cmp	r3, #224	; 0xe0
 80219ce:	d103      	bne.n	80219d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80219d0:	6a3b      	ldr	r3, [r7, #32]
 80219d2:	3304      	adds	r3, #4
 80219d4:	617b      	str	r3, [r7, #20]
 80219d6:	e00b      	b.n	80219f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80219d8:	68fb      	ldr	r3, [r7, #12]
 80219da:	681a      	ldr	r2, [r3, #0]
 80219dc:	6a3b      	ldr	r3, [r7, #32]
 80219de:	3304      	adds	r3, #4
 80219e0:	681b      	ldr	r3, [r3, #0]
 80219e2:	429a      	cmp	r2, r3
 80219e4:	d002      	beq.n	80219ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80219e6:	f06f 0303 	mvn.w	r3, #3
 80219ea:	e00d      	b.n	8021a08 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80219ec:	68fb      	ldr	r3, [r7, #12]
 80219ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80219f0:	887a      	ldrh	r2, [r7, #2]
 80219f2:	697b      	ldr	r3, [r7, #20]
 80219f4:	9301      	str	r3, [sp, #4]
 80219f6:	6a3b      	ldr	r3, [r7, #32]
 80219f8:	9300      	str	r3, [sp, #0]
 80219fa:	4613      	mov	r3, r2
 80219fc:	687a      	ldr	r2, [r7, #4]
 80219fe:	68b9      	ldr	r1, [r7, #8]
 8021a00:	68f8      	ldr	r0, [r7, #12]
 8021a02:	f000 f811 	bl	8021a28 <udp_sendto_if_src>
 8021a06:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021a08:	4618      	mov	r0, r3
 8021a0a:	3718      	adds	r7, #24
 8021a0c:	46bd      	mov	sp, r7
 8021a0e:	bd80      	pop	{r7, pc}
 8021a10:	0802a4ec 	.word	0x0802a4ec
 8021a14:	0802a660 	.word	0x0802a660
 8021a18:	0802a540 	.word	0x0802a540
 8021a1c:	0802a67c 	.word	0x0802a67c
 8021a20:	0802a698 	.word	0x0802a698
 8021a24:	0802a6b8 	.word	0x0802a6b8

08021a28 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8021a28:	b580      	push	{r7, lr}
 8021a2a:	b08c      	sub	sp, #48	; 0x30
 8021a2c:	af04      	add	r7, sp, #16
 8021a2e:	60f8      	str	r0, [r7, #12]
 8021a30:	60b9      	str	r1, [r7, #8]
 8021a32:	607a      	str	r2, [r7, #4]
 8021a34:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8021a36:	68fb      	ldr	r3, [r7, #12]
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d109      	bne.n	8021a50 <udp_sendto_if_src+0x28>
 8021a3c:	4b65      	ldr	r3, [pc, #404]	; (8021bd4 <udp_sendto_if_src+0x1ac>)
 8021a3e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021a42:	4965      	ldr	r1, [pc, #404]	; (8021bd8 <udp_sendto_if_src+0x1b0>)
 8021a44:	4865      	ldr	r0, [pc, #404]	; (8021bdc <udp_sendto_if_src+0x1b4>)
 8021a46:	f005 fd37 	bl	80274b8 <iprintf>
 8021a4a:	f06f 030f 	mvn.w	r3, #15
 8021a4e:	e0bc      	b.n	8021bca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021a50:	68bb      	ldr	r3, [r7, #8]
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	d109      	bne.n	8021a6a <udp_sendto_if_src+0x42>
 8021a56:	4b5f      	ldr	r3, [pc, #380]	; (8021bd4 <udp_sendto_if_src+0x1ac>)
 8021a58:	f240 22d2 	movw	r2, #722	; 0x2d2
 8021a5c:	4960      	ldr	r1, [pc, #384]	; (8021be0 <udp_sendto_if_src+0x1b8>)
 8021a5e:	485f      	ldr	r0, [pc, #380]	; (8021bdc <udp_sendto_if_src+0x1b4>)
 8021a60:	f005 fd2a 	bl	80274b8 <iprintf>
 8021a64:	f06f 030f 	mvn.w	r3, #15
 8021a68:	e0af      	b.n	8021bca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d109      	bne.n	8021a84 <udp_sendto_if_src+0x5c>
 8021a70:	4b58      	ldr	r3, [pc, #352]	; (8021bd4 <udp_sendto_if_src+0x1ac>)
 8021a72:	f240 22d3 	movw	r2, #723	; 0x2d3
 8021a76:	495b      	ldr	r1, [pc, #364]	; (8021be4 <udp_sendto_if_src+0x1bc>)
 8021a78:	4858      	ldr	r0, [pc, #352]	; (8021bdc <udp_sendto_if_src+0x1b4>)
 8021a7a:	f005 fd1d 	bl	80274b8 <iprintf>
 8021a7e:	f06f 030f 	mvn.w	r3, #15
 8021a82:	e0a2      	b.n	8021bca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	d109      	bne.n	8021a9e <udp_sendto_if_src+0x76>
 8021a8a:	4b52      	ldr	r3, [pc, #328]	; (8021bd4 <udp_sendto_if_src+0x1ac>)
 8021a8c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8021a90:	4955      	ldr	r1, [pc, #340]	; (8021be8 <udp_sendto_if_src+0x1c0>)
 8021a92:	4852      	ldr	r0, [pc, #328]	; (8021bdc <udp_sendto_if_src+0x1b4>)
 8021a94:	f005 fd10 	bl	80274b8 <iprintf>
 8021a98:	f06f 030f 	mvn.w	r3, #15
 8021a9c:	e095      	b.n	8021bca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d109      	bne.n	8021ab8 <udp_sendto_if_src+0x90>
 8021aa4:	4b4b      	ldr	r3, [pc, #300]	; (8021bd4 <udp_sendto_if_src+0x1ac>)
 8021aa6:	f240 22d5 	movw	r2, #725	; 0x2d5
 8021aaa:	4950      	ldr	r1, [pc, #320]	; (8021bec <udp_sendto_if_src+0x1c4>)
 8021aac:	484b      	ldr	r0, [pc, #300]	; (8021bdc <udp_sendto_if_src+0x1b4>)
 8021aae:	f005 fd03 	bl	80274b8 <iprintf>
 8021ab2:	f06f 030f 	mvn.w	r3, #15
 8021ab6:	e088      	b.n	8021bca <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8021ab8:	68fb      	ldr	r3, [r7, #12]
 8021aba:	8a5b      	ldrh	r3, [r3, #18]
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	d10f      	bne.n	8021ae0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021ac0:	68f9      	ldr	r1, [r7, #12]
 8021ac2:	68fb      	ldr	r3, [r7, #12]
 8021ac4:	8a5b      	ldrh	r3, [r3, #18]
 8021ac6:	461a      	mov	r2, r3
 8021ac8:	68f8      	ldr	r0, [r7, #12]
 8021aca:	f000 f893 	bl	8021bf4 <udp_bind>
 8021ace:	4603      	mov	r3, r0
 8021ad0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8021ad2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	d002      	beq.n	8021ae0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8021ada:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021ade:	e074      	b.n	8021bca <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8021ae0:	68bb      	ldr	r3, [r7, #8]
 8021ae2:	891b      	ldrh	r3, [r3, #8]
 8021ae4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8021ae8:	4293      	cmp	r3, r2
 8021aea:	d902      	bls.n	8021af2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8021aec:	f04f 33ff 	mov.w	r3, #4294967295
 8021af0:	e06b      	b.n	8021bca <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8021af2:	2108      	movs	r1, #8
 8021af4:	68b8      	ldr	r0, [r7, #8]
 8021af6:	f7f9 ff4b 	bl	801b990 <pbuf_add_header>
 8021afa:	4603      	mov	r3, r0
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d015      	beq.n	8021b2c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8021b00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021b04:	2108      	movs	r1, #8
 8021b06:	2022      	movs	r0, #34	; 0x22
 8021b08:	f7f9 fcf4 	bl	801b4f4 <pbuf_alloc>
 8021b0c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021b0e:	69fb      	ldr	r3, [r7, #28]
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d102      	bne.n	8021b1a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021b14:	f04f 33ff 	mov.w	r3, #4294967295
 8021b18:	e057      	b.n	8021bca <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8021b1a:	68bb      	ldr	r3, [r7, #8]
 8021b1c:	891b      	ldrh	r3, [r3, #8]
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d006      	beq.n	8021b30 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021b22:	68b9      	ldr	r1, [r7, #8]
 8021b24:	69f8      	ldr	r0, [r7, #28]
 8021b26:	f7fa f8ed 	bl	801bd04 <pbuf_chain>
 8021b2a:	e001      	b.n	8021b30 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021b2c:	68bb      	ldr	r3, [r7, #8]
 8021b2e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021b30:	69fb      	ldr	r3, [r7, #28]
 8021b32:	895b      	ldrh	r3, [r3, #10]
 8021b34:	2b07      	cmp	r3, #7
 8021b36:	d806      	bhi.n	8021b46 <udp_sendto_if_src+0x11e>
 8021b38:	4b26      	ldr	r3, [pc, #152]	; (8021bd4 <udp_sendto_if_src+0x1ac>)
 8021b3a:	f240 320d 	movw	r2, #781	; 0x30d
 8021b3e:	492c      	ldr	r1, [pc, #176]	; (8021bf0 <udp_sendto_if_src+0x1c8>)
 8021b40:	4826      	ldr	r0, [pc, #152]	; (8021bdc <udp_sendto_if_src+0x1b4>)
 8021b42:	f005 fcb9 	bl	80274b8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8021b46:	69fb      	ldr	r3, [r7, #28]
 8021b48:	685b      	ldr	r3, [r3, #4]
 8021b4a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021b4c:	68fb      	ldr	r3, [r7, #12]
 8021b4e:	8a5b      	ldrh	r3, [r3, #18]
 8021b50:	4618      	mov	r0, r3
 8021b52:	f7f8 fafd 	bl	801a150 <lwip_htons>
 8021b56:	4603      	mov	r3, r0
 8021b58:	461a      	mov	r2, r3
 8021b5a:	697b      	ldr	r3, [r7, #20]
 8021b5c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021b5e:	887b      	ldrh	r3, [r7, #2]
 8021b60:	4618      	mov	r0, r3
 8021b62:	f7f8 faf5 	bl	801a150 <lwip_htons>
 8021b66:	4603      	mov	r3, r0
 8021b68:	461a      	mov	r2, r3
 8021b6a:	697b      	ldr	r3, [r7, #20]
 8021b6c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021b6e:	697b      	ldr	r3, [r7, #20]
 8021b70:	2200      	movs	r2, #0
 8021b72:	719a      	strb	r2, [r3, #6]
 8021b74:	2200      	movs	r2, #0
 8021b76:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8021b78:	69fb      	ldr	r3, [r7, #28]
 8021b7a:	891b      	ldrh	r3, [r3, #8]
 8021b7c:	4618      	mov	r0, r3
 8021b7e:	f7f8 fae7 	bl	801a150 <lwip_htons>
 8021b82:	4603      	mov	r3, r0
 8021b84:	461a      	mov	r2, r3
 8021b86:	697b      	ldr	r3, [r7, #20]
 8021b88:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8021b8a:	2311      	movs	r3, #17
 8021b8c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8021b8e:	68fb      	ldr	r3, [r7, #12]
 8021b90:	7adb      	ldrb	r3, [r3, #11]
 8021b92:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021b94:	68fb      	ldr	r3, [r7, #12]
 8021b96:	7a9b      	ldrb	r3, [r3, #10]
 8021b98:	7cb9      	ldrb	r1, [r7, #18]
 8021b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021b9c:	9202      	str	r2, [sp, #8]
 8021b9e:	7cfa      	ldrb	r2, [r7, #19]
 8021ba0:	9201      	str	r2, [sp, #4]
 8021ba2:	9300      	str	r3, [sp, #0]
 8021ba4:	460b      	mov	r3, r1
 8021ba6:	687a      	ldr	r2, [r7, #4]
 8021ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021baa:	69f8      	ldr	r0, [r7, #28]
 8021bac:	f003 fb60 	bl	8025270 <ip4_output_if_src>
 8021bb0:	4603      	mov	r3, r0
 8021bb2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8021bb4:	69fa      	ldr	r2, [r7, #28]
 8021bb6:	68bb      	ldr	r3, [r7, #8]
 8021bb8:	429a      	cmp	r2, r3
 8021bba:	d004      	beq.n	8021bc6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8021bbc:	69f8      	ldr	r0, [r7, #28]
 8021bbe:	f7f9 ff7d 	bl	801babc <pbuf_free>
    q = NULL;
 8021bc2:	2300      	movs	r3, #0
 8021bc4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8021bc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8021bca:	4618      	mov	r0, r3
 8021bcc:	3720      	adds	r7, #32
 8021bce:	46bd      	mov	sp, r7
 8021bd0:	bd80      	pop	{r7, pc}
 8021bd2:	bf00      	nop
 8021bd4:	0802a4ec 	.word	0x0802a4ec
 8021bd8:	0802a6d8 	.word	0x0802a6d8
 8021bdc:	0802a540 	.word	0x0802a540
 8021be0:	0802a6f8 	.word	0x0802a6f8
 8021be4:	0802a718 	.word	0x0802a718
 8021be8:	0802a73c 	.word	0x0802a73c
 8021bec:	0802a760 	.word	0x0802a760
 8021bf0:	0802a784 	.word	0x0802a784

08021bf4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021bf4:	b580      	push	{r7, lr}
 8021bf6:	b086      	sub	sp, #24
 8021bf8:	af00      	add	r7, sp, #0
 8021bfa:	60f8      	str	r0, [r7, #12]
 8021bfc:	60b9      	str	r1, [r7, #8]
 8021bfe:	4613      	mov	r3, r2
 8021c00:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021c02:	68bb      	ldr	r3, [r7, #8]
 8021c04:	2b00      	cmp	r3, #0
 8021c06:	d101      	bne.n	8021c0c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8021c08:	4b39      	ldr	r3, [pc, #228]	; (8021cf0 <udp_bind+0xfc>)
 8021c0a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021c0c:	68fb      	ldr	r3, [r7, #12]
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d109      	bne.n	8021c26 <udp_bind+0x32>
 8021c12:	4b38      	ldr	r3, [pc, #224]	; (8021cf4 <udp_bind+0x100>)
 8021c14:	f240 32b7 	movw	r2, #951	; 0x3b7
 8021c18:	4937      	ldr	r1, [pc, #220]	; (8021cf8 <udp_bind+0x104>)
 8021c1a:	4838      	ldr	r0, [pc, #224]	; (8021cfc <udp_bind+0x108>)
 8021c1c:	f005 fc4c 	bl	80274b8 <iprintf>
 8021c20:	f06f 030f 	mvn.w	r3, #15
 8021c24:	e060      	b.n	8021ce8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8021c26:	2300      	movs	r3, #0
 8021c28:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021c2a:	4b35      	ldr	r3, [pc, #212]	; (8021d00 <udp_bind+0x10c>)
 8021c2c:	681b      	ldr	r3, [r3, #0]
 8021c2e:	617b      	str	r3, [r7, #20]
 8021c30:	e009      	b.n	8021c46 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021c32:	68fa      	ldr	r2, [r7, #12]
 8021c34:	697b      	ldr	r3, [r7, #20]
 8021c36:	429a      	cmp	r2, r3
 8021c38:	d102      	bne.n	8021c40 <udp_bind+0x4c>
      rebind = 1;
 8021c3a:	2301      	movs	r3, #1
 8021c3c:	74fb      	strb	r3, [r7, #19]
      break;
 8021c3e:	e005      	b.n	8021c4c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021c40:	697b      	ldr	r3, [r7, #20]
 8021c42:	68db      	ldr	r3, [r3, #12]
 8021c44:	617b      	str	r3, [r7, #20]
 8021c46:	697b      	ldr	r3, [r7, #20]
 8021c48:	2b00      	cmp	r3, #0
 8021c4a:	d1f2      	bne.n	8021c32 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021c4c:	88fb      	ldrh	r3, [r7, #6]
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d109      	bne.n	8021c66 <udp_bind+0x72>
    port = udp_new_port();
 8021c52:	f7ff fcc5 	bl	80215e0 <udp_new_port>
 8021c56:	4603      	mov	r3, r0
 8021c58:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8021c5a:	88fb      	ldrh	r3, [r7, #6]
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d12c      	bne.n	8021cba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8021c60:	f06f 0307 	mvn.w	r3, #7
 8021c64:	e040      	b.n	8021ce8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021c66:	4b26      	ldr	r3, [pc, #152]	; (8021d00 <udp_bind+0x10c>)
 8021c68:	681b      	ldr	r3, [r3, #0]
 8021c6a:	617b      	str	r3, [r7, #20]
 8021c6c:	e022      	b.n	8021cb4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8021c6e:	68fa      	ldr	r2, [r7, #12]
 8021c70:	697b      	ldr	r3, [r7, #20]
 8021c72:	429a      	cmp	r2, r3
 8021c74:	d01b      	beq.n	8021cae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8021c76:	697b      	ldr	r3, [r7, #20]
 8021c78:	8a5b      	ldrh	r3, [r3, #18]
 8021c7a:	88fa      	ldrh	r2, [r7, #6]
 8021c7c:	429a      	cmp	r2, r3
 8021c7e:	d116      	bne.n	8021cae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021c80:	697b      	ldr	r3, [r7, #20]
 8021c82:	681a      	ldr	r2, [r3, #0]
 8021c84:	68bb      	ldr	r3, [r7, #8]
 8021c86:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8021c88:	429a      	cmp	r2, r3
 8021c8a:	d00d      	beq.n	8021ca8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021c8c:	68bb      	ldr	r3, [r7, #8]
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d00a      	beq.n	8021ca8 <udp_bind+0xb4>
 8021c92:	68bb      	ldr	r3, [r7, #8]
 8021c94:	681b      	ldr	r3, [r3, #0]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d006      	beq.n	8021ca8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021c9a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d003      	beq.n	8021ca8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021ca0:	697b      	ldr	r3, [r7, #20]
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d102      	bne.n	8021cae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8021ca8:	f06f 0307 	mvn.w	r3, #7
 8021cac:	e01c      	b.n	8021ce8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021cae:	697b      	ldr	r3, [r7, #20]
 8021cb0:	68db      	ldr	r3, [r3, #12]
 8021cb2:	617b      	str	r3, [r7, #20]
 8021cb4:	697b      	ldr	r3, [r7, #20]
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d1d9      	bne.n	8021c6e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8021cba:	68bb      	ldr	r3, [r7, #8]
 8021cbc:	2b00      	cmp	r3, #0
 8021cbe:	d002      	beq.n	8021cc6 <udp_bind+0xd2>
 8021cc0:	68bb      	ldr	r3, [r7, #8]
 8021cc2:	681b      	ldr	r3, [r3, #0]
 8021cc4:	e000      	b.n	8021cc8 <udp_bind+0xd4>
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	68fa      	ldr	r2, [r7, #12]
 8021cca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8021ccc:	68fb      	ldr	r3, [r7, #12]
 8021cce:	88fa      	ldrh	r2, [r7, #6]
 8021cd0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8021cd2:	7cfb      	ldrb	r3, [r7, #19]
 8021cd4:	2b00      	cmp	r3, #0
 8021cd6:	d106      	bne.n	8021ce6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8021cd8:	4b09      	ldr	r3, [pc, #36]	; (8021d00 <udp_bind+0x10c>)
 8021cda:	681a      	ldr	r2, [r3, #0]
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8021ce0:	4a07      	ldr	r2, [pc, #28]	; (8021d00 <udp_bind+0x10c>)
 8021ce2:	68fb      	ldr	r3, [r7, #12]
 8021ce4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8021ce6:	2300      	movs	r3, #0
}
 8021ce8:	4618      	mov	r0, r3
 8021cea:	3718      	adds	r7, #24
 8021cec:	46bd      	mov	sp, r7
 8021cee:	bd80      	pop	{r7, pc}
 8021cf0:	0802bb4c 	.word	0x0802bb4c
 8021cf4:	0802a4ec 	.word	0x0802a4ec
 8021cf8:	0802a7b4 	.word	0x0802a7b4
 8021cfc:	0802a540 	.word	0x0802a540
 8021d00:	2400cfb4 	.word	0x2400cfb4

08021d04 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8021d04:	b580      	push	{r7, lr}
 8021d06:	b086      	sub	sp, #24
 8021d08:	af00      	add	r7, sp, #0
 8021d0a:	60f8      	str	r0, [r7, #12]
 8021d0c:	60b9      	str	r1, [r7, #8]
 8021d0e:	4613      	mov	r3, r2
 8021d10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8021d12:	68fb      	ldr	r3, [r7, #12]
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d109      	bne.n	8021d2c <udp_connect+0x28>
 8021d18:	4b2c      	ldr	r3, [pc, #176]	; (8021dcc <udp_connect+0xc8>)
 8021d1a:	f240 4235 	movw	r2, #1077	; 0x435
 8021d1e:	492c      	ldr	r1, [pc, #176]	; (8021dd0 <udp_connect+0xcc>)
 8021d20:	482c      	ldr	r0, [pc, #176]	; (8021dd4 <udp_connect+0xd0>)
 8021d22:	f005 fbc9 	bl	80274b8 <iprintf>
 8021d26:	f06f 030f 	mvn.w	r3, #15
 8021d2a:	e04b      	b.n	8021dc4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8021d2c:	68bb      	ldr	r3, [r7, #8]
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d109      	bne.n	8021d46 <udp_connect+0x42>
 8021d32:	4b26      	ldr	r3, [pc, #152]	; (8021dcc <udp_connect+0xc8>)
 8021d34:	f240 4236 	movw	r2, #1078	; 0x436
 8021d38:	4927      	ldr	r1, [pc, #156]	; (8021dd8 <udp_connect+0xd4>)
 8021d3a:	4826      	ldr	r0, [pc, #152]	; (8021dd4 <udp_connect+0xd0>)
 8021d3c:	f005 fbbc 	bl	80274b8 <iprintf>
 8021d40:	f06f 030f 	mvn.w	r3, #15
 8021d44:	e03e      	b.n	8021dc4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8021d46:	68fb      	ldr	r3, [r7, #12]
 8021d48:	8a5b      	ldrh	r3, [r3, #18]
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d10f      	bne.n	8021d6e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021d4e:	68f9      	ldr	r1, [r7, #12]
 8021d50:	68fb      	ldr	r3, [r7, #12]
 8021d52:	8a5b      	ldrh	r3, [r3, #18]
 8021d54:	461a      	mov	r2, r3
 8021d56:	68f8      	ldr	r0, [r7, #12]
 8021d58:	f7ff ff4c 	bl	8021bf4 <udp_bind>
 8021d5c:	4603      	mov	r3, r0
 8021d5e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8021d60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d002      	beq.n	8021d6e <udp_connect+0x6a>
      return err;
 8021d68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021d6c:	e02a      	b.n	8021dc4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8021d6e:	68bb      	ldr	r3, [r7, #8]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d002      	beq.n	8021d7a <udp_connect+0x76>
 8021d74:	68bb      	ldr	r3, [r7, #8]
 8021d76:	681b      	ldr	r3, [r3, #0]
 8021d78:	e000      	b.n	8021d7c <udp_connect+0x78>
 8021d7a:	2300      	movs	r3, #0
 8021d7c:	68fa      	ldr	r2, [r7, #12]
 8021d7e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8021d80:	68fb      	ldr	r3, [r7, #12]
 8021d82:	88fa      	ldrh	r2, [r7, #6]
 8021d84:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8021d86:	68fb      	ldr	r3, [r7, #12]
 8021d88:	7c1b      	ldrb	r3, [r3, #16]
 8021d8a:	f043 0304 	orr.w	r3, r3, #4
 8021d8e:	b2da      	uxtb	r2, r3
 8021d90:	68fb      	ldr	r3, [r7, #12]
 8021d92:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021d94:	4b11      	ldr	r3, [pc, #68]	; (8021ddc <udp_connect+0xd8>)
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	617b      	str	r3, [r7, #20]
 8021d9a:	e008      	b.n	8021dae <udp_connect+0xaa>
    if (pcb == ipcb) {
 8021d9c:	68fa      	ldr	r2, [r7, #12]
 8021d9e:	697b      	ldr	r3, [r7, #20]
 8021da0:	429a      	cmp	r2, r3
 8021da2:	d101      	bne.n	8021da8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8021da4:	2300      	movs	r3, #0
 8021da6:	e00d      	b.n	8021dc4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021da8:	697b      	ldr	r3, [r7, #20]
 8021daa:	68db      	ldr	r3, [r3, #12]
 8021dac:	617b      	str	r3, [r7, #20]
 8021dae:	697b      	ldr	r3, [r7, #20]
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d1f3      	bne.n	8021d9c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8021db4:	4b09      	ldr	r3, [pc, #36]	; (8021ddc <udp_connect+0xd8>)
 8021db6:	681a      	ldr	r2, [r3, #0]
 8021db8:	68fb      	ldr	r3, [r7, #12]
 8021dba:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8021dbc:	4a07      	ldr	r2, [pc, #28]	; (8021ddc <udp_connect+0xd8>)
 8021dbe:	68fb      	ldr	r3, [r7, #12]
 8021dc0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8021dc2:	2300      	movs	r3, #0
}
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	3718      	adds	r7, #24
 8021dc8:	46bd      	mov	sp, r7
 8021dca:	bd80      	pop	{r7, pc}
 8021dcc:	0802a4ec 	.word	0x0802a4ec
 8021dd0:	0802a7cc 	.word	0x0802a7cc
 8021dd4:	0802a540 	.word	0x0802a540
 8021dd8:	0802a7e8 	.word	0x0802a7e8
 8021ddc:	2400cfb4 	.word	0x2400cfb4

08021de0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8021de0:	b580      	push	{r7, lr}
 8021de2:	b084      	sub	sp, #16
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	60f8      	str	r0, [r7, #12]
 8021de8:	60b9      	str	r1, [r7, #8]
 8021dea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021dec:	68fb      	ldr	r3, [r7, #12]
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d107      	bne.n	8021e02 <udp_recv+0x22>
 8021df2:	4b08      	ldr	r3, [pc, #32]	; (8021e14 <udp_recv+0x34>)
 8021df4:	f240 428a 	movw	r2, #1162	; 0x48a
 8021df8:	4907      	ldr	r1, [pc, #28]	; (8021e18 <udp_recv+0x38>)
 8021dfa:	4808      	ldr	r0, [pc, #32]	; (8021e1c <udp_recv+0x3c>)
 8021dfc:	f005 fb5c 	bl	80274b8 <iprintf>
 8021e00:	e005      	b.n	8021e0e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8021e02:	68fb      	ldr	r3, [r7, #12]
 8021e04:	68ba      	ldr	r2, [r7, #8]
 8021e06:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8021e08:	68fb      	ldr	r3, [r7, #12]
 8021e0a:	687a      	ldr	r2, [r7, #4]
 8021e0c:	61da      	str	r2, [r3, #28]
}
 8021e0e:	3710      	adds	r7, #16
 8021e10:	46bd      	mov	sp, r7
 8021e12:	bd80      	pop	{r7, pc}
 8021e14:	0802a4ec 	.word	0x0802a4ec
 8021e18:	0802a820 	.word	0x0802a820
 8021e1c:	0802a540 	.word	0x0802a540

08021e20 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8021e20:	b580      	push	{r7, lr}
 8021e22:	b084      	sub	sp, #16
 8021e24:	af00      	add	r7, sp, #0
 8021e26:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d107      	bne.n	8021e3e <udp_remove+0x1e>
 8021e2e:	4b19      	ldr	r3, [pc, #100]	; (8021e94 <udp_remove+0x74>)
 8021e30:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8021e34:	4918      	ldr	r1, [pc, #96]	; (8021e98 <udp_remove+0x78>)
 8021e36:	4819      	ldr	r0, [pc, #100]	; (8021e9c <udp_remove+0x7c>)
 8021e38:	f005 fb3e 	bl	80274b8 <iprintf>
 8021e3c:	e026      	b.n	8021e8c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021e3e:	4b18      	ldr	r3, [pc, #96]	; (8021ea0 <udp_remove+0x80>)
 8021e40:	681b      	ldr	r3, [r3, #0]
 8021e42:	687a      	ldr	r2, [r7, #4]
 8021e44:	429a      	cmp	r2, r3
 8021e46:	d105      	bne.n	8021e54 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8021e48:	4b15      	ldr	r3, [pc, #84]	; (8021ea0 <udp_remove+0x80>)
 8021e4a:	681b      	ldr	r3, [r3, #0]
 8021e4c:	68db      	ldr	r3, [r3, #12]
 8021e4e:	4a14      	ldr	r2, [pc, #80]	; (8021ea0 <udp_remove+0x80>)
 8021e50:	6013      	str	r3, [r2, #0]
 8021e52:	e017      	b.n	8021e84 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021e54:	4b12      	ldr	r3, [pc, #72]	; (8021ea0 <udp_remove+0x80>)
 8021e56:	681b      	ldr	r3, [r3, #0]
 8021e58:	60fb      	str	r3, [r7, #12]
 8021e5a:	e010      	b.n	8021e7e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8021e5c:	68fb      	ldr	r3, [r7, #12]
 8021e5e:	68db      	ldr	r3, [r3, #12]
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d009      	beq.n	8021e78 <udp_remove+0x58>
 8021e64:	68fb      	ldr	r3, [r7, #12]
 8021e66:	68db      	ldr	r3, [r3, #12]
 8021e68:	687a      	ldr	r2, [r7, #4]
 8021e6a:	429a      	cmp	r2, r3
 8021e6c:	d104      	bne.n	8021e78 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	68da      	ldr	r2, [r3, #12]
 8021e72:	68fb      	ldr	r3, [r7, #12]
 8021e74:	60da      	str	r2, [r3, #12]
        break;
 8021e76:	e005      	b.n	8021e84 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	68db      	ldr	r3, [r3, #12]
 8021e7c:	60fb      	str	r3, [r7, #12]
 8021e7e:	68fb      	ldr	r3, [r7, #12]
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d1eb      	bne.n	8021e5c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8021e84:	6879      	ldr	r1, [r7, #4]
 8021e86:	2000      	movs	r0, #0
 8021e88:	f7f8 ff68 	bl	801ad5c <memp_free>
}
 8021e8c:	3710      	adds	r7, #16
 8021e8e:	46bd      	mov	sp, r7
 8021e90:	bd80      	pop	{r7, pc}
 8021e92:	bf00      	nop
 8021e94:	0802a4ec 	.word	0x0802a4ec
 8021e98:	0802a838 	.word	0x0802a838
 8021e9c:	0802a540 	.word	0x0802a540
 8021ea0:	2400cfb4 	.word	0x2400cfb4

08021ea4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b082      	sub	sp, #8
 8021ea8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8021eaa:	2000      	movs	r0, #0
 8021eac:	f7f8 fee0 	bl	801ac70 <memp_malloc>
 8021eb0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d007      	beq.n	8021ec8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8021eb8:	2220      	movs	r2, #32
 8021eba:	2100      	movs	r1, #0
 8021ebc:	6878      	ldr	r0, [r7, #4]
 8021ebe:	f005 f9fd 	bl	80272bc <memset>
    pcb->ttl = UDP_TTL;
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	22ff      	movs	r2, #255	; 0xff
 8021ec6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8021ec8:	687b      	ldr	r3, [r7, #4]
}
 8021eca:	4618      	mov	r0, r3
 8021ecc:	3708      	adds	r7, #8
 8021ece:	46bd      	mov	sp, r7
 8021ed0:	bd80      	pop	{r7, pc}
	...

08021ed4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021ed4:	b480      	push	{r7}
 8021ed6:	b085      	sub	sp, #20
 8021ed8:	af00      	add	r7, sp, #0
 8021eda:	6078      	str	r0, [r7, #4]
 8021edc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	d01e      	beq.n	8021f22 <udp_netif_ip_addr_changed+0x4e>
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	d01a      	beq.n	8021f22 <udp_netif_ip_addr_changed+0x4e>
 8021eec:	683b      	ldr	r3, [r7, #0]
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	d017      	beq.n	8021f22 <udp_netif_ip_addr_changed+0x4e>
 8021ef2:	683b      	ldr	r3, [r7, #0]
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d013      	beq.n	8021f22 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021efa:	4b0d      	ldr	r3, [pc, #52]	; (8021f30 <udp_netif_ip_addr_changed+0x5c>)
 8021efc:	681b      	ldr	r3, [r3, #0]
 8021efe:	60fb      	str	r3, [r7, #12]
 8021f00:	e00c      	b.n	8021f1c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8021f02:	68fb      	ldr	r3, [r7, #12]
 8021f04:	681a      	ldr	r2, [r3, #0]
 8021f06:	687b      	ldr	r3, [r7, #4]
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	429a      	cmp	r2, r3
 8021f0c:	d103      	bne.n	8021f16 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8021f0e:	683b      	ldr	r3, [r7, #0]
 8021f10:	681a      	ldr	r2, [r3, #0]
 8021f12:	68fb      	ldr	r3, [r7, #12]
 8021f14:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021f16:	68fb      	ldr	r3, [r7, #12]
 8021f18:	68db      	ldr	r3, [r3, #12]
 8021f1a:	60fb      	str	r3, [r7, #12]
 8021f1c:	68fb      	ldr	r3, [r7, #12]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d1ef      	bne.n	8021f02 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8021f22:	bf00      	nop
 8021f24:	3714      	adds	r7, #20
 8021f26:	46bd      	mov	sp, r7
 8021f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f2c:	4770      	bx	lr
 8021f2e:	bf00      	nop
 8021f30:	2400cfb4 	.word	0x2400cfb4

08021f34 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8021f34:	b580      	push	{r7, lr}
 8021f36:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8021f38:	4b20      	ldr	r3, [pc, #128]	; (8021fbc <dhcp_inc_pcb_refcount+0x88>)
 8021f3a:	781b      	ldrb	r3, [r3, #0]
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	d133      	bne.n	8021fa8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8021f40:	4b1f      	ldr	r3, [pc, #124]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f42:	681b      	ldr	r3, [r3, #0]
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	d005      	beq.n	8021f54 <dhcp_inc_pcb_refcount+0x20>
 8021f48:	4b1e      	ldr	r3, [pc, #120]	; (8021fc4 <dhcp_inc_pcb_refcount+0x90>)
 8021f4a:	22e5      	movs	r2, #229	; 0xe5
 8021f4c:	491e      	ldr	r1, [pc, #120]	; (8021fc8 <dhcp_inc_pcb_refcount+0x94>)
 8021f4e:	481f      	ldr	r0, [pc, #124]	; (8021fcc <dhcp_inc_pcb_refcount+0x98>)
 8021f50:	f005 fab2 	bl	80274b8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8021f54:	f7ff ffa6 	bl	8021ea4 <udp_new>
 8021f58:	4603      	mov	r3, r0
 8021f5a:	4a19      	ldr	r2, [pc, #100]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f5c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8021f5e:	4b18      	ldr	r3, [pc, #96]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f60:	681b      	ldr	r3, [r3, #0]
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	d102      	bne.n	8021f6c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8021f66:	f04f 33ff 	mov.w	r3, #4294967295
 8021f6a:	e024      	b.n	8021fb6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8021f6c:	4b14      	ldr	r3, [pc, #80]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f6e:	681b      	ldr	r3, [r3, #0]
 8021f70:	7a5a      	ldrb	r2, [r3, #9]
 8021f72:	4b13      	ldr	r3, [pc, #76]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f74:	681b      	ldr	r3, [r3, #0]
 8021f76:	f042 0220 	orr.w	r2, r2, #32
 8021f7a:	b2d2      	uxtb	r2, r2
 8021f7c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8021f7e:	4b10      	ldr	r3, [pc, #64]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	2244      	movs	r2, #68	; 0x44
 8021f84:	4912      	ldr	r1, [pc, #72]	; (8021fd0 <dhcp_inc_pcb_refcount+0x9c>)
 8021f86:	4618      	mov	r0, r3
 8021f88:	f7ff fe34 	bl	8021bf4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8021f8c:	4b0c      	ldr	r3, [pc, #48]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f8e:	681b      	ldr	r3, [r3, #0]
 8021f90:	2243      	movs	r2, #67	; 0x43
 8021f92:	490f      	ldr	r1, [pc, #60]	; (8021fd0 <dhcp_inc_pcb_refcount+0x9c>)
 8021f94:	4618      	mov	r0, r3
 8021f96:	f7ff feb5 	bl	8021d04 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8021f9a:	4b09      	ldr	r3, [pc, #36]	; (8021fc0 <dhcp_inc_pcb_refcount+0x8c>)
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	2200      	movs	r2, #0
 8021fa0:	490c      	ldr	r1, [pc, #48]	; (8021fd4 <dhcp_inc_pcb_refcount+0xa0>)
 8021fa2:	4618      	mov	r0, r3
 8021fa4:	f7ff ff1c 	bl	8021de0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8021fa8:	4b04      	ldr	r3, [pc, #16]	; (8021fbc <dhcp_inc_pcb_refcount+0x88>)
 8021faa:	781b      	ldrb	r3, [r3, #0]
 8021fac:	3301      	adds	r3, #1
 8021fae:	b2da      	uxtb	r2, r3
 8021fb0:	4b02      	ldr	r3, [pc, #8]	; (8021fbc <dhcp_inc_pcb_refcount+0x88>)
 8021fb2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8021fb4:	2300      	movs	r3, #0
}
 8021fb6:	4618      	mov	r0, r3
 8021fb8:	bd80      	pop	{r7, pc}
 8021fba:	bf00      	nop
 8021fbc:	2400cfe4 	.word	0x2400cfe4
 8021fc0:	2400cfe0 	.word	0x2400cfe0
 8021fc4:	0802a850 	.word	0x0802a850
 8021fc8:	0802a888 	.word	0x0802a888
 8021fcc:	0802a8b0 	.word	0x0802a8b0
 8021fd0:	0802bb4c 	.word	0x0802bb4c
 8021fd4:	0802386d 	.word	0x0802386d

08021fd8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8021fd8:	b580      	push	{r7, lr}
 8021fda:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8021fdc:	4b0e      	ldr	r3, [pc, #56]	; (8022018 <dhcp_dec_pcb_refcount+0x40>)
 8021fde:	781b      	ldrb	r3, [r3, #0]
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	d105      	bne.n	8021ff0 <dhcp_dec_pcb_refcount+0x18>
 8021fe4:	4b0d      	ldr	r3, [pc, #52]	; (802201c <dhcp_dec_pcb_refcount+0x44>)
 8021fe6:	22ff      	movs	r2, #255	; 0xff
 8021fe8:	490d      	ldr	r1, [pc, #52]	; (8022020 <dhcp_dec_pcb_refcount+0x48>)
 8021fea:	480e      	ldr	r0, [pc, #56]	; (8022024 <dhcp_dec_pcb_refcount+0x4c>)
 8021fec:	f005 fa64 	bl	80274b8 <iprintf>
  dhcp_pcb_refcount--;
 8021ff0:	4b09      	ldr	r3, [pc, #36]	; (8022018 <dhcp_dec_pcb_refcount+0x40>)
 8021ff2:	781b      	ldrb	r3, [r3, #0]
 8021ff4:	3b01      	subs	r3, #1
 8021ff6:	b2da      	uxtb	r2, r3
 8021ff8:	4b07      	ldr	r3, [pc, #28]	; (8022018 <dhcp_dec_pcb_refcount+0x40>)
 8021ffa:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8021ffc:	4b06      	ldr	r3, [pc, #24]	; (8022018 <dhcp_dec_pcb_refcount+0x40>)
 8021ffe:	781b      	ldrb	r3, [r3, #0]
 8022000:	2b00      	cmp	r3, #0
 8022002:	d107      	bne.n	8022014 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8022004:	4b08      	ldr	r3, [pc, #32]	; (8022028 <dhcp_dec_pcb_refcount+0x50>)
 8022006:	681b      	ldr	r3, [r3, #0]
 8022008:	4618      	mov	r0, r3
 802200a:	f7ff ff09 	bl	8021e20 <udp_remove>
    dhcp_pcb = NULL;
 802200e:	4b06      	ldr	r3, [pc, #24]	; (8022028 <dhcp_dec_pcb_refcount+0x50>)
 8022010:	2200      	movs	r2, #0
 8022012:	601a      	str	r2, [r3, #0]
  }
}
 8022014:	bf00      	nop
 8022016:	bd80      	pop	{r7, pc}
 8022018:	2400cfe4 	.word	0x2400cfe4
 802201c:	0802a850 	.word	0x0802a850
 8022020:	0802a8d8 	.word	0x0802a8d8
 8022024:	0802a8b0 	.word	0x0802a8b0
 8022028:	2400cfe0 	.word	0x2400cfe0

0802202c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 802202c:	b580      	push	{r7, lr}
 802202e:	b084      	sub	sp, #16
 8022030:	af00      	add	r7, sp, #0
 8022032:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022038:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 802203a:	210c      	movs	r1, #12
 802203c:	68f8      	ldr	r0, [r7, #12]
 802203e:	f001 f857 	bl	80230f0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8022042:	4b06      	ldr	r3, [pc, #24]	; (802205c <dhcp_handle_nak+0x30>)
 8022044:	4a05      	ldr	r2, [pc, #20]	; (802205c <dhcp_handle_nak+0x30>)
 8022046:	4905      	ldr	r1, [pc, #20]	; (802205c <dhcp_handle_nak+0x30>)
 8022048:	6878      	ldr	r0, [r7, #4]
 802204a:	f7f9 f829 	bl	801b0a0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 802204e:	6878      	ldr	r0, [r7, #4]
 8022050:	f000 fc4a 	bl	80228e8 <dhcp_discover>
}
 8022054:	bf00      	nop
 8022056:	3710      	adds	r7, #16
 8022058:	46bd      	mov	sp, r7
 802205a:	bd80      	pop	{r7, pc}
 802205c:	0802bb4c 	.word	0x0802bb4c

08022060 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8022060:	b580      	push	{r7, lr}
 8022062:	b084      	sub	sp, #16
 8022064:	af00      	add	r7, sp, #0
 8022066:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802206c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 802206e:	2108      	movs	r1, #8
 8022070:	68f8      	ldr	r0, [r7, #12]
 8022072:	f001 f83d 	bl	80230f0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8022076:	68fb      	ldr	r3, [r7, #12]
 8022078:	331c      	adds	r3, #28
 802207a:	2200      	movs	r2, #0
 802207c:	4619      	mov	r1, r3
 802207e:	6878      	ldr	r0, [r7, #4]
 8022080:	f002 fb3e 	bl	8024700 <etharp_query>
 8022084:	4603      	mov	r3, r0
 8022086:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8022088:	68fb      	ldr	r3, [r7, #12]
 802208a:	799b      	ldrb	r3, [r3, #6]
 802208c:	2bff      	cmp	r3, #255	; 0xff
 802208e:	d005      	beq.n	802209c <dhcp_check+0x3c>
    dhcp->tries++;
 8022090:	68fb      	ldr	r3, [r7, #12]
 8022092:	799b      	ldrb	r3, [r3, #6]
 8022094:	3301      	adds	r3, #1
 8022096:	b2da      	uxtb	r2, r3
 8022098:	68fb      	ldr	r3, [r7, #12]
 802209a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 802209c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80220a0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80220a2:	893b      	ldrh	r3, [r7, #8]
 80220a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80220a8:	4a06      	ldr	r2, [pc, #24]	; (80220c4 <dhcp_check+0x64>)
 80220aa:	fb82 1203 	smull	r1, r2, r2, r3
 80220ae:	1152      	asrs	r2, r2, #5
 80220b0:	17db      	asrs	r3, r3, #31
 80220b2:	1ad3      	subs	r3, r2, r3
 80220b4:	b29a      	uxth	r2, r3
 80220b6:	68fb      	ldr	r3, [r7, #12]
 80220b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80220ba:	bf00      	nop
 80220bc:	3710      	adds	r7, #16
 80220be:	46bd      	mov	sp, r7
 80220c0:	bd80      	pop	{r7, pc}
 80220c2:	bf00      	nop
 80220c4:	10624dd3 	.word	0x10624dd3

080220c8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80220c8:	b580      	push	{r7, lr}
 80220ca:	b084      	sub	sp, #16
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
 80220d0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220d6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80220d8:	4b0c      	ldr	r3, [pc, #48]	; (802210c <dhcp_handle_offer+0x44>)
 80220da:	789b      	ldrb	r3, [r3, #2]
 80220dc:	2b00      	cmp	r3, #0
 80220de:	d011      	beq.n	8022104 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80220e0:	68fb      	ldr	r3, [r7, #12]
 80220e2:	2200      	movs	r2, #0
 80220e4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80220e6:	4b0a      	ldr	r3, [pc, #40]	; (8022110 <dhcp_handle_offer+0x48>)
 80220e8:	689b      	ldr	r3, [r3, #8]
 80220ea:	4618      	mov	r0, r3
 80220ec:	f7f8 f845 	bl	801a17a <lwip_htonl>
 80220f0:	4602      	mov	r2, r0
 80220f2:	68fb      	ldr	r3, [r7, #12]
 80220f4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80220f6:	683b      	ldr	r3, [r7, #0]
 80220f8:	691a      	ldr	r2, [r3, #16]
 80220fa:	68fb      	ldr	r3, [r7, #12]
 80220fc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80220fe:	6878      	ldr	r0, [r7, #4]
 8022100:	f000 f808 	bl	8022114 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8022104:	bf00      	nop
 8022106:	3710      	adds	r7, #16
 8022108:	46bd      	mov	sp, r7
 802210a:	bd80      	pop	{r7, pc}
 802210c:	2400cfd8 	.word	0x2400cfd8
 8022110:	2400cfb8 	.word	0x2400cfb8

08022114 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8022114:	b5b0      	push	{r4, r5, r7, lr}
 8022116:	b08a      	sub	sp, #40	; 0x28
 8022118:	af02      	add	r7, sp, #8
 802211a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	2b00      	cmp	r3, #0
 8022120:	d109      	bne.n	8022136 <dhcp_select+0x22>
 8022122:	4b71      	ldr	r3, [pc, #452]	; (80222e8 <dhcp_select+0x1d4>)
 8022124:	f240 1277 	movw	r2, #375	; 0x177
 8022128:	4970      	ldr	r1, [pc, #448]	; (80222ec <dhcp_select+0x1d8>)
 802212a:	4871      	ldr	r0, [pc, #452]	; (80222f0 <dhcp_select+0x1dc>)
 802212c:	f005 f9c4 	bl	80274b8 <iprintf>
 8022130:	f06f 030f 	mvn.w	r3, #15
 8022134:	e0d3      	b.n	80222de <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802213a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 802213c:	69bb      	ldr	r3, [r7, #24]
 802213e:	2b00      	cmp	r3, #0
 8022140:	d109      	bne.n	8022156 <dhcp_select+0x42>
 8022142:	4b69      	ldr	r3, [pc, #420]	; (80222e8 <dhcp_select+0x1d4>)
 8022144:	f240 1279 	movw	r2, #377	; 0x179
 8022148:	496a      	ldr	r1, [pc, #424]	; (80222f4 <dhcp_select+0x1e0>)
 802214a:	4869      	ldr	r0, [pc, #420]	; (80222f0 <dhcp_select+0x1dc>)
 802214c:	f005 f9b4 	bl	80274b8 <iprintf>
 8022150:	f06f 0305 	mvn.w	r3, #5
 8022154:	e0c3      	b.n	80222de <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8022156:	2101      	movs	r1, #1
 8022158:	69b8      	ldr	r0, [r7, #24]
 802215a:	f000 ffc9 	bl	80230f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802215e:	f107 030c 	add.w	r3, r7, #12
 8022162:	2203      	movs	r2, #3
 8022164:	69b9      	ldr	r1, [r7, #24]
 8022166:	6878      	ldr	r0, [r7, #4]
 8022168:	f001 fc4e 	bl	8023a08 <dhcp_create_msg>
 802216c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802216e:	697b      	ldr	r3, [r7, #20]
 8022170:	2b00      	cmp	r3, #0
 8022172:	f000 8085 	beq.w	8022280 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8022176:	697b      	ldr	r3, [r7, #20]
 8022178:	685b      	ldr	r3, [r3, #4]
 802217a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802217c:	89b8      	ldrh	r0, [r7, #12]
 802217e:	693b      	ldr	r3, [r7, #16]
 8022180:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022184:	2302      	movs	r3, #2
 8022186:	2239      	movs	r2, #57	; 0x39
 8022188:	f000 ffcc 	bl	8023124 <dhcp_option>
 802218c:	4603      	mov	r3, r0
 802218e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022190:	89b8      	ldrh	r0, [r7, #12]
 8022192:	693b      	ldr	r3, [r7, #16]
 8022194:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802219c:	461a      	mov	r2, r3
 802219e:	f001 f81b 	bl	80231d8 <dhcp_option_short>
 80221a2:	4603      	mov	r3, r0
 80221a4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80221a6:	89b8      	ldrh	r0, [r7, #12]
 80221a8:	693b      	ldr	r3, [r7, #16]
 80221aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80221ae:	2304      	movs	r3, #4
 80221b0:	2232      	movs	r2, #50	; 0x32
 80221b2:	f000 ffb7 	bl	8023124 <dhcp_option>
 80221b6:	4603      	mov	r3, r0
 80221b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80221ba:	89bc      	ldrh	r4, [r7, #12]
 80221bc:	693b      	ldr	r3, [r7, #16]
 80221be:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80221c2:	69bb      	ldr	r3, [r7, #24]
 80221c4:	69db      	ldr	r3, [r3, #28]
 80221c6:	4618      	mov	r0, r3
 80221c8:	f7f7 ffd7 	bl	801a17a <lwip_htonl>
 80221cc:	4603      	mov	r3, r0
 80221ce:	461a      	mov	r2, r3
 80221d0:	4629      	mov	r1, r5
 80221d2:	4620      	mov	r0, r4
 80221d4:	f001 f832 	bl	802323c <dhcp_option_long>
 80221d8:	4603      	mov	r3, r0
 80221da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80221dc:	89b8      	ldrh	r0, [r7, #12]
 80221de:	693b      	ldr	r3, [r7, #16]
 80221e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80221e4:	2304      	movs	r3, #4
 80221e6:	2236      	movs	r2, #54	; 0x36
 80221e8:	f000 ff9c 	bl	8023124 <dhcp_option>
 80221ec:	4603      	mov	r3, r0
 80221ee:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80221f0:	89bc      	ldrh	r4, [r7, #12]
 80221f2:	693b      	ldr	r3, [r7, #16]
 80221f4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80221f8:	69bb      	ldr	r3, [r7, #24]
 80221fa:	699b      	ldr	r3, [r3, #24]
 80221fc:	4618      	mov	r0, r3
 80221fe:	f7f7 ffbc 	bl	801a17a <lwip_htonl>
 8022202:	4603      	mov	r3, r0
 8022204:	461a      	mov	r2, r3
 8022206:	4629      	mov	r1, r5
 8022208:	4620      	mov	r0, r4
 802220a:	f001 f817 	bl	802323c <dhcp_option_long>
 802220e:	4603      	mov	r3, r0
 8022210:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022212:	89b8      	ldrh	r0, [r7, #12]
 8022214:	693b      	ldr	r3, [r7, #16]
 8022216:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802221a:	2303      	movs	r3, #3
 802221c:	2237      	movs	r2, #55	; 0x37
 802221e:	f000 ff81 	bl	8023124 <dhcp_option>
 8022222:	4603      	mov	r3, r0
 8022224:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022226:	2300      	movs	r3, #0
 8022228:	77bb      	strb	r3, [r7, #30]
 802222a:	e00e      	b.n	802224a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802222c:	89b8      	ldrh	r0, [r7, #12]
 802222e:	693b      	ldr	r3, [r7, #16]
 8022230:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022234:	7fbb      	ldrb	r3, [r7, #30]
 8022236:	4a30      	ldr	r2, [pc, #192]	; (80222f8 <dhcp_select+0x1e4>)
 8022238:	5cd3      	ldrb	r3, [r2, r3]
 802223a:	461a      	mov	r2, r3
 802223c:	f000 ffa6 	bl	802318c <dhcp_option_byte>
 8022240:	4603      	mov	r3, r0
 8022242:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022244:	7fbb      	ldrb	r3, [r7, #30]
 8022246:	3301      	adds	r3, #1
 8022248:	77bb      	strb	r3, [r7, #30]
 802224a:	7fbb      	ldrb	r3, [r7, #30]
 802224c:	2b02      	cmp	r3, #2
 802224e:	d9ed      	bls.n	802222c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8022250:	89b8      	ldrh	r0, [r7, #12]
 8022252:	693b      	ldr	r3, [r7, #16]
 8022254:	33f0      	adds	r3, #240	; 0xf0
 8022256:	697a      	ldr	r2, [r7, #20]
 8022258:	4619      	mov	r1, r3
 802225a:	f001 fcab 	bl	8023bb4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802225e:	4b27      	ldr	r3, [pc, #156]	; (80222fc <dhcp_select+0x1e8>)
 8022260:	6818      	ldr	r0, [r3, #0]
 8022262:	4b27      	ldr	r3, [pc, #156]	; (8022300 <dhcp_select+0x1ec>)
 8022264:	9301      	str	r3, [sp, #4]
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	9300      	str	r3, [sp, #0]
 802226a:	2343      	movs	r3, #67	; 0x43
 802226c:	4a25      	ldr	r2, [pc, #148]	; (8022304 <dhcp_select+0x1f0>)
 802226e:	6979      	ldr	r1, [r7, #20]
 8022270:	f7ff fbda 	bl	8021a28 <udp_sendto_if_src>
 8022274:	4603      	mov	r3, r0
 8022276:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8022278:	6978      	ldr	r0, [r7, #20]
 802227a:	f7f9 fc1f 	bl	801babc <pbuf_free>
 802227e:	e001      	b.n	8022284 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8022280:	23ff      	movs	r3, #255	; 0xff
 8022282:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8022284:	69bb      	ldr	r3, [r7, #24]
 8022286:	799b      	ldrb	r3, [r3, #6]
 8022288:	2bff      	cmp	r3, #255	; 0xff
 802228a:	d005      	beq.n	8022298 <dhcp_select+0x184>
    dhcp->tries++;
 802228c:	69bb      	ldr	r3, [r7, #24]
 802228e:	799b      	ldrb	r3, [r3, #6]
 8022290:	3301      	adds	r3, #1
 8022292:	b2da      	uxtb	r2, r3
 8022294:	69bb      	ldr	r3, [r7, #24]
 8022296:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022298:	69bb      	ldr	r3, [r7, #24]
 802229a:	799b      	ldrb	r3, [r3, #6]
 802229c:	2b05      	cmp	r3, #5
 802229e:	d80d      	bhi.n	80222bc <dhcp_select+0x1a8>
 80222a0:	69bb      	ldr	r3, [r7, #24]
 80222a2:	799b      	ldrb	r3, [r3, #6]
 80222a4:	461a      	mov	r2, r3
 80222a6:	2301      	movs	r3, #1
 80222a8:	4093      	lsls	r3, r2
 80222aa:	b29b      	uxth	r3, r3
 80222ac:	461a      	mov	r2, r3
 80222ae:	0152      	lsls	r2, r2, #5
 80222b0:	1ad2      	subs	r2, r2, r3
 80222b2:	0092      	lsls	r2, r2, #2
 80222b4:	4413      	add	r3, r2
 80222b6:	00db      	lsls	r3, r3, #3
 80222b8:	b29b      	uxth	r3, r3
 80222ba:	e001      	b.n	80222c0 <dhcp_select+0x1ac>
 80222bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80222c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80222c2:	89fb      	ldrh	r3, [r7, #14]
 80222c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80222c8:	4a0f      	ldr	r2, [pc, #60]	; (8022308 <dhcp_select+0x1f4>)
 80222ca:	fb82 1203 	smull	r1, r2, r2, r3
 80222ce:	1152      	asrs	r2, r2, #5
 80222d0:	17db      	asrs	r3, r3, #31
 80222d2:	1ad3      	subs	r3, r2, r3
 80222d4:	b29a      	uxth	r2, r3
 80222d6:	69bb      	ldr	r3, [r7, #24]
 80222d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80222da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80222de:	4618      	mov	r0, r3
 80222e0:	3720      	adds	r7, #32
 80222e2:	46bd      	mov	sp, r7
 80222e4:	bdb0      	pop	{r4, r5, r7, pc}
 80222e6:	bf00      	nop
 80222e8:	0802a850 	.word	0x0802a850
 80222ec:	0802a8fc 	.word	0x0802a8fc
 80222f0:	0802a8b0 	.word	0x0802a8b0
 80222f4:	0802a918 	.word	0x0802a918
 80222f8:	24000464 	.word	0x24000464
 80222fc:	2400cfe0 	.word	0x2400cfe0
 8022300:	0802bb4c 	.word	0x0802bb4c
 8022304:	0802bb50 	.word	0x0802bb50
 8022308:	10624dd3 	.word	0x10624dd3

0802230c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 802230c:	b580      	push	{r7, lr}
 802230e:	b082      	sub	sp, #8
 8022310:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8022312:	4b27      	ldr	r3, [pc, #156]	; (80223b0 <dhcp_coarse_tmr+0xa4>)
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	607b      	str	r3, [r7, #4]
 8022318:	e042      	b.n	80223a0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802231e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8022320:	683b      	ldr	r3, [r7, #0]
 8022322:	2b00      	cmp	r3, #0
 8022324:	d039      	beq.n	802239a <dhcp_coarse_tmr+0x8e>
 8022326:	683b      	ldr	r3, [r7, #0]
 8022328:	795b      	ldrb	r3, [r3, #5]
 802232a:	2b00      	cmp	r3, #0
 802232c:	d035      	beq.n	802239a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 802232e:	683b      	ldr	r3, [r7, #0]
 8022330:	8a9b      	ldrh	r3, [r3, #20]
 8022332:	2b00      	cmp	r3, #0
 8022334:	d012      	beq.n	802235c <dhcp_coarse_tmr+0x50>
 8022336:	683b      	ldr	r3, [r7, #0]
 8022338:	8a5b      	ldrh	r3, [r3, #18]
 802233a:	3301      	adds	r3, #1
 802233c:	b29a      	uxth	r2, r3
 802233e:	683b      	ldr	r3, [r7, #0]
 8022340:	825a      	strh	r2, [r3, #18]
 8022342:	683b      	ldr	r3, [r7, #0]
 8022344:	8a5a      	ldrh	r2, [r3, #18]
 8022346:	683b      	ldr	r3, [r7, #0]
 8022348:	8a9b      	ldrh	r3, [r3, #20]
 802234a:	429a      	cmp	r2, r3
 802234c:	d106      	bne.n	802235c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 802234e:	6878      	ldr	r0, [r7, #4]
 8022350:	f000 fe34 	bl	8022fbc <dhcp_release_and_stop>
        dhcp_start(netif);
 8022354:	6878      	ldr	r0, [r7, #4]
 8022356:	f000 f96b 	bl	8022630 <dhcp_start>
 802235a:	e01e      	b.n	802239a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 802235c:	683b      	ldr	r3, [r7, #0]
 802235e:	8a1b      	ldrh	r3, [r3, #16]
 8022360:	2b00      	cmp	r3, #0
 8022362:	d00b      	beq.n	802237c <dhcp_coarse_tmr+0x70>
 8022364:	683b      	ldr	r3, [r7, #0]
 8022366:	8a1b      	ldrh	r3, [r3, #16]
 8022368:	1e5a      	subs	r2, r3, #1
 802236a:	b291      	uxth	r1, r2
 802236c:	683a      	ldr	r2, [r7, #0]
 802236e:	8211      	strh	r1, [r2, #16]
 8022370:	2b01      	cmp	r3, #1
 8022372:	d103      	bne.n	802237c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8022374:	6878      	ldr	r0, [r7, #4]
 8022376:	f000 f8c7 	bl	8022508 <dhcp_t2_timeout>
 802237a:	e00e      	b.n	802239a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 802237c:	683b      	ldr	r3, [r7, #0]
 802237e:	89db      	ldrh	r3, [r3, #14]
 8022380:	2b00      	cmp	r3, #0
 8022382:	d00a      	beq.n	802239a <dhcp_coarse_tmr+0x8e>
 8022384:	683b      	ldr	r3, [r7, #0]
 8022386:	89db      	ldrh	r3, [r3, #14]
 8022388:	1e5a      	subs	r2, r3, #1
 802238a:	b291      	uxth	r1, r2
 802238c:	683a      	ldr	r2, [r7, #0]
 802238e:	81d1      	strh	r1, [r2, #14]
 8022390:	2b01      	cmp	r3, #1
 8022392:	d102      	bne.n	802239a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8022394:	6878      	ldr	r0, [r7, #4]
 8022396:	f000 f888 	bl	80224aa <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	681b      	ldr	r3, [r3, #0]
 802239e:	607b      	str	r3, [r7, #4]
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	2b00      	cmp	r3, #0
 80223a4:	d1b9      	bne.n	802231a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80223a6:	bf00      	nop
 80223a8:	bf00      	nop
 80223aa:	3708      	adds	r7, #8
 80223ac:	46bd      	mov	sp, r7
 80223ae:	bd80      	pop	{r7, pc}
 80223b0:	2400cf4c 	.word	0x2400cf4c

080223b4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80223b4:	b580      	push	{r7, lr}
 80223b6:	b082      	sub	sp, #8
 80223b8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80223ba:	4b16      	ldr	r3, [pc, #88]	; (8022414 <dhcp_fine_tmr+0x60>)
 80223bc:	681b      	ldr	r3, [r3, #0]
 80223be:	607b      	str	r3, [r7, #4]
 80223c0:	e020      	b.n	8022404 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80223c2:	687b      	ldr	r3, [r7, #4]
 80223c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80223c6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80223c8:	683b      	ldr	r3, [r7, #0]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d017      	beq.n	80223fe <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80223ce:	683b      	ldr	r3, [r7, #0]
 80223d0:	891b      	ldrh	r3, [r3, #8]
 80223d2:	2b01      	cmp	r3, #1
 80223d4:	d906      	bls.n	80223e4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80223d6:	683b      	ldr	r3, [r7, #0]
 80223d8:	891b      	ldrh	r3, [r3, #8]
 80223da:	3b01      	subs	r3, #1
 80223dc:	b29a      	uxth	r2, r3
 80223de:	683b      	ldr	r3, [r7, #0]
 80223e0:	811a      	strh	r2, [r3, #8]
 80223e2:	e00c      	b.n	80223fe <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80223e4:	683b      	ldr	r3, [r7, #0]
 80223e6:	891b      	ldrh	r3, [r3, #8]
 80223e8:	2b01      	cmp	r3, #1
 80223ea:	d108      	bne.n	80223fe <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80223ec:	683b      	ldr	r3, [r7, #0]
 80223ee:	891b      	ldrh	r3, [r3, #8]
 80223f0:	3b01      	subs	r3, #1
 80223f2:	b29a      	uxth	r2, r3
 80223f4:	683b      	ldr	r3, [r7, #0]
 80223f6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80223f8:	6878      	ldr	r0, [r7, #4]
 80223fa:	f000 f80d 	bl	8022418 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	681b      	ldr	r3, [r3, #0]
 8022402:	607b      	str	r3, [r7, #4]
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	2b00      	cmp	r3, #0
 8022408:	d1db      	bne.n	80223c2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 802240a:	bf00      	nop
 802240c:	bf00      	nop
 802240e:	3708      	adds	r7, #8
 8022410:	46bd      	mov	sp, r7
 8022412:	bd80      	pop	{r7, pc}
 8022414:	2400cf4c 	.word	0x2400cf4c

08022418 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8022418:	b580      	push	{r7, lr}
 802241a:	b084      	sub	sp, #16
 802241c:	af00      	add	r7, sp, #0
 802241e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022424:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8022426:	68fb      	ldr	r3, [r7, #12]
 8022428:	795b      	ldrb	r3, [r3, #5]
 802242a:	2b0c      	cmp	r3, #12
 802242c:	d003      	beq.n	8022436 <dhcp_timeout+0x1e>
 802242e:	68fb      	ldr	r3, [r7, #12]
 8022430:	795b      	ldrb	r3, [r3, #5]
 8022432:	2b06      	cmp	r3, #6
 8022434:	d103      	bne.n	802243e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8022436:	6878      	ldr	r0, [r7, #4]
 8022438:	f000 fa56 	bl	80228e8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 802243c:	e031      	b.n	80224a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 802243e:	68fb      	ldr	r3, [r7, #12]
 8022440:	795b      	ldrb	r3, [r3, #5]
 8022442:	2b01      	cmp	r3, #1
 8022444:	d10e      	bne.n	8022464 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8022446:	68fb      	ldr	r3, [r7, #12]
 8022448:	799b      	ldrb	r3, [r3, #6]
 802244a:	2b05      	cmp	r3, #5
 802244c:	d803      	bhi.n	8022456 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 802244e:	6878      	ldr	r0, [r7, #4]
 8022450:	f7ff fe60 	bl	8022114 <dhcp_select>
}
 8022454:	e025      	b.n	80224a2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8022456:	6878      	ldr	r0, [r7, #4]
 8022458:	f000 fdb0 	bl	8022fbc <dhcp_release_and_stop>
      dhcp_start(netif);
 802245c:	6878      	ldr	r0, [r7, #4]
 802245e:	f000 f8e7 	bl	8022630 <dhcp_start>
}
 8022462:	e01e      	b.n	80224a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8022464:	68fb      	ldr	r3, [r7, #12]
 8022466:	795b      	ldrb	r3, [r3, #5]
 8022468:	2b08      	cmp	r3, #8
 802246a:	d10b      	bne.n	8022484 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 802246c:	68fb      	ldr	r3, [r7, #12]
 802246e:	799b      	ldrb	r3, [r3, #6]
 8022470:	2b01      	cmp	r3, #1
 8022472:	d803      	bhi.n	802247c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8022474:	6878      	ldr	r0, [r7, #4]
 8022476:	f7ff fdf3 	bl	8022060 <dhcp_check>
}
 802247a:	e012      	b.n	80224a2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 802247c:	6878      	ldr	r0, [r7, #4]
 802247e:	f000 fad5 	bl	8022a2c <dhcp_bind>
}
 8022482:	e00e      	b.n	80224a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8022484:	68fb      	ldr	r3, [r7, #12]
 8022486:	795b      	ldrb	r3, [r3, #5]
 8022488:	2b03      	cmp	r3, #3
 802248a:	d10a      	bne.n	80224a2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 802248c:	68fb      	ldr	r3, [r7, #12]
 802248e:	799b      	ldrb	r3, [r3, #6]
 8022490:	2b01      	cmp	r3, #1
 8022492:	d803      	bhi.n	802249c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8022494:	6878      	ldr	r0, [r7, #4]
 8022496:	f000 fcdb 	bl	8022e50 <dhcp_reboot>
}
 802249a:	e002      	b.n	80224a2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 802249c:	6878      	ldr	r0, [r7, #4]
 802249e:	f000 fa23 	bl	80228e8 <dhcp_discover>
}
 80224a2:	bf00      	nop
 80224a4:	3710      	adds	r7, #16
 80224a6:	46bd      	mov	sp, r7
 80224a8:	bd80      	pop	{r7, pc}

080224aa <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80224aa:	b580      	push	{r7, lr}
 80224ac:	b084      	sub	sp, #16
 80224ae:	af00      	add	r7, sp, #0
 80224b0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80224b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80224b8:	68fb      	ldr	r3, [r7, #12]
 80224ba:	795b      	ldrb	r3, [r3, #5]
 80224bc:	2b01      	cmp	r3, #1
 80224be:	d007      	beq.n	80224d0 <dhcp_t1_timeout+0x26>
 80224c0:	68fb      	ldr	r3, [r7, #12]
 80224c2:	795b      	ldrb	r3, [r3, #5]
 80224c4:	2b0a      	cmp	r3, #10
 80224c6:	d003      	beq.n	80224d0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80224c8:	68fb      	ldr	r3, [r7, #12]
 80224ca:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80224cc:	2b05      	cmp	r3, #5
 80224ce:	d117      	bne.n	8022500 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80224d0:	6878      	ldr	r0, [r7, #4]
 80224d2:	f000 fb85 	bl	8022be0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80224d6:	68fb      	ldr	r3, [r7, #12]
 80224d8:	899b      	ldrh	r3, [r3, #12]
 80224da:	461a      	mov	r2, r3
 80224dc:	68fb      	ldr	r3, [r7, #12]
 80224de:	8a5b      	ldrh	r3, [r3, #18]
 80224e0:	1ad3      	subs	r3, r2, r3
 80224e2:	2b01      	cmp	r3, #1
 80224e4:	dd0c      	ble.n	8022500 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80224e6:	68fb      	ldr	r3, [r7, #12]
 80224e8:	899b      	ldrh	r3, [r3, #12]
 80224ea:	461a      	mov	r2, r3
 80224ec:	68fb      	ldr	r3, [r7, #12]
 80224ee:	8a5b      	ldrh	r3, [r3, #18]
 80224f0:	1ad3      	subs	r3, r2, r3
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	da00      	bge.n	80224f8 <dhcp_t1_timeout+0x4e>
 80224f6:	3301      	adds	r3, #1
 80224f8:	105b      	asrs	r3, r3, #1
 80224fa:	b29a      	uxth	r2, r3
 80224fc:	68fb      	ldr	r3, [r7, #12]
 80224fe:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8022500:	bf00      	nop
 8022502:	3710      	adds	r7, #16
 8022504:	46bd      	mov	sp, r7
 8022506:	bd80      	pop	{r7, pc}

08022508 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8022508:	b580      	push	{r7, lr}
 802250a:	b084      	sub	sp, #16
 802250c:	af00      	add	r7, sp, #0
 802250e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022514:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	795b      	ldrb	r3, [r3, #5]
 802251a:	2b01      	cmp	r3, #1
 802251c:	d00b      	beq.n	8022536 <dhcp_t2_timeout+0x2e>
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	795b      	ldrb	r3, [r3, #5]
 8022522:	2b0a      	cmp	r3, #10
 8022524:	d007      	beq.n	8022536 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8022526:	68fb      	ldr	r3, [r7, #12]
 8022528:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 802252a:	2b05      	cmp	r3, #5
 802252c:	d003      	beq.n	8022536 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	795b      	ldrb	r3, [r3, #5]
 8022532:	2b04      	cmp	r3, #4
 8022534:	d117      	bne.n	8022566 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8022536:	6878      	ldr	r0, [r7, #4]
 8022538:	f000 fbee 	bl	8022d18 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802253c:	68fb      	ldr	r3, [r7, #12]
 802253e:	8a9b      	ldrh	r3, [r3, #20]
 8022540:	461a      	mov	r2, r3
 8022542:	68fb      	ldr	r3, [r7, #12]
 8022544:	8a5b      	ldrh	r3, [r3, #18]
 8022546:	1ad3      	subs	r3, r2, r3
 8022548:	2b01      	cmp	r3, #1
 802254a:	dd0c      	ble.n	8022566 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 802254c:	68fb      	ldr	r3, [r7, #12]
 802254e:	8a9b      	ldrh	r3, [r3, #20]
 8022550:	461a      	mov	r2, r3
 8022552:	68fb      	ldr	r3, [r7, #12]
 8022554:	8a5b      	ldrh	r3, [r3, #18]
 8022556:	1ad3      	subs	r3, r2, r3
 8022558:	2b00      	cmp	r3, #0
 802255a:	da00      	bge.n	802255e <dhcp_t2_timeout+0x56>
 802255c:	3301      	adds	r3, #1
 802255e:	105b      	asrs	r3, r3, #1
 8022560:	b29a      	uxth	r2, r3
 8022562:	68fb      	ldr	r3, [r7, #12]
 8022564:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8022566:	bf00      	nop
 8022568:	3710      	adds	r7, #16
 802256a:	46bd      	mov	sp, r7
 802256c:	bd80      	pop	{r7, pc}
	...

08022570 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8022570:	b580      	push	{r7, lr}
 8022572:	b084      	sub	sp, #16
 8022574:	af00      	add	r7, sp, #0
 8022576:	6078      	str	r0, [r7, #4]
 8022578:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802257e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8022580:	68fb      	ldr	r3, [r7, #12]
 8022582:	2200      	movs	r2, #0
 8022584:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8022586:	68fb      	ldr	r3, [r7, #12]
 8022588:	2200      	movs	r2, #0
 802258a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 802258c:	4b26      	ldr	r3, [pc, #152]	; (8022628 <dhcp_handle_ack+0xb8>)
 802258e:	78db      	ldrb	r3, [r3, #3]
 8022590:	2b00      	cmp	r3, #0
 8022592:	d003      	beq.n	802259c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8022594:	4b25      	ldr	r3, [pc, #148]	; (802262c <dhcp_handle_ack+0xbc>)
 8022596:	68da      	ldr	r2, [r3, #12]
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 802259c:	4b22      	ldr	r3, [pc, #136]	; (8022628 <dhcp_handle_ack+0xb8>)
 802259e:	791b      	ldrb	r3, [r3, #4]
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d004      	beq.n	80225ae <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80225a4:	4b21      	ldr	r3, [pc, #132]	; (802262c <dhcp_handle_ack+0xbc>)
 80225a6:	691a      	ldr	r2, [r3, #16]
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80225ac:	e004      	b.n	80225b8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80225ae:	68fb      	ldr	r3, [r7, #12]
 80225b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225b2:	085a      	lsrs	r2, r3, #1
 80225b4:	68fb      	ldr	r3, [r7, #12]
 80225b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80225b8:	4b1b      	ldr	r3, [pc, #108]	; (8022628 <dhcp_handle_ack+0xb8>)
 80225ba:	795b      	ldrb	r3, [r3, #5]
 80225bc:	2b00      	cmp	r3, #0
 80225be:	d004      	beq.n	80225ca <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80225c0:	4b1a      	ldr	r3, [pc, #104]	; (802262c <dhcp_handle_ack+0xbc>)
 80225c2:	695a      	ldr	r2, [r3, #20]
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	631a      	str	r2, [r3, #48]	; 0x30
 80225c8:	e007      	b.n	80225da <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80225ca:	68fb      	ldr	r3, [r7, #12]
 80225cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80225ce:	4613      	mov	r3, r2
 80225d0:	00db      	lsls	r3, r3, #3
 80225d2:	1a9b      	subs	r3, r3, r2
 80225d4:	08da      	lsrs	r2, r3, #3
 80225d6:	68fb      	ldr	r3, [r7, #12]
 80225d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80225da:	683b      	ldr	r3, [r7, #0]
 80225dc:	691a      	ldr	r2, [r3, #16]
 80225de:	68fb      	ldr	r3, [r7, #12]
 80225e0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80225e2:	4b11      	ldr	r3, [pc, #68]	; (8022628 <dhcp_handle_ack+0xb8>)
 80225e4:	799b      	ldrb	r3, [r3, #6]
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	d00b      	beq.n	8022602 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80225ea:	4b10      	ldr	r3, [pc, #64]	; (802262c <dhcp_handle_ack+0xbc>)
 80225ec:	699b      	ldr	r3, [r3, #24]
 80225ee:	4618      	mov	r0, r3
 80225f0:	f7f7 fdc3 	bl	801a17a <lwip_htonl>
 80225f4:	4602      	mov	r2, r0
 80225f6:	68fb      	ldr	r3, [r7, #12]
 80225f8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80225fa:	68fb      	ldr	r3, [r7, #12]
 80225fc:	2201      	movs	r2, #1
 80225fe:	71da      	strb	r2, [r3, #7]
 8022600:	e002      	b.n	8022608 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8022602:	68fb      	ldr	r3, [r7, #12]
 8022604:	2200      	movs	r2, #0
 8022606:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8022608:	4b07      	ldr	r3, [pc, #28]	; (8022628 <dhcp_handle_ack+0xb8>)
 802260a:	79db      	ldrb	r3, [r3, #7]
 802260c:	2b00      	cmp	r3, #0
 802260e:	d007      	beq.n	8022620 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8022610:	4b06      	ldr	r3, [pc, #24]	; (802262c <dhcp_handle_ack+0xbc>)
 8022612:	69db      	ldr	r3, [r3, #28]
 8022614:	4618      	mov	r0, r3
 8022616:	f7f7 fdb0 	bl	801a17a <lwip_htonl>
 802261a:	4602      	mov	r2, r0
 802261c:	68fb      	ldr	r3, [r7, #12]
 802261e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8022620:	bf00      	nop
 8022622:	3710      	adds	r7, #16
 8022624:	46bd      	mov	sp, r7
 8022626:	bd80      	pop	{r7, pc}
 8022628:	2400cfd8 	.word	0x2400cfd8
 802262c:	2400cfb8 	.word	0x2400cfb8

08022630 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8022630:	b580      	push	{r7, lr}
 8022632:	b084      	sub	sp, #16
 8022634:	af00      	add	r7, sp, #0
 8022636:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	2b00      	cmp	r3, #0
 802263c:	d109      	bne.n	8022652 <dhcp_start+0x22>
 802263e:	4b37      	ldr	r3, [pc, #220]	; (802271c <dhcp_start+0xec>)
 8022640:	f240 22e7 	movw	r2, #743	; 0x2e7
 8022644:	4936      	ldr	r1, [pc, #216]	; (8022720 <dhcp_start+0xf0>)
 8022646:	4837      	ldr	r0, [pc, #220]	; (8022724 <dhcp_start+0xf4>)
 8022648:	f004 ff36 	bl	80274b8 <iprintf>
 802264c:	f06f 030f 	mvn.w	r3, #15
 8022650:	e060      	b.n	8022714 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022658:	f003 0301 	and.w	r3, r3, #1
 802265c:	2b00      	cmp	r3, #0
 802265e:	d109      	bne.n	8022674 <dhcp_start+0x44>
 8022660:	4b2e      	ldr	r3, [pc, #184]	; (802271c <dhcp_start+0xec>)
 8022662:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8022666:	4930      	ldr	r1, [pc, #192]	; (8022728 <dhcp_start+0xf8>)
 8022668:	482e      	ldr	r0, [pc, #184]	; (8022724 <dhcp_start+0xf4>)
 802266a:	f004 ff25 	bl	80274b8 <iprintf>
 802266e:	f06f 030f 	mvn.w	r3, #15
 8022672:	e04f      	b.n	8022714 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022678:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802267e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8022682:	d202      	bcs.n	802268a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8022684:	f04f 33ff 	mov.w	r3, #4294967295
 8022688:	e044      	b.n	8022714 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	2b00      	cmp	r3, #0
 802268e:	d10d      	bne.n	80226ac <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8022690:	2034      	movs	r0, #52	; 0x34
 8022692:	f7f8 f949 	bl	801a928 <mem_malloc>
 8022696:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8022698:	68fb      	ldr	r3, [r7, #12]
 802269a:	2b00      	cmp	r3, #0
 802269c:	d102      	bne.n	80226a4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 802269e:	f04f 33ff 	mov.w	r3, #4294967295
 80226a2:	e037      	b.n	8022714 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	68fa      	ldr	r2, [r7, #12]
 80226a8:	625a      	str	r2, [r3, #36]	; 0x24
 80226aa:	e005      	b.n	80226b8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80226ac:	68fb      	ldr	r3, [r7, #12]
 80226ae:	791b      	ldrb	r3, [r3, #4]
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d001      	beq.n	80226b8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80226b4:	f7ff fc90 	bl	8021fd8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80226b8:	2234      	movs	r2, #52	; 0x34
 80226ba:	2100      	movs	r1, #0
 80226bc:	68f8      	ldr	r0, [r7, #12]
 80226be:	f004 fdfd 	bl	80272bc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80226c2:	f7ff fc37 	bl	8021f34 <dhcp_inc_pcb_refcount>
 80226c6:	4603      	mov	r3, r0
 80226c8:	2b00      	cmp	r3, #0
 80226ca:	d002      	beq.n	80226d2 <dhcp_start+0xa2>
    return ERR_MEM;
 80226cc:	f04f 33ff 	mov.w	r3, #4294967295
 80226d0:	e020      	b.n	8022714 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80226d2:	68fb      	ldr	r3, [r7, #12]
 80226d4:	2201      	movs	r2, #1
 80226d6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80226de:	f003 0304 	and.w	r3, r3, #4
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	d105      	bne.n	80226f2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80226e6:	2102      	movs	r1, #2
 80226e8:	68f8      	ldr	r0, [r7, #12]
 80226ea:	f000 fd01 	bl	80230f0 <dhcp_set_state>
    return ERR_OK;
 80226ee:	2300      	movs	r3, #0
 80226f0:	e010      	b.n	8022714 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80226f2:	6878      	ldr	r0, [r7, #4]
 80226f4:	f000 f8f8 	bl	80228e8 <dhcp_discover>
 80226f8:	4603      	mov	r3, r0
 80226fa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80226fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022700:	2b00      	cmp	r3, #0
 8022702:	d005      	beq.n	8022710 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8022704:	6878      	ldr	r0, [r7, #4]
 8022706:	f000 fc59 	bl	8022fbc <dhcp_release_and_stop>
    return ERR_MEM;
 802270a:	f04f 33ff 	mov.w	r3, #4294967295
 802270e:	e001      	b.n	8022714 <dhcp_start+0xe4>
  }
  return result;
 8022710:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8022714:	4618      	mov	r0, r3
 8022716:	3710      	adds	r7, #16
 8022718:	46bd      	mov	sp, r7
 802271a:	bd80      	pop	{r7, pc}
 802271c:	0802a850 	.word	0x0802a850
 8022720:	0802a934 	.word	0x0802a934
 8022724:	0802a8b0 	.word	0x0802a8b0
 8022728:	0802a978 	.word	0x0802a978

0802272c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 802272c:	b580      	push	{r7, lr}
 802272e:	b084      	sub	sp, #16
 8022730:	af00      	add	r7, sp, #0
 8022732:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022738:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 802273a:	68fb      	ldr	r3, [r7, #12]
 802273c:	2b00      	cmp	r3, #0
 802273e:	d025      	beq.n	802278c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	795b      	ldrb	r3, [r3, #5]
 8022744:	2b0a      	cmp	r3, #10
 8022746:	d008      	beq.n	802275a <dhcp_network_changed+0x2e>
 8022748:	2b0a      	cmp	r3, #10
 802274a:	dc0d      	bgt.n	8022768 <dhcp_network_changed+0x3c>
 802274c:	2b00      	cmp	r3, #0
 802274e:	d01f      	beq.n	8022790 <dhcp_network_changed+0x64>
 8022750:	2b00      	cmp	r3, #0
 8022752:	db09      	blt.n	8022768 <dhcp_network_changed+0x3c>
 8022754:	3b03      	subs	r3, #3
 8022756:	2b02      	cmp	r3, #2
 8022758:	d806      	bhi.n	8022768 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 802275a:	68fb      	ldr	r3, [r7, #12]
 802275c:	2200      	movs	r2, #0
 802275e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8022760:	6878      	ldr	r0, [r7, #4]
 8022762:	f000 fb75 	bl	8022e50 <dhcp_reboot>
      break;
 8022766:	e014      	b.n	8022792 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8022768:	68fb      	ldr	r3, [r7, #12]
 802276a:	795b      	ldrb	r3, [r3, #5]
 802276c:	2b0c      	cmp	r3, #12
 802276e:	d906      	bls.n	802277e <dhcp_network_changed+0x52>
 8022770:	4b09      	ldr	r3, [pc, #36]	; (8022798 <dhcp_network_changed+0x6c>)
 8022772:	f240 326d 	movw	r2, #877	; 0x36d
 8022776:	4909      	ldr	r1, [pc, #36]	; (802279c <dhcp_network_changed+0x70>)
 8022778:	4809      	ldr	r0, [pc, #36]	; (80227a0 <dhcp_network_changed+0x74>)
 802277a:	f004 fe9d 	bl	80274b8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	2200      	movs	r2, #0
 8022782:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8022784:	6878      	ldr	r0, [r7, #4]
 8022786:	f000 f8af 	bl	80228e8 <dhcp_discover>
      break;
 802278a:	e002      	b.n	8022792 <dhcp_network_changed+0x66>
    return;
 802278c:	bf00      	nop
 802278e:	e000      	b.n	8022792 <dhcp_network_changed+0x66>
      break;
 8022790:	bf00      	nop
  }
}
 8022792:	3710      	adds	r7, #16
 8022794:	46bd      	mov	sp, r7
 8022796:	bd80      	pop	{r7, pc}
 8022798:	0802a850 	.word	0x0802a850
 802279c:	0802a99c 	.word	0x0802a99c
 80227a0:	0802a8b0 	.word	0x0802a8b0

080227a4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80227a4:	b580      	push	{r7, lr}
 80227a6:	b084      	sub	sp, #16
 80227a8:	af00      	add	r7, sp, #0
 80227aa:	6078      	str	r0, [r7, #4]
 80227ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	2b00      	cmp	r3, #0
 80227b2:	d107      	bne.n	80227c4 <dhcp_arp_reply+0x20>
 80227b4:	4b0e      	ldr	r3, [pc, #56]	; (80227f0 <dhcp_arp_reply+0x4c>)
 80227b6:	f240 328b 	movw	r2, #907	; 0x38b
 80227ba:	490e      	ldr	r1, [pc, #56]	; (80227f4 <dhcp_arp_reply+0x50>)
 80227bc:	480e      	ldr	r0, [pc, #56]	; (80227f8 <dhcp_arp_reply+0x54>)
 80227be:	f004 fe7b 	bl	80274b8 <iprintf>
 80227c2:	e012      	b.n	80227ea <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80227c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80227ca:	68fb      	ldr	r3, [r7, #12]
 80227cc:	2b00      	cmp	r3, #0
 80227ce:	d00c      	beq.n	80227ea <dhcp_arp_reply+0x46>
 80227d0:	68fb      	ldr	r3, [r7, #12]
 80227d2:	795b      	ldrb	r3, [r3, #5]
 80227d4:	2b08      	cmp	r3, #8
 80227d6:	d108      	bne.n	80227ea <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80227d8:	683b      	ldr	r3, [r7, #0]
 80227da:	681a      	ldr	r2, [r3, #0]
 80227dc:	68fb      	ldr	r3, [r7, #12]
 80227de:	69db      	ldr	r3, [r3, #28]
 80227e0:	429a      	cmp	r2, r3
 80227e2:	d102      	bne.n	80227ea <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80227e4:	6878      	ldr	r0, [r7, #4]
 80227e6:	f000 f809 	bl	80227fc <dhcp_decline>
    }
  }
}
 80227ea:	3710      	adds	r7, #16
 80227ec:	46bd      	mov	sp, r7
 80227ee:	bd80      	pop	{r7, pc}
 80227f0:	0802a850 	.word	0x0802a850
 80227f4:	0802a934 	.word	0x0802a934
 80227f8:	0802a8b0 	.word	0x0802a8b0

080227fc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80227fc:	b5b0      	push	{r4, r5, r7, lr}
 80227fe:	b08a      	sub	sp, #40	; 0x28
 8022800:	af02      	add	r7, sp, #8
 8022802:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022808:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 802280a:	210c      	movs	r1, #12
 802280c:	69b8      	ldr	r0, [r7, #24]
 802280e:	f000 fc6f 	bl	80230f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8022812:	f107 030c 	add.w	r3, r7, #12
 8022816:	2204      	movs	r2, #4
 8022818:	69b9      	ldr	r1, [r7, #24]
 802281a:	6878      	ldr	r0, [r7, #4]
 802281c:	f001 f8f4 	bl	8023a08 <dhcp_create_msg>
 8022820:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8022822:	697b      	ldr	r3, [r7, #20]
 8022824:	2b00      	cmp	r3, #0
 8022826:	d035      	beq.n	8022894 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8022828:	697b      	ldr	r3, [r7, #20]
 802282a:	685b      	ldr	r3, [r3, #4]
 802282c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802282e:	89b8      	ldrh	r0, [r7, #12]
 8022830:	693b      	ldr	r3, [r7, #16]
 8022832:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022836:	2304      	movs	r3, #4
 8022838:	2232      	movs	r2, #50	; 0x32
 802283a:	f000 fc73 	bl	8023124 <dhcp_option>
 802283e:	4603      	mov	r3, r0
 8022840:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022842:	89bc      	ldrh	r4, [r7, #12]
 8022844:	693b      	ldr	r3, [r7, #16]
 8022846:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 802284a:	69bb      	ldr	r3, [r7, #24]
 802284c:	69db      	ldr	r3, [r3, #28]
 802284e:	4618      	mov	r0, r3
 8022850:	f7f7 fc93 	bl	801a17a <lwip_htonl>
 8022854:	4603      	mov	r3, r0
 8022856:	461a      	mov	r2, r3
 8022858:	4629      	mov	r1, r5
 802285a:	4620      	mov	r0, r4
 802285c:	f000 fcee 	bl	802323c <dhcp_option_long>
 8022860:	4603      	mov	r3, r0
 8022862:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8022864:	89b8      	ldrh	r0, [r7, #12]
 8022866:	693b      	ldr	r3, [r7, #16]
 8022868:	33f0      	adds	r3, #240	; 0xf0
 802286a:	697a      	ldr	r2, [r7, #20]
 802286c:	4619      	mov	r1, r3
 802286e:	f001 f9a1 	bl	8023bb4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022872:	4b19      	ldr	r3, [pc, #100]	; (80228d8 <dhcp_decline+0xdc>)
 8022874:	6818      	ldr	r0, [r3, #0]
 8022876:	4b19      	ldr	r3, [pc, #100]	; (80228dc <dhcp_decline+0xe0>)
 8022878:	9301      	str	r3, [sp, #4]
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	9300      	str	r3, [sp, #0]
 802287e:	2343      	movs	r3, #67	; 0x43
 8022880:	4a17      	ldr	r2, [pc, #92]	; (80228e0 <dhcp_decline+0xe4>)
 8022882:	6979      	ldr	r1, [r7, #20]
 8022884:	f7ff f8d0 	bl	8021a28 <udp_sendto_if_src>
 8022888:	4603      	mov	r3, r0
 802288a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 802288c:	6978      	ldr	r0, [r7, #20]
 802288e:	f7f9 f915 	bl	801babc <pbuf_free>
 8022892:	e001      	b.n	8022898 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8022894:	23ff      	movs	r3, #255	; 0xff
 8022896:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8022898:	69bb      	ldr	r3, [r7, #24]
 802289a:	799b      	ldrb	r3, [r3, #6]
 802289c:	2bff      	cmp	r3, #255	; 0xff
 802289e:	d005      	beq.n	80228ac <dhcp_decline+0xb0>
    dhcp->tries++;
 80228a0:	69bb      	ldr	r3, [r7, #24]
 80228a2:	799b      	ldrb	r3, [r3, #6]
 80228a4:	3301      	adds	r3, #1
 80228a6:	b2da      	uxtb	r2, r3
 80228a8:	69bb      	ldr	r3, [r7, #24]
 80228aa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80228ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80228b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80228b2:	89fb      	ldrh	r3, [r7, #14]
 80228b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80228b8:	4a0a      	ldr	r2, [pc, #40]	; (80228e4 <dhcp_decline+0xe8>)
 80228ba:	fb82 1203 	smull	r1, r2, r2, r3
 80228be:	1152      	asrs	r2, r2, #5
 80228c0:	17db      	asrs	r3, r3, #31
 80228c2:	1ad3      	subs	r3, r2, r3
 80228c4:	b29a      	uxth	r2, r3
 80228c6:	69bb      	ldr	r3, [r7, #24]
 80228c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80228ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80228ce:	4618      	mov	r0, r3
 80228d0:	3720      	adds	r7, #32
 80228d2:	46bd      	mov	sp, r7
 80228d4:	bdb0      	pop	{r4, r5, r7, pc}
 80228d6:	bf00      	nop
 80228d8:	2400cfe0 	.word	0x2400cfe0
 80228dc:	0802bb4c 	.word	0x0802bb4c
 80228e0:	0802bb50 	.word	0x0802bb50
 80228e4:	10624dd3 	.word	0x10624dd3

080228e8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80228e8:	b580      	push	{r7, lr}
 80228ea:	b08a      	sub	sp, #40	; 0x28
 80228ec:	af02      	add	r7, sp, #8
 80228ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80228f4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80228f6:	2300      	movs	r3, #0
 80228f8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80228fa:	69bb      	ldr	r3, [r7, #24]
 80228fc:	2200      	movs	r2, #0
 80228fe:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8022900:	2106      	movs	r1, #6
 8022902:	69b8      	ldr	r0, [r7, #24]
 8022904:	f000 fbf4 	bl	80230f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8022908:	f107 0308 	add.w	r3, r7, #8
 802290c:	2201      	movs	r2, #1
 802290e:	69b9      	ldr	r1, [r7, #24]
 8022910:	6878      	ldr	r0, [r7, #4]
 8022912:	f001 f879 	bl	8023a08 <dhcp_create_msg>
 8022916:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8022918:	693b      	ldr	r3, [r7, #16]
 802291a:	2b00      	cmp	r3, #0
 802291c:	d04b      	beq.n	80229b6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 802291e:	693b      	ldr	r3, [r7, #16]
 8022920:	685b      	ldr	r3, [r3, #4]
 8022922:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022924:	8938      	ldrh	r0, [r7, #8]
 8022926:	68fb      	ldr	r3, [r7, #12]
 8022928:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802292c:	2302      	movs	r3, #2
 802292e:	2239      	movs	r2, #57	; 0x39
 8022930:	f000 fbf8 	bl	8023124 <dhcp_option>
 8022934:	4603      	mov	r3, r0
 8022936:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022938:	8938      	ldrh	r0, [r7, #8]
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022944:	461a      	mov	r2, r3
 8022946:	f000 fc47 	bl	80231d8 <dhcp_option_short>
 802294a:	4603      	mov	r3, r0
 802294c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802294e:	8938      	ldrh	r0, [r7, #8]
 8022950:	68fb      	ldr	r3, [r7, #12]
 8022952:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022956:	2303      	movs	r3, #3
 8022958:	2237      	movs	r2, #55	; 0x37
 802295a:	f000 fbe3 	bl	8023124 <dhcp_option>
 802295e:	4603      	mov	r3, r0
 8022960:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022962:	2300      	movs	r3, #0
 8022964:	77fb      	strb	r3, [r7, #31]
 8022966:	e00e      	b.n	8022986 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022968:	8938      	ldrh	r0, [r7, #8]
 802296a:	68fb      	ldr	r3, [r7, #12]
 802296c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022970:	7ffb      	ldrb	r3, [r7, #31]
 8022972:	4a29      	ldr	r2, [pc, #164]	; (8022a18 <dhcp_discover+0x130>)
 8022974:	5cd3      	ldrb	r3, [r2, r3]
 8022976:	461a      	mov	r2, r3
 8022978:	f000 fc08 	bl	802318c <dhcp_option_byte>
 802297c:	4603      	mov	r3, r0
 802297e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022980:	7ffb      	ldrb	r3, [r7, #31]
 8022982:	3301      	adds	r3, #1
 8022984:	77fb      	strb	r3, [r7, #31]
 8022986:	7ffb      	ldrb	r3, [r7, #31]
 8022988:	2b02      	cmp	r3, #2
 802298a:	d9ed      	bls.n	8022968 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802298c:	8938      	ldrh	r0, [r7, #8]
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	33f0      	adds	r3, #240	; 0xf0
 8022992:	693a      	ldr	r2, [r7, #16]
 8022994:	4619      	mov	r1, r3
 8022996:	f001 f90d 	bl	8023bb4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802299a:	4b20      	ldr	r3, [pc, #128]	; (8022a1c <dhcp_discover+0x134>)
 802299c:	6818      	ldr	r0, [r3, #0]
 802299e:	4b20      	ldr	r3, [pc, #128]	; (8022a20 <dhcp_discover+0x138>)
 80229a0:	9301      	str	r3, [sp, #4]
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	9300      	str	r3, [sp, #0]
 80229a6:	2343      	movs	r3, #67	; 0x43
 80229a8:	4a1e      	ldr	r2, [pc, #120]	; (8022a24 <dhcp_discover+0x13c>)
 80229aa:	6939      	ldr	r1, [r7, #16]
 80229ac:	f7ff f83c 	bl	8021a28 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80229b0:	6938      	ldr	r0, [r7, #16]
 80229b2:	f7f9 f883 	bl	801babc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80229b6:	69bb      	ldr	r3, [r7, #24]
 80229b8:	799b      	ldrb	r3, [r3, #6]
 80229ba:	2bff      	cmp	r3, #255	; 0xff
 80229bc:	d005      	beq.n	80229ca <dhcp_discover+0xe2>
    dhcp->tries++;
 80229be:	69bb      	ldr	r3, [r7, #24]
 80229c0:	799b      	ldrb	r3, [r3, #6]
 80229c2:	3301      	adds	r3, #1
 80229c4:	b2da      	uxtb	r2, r3
 80229c6:	69bb      	ldr	r3, [r7, #24]
 80229c8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80229ca:	69bb      	ldr	r3, [r7, #24]
 80229cc:	799b      	ldrb	r3, [r3, #6]
 80229ce:	2b05      	cmp	r3, #5
 80229d0:	d80d      	bhi.n	80229ee <dhcp_discover+0x106>
 80229d2:	69bb      	ldr	r3, [r7, #24]
 80229d4:	799b      	ldrb	r3, [r3, #6]
 80229d6:	461a      	mov	r2, r3
 80229d8:	2301      	movs	r3, #1
 80229da:	4093      	lsls	r3, r2
 80229dc:	b29b      	uxth	r3, r3
 80229de:	461a      	mov	r2, r3
 80229e0:	0152      	lsls	r2, r2, #5
 80229e2:	1ad2      	subs	r2, r2, r3
 80229e4:	0092      	lsls	r2, r2, #2
 80229e6:	4413      	add	r3, r2
 80229e8:	00db      	lsls	r3, r3, #3
 80229ea:	b29b      	uxth	r3, r3
 80229ec:	e001      	b.n	80229f2 <dhcp_discover+0x10a>
 80229ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80229f2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80229f4:	897b      	ldrh	r3, [r7, #10]
 80229f6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80229fa:	4a0b      	ldr	r2, [pc, #44]	; (8022a28 <dhcp_discover+0x140>)
 80229fc:	fb82 1203 	smull	r1, r2, r2, r3
 8022a00:	1152      	asrs	r2, r2, #5
 8022a02:	17db      	asrs	r3, r3, #31
 8022a04:	1ad3      	subs	r3, r2, r3
 8022a06:	b29a      	uxth	r2, r3
 8022a08:	69bb      	ldr	r3, [r7, #24]
 8022a0a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8022a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022a10:	4618      	mov	r0, r3
 8022a12:	3720      	adds	r7, #32
 8022a14:	46bd      	mov	sp, r7
 8022a16:	bd80      	pop	{r7, pc}
 8022a18:	24000464 	.word	0x24000464
 8022a1c:	2400cfe0 	.word	0x2400cfe0
 8022a20:	0802bb4c 	.word	0x0802bb4c
 8022a24:	0802bb50 	.word	0x0802bb50
 8022a28:	10624dd3 	.word	0x10624dd3

08022a2c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8022a2c:	b580      	push	{r7, lr}
 8022a2e:	b088      	sub	sp, #32
 8022a30:	af00      	add	r7, sp, #0
 8022a32:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8022a34:	687b      	ldr	r3, [r7, #4]
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d107      	bne.n	8022a4a <dhcp_bind+0x1e>
 8022a3a:	4b64      	ldr	r3, [pc, #400]	; (8022bcc <dhcp_bind+0x1a0>)
 8022a3c:	f240 4215 	movw	r2, #1045	; 0x415
 8022a40:	4963      	ldr	r1, [pc, #396]	; (8022bd0 <dhcp_bind+0x1a4>)
 8022a42:	4864      	ldr	r0, [pc, #400]	; (8022bd4 <dhcp_bind+0x1a8>)
 8022a44:	f004 fd38 	bl	80274b8 <iprintf>
 8022a48:	e0bc      	b.n	8022bc4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a4e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8022a50:	69bb      	ldr	r3, [r7, #24]
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	d107      	bne.n	8022a66 <dhcp_bind+0x3a>
 8022a56:	4b5d      	ldr	r3, [pc, #372]	; (8022bcc <dhcp_bind+0x1a0>)
 8022a58:	f240 4217 	movw	r2, #1047	; 0x417
 8022a5c:	495e      	ldr	r1, [pc, #376]	; (8022bd8 <dhcp_bind+0x1ac>)
 8022a5e:	485d      	ldr	r0, [pc, #372]	; (8022bd4 <dhcp_bind+0x1a8>)
 8022a60:	f004 fd2a 	bl	80274b8 <iprintf>
 8022a64:	e0ae      	b.n	8022bc4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8022a66:	69bb      	ldr	r3, [r7, #24]
 8022a68:	2200      	movs	r2, #0
 8022a6a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8022a6c:	69bb      	ldr	r3, [r7, #24]
 8022a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022a74:	d019      	beq.n	8022aaa <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8022a76:	69bb      	ldr	r3, [r7, #24]
 8022a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a7a:	331e      	adds	r3, #30
 8022a7c:	4a57      	ldr	r2, [pc, #348]	; (8022bdc <dhcp_bind+0x1b0>)
 8022a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8022a82:	095b      	lsrs	r3, r3, #5
 8022a84:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8022a86:	69fb      	ldr	r3, [r7, #28]
 8022a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022a8c:	d302      	bcc.n	8022a94 <dhcp_bind+0x68>
      timeout = 0xffff;
 8022a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022a92:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8022a94:	69fb      	ldr	r3, [r7, #28]
 8022a96:	b29a      	uxth	r2, r3
 8022a98:	69bb      	ldr	r3, [r7, #24]
 8022a9a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8022a9c:	69bb      	ldr	r3, [r7, #24]
 8022a9e:	8a9b      	ldrh	r3, [r3, #20]
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	d102      	bne.n	8022aaa <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8022aa4:	69bb      	ldr	r3, [r7, #24]
 8022aa6:	2201      	movs	r2, #1
 8022aa8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8022aaa:	69bb      	ldr	r3, [r7, #24]
 8022aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ab2:	d01d      	beq.n	8022af0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8022ab4:	69bb      	ldr	r3, [r7, #24]
 8022ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ab8:	331e      	adds	r3, #30
 8022aba:	4a48      	ldr	r2, [pc, #288]	; (8022bdc <dhcp_bind+0x1b0>)
 8022abc:	fba2 2303 	umull	r2, r3, r2, r3
 8022ac0:	095b      	lsrs	r3, r3, #5
 8022ac2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8022ac4:	69fb      	ldr	r3, [r7, #28]
 8022ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022aca:	d302      	bcc.n	8022ad2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8022acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022ad0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8022ad2:	69fb      	ldr	r3, [r7, #28]
 8022ad4:	b29a      	uxth	r2, r3
 8022ad6:	69bb      	ldr	r3, [r7, #24]
 8022ad8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8022ada:	69bb      	ldr	r3, [r7, #24]
 8022adc:	895b      	ldrh	r3, [r3, #10]
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d102      	bne.n	8022ae8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8022ae2:	69bb      	ldr	r3, [r7, #24]
 8022ae4:	2201      	movs	r2, #1
 8022ae6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8022ae8:	69bb      	ldr	r3, [r7, #24]
 8022aea:	895a      	ldrh	r2, [r3, #10]
 8022aec:	69bb      	ldr	r3, [r7, #24]
 8022aee:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8022af0:	69bb      	ldr	r3, [r7, #24]
 8022af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022af8:	d01d      	beq.n	8022b36 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8022afa:	69bb      	ldr	r3, [r7, #24]
 8022afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022afe:	331e      	adds	r3, #30
 8022b00:	4a36      	ldr	r2, [pc, #216]	; (8022bdc <dhcp_bind+0x1b0>)
 8022b02:	fba2 2303 	umull	r2, r3, r2, r3
 8022b06:	095b      	lsrs	r3, r3, #5
 8022b08:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8022b0a:	69fb      	ldr	r3, [r7, #28]
 8022b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022b10:	d302      	bcc.n	8022b18 <dhcp_bind+0xec>
      timeout = 0xffff;
 8022b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022b16:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8022b18:	69fb      	ldr	r3, [r7, #28]
 8022b1a:	b29a      	uxth	r2, r3
 8022b1c:	69bb      	ldr	r3, [r7, #24]
 8022b1e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8022b20:	69bb      	ldr	r3, [r7, #24]
 8022b22:	899b      	ldrh	r3, [r3, #12]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d102      	bne.n	8022b2e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8022b28:	69bb      	ldr	r3, [r7, #24]
 8022b2a:	2201      	movs	r2, #1
 8022b2c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8022b2e:	69bb      	ldr	r3, [r7, #24]
 8022b30:	899a      	ldrh	r2, [r3, #12]
 8022b32:	69bb      	ldr	r3, [r7, #24]
 8022b34:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8022b36:	69bb      	ldr	r3, [r7, #24]
 8022b38:	895a      	ldrh	r2, [r3, #10]
 8022b3a:	69bb      	ldr	r3, [r7, #24]
 8022b3c:	899b      	ldrh	r3, [r3, #12]
 8022b3e:	429a      	cmp	r2, r3
 8022b40:	d306      	bcc.n	8022b50 <dhcp_bind+0x124>
 8022b42:	69bb      	ldr	r3, [r7, #24]
 8022b44:	899b      	ldrh	r3, [r3, #12]
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d002      	beq.n	8022b50 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8022b4a:	69bb      	ldr	r3, [r7, #24]
 8022b4c:	2200      	movs	r2, #0
 8022b4e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8022b50:	69bb      	ldr	r3, [r7, #24]
 8022b52:	79db      	ldrb	r3, [r3, #7]
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d003      	beq.n	8022b60 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8022b58:	69bb      	ldr	r3, [r7, #24]
 8022b5a:	6a1b      	ldr	r3, [r3, #32]
 8022b5c:	613b      	str	r3, [r7, #16]
 8022b5e:	e014      	b.n	8022b8a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8022b60:	69bb      	ldr	r3, [r7, #24]
 8022b62:	331c      	adds	r3, #28
 8022b64:	781b      	ldrb	r3, [r3, #0]
 8022b66:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8022b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	db02      	blt.n	8022b76 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8022b70:	23ff      	movs	r3, #255	; 0xff
 8022b72:	613b      	str	r3, [r7, #16]
 8022b74:	e009      	b.n	8022b8a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8022b76:	7dfb      	ldrb	r3, [r7, #23]
 8022b78:	2bbf      	cmp	r3, #191	; 0xbf
 8022b7a:	d903      	bls.n	8022b84 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8022b7c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8022b80:	613b      	str	r3, [r7, #16]
 8022b82:	e002      	b.n	8022b8a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8022b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022b88:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8022b8a:	69bb      	ldr	r3, [r7, #24]
 8022b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b8e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8022b90:	68fb      	ldr	r3, [r7, #12]
 8022b92:	2b00      	cmp	r3, #0
 8022b94:	d108      	bne.n	8022ba8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8022b96:	69bb      	ldr	r3, [r7, #24]
 8022b98:	69da      	ldr	r2, [r3, #28]
 8022b9a:	693b      	ldr	r3, [r7, #16]
 8022b9c:	4013      	ands	r3, r2
 8022b9e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8022ba0:	68fb      	ldr	r3, [r7, #12]
 8022ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022ba6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8022ba8:	210a      	movs	r1, #10
 8022baa:	69b8      	ldr	r0, [r7, #24]
 8022bac:	f000 faa0 	bl	80230f0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8022bb0:	69bb      	ldr	r3, [r7, #24]
 8022bb2:	f103 011c 	add.w	r1, r3, #28
 8022bb6:	f107 030c 	add.w	r3, r7, #12
 8022bba:	f107 0210 	add.w	r2, r7, #16
 8022bbe:	6878      	ldr	r0, [r7, #4]
 8022bc0:	f7f8 fa6e 	bl	801b0a0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8022bc4:	3720      	adds	r7, #32
 8022bc6:	46bd      	mov	sp, r7
 8022bc8:	bd80      	pop	{r7, pc}
 8022bca:	bf00      	nop
 8022bcc:	0802a850 	.word	0x0802a850
 8022bd0:	0802a9b0 	.word	0x0802a9b0
 8022bd4:	0802a8b0 	.word	0x0802a8b0
 8022bd8:	0802a9cc 	.word	0x0802a9cc
 8022bdc:	88888889 	.word	0x88888889

08022be0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8022be0:	b580      	push	{r7, lr}
 8022be2:	b08a      	sub	sp, #40	; 0x28
 8022be4:	af02      	add	r7, sp, #8
 8022be6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022bec:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8022bee:	2105      	movs	r1, #5
 8022bf0:	69b8      	ldr	r0, [r7, #24]
 8022bf2:	f000 fa7d 	bl	80230f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022bf6:	f107 030c 	add.w	r3, r7, #12
 8022bfa:	2203      	movs	r2, #3
 8022bfc:	69b9      	ldr	r1, [r7, #24]
 8022bfe:	6878      	ldr	r0, [r7, #4]
 8022c00:	f000 ff02 	bl	8023a08 <dhcp_create_msg>
 8022c04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8022c06:	697b      	ldr	r3, [r7, #20]
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	d04e      	beq.n	8022caa <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8022c0c:	697b      	ldr	r3, [r7, #20]
 8022c0e:	685b      	ldr	r3, [r3, #4]
 8022c10:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022c12:	89b8      	ldrh	r0, [r7, #12]
 8022c14:	693b      	ldr	r3, [r7, #16]
 8022c16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022c1a:	2302      	movs	r3, #2
 8022c1c:	2239      	movs	r2, #57	; 0x39
 8022c1e:	f000 fa81 	bl	8023124 <dhcp_option>
 8022c22:	4603      	mov	r3, r0
 8022c24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022c26:	89b8      	ldrh	r0, [r7, #12]
 8022c28:	693b      	ldr	r3, [r7, #16]
 8022c2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022c32:	461a      	mov	r2, r3
 8022c34:	f000 fad0 	bl	80231d8 <dhcp_option_short>
 8022c38:	4603      	mov	r3, r0
 8022c3a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022c3c:	89b8      	ldrh	r0, [r7, #12]
 8022c3e:	693b      	ldr	r3, [r7, #16]
 8022c40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022c44:	2303      	movs	r3, #3
 8022c46:	2237      	movs	r2, #55	; 0x37
 8022c48:	f000 fa6c 	bl	8023124 <dhcp_option>
 8022c4c:	4603      	mov	r3, r0
 8022c4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c50:	2300      	movs	r3, #0
 8022c52:	77bb      	strb	r3, [r7, #30]
 8022c54:	e00e      	b.n	8022c74 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022c56:	89b8      	ldrh	r0, [r7, #12]
 8022c58:	693b      	ldr	r3, [r7, #16]
 8022c5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022c5e:	7fbb      	ldrb	r3, [r7, #30]
 8022c60:	4a2a      	ldr	r2, [pc, #168]	; (8022d0c <dhcp_renew+0x12c>)
 8022c62:	5cd3      	ldrb	r3, [r2, r3]
 8022c64:	461a      	mov	r2, r3
 8022c66:	f000 fa91 	bl	802318c <dhcp_option_byte>
 8022c6a:	4603      	mov	r3, r0
 8022c6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022c6e:	7fbb      	ldrb	r3, [r7, #30]
 8022c70:	3301      	adds	r3, #1
 8022c72:	77bb      	strb	r3, [r7, #30]
 8022c74:	7fbb      	ldrb	r3, [r7, #30]
 8022c76:	2b02      	cmp	r3, #2
 8022c78:	d9ed      	bls.n	8022c56 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8022c7a:	89b8      	ldrh	r0, [r7, #12]
 8022c7c:	693b      	ldr	r3, [r7, #16]
 8022c7e:	33f0      	adds	r3, #240	; 0xf0
 8022c80:	697a      	ldr	r2, [r7, #20]
 8022c82:	4619      	mov	r1, r3
 8022c84:	f000 ff96 	bl	8023bb4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022c88:	4b21      	ldr	r3, [pc, #132]	; (8022d10 <dhcp_renew+0x130>)
 8022c8a:	6818      	ldr	r0, [r3, #0]
 8022c8c:	69bb      	ldr	r3, [r7, #24]
 8022c8e:	f103 0218 	add.w	r2, r3, #24
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	9300      	str	r3, [sp, #0]
 8022c96:	2343      	movs	r3, #67	; 0x43
 8022c98:	6979      	ldr	r1, [r7, #20]
 8022c9a:	f7fe fe51 	bl	8021940 <udp_sendto_if>
 8022c9e:	4603      	mov	r3, r0
 8022ca0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8022ca2:	6978      	ldr	r0, [r7, #20]
 8022ca4:	f7f8 ff0a 	bl	801babc <pbuf_free>
 8022ca8:	e001      	b.n	8022cae <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8022caa:	23ff      	movs	r3, #255	; 0xff
 8022cac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8022cae:	69bb      	ldr	r3, [r7, #24]
 8022cb0:	799b      	ldrb	r3, [r3, #6]
 8022cb2:	2bff      	cmp	r3, #255	; 0xff
 8022cb4:	d005      	beq.n	8022cc2 <dhcp_renew+0xe2>
    dhcp->tries++;
 8022cb6:	69bb      	ldr	r3, [r7, #24]
 8022cb8:	799b      	ldrb	r3, [r3, #6]
 8022cba:	3301      	adds	r3, #1
 8022cbc:	b2da      	uxtb	r2, r3
 8022cbe:	69bb      	ldr	r3, [r7, #24]
 8022cc0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8022cc2:	69bb      	ldr	r3, [r7, #24]
 8022cc4:	799b      	ldrb	r3, [r3, #6]
 8022cc6:	2b09      	cmp	r3, #9
 8022cc8:	d80a      	bhi.n	8022ce0 <dhcp_renew+0x100>
 8022cca:	69bb      	ldr	r3, [r7, #24]
 8022ccc:	799b      	ldrb	r3, [r3, #6]
 8022cce:	b29b      	uxth	r3, r3
 8022cd0:	461a      	mov	r2, r3
 8022cd2:	0152      	lsls	r2, r2, #5
 8022cd4:	1ad2      	subs	r2, r2, r3
 8022cd6:	0092      	lsls	r2, r2, #2
 8022cd8:	4413      	add	r3, r2
 8022cda:	011b      	lsls	r3, r3, #4
 8022cdc:	b29b      	uxth	r3, r3
 8022cde:	e001      	b.n	8022ce4 <dhcp_renew+0x104>
 8022ce0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8022ce4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022ce6:	89fb      	ldrh	r3, [r7, #14]
 8022ce8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022cec:	4a09      	ldr	r2, [pc, #36]	; (8022d14 <dhcp_renew+0x134>)
 8022cee:	fb82 1203 	smull	r1, r2, r2, r3
 8022cf2:	1152      	asrs	r2, r2, #5
 8022cf4:	17db      	asrs	r3, r3, #31
 8022cf6:	1ad3      	subs	r3, r2, r3
 8022cf8:	b29a      	uxth	r2, r3
 8022cfa:	69bb      	ldr	r3, [r7, #24]
 8022cfc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8022cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022d02:	4618      	mov	r0, r3
 8022d04:	3720      	adds	r7, #32
 8022d06:	46bd      	mov	sp, r7
 8022d08:	bd80      	pop	{r7, pc}
 8022d0a:	bf00      	nop
 8022d0c:	24000464 	.word	0x24000464
 8022d10:	2400cfe0 	.word	0x2400cfe0
 8022d14:	10624dd3 	.word	0x10624dd3

08022d18 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8022d18:	b580      	push	{r7, lr}
 8022d1a:	b08a      	sub	sp, #40	; 0x28
 8022d1c:	af02      	add	r7, sp, #8
 8022d1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d24:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8022d26:	2104      	movs	r1, #4
 8022d28:	69b8      	ldr	r0, [r7, #24]
 8022d2a:	f000 f9e1 	bl	80230f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022d2e:	f107 030c 	add.w	r3, r7, #12
 8022d32:	2203      	movs	r2, #3
 8022d34:	69b9      	ldr	r1, [r7, #24]
 8022d36:	6878      	ldr	r0, [r7, #4]
 8022d38:	f000 fe66 	bl	8023a08 <dhcp_create_msg>
 8022d3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8022d3e:	697b      	ldr	r3, [r7, #20]
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	d04c      	beq.n	8022dde <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8022d44:	697b      	ldr	r3, [r7, #20]
 8022d46:	685b      	ldr	r3, [r3, #4]
 8022d48:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022d4a:	89b8      	ldrh	r0, [r7, #12]
 8022d4c:	693b      	ldr	r3, [r7, #16]
 8022d4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022d52:	2302      	movs	r3, #2
 8022d54:	2239      	movs	r2, #57	; 0x39
 8022d56:	f000 f9e5 	bl	8023124 <dhcp_option>
 8022d5a:	4603      	mov	r3, r0
 8022d5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8022d5e:	89b8      	ldrh	r0, [r7, #12]
 8022d60:	693b      	ldr	r3, [r7, #16]
 8022d62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022d66:	687b      	ldr	r3, [r7, #4]
 8022d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022d6a:	461a      	mov	r2, r3
 8022d6c:	f000 fa34 	bl	80231d8 <dhcp_option_short>
 8022d70:	4603      	mov	r3, r0
 8022d72:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022d74:	89b8      	ldrh	r0, [r7, #12]
 8022d76:	693b      	ldr	r3, [r7, #16]
 8022d78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022d7c:	2303      	movs	r3, #3
 8022d7e:	2237      	movs	r2, #55	; 0x37
 8022d80:	f000 f9d0 	bl	8023124 <dhcp_option>
 8022d84:	4603      	mov	r3, r0
 8022d86:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022d88:	2300      	movs	r3, #0
 8022d8a:	77bb      	strb	r3, [r7, #30]
 8022d8c:	e00e      	b.n	8022dac <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022d8e:	89b8      	ldrh	r0, [r7, #12]
 8022d90:	693b      	ldr	r3, [r7, #16]
 8022d92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022d96:	7fbb      	ldrb	r3, [r7, #30]
 8022d98:	4a29      	ldr	r2, [pc, #164]	; (8022e40 <dhcp_rebind+0x128>)
 8022d9a:	5cd3      	ldrb	r3, [r2, r3]
 8022d9c:	461a      	mov	r2, r3
 8022d9e:	f000 f9f5 	bl	802318c <dhcp_option_byte>
 8022da2:	4603      	mov	r3, r0
 8022da4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022da6:	7fbb      	ldrb	r3, [r7, #30]
 8022da8:	3301      	adds	r3, #1
 8022daa:	77bb      	strb	r3, [r7, #30]
 8022dac:	7fbb      	ldrb	r3, [r7, #30]
 8022dae:	2b02      	cmp	r3, #2
 8022db0:	d9ed      	bls.n	8022d8e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8022db2:	89b8      	ldrh	r0, [r7, #12]
 8022db4:	693b      	ldr	r3, [r7, #16]
 8022db6:	33f0      	adds	r3, #240	; 0xf0
 8022db8:	697a      	ldr	r2, [r7, #20]
 8022dba:	4619      	mov	r1, r3
 8022dbc:	f000 fefa 	bl	8023bb4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022dc0:	4b20      	ldr	r3, [pc, #128]	; (8022e44 <dhcp_rebind+0x12c>)
 8022dc2:	6818      	ldr	r0, [r3, #0]
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	9300      	str	r3, [sp, #0]
 8022dc8:	2343      	movs	r3, #67	; 0x43
 8022dca:	4a1f      	ldr	r2, [pc, #124]	; (8022e48 <dhcp_rebind+0x130>)
 8022dcc:	6979      	ldr	r1, [r7, #20]
 8022dce:	f7fe fdb7 	bl	8021940 <udp_sendto_if>
 8022dd2:	4603      	mov	r3, r0
 8022dd4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8022dd6:	6978      	ldr	r0, [r7, #20]
 8022dd8:	f7f8 fe70 	bl	801babc <pbuf_free>
 8022ddc:	e001      	b.n	8022de2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8022dde:	23ff      	movs	r3, #255	; 0xff
 8022de0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8022de2:	69bb      	ldr	r3, [r7, #24]
 8022de4:	799b      	ldrb	r3, [r3, #6]
 8022de6:	2bff      	cmp	r3, #255	; 0xff
 8022de8:	d005      	beq.n	8022df6 <dhcp_rebind+0xde>
    dhcp->tries++;
 8022dea:	69bb      	ldr	r3, [r7, #24]
 8022dec:	799b      	ldrb	r3, [r3, #6]
 8022dee:	3301      	adds	r3, #1
 8022df0:	b2da      	uxtb	r2, r3
 8022df2:	69bb      	ldr	r3, [r7, #24]
 8022df4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8022df6:	69bb      	ldr	r3, [r7, #24]
 8022df8:	799b      	ldrb	r3, [r3, #6]
 8022dfa:	2b09      	cmp	r3, #9
 8022dfc:	d80a      	bhi.n	8022e14 <dhcp_rebind+0xfc>
 8022dfe:	69bb      	ldr	r3, [r7, #24]
 8022e00:	799b      	ldrb	r3, [r3, #6]
 8022e02:	b29b      	uxth	r3, r3
 8022e04:	461a      	mov	r2, r3
 8022e06:	0152      	lsls	r2, r2, #5
 8022e08:	1ad2      	subs	r2, r2, r3
 8022e0a:	0092      	lsls	r2, r2, #2
 8022e0c:	4413      	add	r3, r2
 8022e0e:	00db      	lsls	r3, r3, #3
 8022e10:	b29b      	uxth	r3, r3
 8022e12:	e001      	b.n	8022e18 <dhcp_rebind+0x100>
 8022e14:	f242 7310 	movw	r3, #10000	; 0x2710
 8022e18:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022e1a:	89fb      	ldrh	r3, [r7, #14]
 8022e1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022e20:	4a0a      	ldr	r2, [pc, #40]	; (8022e4c <dhcp_rebind+0x134>)
 8022e22:	fb82 1203 	smull	r1, r2, r2, r3
 8022e26:	1152      	asrs	r2, r2, #5
 8022e28:	17db      	asrs	r3, r3, #31
 8022e2a:	1ad3      	subs	r3, r2, r3
 8022e2c:	b29a      	uxth	r2, r3
 8022e2e:	69bb      	ldr	r3, [r7, #24]
 8022e30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8022e32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022e36:	4618      	mov	r0, r3
 8022e38:	3720      	adds	r7, #32
 8022e3a:	46bd      	mov	sp, r7
 8022e3c:	bd80      	pop	{r7, pc}
 8022e3e:	bf00      	nop
 8022e40:	24000464 	.word	0x24000464
 8022e44:	2400cfe0 	.word	0x2400cfe0
 8022e48:	0802bb50 	.word	0x0802bb50
 8022e4c:	10624dd3 	.word	0x10624dd3

08022e50 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8022e50:	b5b0      	push	{r4, r5, r7, lr}
 8022e52:	b08a      	sub	sp, #40	; 0x28
 8022e54:	af02      	add	r7, sp, #8
 8022e56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e5c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8022e5e:	2103      	movs	r1, #3
 8022e60:	69b8      	ldr	r0, [r7, #24]
 8022e62:	f000 f945 	bl	80230f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8022e66:	f107 030c 	add.w	r3, r7, #12
 8022e6a:	2203      	movs	r2, #3
 8022e6c:	69b9      	ldr	r1, [r7, #24]
 8022e6e:	6878      	ldr	r0, [r7, #4]
 8022e70:	f000 fdca 	bl	8023a08 <dhcp_create_msg>
 8022e74:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8022e76:	697b      	ldr	r3, [r7, #20]
 8022e78:	2b00      	cmp	r3, #0
 8022e7a:	d066      	beq.n	8022f4a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8022e7c:	697b      	ldr	r3, [r7, #20]
 8022e7e:	685b      	ldr	r3, [r3, #4]
 8022e80:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022e82:	89b8      	ldrh	r0, [r7, #12]
 8022e84:	693b      	ldr	r3, [r7, #16]
 8022e86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022e8a:	2302      	movs	r3, #2
 8022e8c:	2239      	movs	r2, #57	; 0x39
 8022e8e:	f000 f949 	bl	8023124 <dhcp_option>
 8022e92:	4603      	mov	r3, r0
 8022e94:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8022e96:	89b8      	ldrh	r0, [r7, #12]
 8022e98:	693b      	ldr	r3, [r7, #16]
 8022e9a:	33f0      	adds	r3, #240	; 0xf0
 8022e9c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8022ea0:	4619      	mov	r1, r3
 8022ea2:	f000 f999 	bl	80231d8 <dhcp_option_short>
 8022ea6:	4603      	mov	r3, r0
 8022ea8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8022eaa:	89b8      	ldrh	r0, [r7, #12]
 8022eac:	693b      	ldr	r3, [r7, #16]
 8022eae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022eb2:	2304      	movs	r3, #4
 8022eb4:	2232      	movs	r2, #50	; 0x32
 8022eb6:	f000 f935 	bl	8023124 <dhcp_option>
 8022eba:	4603      	mov	r3, r0
 8022ebc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8022ebe:	89bc      	ldrh	r4, [r7, #12]
 8022ec0:	693b      	ldr	r3, [r7, #16]
 8022ec2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8022ec6:	69bb      	ldr	r3, [r7, #24]
 8022ec8:	69db      	ldr	r3, [r3, #28]
 8022eca:	4618      	mov	r0, r3
 8022ecc:	f7f7 f955 	bl	801a17a <lwip_htonl>
 8022ed0:	4603      	mov	r3, r0
 8022ed2:	461a      	mov	r2, r3
 8022ed4:	4629      	mov	r1, r5
 8022ed6:	4620      	mov	r0, r4
 8022ed8:	f000 f9b0 	bl	802323c <dhcp_option_long>
 8022edc:	4603      	mov	r3, r0
 8022ede:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022ee0:	89b8      	ldrh	r0, [r7, #12]
 8022ee2:	693b      	ldr	r3, [r7, #16]
 8022ee4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022ee8:	2303      	movs	r3, #3
 8022eea:	2237      	movs	r2, #55	; 0x37
 8022eec:	f000 f91a 	bl	8023124 <dhcp_option>
 8022ef0:	4603      	mov	r3, r0
 8022ef2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022ef4:	2300      	movs	r3, #0
 8022ef6:	77bb      	strb	r3, [r7, #30]
 8022ef8:	e00e      	b.n	8022f18 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022efa:	89b8      	ldrh	r0, [r7, #12]
 8022efc:	693b      	ldr	r3, [r7, #16]
 8022efe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022f02:	7fbb      	ldrb	r3, [r7, #30]
 8022f04:	4a29      	ldr	r2, [pc, #164]	; (8022fac <dhcp_reboot+0x15c>)
 8022f06:	5cd3      	ldrb	r3, [r2, r3]
 8022f08:	461a      	mov	r2, r3
 8022f0a:	f000 f93f 	bl	802318c <dhcp_option_byte>
 8022f0e:	4603      	mov	r3, r0
 8022f10:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022f12:	7fbb      	ldrb	r3, [r7, #30]
 8022f14:	3301      	adds	r3, #1
 8022f16:	77bb      	strb	r3, [r7, #30]
 8022f18:	7fbb      	ldrb	r3, [r7, #30]
 8022f1a:	2b02      	cmp	r3, #2
 8022f1c:	d9ed      	bls.n	8022efa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8022f1e:	89b8      	ldrh	r0, [r7, #12]
 8022f20:	693b      	ldr	r3, [r7, #16]
 8022f22:	33f0      	adds	r3, #240	; 0xf0
 8022f24:	697a      	ldr	r2, [r7, #20]
 8022f26:	4619      	mov	r1, r3
 8022f28:	f000 fe44 	bl	8023bb4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8022f2c:	4b20      	ldr	r3, [pc, #128]	; (8022fb0 <dhcp_reboot+0x160>)
 8022f2e:	6818      	ldr	r0, [r3, #0]
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	9300      	str	r3, [sp, #0]
 8022f34:	2343      	movs	r3, #67	; 0x43
 8022f36:	4a1f      	ldr	r2, [pc, #124]	; (8022fb4 <dhcp_reboot+0x164>)
 8022f38:	6979      	ldr	r1, [r7, #20]
 8022f3a:	f7fe fd01 	bl	8021940 <udp_sendto_if>
 8022f3e:	4603      	mov	r3, r0
 8022f40:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8022f42:	6978      	ldr	r0, [r7, #20]
 8022f44:	f7f8 fdba 	bl	801babc <pbuf_free>
 8022f48:	e001      	b.n	8022f4e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8022f4a:	23ff      	movs	r3, #255	; 0xff
 8022f4c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8022f4e:	69bb      	ldr	r3, [r7, #24]
 8022f50:	799b      	ldrb	r3, [r3, #6]
 8022f52:	2bff      	cmp	r3, #255	; 0xff
 8022f54:	d005      	beq.n	8022f62 <dhcp_reboot+0x112>
    dhcp->tries++;
 8022f56:	69bb      	ldr	r3, [r7, #24]
 8022f58:	799b      	ldrb	r3, [r3, #6]
 8022f5a:	3301      	adds	r3, #1
 8022f5c:	b2da      	uxtb	r2, r3
 8022f5e:	69bb      	ldr	r3, [r7, #24]
 8022f60:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8022f62:	69bb      	ldr	r3, [r7, #24]
 8022f64:	799b      	ldrb	r3, [r3, #6]
 8022f66:	2b09      	cmp	r3, #9
 8022f68:	d80a      	bhi.n	8022f80 <dhcp_reboot+0x130>
 8022f6a:	69bb      	ldr	r3, [r7, #24]
 8022f6c:	799b      	ldrb	r3, [r3, #6]
 8022f6e:	b29b      	uxth	r3, r3
 8022f70:	461a      	mov	r2, r3
 8022f72:	0152      	lsls	r2, r2, #5
 8022f74:	1ad2      	subs	r2, r2, r3
 8022f76:	0092      	lsls	r2, r2, #2
 8022f78:	4413      	add	r3, r2
 8022f7a:	00db      	lsls	r3, r3, #3
 8022f7c:	b29b      	uxth	r3, r3
 8022f7e:	e001      	b.n	8022f84 <dhcp_reboot+0x134>
 8022f80:	f242 7310 	movw	r3, #10000	; 0x2710
 8022f84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022f86:	89fb      	ldrh	r3, [r7, #14]
 8022f88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8022f8c:	4a0a      	ldr	r2, [pc, #40]	; (8022fb8 <dhcp_reboot+0x168>)
 8022f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8022f92:	1152      	asrs	r2, r2, #5
 8022f94:	17db      	asrs	r3, r3, #31
 8022f96:	1ad3      	subs	r3, r2, r3
 8022f98:	b29a      	uxth	r2, r3
 8022f9a:	69bb      	ldr	r3, [r7, #24]
 8022f9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8022f9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022fa2:	4618      	mov	r0, r3
 8022fa4:	3720      	adds	r7, #32
 8022fa6:	46bd      	mov	sp, r7
 8022fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8022faa:	bf00      	nop
 8022fac:	24000464 	.word	0x24000464
 8022fb0:	2400cfe0 	.word	0x2400cfe0
 8022fb4:	0802bb50 	.word	0x0802bb50
 8022fb8:	10624dd3 	.word	0x10624dd3

08022fbc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8022fbc:	b5b0      	push	{r4, r5, r7, lr}
 8022fbe:	b08a      	sub	sp, #40	; 0x28
 8022fc0:	af02      	add	r7, sp, #8
 8022fc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022fc4:	687b      	ldr	r3, [r7, #4]
 8022fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fc8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8022fca:	69fb      	ldr	r3, [r7, #28]
 8022fcc:	2b00      	cmp	r3, #0
 8022fce:	f000 8084 	beq.w	80230da <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8022fd2:	69fb      	ldr	r3, [r7, #28]
 8022fd4:	795b      	ldrb	r3, [r3, #5]
 8022fd6:	2b00      	cmp	r3, #0
 8022fd8:	f000 8081 	beq.w	80230de <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8022fdc:	69fb      	ldr	r3, [r7, #28]
 8022fde:	699b      	ldr	r3, [r3, #24]
 8022fe0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8022fe2:	69fb      	ldr	r3, [r7, #28]
 8022fe4:	2200      	movs	r2, #0
 8022fe6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8022fe8:	69fb      	ldr	r3, [r7, #28]
 8022fea:	2200      	movs	r2, #0
 8022fec:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8022fee:	69fb      	ldr	r3, [r7, #28]
 8022ff0:	2200      	movs	r2, #0
 8022ff2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8022ff4:	69fb      	ldr	r3, [r7, #28]
 8022ff6:	2200      	movs	r2, #0
 8022ff8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8022ffa:	69fb      	ldr	r3, [r7, #28]
 8022ffc:	2200      	movs	r2, #0
 8022ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8023000:	69fb      	ldr	r3, [r7, #28]
 8023002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023004:	69fb      	ldr	r3, [r7, #28]
 8023006:	62da      	str	r2, [r3, #44]	; 0x2c
 8023008:	69fb      	ldr	r3, [r7, #28]
 802300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802300c:	69fb      	ldr	r3, [r7, #28]
 802300e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8023010:	69fb      	ldr	r3, [r7, #28]
 8023012:	2200      	movs	r2, #0
 8023014:	829a      	strh	r2, [r3, #20]
 8023016:	69fb      	ldr	r3, [r7, #28]
 8023018:	8a9a      	ldrh	r2, [r3, #20]
 802301a:	69fb      	ldr	r3, [r7, #28]
 802301c:	825a      	strh	r2, [r3, #18]
 802301e:	69fb      	ldr	r3, [r7, #28]
 8023020:	8a5a      	ldrh	r2, [r3, #18]
 8023022:	69fb      	ldr	r3, [r7, #28]
 8023024:	821a      	strh	r2, [r3, #16]
 8023026:	69fb      	ldr	r3, [r7, #28]
 8023028:	8a1a      	ldrh	r2, [r3, #16]
 802302a:	69fb      	ldr	r3, [r7, #28]
 802302c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 802302e:	6878      	ldr	r0, [r7, #4]
 8023030:	f000 fdee 	bl	8023c10 <dhcp_supplied_address>
 8023034:	4603      	mov	r3, r0
 8023036:	2b00      	cmp	r3, #0
 8023038:	d03b      	beq.n	80230b2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 802303a:	f107 030e 	add.w	r3, r7, #14
 802303e:	2207      	movs	r2, #7
 8023040:	69f9      	ldr	r1, [r7, #28]
 8023042:	6878      	ldr	r0, [r7, #4]
 8023044:	f000 fce0 	bl	8023a08 <dhcp_create_msg>
 8023048:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 802304a:	69bb      	ldr	r3, [r7, #24]
 802304c:	2b00      	cmp	r3, #0
 802304e:	d030      	beq.n	80230b2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8023050:	69bb      	ldr	r3, [r7, #24]
 8023052:	685b      	ldr	r3, [r3, #4]
 8023054:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8023056:	89f8      	ldrh	r0, [r7, #14]
 8023058:	697b      	ldr	r3, [r7, #20]
 802305a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802305e:	2304      	movs	r3, #4
 8023060:	2236      	movs	r2, #54	; 0x36
 8023062:	f000 f85f 	bl	8023124 <dhcp_option>
 8023066:	4603      	mov	r3, r0
 8023068:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 802306a:	89fc      	ldrh	r4, [r7, #14]
 802306c:	697b      	ldr	r3, [r7, #20]
 802306e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8023072:	693b      	ldr	r3, [r7, #16]
 8023074:	4618      	mov	r0, r3
 8023076:	f7f7 f880 	bl	801a17a <lwip_htonl>
 802307a:	4603      	mov	r3, r0
 802307c:	461a      	mov	r2, r3
 802307e:	4629      	mov	r1, r5
 8023080:	4620      	mov	r0, r4
 8023082:	f000 f8db 	bl	802323c <dhcp_option_long>
 8023086:	4603      	mov	r3, r0
 8023088:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802308a:	89f8      	ldrh	r0, [r7, #14]
 802308c:	697b      	ldr	r3, [r7, #20]
 802308e:	33f0      	adds	r3, #240	; 0xf0
 8023090:	69ba      	ldr	r2, [r7, #24]
 8023092:	4619      	mov	r1, r3
 8023094:	f000 fd8e 	bl	8023bb4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8023098:	4b13      	ldr	r3, [pc, #76]	; (80230e8 <dhcp_release_and_stop+0x12c>)
 802309a:	6818      	ldr	r0, [r3, #0]
 802309c:	f107 0210 	add.w	r2, r7, #16
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	9300      	str	r3, [sp, #0]
 80230a4:	2343      	movs	r3, #67	; 0x43
 80230a6:	69b9      	ldr	r1, [r7, #24]
 80230a8:	f7fe fc4a 	bl	8021940 <udp_sendto_if>
      pbuf_free(p_out);
 80230ac:	69b8      	ldr	r0, [r7, #24]
 80230ae:	f7f8 fd05 	bl	801babc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80230b2:	4b0e      	ldr	r3, [pc, #56]	; (80230ec <dhcp_release_and_stop+0x130>)
 80230b4:	4a0d      	ldr	r2, [pc, #52]	; (80230ec <dhcp_release_and_stop+0x130>)
 80230b6:	490d      	ldr	r1, [pc, #52]	; (80230ec <dhcp_release_and_stop+0x130>)
 80230b8:	6878      	ldr	r0, [r7, #4]
 80230ba:	f7f7 fff1 	bl	801b0a0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80230be:	2100      	movs	r1, #0
 80230c0:	69f8      	ldr	r0, [r7, #28]
 80230c2:	f000 f815 	bl	80230f0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80230c6:	69fb      	ldr	r3, [r7, #28]
 80230c8:	791b      	ldrb	r3, [r3, #4]
 80230ca:	2b00      	cmp	r3, #0
 80230cc:	d008      	beq.n	80230e0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80230ce:	f7fe ff83 	bl	8021fd8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80230d2:	69fb      	ldr	r3, [r7, #28]
 80230d4:	2200      	movs	r2, #0
 80230d6:	711a      	strb	r2, [r3, #4]
 80230d8:	e002      	b.n	80230e0 <dhcp_release_and_stop+0x124>
    return;
 80230da:	bf00      	nop
 80230dc:	e000      	b.n	80230e0 <dhcp_release_and_stop+0x124>
    return;
 80230de:	bf00      	nop
  }
}
 80230e0:	3720      	adds	r7, #32
 80230e2:	46bd      	mov	sp, r7
 80230e4:	bdb0      	pop	{r4, r5, r7, pc}
 80230e6:	bf00      	nop
 80230e8:	2400cfe0 	.word	0x2400cfe0
 80230ec:	0802bb4c 	.word	0x0802bb4c

080230f0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80230f0:	b480      	push	{r7}
 80230f2:	b083      	sub	sp, #12
 80230f4:	af00      	add	r7, sp, #0
 80230f6:	6078      	str	r0, [r7, #4]
 80230f8:	460b      	mov	r3, r1
 80230fa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80230fc:	687b      	ldr	r3, [r7, #4]
 80230fe:	795b      	ldrb	r3, [r3, #5]
 8023100:	78fa      	ldrb	r2, [r7, #3]
 8023102:	429a      	cmp	r2, r3
 8023104:	d008      	beq.n	8023118 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8023106:	687b      	ldr	r3, [r7, #4]
 8023108:	78fa      	ldrb	r2, [r7, #3]
 802310a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	2200      	movs	r2, #0
 8023110:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8023112:	687b      	ldr	r3, [r7, #4]
 8023114:	2200      	movs	r2, #0
 8023116:	811a      	strh	r2, [r3, #8]
  }
}
 8023118:	bf00      	nop
 802311a:	370c      	adds	r7, #12
 802311c:	46bd      	mov	sp, r7
 802311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023122:	4770      	bx	lr

08023124 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8023124:	b580      	push	{r7, lr}
 8023126:	b082      	sub	sp, #8
 8023128:	af00      	add	r7, sp, #0
 802312a:	6039      	str	r1, [r7, #0]
 802312c:	4611      	mov	r1, r2
 802312e:	461a      	mov	r2, r3
 8023130:	4603      	mov	r3, r0
 8023132:	80fb      	strh	r3, [r7, #6]
 8023134:	460b      	mov	r3, r1
 8023136:	717b      	strb	r3, [r7, #5]
 8023138:	4613      	mov	r3, r2
 802313a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802313c:	88fa      	ldrh	r2, [r7, #6]
 802313e:	793b      	ldrb	r3, [r7, #4]
 8023140:	4413      	add	r3, r2
 8023142:	3302      	adds	r3, #2
 8023144:	2b44      	cmp	r3, #68	; 0x44
 8023146:	d906      	bls.n	8023156 <dhcp_option+0x32>
 8023148:	4b0d      	ldr	r3, [pc, #52]	; (8023180 <dhcp_option+0x5c>)
 802314a:	f240 529a 	movw	r2, #1434	; 0x59a
 802314e:	490d      	ldr	r1, [pc, #52]	; (8023184 <dhcp_option+0x60>)
 8023150:	480d      	ldr	r0, [pc, #52]	; (8023188 <dhcp_option+0x64>)
 8023152:	f004 f9b1 	bl	80274b8 <iprintf>
  options[options_out_len++] = option_type;
 8023156:	88fb      	ldrh	r3, [r7, #6]
 8023158:	1c5a      	adds	r2, r3, #1
 802315a:	80fa      	strh	r2, [r7, #6]
 802315c:	461a      	mov	r2, r3
 802315e:	683b      	ldr	r3, [r7, #0]
 8023160:	4413      	add	r3, r2
 8023162:	797a      	ldrb	r2, [r7, #5]
 8023164:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8023166:	88fb      	ldrh	r3, [r7, #6]
 8023168:	1c5a      	adds	r2, r3, #1
 802316a:	80fa      	strh	r2, [r7, #6]
 802316c:	461a      	mov	r2, r3
 802316e:	683b      	ldr	r3, [r7, #0]
 8023170:	4413      	add	r3, r2
 8023172:	793a      	ldrb	r2, [r7, #4]
 8023174:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8023176:	88fb      	ldrh	r3, [r7, #6]
}
 8023178:	4618      	mov	r0, r3
 802317a:	3708      	adds	r7, #8
 802317c:	46bd      	mov	sp, r7
 802317e:	bd80      	pop	{r7, pc}
 8023180:	0802a850 	.word	0x0802a850
 8023184:	0802a9e4 	.word	0x0802a9e4
 8023188:	0802a8b0 	.word	0x0802a8b0

0802318c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 802318c:	b580      	push	{r7, lr}
 802318e:	b082      	sub	sp, #8
 8023190:	af00      	add	r7, sp, #0
 8023192:	4603      	mov	r3, r0
 8023194:	6039      	str	r1, [r7, #0]
 8023196:	80fb      	strh	r3, [r7, #6]
 8023198:	4613      	mov	r3, r2
 802319a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802319c:	88fb      	ldrh	r3, [r7, #6]
 802319e:	2b43      	cmp	r3, #67	; 0x43
 80231a0:	d906      	bls.n	80231b0 <dhcp_option_byte+0x24>
 80231a2:	4b0a      	ldr	r3, [pc, #40]	; (80231cc <dhcp_option_byte+0x40>)
 80231a4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80231a8:	4909      	ldr	r1, [pc, #36]	; (80231d0 <dhcp_option_byte+0x44>)
 80231aa:	480a      	ldr	r0, [pc, #40]	; (80231d4 <dhcp_option_byte+0x48>)
 80231ac:	f004 f984 	bl	80274b8 <iprintf>
  options[options_out_len++] = value;
 80231b0:	88fb      	ldrh	r3, [r7, #6]
 80231b2:	1c5a      	adds	r2, r3, #1
 80231b4:	80fa      	strh	r2, [r7, #6]
 80231b6:	461a      	mov	r2, r3
 80231b8:	683b      	ldr	r3, [r7, #0]
 80231ba:	4413      	add	r3, r2
 80231bc:	797a      	ldrb	r2, [r7, #5]
 80231be:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80231c0:	88fb      	ldrh	r3, [r7, #6]
}
 80231c2:	4618      	mov	r0, r3
 80231c4:	3708      	adds	r7, #8
 80231c6:	46bd      	mov	sp, r7
 80231c8:	bd80      	pop	{r7, pc}
 80231ca:	bf00      	nop
 80231cc:	0802a850 	.word	0x0802a850
 80231d0:	0802aa28 	.word	0x0802aa28
 80231d4:	0802a8b0 	.word	0x0802a8b0

080231d8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80231d8:	b580      	push	{r7, lr}
 80231da:	b082      	sub	sp, #8
 80231dc:	af00      	add	r7, sp, #0
 80231de:	4603      	mov	r3, r0
 80231e0:	6039      	str	r1, [r7, #0]
 80231e2:	80fb      	strh	r3, [r7, #6]
 80231e4:	4613      	mov	r3, r2
 80231e6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80231e8:	88fb      	ldrh	r3, [r7, #6]
 80231ea:	3302      	adds	r3, #2
 80231ec:	2b44      	cmp	r3, #68	; 0x44
 80231ee:	d906      	bls.n	80231fe <dhcp_option_short+0x26>
 80231f0:	4b0f      	ldr	r3, [pc, #60]	; (8023230 <dhcp_option_short+0x58>)
 80231f2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80231f6:	490f      	ldr	r1, [pc, #60]	; (8023234 <dhcp_option_short+0x5c>)
 80231f8:	480f      	ldr	r0, [pc, #60]	; (8023238 <dhcp_option_short+0x60>)
 80231fa:	f004 f95d 	bl	80274b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80231fe:	88bb      	ldrh	r3, [r7, #4]
 8023200:	0a1b      	lsrs	r3, r3, #8
 8023202:	b29a      	uxth	r2, r3
 8023204:	88fb      	ldrh	r3, [r7, #6]
 8023206:	1c59      	adds	r1, r3, #1
 8023208:	80f9      	strh	r1, [r7, #6]
 802320a:	4619      	mov	r1, r3
 802320c:	683b      	ldr	r3, [r7, #0]
 802320e:	440b      	add	r3, r1
 8023210:	b2d2      	uxtb	r2, r2
 8023212:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8023214:	88fb      	ldrh	r3, [r7, #6]
 8023216:	1c5a      	adds	r2, r3, #1
 8023218:	80fa      	strh	r2, [r7, #6]
 802321a:	461a      	mov	r2, r3
 802321c:	683b      	ldr	r3, [r7, #0]
 802321e:	4413      	add	r3, r2
 8023220:	88ba      	ldrh	r2, [r7, #4]
 8023222:	b2d2      	uxtb	r2, r2
 8023224:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8023226:	88fb      	ldrh	r3, [r7, #6]
}
 8023228:	4618      	mov	r0, r3
 802322a:	3708      	adds	r7, #8
 802322c:	46bd      	mov	sp, r7
 802322e:	bd80      	pop	{r7, pc}
 8023230:	0802a850 	.word	0x0802a850
 8023234:	0802aa60 	.word	0x0802aa60
 8023238:	0802a8b0 	.word	0x0802a8b0

0802323c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 802323c:	b580      	push	{r7, lr}
 802323e:	b084      	sub	sp, #16
 8023240:	af00      	add	r7, sp, #0
 8023242:	4603      	mov	r3, r0
 8023244:	60b9      	str	r1, [r7, #8]
 8023246:	607a      	str	r2, [r7, #4]
 8023248:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 802324a:	89fb      	ldrh	r3, [r7, #14]
 802324c:	3304      	adds	r3, #4
 802324e:	2b44      	cmp	r3, #68	; 0x44
 8023250:	d906      	bls.n	8023260 <dhcp_option_long+0x24>
 8023252:	4b19      	ldr	r3, [pc, #100]	; (80232b8 <dhcp_option_long+0x7c>)
 8023254:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8023258:	4918      	ldr	r1, [pc, #96]	; (80232bc <dhcp_option_long+0x80>)
 802325a:	4819      	ldr	r0, [pc, #100]	; (80232c0 <dhcp_option_long+0x84>)
 802325c:	f004 f92c 	bl	80274b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	0e1a      	lsrs	r2, r3, #24
 8023264:	89fb      	ldrh	r3, [r7, #14]
 8023266:	1c59      	adds	r1, r3, #1
 8023268:	81f9      	strh	r1, [r7, #14]
 802326a:	4619      	mov	r1, r3
 802326c:	68bb      	ldr	r3, [r7, #8]
 802326e:	440b      	add	r3, r1
 8023270:	b2d2      	uxtb	r2, r2
 8023272:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	0c1a      	lsrs	r2, r3, #16
 8023278:	89fb      	ldrh	r3, [r7, #14]
 802327a:	1c59      	adds	r1, r3, #1
 802327c:	81f9      	strh	r1, [r7, #14]
 802327e:	4619      	mov	r1, r3
 8023280:	68bb      	ldr	r3, [r7, #8]
 8023282:	440b      	add	r3, r1
 8023284:	b2d2      	uxtb	r2, r2
 8023286:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	0a1a      	lsrs	r2, r3, #8
 802328c:	89fb      	ldrh	r3, [r7, #14]
 802328e:	1c59      	adds	r1, r3, #1
 8023290:	81f9      	strh	r1, [r7, #14]
 8023292:	4619      	mov	r1, r3
 8023294:	68bb      	ldr	r3, [r7, #8]
 8023296:	440b      	add	r3, r1
 8023298:	b2d2      	uxtb	r2, r2
 802329a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 802329c:	89fb      	ldrh	r3, [r7, #14]
 802329e:	1c5a      	adds	r2, r3, #1
 80232a0:	81fa      	strh	r2, [r7, #14]
 80232a2:	461a      	mov	r2, r3
 80232a4:	68bb      	ldr	r3, [r7, #8]
 80232a6:	4413      	add	r3, r2
 80232a8:	687a      	ldr	r2, [r7, #4]
 80232aa:	b2d2      	uxtb	r2, r2
 80232ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80232ae:	89fb      	ldrh	r3, [r7, #14]
}
 80232b0:	4618      	mov	r0, r3
 80232b2:	3710      	adds	r7, #16
 80232b4:	46bd      	mov	sp, r7
 80232b6:	bd80      	pop	{r7, pc}
 80232b8:	0802a850 	.word	0x0802a850
 80232bc:	0802aa9c 	.word	0x0802aa9c
 80232c0:	0802a8b0 	.word	0x0802a8b0

080232c4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80232c4:	b580      	push	{r7, lr}
 80232c6:	b090      	sub	sp, #64	; 0x40
 80232c8:	af00      	add	r7, sp, #0
 80232ca:	6078      	str	r0, [r7, #4]
 80232cc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80232ce:	2300      	movs	r3, #0
 80232d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80232d2:	2300      	movs	r3, #0
 80232d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80232d6:	2208      	movs	r2, #8
 80232d8:	2100      	movs	r1, #0
 80232da:	48b5      	ldr	r0, [pc, #724]	; (80235b0 <dhcp_parse_reply+0x2ec>)
 80232dc:	f003 ffee 	bl	80272bc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80232e0:	687b      	ldr	r3, [r7, #4]
 80232e2:	895b      	ldrh	r3, [r3, #10]
 80232e4:	2b2b      	cmp	r3, #43	; 0x2b
 80232e6:	d802      	bhi.n	80232ee <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80232e8:	f06f 0301 	mvn.w	r3, #1
 80232ec:	e2a7      	b.n	802383e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	685b      	ldr	r3, [r3, #4]
 80232f2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80232f4:	23f0      	movs	r3, #240	; 0xf0
 80232f6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	891b      	ldrh	r3, [r3, #8]
 80232fc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80232fe:	687b      	ldr	r3, [r7, #4]
 8023300:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8023302:	e00c      	b.n	802331e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8023304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023306:	895b      	ldrh	r3, [r3, #10]
 8023308:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802330a:	1ad3      	subs	r3, r2, r3
 802330c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023310:	895b      	ldrh	r3, [r3, #10]
 8023312:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8023314:	1ad3      	subs	r3, r2, r3
 8023316:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8023318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802331a:	681b      	ldr	r3, [r3, #0]
 802331c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 802331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023320:	2b00      	cmp	r3, #0
 8023322:	d004      	beq.n	802332e <dhcp_parse_reply+0x6a>
 8023324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023326:	895b      	ldrh	r3, [r3, #10]
 8023328:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802332a:	429a      	cmp	r2, r3
 802332c:	d2ea      	bcs.n	8023304 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 802332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023330:	2b00      	cmp	r3, #0
 8023332:	d102      	bne.n	802333a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8023334:	f06f 0301 	mvn.w	r3, #1
 8023338:	e281      	b.n	802383e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 802333a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802333c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 802333e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8023340:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8023342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023344:	685b      	ldr	r3, [r3, #4]
 8023346:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8023348:	e239      	b.n	80237be <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 802334a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802334c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802334e:	4413      	add	r3, r2
 8023350:	781b      	ldrb	r3, [r3, #0]
 8023352:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8023354:	2300      	movs	r3, #0
 8023356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 802335a:	f04f 33ff 	mov.w	r3, #4294967295
 802335e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8023360:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023362:	3302      	adds	r3, #2
 8023364:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8023366:	8bfa      	ldrh	r2, [r7, #30]
 8023368:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802336a:	429a      	cmp	r2, r3
 802336c:	d202      	bcs.n	8023374 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 802336e:	f06f 0301 	mvn.w	r3, #1
 8023372:	e264      	b.n	802383e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8023374:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023376:	3301      	adds	r3, #1
 8023378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802337a:	8952      	ldrh	r2, [r2, #10]
 802337c:	4293      	cmp	r3, r2
 802337e:	da07      	bge.n	8023390 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8023380:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023382:	3301      	adds	r3, #1
 8023384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023386:	4413      	add	r3, r2
 8023388:	781b      	ldrb	r3, [r3, #0]
 802338a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802338e:	e00b      	b.n	80233a8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8023390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	2b00      	cmp	r3, #0
 8023396:	d004      	beq.n	80233a2 <dhcp_parse_reply+0xde>
 8023398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802339a:	681b      	ldr	r3, [r3, #0]
 802339c:	685b      	ldr	r3, [r3, #4]
 802339e:	781b      	ldrb	r3, [r3, #0]
 80233a0:	e000      	b.n	80233a4 <dhcp_parse_reply+0xe0>
 80233a2:	2300      	movs	r3, #0
 80233a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80233a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80233ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80233b0:	7dfb      	ldrb	r3, [r7, #23]
 80233b2:	2b3b      	cmp	r3, #59	; 0x3b
 80233b4:	f200 812c 	bhi.w	8023610 <dhcp_parse_reply+0x34c>
 80233b8:	a201      	add	r2, pc, #4	; (adr r2, 80233c0 <dhcp_parse_reply+0xfc>)
 80233ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80233be:	bf00      	nop
 80233c0:	080234b1 	.word	0x080234b1
 80233c4:	080234c1 	.word	0x080234c1
 80233c8:	08023611 	.word	0x08023611
 80233cc:	080234e3 	.word	0x080234e3
 80233d0:	08023611 	.word	0x08023611
 80233d4:	08023611 	.word	0x08023611
 80233d8:	08023611 	.word	0x08023611
 80233dc:	08023611 	.word	0x08023611
 80233e0:	08023611 	.word	0x08023611
 80233e4:	08023611 	.word	0x08023611
 80233e8:	08023611 	.word	0x08023611
 80233ec:	08023611 	.word	0x08023611
 80233f0:	08023611 	.word	0x08023611
 80233f4:	08023611 	.word	0x08023611
 80233f8:	08023611 	.word	0x08023611
 80233fc:	08023611 	.word	0x08023611
 8023400:	08023611 	.word	0x08023611
 8023404:	08023611 	.word	0x08023611
 8023408:	08023611 	.word	0x08023611
 802340c:	08023611 	.word	0x08023611
 8023410:	08023611 	.word	0x08023611
 8023414:	08023611 	.word	0x08023611
 8023418:	08023611 	.word	0x08023611
 802341c:	08023611 	.word	0x08023611
 8023420:	08023611 	.word	0x08023611
 8023424:	08023611 	.word	0x08023611
 8023428:	08023611 	.word	0x08023611
 802342c:	08023611 	.word	0x08023611
 8023430:	08023611 	.word	0x08023611
 8023434:	08023611 	.word	0x08023611
 8023438:	08023611 	.word	0x08023611
 802343c:	08023611 	.word	0x08023611
 8023440:	08023611 	.word	0x08023611
 8023444:	08023611 	.word	0x08023611
 8023448:	08023611 	.word	0x08023611
 802344c:	08023611 	.word	0x08023611
 8023450:	08023611 	.word	0x08023611
 8023454:	08023611 	.word	0x08023611
 8023458:	08023611 	.word	0x08023611
 802345c:	08023611 	.word	0x08023611
 8023460:	08023611 	.word	0x08023611
 8023464:	08023611 	.word	0x08023611
 8023468:	08023611 	.word	0x08023611
 802346c:	08023611 	.word	0x08023611
 8023470:	08023611 	.word	0x08023611
 8023474:	08023611 	.word	0x08023611
 8023478:	08023611 	.word	0x08023611
 802347c:	08023611 	.word	0x08023611
 8023480:	08023611 	.word	0x08023611
 8023484:	08023611 	.word	0x08023611
 8023488:	08023611 	.word	0x08023611
 802348c:	0802350f 	.word	0x0802350f
 8023490:	08023531 	.word	0x08023531
 8023494:	0802356d 	.word	0x0802356d
 8023498:	0802358f 	.word	0x0802358f
 802349c:	08023611 	.word	0x08023611
 80234a0:	08023611 	.word	0x08023611
 80234a4:	08023611 	.word	0x08023611
 80234a8:	080235cd 	.word	0x080235cd
 80234ac:	080235ef 	.word	0x080235ef
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80234b0:	2300      	movs	r3, #0
 80234b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80234b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80234ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80234be:	e0ab      	b.n	8023618 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80234c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80234c4:	2b04      	cmp	r3, #4
 80234c6:	d009      	beq.n	80234dc <dhcp_parse_reply+0x218>
 80234c8:	4b3a      	ldr	r3, [pc, #232]	; (80235b4 <dhcp_parse_reply+0x2f0>)
 80234ca:	f240 622e 	movw	r2, #1582	; 0x62e
 80234ce:	493a      	ldr	r1, [pc, #232]	; (80235b8 <dhcp_parse_reply+0x2f4>)
 80234d0:	483a      	ldr	r0, [pc, #232]	; (80235bc <dhcp_parse_reply+0x2f8>)
 80234d2:	f003 fff1 	bl	80274b8 <iprintf>
 80234d6:	f06f 0305 	mvn.w	r3, #5
 80234da:	e1b0      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80234dc:	2306      	movs	r3, #6
 80234de:	623b      	str	r3, [r7, #32]
        break;
 80234e0:	e09a      	b.n	8023618 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80234e2:	2304      	movs	r3, #4
 80234e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80234e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80234ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80234f0:	429a      	cmp	r2, r3
 80234f2:	d209      	bcs.n	8023508 <dhcp_parse_reply+0x244>
 80234f4:	4b2f      	ldr	r3, [pc, #188]	; (80235b4 <dhcp_parse_reply+0x2f0>)
 80234f6:	f240 6233 	movw	r2, #1587	; 0x633
 80234fa:	4931      	ldr	r1, [pc, #196]	; (80235c0 <dhcp_parse_reply+0x2fc>)
 80234fc:	482f      	ldr	r0, [pc, #188]	; (80235bc <dhcp_parse_reply+0x2f8>)
 80234fe:	f003 ffdb 	bl	80274b8 <iprintf>
 8023502:	f06f 0305 	mvn.w	r3, #5
 8023506:	e19a      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8023508:	2307      	movs	r3, #7
 802350a:	623b      	str	r3, [r7, #32]
        break;
 802350c:	e084      	b.n	8023618 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802350e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023512:	2b04      	cmp	r3, #4
 8023514:	d009      	beq.n	802352a <dhcp_parse_reply+0x266>
 8023516:	4b27      	ldr	r3, [pc, #156]	; (80235b4 <dhcp_parse_reply+0x2f0>)
 8023518:	f240 6241 	movw	r2, #1601	; 0x641
 802351c:	4926      	ldr	r1, [pc, #152]	; (80235b8 <dhcp_parse_reply+0x2f4>)
 802351e:	4827      	ldr	r0, [pc, #156]	; (80235bc <dhcp_parse_reply+0x2f8>)
 8023520:	f003 ffca 	bl	80274b8 <iprintf>
 8023524:	f06f 0305 	mvn.w	r3, #5
 8023528:	e189      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 802352a:	2303      	movs	r3, #3
 802352c:	623b      	str	r3, [r7, #32]
        break;
 802352e:	e073      	b.n	8023618 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8023530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023534:	2b01      	cmp	r3, #1
 8023536:	d009      	beq.n	802354c <dhcp_parse_reply+0x288>
 8023538:	4b1e      	ldr	r3, [pc, #120]	; (80235b4 <dhcp_parse_reply+0x2f0>)
 802353a:	f240 624f 	movw	r2, #1615	; 0x64f
 802353e:	4921      	ldr	r1, [pc, #132]	; (80235c4 <dhcp_parse_reply+0x300>)
 8023540:	481e      	ldr	r0, [pc, #120]	; (80235bc <dhcp_parse_reply+0x2f8>)
 8023542:	f003 ffb9 	bl	80274b8 <iprintf>
 8023546:	f06f 0305 	mvn.w	r3, #5
 802354a:	e178      	b.n	802383e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 802354c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802354e:	2bf0      	cmp	r3, #240	; 0xf0
 8023550:	d009      	beq.n	8023566 <dhcp_parse_reply+0x2a2>
 8023552:	4b18      	ldr	r3, [pc, #96]	; (80235b4 <dhcp_parse_reply+0x2f0>)
 8023554:	f240 6251 	movw	r2, #1617	; 0x651
 8023558:	491b      	ldr	r1, [pc, #108]	; (80235c8 <dhcp_parse_reply+0x304>)
 802355a:	4818      	ldr	r0, [pc, #96]	; (80235bc <dhcp_parse_reply+0x2f8>)
 802355c:	f003 ffac 	bl	80274b8 <iprintf>
 8023560:	f06f 0305 	mvn.w	r3, #5
 8023564:	e16b      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8023566:	2300      	movs	r3, #0
 8023568:	623b      	str	r3, [r7, #32]
        break;
 802356a:	e055      	b.n	8023618 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802356c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023570:	2b01      	cmp	r3, #1
 8023572:	d009      	beq.n	8023588 <dhcp_parse_reply+0x2c4>
 8023574:	4b0f      	ldr	r3, [pc, #60]	; (80235b4 <dhcp_parse_reply+0x2f0>)
 8023576:	f240 6255 	movw	r2, #1621	; 0x655
 802357a:	4912      	ldr	r1, [pc, #72]	; (80235c4 <dhcp_parse_reply+0x300>)
 802357c:	480f      	ldr	r0, [pc, #60]	; (80235bc <dhcp_parse_reply+0x2f8>)
 802357e:	f003 ff9b 	bl	80274b8 <iprintf>
 8023582:	f06f 0305 	mvn.w	r3, #5
 8023586:	e15a      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8023588:	2301      	movs	r3, #1
 802358a:	623b      	str	r3, [r7, #32]
        break;
 802358c:	e044      	b.n	8023618 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802358e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023592:	2b04      	cmp	r3, #4
 8023594:	d009      	beq.n	80235aa <dhcp_parse_reply+0x2e6>
 8023596:	4b07      	ldr	r3, [pc, #28]	; (80235b4 <dhcp_parse_reply+0x2f0>)
 8023598:	f240 6259 	movw	r2, #1625	; 0x659
 802359c:	4906      	ldr	r1, [pc, #24]	; (80235b8 <dhcp_parse_reply+0x2f4>)
 802359e:	4807      	ldr	r0, [pc, #28]	; (80235bc <dhcp_parse_reply+0x2f8>)
 80235a0:	f003 ff8a 	bl	80274b8 <iprintf>
 80235a4:	f06f 0305 	mvn.w	r3, #5
 80235a8:	e149      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80235aa:	2302      	movs	r3, #2
 80235ac:	623b      	str	r3, [r7, #32]
        break;
 80235ae:	e033      	b.n	8023618 <dhcp_parse_reply+0x354>
 80235b0:	2400cfd8 	.word	0x2400cfd8
 80235b4:	0802a850 	.word	0x0802a850
 80235b8:	0802aad8 	.word	0x0802aad8
 80235bc:	0802a8b0 	.word	0x0802a8b0
 80235c0:	0802aae4 	.word	0x0802aae4
 80235c4:	0802aaf8 	.word	0x0802aaf8
 80235c8:	0802ab04 	.word	0x0802ab04
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80235cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80235d0:	2b04      	cmp	r3, #4
 80235d2:	d009      	beq.n	80235e8 <dhcp_parse_reply+0x324>
 80235d4:	4b9c      	ldr	r3, [pc, #624]	; (8023848 <dhcp_parse_reply+0x584>)
 80235d6:	f240 625d 	movw	r2, #1629	; 0x65d
 80235da:	499c      	ldr	r1, [pc, #624]	; (802384c <dhcp_parse_reply+0x588>)
 80235dc:	489c      	ldr	r0, [pc, #624]	; (8023850 <dhcp_parse_reply+0x58c>)
 80235de:	f003 ff6b 	bl	80274b8 <iprintf>
 80235e2:	f06f 0305 	mvn.w	r3, #5
 80235e6:	e12a      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80235e8:	2304      	movs	r3, #4
 80235ea:	623b      	str	r3, [r7, #32]
        break;
 80235ec:	e014      	b.n	8023618 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80235ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80235f2:	2b04      	cmp	r3, #4
 80235f4:	d009      	beq.n	802360a <dhcp_parse_reply+0x346>
 80235f6:	4b94      	ldr	r3, [pc, #592]	; (8023848 <dhcp_parse_reply+0x584>)
 80235f8:	f240 6261 	movw	r2, #1633	; 0x661
 80235fc:	4993      	ldr	r1, [pc, #588]	; (802384c <dhcp_parse_reply+0x588>)
 80235fe:	4894      	ldr	r0, [pc, #592]	; (8023850 <dhcp_parse_reply+0x58c>)
 8023600:	f003 ff5a 	bl	80274b8 <iprintf>
 8023604:	f06f 0305 	mvn.w	r3, #5
 8023608:	e119      	b.n	802383e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 802360a:	2305      	movs	r3, #5
 802360c:	623b      	str	r3, [r7, #32]
        break;
 802360e:	e003      	b.n	8023618 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8023610:	2300      	movs	r3, #0
 8023612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8023616:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8023618:	7dfb      	ldrb	r3, [r7, #23]
 802361a:	2b00      	cmp	r3, #0
 802361c:	d103      	bne.n	8023626 <dhcp_parse_reply+0x362>
      offset++;
 802361e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023620:	3301      	adds	r3, #1
 8023622:	877b      	strh	r3, [r7, #58]	; 0x3a
 8023624:	e0a1      	b.n	802376a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8023626:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8023628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802362c:	4413      	add	r3, r2
 802362e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8023632:	4293      	cmp	r3, r2
 8023634:	dd02      	ble.n	802363c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8023636:	f06f 0301 	mvn.w	r3, #1
 802363a:	e100      	b.n	802383e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 802363c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023640:	b29a      	uxth	r2, r3
 8023642:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023644:	4413      	add	r3, r2
 8023646:	b29b      	uxth	r3, r3
 8023648:	3302      	adds	r3, #2
 802364a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 802364c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8023650:	2b00      	cmp	r3, #0
 8023652:	f000 808a 	beq.w	802376a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8023656:	2300      	movs	r3, #0
 8023658:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 802365a:	6a3b      	ldr	r3, [r7, #32]
 802365c:	2b00      	cmp	r3, #0
 802365e:	db02      	blt.n	8023666 <dhcp_parse_reply+0x3a2>
 8023660:	6a3b      	ldr	r3, [r7, #32]
 8023662:	2b07      	cmp	r3, #7
 8023664:	dd06      	ble.n	8023674 <dhcp_parse_reply+0x3b0>
 8023666:	4b78      	ldr	r3, [pc, #480]	; (8023848 <dhcp_parse_reply+0x584>)
 8023668:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 802366c:	4979      	ldr	r1, [pc, #484]	; (8023854 <dhcp_parse_reply+0x590>)
 802366e:	4878      	ldr	r0, [pc, #480]	; (8023850 <dhcp_parse_reply+0x58c>)
 8023670:	f003 ff22 	bl	80274b8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8023674:	4a78      	ldr	r2, [pc, #480]	; (8023858 <dhcp_parse_reply+0x594>)
 8023676:	6a3b      	ldr	r3, [r7, #32]
 8023678:	4413      	add	r3, r2
 802367a:	781b      	ldrb	r3, [r3, #0]
 802367c:	2b00      	cmp	r3, #0
 802367e:	d174      	bne.n	802376a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8023680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8023684:	2b04      	cmp	r3, #4
 8023686:	bf28      	it	cs
 8023688:	2304      	movcs	r3, #4
 802368a:	b2db      	uxtb	r3, r3
 802368c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802368e:	8bfb      	ldrh	r3, [r7, #30]
 8023690:	8aba      	ldrh	r2, [r7, #20]
 8023692:	f107 0108 	add.w	r1, r7, #8
 8023696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023698:	f7f8 fc16 	bl	801bec8 <pbuf_copy_partial>
 802369c:	4603      	mov	r3, r0
 802369e:	461a      	mov	r2, r3
 80236a0:	8abb      	ldrh	r3, [r7, #20]
 80236a2:	4293      	cmp	r3, r2
 80236a4:	d002      	beq.n	80236ac <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80236a6:	f06f 0301 	mvn.w	r3, #1
 80236aa:	e0c8      	b.n	802383e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80236ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80236b0:	2b04      	cmp	r3, #4
 80236b2:	d933      	bls.n	802371c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80236b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80236b8:	f003 0303 	and.w	r3, r3, #3
 80236bc:	b2db      	uxtb	r3, r3
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d009      	beq.n	80236d6 <dhcp_parse_reply+0x412>
 80236c2:	4b61      	ldr	r3, [pc, #388]	; (8023848 <dhcp_parse_reply+0x584>)
 80236c4:	f240 6281 	movw	r2, #1665	; 0x681
 80236c8:	4964      	ldr	r1, [pc, #400]	; (802385c <dhcp_parse_reply+0x598>)
 80236ca:	4861      	ldr	r0, [pc, #388]	; (8023850 <dhcp_parse_reply+0x58c>)
 80236cc:	f003 fef4 	bl	80274b8 <iprintf>
 80236d0:	f06f 0305 	mvn.w	r3, #5
 80236d4:	e0b3      	b.n	802383e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80236d6:	4a60      	ldr	r2, [pc, #384]	; (8023858 <dhcp_parse_reply+0x594>)
 80236d8:	6a3b      	ldr	r3, [r7, #32]
 80236da:	4413      	add	r3, r2
 80236dc:	2201      	movs	r2, #1
 80236de:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80236e0:	68bb      	ldr	r3, [r7, #8]
 80236e2:	4618      	mov	r0, r3
 80236e4:	f7f6 fd49 	bl	801a17a <lwip_htonl>
 80236e8:	4602      	mov	r2, r0
 80236ea:	495d      	ldr	r1, [pc, #372]	; (8023860 <dhcp_parse_reply+0x59c>)
 80236ec:	6a3b      	ldr	r3, [r7, #32]
 80236ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80236f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80236f6:	3b04      	subs	r3, #4
 80236f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80236fc:	8bfb      	ldrh	r3, [r7, #30]
 80236fe:	3304      	adds	r3, #4
 8023700:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8023702:	8a7a      	ldrh	r2, [r7, #18]
 8023704:	8bfb      	ldrh	r3, [r7, #30]
 8023706:	429a      	cmp	r2, r3
 8023708:	d202      	bcs.n	8023710 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 802370a:	f06f 0301 	mvn.w	r3, #1
 802370e:	e096      	b.n	802383e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8023710:	8a7b      	ldrh	r3, [r7, #18]
 8023712:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8023714:	6a3b      	ldr	r3, [r7, #32]
 8023716:	3301      	adds	r3, #1
 8023718:	623b      	str	r3, [r7, #32]
            goto decode_next;
 802371a:	e79e      	b.n	802365a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 802371c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8023720:	2b04      	cmp	r3, #4
 8023722:	d106      	bne.n	8023732 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8023724:	68bb      	ldr	r3, [r7, #8]
 8023726:	4618      	mov	r0, r3
 8023728:	f7f6 fd27 	bl	801a17a <lwip_htonl>
 802372c:	4603      	mov	r3, r0
 802372e:	60bb      	str	r3, [r7, #8]
 8023730:	e011      	b.n	8023756 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8023732:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8023736:	2b01      	cmp	r3, #1
 8023738:	d009      	beq.n	802374e <dhcp_parse_reply+0x48a>
 802373a:	4b43      	ldr	r3, [pc, #268]	; (8023848 <dhcp_parse_reply+0x584>)
 802373c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8023740:	4948      	ldr	r1, [pc, #288]	; (8023864 <dhcp_parse_reply+0x5a0>)
 8023742:	4843      	ldr	r0, [pc, #268]	; (8023850 <dhcp_parse_reply+0x58c>)
 8023744:	f003 feb8 	bl	80274b8 <iprintf>
 8023748:	f06f 0305 	mvn.w	r3, #5
 802374c:	e077      	b.n	802383e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 802374e:	f107 0308 	add.w	r3, r7, #8
 8023752:	781b      	ldrb	r3, [r3, #0]
 8023754:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8023756:	4a40      	ldr	r2, [pc, #256]	; (8023858 <dhcp_parse_reply+0x594>)
 8023758:	6a3b      	ldr	r3, [r7, #32]
 802375a:	4413      	add	r3, r2
 802375c:	2201      	movs	r2, #1
 802375e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8023760:	68ba      	ldr	r2, [r7, #8]
 8023762:	493f      	ldr	r1, [pc, #252]	; (8023860 <dhcp_parse_reply+0x59c>)
 8023764:	6a3b      	ldr	r3, [r7, #32]
 8023766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 802376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802376c:	895b      	ldrh	r3, [r3, #10]
 802376e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8023770:	429a      	cmp	r2, r3
 8023772:	d324      	bcc.n	80237be <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8023774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023776:	895b      	ldrh	r3, [r3, #10]
 8023778:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802377a:	1ad3      	subs	r3, r2, r3
 802377c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 802377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023780:	895b      	ldrh	r3, [r3, #10]
 8023782:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8023784:	1ad3      	subs	r3, r2, r3
 8023786:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8023788:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802378a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802378c:	429a      	cmp	r2, r3
 802378e:	d213      	bcs.n	80237b8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8023790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023792:	681b      	ldr	r3, [r3, #0]
 8023794:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8023796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023798:	2b00      	cmp	r3, #0
 802379a:	d109      	bne.n	80237b0 <dhcp_parse_reply+0x4ec>
 802379c:	4b2a      	ldr	r3, [pc, #168]	; (8023848 <dhcp_parse_reply+0x584>)
 802379e:	f240 629d 	movw	r2, #1693	; 0x69d
 80237a2:	4931      	ldr	r1, [pc, #196]	; (8023868 <dhcp_parse_reply+0x5a4>)
 80237a4:	482a      	ldr	r0, [pc, #168]	; (8023850 <dhcp_parse_reply+0x58c>)
 80237a6:	f003 fe87 	bl	80274b8 <iprintf>
 80237aa:	f06f 0305 	mvn.w	r3, #5
 80237ae:	e046      	b.n	802383e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80237b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80237b2:	685b      	ldr	r3, [r3, #4]
 80237b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80237b6:	e002      	b.n	80237be <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80237b8:	f06f 0301 	mvn.w	r3, #1
 80237bc:	e03f      	b.n	802383e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80237be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80237c0:	2b00      	cmp	r3, #0
 80237c2:	d00a      	beq.n	80237da <dhcp_parse_reply+0x516>
 80237c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80237c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80237c8:	429a      	cmp	r2, r3
 80237ca:	d206      	bcs.n	80237da <dhcp_parse_reply+0x516>
 80237cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80237ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80237d0:	4413      	add	r3, r2
 80237d2:	781b      	ldrb	r3, [r3, #0]
 80237d4:	2bff      	cmp	r3, #255	; 0xff
 80237d6:	f47f adb8 	bne.w	802334a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80237da:	4b1f      	ldr	r3, [pc, #124]	; (8023858 <dhcp_parse_reply+0x594>)
 80237dc:	781b      	ldrb	r3, [r3, #0]
 80237de:	2b00      	cmp	r3, #0
 80237e0:	d018      	beq.n	8023814 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80237e2:	4b1f      	ldr	r3, [pc, #124]	; (8023860 <dhcp_parse_reply+0x59c>)
 80237e4:	681b      	ldr	r3, [r3, #0]
 80237e6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80237e8:	4b1b      	ldr	r3, [pc, #108]	; (8023858 <dhcp_parse_reply+0x594>)
 80237ea:	2200      	movs	r2, #0
 80237ec:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80237ee:	68fb      	ldr	r3, [r7, #12]
 80237f0:	2b01      	cmp	r3, #1
 80237f2:	d102      	bne.n	80237fa <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80237f4:	2301      	movs	r3, #1
 80237f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80237f8:	e00c      	b.n	8023814 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80237fa:	68fb      	ldr	r3, [r7, #12]
 80237fc:	2b02      	cmp	r3, #2
 80237fe:	d102      	bne.n	8023806 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8023800:	2301      	movs	r3, #1
 8023802:	62bb      	str	r3, [r7, #40]	; 0x28
 8023804:	e006      	b.n	8023814 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8023806:	68fb      	ldr	r3, [r7, #12]
 8023808:	2b03      	cmp	r3, #3
 802380a:	d103      	bne.n	8023814 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 802380c:	2301      	movs	r3, #1
 802380e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8023810:	2301      	movs	r3, #1
 8023812:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8023814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023816:	2b00      	cmp	r3, #0
 8023818:	d006      	beq.n	8023828 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 802381a:	2300      	movs	r3, #0
 802381c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 802381e:	236c      	movs	r3, #108	; 0x6c
 8023820:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8023822:	23ec      	movs	r3, #236	; 0xec
 8023824:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8023826:	e56a      	b.n	80232fe <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8023828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802382a:	2b00      	cmp	r3, #0
 802382c:	d006      	beq.n	802383c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 802382e:	2300      	movs	r3, #0
 8023830:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8023832:	232c      	movs	r3, #44	; 0x2c
 8023834:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8023836:	236c      	movs	r3, #108	; 0x6c
 8023838:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 802383a:	e560      	b.n	80232fe <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 802383c:	2300      	movs	r3, #0
}
 802383e:	4618      	mov	r0, r3
 8023840:	3740      	adds	r7, #64	; 0x40
 8023842:	46bd      	mov	sp, r7
 8023844:	bd80      	pop	{r7, pc}
 8023846:	bf00      	nop
 8023848:	0802a850 	.word	0x0802a850
 802384c:	0802aad8 	.word	0x0802aad8
 8023850:	0802a8b0 	.word	0x0802a8b0
 8023854:	0802ab1c 	.word	0x0802ab1c
 8023858:	2400cfd8 	.word	0x2400cfd8
 802385c:	0802ab30 	.word	0x0802ab30
 8023860:	2400cfb8 	.word	0x2400cfb8
 8023864:	0802ab48 	.word	0x0802ab48
 8023868:	0802ab5c 	.word	0x0802ab5c

0802386c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 802386c:	b580      	push	{r7, lr}
 802386e:	b08a      	sub	sp, #40	; 0x28
 8023870:	af00      	add	r7, sp, #0
 8023872:	60f8      	str	r0, [r7, #12]
 8023874:	60b9      	str	r1, [r7, #8]
 8023876:	607a      	str	r2, [r7, #4]
 8023878:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 802387a:	4b60      	ldr	r3, [pc, #384]	; (80239fc <dhcp_recv+0x190>)
 802387c:	685b      	ldr	r3, [r3, #4]
 802387e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8023880:	6a3b      	ldr	r3, [r7, #32]
 8023882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023884:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	685b      	ldr	r3, [r3, #4]
 802388a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 802388c:	69fb      	ldr	r3, [r7, #28]
 802388e:	2b00      	cmp	r3, #0
 8023890:	f000 809d 	beq.w	80239ce <dhcp_recv+0x162>
 8023894:	69fb      	ldr	r3, [r7, #28]
 8023896:	791b      	ldrb	r3, [r3, #4]
 8023898:	2b00      	cmp	r3, #0
 802389a:	f000 8098 	beq.w	80239ce <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 802389e:	687b      	ldr	r3, [r7, #4]
 80238a0:	895b      	ldrh	r3, [r3, #10]
 80238a2:	2b2b      	cmp	r3, #43	; 0x2b
 80238a4:	f240 8095 	bls.w	80239d2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80238a8:	69bb      	ldr	r3, [r7, #24]
 80238aa:	781b      	ldrb	r3, [r3, #0]
 80238ac:	2b02      	cmp	r3, #2
 80238ae:	f040 8092 	bne.w	80239d6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80238b2:	2300      	movs	r3, #0
 80238b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80238b8:	e012      	b.n	80238e0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80238ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80238be:	6a3a      	ldr	r2, [r7, #32]
 80238c0:	4413      	add	r3, r2
 80238c2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80238c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80238ca:	69b9      	ldr	r1, [r7, #24]
 80238cc:	440b      	add	r3, r1
 80238ce:	7f1b      	ldrb	r3, [r3, #28]
 80238d0:	429a      	cmp	r2, r3
 80238d2:	f040 8082 	bne.w	80239da <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80238d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80238da:	3301      	adds	r3, #1
 80238dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80238e0:	6a3b      	ldr	r3, [r7, #32]
 80238e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80238e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80238ea:	429a      	cmp	r2, r3
 80238ec:	d203      	bcs.n	80238f6 <dhcp_recv+0x8a>
 80238ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80238f2:	2b05      	cmp	r3, #5
 80238f4:	d9e1      	bls.n	80238ba <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80238f6:	69bb      	ldr	r3, [r7, #24]
 80238f8:	685b      	ldr	r3, [r3, #4]
 80238fa:	4618      	mov	r0, r3
 80238fc:	f7f6 fc3d 	bl	801a17a <lwip_htonl>
 8023900:	4602      	mov	r2, r0
 8023902:	69fb      	ldr	r3, [r7, #28]
 8023904:	681b      	ldr	r3, [r3, #0]
 8023906:	429a      	cmp	r2, r3
 8023908:	d169      	bne.n	80239de <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 802390a:	69f9      	ldr	r1, [r7, #28]
 802390c:	6878      	ldr	r0, [r7, #4]
 802390e:	f7ff fcd9 	bl	80232c4 <dhcp_parse_reply>
 8023912:	4603      	mov	r3, r0
 8023914:	2b00      	cmp	r3, #0
 8023916:	d164      	bne.n	80239e2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8023918:	4b39      	ldr	r3, [pc, #228]	; (8023a00 <dhcp_recv+0x194>)
 802391a:	785b      	ldrb	r3, [r3, #1]
 802391c:	2b00      	cmp	r3, #0
 802391e:	d062      	beq.n	80239e6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	685b      	ldr	r3, [r3, #4]
 8023924:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8023926:	4b37      	ldr	r3, [pc, #220]	; (8023a04 <dhcp_recv+0x198>)
 8023928:	685b      	ldr	r3, [r3, #4]
 802392a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 802392c:	7cfb      	ldrb	r3, [r7, #19]
 802392e:	2b05      	cmp	r3, #5
 8023930:	d12a      	bne.n	8023988 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8023932:	69fb      	ldr	r3, [r7, #28]
 8023934:	795b      	ldrb	r3, [r3, #5]
 8023936:	2b01      	cmp	r3, #1
 8023938:	d112      	bne.n	8023960 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 802393a:	6979      	ldr	r1, [r7, #20]
 802393c:	6a38      	ldr	r0, [r7, #32]
 802393e:	f7fe fe17 	bl	8022570 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8023942:	6a3b      	ldr	r3, [r7, #32]
 8023944:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023948:	f003 0308 	and.w	r3, r3, #8
 802394c:	2b00      	cmp	r3, #0
 802394e:	d003      	beq.n	8023958 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8023950:	6a38      	ldr	r0, [r7, #32]
 8023952:	f7fe fb85 	bl	8022060 <dhcp_check>
 8023956:	e049      	b.n	80239ec <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8023958:	6a38      	ldr	r0, [r7, #32]
 802395a:	f7ff f867 	bl	8022a2c <dhcp_bind>
 802395e:	e045      	b.n	80239ec <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8023960:	69fb      	ldr	r3, [r7, #28]
 8023962:	795b      	ldrb	r3, [r3, #5]
 8023964:	2b03      	cmp	r3, #3
 8023966:	d007      	beq.n	8023978 <dhcp_recv+0x10c>
 8023968:	69fb      	ldr	r3, [r7, #28]
 802396a:	795b      	ldrb	r3, [r3, #5]
 802396c:	2b04      	cmp	r3, #4
 802396e:	d003      	beq.n	8023978 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8023970:	69fb      	ldr	r3, [r7, #28]
 8023972:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8023974:	2b05      	cmp	r3, #5
 8023976:	d139      	bne.n	80239ec <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8023978:	6979      	ldr	r1, [r7, #20]
 802397a:	6a38      	ldr	r0, [r7, #32]
 802397c:	f7fe fdf8 	bl	8022570 <dhcp_handle_ack>
      dhcp_bind(netif);
 8023980:	6a38      	ldr	r0, [r7, #32]
 8023982:	f7ff f853 	bl	8022a2c <dhcp_bind>
 8023986:	e031      	b.n	80239ec <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8023988:	7cfb      	ldrb	r3, [r7, #19]
 802398a:	2b06      	cmp	r3, #6
 802398c:	d113      	bne.n	80239b6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802398e:	69fb      	ldr	r3, [r7, #28]
 8023990:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8023992:	2b03      	cmp	r3, #3
 8023994:	d00b      	beq.n	80239ae <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8023996:	69fb      	ldr	r3, [r7, #28]
 8023998:	795b      	ldrb	r3, [r3, #5]
 802399a:	2b01      	cmp	r3, #1
 802399c:	d007      	beq.n	80239ae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 802399e:	69fb      	ldr	r3, [r7, #28]
 80239a0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80239a2:	2b04      	cmp	r3, #4
 80239a4:	d003      	beq.n	80239ae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80239a6:	69fb      	ldr	r3, [r7, #28]
 80239a8:	795b      	ldrb	r3, [r3, #5]
 80239aa:	2b05      	cmp	r3, #5
 80239ac:	d103      	bne.n	80239b6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80239ae:	6a38      	ldr	r0, [r7, #32]
 80239b0:	f7fe fb3c 	bl	802202c <dhcp_handle_nak>
 80239b4:	e01a      	b.n	80239ec <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80239b6:	7cfb      	ldrb	r3, [r7, #19]
 80239b8:	2b02      	cmp	r3, #2
 80239ba:	d116      	bne.n	80239ea <dhcp_recv+0x17e>
 80239bc:	69fb      	ldr	r3, [r7, #28]
 80239be:	795b      	ldrb	r3, [r3, #5]
 80239c0:	2b06      	cmp	r3, #6
 80239c2:	d112      	bne.n	80239ea <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80239c4:	6979      	ldr	r1, [r7, #20]
 80239c6:	6a38      	ldr	r0, [r7, #32]
 80239c8:	f7fe fb7e 	bl	80220c8 <dhcp_handle_offer>
 80239cc:	e00e      	b.n	80239ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80239ce:	bf00      	nop
 80239d0:	e00c      	b.n	80239ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80239d2:	bf00      	nop
 80239d4:	e00a      	b.n	80239ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80239d6:	bf00      	nop
 80239d8:	e008      	b.n	80239ec <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80239da:	bf00      	nop
 80239dc:	e006      	b.n	80239ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80239de:	bf00      	nop
 80239e0:	e004      	b.n	80239ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80239e2:	bf00      	nop
 80239e4:	e002      	b.n	80239ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80239e6:	bf00      	nop
 80239e8:	e000      	b.n	80239ec <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80239ea:	bf00      	nop
  pbuf_free(p);
 80239ec:	6878      	ldr	r0, [r7, #4]
 80239ee:	f7f8 f865 	bl	801babc <pbuf_free>
}
 80239f2:	bf00      	nop
 80239f4:	3728      	adds	r7, #40	; 0x28
 80239f6:	46bd      	mov	sp, r7
 80239f8:	bd80      	pop	{r7, pc}
 80239fa:	bf00      	nop
 80239fc:	24009e38 	.word	0x24009e38
 8023a00:	2400cfd8 	.word	0x2400cfd8
 8023a04:	2400cfb8 	.word	0x2400cfb8

08023a08 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8023a08:	b580      	push	{r7, lr}
 8023a0a:	b088      	sub	sp, #32
 8023a0c:	af00      	add	r7, sp, #0
 8023a0e:	60f8      	str	r0, [r7, #12]
 8023a10:	60b9      	str	r1, [r7, #8]
 8023a12:	603b      	str	r3, [r7, #0]
 8023a14:	4613      	mov	r3, r2
 8023a16:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8023a18:	68fb      	ldr	r3, [r7, #12]
 8023a1a:	2b00      	cmp	r3, #0
 8023a1c:	d108      	bne.n	8023a30 <dhcp_create_msg+0x28>
 8023a1e:	4b5f      	ldr	r3, [pc, #380]	; (8023b9c <dhcp_create_msg+0x194>)
 8023a20:	f240 7269 	movw	r2, #1897	; 0x769
 8023a24:	495e      	ldr	r1, [pc, #376]	; (8023ba0 <dhcp_create_msg+0x198>)
 8023a26:	485f      	ldr	r0, [pc, #380]	; (8023ba4 <dhcp_create_msg+0x19c>)
 8023a28:	f003 fd46 	bl	80274b8 <iprintf>
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	e0b1      	b.n	8023b94 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8023a30:	68bb      	ldr	r3, [r7, #8]
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	d108      	bne.n	8023a48 <dhcp_create_msg+0x40>
 8023a36:	4b59      	ldr	r3, [pc, #356]	; (8023b9c <dhcp_create_msg+0x194>)
 8023a38:	f240 726a 	movw	r2, #1898	; 0x76a
 8023a3c:	495a      	ldr	r1, [pc, #360]	; (8023ba8 <dhcp_create_msg+0x1a0>)
 8023a3e:	4859      	ldr	r0, [pc, #356]	; (8023ba4 <dhcp_create_msg+0x19c>)
 8023a40:	f003 fd3a 	bl	80274b8 <iprintf>
 8023a44:	2300      	movs	r3, #0
 8023a46:	e0a5      	b.n	8023b94 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8023a48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023a4c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8023a50:	2036      	movs	r0, #54	; 0x36
 8023a52:	f7f7 fd4f 	bl	801b4f4 <pbuf_alloc>
 8023a56:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8023a58:	69bb      	ldr	r3, [r7, #24]
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	d101      	bne.n	8023a62 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8023a5e:	2300      	movs	r3, #0
 8023a60:	e098      	b.n	8023b94 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8023a62:	69bb      	ldr	r3, [r7, #24]
 8023a64:	895b      	ldrh	r3, [r3, #10]
 8023a66:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8023a6a:	d206      	bcs.n	8023a7a <dhcp_create_msg+0x72>
 8023a6c:	4b4b      	ldr	r3, [pc, #300]	; (8023b9c <dhcp_create_msg+0x194>)
 8023a6e:	f240 7271 	movw	r2, #1905	; 0x771
 8023a72:	494e      	ldr	r1, [pc, #312]	; (8023bac <dhcp_create_msg+0x1a4>)
 8023a74:	484b      	ldr	r0, [pc, #300]	; (8023ba4 <dhcp_create_msg+0x19c>)
 8023a76:	f003 fd1f 	bl	80274b8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8023a7a:	79fb      	ldrb	r3, [r7, #7]
 8023a7c:	2b03      	cmp	r3, #3
 8023a7e:	d103      	bne.n	8023a88 <dhcp_create_msg+0x80>
 8023a80:	68bb      	ldr	r3, [r7, #8]
 8023a82:	795b      	ldrb	r3, [r3, #5]
 8023a84:	2b03      	cmp	r3, #3
 8023a86:	d10d      	bne.n	8023aa4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8023a88:	68bb      	ldr	r3, [r7, #8]
 8023a8a:	799b      	ldrb	r3, [r3, #6]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d105      	bne.n	8023a9c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8023a90:	f003 fda0 	bl	80275d4 <rand>
 8023a94:	4603      	mov	r3, r0
 8023a96:	461a      	mov	r2, r3
 8023a98:	4b45      	ldr	r3, [pc, #276]	; (8023bb0 <dhcp_create_msg+0x1a8>)
 8023a9a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8023a9c:	4b44      	ldr	r3, [pc, #272]	; (8023bb0 <dhcp_create_msg+0x1a8>)
 8023a9e:	681a      	ldr	r2, [r3, #0]
 8023aa0:	68bb      	ldr	r3, [r7, #8]
 8023aa2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8023aa4:	69bb      	ldr	r3, [r7, #24]
 8023aa6:	685b      	ldr	r3, [r3, #4]
 8023aa8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8023aaa:	f44f 729a 	mov.w	r2, #308	; 0x134
 8023aae:	2100      	movs	r1, #0
 8023ab0:	6978      	ldr	r0, [r7, #20]
 8023ab2:	f003 fc03 	bl	80272bc <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8023ab6:	697b      	ldr	r3, [r7, #20]
 8023ab8:	2201      	movs	r2, #1
 8023aba:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8023abc:	697b      	ldr	r3, [r7, #20]
 8023abe:	2201      	movs	r2, #1
 8023ac0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8023ac2:	68fb      	ldr	r3, [r7, #12]
 8023ac4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8023ac8:	697b      	ldr	r3, [r7, #20]
 8023aca:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8023acc:	68bb      	ldr	r3, [r7, #8]
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	4618      	mov	r0, r3
 8023ad2:	f7f6 fb52 	bl	801a17a <lwip_htonl>
 8023ad6:	4602      	mov	r2, r0
 8023ad8:	697b      	ldr	r3, [r7, #20]
 8023ada:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8023adc:	79fb      	ldrb	r3, [r7, #7]
 8023ade:	2b08      	cmp	r3, #8
 8023ae0:	d010      	beq.n	8023b04 <dhcp_create_msg+0xfc>
 8023ae2:	79fb      	ldrb	r3, [r7, #7]
 8023ae4:	2b04      	cmp	r3, #4
 8023ae6:	d00d      	beq.n	8023b04 <dhcp_create_msg+0xfc>
 8023ae8:	79fb      	ldrb	r3, [r7, #7]
 8023aea:	2b07      	cmp	r3, #7
 8023aec:	d00a      	beq.n	8023b04 <dhcp_create_msg+0xfc>
 8023aee:	79fb      	ldrb	r3, [r7, #7]
 8023af0:	2b03      	cmp	r3, #3
 8023af2:	d10c      	bne.n	8023b0e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8023af4:	68bb      	ldr	r3, [r7, #8]
 8023af6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8023af8:	2b05      	cmp	r3, #5
 8023afa:	d003      	beq.n	8023b04 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8023afc:	68bb      	ldr	r3, [r7, #8]
 8023afe:	795b      	ldrb	r3, [r3, #5]
 8023b00:	2b04      	cmp	r3, #4
 8023b02:	d104      	bne.n	8023b0e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8023b04:	68fb      	ldr	r3, [r7, #12]
 8023b06:	3304      	adds	r3, #4
 8023b08:	681a      	ldr	r2, [r3, #0]
 8023b0a:	697b      	ldr	r3, [r7, #20]
 8023b0c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8023b0e:	2300      	movs	r3, #0
 8023b10:	83fb      	strh	r3, [r7, #30]
 8023b12:	e00c      	b.n	8023b2e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8023b14:	8bfa      	ldrh	r2, [r7, #30]
 8023b16:	8bfb      	ldrh	r3, [r7, #30]
 8023b18:	68f9      	ldr	r1, [r7, #12]
 8023b1a:	440a      	add	r2, r1
 8023b1c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8023b20:	697a      	ldr	r2, [r7, #20]
 8023b22:	4413      	add	r3, r2
 8023b24:	460a      	mov	r2, r1
 8023b26:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8023b28:	8bfb      	ldrh	r3, [r7, #30]
 8023b2a:	3301      	adds	r3, #1
 8023b2c:	83fb      	strh	r3, [r7, #30]
 8023b2e:	8bfb      	ldrh	r3, [r7, #30]
 8023b30:	2b05      	cmp	r3, #5
 8023b32:	d9ef      	bls.n	8023b14 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8023b34:	697b      	ldr	r3, [r7, #20]
 8023b36:	2200      	movs	r2, #0
 8023b38:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8023b3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8023b40:	2200      	movs	r2, #0
 8023b42:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8023b46:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8023b4a:	2200      	movs	r2, #0
 8023b4c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8023b50:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8023b54:	2200      	movs	r2, #0
 8023b56:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8023b5a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8023b5e:	697b      	ldr	r3, [r7, #20]
 8023b60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8023b64:	2301      	movs	r3, #1
 8023b66:	2235      	movs	r2, #53	; 0x35
 8023b68:	2000      	movs	r0, #0
 8023b6a:	f7ff fadb 	bl	8023124 <dhcp_option>
 8023b6e:	4603      	mov	r3, r0
 8023b70:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8023b72:	697b      	ldr	r3, [r7, #20]
 8023b74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8023b78:	79fa      	ldrb	r2, [r7, #7]
 8023b7a:	8a7b      	ldrh	r3, [r7, #18]
 8023b7c:	4618      	mov	r0, r3
 8023b7e:	f7ff fb05 	bl	802318c <dhcp_option_byte>
 8023b82:	4603      	mov	r3, r0
 8023b84:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8023b86:	683b      	ldr	r3, [r7, #0]
 8023b88:	2b00      	cmp	r3, #0
 8023b8a:	d002      	beq.n	8023b92 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8023b8c:	683b      	ldr	r3, [r7, #0]
 8023b8e:	8a7a      	ldrh	r2, [r7, #18]
 8023b90:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8023b92:	69bb      	ldr	r3, [r7, #24]
}
 8023b94:	4618      	mov	r0, r3
 8023b96:	3720      	adds	r7, #32
 8023b98:	46bd      	mov	sp, r7
 8023b9a:	bd80      	pop	{r7, pc}
 8023b9c:	0802a850 	.word	0x0802a850
 8023ba0:	0802ab70 	.word	0x0802ab70
 8023ba4:	0802a8b0 	.word	0x0802a8b0
 8023ba8:	0802ab90 	.word	0x0802ab90
 8023bac:	0802abb0 	.word	0x0802abb0
 8023bb0:	2400cfe8 	.word	0x2400cfe8

08023bb4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8023bb4:	b580      	push	{r7, lr}
 8023bb6:	b084      	sub	sp, #16
 8023bb8:	af00      	add	r7, sp, #0
 8023bba:	4603      	mov	r3, r0
 8023bbc:	60b9      	str	r1, [r7, #8]
 8023bbe:	607a      	str	r2, [r7, #4]
 8023bc0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8023bc2:	89fb      	ldrh	r3, [r7, #14]
 8023bc4:	1c5a      	adds	r2, r3, #1
 8023bc6:	81fa      	strh	r2, [r7, #14]
 8023bc8:	461a      	mov	r2, r3
 8023bca:	68bb      	ldr	r3, [r7, #8]
 8023bcc:	4413      	add	r3, r2
 8023bce:	22ff      	movs	r2, #255	; 0xff
 8023bd0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8023bd2:	e007      	b.n	8023be4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8023bd4:	89fb      	ldrh	r3, [r7, #14]
 8023bd6:	1c5a      	adds	r2, r3, #1
 8023bd8:	81fa      	strh	r2, [r7, #14]
 8023bda:	461a      	mov	r2, r3
 8023bdc:	68bb      	ldr	r3, [r7, #8]
 8023bde:	4413      	add	r3, r2
 8023be0:	2200      	movs	r2, #0
 8023be2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8023be4:	89fb      	ldrh	r3, [r7, #14]
 8023be6:	2b43      	cmp	r3, #67	; 0x43
 8023be8:	d904      	bls.n	8023bf4 <dhcp_option_trailer+0x40>
 8023bea:	89fb      	ldrh	r3, [r7, #14]
 8023bec:	f003 0303 	and.w	r3, r3, #3
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	d002      	beq.n	8023bfa <dhcp_option_trailer+0x46>
 8023bf4:	89fb      	ldrh	r3, [r7, #14]
 8023bf6:	2b43      	cmp	r3, #67	; 0x43
 8023bf8:	d9ec      	bls.n	8023bd4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8023bfa:	89fb      	ldrh	r3, [r7, #14]
 8023bfc:	33f0      	adds	r3, #240	; 0xf0
 8023bfe:	b29b      	uxth	r3, r3
 8023c00:	4619      	mov	r1, r3
 8023c02:	6878      	ldr	r0, [r7, #4]
 8023c04:	f7f7 fdd4 	bl	801b7b0 <pbuf_realloc>
}
 8023c08:	bf00      	nop
 8023c0a:	3710      	adds	r7, #16
 8023c0c:	46bd      	mov	sp, r7
 8023c0e:	bd80      	pop	{r7, pc}

08023c10 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8023c10:	b480      	push	{r7}
 8023c12:	b085      	sub	sp, #20
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	2b00      	cmp	r3, #0
 8023c1c:	d017      	beq.n	8023c4e <dhcp_supplied_address+0x3e>
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d013      	beq.n	8023c4e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c2a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8023c2c:	68fb      	ldr	r3, [r7, #12]
 8023c2e:	795b      	ldrb	r3, [r3, #5]
 8023c30:	2b0a      	cmp	r3, #10
 8023c32:	d007      	beq.n	8023c44 <dhcp_supplied_address+0x34>
 8023c34:	68fb      	ldr	r3, [r7, #12]
 8023c36:	795b      	ldrb	r3, [r3, #5]
 8023c38:	2b05      	cmp	r3, #5
 8023c3a:	d003      	beq.n	8023c44 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8023c3c:	68fb      	ldr	r3, [r7, #12]
 8023c3e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8023c40:	2b04      	cmp	r3, #4
 8023c42:	d101      	bne.n	8023c48 <dhcp_supplied_address+0x38>
 8023c44:	2301      	movs	r3, #1
 8023c46:	e000      	b.n	8023c4a <dhcp_supplied_address+0x3a>
 8023c48:	2300      	movs	r3, #0
 8023c4a:	b2db      	uxtb	r3, r3
 8023c4c:	e000      	b.n	8023c50 <dhcp_supplied_address+0x40>
  }
  return 0;
 8023c4e:	2300      	movs	r3, #0
}
 8023c50:	4618      	mov	r0, r3
 8023c52:	3714      	adds	r7, #20
 8023c54:	46bd      	mov	sp, r7
 8023c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c5a:	4770      	bx	lr

08023c5c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8023c5c:	b580      	push	{r7, lr}
 8023c5e:	b082      	sub	sp, #8
 8023c60:	af00      	add	r7, sp, #0
 8023c62:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8023c64:	4915      	ldr	r1, [pc, #84]	; (8023cbc <etharp_free_entry+0x60>)
 8023c66:	687a      	ldr	r2, [r7, #4]
 8023c68:	4613      	mov	r3, r2
 8023c6a:	005b      	lsls	r3, r3, #1
 8023c6c:	4413      	add	r3, r2
 8023c6e:	00db      	lsls	r3, r3, #3
 8023c70:	440b      	add	r3, r1
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	2b00      	cmp	r3, #0
 8023c76:	d013      	beq.n	8023ca0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8023c78:	4910      	ldr	r1, [pc, #64]	; (8023cbc <etharp_free_entry+0x60>)
 8023c7a:	687a      	ldr	r2, [r7, #4]
 8023c7c:	4613      	mov	r3, r2
 8023c7e:	005b      	lsls	r3, r3, #1
 8023c80:	4413      	add	r3, r2
 8023c82:	00db      	lsls	r3, r3, #3
 8023c84:	440b      	add	r3, r1
 8023c86:	681b      	ldr	r3, [r3, #0]
 8023c88:	4618      	mov	r0, r3
 8023c8a:	f7f7 ff17 	bl	801babc <pbuf_free>
    arp_table[i].q = NULL;
 8023c8e:	490b      	ldr	r1, [pc, #44]	; (8023cbc <etharp_free_entry+0x60>)
 8023c90:	687a      	ldr	r2, [r7, #4]
 8023c92:	4613      	mov	r3, r2
 8023c94:	005b      	lsls	r3, r3, #1
 8023c96:	4413      	add	r3, r2
 8023c98:	00db      	lsls	r3, r3, #3
 8023c9a:	440b      	add	r3, r1
 8023c9c:	2200      	movs	r2, #0
 8023c9e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8023ca0:	4906      	ldr	r1, [pc, #24]	; (8023cbc <etharp_free_entry+0x60>)
 8023ca2:	687a      	ldr	r2, [r7, #4]
 8023ca4:	4613      	mov	r3, r2
 8023ca6:	005b      	lsls	r3, r3, #1
 8023ca8:	4413      	add	r3, r2
 8023caa:	00db      	lsls	r3, r3, #3
 8023cac:	440b      	add	r3, r1
 8023cae:	3314      	adds	r3, #20
 8023cb0:	2200      	movs	r2, #0
 8023cb2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8023cb4:	bf00      	nop
 8023cb6:	3708      	adds	r7, #8
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	bd80      	pop	{r7, pc}
 8023cbc:	2400cfec 	.word	0x2400cfec

08023cc0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8023cc0:	b580      	push	{r7, lr}
 8023cc2:	b082      	sub	sp, #8
 8023cc4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023cc6:	2300      	movs	r3, #0
 8023cc8:	607b      	str	r3, [r7, #4]
 8023cca:	e096      	b.n	8023dfa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8023ccc:	494f      	ldr	r1, [pc, #316]	; (8023e0c <etharp_tmr+0x14c>)
 8023cce:	687a      	ldr	r2, [r7, #4]
 8023cd0:	4613      	mov	r3, r2
 8023cd2:	005b      	lsls	r3, r3, #1
 8023cd4:	4413      	add	r3, r2
 8023cd6:	00db      	lsls	r3, r3, #3
 8023cd8:	440b      	add	r3, r1
 8023cda:	3314      	adds	r3, #20
 8023cdc:	781b      	ldrb	r3, [r3, #0]
 8023cde:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8023ce0:	78fb      	ldrb	r3, [r7, #3]
 8023ce2:	2b00      	cmp	r3, #0
 8023ce4:	f000 8086 	beq.w	8023df4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8023ce8:	4948      	ldr	r1, [pc, #288]	; (8023e0c <etharp_tmr+0x14c>)
 8023cea:	687a      	ldr	r2, [r7, #4]
 8023cec:	4613      	mov	r3, r2
 8023cee:	005b      	lsls	r3, r3, #1
 8023cf0:	4413      	add	r3, r2
 8023cf2:	00db      	lsls	r3, r3, #3
 8023cf4:	440b      	add	r3, r1
 8023cf6:	3312      	adds	r3, #18
 8023cf8:	881b      	ldrh	r3, [r3, #0]
 8023cfa:	3301      	adds	r3, #1
 8023cfc:	b298      	uxth	r0, r3
 8023cfe:	4943      	ldr	r1, [pc, #268]	; (8023e0c <etharp_tmr+0x14c>)
 8023d00:	687a      	ldr	r2, [r7, #4]
 8023d02:	4613      	mov	r3, r2
 8023d04:	005b      	lsls	r3, r3, #1
 8023d06:	4413      	add	r3, r2
 8023d08:	00db      	lsls	r3, r3, #3
 8023d0a:	440b      	add	r3, r1
 8023d0c:	3312      	adds	r3, #18
 8023d0e:	4602      	mov	r2, r0
 8023d10:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023d12:	493e      	ldr	r1, [pc, #248]	; (8023e0c <etharp_tmr+0x14c>)
 8023d14:	687a      	ldr	r2, [r7, #4]
 8023d16:	4613      	mov	r3, r2
 8023d18:	005b      	lsls	r3, r3, #1
 8023d1a:	4413      	add	r3, r2
 8023d1c:	00db      	lsls	r3, r3, #3
 8023d1e:	440b      	add	r3, r1
 8023d20:	3312      	adds	r3, #18
 8023d22:	881b      	ldrh	r3, [r3, #0]
 8023d24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8023d28:	d215      	bcs.n	8023d56 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023d2a:	4938      	ldr	r1, [pc, #224]	; (8023e0c <etharp_tmr+0x14c>)
 8023d2c:	687a      	ldr	r2, [r7, #4]
 8023d2e:	4613      	mov	r3, r2
 8023d30:	005b      	lsls	r3, r3, #1
 8023d32:	4413      	add	r3, r2
 8023d34:	00db      	lsls	r3, r3, #3
 8023d36:	440b      	add	r3, r1
 8023d38:	3314      	adds	r3, #20
 8023d3a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023d3c:	2b01      	cmp	r3, #1
 8023d3e:	d10e      	bne.n	8023d5e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8023d40:	4932      	ldr	r1, [pc, #200]	; (8023e0c <etharp_tmr+0x14c>)
 8023d42:	687a      	ldr	r2, [r7, #4]
 8023d44:	4613      	mov	r3, r2
 8023d46:	005b      	lsls	r3, r3, #1
 8023d48:	4413      	add	r3, r2
 8023d4a:	00db      	lsls	r3, r3, #3
 8023d4c:	440b      	add	r3, r1
 8023d4e:	3312      	adds	r3, #18
 8023d50:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023d52:	2b04      	cmp	r3, #4
 8023d54:	d903      	bls.n	8023d5e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8023d56:	6878      	ldr	r0, [r7, #4]
 8023d58:	f7ff ff80 	bl	8023c5c <etharp_free_entry>
 8023d5c:	e04a      	b.n	8023df4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8023d5e:	492b      	ldr	r1, [pc, #172]	; (8023e0c <etharp_tmr+0x14c>)
 8023d60:	687a      	ldr	r2, [r7, #4]
 8023d62:	4613      	mov	r3, r2
 8023d64:	005b      	lsls	r3, r3, #1
 8023d66:	4413      	add	r3, r2
 8023d68:	00db      	lsls	r3, r3, #3
 8023d6a:	440b      	add	r3, r1
 8023d6c:	3314      	adds	r3, #20
 8023d6e:	781b      	ldrb	r3, [r3, #0]
 8023d70:	2b03      	cmp	r3, #3
 8023d72:	d10a      	bne.n	8023d8a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8023d74:	4925      	ldr	r1, [pc, #148]	; (8023e0c <etharp_tmr+0x14c>)
 8023d76:	687a      	ldr	r2, [r7, #4]
 8023d78:	4613      	mov	r3, r2
 8023d7a:	005b      	lsls	r3, r3, #1
 8023d7c:	4413      	add	r3, r2
 8023d7e:	00db      	lsls	r3, r3, #3
 8023d80:	440b      	add	r3, r1
 8023d82:	3314      	adds	r3, #20
 8023d84:	2204      	movs	r2, #4
 8023d86:	701a      	strb	r2, [r3, #0]
 8023d88:	e034      	b.n	8023df4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8023d8a:	4920      	ldr	r1, [pc, #128]	; (8023e0c <etharp_tmr+0x14c>)
 8023d8c:	687a      	ldr	r2, [r7, #4]
 8023d8e:	4613      	mov	r3, r2
 8023d90:	005b      	lsls	r3, r3, #1
 8023d92:	4413      	add	r3, r2
 8023d94:	00db      	lsls	r3, r3, #3
 8023d96:	440b      	add	r3, r1
 8023d98:	3314      	adds	r3, #20
 8023d9a:	781b      	ldrb	r3, [r3, #0]
 8023d9c:	2b04      	cmp	r3, #4
 8023d9e:	d10a      	bne.n	8023db6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8023da0:	491a      	ldr	r1, [pc, #104]	; (8023e0c <etharp_tmr+0x14c>)
 8023da2:	687a      	ldr	r2, [r7, #4]
 8023da4:	4613      	mov	r3, r2
 8023da6:	005b      	lsls	r3, r3, #1
 8023da8:	4413      	add	r3, r2
 8023daa:	00db      	lsls	r3, r3, #3
 8023dac:	440b      	add	r3, r1
 8023dae:	3314      	adds	r3, #20
 8023db0:	2202      	movs	r2, #2
 8023db2:	701a      	strb	r2, [r3, #0]
 8023db4:	e01e      	b.n	8023df4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023db6:	4915      	ldr	r1, [pc, #84]	; (8023e0c <etharp_tmr+0x14c>)
 8023db8:	687a      	ldr	r2, [r7, #4]
 8023dba:	4613      	mov	r3, r2
 8023dbc:	005b      	lsls	r3, r3, #1
 8023dbe:	4413      	add	r3, r2
 8023dc0:	00db      	lsls	r3, r3, #3
 8023dc2:	440b      	add	r3, r1
 8023dc4:	3314      	adds	r3, #20
 8023dc6:	781b      	ldrb	r3, [r3, #0]
 8023dc8:	2b01      	cmp	r3, #1
 8023dca:	d113      	bne.n	8023df4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8023dcc:	490f      	ldr	r1, [pc, #60]	; (8023e0c <etharp_tmr+0x14c>)
 8023dce:	687a      	ldr	r2, [r7, #4]
 8023dd0:	4613      	mov	r3, r2
 8023dd2:	005b      	lsls	r3, r3, #1
 8023dd4:	4413      	add	r3, r2
 8023dd6:	00db      	lsls	r3, r3, #3
 8023dd8:	440b      	add	r3, r1
 8023dda:	3308      	adds	r3, #8
 8023ddc:	6818      	ldr	r0, [r3, #0]
 8023dde:	687a      	ldr	r2, [r7, #4]
 8023de0:	4613      	mov	r3, r2
 8023de2:	005b      	lsls	r3, r3, #1
 8023de4:	4413      	add	r3, r2
 8023de6:	00db      	lsls	r3, r3, #3
 8023de8:	4a08      	ldr	r2, [pc, #32]	; (8023e0c <etharp_tmr+0x14c>)
 8023dea:	4413      	add	r3, r2
 8023dec:	3304      	adds	r3, #4
 8023dee:	4619      	mov	r1, r3
 8023df0:	f000 fe72 	bl	8024ad8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	3301      	adds	r3, #1
 8023df8:	607b      	str	r3, [r7, #4]
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	2b09      	cmp	r3, #9
 8023dfe:	f77f af65 	ble.w	8023ccc <etharp_tmr+0xc>
      }
    }
  }
}
 8023e02:	bf00      	nop
 8023e04:	bf00      	nop
 8023e06:	3708      	adds	r7, #8
 8023e08:	46bd      	mov	sp, r7
 8023e0a:	bd80      	pop	{r7, pc}
 8023e0c:	2400cfec 	.word	0x2400cfec

08023e10 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8023e10:	b580      	push	{r7, lr}
 8023e12:	b08a      	sub	sp, #40	; 0x28
 8023e14:	af00      	add	r7, sp, #0
 8023e16:	60f8      	str	r0, [r7, #12]
 8023e18:	460b      	mov	r3, r1
 8023e1a:	607a      	str	r2, [r7, #4]
 8023e1c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8023e1e:	230a      	movs	r3, #10
 8023e20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023e22:	230a      	movs	r3, #10
 8023e24:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8023e26:	230a      	movs	r3, #10
 8023e28:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8023e2a:	2300      	movs	r3, #0
 8023e2c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8023e2e:	230a      	movs	r3, #10
 8023e30:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8023e32:	2300      	movs	r3, #0
 8023e34:	83bb      	strh	r3, [r7, #28]
 8023e36:	2300      	movs	r3, #0
 8023e38:	837b      	strh	r3, [r7, #26]
 8023e3a:	2300      	movs	r3, #0
 8023e3c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023e3e:	2300      	movs	r3, #0
 8023e40:	843b      	strh	r3, [r7, #32]
 8023e42:	e0ae      	b.n	8023fa2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8023e44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023e48:	49a6      	ldr	r1, [pc, #664]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023e4a:	4613      	mov	r3, r2
 8023e4c:	005b      	lsls	r3, r3, #1
 8023e4e:	4413      	add	r3, r2
 8023e50:	00db      	lsls	r3, r3, #3
 8023e52:	440b      	add	r3, r1
 8023e54:	3314      	adds	r3, #20
 8023e56:	781b      	ldrb	r3, [r3, #0]
 8023e58:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8023e5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023e5e:	2b0a      	cmp	r3, #10
 8023e60:	d105      	bne.n	8023e6e <etharp_find_entry+0x5e>
 8023e62:	7dfb      	ldrb	r3, [r7, #23]
 8023e64:	2b00      	cmp	r3, #0
 8023e66:	d102      	bne.n	8023e6e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8023e68:	8c3b      	ldrh	r3, [r7, #32]
 8023e6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8023e6c:	e095      	b.n	8023f9a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8023e6e:	7dfb      	ldrb	r3, [r7, #23]
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	f000 8092 	beq.w	8023f9a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8023e76:	7dfb      	ldrb	r3, [r7, #23]
 8023e78:	2b01      	cmp	r3, #1
 8023e7a:	d009      	beq.n	8023e90 <etharp_find_entry+0x80>
 8023e7c:	7dfb      	ldrb	r3, [r7, #23]
 8023e7e:	2b01      	cmp	r3, #1
 8023e80:	d806      	bhi.n	8023e90 <etharp_find_entry+0x80>
 8023e82:	4b99      	ldr	r3, [pc, #612]	; (80240e8 <etharp_find_entry+0x2d8>)
 8023e84:	f240 1223 	movw	r2, #291	; 0x123
 8023e88:	4998      	ldr	r1, [pc, #608]	; (80240ec <etharp_find_entry+0x2dc>)
 8023e8a:	4899      	ldr	r0, [pc, #612]	; (80240f0 <etharp_find_entry+0x2e0>)
 8023e8c:	f003 fb14 	bl	80274b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8023e90:	68fb      	ldr	r3, [r7, #12]
 8023e92:	2b00      	cmp	r3, #0
 8023e94:	d020      	beq.n	8023ed8 <etharp_find_entry+0xc8>
 8023e96:	68fb      	ldr	r3, [r7, #12]
 8023e98:	6819      	ldr	r1, [r3, #0]
 8023e9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023e9e:	4891      	ldr	r0, [pc, #580]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023ea0:	4613      	mov	r3, r2
 8023ea2:	005b      	lsls	r3, r3, #1
 8023ea4:	4413      	add	r3, r2
 8023ea6:	00db      	lsls	r3, r3, #3
 8023ea8:	4403      	add	r3, r0
 8023eaa:	3304      	adds	r3, #4
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	4299      	cmp	r1, r3
 8023eb0:	d112      	bne.n	8023ed8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	2b00      	cmp	r3, #0
 8023eb6:	d00c      	beq.n	8023ed2 <etharp_find_entry+0xc2>
 8023eb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023ebc:	4989      	ldr	r1, [pc, #548]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023ebe:	4613      	mov	r3, r2
 8023ec0:	005b      	lsls	r3, r3, #1
 8023ec2:	4413      	add	r3, r2
 8023ec4:	00db      	lsls	r3, r3, #3
 8023ec6:	440b      	add	r3, r1
 8023ec8:	3308      	adds	r3, #8
 8023eca:	681b      	ldr	r3, [r3, #0]
 8023ecc:	687a      	ldr	r2, [r7, #4]
 8023ece:	429a      	cmp	r2, r3
 8023ed0:	d102      	bne.n	8023ed8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8023ed2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023ed6:	e100      	b.n	80240da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8023ed8:	7dfb      	ldrb	r3, [r7, #23]
 8023eda:	2b01      	cmp	r3, #1
 8023edc:	d140      	bne.n	8023f60 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8023ede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023ee2:	4980      	ldr	r1, [pc, #512]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023ee4:	4613      	mov	r3, r2
 8023ee6:	005b      	lsls	r3, r3, #1
 8023ee8:	4413      	add	r3, r2
 8023eea:	00db      	lsls	r3, r3, #3
 8023eec:	440b      	add	r3, r1
 8023eee:	681b      	ldr	r3, [r3, #0]
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	d01a      	beq.n	8023f2a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8023ef4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023ef8:	497a      	ldr	r1, [pc, #488]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023efa:	4613      	mov	r3, r2
 8023efc:	005b      	lsls	r3, r3, #1
 8023efe:	4413      	add	r3, r2
 8023f00:	00db      	lsls	r3, r3, #3
 8023f02:	440b      	add	r3, r1
 8023f04:	3312      	adds	r3, #18
 8023f06:	881b      	ldrh	r3, [r3, #0]
 8023f08:	8bba      	ldrh	r2, [r7, #28]
 8023f0a:	429a      	cmp	r2, r3
 8023f0c:	d845      	bhi.n	8023f9a <etharp_find_entry+0x18a>
            old_queue = i;
 8023f0e:	8c3b      	ldrh	r3, [r7, #32]
 8023f10:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8023f12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f16:	4973      	ldr	r1, [pc, #460]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023f18:	4613      	mov	r3, r2
 8023f1a:	005b      	lsls	r3, r3, #1
 8023f1c:	4413      	add	r3, r2
 8023f1e:	00db      	lsls	r3, r3, #3
 8023f20:	440b      	add	r3, r1
 8023f22:	3312      	adds	r3, #18
 8023f24:	881b      	ldrh	r3, [r3, #0]
 8023f26:	83bb      	strh	r3, [r7, #28]
 8023f28:	e037      	b.n	8023f9a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8023f2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f2e:	496d      	ldr	r1, [pc, #436]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023f30:	4613      	mov	r3, r2
 8023f32:	005b      	lsls	r3, r3, #1
 8023f34:	4413      	add	r3, r2
 8023f36:	00db      	lsls	r3, r3, #3
 8023f38:	440b      	add	r3, r1
 8023f3a:	3312      	adds	r3, #18
 8023f3c:	881b      	ldrh	r3, [r3, #0]
 8023f3e:	8b7a      	ldrh	r2, [r7, #26]
 8023f40:	429a      	cmp	r2, r3
 8023f42:	d82a      	bhi.n	8023f9a <etharp_find_entry+0x18a>
            old_pending = i;
 8023f44:	8c3b      	ldrh	r3, [r7, #32]
 8023f46:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8023f48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f4c:	4965      	ldr	r1, [pc, #404]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023f4e:	4613      	mov	r3, r2
 8023f50:	005b      	lsls	r3, r3, #1
 8023f52:	4413      	add	r3, r2
 8023f54:	00db      	lsls	r3, r3, #3
 8023f56:	440b      	add	r3, r1
 8023f58:	3312      	adds	r3, #18
 8023f5a:	881b      	ldrh	r3, [r3, #0]
 8023f5c:	837b      	strh	r3, [r7, #26]
 8023f5e:	e01c      	b.n	8023f9a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8023f60:	7dfb      	ldrb	r3, [r7, #23]
 8023f62:	2b01      	cmp	r3, #1
 8023f64:	d919      	bls.n	8023f9a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8023f66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f6a:	495e      	ldr	r1, [pc, #376]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023f6c:	4613      	mov	r3, r2
 8023f6e:	005b      	lsls	r3, r3, #1
 8023f70:	4413      	add	r3, r2
 8023f72:	00db      	lsls	r3, r3, #3
 8023f74:	440b      	add	r3, r1
 8023f76:	3312      	adds	r3, #18
 8023f78:	881b      	ldrh	r3, [r3, #0]
 8023f7a:	8b3a      	ldrh	r2, [r7, #24]
 8023f7c:	429a      	cmp	r2, r3
 8023f7e:	d80c      	bhi.n	8023f9a <etharp_find_entry+0x18a>
            old_stable = i;
 8023f80:	8c3b      	ldrh	r3, [r7, #32]
 8023f82:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8023f84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f88:	4956      	ldr	r1, [pc, #344]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023f8a:	4613      	mov	r3, r2
 8023f8c:	005b      	lsls	r3, r3, #1
 8023f8e:	4413      	add	r3, r2
 8023f90:	00db      	lsls	r3, r3, #3
 8023f92:	440b      	add	r3, r1
 8023f94:	3312      	adds	r3, #18
 8023f96:	881b      	ldrh	r3, [r3, #0]
 8023f98:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023f9a:	8c3b      	ldrh	r3, [r7, #32]
 8023f9c:	3301      	adds	r3, #1
 8023f9e:	b29b      	uxth	r3, r3
 8023fa0:	843b      	strh	r3, [r7, #32]
 8023fa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023fa6:	2b09      	cmp	r3, #9
 8023fa8:	f77f af4c 	ble.w	8023e44 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8023fac:	7afb      	ldrb	r3, [r7, #11]
 8023fae:	f003 0302 	and.w	r3, r3, #2
 8023fb2:	2b00      	cmp	r3, #0
 8023fb4:	d108      	bne.n	8023fc8 <etharp_find_entry+0x1b8>
 8023fb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023fba:	2b0a      	cmp	r3, #10
 8023fbc:	d107      	bne.n	8023fce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8023fbe:	7afb      	ldrb	r3, [r7, #11]
 8023fc0:	f003 0301 	and.w	r3, r3, #1
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d102      	bne.n	8023fce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8023fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8023fcc:	e085      	b.n	80240da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8023fce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023fd2:	2b09      	cmp	r3, #9
 8023fd4:	dc02      	bgt.n	8023fdc <etharp_find_entry+0x1cc>
    i = empty;
 8023fd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023fd8:	843b      	strh	r3, [r7, #32]
 8023fda:	e039      	b.n	8024050 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8023fdc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023fe0:	2b09      	cmp	r3, #9
 8023fe2:	dc14      	bgt.n	802400e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8023fe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023fe6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8023fe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023fec:	493d      	ldr	r1, [pc, #244]	; (80240e4 <etharp_find_entry+0x2d4>)
 8023fee:	4613      	mov	r3, r2
 8023ff0:	005b      	lsls	r3, r3, #1
 8023ff2:	4413      	add	r3, r2
 8023ff4:	00db      	lsls	r3, r3, #3
 8023ff6:	440b      	add	r3, r1
 8023ff8:	681b      	ldr	r3, [r3, #0]
 8023ffa:	2b00      	cmp	r3, #0
 8023ffc:	d018      	beq.n	8024030 <etharp_find_entry+0x220>
 8023ffe:	4b3a      	ldr	r3, [pc, #232]	; (80240e8 <etharp_find_entry+0x2d8>)
 8024000:	f240 126d 	movw	r2, #365	; 0x16d
 8024004:	493b      	ldr	r1, [pc, #236]	; (80240f4 <etharp_find_entry+0x2e4>)
 8024006:	483a      	ldr	r0, [pc, #232]	; (80240f0 <etharp_find_entry+0x2e0>)
 8024008:	f003 fa56 	bl	80274b8 <iprintf>
 802400c:	e010      	b.n	8024030 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802400e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8024012:	2b09      	cmp	r3, #9
 8024014:	dc02      	bgt.n	802401c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8024016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8024018:	843b      	strh	r3, [r7, #32]
 802401a:	e009      	b.n	8024030 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 802401c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8024020:	2b09      	cmp	r3, #9
 8024022:	dc02      	bgt.n	802402a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8024024:	8bfb      	ldrh	r3, [r7, #30]
 8024026:	843b      	strh	r3, [r7, #32]
 8024028:	e002      	b.n	8024030 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802402a:	f04f 33ff 	mov.w	r3, #4294967295
 802402e:	e054      	b.n	80240da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8024030:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024034:	2b09      	cmp	r3, #9
 8024036:	dd06      	ble.n	8024046 <etharp_find_entry+0x236>
 8024038:	4b2b      	ldr	r3, [pc, #172]	; (80240e8 <etharp_find_entry+0x2d8>)
 802403a:	f240 127f 	movw	r2, #383	; 0x17f
 802403e:	492e      	ldr	r1, [pc, #184]	; (80240f8 <etharp_find_entry+0x2e8>)
 8024040:	482b      	ldr	r0, [pc, #172]	; (80240f0 <etharp_find_entry+0x2e0>)
 8024042:	f003 fa39 	bl	80274b8 <iprintf>
    etharp_free_entry(i);
 8024046:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802404a:	4618      	mov	r0, r3
 802404c:	f7ff fe06 	bl	8023c5c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8024050:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024054:	2b09      	cmp	r3, #9
 8024056:	dd06      	ble.n	8024066 <etharp_find_entry+0x256>
 8024058:	4b23      	ldr	r3, [pc, #140]	; (80240e8 <etharp_find_entry+0x2d8>)
 802405a:	f240 1283 	movw	r2, #387	; 0x183
 802405e:	4926      	ldr	r1, [pc, #152]	; (80240f8 <etharp_find_entry+0x2e8>)
 8024060:	4823      	ldr	r0, [pc, #140]	; (80240f0 <etharp_find_entry+0x2e0>)
 8024062:	f003 fa29 	bl	80274b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8024066:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802406a:	491e      	ldr	r1, [pc, #120]	; (80240e4 <etharp_find_entry+0x2d4>)
 802406c:	4613      	mov	r3, r2
 802406e:	005b      	lsls	r3, r3, #1
 8024070:	4413      	add	r3, r2
 8024072:	00db      	lsls	r3, r3, #3
 8024074:	440b      	add	r3, r1
 8024076:	3314      	adds	r3, #20
 8024078:	781b      	ldrb	r3, [r3, #0]
 802407a:	2b00      	cmp	r3, #0
 802407c:	d006      	beq.n	802408c <etharp_find_entry+0x27c>
 802407e:	4b1a      	ldr	r3, [pc, #104]	; (80240e8 <etharp_find_entry+0x2d8>)
 8024080:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8024084:	491d      	ldr	r1, [pc, #116]	; (80240fc <etharp_find_entry+0x2ec>)
 8024086:	481a      	ldr	r0, [pc, #104]	; (80240f0 <etharp_find_entry+0x2e0>)
 8024088:	f003 fa16 	bl	80274b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 802408c:	68fb      	ldr	r3, [r7, #12]
 802408e:	2b00      	cmp	r3, #0
 8024090:	d00b      	beq.n	80240aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8024092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024096:	68fb      	ldr	r3, [r7, #12]
 8024098:	6819      	ldr	r1, [r3, #0]
 802409a:	4812      	ldr	r0, [pc, #72]	; (80240e4 <etharp_find_entry+0x2d4>)
 802409c:	4613      	mov	r3, r2
 802409e:	005b      	lsls	r3, r3, #1
 80240a0:	4413      	add	r3, r2
 80240a2:	00db      	lsls	r3, r3, #3
 80240a4:	4403      	add	r3, r0
 80240a6:	3304      	adds	r3, #4
 80240a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80240aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80240ae:	490d      	ldr	r1, [pc, #52]	; (80240e4 <etharp_find_entry+0x2d4>)
 80240b0:	4613      	mov	r3, r2
 80240b2:	005b      	lsls	r3, r3, #1
 80240b4:	4413      	add	r3, r2
 80240b6:	00db      	lsls	r3, r3, #3
 80240b8:	440b      	add	r3, r1
 80240ba:	3312      	adds	r3, #18
 80240bc:	2200      	movs	r2, #0
 80240be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80240c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80240c4:	4907      	ldr	r1, [pc, #28]	; (80240e4 <etharp_find_entry+0x2d4>)
 80240c6:	4613      	mov	r3, r2
 80240c8:	005b      	lsls	r3, r3, #1
 80240ca:	4413      	add	r3, r2
 80240cc:	00db      	lsls	r3, r3, #3
 80240ce:	440b      	add	r3, r1
 80240d0:	3308      	adds	r3, #8
 80240d2:	687a      	ldr	r2, [r7, #4]
 80240d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80240d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80240da:	4618      	mov	r0, r3
 80240dc:	3728      	adds	r7, #40	; 0x28
 80240de:	46bd      	mov	sp, r7
 80240e0:	bd80      	pop	{r7, pc}
 80240e2:	bf00      	nop
 80240e4:	2400cfec 	.word	0x2400cfec
 80240e8:	0802abf0 	.word	0x0802abf0
 80240ec:	0802ac28 	.word	0x0802ac28
 80240f0:	0802ac68 	.word	0x0802ac68
 80240f4:	0802ac90 	.word	0x0802ac90
 80240f8:	0802aca8 	.word	0x0802aca8
 80240fc:	0802acbc 	.word	0x0802acbc

08024100 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8024100:	b580      	push	{r7, lr}
 8024102:	b088      	sub	sp, #32
 8024104:	af02      	add	r7, sp, #8
 8024106:	60f8      	str	r0, [r7, #12]
 8024108:	60b9      	str	r1, [r7, #8]
 802410a:	607a      	str	r2, [r7, #4]
 802410c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802410e:	68fb      	ldr	r3, [r7, #12]
 8024110:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024114:	2b06      	cmp	r3, #6
 8024116:	d006      	beq.n	8024126 <etharp_update_arp_entry+0x26>
 8024118:	4b48      	ldr	r3, [pc, #288]	; (802423c <etharp_update_arp_entry+0x13c>)
 802411a:	f240 12a9 	movw	r2, #425	; 0x1a9
 802411e:	4948      	ldr	r1, [pc, #288]	; (8024240 <etharp_update_arp_entry+0x140>)
 8024120:	4848      	ldr	r0, [pc, #288]	; (8024244 <etharp_update_arp_entry+0x144>)
 8024122:	f003 f9c9 	bl	80274b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8024126:	68bb      	ldr	r3, [r7, #8]
 8024128:	2b00      	cmp	r3, #0
 802412a:	d012      	beq.n	8024152 <etharp_update_arp_entry+0x52>
 802412c:	68bb      	ldr	r3, [r7, #8]
 802412e:	681b      	ldr	r3, [r3, #0]
 8024130:	2b00      	cmp	r3, #0
 8024132:	d00e      	beq.n	8024152 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8024134:	68bb      	ldr	r3, [r7, #8]
 8024136:	681b      	ldr	r3, [r3, #0]
 8024138:	68f9      	ldr	r1, [r7, #12]
 802413a:	4618      	mov	r0, r3
 802413c:	f001 f946 	bl	80253cc <ip4_addr_isbroadcast_u32>
 8024140:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8024142:	2b00      	cmp	r3, #0
 8024144:	d105      	bne.n	8024152 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8024146:	68bb      	ldr	r3, [r7, #8]
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802414e:	2be0      	cmp	r3, #224	; 0xe0
 8024150:	d102      	bne.n	8024158 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024152:	f06f 030f 	mvn.w	r3, #15
 8024156:	e06c      	b.n	8024232 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8024158:	78fb      	ldrb	r3, [r7, #3]
 802415a:	68fa      	ldr	r2, [r7, #12]
 802415c:	4619      	mov	r1, r3
 802415e:	68b8      	ldr	r0, [r7, #8]
 8024160:	f7ff fe56 	bl	8023e10 <etharp_find_entry>
 8024164:	4603      	mov	r3, r0
 8024166:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8024168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802416c:	2b00      	cmp	r3, #0
 802416e:	da02      	bge.n	8024176 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8024170:	8afb      	ldrh	r3, [r7, #22]
 8024172:	b25b      	sxtb	r3, r3
 8024174:	e05d      	b.n	8024232 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8024176:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802417a:	4933      	ldr	r1, [pc, #204]	; (8024248 <etharp_update_arp_entry+0x148>)
 802417c:	4613      	mov	r3, r2
 802417e:	005b      	lsls	r3, r3, #1
 8024180:	4413      	add	r3, r2
 8024182:	00db      	lsls	r3, r3, #3
 8024184:	440b      	add	r3, r1
 8024186:	3314      	adds	r3, #20
 8024188:	2202      	movs	r2, #2
 802418a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802418c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024190:	492d      	ldr	r1, [pc, #180]	; (8024248 <etharp_update_arp_entry+0x148>)
 8024192:	4613      	mov	r3, r2
 8024194:	005b      	lsls	r3, r3, #1
 8024196:	4413      	add	r3, r2
 8024198:	00db      	lsls	r3, r3, #3
 802419a:	440b      	add	r3, r1
 802419c:	3308      	adds	r3, #8
 802419e:	68fa      	ldr	r2, [r7, #12]
 80241a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80241a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80241a6:	4613      	mov	r3, r2
 80241a8:	005b      	lsls	r3, r3, #1
 80241aa:	4413      	add	r3, r2
 80241ac:	00db      	lsls	r3, r3, #3
 80241ae:	3308      	adds	r3, #8
 80241b0:	4a25      	ldr	r2, [pc, #148]	; (8024248 <etharp_update_arp_entry+0x148>)
 80241b2:	4413      	add	r3, r2
 80241b4:	3304      	adds	r3, #4
 80241b6:	2206      	movs	r2, #6
 80241b8:	6879      	ldr	r1, [r7, #4]
 80241ba:	4618      	mov	r0, r3
 80241bc:	f003 f856 	bl	802726c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80241c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80241c4:	4920      	ldr	r1, [pc, #128]	; (8024248 <etharp_update_arp_entry+0x148>)
 80241c6:	4613      	mov	r3, r2
 80241c8:	005b      	lsls	r3, r3, #1
 80241ca:	4413      	add	r3, r2
 80241cc:	00db      	lsls	r3, r3, #3
 80241ce:	440b      	add	r3, r1
 80241d0:	3312      	adds	r3, #18
 80241d2:	2200      	movs	r2, #0
 80241d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80241d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80241da:	491b      	ldr	r1, [pc, #108]	; (8024248 <etharp_update_arp_entry+0x148>)
 80241dc:	4613      	mov	r3, r2
 80241de:	005b      	lsls	r3, r3, #1
 80241e0:	4413      	add	r3, r2
 80241e2:	00db      	lsls	r3, r3, #3
 80241e4:	440b      	add	r3, r1
 80241e6:	681b      	ldr	r3, [r3, #0]
 80241e8:	2b00      	cmp	r3, #0
 80241ea:	d021      	beq.n	8024230 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80241ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80241f0:	4915      	ldr	r1, [pc, #84]	; (8024248 <etharp_update_arp_entry+0x148>)
 80241f2:	4613      	mov	r3, r2
 80241f4:	005b      	lsls	r3, r3, #1
 80241f6:	4413      	add	r3, r2
 80241f8:	00db      	lsls	r3, r3, #3
 80241fa:	440b      	add	r3, r1
 80241fc:	681b      	ldr	r3, [r3, #0]
 80241fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8024200:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024204:	4910      	ldr	r1, [pc, #64]	; (8024248 <etharp_update_arp_entry+0x148>)
 8024206:	4613      	mov	r3, r2
 8024208:	005b      	lsls	r3, r3, #1
 802420a:	4413      	add	r3, r2
 802420c:	00db      	lsls	r3, r3, #3
 802420e:	440b      	add	r3, r1
 8024210:	2200      	movs	r2, #0
 8024212:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8024214:	68fb      	ldr	r3, [r7, #12]
 8024216:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802421a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802421e:	9300      	str	r3, [sp, #0]
 8024220:	687b      	ldr	r3, [r7, #4]
 8024222:	6939      	ldr	r1, [r7, #16]
 8024224:	68f8      	ldr	r0, [r7, #12]
 8024226:	f001 ffdf 	bl	80261e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802422a:	6938      	ldr	r0, [r7, #16]
 802422c:	f7f7 fc46 	bl	801babc <pbuf_free>
  }
  return ERR_OK;
 8024230:	2300      	movs	r3, #0
}
 8024232:	4618      	mov	r0, r3
 8024234:	3718      	adds	r7, #24
 8024236:	46bd      	mov	sp, r7
 8024238:	bd80      	pop	{r7, pc}
 802423a:	bf00      	nop
 802423c:	0802abf0 	.word	0x0802abf0
 8024240:	0802ace8 	.word	0x0802ace8
 8024244:	0802ac68 	.word	0x0802ac68
 8024248:	2400cfec 	.word	0x2400cfec

0802424c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 802424c:	b580      	push	{r7, lr}
 802424e:	b084      	sub	sp, #16
 8024250:	af00      	add	r7, sp, #0
 8024252:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024254:	2300      	movs	r3, #0
 8024256:	60fb      	str	r3, [r7, #12]
 8024258:	e01e      	b.n	8024298 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802425a:	4913      	ldr	r1, [pc, #76]	; (80242a8 <etharp_cleanup_netif+0x5c>)
 802425c:	68fa      	ldr	r2, [r7, #12]
 802425e:	4613      	mov	r3, r2
 8024260:	005b      	lsls	r3, r3, #1
 8024262:	4413      	add	r3, r2
 8024264:	00db      	lsls	r3, r3, #3
 8024266:	440b      	add	r3, r1
 8024268:	3314      	adds	r3, #20
 802426a:	781b      	ldrb	r3, [r3, #0]
 802426c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802426e:	7afb      	ldrb	r3, [r7, #11]
 8024270:	2b00      	cmp	r3, #0
 8024272:	d00e      	beq.n	8024292 <etharp_cleanup_netif+0x46>
 8024274:	490c      	ldr	r1, [pc, #48]	; (80242a8 <etharp_cleanup_netif+0x5c>)
 8024276:	68fa      	ldr	r2, [r7, #12]
 8024278:	4613      	mov	r3, r2
 802427a:	005b      	lsls	r3, r3, #1
 802427c:	4413      	add	r3, r2
 802427e:	00db      	lsls	r3, r3, #3
 8024280:	440b      	add	r3, r1
 8024282:	3308      	adds	r3, #8
 8024284:	681b      	ldr	r3, [r3, #0]
 8024286:	687a      	ldr	r2, [r7, #4]
 8024288:	429a      	cmp	r2, r3
 802428a:	d102      	bne.n	8024292 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 802428c:	68f8      	ldr	r0, [r7, #12]
 802428e:	f7ff fce5 	bl	8023c5c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024292:	68fb      	ldr	r3, [r7, #12]
 8024294:	3301      	adds	r3, #1
 8024296:	60fb      	str	r3, [r7, #12]
 8024298:	68fb      	ldr	r3, [r7, #12]
 802429a:	2b09      	cmp	r3, #9
 802429c:	dddd      	ble.n	802425a <etharp_cleanup_netif+0xe>
    }
  }
}
 802429e:	bf00      	nop
 80242a0:	bf00      	nop
 80242a2:	3710      	adds	r7, #16
 80242a4:	46bd      	mov	sp, r7
 80242a6:	bd80      	pop	{r7, pc}
 80242a8:	2400cfec 	.word	0x2400cfec

080242ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80242ac:	b5b0      	push	{r4, r5, r7, lr}
 80242ae:	b08a      	sub	sp, #40	; 0x28
 80242b0:	af04      	add	r7, sp, #16
 80242b2:	6078      	str	r0, [r7, #4]
 80242b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80242b6:	683b      	ldr	r3, [r7, #0]
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	d107      	bne.n	80242cc <etharp_input+0x20>
 80242bc:	4b3f      	ldr	r3, [pc, #252]	; (80243bc <etharp_input+0x110>)
 80242be:	f240 228a 	movw	r2, #650	; 0x28a
 80242c2:	493f      	ldr	r1, [pc, #252]	; (80243c0 <etharp_input+0x114>)
 80242c4:	483f      	ldr	r0, [pc, #252]	; (80243c4 <etharp_input+0x118>)
 80242c6:	f003 f8f7 	bl	80274b8 <iprintf>
 80242ca:	e074      	b.n	80243b6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80242cc:	687b      	ldr	r3, [r7, #4]
 80242ce:	685b      	ldr	r3, [r3, #4]
 80242d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80242d2:	693b      	ldr	r3, [r7, #16]
 80242d4:	881b      	ldrh	r3, [r3, #0]
 80242d6:	b29b      	uxth	r3, r3
 80242d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80242dc:	d10c      	bne.n	80242f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80242de:	693b      	ldr	r3, [r7, #16]
 80242e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80242e2:	2b06      	cmp	r3, #6
 80242e4:	d108      	bne.n	80242f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80242e6:	693b      	ldr	r3, [r7, #16]
 80242e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80242ea:	2b04      	cmp	r3, #4
 80242ec:	d104      	bne.n	80242f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80242ee:	693b      	ldr	r3, [r7, #16]
 80242f0:	885b      	ldrh	r3, [r3, #2]
 80242f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80242f4:	2b08      	cmp	r3, #8
 80242f6:	d003      	beq.n	8024300 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80242f8:	6878      	ldr	r0, [r7, #4]
 80242fa:	f7f7 fbdf 	bl	801babc <pbuf_free>
    return;
 80242fe:	e05a      	b.n	80243b6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8024300:	693b      	ldr	r3, [r7, #16]
 8024302:	330e      	adds	r3, #14
 8024304:	681b      	ldr	r3, [r3, #0]
 8024306:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8024308:	693b      	ldr	r3, [r7, #16]
 802430a:	3318      	adds	r3, #24
 802430c:	681b      	ldr	r3, [r3, #0]
 802430e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024310:	683b      	ldr	r3, [r7, #0]
 8024312:	3304      	adds	r3, #4
 8024314:	681b      	ldr	r3, [r3, #0]
 8024316:	2b00      	cmp	r3, #0
 8024318:	d102      	bne.n	8024320 <etharp_input+0x74>
    for_us = 0;
 802431a:	2300      	movs	r3, #0
 802431c:	75fb      	strb	r3, [r7, #23]
 802431e:	e009      	b.n	8024334 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8024320:	68ba      	ldr	r2, [r7, #8]
 8024322:	683b      	ldr	r3, [r7, #0]
 8024324:	3304      	adds	r3, #4
 8024326:	681b      	ldr	r3, [r3, #0]
 8024328:	429a      	cmp	r2, r3
 802432a:	bf0c      	ite	eq
 802432c:	2301      	moveq	r3, #1
 802432e:	2300      	movne	r3, #0
 8024330:	b2db      	uxtb	r3, r3
 8024332:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8024334:	693b      	ldr	r3, [r7, #16]
 8024336:	f103 0208 	add.w	r2, r3, #8
 802433a:	7dfb      	ldrb	r3, [r7, #23]
 802433c:	2b00      	cmp	r3, #0
 802433e:	d001      	beq.n	8024344 <etharp_input+0x98>
 8024340:	2301      	movs	r3, #1
 8024342:	e000      	b.n	8024346 <etharp_input+0x9a>
 8024344:	2302      	movs	r3, #2
 8024346:	f107 010c 	add.w	r1, r7, #12
 802434a:	6838      	ldr	r0, [r7, #0]
 802434c:	f7ff fed8 	bl	8024100 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8024350:	693b      	ldr	r3, [r7, #16]
 8024352:	88db      	ldrh	r3, [r3, #6]
 8024354:	b29b      	uxth	r3, r3
 8024356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802435a:	d003      	beq.n	8024364 <etharp_input+0xb8>
 802435c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024360:	d01e      	beq.n	80243a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8024362:	e025      	b.n	80243b0 <etharp_input+0x104>
      if (for_us) {
 8024364:	7dfb      	ldrb	r3, [r7, #23]
 8024366:	2b00      	cmp	r3, #0
 8024368:	d021      	beq.n	80243ae <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802436a:	683b      	ldr	r3, [r7, #0]
 802436c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8024370:	693b      	ldr	r3, [r7, #16]
 8024372:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8024376:	683b      	ldr	r3, [r7, #0]
 8024378:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 802437c:	683b      	ldr	r3, [r7, #0]
 802437e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8024380:	693a      	ldr	r2, [r7, #16]
 8024382:	3208      	adds	r2, #8
        etharp_raw(netif,
 8024384:	2102      	movs	r1, #2
 8024386:	9103      	str	r1, [sp, #12]
 8024388:	f107 010c 	add.w	r1, r7, #12
 802438c:	9102      	str	r1, [sp, #8]
 802438e:	9201      	str	r2, [sp, #4]
 8024390:	9300      	str	r3, [sp, #0]
 8024392:	462b      	mov	r3, r5
 8024394:	4622      	mov	r2, r4
 8024396:	4601      	mov	r1, r0
 8024398:	6838      	ldr	r0, [r7, #0]
 802439a:	f000 faef 	bl	802497c <etharp_raw>
      break;
 802439e:	e006      	b.n	80243ae <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80243a0:	f107 030c 	add.w	r3, r7, #12
 80243a4:	4619      	mov	r1, r3
 80243a6:	6838      	ldr	r0, [r7, #0]
 80243a8:	f7fe f9fc 	bl	80227a4 <dhcp_arp_reply>
      break;
 80243ac:	e000      	b.n	80243b0 <etharp_input+0x104>
      break;
 80243ae:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80243b0:	6878      	ldr	r0, [r7, #4]
 80243b2:	f7f7 fb83 	bl	801babc <pbuf_free>
}
 80243b6:	3718      	adds	r7, #24
 80243b8:	46bd      	mov	sp, r7
 80243ba:	bdb0      	pop	{r4, r5, r7, pc}
 80243bc:	0802abf0 	.word	0x0802abf0
 80243c0:	0802ad40 	.word	0x0802ad40
 80243c4:	0802ac68 	.word	0x0802ac68

080243c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80243c8:	b580      	push	{r7, lr}
 80243ca:	b086      	sub	sp, #24
 80243cc:	af02      	add	r7, sp, #8
 80243ce:	60f8      	str	r0, [r7, #12]
 80243d0:	60b9      	str	r1, [r7, #8]
 80243d2:	4613      	mov	r3, r2
 80243d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80243d6:	79fa      	ldrb	r2, [r7, #7]
 80243d8:	4944      	ldr	r1, [pc, #272]	; (80244ec <etharp_output_to_arp_index+0x124>)
 80243da:	4613      	mov	r3, r2
 80243dc:	005b      	lsls	r3, r3, #1
 80243de:	4413      	add	r3, r2
 80243e0:	00db      	lsls	r3, r3, #3
 80243e2:	440b      	add	r3, r1
 80243e4:	3314      	adds	r3, #20
 80243e6:	781b      	ldrb	r3, [r3, #0]
 80243e8:	2b01      	cmp	r3, #1
 80243ea:	d806      	bhi.n	80243fa <etharp_output_to_arp_index+0x32>
 80243ec:	4b40      	ldr	r3, [pc, #256]	; (80244f0 <etharp_output_to_arp_index+0x128>)
 80243ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 80243f2:	4940      	ldr	r1, [pc, #256]	; (80244f4 <etharp_output_to_arp_index+0x12c>)
 80243f4:	4840      	ldr	r0, [pc, #256]	; (80244f8 <etharp_output_to_arp_index+0x130>)
 80243f6:	f003 f85f 	bl	80274b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80243fa:	79fa      	ldrb	r2, [r7, #7]
 80243fc:	493b      	ldr	r1, [pc, #236]	; (80244ec <etharp_output_to_arp_index+0x124>)
 80243fe:	4613      	mov	r3, r2
 8024400:	005b      	lsls	r3, r3, #1
 8024402:	4413      	add	r3, r2
 8024404:	00db      	lsls	r3, r3, #3
 8024406:	440b      	add	r3, r1
 8024408:	3314      	adds	r3, #20
 802440a:	781b      	ldrb	r3, [r3, #0]
 802440c:	2b02      	cmp	r3, #2
 802440e:	d153      	bne.n	80244b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8024410:	79fa      	ldrb	r2, [r7, #7]
 8024412:	4936      	ldr	r1, [pc, #216]	; (80244ec <etharp_output_to_arp_index+0x124>)
 8024414:	4613      	mov	r3, r2
 8024416:	005b      	lsls	r3, r3, #1
 8024418:	4413      	add	r3, r2
 802441a:	00db      	lsls	r3, r3, #3
 802441c:	440b      	add	r3, r1
 802441e:	3312      	adds	r3, #18
 8024420:	881b      	ldrh	r3, [r3, #0]
 8024422:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8024426:	d919      	bls.n	802445c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8024428:	79fa      	ldrb	r2, [r7, #7]
 802442a:	4613      	mov	r3, r2
 802442c:	005b      	lsls	r3, r3, #1
 802442e:	4413      	add	r3, r2
 8024430:	00db      	lsls	r3, r3, #3
 8024432:	4a2e      	ldr	r2, [pc, #184]	; (80244ec <etharp_output_to_arp_index+0x124>)
 8024434:	4413      	add	r3, r2
 8024436:	3304      	adds	r3, #4
 8024438:	4619      	mov	r1, r3
 802443a:	68f8      	ldr	r0, [r7, #12]
 802443c:	f000 fb4c 	bl	8024ad8 <etharp_request>
 8024440:	4603      	mov	r3, r0
 8024442:	2b00      	cmp	r3, #0
 8024444:	d138      	bne.n	80244b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024446:	79fa      	ldrb	r2, [r7, #7]
 8024448:	4928      	ldr	r1, [pc, #160]	; (80244ec <etharp_output_to_arp_index+0x124>)
 802444a:	4613      	mov	r3, r2
 802444c:	005b      	lsls	r3, r3, #1
 802444e:	4413      	add	r3, r2
 8024450:	00db      	lsls	r3, r3, #3
 8024452:	440b      	add	r3, r1
 8024454:	3314      	adds	r3, #20
 8024456:	2203      	movs	r2, #3
 8024458:	701a      	strb	r2, [r3, #0]
 802445a:	e02d      	b.n	80244b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802445c:	79fa      	ldrb	r2, [r7, #7]
 802445e:	4923      	ldr	r1, [pc, #140]	; (80244ec <etharp_output_to_arp_index+0x124>)
 8024460:	4613      	mov	r3, r2
 8024462:	005b      	lsls	r3, r3, #1
 8024464:	4413      	add	r3, r2
 8024466:	00db      	lsls	r3, r3, #3
 8024468:	440b      	add	r3, r1
 802446a:	3312      	adds	r3, #18
 802446c:	881b      	ldrh	r3, [r3, #0]
 802446e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8024472:	d321      	bcc.n	80244b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8024474:	79fa      	ldrb	r2, [r7, #7]
 8024476:	4613      	mov	r3, r2
 8024478:	005b      	lsls	r3, r3, #1
 802447a:	4413      	add	r3, r2
 802447c:	00db      	lsls	r3, r3, #3
 802447e:	4a1b      	ldr	r2, [pc, #108]	; (80244ec <etharp_output_to_arp_index+0x124>)
 8024480:	4413      	add	r3, r2
 8024482:	1d19      	adds	r1, r3, #4
 8024484:	79fa      	ldrb	r2, [r7, #7]
 8024486:	4613      	mov	r3, r2
 8024488:	005b      	lsls	r3, r3, #1
 802448a:	4413      	add	r3, r2
 802448c:	00db      	lsls	r3, r3, #3
 802448e:	3308      	adds	r3, #8
 8024490:	4a16      	ldr	r2, [pc, #88]	; (80244ec <etharp_output_to_arp_index+0x124>)
 8024492:	4413      	add	r3, r2
 8024494:	3304      	adds	r3, #4
 8024496:	461a      	mov	r2, r3
 8024498:	68f8      	ldr	r0, [r7, #12]
 802449a:	f000 fafb 	bl	8024a94 <etharp_request_dst>
 802449e:	4603      	mov	r3, r0
 80244a0:	2b00      	cmp	r3, #0
 80244a2:	d109      	bne.n	80244b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80244a4:	79fa      	ldrb	r2, [r7, #7]
 80244a6:	4911      	ldr	r1, [pc, #68]	; (80244ec <etharp_output_to_arp_index+0x124>)
 80244a8:	4613      	mov	r3, r2
 80244aa:	005b      	lsls	r3, r3, #1
 80244ac:	4413      	add	r3, r2
 80244ae:	00db      	lsls	r3, r3, #3
 80244b0:	440b      	add	r3, r1
 80244b2:	3314      	adds	r3, #20
 80244b4:	2203      	movs	r2, #3
 80244b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80244b8:	68fb      	ldr	r3, [r7, #12]
 80244ba:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80244be:	79fa      	ldrb	r2, [r7, #7]
 80244c0:	4613      	mov	r3, r2
 80244c2:	005b      	lsls	r3, r3, #1
 80244c4:	4413      	add	r3, r2
 80244c6:	00db      	lsls	r3, r3, #3
 80244c8:	3308      	adds	r3, #8
 80244ca:	4a08      	ldr	r2, [pc, #32]	; (80244ec <etharp_output_to_arp_index+0x124>)
 80244cc:	4413      	add	r3, r2
 80244ce:	3304      	adds	r3, #4
 80244d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80244d4:	9200      	str	r2, [sp, #0]
 80244d6:	460a      	mov	r2, r1
 80244d8:	68b9      	ldr	r1, [r7, #8]
 80244da:	68f8      	ldr	r0, [r7, #12]
 80244dc:	f001 fe84 	bl	80261e8 <ethernet_output>
 80244e0:	4603      	mov	r3, r0
}
 80244e2:	4618      	mov	r0, r3
 80244e4:	3710      	adds	r7, #16
 80244e6:	46bd      	mov	sp, r7
 80244e8:	bd80      	pop	{r7, pc}
 80244ea:	bf00      	nop
 80244ec:	2400cfec 	.word	0x2400cfec
 80244f0:	0802abf0 	.word	0x0802abf0
 80244f4:	0802ad60 	.word	0x0802ad60
 80244f8:	0802ac68 	.word	0x0802ac68

080244fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80244fc:	b580      	push	{r7, lr}
 80244fe:	b08a      	sub	sp, #40	; 0x28
 8024500:	af02      	add	r7, sp, #8
 8024502:	60f8      	str	r0, [r7, #12]
 8024504:	60b9      	str	r1, [r7, #8]
 8024506:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8024508:	687b      	ldr	r3, [r7, #4]
 802450a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802450c:	68fb      	ldr	r3, [r7, #12]
 802450e:	2b00      	cmp	r3, #0
 8024510:	d106      	bne.n	8024520 <etharp_output+0x24>
 8024512:	4b73      	ldr	r3, [pc, #460]	; (80246e0 <etharp_output+0x1e4>)
 8024514:	f240 321e 	movw	r2, #798	; 0x31e
 8024518:	4972      	ldr	r1, [pc, #456]	; (80246e4 <etharp_output+0x1e8>)
 802451a:	4873      	ldr	r0, [pc, #460]	; (80246e8 <etharp_output+0x1ec>)
 802451c:	f002 ffcc 	bl	80274b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8024520:	68bb      	ldr	r3, [r7, #8]
 8024522:	2b00      	cmp	r3, #0
 8024524:	d106      	bne.n	8024534 <etharp_output+0x38>
 8024526:	4b6e      	ldr	r3, [pc, #440]	; (80246e0 <etharp_output+0x1e4>)
 8024528:	f240 321f 	movw	r2, #799	; 0x31f
 802452c:	496f      	ldr	r1, [pc, #444]	; (80246ec <etharp_output+0x1f0>)
 802452e:	486e      	ldr	r0, [pc, #440]	; (80246e8 <etharp_output+0x1ec>)
 8024530:	f002 ffc2 	bl	80274b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	2b00      	cmp	r3, #0
 8024538:	d106      	bne.n	8024548 <etharp_output+0x4c>
 802453a:	4b69      	ldr	r3, [pc, #420]	; (80246e0 <etharp_output+0x1e4>)
 802453c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8024540:	496b      	ldr	r1, [pc, #428]	; (80246f0 <etharp_output+0x1f4>)
 8024542:	4869      	ldr	r0, [pc, #420]	; (80246e8 <etharp_output+0x1ec>)
 8024544:	f002 ffb8 	bl	80274b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	681b      	ldr	r3, [r3, #0]
 802454c:	68f9      	ldr	r1, [r7, #12]
 802454e:	4618      	mov	r0, r3
 8024550:	f000 ff3c 	bl	80253cc <ip4_addr_isbroadcast_u32>
 8024554:	4603      	mov	r3, r0
 8024556:	2b00      	cmp	r3, #0
 8024558:	d002      	beq.n	8024560 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802455a:	4b66      	ldr	r3, [pc, #408]	; (80246f4 <etharp_output+0x1f8>)
 802455c:	61fb      	str	r3, [r7, #28]
 802455e:	e0af      	b.n	80246c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8024560:	687b      	ldr	r3, [r7, #4]
 8024562:	681b      	ldr	r3, [r3, #0]
 8024564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024568:	2be0      	cmp	r3, #224	; 0xe0
 802456a:	d118      	bne.n	802459e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802456c:	2301      	movs	r3, #1
 802456e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8024570:	2300      	movs	r3, #0
 8024572:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8024574:	235e      	movs	r3, #94	; 0x5e
 8024576:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	3301      	adds	r3, #1
 802457c:	781b      	ldrb	r3, [r3, #0]
 802457e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024582:	b2db      	uxtb	r3, r3
 8024584:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8024586:	687b      	ldr	r3, [r7, #4]
 8024588:	3302      	adds	r3, #2
 802458a:	781b      	ldrb	r3, [r3, #0]
 802458c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	3303      	adds	r3, #3
 8024592:	781b      	ldrb	r3, [r3, #0]
 8024594:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8024596:	f107 0310 	add.w	r3, r7, #16
 802459a:	61fb      	str	r3, [r7, #28]
 802459c:	e090      	b.n	80246c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	681a      	ldr	r2, [r3, #0]
 80245a2:	68fb      	ldr	r3, [r7, #12]
 80245a4:	3304      	adds	r3, #4
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	405a      	eors	r2, r3
 80245aa:	68fb      	ldr	r3, [r7, #12]
 80245ac:	3308      	adds	r3, #8
 80245ae:	681b      	ldr	r3, [r3, #0]
 80245b0:	4013      	ands	r3, r2
 80245b2:	2b00      	cmp	r3, #0
 80245b4:	d012      	beq.n	80245dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80245b6:	687b      	ldr	r3, [r7, #4]
 80245b8:	681b      	ldr	r3, [r3, #0]
 80245ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80245bc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80245c0:	4293      	cmp	r3, r2
 80245c2:	d00b      	beq.n	80245dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80245c4:	68fb      	ldr	r3, [r7, #12]
 80245c6:	330c      	adds	r3, #12
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	2b00      	cmp	r3, #0
 80245cc:	d003      	beq.n	80245d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80245ce:	68fb      	ldr	r3, [r7, #12]
 80245d0:	330c      	adds	r3, #12
 80245d2:	61bb      	str	r3, [r7, #24]
 80245d4:	e002      	b.n	80245dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80245d6:	f06f 0303 	mvn.w	r3, #3
 80245da:	e07d      	b.n	80246d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80245dc:	4b46      	ldr	r3, [pc, #280]	; (80246f8 <etharp_output+0x1fc>)
 80245de:	781b      	ldrb	r3, [r3, #0]
 80245e0:	4619      	mov	r1, r3
 80245e2:	4a46      	ldr	r2, [pc, #280]	; (80246fc <etharp_output+0x200>)
 80245e4:	460b      	mov	r3, r1
 80245e6:	005b      	lsls	r3, r3, #1
 80245e8:	440b      	add	r3, r1
 80245ea:	00db      	lsls	r3, r3, #3
 80245ec:	4413      	add	r3, r2
 80245ee:	3314      	adds	r3, #20
 80245f0:	781b      	ldrb	r3, [r3, #0]
 80245f2:	2b01      	cmp	r3, #1
 80245f4:	d925      	bls.n	8024642 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80245f6:	4b40      	ldr	r3, [pc, #256]	; (80246f8 <etharp_output+0x1fc>)
 80245f8:	781b      	ldrb	r3, [r3, #0]
 80245fa:	4619      	mov	r1, r3
 80245fc:	4a3f      	ldr	r2, [pc, #252]	; (80246fc <etharp_output+0x200>)
 80245fe:	460b      	mov	r3, r1
 8024600:	005b      	lsls	r3, r3, #1
 8024602:	440b      	add	r3, r1
 8024604:	00db      	lsls	r3, r3, #3
 8024606:	4413      	add	r3, r2
 8024608:	3308      	adds	r3, #8
 802460a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802460c:	68fa      	ldr	r2, [r7, #12]
 802460e:	429a      	cmp	r2, r3
 8024610:	d117      	bne.n	8024642 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8024612:	69bb      	ldr	r3, [r7, #24]
 8024614:	681a      	ldr	r2, [r3, #0]
 8024616:	4b38      	ldr	r3, [pc, #224]	; (80246f8 <etharp_output+0x1fc>)
 8024618:	781b      	ldrb	r3, [r3, #0]
 802461a:	4618      	mov	r0, r3
 802461c:	4937      	ldr	r1, [pc, #220]	; (80246fc <etharp_output+0x200>)
 802461e:	4603      	mov	r3, r0
 8024620:	005b      	lsls	r3, r3, #1
 8024622:	4403      	add	r3, r0
 8024624:	00db      	lsls	r3, r3, #3
 8024626:	440b      	add	r3, r1
 8024628:	3304      	adds	r3, #4
 802462a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 802462c:	429a      	cmp	r2, r3
 802462e:	d108      	bne.n	8024642 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8024630:	4b31      	ldr	r3, [pc, #196]	; (80246f8 <etharp_output+0x1fc>)
 8024632:	781b      	ldrb	r3, [r3, #0]
 8024634:	461a      	mov	r2, r3
 8024636:	68b9      	ldr	r1, [r7, #8]
 8024638:	68f8      	ldr	r0, [r7, #12]
 802463a:	f7ff fec5 	bl	80243c8 <etharp_output_to_arp_index>
 802463e:	4603      	mov	r3, r0
 8024640:	e04a      	b.n	80246d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024642:	2300      	movs	r3, #0
 8024644:	75fb      	strb	r3, [r7, #23]
 8024646:	e031      	b.n	80246ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024648:	7dfa      	ldrb	r2, [r7, #23]
 802464a:	492c      	ldr	r1, [pc, #176]	; (80246fc <etharp_output+0x200>)
 802464c:	4613      	mov	r3, r2
 802464e:	005b      	lsls	r3, r3, #1
 8024650:	4413      	add	r3, r2
 8024652:	00db      	lsls	r3, r3, #3
 8024654:	440b      	add	r3, r1
 8024656:	3314      	adds	r3, #20
 8024658:	781b      	ldrb	r3, [r3, #0]
 802465a:	2b01      	cmp	r3, #1
 802465c:	d923      	bls.n	80246a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802465e:	7dfa      	ldrb	r2, [r7, #23]
 8024660:	4926      	ldr	r1, [pc, #152]	; (80246fc <etharp_output+0x200>)
 8024662:	4613      	mov	r3, r2
 8024664:	005b      	lsls	r3, r3, #1
 8024666:	4413      	add	r3, r2
 8024668:	00db      	lsls	r3, r3, #3
 802466a:	440b      	add	r3, r1
 802466c:	3308      	adds	r3, #8
 802466e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024670:	68fa      	ldr	r2, [r7, #12]
 8024672:	429a      	cmp	r2, r3
 8024674:	d117      	bne.n	80246a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8024676:	69bb      	ldr	r3, [r7, #24]
 8024678:	6819      	ldr	r1, [r3, #0]
 802467a:	7dfa      	ldrb	r2, [r7, #23]
 802467c:	481f      	ldr	r0, [pc, #124]	; (80246fc <etharp_output+0x200>)
 802467e:	4613      	mov	r3, r2
 8024680:	005b      	lsls	r3, r3, #1
 8024682:	4413      	add	r3, r2
 8024684:	00db      	lsls	r3, r3, #3
 8024686:	4403      	add	r3, r0
 8024688:	3304      	adds	r3, #4
 802468a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 802468c:	4299      	cmp	r1, r3
 802468e:	d10a      	bne.n	80246a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8024690:	4a19      	ldr	r2, [pc, #100]	; (80246f8 <etharp_output+0x1fc>)
 8024692:	7dfb      	ldrb	r3, [r7, #23]
 8024694:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8024696:	7dfb      	ldrb	r3, [r7, #23]
 8024698:	461a      	mov	r2, r3
 802469a:	68b9      	ldr	r1, [r7, #8]
 802469c:	68f8      	ldr	r0, [r7, #12]
 802469e:	f7ff fe93 	bl	80243c8 <etharp_output_to_arp_index>
 80246a2:	4603      	mov	r3, r0
 80246a4:	e018      	b.n	80246d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80246a6:	7dfb      	ldrb	r3, [r7, #23]
 80246a8:	3301      	adds	r3, #1
 80246aa:	75fb      	strb	r3, [r7, #23]
 80246ac:	7dfb      	ldrb	r3, [r7, #23]
 80246ae:	2b09      	cmp	r3, #9
 80246b0:	d9ca      	bls.n	8024648 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80246b2:	68ba      	ldr	r2, [r7, #8]
 80246b4:	69b9      	ldr	r1, [r7, #24]
 80246b6:	68f8      	ldr	r0, [r7, #12]
 80246b8:	f000 f822 	bl	8024700 <etharp_query>
 80246bc:	4603      	mov	r3, r0
 80246be:	e00b      	b.n	80246d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80246c0:	68fb      	ldr	r3, [r7, #12]
 80246c2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80246c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80246ca:	9300      	str	r3, [sp, #0]
 80246cc:	69fb      	ldr	r3, [r7, #28]
 80246ce:	68b9      	ldr	r1, [r7, #8]
 80246d0:	68f8      	ldr	r0, [r7, #12]
 80246d2:	f001 fd89 	bl	80261e8 <ethernet_output>
 80246d6:	4603      	mov	r3, r0
}
 80246d8:	4618      	mov	r0, r3
 80246da:	3720      	adds	r7, #32
 80246dc:	46bd      	mov	sp, r7
 80246de:	bd80      	pop	{r7, pc}
 80246e0:	0802abf0 	.word	0x0802abf0
 80246e4:	0802ad40 	.word	0x0802ad40
 80246e8:	0802ac68 	.word	0x0802ac68
 80246ec:	0802ad90 	.word	0x0802ad90
 80246f0:	0802ad30 	.word	0x0802ad30
 80246f4:	0802bb54 	.word	0x0802bb54
 80246f8:	2400d0dc 	.word	0x2400d0dc
 80246fc:	2400cfec 	.word	0x2400cfec

08024700 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8024700:	b580      	push	{r7, lr}
 8024702:	b08c      	sub	sp, #48	; 0x30
 8024704:	af02      	add	r7, sp, #8
 8024706:	60f8      	str	r0, [r7, #12]
 8024708:	60b9      	str	r1, [r7, #8]
 802470a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802470c:	68fb      	ldr	r3, [r7, #12]
 802470e:	332a      	adds	r3, #42	; 0x2a
 8024710:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8024712:	23ff      	movs	r3, #255	; 0xff
 8024714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8024718:	2300      	movs	r3, #0
 802471a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802471c:	68bb      	ldr	r3, [r7, #8]
 802471e:	681b      	ldr	r3, [r3, #0]
 8024720:	68f9      	ldr	r1, [r7, #12]
 8024722:	4618      	mov	r0, r3
 8024724:	f000 fe52 	bl	80253cc <ip4_addr_isbroadcast_u32>
 8024728:	4603      	mov	r3, r0
 802472a:	2b00      	cmp	r3, #0
 802472c:	d10c      	bne.n	8024748 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802472e:	68bb      	ldr	r3, [r7, #8]
 8024730:	681b      	ldr	r3, [r3, #0]
 8024732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024736:	2be0      	cmp	r3, #224	; 0xe0
 8024738:	d006      	beq.n	8024748 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802473a:	68bb      	ldr	r3, [r7, #8]
 802473c:	2b00      	cmp	r3, #0
 802473e:	d003      	beq.n	8024748 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8024740:	68bb      	ldr	r3, [r7, #8]
 8024742:	681b      	ldr	r3, [r3, #0]
 8024744:	2b00      	cmp	r3, #0
 8024746:	d102      	bne.n	802474e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024748:	f06f 030f 	mvn.w	r3, #15
 802474c:	e101      	b.n	8024952 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802474e:	68fa      	ldr	r2, [r7, #12]
 8024750:	2101      	movs	r1, #1
 8024752:	68b8      	ldr	r0, [r7, #8]
 8024754:	f7ff fb5c 	bl	8023e10 <etharp_find_entry>
 8024758:	4603      	mov	r3, r0
 802475a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 802475c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8024760:	2b00      	cmp	r3, #0
 8024762:	da02      	bge.n	802476a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8024764:	8a7b      	ldrh	r3, [r7, #18]
 8024766:	b25b      	sxtb	r3, r3
 8024768:	e0f3      	b.n	8024952 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802476a:	8a7b      	ldrh	r3, [r7, #18]
 802476c:	2b7e      	cmp	r3, #126	; 0x7e
 802476e:	d906      	bls.n	802477e <etharp_query+0x7e>
 8024770:	4b7a      	ldr	r3, [pc, #488]	; (802495c <etharp_query+0x25c>)
 8024772:	f240 32c1 	movw	r2, #961	; 0x3c1
 8024776:	497a      	ldr	r1, [pc, #488]	; (8024960 <etharp_query+0x260>)
 8024778:	487a      	ldr	r0, [pc, #488]	; (8024964 <etharp_query+0x264>)
 802477a:	f002 fe9d 	bl	80274b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802477e:	8a7b      	ldrh	r3, [r7, #18]
 8024780:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8024782:	7c7a      	ldrb	r2, [r7, #17]
 8024784:	4978      	ldr	r1, [pc, #480]	; (8024968 <etharp_query+0x268>)
 8024786:	4613      	mov	r3, r2
 8024788:	005b      	lsls	r3, r3, #1
 802478a:	4413      	add	r3, r2
 802478c:	00db      	lsls	r3, r3, #3
 802478e:	440b      	add	r3, r1
 8024790:	3314      	adds	r3, #20
 8024792:	781b      	ldrb	r3, [r3, #0]
 8024794:	2b00      	cmp	r3, #0
 8024796:	d115      	bne.n	80247c4 <etharp_query+0xc4>
    is_new_entry = 1;
 8024798:	2301      	movs	r3, #1
 802479a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802479c:	7c7a      	ldrb	r2, [r7, #17]
 802479e:	4972      	ldr	r1, [pc, #456]	; (8024968 <etharp_query+0x268>)
 80247a0:	4613      	mov	r3, r2
 80247a2:	005b      	lsls	r3, r3, #1
 80247a4:	4413      	add	r3, r2
 80247a6:	00db      	lsls	r3, r3, #3
 80247a8:	440b      	add	r3, r1
 80247aa:	3314      	adds	r3, #20
 80247ac:	2201      	movs	r2, #1
 80247ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80247b0:	7c7a      	ldrb	r2, [r7, #17]
 80247b2:	496d      	ldr	r1, [pc, #436]	; (8024968 <etharp_query+0x268>)
 80247b4:	4613      	mov	r3, r2
 80247b6:	005b      	lsls	r3, r3, #1
 80247b8:	4413      	add	r3, r2
 80247ba:	00db      	lsls	r3, r3, #3
 80247bc:	440b      	add	r3, r1
 80247be:	3308      	adds	r3, #8
 80247c0:	68fa      	ldr	r2, [r7, #12]
 80247c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80247c4:	7c7a      	ldrb	r2, [r7, #17]
 80247c6:	4968      	ldr	r1, [pc, #416]	; (8024968 <etharp_query+0x268>)
 80247c8:	4613      	mov	r3, r2
 80247ca:	005b      	lsls	r3, r3, #1
 80247cc:	4413      	add	r3, r2
 80247ce:	00db      	lsls	r3, r3, #3
 80247d0:	440b      	add	r3, r1
 80247d2:	3314      	adds	r3, #20
 80247d4:	781b      	ldrb	r3, [r3, #0]
 80247d6:	2b01      	cmp	r3, #1
 80247d8:	d011      	beq.n	80247fe <etharp_query+0xfe>
 80247da:	7c7a      	ldrb	r2, [r7, #17]
 80247dc:	4962      	ldr	r1, [pc, #392]	; (8024968 <etharp_query+0x268>)
 80247de:	4613      	mov	r3, r2
 80247e0:	005b      	lsls	r3, r3, #1
 80247e2:	4413      	add	r3, r2
 80247e4:	00db      	lsls	r3, r3, #3
 80247e6:	440b      	add	r3, r1
 80247e8:	3314      	adds	r3, #20
 80247ea:	781b      	ldrb	r3, [r3, #0]
 80247ec:	2b01      	cmp	r3, #1
 80247ee:	d806      	bhi.n	80247fe <etharp_query+0xfe>
 80247f0:	4b5a      	ldr	r3, [pc, #360]	; (802495c <etharp_query+0x25c>)
 80247f2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80247f6:	495d      	ldr	r1, [pc, #372]	; (802496c <etharp_query+0x26c>)
 80247f8:	485a      	ldr	r0, [pc, #360]	; (8024964 <etharp_query+0x264>)
 80247fa:	f002 fe5d 	bl	80274b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80247fe:	6a3b      	ldr	r3, [r7, #32]
 8024800:	2b00      	cmp	r3, #0
 8024802:	d102      	bne.n	802480a <etharp_query+0x10a>
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	2b00      	cmp	r3, #0
 8024808:	d10c      	bne.n	8024824 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802480a:	68b9      	ldr	r1, [r7, #8]
 802480c:	68f8      	ldr	r0, [r7, #12]
 802480e:	f000 f963 	bl	8024ad8 <etharp_request>
 8024812:	4603      	mov	r3, r0
 8024814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	2b00      	cmp	r3, #0
 802481c:	d102      	bne.n	8024824 <etharp_query+0x124>
      return result;
 802481e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8024822:	e096      	b.n	8024952 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8024824:	687b      	ldr	r3, [r7, #4]
 8024826:	2b00      	cmp	r3, #0
 8024828:	d106      	bne.n	8024838 <etharp_query+0x138>
 802482a:	4b4c      	ldr	r3, [pc, #304]	; (802495c <etharp_query+0x25c>)
 802482c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8024830:	494f      	ldr	r1, [pc, #316]	; (8024970 <etharp_query+0x270>)
 8024832:	484c      	ldr	r0, [pc, #304]	; (8024964 <etharp_query+0x264>)
 8024834:	f002 fe40 	bl	80274b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8024838:	7c7a      	ldrb	r2, [r7, #17]
 802483a:	494b      	ldr	r1, [pc, #300]	; (8024968 <etharp_query+0x268>)
 802483c:	4613      	mov	r3, r2
 802483e:	005b      	lsls	r3, r3, #1
 8024840:	4413      	add	r3, r2
 8024842:	00db      	lsls	r3, r3, #3
 8024844:	440b      	add	r3, r1
 8024846:	3314      	adds	r3, #20
 8024848:	781b      	ldrb	r3, [r3, #0]
 802484a:	2b01      	cmp	r3, #1
 802484c:	d917      	bls.n	802487e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802484e:	4a49      	ldr	r2, [pc, #292]	; (8024974 <etharp_query+0x274>)
 8024850:	7c7b      	ldrb	r3, [r7, #17]
 8024852:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8024854:	7c7a      	ldrb	r2, [r7, #17]
 8024856:	4613      	mov	r3, r2
 8024858:	005b      	lsls	r3, r3, #1
 802485a:	4413      	add	r3, r2
 802485c:	00db      	lsls	r3, r3, #3
 802485e:	3308      	adds	r3, #8
 8024860:	4a41      	ldr	r2, [pc, #260]	; (8024968 <etharp_query+0x268>)
 8024862:	4413      	add	r3, r2
 8024864:	3304      	adds	r3, #4
 8024866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802486a:	9200      	str	r2, [sp, #0]
 802486c:	697a      	ldr	r2, [r7, #20]
 802486e:	6879      	ldr	r1, [r7, #4]
 8024870:	68f8      	ldr	r0, [r7, #12]
 8024872:	f001 fcb9 	bl	80261e8 <ethernet_output>
 8024876:	4603      	mov	r3, r0
 8024878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802487c:	e067      	b.n	802494e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802487e:	7c7a      	ldrb	r2, [r7, #17]
 8024880:	4939      	ldr	r1, [pc, #228]	; (8024968 <etharp_query+0x268>)
 8024882:	4613      	mov	r3, r2
 8024884:	005b      	lsls	r3, r3, #1
 8024886:	4413      	add	r3, r2
 8024888:	00db      	lsls	r3, r3, #3
 802488a:	440b      	add	r3, r1
 802488c:	3314      	adds	r3, #20
 802488e:	781b      	ldrb	r3, [r3, #0]
 8024890:	2b01      	cmp	r3, #1
 8024892:	d15c      	bne.n	802494e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8024894:	2300      	movs	r3, #0
 8024896:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802489c:	e01c      	b.n	80248d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802489e:	69fb      	ldr	r3, [r7, #28]
 80248a0:	895a      	ldrh	r2, [r3, #10]
 80248a2:	69fb      	ldr	r3, [r7, #28]
 80248a4:	891b      	ldrh	r3, [r3, #8]
 80248a6:	429a      	cmp	r2, r3
 80248a8:	d10a      	bne.n	80248c0 <etharp_query+0x1c0>
 80248aa:	69fb      	ldr	r3, [r7, #28]
 80248ac:	681b      	ldr	r3, [r3, #0]
 80248ae:	2b00      	cmp	r3, #0
 80248b0:	d006      	beq.n	80248c0 <etharp_query+0x1c0>
 80248b2:	4b2a      	ldr	r3, [pc, #168]	; (802495c <etharp_query+0x25c>)
 80248b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80248b8:	492f      	ldr	r1, [pc, #188]	; (8024978 <etharp_query+0x278>)
 80248ba:	482a      	ldr	r0, [pc, #168]	; (8024964 <etharp_query+0x264>)
 80248bc:	f002 fdfc 	bl	80274b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80248c0:	69fb      	ldr	r3, [r7, #28]
 80248c2:	7b1b      	ldrb	r3, [r3, #12]
 80248c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	d002      	beq.n	80248d2 <etharp_query+0x1d2>
        copy_needed = 1;
 80248cc:	2301      	movs	r3, #1
 80248ce:	61bb      	str	r3, [r7, #24]
        break;
 80248d0:	e005      	b.n	80248de <etharp_query+0x1de>
      }
      p = p->next;
 80248d2:	69fb      	ldr	r3, [r7, #28]
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80248d8:	69fb      	ldr	r3, [r7, #28]
 80248da:	2b00      	cmp	r3, #0
 80248dc:	d1df      	bne.n	802489e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80248de:	69bb      	ldr	r3, [r7, #24]
 80248e0:	2b00      	cmp	r3, #0
 80248e2:	d007      	beq.n	80248f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80248e4:	687a      	ldr	r2, [r7, #4]
 80248e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80248ea:	200e      	movs	r0, #14
 80248ec:	f7f7 fb5e 	bl	801bfac <pbuf_clone>
 80248f0:	61f8      	str	r0, [r7, #28]
 80248f2:	e004      	b.n	80248fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80248f8:	69f8      	ldr	r0, [r7, #28]
 80248fa:	f7f7 f985 	bl	801bc08 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80248fe:	69fb      	ldr	r3, [r7, #28]
 8024900:	2b00      	cmp	r3, #0
 8024902:	d021      	beq.n	8024948 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8024904:	7c7a      	ldrb	r2, [r7, #17]
 8024906:	4918      	ldr	r1, [pc, #96]	; (8024968 <etharp_query+0x268>)
 8024908:	4613      	mov	r3, r2
 802490a:	005b      	lsls	r3, r3, #1
 802490c:	4413      	add	r3, r2
 802490e:	00db      	lsls	r3, r3, #3
 8024910:	440b      	add	r3, r1
 8024912:	681b      	ldr	r3, [r3, #0]
 8024914:	2b00      	cmp	r3, #0
 8024916:	d00a      	beq.n	802492e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8024918:	7c7a      	ldrb	r2, [r7, #17]
 802491a:	4913      	ldr	r1, [pc, #76]	; (8024968 <etharp_query+0x268>)
 802491c:	4613      	mov	r3, r2
 802491e:	005b      	lsls	r3, r3, #1
 8024920:	4413      	add	r3, r2
 8024922:	00db      	lsls	r3, r3, #3
 8024924:	440b      	add	r3, r1
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	4618      	mov	r0, r3
 802492a:	f7f7 f8c7 	bl	801babc <pbuf_free>
      }
      arp_table[i].q = p;
 802492e:	7c7a      	ldrb	r2, [r7, #17]
 8024930:	490d      	ldr	r1, [pc, #52]	; (8024968 <etharp_query+0x268>)
 8024932:	4613      	mov	r3, r2
 8024934:	005b      	lsls	r3, r3, #1
 8024936:	4413      	add	r3, r2
 8024938:	00db      	lsls	r3, r3, #3
 802493a:	440b      	add	r3, r1
 802493c:	69fa      	ldr	r2, [r7, #28]
 802493e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8024940:	2300      	movs	r3, #0
 8024942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024946:	e002      	b.n	802494e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8024948:	23ff      	movs	r3, #255	; 0xff
 802494a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802494e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8024952:	4618      	mov	r0, r3
 8024954:	3728      	adds	r7, #40	; 0x28
 8024956:	46bd      	mov	sp, r7
 8024958:	bd80      	pop	{r7, pc}
 802495a:	bf00      	nop
 802495c:	0802abf0 	.word	0x0802abf0
 8024960:	0802ad9c 	.word	0x0802ad9c
 8024964:	0802ac68 	.word	0x0802ac68
 8024968:	2400cfec 	.word	0x2400cfec
 802496c:	0802adac 	.word	0x0802adac
 8024970:	0802ad90 	.word	0x0802ad90
 8024974:	2400d0dc 	.word	0x2400d0dc
 8024978:	0802add4 	.word	0x0802add4

0802497c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802497c:	b580      	push	{r7, lr}
 802497e:	b08a      	sub	sp, #40	; 0x28
 8024980:	af02      	add	r7, sp, #8
 8024982:	60f8      	str	r0, [r7, #12]
 8024984:	60b9      	str	r1, [r7, #8]
 8024986:	607a      	str	r2, [r7, #4]
 8024988:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802498a:	2300      	movs	r3, #0
 802498c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802498e:	68fb      	ldr	r3, [r7, #12]
 8024990:	2b00      	cmp	r3, #0
 8024992:	d106      	bne.n	80249a2 <etharp_raw+0x26>
 8024994:	4b3a      	ldr	r3, [pc, #232]	; (8024a80 <etharp_raw+0x104>)
 8024996:	f240 4257 	movw	r2, #1111	; 0x457
 802499a:	493a      	ldr	r1, [pc, #232]	; (8024a84 <etharp_raw+0x108>)
 802499c:	483a      	ldr	r0, [pc, #232]	; (8024a88 <etharp_raw+0x10c>)
 802499e:	f002 fd8b 	bl	80274b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80249a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80249a6:	211c      	movs	r1, #28
 80249a8:	200e      	movs	r0, #14
 80249aa:	f7f6 fda3 	bl	801b4f4 <pbuf_alloc>
 80249ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80249b0:	69bb      	ldr	r3, [r7, #24]
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	d102      	bne.n	80249bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80249b6:	f04f 33ff 	mov.w	r3, #4294967295
 80249ba:	e05d      	b.n	8024a78 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80249bc:	69bb      	ldr	r3, [r7, #24]
 80249be:	895b      	ldrh	r3, [r3, #10]
 80249c0:	2b1b      	cmp	r3, #27
 80249c2:	d806      	bhi.n	80249d2 <etharp_raw+0x56>
 80249c4:	4b2e      	ldr	r3, [pc, #184]	; (8024a80 <etharp_raw+0x104>)
 80249c6:	f240 4262 	movw	r2, #1122	; 0x462
 80249ca:	4930      	ldr	r1, [pc, #192]	; (8024a8c <etharp_raw+0x110>)
 80249cc:	482e      	ldr	r0, [pc, #184]	; (8024a88 <etharp_raw+0x10c>)
 80249ce:	f002 fd73 	bl	80274b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80249d2:	69bb      	ldr	r3, [r7, #24]
 80249d4:	685b      	ldr	r3, [r3, #4]
 80249d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80249d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80249da:	4618      	mov	r0, r3
 80249dc:	f7f5 fbb8 	bl	801a150 <lwip_htons>
 80249e0:	4603      	mov	r3, r0
 80249e2:	461a      	mov	r2, r3
 80249e4:	697b      	ldr	r3, [r7, #20]
 80249e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80249e8:	68fb      	ldr	r3, [r7, #12]
 80249ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80249ee:	2b06      	cmp	r3, #6
 80249f0:	d006      	beq.n	8024a00 <etharp_raw+0x84>
 80249f2:	4b23      	ldr	r3, [pc, #140]	; (8024a80 <etharp_raw+0x104>)
 80249f4:	f240 4269 	movw	r2, #1129	; 0x469
 80249f8:	4925      	ldr	r1, [pc, #148]	; (8024a90 <etharp_raw+0x114>)
 80249fa:	4823      	ldr	r0, [pc, #140]	; (8024a88 <etharp_raw+0x10c>)
 80249fc:	f002 fd5c 	bl	80274b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8024a00:	697b      	ldr	r3, [r7, #20]
 8024a02:	3308      	adds	r3, #8
 8024a04:	2206      	movs	r2, #6
 8024a06:	6839      	ldr	r1, [r7, #0]
 8024a08:	4618      	mov	r0, r3
 8024a0a:	f002 fc2f 	bl	802726c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8024a0e:	697b      	ldr	r3, [r7, #20]
 8024a10:	3312      	adds	r3, #18
 8024a12:	2206      	movs	r2, #6
 8024a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024a16:	4618      	mov	r0, r3
 8024a18:	f002 fc28 	bl	802726c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8024a1c:	697b      	ldr	r3, [r7, #20]
 8024a1e:	330e      	adds	r3, #14
 8024a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024a22:	6812      	ldr	r2, [r2, #0]
 8024a24:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8024a26:	697b      	ldr	r3, [r7, #20]
 8024a28:	3318      	adds	r3, #24
 8024a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024a2c:	6812      	ldr	r2, [r2, #0]
 8024a2e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8024a30:	697b      	ldr	r3, [r7, #20]
 8024a32:	2200      	movs	r2, #0
 8024a34:	701a      	strb	r2, [r3, #0]
 8024a36:	2200      	movs	r2, #0
 8024a38:	f042 0201 	orr.w	r2, r2, #1
 8024a3c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8024a3e:	697b      	ldr	r3, [r7, #20]
 8024a40:	2200      	movs	r2, #0
 8024a42:	f042 0208 	orr.w	r2, r2, #8
 8024a46:	709a      	strb	r2, [r3, #2]
 8024a48:	2200      	movs	r2, #0
 8024a4a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8024a4c:	697b      	ldr	r3, [r7, #20]
 8024a4e:	2206      	movs	r2, #6
 8024a50:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8024a52:	697b      	ldr	r3, [r7, #20]
 8024a54:	2204      	movs	r2, #4
 8024a56:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8024a58:	f640 0306 	movw	r3, #2054	; 0x806
 8024a5c:	9300      	str	r3, [sp, #0]
 8024a5e:	687b      	ldr	r3, [r7, #4]
 8024a60:	68ba      	ldr	r2, [r7, #8]
 8024a62:	69b9      	ldr	r1, [r7, #24]
 8024a64:	68f8      	ldr	r0, [r7, #12]
 8024a66:	f001 fbbf 	bl	80261e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8024a6a:	69b8      	ldr	r0, [r7, #24]
 8024a6c:	f7f7 f826 	bl	801babc <pbuf_free>
  p = NULL;
 8024a70:	2300      	movs	r3, #0
 8024a72:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8024a74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024a78:	4618      	mov	r0, r3
 8024a7a:	3720      	adds	r7, #32
 8024a7c:	46bd      	mov	sp, r7
 8024a7e:	bd80      	pop	{r7, pc}
 8024a80:	0802abf0 	.word	0x0802abf0
 8024a84:	0802ad40 	.word	0x0802ad40
 8024a88:	0802ac68 	.word	0x0802ac68
 8024a8c:	0802adf0 	.word	0x0802adf0
 8024a90:	0802ae24 	.word	0x0802ae24

08024a94 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8024a94:	b580      	push	{r7, lr}
 8024a96:	b088      	sub	sp, #32
 8024a98:	af04      	add	r7, sp, #16
 8024a9a:	60f8      	str	r0, [r7, #12]
 8024a9c:	60b9      	str	r1, [r7, #8]
 8024a9e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024aa0:	68fb      	ldr	r3, [r7, #12]
 8024aa2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8024aa6:	68fb      	ldr	r3, [r7, #12]
 8024aa8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8024aac:	68fb      	ldr	r3, [r7, #12]
 8024aae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024ab0:	2201      	movs	r2, #1
 8024ab2:	9203      	str	r2, [sp, #12]
 8024ab4:	68ba      	ldr	r2, [r7, #8]
 8024ab6:	9202      	str	r2, [sp, #8]
 8024ab8:	4a06      	ldr	r2, [pc, #24]	; (8024ad4 <etharp_request_dst+0x40>)
 8024aba:	9201      	str	r2, [sp, #4]
 8024abc:	9300      	str	r3, [sp, #0]
 8024abe:	4603      	mov	r3, r0
 8024ac0:	687a      	ldr	r2, [r7, #4]
 8024ac2:	68f8      	ldr	r0, [r7, #12]
 8024ac4:	f7ff ff5a 	bl	802497c <etharp_raw>
 8024ac8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8024aca:	4618      	mov	r0, r3
 8024acc:	3710      	adds	r7, #16
 8024ace:	46bd      	mov	sp, r7
 8024ad0:	bd80      	pop	{r7, pc}
 8024ad2:	bf00      	nop
 8024ad4:	0802bb5c 	.word	0x0802bb5c

08024ad8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8024ad8:	b580      	push	{r7, lr}
 8024ada:	b082      	sub	sp, #8
 8024adc:	af00      	add	r7, sp, #0
 8024ade:	6078      	str	r0, [r7, #4]
 8024ae0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8024ae2:	4a05      	ldr	r2, [pc, #20]	; (8024af8 <etharp_request+0x20>)
 8024ae4:	6839      	ldr	r1, [r7, #0]
 8024ae6:	6878      	ldr	r0, [r7, #4]
 8024ae8:	f7ff ffd4 	bl	8024a94 <etharp_request_dst>
 8024aec:	4603      	mov	r3, r0
}
 8024aee:	4618      	mov	r0, r3
 8024af0:	3708      	adds	r7, #8
 8024af2:	46bd      	mov	sp, r7
 8024af4:	bd80      	pop	{r7, pc}
 8024af6:	bf00      	nop
 8024af8:	0802bb54 	.word	0x0802bb54

08024afc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8024afc:	b580      	push	{r7, lr}
 8024afe:	b08e      	sub	sp, #56	; 0x38
 8024b00:	af04      	add	r7, sp, #16
 8024b02:	6078      	str	r0, [r7, #4]
 8024b04:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8024b06:	4b87      	ldr	r3, [pc, #540]	; (8024d24 <icmp_input+0x228>)
 8024b08:	689b      	ldr	r3, [r3, #8]
 8024b0a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8024b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b0e:	781b      	ldrb	r3, [r3, #0]
 8024b10:	f003 030f 	and.w	r3, r3, #15
 8024b14:	b2db      	uxtb	r3, r3
 8024b16:	009b      	lsls	r3, r3, #2
 8024b18:	b2db      	uxtb	r3, r3
 8024b1a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8024b1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024b1e:	2b13      	cmp	r3, #19
 8024b20:	f240 80e8 	bls.w	8024cf4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8024b24:	687b      	ldr	r3, [r7, #4]
 8024b26:	895b      	ldrh	r3, [r3, #10]
 8024b28:	2b03      	cmp	r3, #3
 8024b2a:	f240 80e5 	bls.w	8024cf8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8024b2e:	687b      	ldr	r3, [r7, #4]
 8024b30:	685b      	ldr	r3, [r3, #4]
 8024b32:	781b      	ldrb	r3, [r3, #0]
 8024b34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8024b38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8024b3c:	2b00      	cmp	r3, #0
 8024b3e:	f000 80d2 	beq.w	8024ce6 <icmp_input+0x1ea>
 8024b42:	2b08      	cmp	r3, #8
 8024b44:	f040 80d2 	bne.w	8024cec <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8024b48:	4b77      	ldr	r3, [pc, #476]	; (8024d28 <icmp_input+0x22c>)
 8024b4a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024b4c:	4b75      	ldr	r3, [pc, #468]	; (8024d24 <icmp_input+0x228>)
 8024b4e:	695b      	ldr	r3, [r3, #20]
 8024b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024b54:	2be0      	cmp	r3, #224	; 0xe0
 8024b56:	f000 80d6 	beq.w	8024d06 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8024b5a:	4b72      	ldr	r3, [pc, #456]	; (8024d24 <icmp_input+0x228>)
 8024b5c:	695b      	ldr	r3, [r3, #20]
 8024b5e:	4a71      	ldr	r2, [pc, #452]	; (8024d24 <icmp_input+0x228>)
 8024b60:	6812      	ldr	r2, [r2, #0]
 8024b62:	4611      	mov	r1, r2
 8024b64:	4618      	mov	r0, r3
 8024b66:	f000 fc31 	bl	80253cc <ip4_addr_isbroadcast_u32>
 8024b6a:	4603      	mov	r3, r0
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	f040 80cc 	bne.w	8024d0a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8024b72:	687b      	ldr	r3, [r7, #4]
 8024b74:	891b      	ldrh	r3, [r3, #8]
 8024b76:	2b07      	cmp	r3, #7
 8024b78:	f240 80c0 	bls.w	8024cfc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8024b7c:	6878      	ldr	r0, [r7, #4]
 8024b7e:	f7f5 fb84 	bl	801a28a <inet_chksum_pbuf>
 8024b82:	4603      	mov	r3, r0
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	d003      	beq.n	8024b90 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8024b88:	6878      	ldr	r0, [r7, #4]
 8024b8a:	f7f6 ff97 	bl	801babc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8024b8e:	e0c5      	b.n	8024d1c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024b92:	330e      	adds	r3, #14
 8024b94:	4619      	mov	r1, r3
 8024b96:	6878      	ldr	r0, [r7, #4]
 8024b98:	f7f6 fefa 	bl	801b990 <pbuf_add_header>
 8024b9c:	4603      	mov	r3, r0
 8024b9e:	2b00      	cmp	r3, #0
 8024ba0:	d04b      	beq.n	8024c3a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8024ba2:	687b      	ldr	r3, [r7, #4]
 8024ba4:	891a      	ldrh	r2, [r3, #8]
 8024ba6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024ba8:	4413      	add	r3, r2
 8024baa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8024bac:	687b      	ldr	r3, [r7, #4]
 8024bae:	891b      	ldrh	r3, [r3, #8]
 8024bb0:	8b7a      	ldrh	r2, [r7, #26]
 8024bb2:	429a      	cmp	r2, r3
 8024bb4:	f0c0 80ab 	bcc.w	8024d0e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8024bb8:	8b7b      	ldrh	r3, [r7, #26]
 8024bba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024bbe:	4619      	mov	r1, r3
 8024bc0:	200e      	movs	r0, #14
 8024bc2:	f7f6 fc97 	bl	801b4f4 <pbuf_alloc>
 8024bc6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8024bc8:	697b      	ldr	r3, [r7, #20]
 8024bca:	2b00      	cmp	r3, #0
 8024bcc:	f000 80a1 	beq.w	8024d12 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8024bd0:	697b      	ldr	r3, [r7, #20]
 8024bd2:	895b      	ldrh	r3, [r3, #10]
 8024bd4:	461a      	mov	r2, r3
 8024bd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024bd8:	3308      	adds	r3, #8
 8024bda:	429a      	cmp	r2, r3
 8024bdc:	d203      	bcs.n	8024be6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8024bde:	6978      	ldr	r0, [r7, #20]
 8024be0:	f7f6 ff6c 	bl	801babc <pbuf_free>
          goto icmperr;
 8024be4:	e096      	b.n	8024d14 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8024be6:	697b      	ldr	r3, [r7, #20]
 8024be8:	685b      	ldr	r3, [r3, #4]
 8024bea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8024bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024bee:	4618      	mov	r0, r3
 8024bf0:	f002 fb3c 	bl	802726c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8024bf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024bf6:	4619      	mov	r1, r3
 8024bf8:	6978      	ldr	r0, [r7, #20]
 8024bfa:	f7f6 fed9 	bl	801b9b0 <pbuf_remove_header>
 8024bfe:	4603      	mov	r3, r0
 8024c00:	2b00      	cmp	r3, #0
 8024c02:	d009      	beq.n	8024c18 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8024c04:	4b49      	ldr	r3, [pc, #292]	; (8024d2c <icmp_input+0x230>)
 8024c06:	22b6      	movs	r2, #182	; 0xb6
 8024c08:	4949      	ldr	r1, [pc, #292]	; (8024d30 <icmp_input+0x234>)
 8024c0a:	484a      	ldr	r0, [pc, #296]	; (8024d34 <icmp_input+0x238>)
 8024c0c:	f002 fc54 	bl	80274b8 <iprintf>
          pbuf_free(r);
 8024c10:	6978      	ldr	r0, [r7, #20]
 8024c12:	f7f6 ff53 	bl	801babc <pbuf_free>
          goto icmperr;
 8024c16:	e07d      	b.n	8024d14 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8024c18:	6879      	ldr	r1, [r7, #4]
 8024c1a:	6978      	ldr	r0, [r7, #20]
 8024c1c:	f7f7 f882 	bl	801bd24 <pbuf_copy>
 8024c20:	4603      	mov	r3, r0
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	d003      	beq.n	8024c2e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8024c26:	6978      	ldr	r0, [r7, #20]
 8024c28:	f7f6 ff48 	bl	801babc <pbuf_free>
          goto icmperr;
 8024c2c:	e072      	b.n	8024d14 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8024c2e:	6878      	ldr	r0, [r7, #4]
 8024c30:	f7f6 ff44 	bl	801babc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8024c34:	697b      	ldr	r3, [r7, #20]
 8024c36:	607b      	str	r3, [r7, #4]
 8024c38:	e00f      	b.n	8024c5a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024c3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024c3c:	330e      	adds	r3, #14
 8024c3e:	4619      	mov	r1, r3
 8024c40:	6878      	ldr	r0, [r7, #4]
 8024c42:	f7f6 feb5 	bl	801b9b0 <pbuf_remove_header>
 8024c46:	4603      	mov	r3, r0
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	d006      	beq.n	8024c5a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8024c4c:	4b37      	ldr	r3, [pc, #220]	; (8024d2c <icmp_input+0x230>)
 8024c4e:	22c7      	movs	r2, #199	; 0xc7
 8024c50:	4939      	ldr	r1, [pc, #228]	; (8024d38 <icmp_input+0x23c>)
 8024c52:	4838      	ldr	r0, [pc, #224]	; (8024d34 <icmp_input+0x238>)
 8024c54:	f002 fc30 	bl	80274b8 <iprintf>
          goto icmperr;
 8024c58:	e05c      	b.n	8024d14 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8024c5a:	687b      	ldr	r3, [r7, #4]
 8024c5c:	685b      	ldr	r3, [r3, #4]
 8024c5e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8024c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024c62:	4619      	mov	r1, r3
 8024c64:	6878      	ldr	r0, [r7, #4]
 8024c66:	f7f6 fe93 	bl	801b990 <pbuf_add_header>
 8024c6a:	4603      	mov	r3, r0
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	d13c      	bne.n	8024cea <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	685b      	ldr	r3, [r3, #4]
 8024c74:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8024c76:	69fb      	ldr	r3, [r7, #28]
 8024c78:	681a      	ldr	r2, [r3, #0]
 8024c7a:	68fb      	ldr	r3, [r7, #12]
 8024c7c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8024c7e:	4b29      	ldr	r3, [pc, #164]	; (8024d24 <icmp_input+0x228>)
 8024c80:	691a      	ldr	r2, [r3, #16]
 8024c82:	68fb      	ldr	r3, [r7, #12]
 8024c84:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8024c86:	693b      	ldr	r3, [r7, #16]
 8024c88:	2200      	movs	r2, #0
 8024c8a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8024c8c:	693b      	ldr	r3, [r7, #16]
 8024c8e:	885b      	ldrh	r3, [r3, #2]
 8024c90:	b29b      	uxth	r3, r3
 8024c92:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8024c96:	4293      	cmp	r3, r2
 8024c98:	d907      	bls.n	8024caa <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8024c9a:	693b      	ldr	r3, [r7, #16]
 8024c9c:	885b      	ldrh	r3, [r3, #2]
 8024c9e:	b29b      	uxth	r3, r3
 8024ca0:	3309      	adds	r3, #9
 8024ca2:	b29a      	uxth	r2, r3
 8024ca4:	693b      	ldr	r3, [r7, #16]
 8024ca6:	805a      	strh	r2, [r3, #2]
 8024ca8:	e006      	b.n	8024cb8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8024caa:	693b      	ldr	r3, [r7, #16]
 8024cac:	885b      	ldrh	r3, [r3, #2]
 8024cae:	b29b      	uxth	r3, r3
 8024cb0:	3308      	adds	r3, #8
 8024cb2:	b29a      	uxth	r2, r3
 8024cb4:	693b      	ldr	r3, [r7, #16]
 8024cb6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8024cb8:	68fb      	ldr	r3, [r7, #12]
 8024cba:	22ff      	movs	r2, #255	; 0xff
 8024cbc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8024cbe:	68fb      	ldr	r3, [r7, #12]
 8024cc0:	2200      	movs	r2, #0
 8024cc2:	729a      	strb	r2, [r3, #10]
 8024cc4:	2200      	movs	r2, #0
 8024cc6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8024cc8:	683b      	ldr	r3, [r7, #0]
 8024cca:	9302      	str	r3, [sp, #8]
 8024ccc:	2301      	movs	r3, #1
 8024cce:	9301      	str	r3, [sp, #4]
 8024cd0:	2300      	movs	r3, #0
 8024cd2:	9300      	str	r3, [sp, #0]
 8024cd4:	23ff      	movs	r3, #255	; 0xff
 8024cd6:	2200      	movs	r2, #0
 8024cd8:	69f9      	ldr	r1, [r7, #28]
 8024cda:	6878      	ldr	r0, [r7, #4]
 8024cdc:	f000 fa9e 	bl	802521c <ip4_output_if>
 8024ce0:	4603      	mov	r3, r0
 8024ce2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8024ce4:	e001      	b.n	8024cea <icmp_input+0x1ee>
      break;
 8024ce6:	bf00      	nop
 8024ce8:	e000      	b.n	8024cec <icmp_input+0x1f0>
      break;
 8024cea:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8024cec:	6878      	ldr	r0, [r7, #4]
 8024cee:	f7f6 fee5 	bl	801babc <pbuf_free>
  return;
 8024cf2:	e013      	b.n	8024d1c <icmp_input+0x220>
    goto lenerr;
 8024cf4:	bf00      	nop
 8024cf6:	e002      	b.n	8024cfe <icmp_input+0x202>
    goto lenerr;
 8024cf8:	bf00      	nop
 8024cfa:	e000      	b.n	8024cfe <icmp_input+0x202>
        goto lenerr;
 8024cfc:	bf00      	nop
lenerr:
  pbuf_free(p);
 8024cfe:	6878      	ldr	r0, [r7, #4]
 8024d00:	f7f6 fedc 	bl	801babc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8024d04:	e00a      	b.n	8024d1c <icmp_input+0x220>
        goto icmperr;
 8024d06:	bf00      	nop
 8024d08:	e004      	b.n	8024d14 <icmp_input+0x218>
        goto icmperr;
 8024d0a:	bf00      	nop
 8024d0c:	e002      	b.n	8024d14 <icmp_input+0x218>
          goto icmperr;
 8024d0e:	bf00      	nop
 8024d10:	e000      	b.n	8024d14 <icmp_input+0x218>
          goto icmperr;
 8024d12:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8024d14:	6878      	ldr	r0, [r7, #4]
 8024d16:	f7f6 fed1 	bl	801babc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8024d1a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8024d1c:	3728      	adds	r7, #40	; 0x28
 8024d1e:	46bd      	mov	sp, r7
 8024d20:	bd80      	pop	{r7, pc}
 8024d22:	bf00      	nop
 8024d24:	24009e38 	.word	0x24009e38
 8024d28:	24009e4c 	.word	0x24009e4c
 8024d2c:	0802ae68 	.word	0x0802ae68
 8024d30:	0802aea0 	.word	0x0802aea0
 8024d34:	0802aed8 	.word	0x0802aed8
 8024d38:	0802af00 	.word	0x0802af00

08024d3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8024d3c:	b580      	push	{r7, lr}
 8024d3e:	b082      	sub	sp, #8
 8024d40:	af00      	add	r7, sp, #0
 8024d42:	6078      	str	r0, [r7, #4]
 8024d44:	460b      	mov	r3, r1
 8024d46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8024d48:	78fb      	ldrb	r3, [r7, #3]
 8024d4a:	461a      	mov	r2, r3
 8024d4c:	2103      	movs	r1, #3
 8024d4e:	6878      	ldr	r0, [r7, #4]
 8024d50:	f000 f814 	bl	8024d7c <icmp_send_response>
}
 8024d54:	bf00      	nop
 8024d56:	3708      	adds	r7, #8
 8024d58:	46bd      	mov	sp, r7
 8024d5a:	bd80      	pop	{r7, pc}

08024d5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8024d5c:	b580      	push	{r7, lr}
 8024d5e:	b082      	sub	sp, #8
 8024d60:	af00      	add	r7, sp, #0
 8024d62:	6078      	str	r0, [r7, #4]
 8024d64:	460b      	mov	r3, r1
 8024d66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8024d68:	78fb      	ldrb	r3, [r7, #3]
 8024d6a:	461a      	mov	r2, r3
 8024d6c:	210b      	movs	r1, #11
 8024d6e:	6878      	ldr	r0, [r7, #4]
 8024d70:	f000 f804 	bl	8024d7c <icmp_send_response>
}
 8024d74:	bf00      	nop
 8024d76:	3708      	adds	r7, #8
 8024d78:	46bd      	mov	sp, r7
 8024d7a:	bd80      	pop	{r7, pc}

08024d7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8024d7c:	b580      	push	{r7, lr}
 8024d7e:	b08c      	sub	sp, #48	; 0x30
 8024d80:	af04      	add	r7, sp, #16
 8024d82:	6078      	str	r0, [r7, #4]
 8024d84:	460b      	mov	r3, r1
 8024d86:	70fb      	strb	r3, [r7, #3]
 8024d88:	4613      	mov	r3, r2
 8024d8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8024d8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024d90:	2124      	movs	r1, #36	; 0x24
 8024d92:	2022      	movs	r0, #34	; 0x22
 8024d94:	f7f6 fbae 	bl	801b4f4 <pbuf_alloc>
 8024d98:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8024d9a:	69fb      	ldr	r3, [r7, #28]
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	d056      	beq.n	8024e4e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8024da0:	69fb      	ldr	r3, [r7, #28]
 8024da2:	895b      	ldrh	r3, [r3, #10]
 8024da4:	2b23      	cmp	r3, #35	; 0x23
 8024da6:	d806      	bhi.n	8024db6 <icmp_send_response+0x3a>
 8024da8:	4b2b      	ldr	r3, [pc, #172]	; (8024e58 <icmp_send_response+0xdc>)
 8024daa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8024dae:	492b      	ldr	r1, [pc, #172]	; (8024e5c <icmp_send_response+0xe0>)
 8024db0:	482b      	ldr	r0, [pc, #172]	; (8024e60 <icmp_send_response+0xe4>)
 8024db2:	f002 fb81 	bl	80274b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	685b      	ldr	r3, [r3, #4]
 8024dba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8024dbc:	69fb      	ldr	r3, [r7, #28]
 8024dbe:	685b      	ldr	r3, [r3, #4]
 8024dc0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8024dc2:	697b      	ldr	r3, [r7, #20]
 8024dc4:	78fa      	ldrb	r2, [r7, #3]
 8024dc6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8024dc8:	697b      	ldr	r3, [r7, #20]
 8024dca:	78ba      	ldrb	r2, [r7, #2]
 8024dcc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8024dce:	697b      	ldr	r3, [r7, #20]
 8024dd0:	2200      	movs	r2, #0
 8024dd2:	711a      	strb	r2, [r3, #4]
 8024dd4:	2200      	movs	r2, #0
 8024dd6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8024dd8:	697b      	ldr	r3, [r7, #20]
 8024dda:	2200      	movs	r2, #0
 8024ddc:	719a      	strb	r2, [r3, #6]
 8024dde:	2200      	movs	r2, #0
 8024de0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8024de2:	69fb      	ldr	r3, [r7, #28]
 8024de4:	685b      	ldr	r3, [r3, #4]
 8024de6:	f103 0008 	add.w	r0, r3, #8
 8024dea:	687b      	ldr	r3, [r7, #4]
 8024dec:	685b      	ldr	r3, [r3, #4]
 8024dee:	221c      	movs	r2, #28
 8024df0:	4619      	mov	r1, r3
 8024df2:	f002 fa3b 	bl	802726c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8024df6:	69bb      	ldr	r3, [r7, #24]
 8024df8:	68db      	ldr	r3, [r3, #12]
 8024dfa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8024dfc:	f107 030c 	add.w	r3, r7, #12
 8024e00:	4618      	mov	r0, r3
 8024e02:	f000 f82f 	bl	8024e64 <ip4_route>
 8024e06:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8024e08:	693b      	ldr	r3, [r7, #16]
 8024e0a:	2b00      	cmp	r3, #0
 8024e0c:	d01b      	beq.n	8024e46 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8024e0e:	697b      	ldr	r3, [r7, #20]
 8024e10:	2200      	movs	r2, #0
 8024e12:	709a      	strb	r2, [r3, #2]
 8024e14:	2200      	movs	r2, #0
 8024e16:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8024e18:	69fb      	ldr	r3, [r7, #28]
 8024e1a:	895b      	ldrh	r3, [r3, #10]
 8024e1c:	4619      	mov	r1, r3
 8024e1e:	6978      	ldr	r0, [r7, #20]
 8024e20:	f7f5 fa21 	bl	801a266 <inet_chksum>
 8024e24:	4603      	mov	r3, r0
 8024e26:	461a      	mov	r2, r3
 8024e28:	697b      	ldr	r3, [r7, #20]
 8024e2a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8024e2c:	f107 020c 	add.w	r2, r7, #12
 8024e30:	693b      	ldr	r3, [r7, #16]
 8024e32:	9302      	str	r3, [sp, #8]
 8024e34:	2301      	movs	r3, #1
 8024e36:	9301      	str	r3, [sp, #4]
 8024e38:	2300      	movs	r3, #0
 8024e3a:	9300      	str	r3, [sp, #0]
 8024e3c:	23ff      	movs	r3, #255	; 0xff
 8024e3e:	2100      	movs	r1, #0
 8024e40:	69f8      	ldr	r0, [r7, #28]
 8024e42:	f000 f9eb 	bl	802521c <ip4_output_if>
  }
  pbuf_free(q);
 8024e46:	69f8      	ldr	r0, [r7, #28]
 8024e48:	f7f6 fe38 	bl	801babc <pbuf_free>
 8024e4c:	e000      	b.n	8024e50 <icmp_send_response+0xd4>
    return;
 8024e4e:	bf00      	nop
}
 8024e50:	3720      	adds	r7, #32
 8024e52:	46bd      	mov	sp, r7
 8024e54:	bd80      	pop	{r7, pc}
 8024e56:	bf00      	nop
 8024e58:	0802ae68 	.word	0x0802ae68
 8024e5c:	0802af34 	.word	0x0802af34
 8024e60:	0802aed8 	.word	0x0802aed8

08024e64 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8024e64:	b480      	push	{r7}
 8024e66:	b085      	sub	sp, #20
 8024e68:	af00      	add	r7, sp, #0
 8024e6a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8024e6c:	4b33      	ldr	r3, [pc, #204]	; (8024f3c <ip4_route+0xd8>)
 8024e6e:	681b      	ldr	r3, [r3, #0]
 8024e70:	60fb      	str	r3, [r7, #12]
 8024e72:	e036      	b.n	8024ee2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024e74:	68fb      	ldr	r3, [r7, #12]
 8024e76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024e7a:	f003 0301 	and.w	r3, r3, #1
 8024e7e:	b2db      	uxtb	r3, r3
 8024e80:	2b00      	cmp	r3, #0
 8024e82:	d02b      	beq.n	8024edc <ip4_route+0x78>
 8024e84:	68fb      	ldr	r3, [r7, #12]
 8024e86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024e8a:	089b      	lsrs	r3, r3, #2
 8024e8c:	f003 0301 	and.w	r3, r3, #1
 8024e90:	b2db      	uxtb	r3, r3
 8024e92:	2b00      	cmp	r3, #0
 8024e94:	d022      	beq.n	8024edc <ip4_route+0x78>
 8024e96:	68fb      	ldr	r3, [r7, #12]
 8024e98:	3304      	adds	r3, #4
 8024e9a:	681b      	ldr	r3, [r3, #0]
 8024e9c:	2b00      	cmp	r3, #0
 8024e9e:	d01d      	beq.n	8024edc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8024ea0:	687b      	ldr	r3, [r7, #4]
 8024ea2:	681a      	ldr	r2, [r3, #0]
 8024ea4:	68fb      	ldr	r3, [r7, #12]
 8024ea6:	3304      	adds	r3, #4
 8024ea8:	681b      	ldr	r3, [r3, #0]
 8024eaa:	405a      	eors	r2, r3
 8024eac:	68fb      	ldr	r3, [r7, #12]
 8024eae:	3308      	adds	r3, #8
 8024eb0:	681b      	ldr	r3, [r3, #0]
 8024eb2:	4013      	ands	r3, r2
 8024eb4:	2b00      	cmp	r3, #0
 8024eb6:	d101      	bne.n	8024ebc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8024eb8:	68fb      	ldr	r3, [r7, #12]
 8024eba:	e038      	b.n	8024f2e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8024ebc:	68fb      	ldr	r3, [r7, #12]
 8024ebe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024ec2:	f003 0302 	and.w	r3, r3, #2
 8024ec6:	2b00      	cmp	r3, #0
 8024ec8:	d108      	bne.n	8024edc <ip4_route+0x78>
 8024eca:	687b      	ldr	r3, [r7, #4]
 8024ecc:	681a      	ldr	r2, [r3, #0]
 8024ece:	68fb      	ldr	r3, [r7, #12]
 8024ed0:	330c      	adds	r3, #12
 8024ed2:	681b      	ldr	r3, [r3, #0]
 8024ed4:	429a      	cmp	r2, r3
 8024ed6:	d101      	bne.n	8024edc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8024ed8:	68fb      	ldr	r3, [r7, #12]
 8024eda:	e028      	b.n	8024f2e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8024edc:	68fb      	ldr	r3, [r7, #12]
 8024ede:	681b      	ldr	r3, [r3, #0]
 8024ee0:	60fb      	str	r3, [r7, #12]
 8024ee2:	68fb      	ldr	r3, [r7, #12]
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	d1c5      	bne.n	8024e74 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024ee8:	4b15      	ldr	r3, [pc, #84]	; (8024f40 <ip4_route+0xdc>)
 8024eea:	681b      	ldr	r3, [r3, #0]
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d01a      	beq.n	8024f26 <ip4_route+0xc2>
 8024ef0:	4b13      	ldr	r3, [pc, #76]	; (8024f40 <ip4_route+0xdc>)
 8024ef2:	681b      	ldr	r3, [r3, #0]
 8024ef4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024ef8:	f003 0301 	and.w	r3, r3, #1
 8024efc:	2b00      	cmp	r3, #0
 8024efe:	d012      	beq.n	8024f26 <ip4_route+0xc2>
 8024f00:	4b0f      	ldr	r3, [pc, #60]	; (8024f40 <ip4_route+0xdc>)
 8024f02:	681b      	ldr	r3, [r3, #0]
 8024f04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024f08:	f003 0304 	and.w	r3, r3, #4
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	d00a      	beq.n	8024f26 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024f10:	4b0b      	ldr	r3, [pc, #44]	; (8024f40 <ip4_route+0xdc>)
 8024f12:	681b      	ldr	r3, [r3, #0]
 8024f14:	3304      	adds	r3, #4
 8024f16:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d004      	beq.n	8024f26 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	681b      	ldr	r3, [r3, #0]
 8024f20:	b2db      	uxtb	r3, r3
 8024f22:	2b7f      	cmp	r3, #127	; 0x7f
 8024f24:	d101      	bne.n	8024f2a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8024f26:	2300      	movs	r3, #0
 8024f28:	e001      	b.n	8024f2e <ip4_route+0xca>
  }

  return netif_default;
 8024f2a:	4b05      	ldr	r3, [pc, #20]	; (8024f40 <ip4_route+0xdc>)
 8024f2c:	681b      	ldr	r3, [r3, #0]
}
 8024f2e:	4618      	mov	r0, r3
 8024f30:	3714      	adds	r7, #20
 8024f32:	46bd      	mov	sp, r7
 8024f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f38:	4770      	bx	lr
 8024f3a:	bf00      	nop
 8024f3c:	2400cf4c 	.word	0x2400cf4c
 8024f40:	2400cf50 	.word	0x2400cf50

08024f44 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8024f44:	b580      	push	{r7, lr}
 8024f46:	b082      	sub	sp, #8
 8024f48:	af00      	add	r7, sp, #0
 8024f4a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024f52:	f003 0301 	and.w	r3, r3, #1
 8024f56:	b2db      	uxtb	r3, r3
 8024f58:	2b00      	cmp	r3, #0
 8024f5a:	d016      	beq.n	8024f8a <ip4_input_accept+0x46>
 8024f5c:	687b      	ldr	r3, [r7, #4]
 8024f5e:	3304      	adds	r3, #4
 8024f60:	681b      	ldr	r3, [r3, #0]
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	d011      	beq.n	8024f8a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024f66:	4b0b      	ldr	r3, [pc, #44]	; (8024f94 <ip4_input_accept+0x50>)
 8024f68:	695a      	ldr	r2, [r3, #20]
 8024f6a:	687b      	ldr	r3, [r7, #4]
 8024f6c:	3304      	adds	r3, #4
 8024f6e:	681b      	ldr	r3, [r3, #0]
 8024f70:	429a      	cmp	r2, r3
 8024f72:	d008      	beq.n	8024f86 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8024f74:	4b07      	ldr	r3, [pc, #28]	; (8024f94 <ip4_input_accept+0x50>)
 8024f76:	695b      	ldr	r3, [r3, #20]
 8024f78:	6879      	ldr	r1, [r7, #4]
 8024f7a:	4618      	mov	r0, r3
 8024f7c:	f000 fa26 	bl	80253cc <ip4_addr_isbroadcast_u32>
 8024f80:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024f82:	2b00      	cmp	r3, #0
 8024f84:	d001      	beq.n	8024f8a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8024f86:	2301      	movs	r3, #1
 8024f88:	e000      	b.n	8024f8c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8024f8a:	2300      	movs	r3, #0
}
 8024f8c:	4618      	mov	r0, r3
 8024f8e:	3708      	adds	r7, #8
 8024f90:	46bd      	mov	sp, r7
 8024f92:	bd80      	pop	{r7, pc}
 8024f94:	24009e38 	.word	0x24009e38

08024f98 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8024f98:	b580      	push	{r7, lr}
 8024f9a:	b088      	sub	sp, #32
 8024f9c:	af00      	add	r7, sp, #0
 8024f9e:	6078      	str	r0, [r7, #4]
 8024fa0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8024fa2:	2301      	movs	r3, #1
 8024fa4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8024fa6:	687b      	ldr	r3, [r7, #4]
 8024fa8:	685b      	ldr	r3, [r3, #4]
 8024faa:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8024fac:	69fb      	ldr	r3, [r7, #28]
 8024fae:	781b      	ldrb	r3, [r3, #0]
 8024fb0:	091b      	lsrs	r3, r3, #4
 8024fb2:	b2db      	uxtb	r3, r3
 8024fb4:	2b04      	cmp	r3, #4
 8024fb6:	d004      	beq.n	8024fc2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8024fb8:	6878      	ldr	r0, [r7, #4]
 8024fba:	f7f6 fd7f 	bl	801babc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8024fbe:	2300      	movs	r3, #0
 8024fc0:	e123      	b.n	802520a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8024fc2:	69fb      	ldr	r3, [r7, #28]
 8024fc4:	781b      	ldrb	r3, [r3, #0]
 8024fc6:	f003 030f 	and.w	r3, r3, #15
 8024fca:	b2db      	uxtb	r3, r3
 8024fcc:	009b      	lsls	r3, r3, #2
 8024fce:	b2db      	uxtb	r3, r3
 8024fd0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8024fd2:	69fb      	ldr	r3, [r7, #28]
 8024fd4:	885b      	ldrh	r3, [r3, #2]
 8024fd6:	b29b      	uxth	r3, r3
 8024fd8:	4618      	mov	r0, r3
 8024fda:	f7f5 f8b9 	bl	801a150 <lwip_htons>
 8024fde:	4603      	mov	r3, r0
 8024fe0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8024fe2:	687b      	ldr	r3, [r7, #4]
 8024fe4:	891b      	ldrh	r3, [r3, #8]
 8024fe6:	8a3a      	ldrh	r2, [r7, #16]
 8024fe8:	429a      	cmp	r2, r3
 8024fea:	d204      	bcs.n	8024ff6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8024fec:	8a3b      	ldrh	r3, [r7, #16]
 8024fee:	4619      	mov	r1, r3
 8024ff0:	6878      	ldr	r0, [r7, #4]
 8024ff2:	f7f6 fbdd 	bl	801b7b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	895b      	ldrh	r3, [r3, #10]
 8024ffa:	8a7a      	ldrh	r2, [r7, #18]
 8024ffc:	429a      	cmp	r2, r3
 8024ffe:	d807      	bhi.n	8025010 <ip4_input+0x78>
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	891b      	ldrh	r3, [r3, #8]
 8025004:	8a3a      	ldrh	r2, [r7, #16]
 8025006:	429a      	cmp	r2, r3
 8025008:	d802      	bhi.n	8025010 <ip4_input+0x78>
 802500a:	8a7b      	ldrh	r3, [r7, #18]
 802500c:	2b13      	cmp	r3, #19
 802500e:	d804      	bhi.n	802501a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8025010:	6878      	ldr	r0, [r7, #4]
 8025012:	f7f6 fd53 	bl	801babc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8025016:	2300      	movs	r3, #0
 8025018:	e0f7      	b.n	802520a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802501a:	69fb      	ldr	r3, [r7, #28]
 802501c:	691b      	ldr	r3, [r3, #16]
 802501e:	4a7d      	ldr	r2, [pc, #500]	; (8025214 <ip4_input+0x27c>)
 8025020:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8025022:	69fb      	ldr	r3, [r7, #28]
 8025024:	68db      	ldr	r3, [r3, #12]
 8025026:	4a7b      	ldr	r2, [pc, #492]	; (8025214 <ip4_input+0x27c>)
 8025028:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802502a:	4b7a      	ldr	r3, [pc, #488]	; (8025214 <ip4_input+0x27c>)
 802502c:	695b      	ldr	r3, [r3, #20]
 802502e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025032:	2be0      	cmp	r3, #224	; 0xe0
 8025034:	d112      	bne.n	802505c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8025036:	683b      	ldr	r3, [r7, #0]
 8025038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802503c:	f003 0301 	and.w	r3, r3, #1
 8025040:	b2db      	uxtb	r3, r3
 8025042:	2b00      	cmp	r3, #0
 8025044:	d007      	beq.n	8025056 <ip4_input+0xbe>
 8025046:	683b      	ldr	r3, [r7, #0]
 8025048:	3304      	adds	r3, #4
 802504a:	681b      	ldr	r3, [r3, #0]
 802504c:	2b00      	cmp	r3, #0
 802504e:	d002      	beq.n	8025056 <ip4_input+0xbe>
      netif = inp;
 8025050:	683b      	ldr	r3, [r7, #0]
 8025052:	61bb      	str	r3, [r7, #24]
 8025054:	e02a      	b.n	80250ac <ip4_input+0x114>
    } else {
      netif = NULL;
 8025056:	2300      	movs	r3, #0
 8025058:	61bb      	str	r3, [r7, #24]
 802505a:	e027      	b.n	80250ac <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 802505c:	6838      	ldr	r0, [r7, #0]
 802505e:	f7ff ff71 	bl	8024f44 <ip4_input_accept>
 8025062:	4603      	mov	r3, r0
 8025064:	2b00      	cmp	r3, #0
 8025066:	d002      	beq.n	802506e <ip4_input+0xd6>
      netif = inp;
 8025068:	683b      	ldr	r3, [r7, #0]
 802506a:	61bb      	str	r3, [r7, #24]
 802506c:	e01e      	b.n	80250ac <ip4_input+0x114>
    } else {
      netif = NULL;
 802506e:	2300      	movs	r3, #0
 8025070:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8025072:	4b68      	ldr	r3, [pc, #416]	; (8025214 <ip4_input+0x27c>)
 8025074:	695b      	ldr	r3, [r3, #20]
 8025076:	b2db      	uxtb	r3, r3
 8025078:	2b7f      	cmp	r3, #127	; 0x7f
 802507a:	d017      	beq.n	80250ac <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802507c:	4b66      	ldr	r3, [pc, #408]	; (8025218 <ip4_input+0x280>)
 802507e:	681b      	ldr	r3, [r3, #0]
 8025080:	61bb      	str	r3, [r7, #24]
 8025082:	e00e      	b.n	80250a2 <ip4_input+0x10a>
          if (netif == inp) {
 8025084:	69ba      	ldr	r2, [r7, #24]
 8025086:	683b      	ldr	r3, [r7, #0]
 8025088:	429a      	cmp	r2, r3
 802508a:	d006      	beq.n	802509a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802508c:	69b8      	ldr	r0, [r7, #24]
 802508e:	f7ff ff59 	bl	8024f44 <ip4_input_accept>
 8025092:	4603      	mov	r3, r0
 8025094:	2b00      	cmp	r3, #0
 8025096:	d108      	bne.n	80250aa <ip4_input+0x112>
 8025098:	e000      	b.n	802509c <ip4_input+0x104>
            continue;
 802509a:	bf00      	nop
        NETIF_FOREACH(netif) {
 802509c:	69bb      	ldr	r3, [r7, #24]
 802509e:	681b      	ldr	r3, [r3, #0]
 80250a0:	61bb      	str	r3, [r7, #24]
 80250a2:	69bb      	ldr	r3, [r7, #24]
 80250a4:	2b00      	cmp	r3, #0
 80250a6:	d1ed      	bne.n	8025084 <ip4_input+0xec>
 80250a8:	e000      	b.n	80250ac <ip4_input+0x114>
            break;
 80250aa:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80250ac:	69bb      	ldr	r3, [r7, #24]
 80250ae:	2b00      	cmp	r3, #0
 80250b0:	d111      	bne.n	80250d6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80250b2:	69fb      	ldr	r3, [r7, #28]
 80250b4:	7a5b      	ldrb	r3, [r3, #9]
 80250b6:	2b11      	cmp	r3, #17
 80250b8:	d10d      	bne.n	80250d6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80250ba:	8a7b      	ldrh	r3, [r7, #18]
 80250bc:	69fa      	ldr	r2, [r7, #28]
 80250be:	4413      	add	r3, r2
 80250c0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80250c2:	68fb      	ldr	r3, [r7, #12]
 80250c4:	885b      	ldrh	r3, [r3, #2]
 80250c6:	b29b      	uxth	r3, r3
 80250c8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80250cc:	d103      	bne.n	80250d6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80250ce:	683b      	ldr	r3, [r7, #0]
 80250d0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80250d2:	2300      	movs	r3, #0
 80250d4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80250d6:	697b      	ldr	r3, [r7, #20]
 80250d8:	2b00      	cmp	r3, #0
 80250da:	d017      	beq.n	802510c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80250dc:	4b4d      	ldr	r3, [pc, #308]	; (8025214 <ip4_input+0x27c>)
 80250de:	691b      	ldr	r3, [r3, #16]
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	d013      	beq.n	802510c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80250e4:	4b4b      	ldr	r3, [pc, #300]	; (8025214 <ip4_input+0x27c>)
 80250e6:	691b      	ldr	r3, [r3, #16]
 80250e8:	6839      	ldr	r1, [r7, #0]
 80250ea:	4618      	mov	r0, r3
 80250ec:	f000 f96e 	bl	80253cc <ip4_addr_isbroadcast_u32>
 80250f0:	4603      	mov	r3, r0
 80250f2:	2b00      	cmp	r3, #0
 80250f4:	d105      	bne.n	8025102 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80250f6:	4b47      	ldr	r3, [pc, #284]	; (8025214 <ip4_input+0x27c>)
 80250f8:	691b      	ldr	r3, [r3, #16]
 80250fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80250fe:	2be0      	cmp	r3, #224	; 0xe0
 8025100:	d104      	bne.n	802510c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8025102:	6878      	ldr	r0, [r7, #4]
 8025104:	f7f6 fcda 	bl	801babc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8025108:	2300      	movs	r3, #0
 802510a:	e07e      	b.n	802520a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 802510c:	69bb      	ldr	r3, [r7, #24]
 802510e:	2b00      	cmp	r3, #0
 8025110:	d104      	bne.n	802511c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8025112:	6878      	ldr	r0, [r7, #4]
 8025114:	f7f6 fcd2 	bl	801babc <pbuf_free>
    return ERR_OK;
 8025118:	2300      	movs	r3, #0
 802511a:	e076      	b.n	802520a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 802511c:	69fb      	ldr	r3, [r7, #28]
 802511e:	88db      	ldrh	r3, [r3, #6]
 8025120:	b29b      	uxth	r3, r3
 8025122:	461a      	mov	r2, r3
 8025124:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8025128:	4013      	ands	r3, r2
 802512a:	2b00      	cmp	r3, #0
 802512c:	d00b      	beq.n	8025146 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802512e:	6878      	ldr	r0, [r7, #4]
 8025130:	f000 fc92 	bl	8025a58 <ip4_reass>
 8025134:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8025136:	687b      	ldr	r3, [r7, #4]
 8025138:	2b00      	cmp	r3, #0
 802513a:	d101      	bne.n	8025140 <ip4_input+0x1a8>
      return ERR_OK;
 802513c:	2300      	movs	r3, #0
 802513e:	e064      	b.n	802520a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8025140:	687b      	ldr	r3, [r7, #4]
 8025142:	685b      	ldr	r3, [r3, #4]
 8025144:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8025146:	4a33      	ldr	r2, [pc, #204]	; (8025214 <ip4_input+0x27c>)
 8025148:	69bb      	ldr	r3, [r7, #24]
 802514a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 802514c:	4a31      	ldr	r2, [pc, #196]	; (8025214 <ip4_input+0x27c>)
 802514e:	683b      	ldr	r3, [r7, #0]
 8025150:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8025152:	4a30      	ldr	r2, [pc, #192]	; (8025214 <ip4_input+0x27c>)
 8025154:	69fb      	ldr	r3, [r7, #28]
 8025156:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8025158:	69fb      	ldr	r3, [r7, #28]
 802515a:	781b      	ldrb	r3, [r3, #0]
 802515c:	f003 030f 	and.w	r3, r3, #15
 8025160:	b2db      	uxtb	r3, r3
 8025162:	009b      	lsls	r3, r3, #2
 8025164:	b2db      	uxtb	r3, r3
 8025166:	b29a      	uxth	r2, r3
 8025168:	4b2a      	ldr	r3, [pc, #168]	; (8025214 <ip4_input+0x27c>)
 802516a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 802516c:	8a7b      	ldrh	r3, [r7, #18]
 802516e:	4619      	mov	r1, r3
 8025170:	6878      	ldr	r0, [r7, #4]
 8025172:	f7f6 fc1d 	bl	801b9b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8025176:	69fb      	ldr	r3, [r7, #28]
 8025178:	7a5b      	ldrb	r3, [r3, #9]
 802517a:	2b11      	cmp	r3, #17
 802517c:	d006      	beq.n	802518c <ip4_input+0x1f4>
 802517e:	2b11      	cmp	r3, #17
 8025180:	dc13      	bgt.n	80251aa <ip4_input+0x212>
 8025182:	2b01      	cmp	r3, #1
 8025184:	d00c      	beq.n	80251a0 <ip4_input+0x208>
 8025186:	2b06      	cmp	r3, #6
 8025188:	d005      	beq.n	8025196 <ip4_input+0x1fe>
 802518a:	e00e      	b.n	80251aa <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 802518c:	6839      	ldr	r1, [r7, #0]
 802518e:	6878      	ldr	r0, [r7, #4]
 8025190:	f7fc fac2 	bl	8021718 <udp_input>
        break;
 8025194:	e026      	b.n	80251e4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8025196:	6839      	ldr	r1, [r7, #0]
 8025198:	6878      	ldr	r0, [r7, #4]
 802519a:	f7f8 fad3 	bl	801d744 <tcp_input>
        break;
 802519e:	e021      	b.n	80251e4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80251a0:	6839      	ldr	r1, [r7, #0]
 80251a2:	6878      	ldr	r0, [r7, #4]
 80251a4:	f7ff fcaa 	bl	8024afc <icmp_input>
        break;
 80251a8:	e01c      	b.n	80251e4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80251aa:	4b1a      	ldr	r3, [pc, #104]	; (8025214 <ip4_input+0x27c>)
 80251ac:	695b      	ldr	r3, [r3, #20]
 80251ae:	69b9      	ldr	r1, [r7, #24]
 80251b0:	4618      	mov	r0, r3
 80251b2:	f000 f90b 	bl	80253cc <ip4_addr_isbroadcast_u32>
 80251b6:	4603      	mov	r3, r0
 80251b8:	2b00      	cmp	r3, #0
 80251ba:	d10f      	bne.n	80251dc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80251bc:	4b15      	ldr	r3, [pc, #84]	; (8025214 <ip4_input+0x27c>)
 80251be:	695b      	ldr	r3, [r3, #20]
 80251c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80251c4:	2be0      	cmp	r3, #224	; 0xe0
 80251c6:	d009      	beq.n	80251dc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80251c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80251cc:	4619      	mov	r1, r3
 80251ce:	6878      	ldr	r0, [r7, #4]
 80251d0:	f7f6 fc61 	bl	801ba96 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80251d4:	2102      	movs	r1, #2
 80251d6:	6878      	ldr	r0, [r7, #4]
 80251d8:	f7ff fdb0 	bl	8024d3c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80251dc:	6878      	ldr	r0, [r7, #4]
 80251de:	f7f6 fc6d 	bl	801babc <pbuf_free>
        break;
 80251e2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80251e4:	4b0b      	ldr	r3, [pc, #44]	; (8025214 <ip4_input+0x27c>)
 80251e6:	2200      	movs	r2, #0
 80251e8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80251ea:	4b0a      	ldr	r3, [pc, #40]	; (8025214 <ip4_input+0x27c>)
 80251ec:	2200      	movs	r2, #0
 80251ee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80251f0:	4b08      	ldr	r3, [pc, #32]	; (8025214 <ip4_input+0x27c>)
 80251f2:	2200      	movs	r2, #0
 80251f4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80251f6:	4b07      	ldr	r3, [pc, #28]	; (8025214 <ip4_input+0x27c>)
 80251f8:	2200      	movs	r2, #0
 80251fa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80251fc:	4b05      	ldr	r3, [pc, #20]	; (8025214 <ip4_input+0x27c>)
 80251fe:	2200      	movs	r2, #0
 8025200:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8025202:	4b04      	ldr	r3, [pc, #16]	; (8025214 <ip4_input+0x27c>)
 8025204:	2200      	movs	r2, #0
 8025206:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8025208:	2300      	movs	r3, #0
}
 802520a:	4618      	mov	r0, r3
 802520c:	3720      	adds	r7, #32
 802520e:	46bd      	mov	sp, r7
 8025210:	bd80      	pop	{r7, pc}
 8025212:	bf00      	nop
 8025214:	24009e38 	.word	0x24009e38
 8025218:	2400cf4c 	.word	0x2400cf4c

0802521c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 802521c:	b580      	push	{r7, lr}
 802521e:	b08a      	sub	sp, #40	; 0x28
 8025220:	af04      	add	r7, sp, #16
 8025222:	60f8      	str	r0, [r7, #12]
 8025224:	60b9      	str	r1, [r7, #8]
 8025226:	607a      	str	r2, [r7, #4]
 8025228:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802522a:	68bb      	ldr	r3, [r7, #8]
 802522c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	2b00      	cmp	r3, #0
 8025232:	d009      	beq.n	8025248 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8025234:	68bb      	ldr	r3, [r7, #8]
 8025236:	2b00      	cmp	r3, #0
 8025238:	d003      	beq.n	8025242 <ip4_output_if+0x26>
 802523a:	68bb      	ldr	r3, [r7, #8]
 802523c:	681b      	ldr	r3, [r3, #0]
 802523e:	2b00      	cmp	r3, #0
 8025240:	d102      	bne.n	8025248 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8025242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025244:	3304      	adds	r3, #4
 8025246:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8025248:	78fa      	ldrb	r2, [r7, #3]
 802524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802524c:	9302      	str	r3, [sp, #8]
 802524e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8025252:	9301      	str	r3, [sp, #4]
 8025254:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025258:	9300      	str	r3, [sp, #0]
 802525a:	4613      	mov	r3, r2
 802525c:	687a      	ldr	r2, [r7, #4]
 802525e:	6979      	ldr	r1, [r7, #20]
 8025260:	68f8      	ldr	r0, [r7, #12]
 8025262:	f000 f805 	bl	8025270 <ip4_output_if_src>
 8025266:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8025268:	4618      	mov	r0, r3
 802526a:	3718      	adds	r7, #24
 802526c:	46bd      	mov	sp, r7
 802526e:	bd80      	pop	{r7, pc}

08025270 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8025270:	b580      	push	{r7, lr}
 8025272:	b088      	sub	sp, #32
 8025274:	af00      	add	r7, sp, #0
 8025276:	60f8      	str	r0, [r7, #12]
 8025278:	60b9      	str	r1, [r7, #8]
 802527a:	607a      	str	r2, [r7, #4]
 802527c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802527e:	68fb      	ldr	r3, [r7, #12]
 8025280:	7b9b      	ldrb	r3, [r3, #14]
 8025282:	2b01      	cmp	r3, #1
 8025284:	d006      	beq.n	8025294 <ip4_output_if_src+0x24>
 8025286:	4b4b      	ldr	r3, [pc, #300]	; (80253b4 <ip4_output_if_src+0x144>)
 8025288:	f44f 7255 	mov.w	r2, #852	; 0x354
 802528c:	494a      	ldr	r1, [pc, #296]	; (80253b8 <ip4_output_if_src+0x148>)
 802528e:	484b      	ldr	r0, [pc, #300]	; (80253bc <ip4_output_if_src+0x14c>)
 8025290:	f002 f912 	bl	80274b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	2b00      	cmp	r3, #0
 8025298:	d060      	beq.n	802535c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 802529a:	2314      	movs	r3, #20
 802529c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 802529e:	2114      	movs	r1, #20
 80252a0:	68f8      	ldr	r0, [r7, #12]
 80252a2:	f7f6 fb75 	bl	801b990 <pbuf_add_header>
 80252a6:	4603      	mov	r3, r0
 80252a8:	2b00      	cmp	r3, #0
 80252aa:	d002      	beq.n	80252b2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80252ac:	f06f 0301 	mvn.w	r3, #1
 80252b0:	e07c      	b.n	80253ac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80252b2:	68fb      	ldr	r3, [r7, #12]
 80252b4:	685b      	ldr	r3, [r3, #4]
 80252b6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80252b8:	68fb      	ldr	r3, [r7, #12]
 80252ba:	895b      	ldrh	r3, [r3, #10]
 80252bc:	2b13      	cmp	r3, #19
 80252be:	d806      	bhi.n	80252ce <ip4_output_if_src+0x5e>
 80252c0:	4b3c      	ldr	r3, [pc, #240]	; (80253b4 <ip4_output_if_src+0x144>)
 80252c2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80252c6:	493e      	ldr	r1, [pc, #248]	; (80253c0 <ip4_output_if_src+0x150>)
 80252c8:	483c      	ldr	r0, [pc, #240]	; (80253bc <ip4_output_if_src+0x14c>)
 80252ca:	f002 f8f5 	bl	80274b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80252ce:	69fb      	ldr	r3, [r7, #28]
 80252d0:	78fa      	ldrb	r2, [r7, #3]
 80252d2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80252d4:	69fb      	ldr	r3, [r7, #28]
 80252d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80252da:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80252dc:	687b      	ldr	r3, [r7, #4]
 80252de:	681a      	ldr	r2, [r3, #0]
 80252e0:	69fb      	ldr	r3, [r7, #28]
 80252e2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80252e4:	8b7b      	ldrh	r3, [r7, #26]
 80252e6:	089b      	lsrs	r3, r3, #2
 80252e8:	b29b      	uxth	r3, r3
 80252ea:	b2db      	uxtb	r3, r3
 80252ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80252f0:	b2da      	uxtb	r2, r3
 80252f2:	69fb      	ldr	r3, [r7, #28]
 80252f4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80252f6:	69fb      	ldr	r3, [r7, #28]
 80252f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80252fc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80252fe:	68fb      	ldr	r3, [r7, #12]
 8025300:	891b      	ldrh	r3, [r3, #8]
 8025302:	4618      	mov	r0, r3
 8025304:	f7f4 ff24 	bl	801a150 <lwip_htons>
 8025308:	4603      	mov	r3, r0
 802530a:	461a      	mov	r2, r3
 802530c:	69fb      	ldr	r3, [r7, #28]
 802530e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8025310:	69fb      	ldr	r3, [r7, #28]
 8025312:	2200      	movs	r2, #0
 8025314:	719a      	strb	r2, [r3, #6]
 8025316:	2200      	movs	r2, #0
 8025318:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802531a:	4b2a      	ldr	r3, [pc, #168]	; (80253c4 <ip4_output_if_src+0x154>)
 802531c:	881b      	ldrh	r3, [r3, #0]
 802531e:	4618      	mov	r0, r3
 8025320:	f7f4 ff16 	bl	801a150 <lwip_htons>
 8025324:	4603      	mov	r3, r0
 8025326:	461a      	mov	r2, r3
 8025328:	69fb      	ldr	r3, [r7, #28]
 802532a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 802532c:	4b25      	ldr	r3, [pc, #148]	; (80253c4 <ip4_output_if_src+0x154>)
 802532e:	881b      	ldrh	r3, [r3, #0]
 8025330:	3301      	adds	r3, #1
 8025332:	b29a      	uxth	r2, r3
 8025334:	4b23      	ldr	r3, [pc, #140]	; (80253c4 <ip4_output_if_src+0x154>)
 8025336:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8025338:	68bb      	ldr	r3, [r7, #8]
 802533a:	2b00      	cmp	r3, #0
 802533c:	d104      	bne.n	8025348 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802533e:	4b22      	ldr	r3, [pc, #136]	; (80253c8 <ip4_output_if_src+0x158>)
 8025340:	681a      	ldr	r2, [r3, #0]
 8025342:	69fb      	ldr	r3, [r7, #28]
 8025344:	60da      	str	r2, [r3, #12]
 8025346:	e003      	b.n	8025350 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8025348:	68bb      	ldr	r3, [r7, #8]
 802534a:	681a      	ldr	r2, [r3, #0]
 802534c:	69fb      	ldr	r3, [r7, #28]
 802534e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8025350:	69fb      	ldr	r3, [r7, #28]
 8025352:	2200      	movs	r2, #0
 8025354:	729a      	strb	r2, [r3, #10]
 8025356:	2200      	movs	r2, #0
 8025358:	72da      	strb	r2, [r3, #11]
 802535a:	e00f      	b.n	802537c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 802535c:	68fb      	ldr	r3, [r7, #12]
 802535e:	895b      	ldrh	r3, [r3, #10]
 8025360:	2b13      	cmp	r3, #19
 8025362:	d802      	bhi.n	802536a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8025364:	f06f 0301 	mvn.w	r3, #1
 8025368:	e020      	b.n	80253ac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802536a:	68fb      	ldr	r3, [r7, #12]
 802536c:	685b      	ldr	r3, [r3, #4]
 802536e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8025370:	69fb      	ldr	r3, [r7, #28]
 8025372:	691b      	ldr	r3, [r3, #16]
 8025374:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8025376:	f107 0314 	add.w	r3, r7, #20
 802537a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 802537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025380:	2b00      	cmp	r3, #0
 8025382:	d00c      	beq.n	802539e <ip4_output_if_src+0x12e>
 8025384:	68fb      	ldr	r3, [r7, #12]
 8025386:	891a      	ldrh	r2, [r3, #8]
 8025388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802538c:	429a      	cmp	r2, r3
 802538e:	d906      	bls.n	802539e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8025390:	687a      	ldr	r2, [r7, #4]
 8025392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025394:	68f8      	ldr	r0, [r7, #12]
 8025396:	f000 fd53 	bl	8025e40 <ip4_frag>
 802539a:	4603      	mov	r3, r0
 802539c:	e006      	b.n	80253ac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 802539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253a0:	695b      	ldr	r3, [r3, #20]
 80253a2:	687a      	ldr	r2, [r7, #4]
 80253a4:	68f9      	ldr	r1, [r7, #12]
 80253a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80253a8:	4798      	blx	r3
 80253aa:	4603      	mov	r3, r0
}
 80253ac:	4618      	mov	r0, r3
 80253ae:	3720      	adds	r7, #32
 80253b0:	46bd      	mov	sp, r7
 80253b2:	bd80      	pop	{r7, pc}
 80253b4:	0802af60 	.word	0x0802af60
 80253b8:	0802af94 	.word	0x0802af94
 80253bc:	0802afa0 	.word	0x0802afa0
 80253c0:	0802afc8 	.word	0x0802afc8
 80253c4:	2400d0de 	.word	0x2400d0de
 80253c8:	0802bb4c 	.word	0x0802bb4c

080253cc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80253cc:	b480      	push	{r7}
 80253ce:	b085      	sub	sp, #20
 80253d0:	af00      	add	r7, sp, #0
 80253d2:	6078      	str	r0, [r7, #4]
 80253d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80253d6:	687b      	ldr	r3, [r7, #4]
 80253d8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80253da:	687b      	ldr	r3, [r7, #4]
 80253dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80253e0:	d002      	beq.n	80253e8 <ip4_addr_isbroadcast_u32+0x1c>
 80253e2:	687b      	ldr	r3, [r7, #4]
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d101      	bne.n	80253ec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80253e8:	2301      	movs	r3, #1
 80253ea:	e02a      	b.n	8025442 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80253ec:	683b      	ldr	r3, [r7, #0]
 80253ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80253f2:	f003 0302 	and.w	r3, r3, #2
 80253f6:	2b00      	cmp	r3, #0
 80253f8:	d101      	bne.n	80253fe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80253fa:	2300      	movs	r3, #0
 80253fc:	e021      	b.n	8025442 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80253fe:	683b      	ldr	r3, [r7, #0]
 8025400:	3304      	adds	r3, #4
 8025402:	681b      	ldr	r3, [r3, #0]
 8025404:	687a      	ldr	r2, [r7, #4]
 8025406:	429a      	cmp	r2, r3
 8025408:	d101      	bne.n	802540e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802540a:	2300      	movs	r3, #0
 802540c:	e019      	b.n	8025442 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802540e:	68fa      	ldr	r2, [r7, #12]
 8025410:	683b      	ldr	r3, [r7, #0]
 8025412:	3304      	adds	r3, #4
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	405a      	eors	r2, r3
 8025418:	683b      	ldr	r3, [r7, #0]
 802541a:	3308      	adds	r3, #8
 802541c:	681b      	ldr	r3, [r3, #0]
 802541e:	4013      	ands	r3, r2
 8025420:	2b00      	cmp	r3, #0
 8025422:	d10d      	bne.n	8025440 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8025424:	683b      	ldr	r3, [r7, #0]
 8025426:	3308      	adds	r3, #8
 8025428:	681b      	ldr	r3, [r3, #0]
 802542a:	43da      	mvns	r2, r3
 802542c:	687b      	ldr	r3, [r7, #4]
 802542e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8025430:	683b      	ldr	r3, [r7, #0]
 8025432:	3308      	adds	r3, #8
 8025434:	681b      	ldr	r3, [r3, #0]
 8025436:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8025438:	429a      	cmp	r2, r3
 802543a:	d101      	bne.n	8025440 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 802543c:	2301      	movs	r3, #1
 802543e:	e000      	b.n	8025442 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8025440:	2300      	movs	r3, #0
  }
}
 8025442:	4618      	mov	r0, r3
 8025444:	3714      	adds	r7, #20
 8025446:	46bd      	mov	sp, r7
 8025448:	f85d 7b04 	ldr.w	r7, [sp], #4
 802544c:	4770      	bx	lr
	...

08025450 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8025450:	b580      	push	{r7, lr}
 8025452:	b084      	sub	sp, #16
 8025454:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8025456:	2300      	movs	r3, #0
 8025458:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802545a:	4b12      	ldr	r3, [pc, #72]	; (80254a4 <ip_reass_tmr+0x54>)
 802545c:	681b      	ldr	r3, [r3, #0]
 802545e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8025460:	e018      	b.n	8025494 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8025462:	68fb      	ldr	r3, [r7, #12]
 8025464:	7fdb      	ldrb	r3, [r3, #31]
 8025466:	2b00      	cmp	r3, #0
 8025468:	d00b      	beq.n	8025482 <ip_reass_tmr+0x32>
      r->timer--;
 802546a:	68fb      	ldr	r3, [r7, #12]
 802546c:	7fdb      	ldrb	r3, [r3, #31]
 802546e:	3b01      	subs	r3, #1
 8025470:	b2da      	uxtb	r2, r3
 8025472:	68fb      	ldr	r3, [r7, #12]
 8025474:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8025476:	68fb      	ldr	r3, [r7, #12]
 8025478:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802547a:	68fb      	ldr	r3, [r7, #12]
 802547c:	681b      	ldr	r3, [r3, #0]
 802547e:	60fb      	str	r3, [r7, #12]
 8025480:	e008      	b.n	8025494 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8025482:	68fb      	ldr	r3, [r7, #12]
 8025484:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8025486:	68fb      	ldr	r3, [r7, #12]
 8025488:	681b      	ldr	r3, [r3, #0]
 802548a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 802548c:	68b9      	ldr	r1, [r7, #8]
 802548e:	6878      	ldr	r0, [r7, #4]
 8025490:	f000 f80a 	bl	80254a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8025494:	68fb      	ldr	r3, [r7, #12]
 8025496:	2b00      	cmp	r3, #0
 8025498:	d1e3      	bne.n	8025462 <ip_reass_tmr+0x12>
    }
  }
}
 802549a:	bf00      	nop
 802549c:	bf00      	nop
 802549e:	3710      	adds	r7, #16
 80254a0:	46bd      	mov	sp, r7
 80254a2:	bd80      	pop	{r7, pc}
 80254a4:	2400d0e0 	.word	0x2400d0e0

080254a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80254a8:	b580      	push	{r7, lr}
 80254aa:	b088      	sub	sp, #32
 80254ac:	af00      	add	r7, sp, #0
 80254ae:	6078      	str	r0, [r7, #4]
 80254b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80254b2:	2300      	movs	r3, #0
 80254b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80254b6:	683a      	ldr	r2, [r7, #0]
 80254b8:	687b      	ldr	r3, [r7, #4]
 80254ba:	429a      	cmp	r2, r3
 80254bc:	d105      	bne.n	80254ca <ip_reass_free_complete_datagram+0x22>
 80254be:	4b45      	ldr	r3, [pc, #276]	; (80255d4 <ip_reass_free_complete_datagram+0x12c>)
 80254c0:	22ab      	movs	r2, #171	; 0xab
 80254c2:	4945      	ldr	r1, [pc, #276]	; (80255d8 <ip_reass_free_complete_datagram+0x130>)
 80254c4:	4845      	ldr	r0, [pc, #276]	; (80255dc <ip_reass_free_complete_datagram+0x134>)
 80254c6:	f001 fff7 	bl	80274b8 <iprintf>
  if (prev != NULL) {
 80254ca:	683b      	ldr	r3, [r7, #0]
 80254cc:	2b00      	cmp	r3, #0
 80254ce:	d00a      	beq.n	80254e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80254d0:	683b      	ldr	r3, [r7, #0]
 80254d2:	681b      	ldr	r3, [r3, #0]
 80254d4:	687a      	ldr	r2, [r7, #4]
 80254d6:	429a      	cmp	r2, r3
 80254d8:	d005      	beq.n	80254e6 <ip_reass_free_complete_datagram+0x3e>
 80254da:	4b3e      	ldr	r3, [pc, #248]	; (80255d4 <ip_reass_free_complete_datagram+0x12c>)
 80254dc:	22ad      	movs	r2, #173	; 0xad
 80254de:	4940      	ldr	r1, [pc, #256]	; (80255e0 <ip_reass_free_complete_datagram+0x138>)
 80254e0:	483e      	ldr	r0, [pc, #248]	; (80255dc <ip_reass_free_complete_datagram+0x134>)
 80254e2:	f001 ffe9 	bl	80274b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80254e6:	687b      	ldr	r3, [r7, #4]
 80254e8:	685b      	ldr	r3, [r3, #4]
 80254ea:	685b      	ldr	r3, [r3, #4]
 80254ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80254ee:	697b      	ldr	r3, [r7, #20]
 80254f0:	889b      	ldrh	r3, [r3, #4]
 80254f2:	b29b      	uxth	r3, r3
 80254f4:	2b00      	cmp	r3, #0
 80254f6:	d12a      	bne.n	802554e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	685b      	ldr	r3, [r3, #4]
 80254fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80254fe:	697b      	ldr	r3, [r7, #20]
 8025500:	681a      	ldr	r2, [r3, #0]
 8025502:	687b      	ldr	r3, [r7, #4]
 8025504:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8025506:	69bb      	ldr	r3, [r7, #24]
 8025508:	6858      	ldr	r0, [r3, #4]
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	3308      	adds	r3, #8
 802550e:	2214      	movs	r2, #20
 8025510:	4619      	mov	r1, r3
 8025512:	f001 feab 	bl	802726c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8025516:	2101      	movs	r1, #1
 8025518:	69b8      	ldr	r0, [r7, #24]
 802551a:	f7ff fc1f 	bl	8024d5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802551e:	69b8      	ldr	r0, [r7, #24]
 8025520:	f7f6 fb5a 	bl	801bbd8 <pbuf_clen>
 8025524:	4603      	mov	r3, r0
 8025526:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025528:	8bfa      	ldrh	r2, [r7, #30]
 802552a:	8a7b      	ldrh	r3, [r7, #18]
 802552c:	4413      	add	r3, r2
 802552e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025532:	db05      	blt.n	8025540 <ip_reass_free_complete_datagram+0x98>
 8025534:	4b27      	ldr	r3, [pc, #156]	; (80255d4 <ip_reass_free_complete_datagram+0x12c>)
 8025536:	22bc      	movs	r2, #188	; 0xbc
 8025538:	492a      	ldr	r1, [pc, #168]	; (80255e4 <ip_reass_free_complete_datagram+0x13c>)
 802553a:	4828      	ldr	r0, [pc, #160]	; (80255dc <ip_reass_free_complete_datagram+0x134>)
 802553c:	f001 ffbc 	bl	80274b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025540:	8bfa      	ldrh	r2, [r7, #30]
 8025542:	8a7b      	ldrh	r3, [r7, #18]
 8025544:	4413      	add	r3, r2
 8025546:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8025548:	69b8      	ldr	r0, [r7, #24]
 802554a:	f7f6 fab7 	bl	801babc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802554e:	687b      	ldr	r3, [r7, #4]
 8025550:	685b      	ldr	r3, [r3, #4]
 8025552:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8025554:	e01f      	b.n	8025596 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8025556:	69bb      	ldr	r3, [r7, #24]
 8025558:	685b      	ldr	r3, [r3, #4]
 802555a:	617b      	str	r3, [r7, #20]
    pcur = p;
 802555c:	69bb      	ldr	r3, [r7, #24]
 802555e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8025560:	697b      	ldr	r3, [r7, #20]
 8025562:	681b      	ldr	r3, [r3, #0]
 8025564:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8025566:	68f8      	ldr	r0, [r7, #12]
 8025568:	f7f6 fb36 	bl	801bbd8 <pbuf_clen>
 802556c:	4603      	mov	r3, r0
 802556e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025570:	8bfa      	ldrh	r2, [r7, #30]
 8025572:	8a7b      	ldrh	r3, [r7, #18]
 8025574:	4413      	add	r3, r2
 8025576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802557a:	db05      	blt.n	8025588 <ip_reass_free_complete_datagram+0xe0>
 802557c:	4b15      	ldr	r3, [pc, #84]	; (80255d4 <ip_reass_free_complete_datagram+0x12c>)
 802557e:	22cc      	movs	r2, #204	; 0xcc
 8025580:	4918      	ldr	r1, [pc, #96]	; (80255e4 <ip_reass_free_complete_datagram+0x13c>)
 8025582:	4816      	ldr	r0, [pc, #88]	; (80255dc <ip_reass_free_complete_datagram+0x134>)
 8025584:	f001 ff98 	bl	80274b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025588:	8bfa      	ldrh	r2, [r7, #30]
 802558a:	8a7b      	ldrh	r3, [r7, #18]
 802558c:	4413      	add	r3, r2
 802558e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8025590:	68f8      	ldr	r0, [r7, #12]
 8025592:	f7f6 fa93 	bl	801babc <pbuf_free>
  while (p != NULL) {
 8025596:	69bb      	ldr	r3, [r7, #24]
 8025598:	2b00      	cmp	r3, #0
 802559a:	d1dc      	bne.n	8025556 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 802559c:	6839      	ldr	r1, [r7, #0]
 802559e:	6878      	ldr	r0, [r7, #4]
 80255a0:	f000 f8c2 	bl	8025728 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80255a4:	4b10      	ldr	r3, [pc, #64]	; (80255e8 <ip_reass_free_complete_datagram+0x140>)
 80255a6:	881b      	ldrh	r3, [r3, #0]
 80255a8:	8bfa      	ldrh	r2, [r7, #30]
 80255aa:	429a      	cmp	r2, r3
 80255ac:	d905      	bls.n	80255ba <ip_reass_free_complete_datagram+0x112>
 80255ae:	4b09      	ldr	r3, [pc, #36]	; (80255d4 <ip_reass_free_complete_datagram+0x12c>)
 80255b0:	22d2      	movs	r2, #210	; 0xd2
 80255b2:	490e      	ldr	r1, [pc, #56]	; (80255ec <ip_reass_free_complete_datagram+0x144>)
 80255b4:	4809      	ldr	r0, [pc, #36]	; (80255dc <ip_reass_free_complete_datagram+0x134>)
 80255b6:	f001 ff7f 	bl	80274b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80255ba:	4b0b      	ldr	r3, [pc, #44]	; (80255e8 <ip_reass_free_complete_datagram+0x140>)
 80255bc:	881a      	ldrh	r2, [r3, #0]
 80255be:	8bfb      	ldrh	r3, [r7, #30]
 80255c0:	1ad3      	subs	r3, r2, r3
 80255c2:	b29a      	uxth	r2, r3
 80255c4:	4b08      	ldr	r3, [pc, #32]	; (80255e8 <ip_reass_free_complete_datagram+0x140>)
 80255c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80255c8:	8bfb      	ldrh	r3, [r7, #30]
}
 80255ca:	4618      	mov	r0, r3
 80255cc:	3720      	adds	r7, #32
 80255ce:	46bd      	mov	sp, r7
 80255d0:	bd80      	pop	{r7, pc}
 80255d2:	bf00      	nop
 80255d4:	0802aff8 	.word	0x0802aff8
 80255d8:	0802b034 	.word	0x0802b034
 80255dc:	0802b040 	.word	0x0802b040
 80255e0:	0802b068 	.word	0x0802b068
 80255e4:	0802b07c 	.word	0x0802b07c
 80255e8:	2400d0e4 	.word	0x2400d0e4
 80255ec:	0802b09c 	.word	0x0802b09c

080255f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80255f0:	b580      	push	{r7, lr}
 80255f2:	b08a      	sub	sp, #40	; 0x28
 80255f4:	af00      	add	r7, sp, #0
 80255f6:	6078      	str	r0, [r7, #4]
 80255f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80255fa:	2300      	movs	r3, #0
 80255fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80255fe:	2300      	movs	r3, #0
 8025600:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8025602:	2300      	movs	r3, #0
 8025604:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8025606:	2300      	movs	r3, #0
 8025608:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802560a:	2300      	movs	r3, #0
 802560c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802560e:	4b28      	ldr	r3, [pc, #160]	; (80256b0 <ip_reass_remove_oldest_datagram+0xc0>)
 8025610:	681b      	ldr	r3, [r3, #0]
 8025612:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025614:	e030      	b.n	8025678 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8025616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025618:	695a      	ldr	r2, [r3, #20]
 802561a:	687b      	ldr	r3, [r7, #4]
 802561c:	68db      	ldr	r3, [r3, #12]
 802561e:	429a      	cmp	r2, r3
 8025620:	d10c      	bne.n	802563c <ip_reass_remove_oldest_datagram+0x4c>
 8025622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025624:	699a      	ldr	r2, [r3, #24]
 8025626:	687b      	ldr	r3, [r7, #4]
 8025628:	691b      	ldr	r3, [r3, #16]
 802562a:	429a      	cmp	r2, r3
 802562c:	d106      	bne.n	802563c <ip_reass_remove_oldest_datagram+0x4c>
 802562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025630:	899a      	ldrh	r2, [r3, #12]
 8025632:	687b      	ldr	r3, [r7, #4]
 8025634:	889b      	ldrh	r3, [r3, #4]
 8025636:	b29b      	uxth	r3, r3
 8025638:	429a      	cmp	r2, r3
 802563a:	d014      	beq.n	8025666 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 802563c:	693b      	ldr	r3, [r7, #16]
 802563e:	3301      	adds	r3, #1
 8025640:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8025642:	6a3b      	ldr	r3, [r7, #32]
 8025644:	2b00      	cmp	r3, #0
 8025646:	d104      	bne.n	8025652 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8025648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802564a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802564c:	69fb      	ldr	r3, [r7, #28]
 802564e:	61bb      	str	r3, [r7, #24]
 8025650:	e009      	b.n	8025666 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8025652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025654:	7fda      	ldrb	r2, [r3, #31]
 8025656:	6a3b      	ldr	r3, [r7, #32]
 8025658:	7fdb      	ldrb	r3, [r3, #31]
 802565a:	429a      	cmp	r2, r3
 802565c:	d803      	bhi.n	8025666 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025660:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025662:	69fb      	ldr	r3, [r7, #28]
 8025664:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8025666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025668:	681b      	ldr	r3, [r3, #0]
 802566a:	2b00      	cmp	r3, #0
 802566c:	d001      	beq.n	8025672 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025670:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8025672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025674:	681b      	ldr	r3, [r3, #0]
 8025676:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802567a:	2b00      	cmp	r3, #0
 802567c:	d1cb      	bne.n	8025616 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802567e:	6a3b      	ldr	r3, [r7, #32]
 8025680:	2b00      	cmp	r3, #0
 8025682:	d008      	beq.n	8025696 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8025684:	69b9      	ldr	r1, [r7, #24]
 8025686:	6a38      	ldr	r0, [r7, #32]
 8025688:	f7ff ff0e 	bl	80254a8 <ip_reass_free_complete_datagram>
 802568c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802568e:	697a      	ldr	r2, [r7, #20]
 8025690:	68fb      	ldr	r3, [r7, #12]
 8025692:	4413      	add	r3, r2
 8025694:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8025696:	697a      	ldr	r2, [r7, #20]
 8025698:	683b      	ldr	r3, [r7, #0]
 802569a:	429a      	cmp	r2, r3
 802569c:	da02      	bge.n	80256a4 <ip_reass_remove_oldest_datagram+0xb4>
 802569e:	693b      	ldr	r3, [r7, #16]
 80256a0:	2b01      	cmp	r3, #1
 80256a2:	dcac      	bgt.n	80255fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80256a4:	697b      	ldr	r3, [r7, #20]
}
 80256a6:	4618      	mov	r0, r3
 80256a8:	3728      	adds	r7, #40	; 0x28
 80256aa:	46bd      	mov	sp, r7
 80256ac:	bd80      	pop	{r7, pc}
 80256ae:	bf00      	nop
 80256b0:	2400d0e0 	.word	0x2400d0e0

080256b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80256b4:	b580      	push	{r7, lr}
 80256b6:	b084      	sub	sp, #16
 80256b8:	af00      	add	r7, sp, #0
 80256ba:	6078      	str	r0, [r7, #4]
 80256bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80256be:	2004      	movs	r0, #4
 80256c0:	f7f5 fad6 	bl	801ac70 <memp_malloc>
 80256c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80256c6:	68fb      	ldr	r3, [r7, #12]
 80256c8:	2b00      	cmp	r3, #0
 80256ca:	d110      	bne.n	80256ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80256cc:	6839      	ldr	r1, [r7, #0]
 80256ce:	6878      	ldr	r0, [r7, #4]
 80256d0:	f7ff ff8e 	bl	80255f0 <ip_reass_remove_oldest_datagram>
 80256d4:	4602      	mov	r2, r0
 80256d6:	683b      	ldr	r3, [r7, #0]
 80256d8:	4293      	cmp	r3, r2
 80256da:	dc03      	bgt.n	80256e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80256dc:	2004      	movs	r0, #4
 80256de:	f7f5 fac7 	bl	801ac70 <memp_malloc>
 80256e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80256e4:	68fb      	ldr	r3, [r7, #12]
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	d101      	bne.n	80256ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80256ea:	2300      	movs	r3, #0
 80256ec:	e016      	b.n	802571c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80256ee:	2220      	movs	r2, #32
 80256f0:	2100      	movs	r1, #0
 80256f2:	68f8      	ldr	r0, [r7, #12]
 80256f4:	f001 fde2 	bl	80272bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80256f8:	68fb      	ldr	r3, [r7, #12]
 80256fa:	220f      	movs	r2, #15
 80256fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80256fe:	4b09      	ldr	r3, [pc, #36]	; (8025724 <ip_reass_enqueue_new_datagram+0x70>)
 8025700:	681a      	ldr	r2, [r3, #0]
 8025702:	68fb      	ldr	r3, [r7, #12]
 8025704:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8025706:	4a07      	ldr	r2, [pc, #28]	; (8025724 <ip_reass_enqueue_new_datagram+0x70>)
 8025708:	68fb      	ldr	r3, [r7, #12]
 802570a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802570c:	68fb      	ldr	r3, [r7, #12]
 802570e:	3308      	adds	r3, #8
 8025710:	2214      	movs	r2, #20
 8025712:	6879      	ldr	r1, [r7, #4]
 8025714:	4618      	mov	r0, r3
 8025716:	f001 fda9 	bl	802726c <memcpy>
  return ipr;
 802571a:	68fb      	ldr	r3, [r7, #12]
}
 802571c:	4618      	mov	r0, r3
 802571e:	3710      	adds	r7, #16
 8025720:	46bd      	mov	sp, r7
 8025722:	bd80      	pop	{r7, pc}
 8025724:	2400d0e0 	.word	0x2400d0e0

08025728 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8025728:	b580      	push	{r7, lr}
 802572a:	b082      	sub	sp, #8
 802572c:	af00      	add	r7, sp, #0
 802572e:	6078      	str	r0, [r7, #4]
 8025730:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8025732:	4b10      	ldr	r3, [pc, #64]	; (8025774 <ip_reass_dequeue_datagram+0x4c>)
 8025734:	681b      	ldr	r3, [r3, #0]
 8025736:	687a      	ldr	r2, [r7, #4]
 8025738:	429a      	cmp	r2, r3
 802573a:	d104      	bne.n	8025746 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 802573c:	687b      	ldr	r3, [r7, #4]
 802573e:	681b      	ldr	r3, [r3, #0]
 8025740:	4a0c      	ldr	r2, [pc, #48]	; (8025774 <ip_reass_dequeue_datagram+0x4c>)
 8025742:	6013      	str	r3, [r2, #0]
 8025744:	e00d      	b.n	8025762 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8025746:	683b      	ldr	r3, [r7, #0]
 8025748:	2b00      	cmp	r3, #0
 802574a:	d106      	bne.n	802575a <ip_reass_dequeue_datagram+0x32>
 802574c:	4b0a      	ldr	r3, [pc, #40]	; (8025778 <ip_reass_dequeue_datagram+0x50>)
 802574e:	f240 1245 	movw	r2, #325	; 0x145
 8025752:	490a      	ldr	r1, [pc, #40]	; (802577c <ip_reass_dequeue_datagram+0x54>)
 8025754:	480a      	ldr	r0, [pc, #40]	; (8025780 <ip_reass_dequeue_datagram+0x58>)
 8025756:	f001 feaf 	bl	80274b8 <iprintf>
    prev->next = ipr->next;
 802575a:	687b      	ldr	r3, [r7, #4]
 802575c:	681a      	ldr	r2, [r3, #0]
 802575e:	683b      	ldr	r3, [r7, #0]
 8025760:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8025762:	6879      	ldr	r1, [r7, #4]
 8025764:	2004      	movs	r0, #4
 8025766:	f7f5 faf9 	bl	801ad5c <memp_free>
}
 802576a:	bf00      	nop
 802576c:	3708      	adds	r7, #8
 802576e:	46bd      	mov	sp, r7
 8025770:	bd80      	pop	{r7, pc}
 8025772:	bf00      	nop
 8025774:	2400d0e0 	.word	0x2400d0e0
 8025778:	0802aff8 	.word	0x0802aff8
 802577c:	0802b0c0 	.word	0x0802b0c0
 8025780:	0802b040 	.word	0x0802b040

08025784 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8025784:	b580      	push	{r7, lr}
 8025786:	b08c      	sub	sp, #48	; 0x30
 8025788:	af00      	add	r7, sp, #0
 802578a:	60f8      	str	r0, [r7, #12]
 802578c:	60b9      	str	r1, [r7, #8]
 802578e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8025790:	2300      	movs	r3, #0
 8025792:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8025794:	2301      	movs	r3, #1
 8025796:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8025798:	68bb      	ldr	r3, [r7, #8]
 802579a:	685b      	ldr	r3, [r3, #4]
 802579c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802579e:	69fb      	ldr	r3, [r7, #28]
 80257a0:	885b      	ldrh	r3, [r3, #2]
 80257a2:	b29b      	uxth	r3, r3
 80257a4:	4618      	mov	r0, r3
 80257a6:	f7f4 fcd3 	bl	801a150 <lwip_htons>
 80257aa:	4603      	mov	r3, r0
 80257ac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80257ae:	69fb      	ldr	r3, [r7, #28]
 80257b0:	781b      	ldrb	r3, [r3, #0]
 80257b2:	f003 030f 	and.w	r3, r3, #15
 80257b6:	b2db      	uxtb	r3, r3
 80257b8:	009b      	lsls	r3, r3, #2
 80257ba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80257bc:	7e7b      	ldrb	r3, [r7, #25]
 80257be:	b29b      	uxth	r3, r3
 80257c0:	8b7a      	ldrh	r2, [r7, #26]
 80257c2:	429a      	cmp	r2, r3
 80257c4:	d202      	bcs.n	80257cc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80257c6:	f04f 33ff 	mov.w	r3, #4294967295
 80257ca:	e135      	b.n	8025a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80257cc:	7e7b      	ldrb	r3, [r7, #25]
 80257ce:	b29b      	uxth	r3, r3
 80257d0:	8b7a      	ldrh	r2, [r7, #26]
 80257d2:	1ad3      	subs	r3, r2, r3
 80257d4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80257d6:	69fb      	ldr	r3, [r7, #28]
 80257d8:	88db      	ldrh	r3, [r3, #6]
 80257da:	b29b      	uxth	r3, r3
 80257dc:	4618      	mov	r0, r3
 80257de:	f7f4 fcb7 	bl	801a150 <lwip_htons>
 80257e2:	4603      	mov	r3, r0
 80257e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80257e8:	b29b      	uxth	r3, r3
 80257ea:	00db      	lsls	r3, r3, #3
 80257ec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80257ee:	68bb      	ldr	r3, [r7, #8]
 80257f0:	685b      	ldr	r3, [r3, #4]
 80257f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80257f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80257f6:	2200      	movs	r2, #0
 80257f8:	701a      	strb	r2, [r3, #0]
 80257fa:	2200      	movs	r2, #0
 80257fc:	705a      	strb	r2, [r3, #1]
 80257fe:	2200      	movs	r2, #0
 8025800:	709a      	strb	r2, [r3, #2]
 8025802:	2200      	movs	r2, #0
 8025804:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8025806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025808:	8afa      	ldrh	r2, [r7, #22]
 802580a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 802580c:	8afa      	ldrh	r2, [r7, #22]
 802580e:	8b7b      	ldrh	r3, [r7, #26]
 8025810:	4413      	add	r3, r2
 8025812:	b29a      	uxth	r2, r3
 8025814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025816:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8025818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802581a:	88db      	ldrh	r3, [r3, #6]
 802581c:	b29b      	uxth	r3, r3
 802581e:	8afa      	ldrh	r2, [r7, #22]
 8025820:	429a      	cmp	r2, r3
 8025822:	d902      	bls.n	802582a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025824:	f04f 33ff 	mov.w	r3, #4294967295
 8025828:	e106      	b.n	8025a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802582a:	68fb      	ldr	r3, [r7, #12]
 802582c:	685b      	ldr	r3, [r3, #4]
 802582e:	627b      	str	r3, [r7, #36]	; 0x24
 8025830:	e068      	b.n	8025904 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8025832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025834:	685b      	ldr	r3, [r3, #4]
 8025836:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8025838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802583a:	889b      	ldrh	r3, [r3, #4]
 802583c:	b29a      	uxth	r2, r3
 802583e:	693b      	ldr	r3, [r7, #16]
 8025840:	889b      	ldrh	r3, [r3, #4]
 8025842:	b29b      	uxth	r3, r3
 8025844:	429a      	cmp	r2, r3
 8025846:	d235      	bcs.n	80258b4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8025848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802584c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 802584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025850:	2b00      	cmp	r3, #0
 8025852:	d020      	beq.n	8025896 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8025854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025856:	889b      	ldrh	r3, [r3, #4]
 8025858:	b29a      	uxth	r2, r3
 802585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802585c:	88db      	ldrh	r3, [r3, #6]
 802585e:	b29b      	uxth	r3, r3
 8025860:	429a      	cmp	r2, r3
 8025862:	d307      	bcc.n	8025874 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8025864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025866:	88db      	ldrh	r3, [r3, #6]
 8025868:	b29a      	uxth	r2, r3
 802586a:	693b      	ldr	r3, [r7, #16]
 802586c:	889b      	ldrh	r3, [r3, #4]
 802586e:	b29b      	uxth	r3, r3
 8025870:	429a      	cmp	r2, r3
 8025872:	d902      	bls.n	802587a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025874:	f04f 33ff 	mov.w	r3, #4294967295
 8025878:	e0de      	b.n	8025a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802587c:	68ba      	ldr	r2, [r7, #8]
 802587e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8025880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025882:	88db      	ldrh	r3, [r3, #6]
 8025884:	b29a      	uxth	r2, r3
 8025886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025888:	889b      	ldrh	r3, [r3, #4]
 802588a:	b29b      	uxth	r3, r3
 802588c:	429a      	cmp	r2, r3
 802588e:	d03d      	beq.n	802590c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025890:	2300      	movs	r3, #0
 8025892:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8025894:	e03a      	b.n	802590c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8025896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025898:	88db      	ldrh	r3, [r3, #6]
 802589a:	b29a      	uxth	r2, r3
 802589c:	693b      	ldr	r3, [r7, #16]
 802589e:	889b      	ldrh	r3, [r3, #4]
 80258a0:	b29b      	uxth	r3, r3
 80258a2:	429a      	cmp	r2, r3
 80258a4:	d902      	bls.n	80258ac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80258a6:	f04f 33ff 	mov.w	r3, #4294967295
 80258aa:	e0c5      	b.n	8025a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80258ac:	68fb      	ldr	r3, [r7, #12]
 80258ae:	68ba      	ldr	r2, [r7, #8]
 80258b0:	605a      	str	r2, [r3, #4]
      break;
 80258b2:	e02b      	b.n	802590c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80258b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80258b6:	889b      	ldrh	r3, [r3, #4]
 80258b8:	b29a      	uxth	r2, r3
 80258ba:	693b      	ldr	r3, [r7, #16]
 80258bc:	889b      	ldrh	r3, [r3, #4]
 80258be:	b29b      	uxth	r3, r3
 80258c0:	429a      	cmp	r2, r3
 80258c2:	d102      	bne.n	80258ca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80258c4:	f04f 33ff 	mov.w	r3, #4294967295
 80258c8:	e0b6      	b.n	8025a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80258ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80258cc:	889b      	ldrh	r3, [r3, #4]
 80258ce:	b29a      	uxth	r2, r3
 80258d0:	693b      	ldr	r3, [r7, #16]
 80258d2:	88db      	ldrh	r3, [r3, #6]
 80258d4:	b29b      	uxth	r3, r3
 80258d6:	429a      	cmp	r2, r3
 80258d8:	d202      	bcs.n	80258e0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80258da:	f04f 33ff 	mov.w	r3, #4294967295
 80258de:	e0ab      	b.n	8025a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80258e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258e2:	2b00      	cmp	r3, #0
 80258e4:	d009      	beq.n	80258fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80258e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258e8:	88db      	ldrh	r3, [r3, #6]
 80258ea:	b29a      	uxth	r2, r3
 80258ec:	693b      	ldr	r3, [r7, #16]
 80258ee:	889b      	ldrh	r3, [r3, #4]
 80258f0:	b29b      	uxth	r3, r3
 80258f2:	429a      	cmp	r2, r3
 80258f4:	d001      	beq.n	80258fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80258f6:	2300      	movs	r3, #0
 80258f8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80258fa:	693b      	ldr	r3, [r7, #16]
 80258fc:	681b      	ldr	r3, [r3, #0]
 80258fe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8025900:	693b      	ldr	r3, [r7, #16]
 8025902:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8025904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025906:	2b00      	cmp	r3, #0
 8025908:	d193      	bne.n	8025832 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802590a:	e000      	b.n	802590e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 802590c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 802590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025910:	2b00      	cmp	r3, #0
 8025912:	d12d      	bne.n	8025970 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8025914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025916:	2b00      	cmp	r3, #0
 8025918:	d01c      	beq.n	8025954 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802591c:	88db      	ldrh	r3, [r3, #6]
 802591e:	b29a      	uxth	r2, r3
 8025920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025922:	889b      	ldrh	r3, [r3, #4]
 8025924:	b29b      	uxth	r3, r3
 8025926:	429a      	cmp	r2, r3
 8025928:	d906      	bls.n	8025938 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802592a:	4b45      	ldr	r3, [pc, #276]	; (8025a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802592c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8025930:	4944      	ldr	r1, [pc, #272]	; (8025a44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8025932:	4845      	ldr	r0, [pc, #276]	; (8025a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025934:	f001 fdc0 	bl	80274b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8025938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802593a:	68ba      	ldr	r2, [r7, #8]
 802593c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025940:	88db      	ldrh	r3, [r3, #6]
 8025942:	b29a      	uxth	r2, r3
 8025944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025946:	889b      	ldrh	r3, [r3, #4]
 8025948:	b29b      	uxth	r3, r3
 802594a:	429a      	cmp	r2, r3
 802594c:	d010      	beq.n	8025970 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 802594e:	2300      	movs	r3, #0
 8025950:	623b      	str	r3, [r7, #32]
 8025952:	e00d      	b.n	8025970 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8025954:	68fb      	ldr	r3, [r7, #12]
 8025956:	685b      	ldr	r3, [r3, #4]
 8025958:	2b00      	cmp	r3, #0
 802595a:	d006      	beq.n	802596a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 802595c:	4b38      	ldr	r3, [pc, #224]	; (8025a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802595e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8025962:	493a      	ldr	r1, [pc, #232]	; (8025a4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8025964:	4838      	ldr	r0, [pc, #224]	; (8025a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025966:	f001 fda7 	bl	80274b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802596a:	68fb      	ldr	r3, [r7, #12]
 802596c:	68ba      	ldr	r2, [r7, #8]
 802596e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	2b00      	cmp	r3, #0
 8025974:	d105      	bne.n	8025982 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8025976:	68fb      	ldr	r3, [r7, #12]
 8025978:	7f9b      	ldrb	r3, [r3, #30]
 802597a:	f003 0301 	and.w	r3, r3, #1
 802597e:	2b00      	cmp	r3, #0
 8025980:	d059      	beq.n	8025a36 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8025982:	6a3b      	ldr	r3, [r7, #32]
 8025984:	2b00      	cmp	r3, #0
 8025986:	d04f      	beq.n	8025a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8025988:	68fb      	ldr	r3, [r7, #12]
 802598a:	685b      	ldr	r3, [r3, #4]
 802598c:	2b00      	cmp	r3, #0
 802598e:	d006      	beq.n	802599e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8025990:	68fb      	ldr	r3, [r7, #12]
 8025992:	685b      	ldr	r3, [r3, #4]
 8025994:	685b      	ldr	r3, [r3, #4]
 8025996:	889b      	ldrh	r3, [r3, #4]
 8025998:	b29b      	uxth	r3, r3
 802599a:	2b00      	cmp	r3, #0
 802599c:	d002      	beq.n	80259a4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802599e:	2300      	movs	r3, #0
 80259a0:	623b      	str	r3, [r7, #32]
 80259a2:	e041      	b.n	8025a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80259a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80259a6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80259a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80259aa:	681b      	ldr	r3, [r3, #0]
 80259ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80259ae:	e012      	b.n	80259d6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80259b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259b2:	685b      	ldr	r3, [r3, #4]
 80259b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80259b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80259b8:	88db      	ldrh	r3, [r3, #6]
 80259ba:	b29a      	uxth	r2, r3
 80259bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80259be:	889b      	ldrh	r3, [r3, #4]
 80259c0:	b29b      	uxth	r3, r3
 80259c2:	429a      	cmp	r2, r3
 80259c4:	d002      	beq.n	80259cc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80259c6:	2300      	movs	r3, #0
 80259c8:	623b      	str	r3, [r7, #32]
            break;
 80259ca:	e007      	b.n	80259dc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80259cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80259ce:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80259d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80259d2:	681b      	ldr	r3, [r3, #0]
 80259d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80259d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259d8:	2b00      	cmp	r3, #0
 80259da:	d1e9      	bne.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80259dc:	6a3b      	ldr	r3, [r7, #32]
 80259de:	2b00      	cmp	r3, #0
 80259e0:	d022      	beq.n	8025a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80259e2:	68fb      	ldr	r3, [r7, #12]
 80259e4:	685b      	ldr	r3, [r3, #4]
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	d106      	bne.n	80259f8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80259ea:	4b15      	ldr	r3, [pc, #84]	; (8025a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80259ec:	f240 12df 	movw	r2, #479	; 0x1df
 80259f0:	4917      	ldr	r1, [pc, #92]	; (8025a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80259f2:	4815      	ldr	r0, [pc, #84]	; (8025a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80259f4:	f001 fd60 	bl	80274b8 <iprintf>
          LWIP_ASSERT("sanity check",
 80259f8:	68fb      	ldr	r3, [r7, #12]
 80259fa:	685b      	ldr	r3, [r3, #4]
 80259fc:	685b      	ldr	r3, [r3, #4]
 80259fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025a00:	429a      	cmp	r2, r3
 8025a02:	d106      	bne.n	8025a12 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8025a04:	4b0e      	ldr	r3, [pc, #56]	; (8025a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025a06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8025a0a:	4911      	ldr	r1, [pc, #68]	; (8025a50 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025a0c:	480e      	ldr	r0, [pc, #56]	; (8025a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025a0e:	f001 fd53 	bl	80274b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8025a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025a14:	681b      	ldr	r3, [r3, #0]
 8025a16:	2b00      	cmp	r3, #0
 8025a18:	d006      	beq.n	8025a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8025a1a:	4b09      	ldr	r3, [pc, #36]	; (8025a40 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025a1c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8025a20:	490c      	ldr	r1, [pc, #48]	; (8025a54 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8025a22:	4809      	ldr	r0, [pc, #36]	; (8025a48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025a24:	f001 fd48 	bl	80274b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8025a28:	6a3b      	ldr	r3, [r7, #32]
 8025a2a:	2b00      	cmp	r3, #0
 8025a2c:	bf14      	ite	ne
 8025a2e:	2301      	movne	r3, #1
 8025a30:	2300      	moveq	r3, #0
 8025a32:	b2db      	uxtb	r3, r3
 8025a34:	e000      	b.n	8025a38 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8025a36:	2300      	movs	r3, #0
}
 8025a38:	4618      	mov	r0, r3
 8025a3a:	3730      	adds	r7, #48	; 0x30
 8025a3c:	46bd      	mov	sp, r7
 8025a3e:	bd80      	pop	{r7, pc}
 8025a40:	0802aff8 	.word	0x0802aff8
 8025a44:	0802b0dc 	.word	0x0802b0dc
 8025a48:	0802b040 	.word	0x0802b040
 8025a4c:	0802b0fc 	.word	0x0802b0fc
 8025a50:	0802b134 	.word	0x0802b134
 8025a54:	0802b144 	.word	0x0802b144

08025a58 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8025a58:	b580      	push	{r7, lr}
 8025a5a:	b08e      	sub	sp, #56	; 0x38
 8025a5c:	af00      	add	r7, sp, #0
 8025a5e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8025a60:	687b      	ldr	r3, [r7, #4]
 8025a62:	685b      	ldr	r3, [r3, #4]
 8025a64:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8025a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a68:	781b      	ldrb	r3, [r3, #0]
 8025a6a:	f003 030f 	and.w	r3, r3, #15
 8025a6e:	b2db      	uxtb	r3, r3
 8025a70:	009b      	lsls	r3, r3, #2
 8025a72:	b2db      	uxtb	r3, r3
 8025a74:	2b14      	cmp	r3, #20
 8025a76:	f040 8171 	bne.w	8025d5c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8025a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a7c:	88db      	ldrh	r3, [r3, #6]
 8025a7e:	b29b      	uxth	r3, r3
 8025a80:	4618      	mov	r0, r3
 8025a82:	f7f4 fb65 	bl	801a150 <lwip_htons>
 8025a86:	4603      	mov	r3, r0
 8025a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025a8c:	b29b      	uxth	r3, r3
 8025a8e:	00db      	lsls	r3, r3, #3
 8025a90:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a94:	885b      	ldrh	r3, [r3, #2]
 8025a96:	b29b      	uxth	r3, r3
 8025a98:	4618      	mov	r0, r3
 8025a9a:	f7f4 fb59 	bl	801a150 <lwip_htons>
 8025a9e:	4603      	mov	r3, r0
 8025aa0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8025aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025aa4:	781b      	ldrb	r3, [r3, #0]
 8025aa6:	f003 030f 	and.w	r3, r3, #15
 8025aaa:	b2db      	uxtb	r3, r3
 8025aac:	009b      	lsls	r3, r3, #2
 8025aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8025ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025ab6:	b29b      	uxth	r3, r3
 8025ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025aba:	429a      	cmp	r2, r3
 8025abc:	f0c0 8150 	bcc.w	8025d60 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8025ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025ac4:	b29b      	uxth	r3, r3
 8025ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025ac8:	1ad3      	subs	r3, r2, r3
 8025aca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8025acc:	6878      	ldr	r0, [r7, #4]
 8025ace:	f7f6 f883 	bl	801bbd8 <pbuf_clen>
 8025ad2:	4603      	mov	r3, r0
 8025ad4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8025ad6:	4b8c      	ldr	r3, [pc, #560]	; (8025d08 <ip4_reass+0x2b0>)
 8025ad8:	881b      	ldrh	r3, [r3, #0]
 8025ada:	461a      	mov	r2, r3
 8025adc:	8c3b      	ldrh	r3, [r7, #32]
 8025ade:	4413      	add	r3, r2
 8025ae0:	2b0a      	cmp	r3, #10
 8025ae2:	dd10      	ble.n	8025b06 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025ae4:	8c3b      	ldrh	r3, [r7, #32]
 8025ae6:	4619      	mov	r1, r3
 8025ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025aea:	f7ff fd81 	bl	80255f0 <ip_reass_remove_oldest_datagram>
 8025aee:	4603      	mov	r3, r0
 8025af0:	2b00      	cmp	r3, #0
 8025af2:	f000 8137 	beq.w	8025d64 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8025af6:	4b84      	ldr	r3, [pc, #528]	; (8025d08 <ip4_reass+0x2b0>)
 8025af8:	881b      	ldrh	r3, [r3, #0]
 8025afa:	461a      	mov	r2, r3
 8025afc:	8c3b      	ldrh	r3, [r7, #32]
 8025afe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025b00:	2b0a      	cmp	r3, #10
 8025b02:	f300 812f 	bgt.w	8025d64 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025b06:	4b81      	ldr	r3, [pc, #516]	; (8025d0c <ip4_reass+0x2b4>)
 8025b08:	681b      	ldr	r3, [r3, #0]
 8025b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8025b0c:	e015      	b.n	8025b3a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8025b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b10:	695a      	ldr	r2, [r3, #20]
 8025b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b14:	68db      	ldr	r3, [r3, #12]
 8025b16:	429a      	cmp	r2, r3
 8025b18:	d10c      	bne.n	8025b34 <ip4_reass+0xdc>
 8025b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b1c:	699a      	ldr	r2, [r3, #24]
 8025b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b20:	691b      	ldr	r3, [r3, #16]
 8025b22:	429a      	cmp	r2, r3
 8025b24:	d106      	bne.n	8025b34 <ip4_reass+0xdc>
 8025b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b28:	899a      	ldrh	r2, [r3, #12]
 8025b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b2c:	889b      	ldrh	r3, [r3, #4]
 8025b2e:	b29b      	uxth	r3, r3
 8025b30:	429a      	cmp	r2, r3
 8025b32:	d006      	beq.n	8025b42 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b36:	681b      	ldr	r3, [r3, #0]
 8025b38:	633b      	str	r3, [r7, #48]	; 0x30
 8025b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b3c:	2b00      	cmp	r3, #0
 8025b3e:	d1e6      	bne.n	8025b0e <ip4_reass+0xb6>
 8025b40:	e000      	b.n	8025b44 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8025b42:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8025b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b46:	2b00      	cmp	r3, #0
 8025b48:	d109      	bne.n	8025b5e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8025b4a:	8c3b      	ldrh	r3, [r7, #32]
 8025b4c:	4619      	mov	r1, r3
 8025b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025b50:	f7ff fdb0 	bl	80256b4 <ip_reass_enqueue_new_datagram>
 8025b54:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8025b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b58:	2b00      	cmp	r3, #0
 8025b5a:	d11c      	bne.n	8025b96 <ip4_reass+0x13e>
      goto nullreturn;
 8025b5c:	e105      	b.n	8025d6a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8025b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b60:	88db      	ldrh	r3, [r3, #6]
 8025b62:	b29b      	uxth	r3, r3
 8025b64:	4618      	mov	r0, r3
 8025b66:	f7f4 faf3 	bl	801a150 <lwip_htons>
 8025b6a:	4603      	mov	r3, r0
 8025b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025b70:	2b00      	cmp	r3, #0
 8025b72:	d110      	bne.n	8025b96 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8025b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b76:	89db      	ldrh	r3, [r3, #14]
 8025b78:	4618      	mov	r0, r3
 8025b7a:	f7f4 fae9 	bl	801a150 <lwip_htons>
 8025b7e:	4603      	mov	r3, r0
 8025b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8025b84:	2b00      	cmp	r3, #0
 8025b86:	d006      	beq.n	8025b96 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8025b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b8a:	3308      	adds	r3, #8
 8025b8c:	2214      	movs	r2, #20
 8025b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025b90:	4618      	mov	r0, r3
 8025b92:	f001 fb6b 	bl	802726c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8025b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b98:	88db      	ldrh	r3, [r3, #6]
 8025b9a:	b29b      	uxth	r3, r3
 8025b9c:	f003 0320 	and.w	r3, r3, #32
 8025ba0:	2b00      	cmp	r3, #0
 8025ba2:	bf0c      	ite	eq
 8025ba4:	2301      	moveq	r3, #1
 8025ba6:	2300      	movne	r3, #0
 8025ba8:	b2db      	uxtb	r3, r3
 8025baa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8025bac:	69fb      	ldr	r3, [r7, #28]
 8025bae:	2b00      	cmp	r3, #0
 8025bb0:	d00e      	beq.n	8025bd0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8025bb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025bb6:	4413      	add	r3, r2
 8025bb8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8025bba:	8b7a      	ldrh	r2, [r7, #26]
 8025bbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025bbe:	429a      	cmp	r2, r3
 8025bc0:	f0c0 80a0 	bcc.w	8025d04 <ip4_reass+0x2ac>
 8025bc4:	8b7b      	ldrh	r3, [r7, #26]
 8025bc6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8025bca:	4293      	cmp	r3, r2
 8025bcc:	f200 809a 	bhi.w	8025d04 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8025bd0:	69fa      	ldr	r2, [r7, #28]
 8025bd2:	6879      	ldr	r1, [r7, #4]
 8025bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025bd6:	f7ff fdd5 	bl	8025784 <ip_reass_chain_frag_into_datagram_and_validate>
 8025bda:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8025bdc:	697b      	ldr	r3, [r7, #20]
 8025bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025be2:	f000 809b 	beq.w	8025d1c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8025be6:	4b48      	ldr	r3, [pc, #288]	; (8025d08 <ip4_reass+0x2b0>)
 8025be8:	881a      	ldrh	r2, [r3, #0]
 8025bea:	8c3b      	ldrh	r3, [r7, #32]
 8025bec:	4413      	add	r3, r2
 8025bee:	b29a      	uxth	r2, r3
 8025bf0:	4b45      	ldr	r3, [pc, #276]	; (8025d08 <ip4_reass+0x2b0>)
 8025bf2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8025bf4:	69fb      	ldr	r3, [r7, #28]
 8025bf6:	2b00      	cmp	r3, #0
 8025bf8:	d00d      	beq.n	8025c16 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8025bfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025bfe:	4413      	add	r3, r2
 8025c00:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8025c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c04:	8a7a      	ldrh	r2, [r7, #18]
 8025c06:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8025c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c0a:	7f9b      	ldrb	r3, [r3, #30]
 8025c0c:	f043 0301 	orr.w	r3, r3, #1
 8025c10:	b2da      	uxtb	r2, r3
 8025c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c14:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8025c16:	697b      	ldr	r3, [r7, #20]
 8025c18:	2b01      	cmp	r3, #1
 8025c1a:	d171      	bne.n	8025d00 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8025c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c1e:	8b9b      	ldrh	r3, [r3, #28]
 8025c20:	3314      	adds	r3, #20
 8025c22:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8025c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c26:	685b      	ldr	r3, [r3, #4]
 8025c28:	685b      	ldr	r3, [r3, #4]
 8025c2a:	681b      	ldr	r3, [r3, #0]
 8025c2c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8025c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c30:	685b      	ldr	r3, [r3, #4]
 8025c32:	685b      	ldr	r3, [r3, #4]
 8025c34:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8025c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c38:	3308      	adds	r3, #8
 8025c3a:	2214      	movs	r2, #20
 8025c3c:	4619      	mov	r1, r3
 8025c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025c40:	f001 fb14 	bl	802726c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8025c44:	8a3b      	ldrh	r3, [r7, #16]
 8025c46:	4618      	mov	r0, r3
 8025c48:	f7f4 fa82 	bl	801a150 <lwip_htons>
 8025c4c:	4603      	mov	r3, r0
 8025c4e:	461a      	mov	r2, r3
 8025c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c52:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8025c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c56:	2200      	movs	r2, #0
 8025c58:	719a      	strb	r2, [r3, #6]
 8025c5a:	2200      	movs	r2, #0
 8025c5c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8025c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c60:	2200      	movs	r2, #0
 8025c62:	729a      	strb	r2, [r3, #10]
 8025c64:	2200      	movs	r2, #0
 8025c66:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8025c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c6a:	685b      	ldr	r3, [r3, #4]
 8025c6c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8025c6e:	e00d      	b.n	8025c8c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8025c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025c72:	685b      	ldr	r3, [r3, #4]
 8025c74:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8025c76:	2114      	movs	r1, #20
 8025c78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025c7a:	f7f5 fe99 	bl	801b9b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8025c7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025c80:	6878      	ldr	r0, [r7, #4]
 8025c82:	f7f5 ffe9 	bl	801bc58 <pbuf_cat>
      r = iprh->next_pbuf;
 8025c86:	68fb      	ldr	r3, [r7, #12]
 8025c88:	681b      	ldr	r3, [r3, #0]
 8025c8a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8025c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	d1ee      	bne.n	8025c70 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8025c92:	4b1e      	ldr	r3, [pc, #120]	; (8025d0c <ip4_reass+0x2b4>)
 8025c94:	681b      	ldr	r3, [r3, #0]
 8025c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025c98:	429a      	cmp	r2, r3
 8025c9a:	d102      	bne.n	8025ca2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8025c9c:	2300      	movs	r3, #0
 8025c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025ca0:	e010      	b.n	8025cc4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025ca2:	4b1a      	ldr	r3, [pc, #104]	; (8025d0c <ip4_reass+0x2b4>)
 8025ca4:	681b      	ldr	r3, [r3, #0]
 8025ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025ca8:	e007      	b.n	8025cba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8025caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025cac:	681b      	ldr	r3, [r3, #0]
 8025cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025cb0:	429a      	cmp	r2, r3
 8025cb2:	d006      	beq.n	8025cc2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025cb6:	681b      	ldr	r3, [r3, #0]
 8025cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025cbc:	2b00      	cmp	r3, #0
 8025cbe:	d1f4      	bne.n	8025caa <ip4_reass+0x252>
 8025cc0:	e000      	b.n	8025cc4 <ip4_reass+0x26c>
          break;
 8025cc2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8025cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8025cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025cc8:	f7ff fd2e 	bl	8025728 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8025ccc:	6878      	ldr	r0, [r7, #4]
 8025cce:	f7f5 ff83 	bl	801bbd8 <pbuf_clen>
 8025cd2:	4603      	mov	r3, r0
 8025cd4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8025cd6:	4b0c      	ldr	r3, [pc, #48]	; (8025d08 <ip4_reass+0x2b0>)
 8025cd8:	881b      	ldrh	r3, [r3, #0]
 8025cda:	8c3a      	ldrh	r2, [r7, #32]
 8025cdc:	429a      	cmp	r2, r3
 8025cde:	d906      	bls.n	8025cee <ip4_reass+0x296>
 8025ce0:	4b0b      	ldr	r3, [pc, #44]	; (8025d10 <ip4_reass+0x2b8>)
 8025ce2:	f240 229b 	movw	r2, #667	; 0x29b
 8025ce6:	490b      	ldr	r1, [pc, #44]	; (8025d14 <ip4_reass+0x2bc>)
 8025ce8:	480b      	ldr	r0, [pc, #44]	; (8025d18 <ip4_reass+0x2c0>)
 8025cea:	f001 fbe5 	bl	80274b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8025cee:	4b06      	ldr	r3, [pc, #24]	; (8025d08 <ip4_reass+0x2b0>)
 8025cf0:	881a      	ldrh	r2, [r3, #0]
 8025cf2:	8c3b      	ldrh	r3, [r7, #32]
 8025cf4:	1ad3      	subs	r3, r2, r3
 8025cf6:	b29a      	uxth	r2, r3
 8025cf8:	4b03      	ldr	r3, [pc, #12]	; (8025d08 <ip4_reass+0x2b0>)
 8025cfa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8025cfc:	687b      	ldr	r3, [r7, #4]
 8025cfe:	e038      	b.n	8025d72 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8025d00:	2300      	movs	r3, #0
 8025d02:	e036      	b.n	8025d72 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8025d04:	bf00      	nop
 8025d06:	e00a      	b.n	8025d1e <ip4_reass+0x2c6>
 8025d08:	2400d0e4 	.word	0x2400d0e4
 8025d0c:	2400d0e0 	.word	0x2400d0e0
 8025d10:	0802aff8 	.word	0x0802aff8
 8025d14:	0802b168 	.word	0x0802b168
 8025d18:	0802b040 	.word	0x0802b040
    goto nullreturn_ipr;
 8025d1c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8025d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d20:	2b00      	cmp	r3, #0
 8025d22:	d106      	bne.n	8025d32 <ip4_reass+0x2da>
 8025d24:	4b15      	ldr	r3, [pc, #84]	; (8025d7c <ip4_reass+0x324>)
 8025d26:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8025d2a:	4915      	ldr	r1, [pc, #84]	; (8025d80 <ip4_reass+0x328>)
 8025d2c:	4815      	ldr	r0, [pc, #84]	; (8025d84 <ip4_reass+0x32c>)
 8025d2e:	f001 fbc3 	bl	80274b8 <iprintf>
  if (ipr->p == NULL) {
 8025d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d34:	685b      	ldr	r3, [r3, #4]
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	d116      	bne.n	8025d68 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8025d3a:	4b13      	ldr	r3, [pc, #76]	; (8025d88 <ip4_reass+0x330>)
 8025d3c:	681b      	ldr	r3, [r3, #0]
 8025d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025d40:	429a      	cmp	r2, r3
 8025d42:	d006      	beq.n	8025d52 <ip4_reass+0x2fa>
 8025d44:	4b0d      	ldr	r3, [pc, #52]	; (8025d7c <ip4_reass+0x324>)
 8025d46:	f240 22ab 	movw	r2, #683	; 0x2ab
 8025d4a:	4910      	ldr	r1, [pc, #64]	; (8025d8c <ip4_reass+0x334>)
 8025d4c:	480d      	ldr	r0, [pc, #52]	; (8025d84 <ip4_reass+0x32c>)
 8025d4e:	f001 fbb3 	bl	80274b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8025d52:	2100      	movs	r1, #0
 8025d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025d56:	f7ff fce7 	bl	8025728 <ip_reass_dequeue_datagram>
 8025d5a:	e006      	b.n	8025d6a <ip4_reass+0x312>
    goto nullreturn;
 8025d5c:	bf00      	nop
 8025d5e:	e004      	b.n	8025d6a <ip4_reass+0x312>
    goto nullreturn;
 8025d60:	bf00      	nop
 8025d62:	e002      	b.n	8025d6a <ip4_reass+0x312>
      goto nullreturn;
 8025d64:	bf00      	nop
 8025d66:	e000      	b.n	8025d6a <ip4_reass+0x312>
  }

nullreturn:
 8025d68:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8025d6a:	6878      	ldr	r0, [r7, #4]
 8025d6c:	f7f5 fea6 	bl	801babc <pbuf_free>
  return NULL;
 8025d70:	2300      	movs	r3, #0
}
 8025d72:	4618      	mov	r0, r3
 8025d74:	3738      	adds	r7, #56	; 0x38
 8025d76:	46bd      	mov	sp, r7
 8025d78:	bd80      	pop	{r7, pc}
 8025d7a:	bf00      	nop
 8025d7c:	0802aff8 	.word	0x0802aff8
 8025d80:	0802b184 	.word	0x0802b184
 8025d84:	0802b040 	.word	0x0802b040
 8025d88:	2400d0e0 	.word	0x2400d0e0
 8025d8c:	0802b190 	.word	0x0802b190

08025d90 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8025d90:	b580      	push	{r7, lr}
 8025d92:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8025d94:	2005      	movs	r0, #5
 8025d96:	f7f4 ff6b 	bl	801ac70 <memp_malloc>
 8025d9a:	4603      	mov	r3, r0
}
 8025d9c:	4618      	mov	r0, r3
 8025d9e:	bd80      	pop	{r7, pc}

08025da0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8025da0:	b580      	push	{r7, lr}
 8025da2:	b082      	sub	sp, #8
 8025da4:	af00      	add	r7, sp, #0
 8025da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8025da8:	687b      	ldr	r3, [r7, #4]
 8025daa:	2b00      	cmp	r3, #0
 8025dac:	d106      	bne.n	8025dbc <ip_frag_free_pbuf_custom_ref+0x1c>
 8025dae:	4b07      	ldr	r3, [pc, #28]	; (8025dcc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8025db0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8025db4:	4906      	ldr	r1, [pc, #24]	; (8025dd0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8025db6:	4807      	ldr	r0, [pc, #28]	; (8025dd4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8025db8:	f001 fb7e 	bl	80274b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8025dbc:	6879      	ldr	r1, [r7, #4]
 8025dbe:	2005      	movs	r0, #5
 8025dc0:	f7f4 ffcc 	bl	801ad5c <memp_free>
}
 8025dc4:	bf00      	nop
 8025dc6:	3708      	adds	r7, #8
 8025dc8:	46bd      	mov	sp, r7
 8025dca:	bd80      	pop	{r7, pc}
 8025dcc:	0802aff8 	.word	0x0802aff8
 8025dd0:	0802b1b0 	.word	0x0802b1b0
 8025dd4:	0802b040 	.word	0x0802b040

08025dd8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8025dd8:	b580      	push	{r7, lr}
 8025dda:	b084      	sub	sp, #16
 8025ddc:	af00      	add	r7, sp, #0
 8025dde:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8025de4:	68fb      	ldr	r3, [r7, #12]
 8025de6:	2b00      	cmp	r3, #0
 8025de8:	d106      	bne.n	8025df8 <ipfrag_free_pbuf_custom+0x20>
 8025dea:	4b11      	ldr	r3, [pc, #68]	; (8025e30 <ipfrag_free_pbuf_custom+0x58>)
 8025dec:	f240 22ce 	movw	r2, #718	; 0x2ce
 8025df0:	4910      	ldr	r1, [pc, #64]	; (8025e34 <ipfrag_free_pbuf_custom+0x5c>)
 8025df2:	4811      	ldr	r0, [pc, #68]	; (8025e38 <ipfrag_free_pbuf_custom+0x60>)
 8025df4:	f001 fb60 	bl	80274b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8025df8:	68fa      	ldr	r2, [r7, #12]
 8025dfa:	687b      	ldr	r3, [r7, #4]
 8025dfc:	429a      	cmp	r2, r3
 8025dfe:	d006      	beq.n	8025e0e <ipfrag_free_pbuf_custom+0x36>
 8025e00:	4b0b      	ldr	r3, [pc, #44]	; (8025e30 <ipfrag_free_pbuf_custom+0x58>)
 8025e02:	f240 22cf 	movw	r2, #719	; 0x2cf
 8025e06:	490d      	ldr	r1, [pc, #52]	; (8025e3c <ipfrag_free_pbuf_custom+0x64>)
 8025e08:	480b      	ldr	r0, [pc, #44]	; (8025e38 <ipfrag_free_pbuf_custom+0x60>)
 8025e0a:	f001 fb55 	bl	80274b8 <iprintf>
  if (pcr->original != NULL) {
 8025e0e:	68fb      	ldr	r3, [r7, #12]
 8025e10:	695b      	ldr	r3, [r3, #20]
 8025e12:	2b00      	cmp	r3, #0
 8025e14:	d004      	beq.n	8025e20 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8025e16:	68fb      	ldr	r3, [r7, #12]
 8025e18:	695b      	ldr	r3, [r3, #20]
 8025e1a:	4618      	mov	r0, r3
 8025e1c:	f7f5 fe4e 	bl	801babc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8025e20:	68f8      	ldr	r0, [r7, #12]
 8025e22:	f7ff ffbd 	bl	8025da0 <ip_frag_free_pbuf_custom_ref>
}
 8025e26:	bf00      	nop
 8025e28:	3710      	adds	r7, #16
 8025e2a:	46bd      	mov	sp, r7
 8025e2c:	bd80      	pop	{r7, pc}
 8025e2e:	bf00      	nop
 8025e30:	0802aff8 	.word	0x0802aff8
 8025e34:	0802b1bc 	.word	0x0802b1bc
 8025e38:	0802b040 	.word	0x0802b040
 8025e3c:	0802b1c8 	.word	0x0802b1c8

08025e40 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8025e40:	b580      	push	{r7, lr}
 8025e42:	b094      	sub	sp, #80	; 0x50
 8025e44:	af02      	add	r7, sp, #8
 8025e46:	60f8      	str	r0, [r7, #12]
 8025e48:	60b9      	str	r1, [r7, #8]
 8025e4a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8025e4c:	2300      	movs	r3, #0
 8025e4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8025e52:	68bb      	ldr	r3, [r7, #8]
 8025e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025e56:	3b14      	subs	r3, #20
 8025e58:	2b00      	cmp	r3, #0
 8025e5a:	da00      	bge.n	8025e5e <ip4_frag+0x1e>
 8025e5c:	3307      	adds	r3, #7
 8025e5e:	10db      	asrs	r3, r3, #3
 8025e60:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8025e62:	2314      	movs	r3, #20
 8025e64:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8025e66:	68fb      	ldr	r3, [r7, #12]
 8025e68:	685b      	ldr	r3, [r3, #4]
 8025e6a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8025e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8025e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e72:	781b      	ldrb	r3, [r3, #0]
 8025e74:	f003 030f 	and.w	r3, r3, #15
 8025e78:	b2db      	uxtb	r3, r3
 8025e7a:	009b      	lsls	r3, r3, #2
 8025e7c:	b2db      	uxtb	r3, r3
 8025e7e:	2b14      	cmp	r3, #20
 8025e80:	d002      	beq.n	8025e88 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8025e82:	f06f 0305 	mvn.w	r3, #5
 8025e86:	e110      	b.n	80260aa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8025e88:	68fb      	ldr	r3, [r7, #12]
 8025e8a:	895b      	ldrh	r3, [r3, #10]
 8025e8c:	2b13      	cmp	r3, #19
 8025e8e:	d809      	bhi.n	8025ea4 <ip4_frag+0x64>
 8025e90:	4b88      	ldr	r3, [pc, #544]	; (80260b4 <ip4_frag+0x274>)
 8025e92:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8025e96:	4988      	ldr	r1, [pc, #544]	; (80260b8 <ip4_frag+0x278>)
 8025e98:	4888      	ldr	r0, [pc, #544]	; (80260bc <ip4_frag+0x27c>)
 8025e9a:	f001 fb0d 	bl	80274b8 <iprintf>
 8025e9e:	f06f 0305 	mvn.w	r3, #5
 8025ea2:	e102      	b.n	80260aa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8025ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ea6:	88db      	ldrh	r3, [r3, #6]
 8025ea8:	b29b      	uxth	r3, r3
 8025eaa:	4618      	mov	r0, r3
 8025eac:	f7f4 f950 	bl	801a150 <lwip_htons>
 8025eb0:	4603      	mov	r3, r0
 8025eb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8025eb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025eb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025eba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8025ebe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8025ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8025ec6:	68fb      	ldr	r3, [r7, #12]
 8025ec8:	891b      	ldrh	r3, [r3, #8]
 8025eca:	3b14      	subs	r3, #20
 8025ecc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8025ed0:	e0e1      	b.n	8026096 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8025ed2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8025ed4:	00db      	lsls	r3, r3, #3
 8025ed6:	b29b      	uxth	r3, r3
 8025ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025edc:	4293      	cmp	r3, r2
 8025ede:	bf28      	it	cs
 8025ee0:	4613      	movcs	r3, r2
 8025ee2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8025ee4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8025ee8:	2114      	movs	r1, #20
 8025eea:	200e      	movs	r0, #14
 8025eec:	f7f5 fb02 	bl	801b4f4 <pbuf_alloc>
 8025ef0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8025ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ef4:	2b00      	cmp	r3, #0
 8025ef6:	f000 80d5 	beq.w	80260a4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8025efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025efc:	895b      	ldrh	r3, [r3, #10]
 8025efe:	2b13      	cmp	r3, #19
 8025f00:	d806      	bhi.n	8025f10 <ip4_frag+0xd0>
 8025f02:	4b6c      	ldr	r3, [pc, #432]	; (80260b4 <ip4_frag+0x274>)
 8025f04:	f44f 7249 	mov.w	r2, #804	; 0x324
 8025f08:	496d      	ldr	r1, [pc, #436]	; (80260c0 <ip4_frag+0x280>)
 8025f0a:	486c      	ldr	r0, [pc, #432]	; (80260bc <ip4_frag+0x27c>)
 8025f0c:	f001 fad4 	bl	80274b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8025f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f12:	685b      	ldr	r3, [r3, #4]
 8025f14:	2214      	movs	r2, #20
 8025f16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025f18:	4618      	mov	r0, r3
 8025f1a:	f001 f9a7 	bl	802726c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8025f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f20:	685b      	ldr	r3, [r3, #4]
 8025f22:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8025f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025f26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8025f2a:	e064      	b.n	8025ff6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8025f2c:	68fb      	ldr	r3, [r7, #12]
 8025f2e:	895a      	ldrh	r2, [r3, #10]
 8025f30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025f32:	1ad3      	subs	r3, r2, r3
 8025f34:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8025f36:	68fb      	ldr	r3, [r7, #12]
 8025f38:	895b      	ldrh	r3, [r3, #10]
 8025f3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025f3c:	429a      	cmp	r2, r3
 8025f3e:	d906      	bls.n	8025f4e <ip4_frag+0x10e>
 8025f40:	4b5c      	ldr	r3, [pc, #368]	; (80260b4 <ip4_frag+0x274>)
 8025f42:	f240 322d 	movw	r2, #813	; 0x32d
 8025f46:	495f      	ldr	r1, [pc, #380]	; (80260c4 <ip4_frag+0x284>)
 8025f48:	485c      	ldr	r0, [pc, #368]	; (80260bc <ip4_frag+0x27c>)
 8025f4a:	f001 fab5 	bl	80274b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8025f4e:	8bfa      	ldrh	r2, [r7, #30]
 8025f50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025f54:	4293      	cmp	r3, r2
 8025f56:	bf28      	it	cs
 8025f58:	4613      	movcs	r3, r2
 8025f5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8025f5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025f62:	2b00      	cmp	r3, #0
 8025f64:	d105      	bne.n	8025f72 <ip4_frag+0x132>
        poff = 0;
 8025f66:	2300      	movs	r3, #0
 8025f68:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025f6a:	68fb      	ldr	r3, [r7, #12]
 8025f6c:	681b      	ldr	r3, [r3, #0]
 8025f6e:	60fb      	str	r3, [r7, #12]
        continue;
 8025f70:	e041      	b.n	8025ff6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8025f72:	f7ff ff0d 	bl	8025d90 <ip_frag_alloc_pbuf_custom_ref>
 8025f76:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8025f78:	69bb      	ldr	r3, [r7, #24]
 8025f7a:	2b00      	cmp	r3, #0
 8025f7c:	d103      	bne.n	8025f86 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8025f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025f80:	f7f5 fd9c 	bl	801babc <pbuf_free>
        goto memerr;
 8025f84:	e08f      	b.n	80260a6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025f86:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8025f88:	68fb      	ldr	r3, [r7, #12]
 8025f8a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025f8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025f8e:	4413      	add	r3, r2
 8025f90:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8025f94:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8025f98:	9201      	str	r2, [sp, #4]
 8025f9a:	9300      	str	r3, [sp, #0]
 8025f9c:	4603      	mov	r3, r0
 8025f9e:	2241      	movs	r2, #65	; 0x41
 8025fa0:	2000      	movs	r0, #0
 8025fa2:	f7f5 fbd1 	bl	801b748 <pbuf_alloced_custom>
 8025fa6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8025fa8:	697b      	ldr	r3, [r7, #20]
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	d106      	bne.n	8025fbc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8025fae:	69b8      	ldr	r0, [r7, #24]
 8025fb0:	f7ff fef6 	bl	8025da0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8025fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025fb6:	f7f5 fd81 	bl	801babc <pbuf_free>
        goto memerr;
 8025fba:	e074      	b.n	80260a6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8025fbc:	68f8      	ldr	r0, [r7, #12]
 8025fbe:	f7f5 fe23 	bl	801bc08 <pbuf_ref>
      pcr->original = p;
 8025fc2:	69bb      	ldr	r3, [r7, #24]
 8025fc4:	68fa      	ldr	r2, [r7, #12]
 8025fc6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8025fc8:	69bb      	ldr	r3, [r7, #24]
 8025fca:	4a3f      	ldr	r2, [pc, #252]	; (80260c8 <ip4_frag+0x288>)
 8025fcc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8025fce:	6979      	ldr	r1, [r7, #20]
 8025fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025fd2:	f7f5 fe41 	bl	801bc58 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8025fd6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8025fda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025fde:	1ad3      	subs	r3, r2, r3
 8025fe0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8025fe4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025fe8:	2b00      	cmp	r3, #0
 8025fea:	d004      	beq.n	8025ff6 <ip4_frag+0x1b6>
        poff = 0;
 8025fec:	2300      	movs	r3, #0
 8025fee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025ff0:	68fb      	ldr	r3, [r7, #12]
 8025ff2:	681b      	ldr	r3, [r3, #0]
 8025ff4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8025ff6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025ffa:	2b00      	cmp	r3, #0
 8025ffc:	d196      	bne.n	8025f2c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8025ffe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8026000:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8026004:	4413      	add	r3, r2
 8026006:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8026008:	68bb      	ldr	r3, [r7, #8]
 802600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802600c:	f1a3 0213 	sub.w	r2, r3, #19
 8026010:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8026014:	429a      	cmp	r2, r3
 8026016:	bfcc      	ite	gt
 8026018:	2301      	movgt	r3, #1
 802601a:	2300      	movle	r3, #0
 802601c:	b2db      	uxtb	r3, r3
 802601e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8026020:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8026024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026028:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802602a:	6a3b      	ldr	r3, [r7, #32]
 802602c:	2b00      	cmp	r3, #0
 802602e:	d002      	beq.n	8026036 <ip4_frag+0x1f6>
 8026030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026032:	2b00      	cmp	r3, #0
 8026034:	d003      	beq.n	802603e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8026036:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8026038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802603c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802603e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8026040:	4618      	mov	r0, r3
 8026042:	f7f4 f885 	bl	801a150 <lwip_htons>
 8026046:	4603      	mov	r3, r0
 8026048:	461a      	mov	r2, r3
 802604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802604c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802604e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8026050:	3314      	adds	r3, #20
 8026052:	b29b      	uxth	r3, r3
 8026054:	4618      	mov	r0, r3
 8026056:	f7f4 f87b 	bl	801a150 <lwip_htons>
 802605a:	4603      	mov	r3, r0
 802605c:	461a      	mov	r2, r3
 802605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026060:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8026062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026064:	2200      	movs	r2, #0
 8026066:	729a      	strb	r2, [r3, #10]
 8026068:	2200      	movs	r2, #0
 802606a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802606c:	68bb      	ldr	r3, [r7, #8]
 802606e:	695b      	ldr	r3, [r3, #20]
 8026070:	687a      	ldr	r2, [r7, #4]
 8026072:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026074:	68b8      	ldr	r0, [r7, #8]
 8026076:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8026078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802607a:	f7f5 fd1f 	bl	801babc <pbuf_free>
    left = (u16_t)(left - fragsize);
 802607e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8026082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8026084:	1ad3      	subs	r3, r2, r3
 8026086:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 802608a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802608e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8026090:	4413      	add	r3, r2
 8026092:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8026096:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802609a:	2b00      	cmp	r3, #0
 802609c:	f47f af19 	bne.w	8025ed2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80260a0:	2300      	movs	r3, #0
 80260a2:	e002      	b.n	80260aa <ip4_frag+0x26a>
      goto memerr;
 80260a4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80260a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80260aa:	4618      	mov	r0, r3
 80260ac:	3748      	adds	r7, #72	; 0x48
 80260ae:	46bd      	mov	sp, r7
 80260b0:	bd80      	pop	{r7, pc}
 80260b2:	bf00      	nop
 80260b4:	0802aff8 	.word	0x0802aff8
 80260b8:	0802b1d4 	.word	0x0802b1d4
 80260bc:	0802b040 	.word	0x0802b040
 80260c0:	0802b1f0 	.word	0x0802b1f0
 80260c4:	0802b210 	.word	0x0802b210
 80260c8:	08025dd9 	.word	0x08025dd9

080260cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80260cc:	b580      	push	{r7, lr}
 80260ce:	b086      	sub	sp, #24
 80260d0:	af00      	add	r7, sp, #0
 80260d2:	6078      	str	r0, [r7, #4]
 80260d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80260d6:	230e      	movs	r3, #14
 80260d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80260da:	687b      	ldr	r3, [r7, #4]
 80260dc:	895b      	ldrh	r3, [r3, #10]
 80260de:	2b0e      	cmp	r3, #14
 80260e0:	d96e      	bls.n	80261c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80260e2:	687b      	ldr	r3, [r7, #4]
 80260e4:	7bdb      	ldrb	r3, [r3, #15]
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d106      	bne.n	80260f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80260ea:	683b      	ldr	r3, [r7, #0]
 80260ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80260f0:	3301      	adds	r3, #1
 80260f2:	b2da      	uxtb	r2, r3
 80260f4:	687b      	ldr	r3, [r7, #4]
 80260f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	685b      	ldr	r3, [r3, #4]
 80260fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80260fe:	693b      	ldr	r3, [r7, #16]
 8026100:	7b1a      	ldrb	r2, [r3, #12]
 8026102:	7b5b      	ldrb	r3, [r3, #13]
 8026104:	021b      	lsls	r3, r3, #8
 8026106:	4313      	orrs	r3, r2
 8026108:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802610a:	693b      	ldr	r3, [r7, #16]
 802610c:	781b      	ldrb	r3, [r3, #0]
 802610e:	f003 0301 	and.w	r3, r3, #1
 8026112:	2b00      	cmp	r3, #0
 8026114:	d023      	beq.n	802615e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8026116:	693b      	ldr	r3, [r7, #16]
 8026118:	781b      	ldrb	r3, [r3, #0]
 802611a:	2b01      	cmp	r3, #1
 802611c:	d10f      	bne.n	802613e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802611e:	693b      	ldr	r3, [r7, #16]
 8026120:	785b      	ldrb	r3, [r3, #1]
 8026122:	2b00      	cmp	r3, #0
 8026124:	d11b      	bne.n	802615e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8026126:	693b      	ldr	r3, [r7, #16]
 8026128:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802612a:	2b5e      	cmp	r3, #94	; 0x5e
 802612c:	d117      	bne.n	802615e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802612e:	687b      	ldr	r3, [r7, #4]
 8026130:	7b5b      	ldrb	r3, [r3, #13]
 8026132:	f043 0310 	orr.w	r3, r3, #16
 8026136:	b2da      	uxtb	r2, r3
 8026138:	687b      	ldr	r3, [r7, #4]
 802613a:	735a      	strb	r2, [r3, #13]
 802613c:	e00f      	b.n	802615e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802613e:	693b      	ldr	r3, [r7, #16]
 8026140:	2206      	movs	r2, #6
 8026142:	4928      	ldr	r1, [pc, #160]	; (80261e4 <ethernet_input+0x118>)
 8026144:	4618      	mov	r0, r3
 8026146:	f001 f881 	bl	802724c <memcmp>
 802614a:	4603      	mov	r3, r0
 802614c:	2b00      	cmp	r3, #0
 802614e:	d106      	bne.n	802615e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8026150:	687b      	ldr	r3, [r7, #4]
 8026152:	7b5b      	ldrb	r3, [r3, #13]
 8026154:	f043 0308 	orr.w	r3, r3, #8
 8026158:	b2da      	uxtb	r2, r3
 802615a:	687b      	ldr	r3, [r7, #4]
 802615c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 802615e:	89fb      	ldrh	r3, [r7, #14]
 8026160:	2b08      	cmp	r3, #8
 8026162:	d003      	beq.n	802616c <ethernet_input+0xa0>
 8026164:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8026168:	d014      	beq.n	8026194 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802616a:	e032      	b.n	80261d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802616c:	683b      	ldr	r3, [r7, #0]
 802616e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026172:	f003 0308 	and.w	r3, r3, #8
 8026176:	2b00      	cmp	r3, #0
 8026178:	d024      	beq.n	80261c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802617a:	8afb      	ldrh	r3, [r7, #22]
 802617c:	4619      	mov	r1, r3
 802617e:	6878      	ldr	r0, [r7, #4]
 8026180:	f7f5 fc16 	bl	801b9b0 <pbuf_remove_header>
 8026184:	4603      	mov	r3, r0
 8026186:	2b00      	cmp	r3, #0
 8026188:	d11e      	bne.n	80261c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 802618a:	6839      	ldr	r1, [r7, #0]
 802618c:	6878      	ldr	r0, [r7, #4]
 802618e:	f7fe ff03 	bl	8024f98 <ip4_input>
      break;
 8026192:	e013      	b.n	80261bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8026194:	683b      	ldr	r3, [r7, #0]
 8026196:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802619a:	f003 0308 	and.w	r3, r3, #8
 802619e:	2b00      	cmp	r3, #0
 80261a0:	d014      	beq.n	80261cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80261a2:	8afb      	ldrh	r3, [r7, #22]
 80261a4:	4619      	mov	r1, r3
 80261a6:	6878      	ldr	r0, [r7, #4]
 80261a8:	f7f5 fc02 	bl	801b9b0 <pbuf_remove_header>
 80261ac:	4603      	mov	r3, r0
 80261ae:	2b00      	cmp	r3, #0
 80261b0:	d10e      	bne.n	80261d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80261b2:	6839      	ldr	r1, [r7, #0]
 80261b4:	6878      	ldr	r0, [r7, #4]
 80261b6:	f7fe f879 	bl	80242ac <etharp_input>
      break;
 80261ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80261bc:	2300      	movs	r3, #0
 80261be:	e00c      	b.n	80261da <ethernet_input+0x10e>
    goto free_and_return;
 80261c0:	bf00      	nop
 80261c2:	e006      	b.n	80261d2 <ethernet_input+0x106>
        goto free_and_return;
 80261c4:	bf00      	nop
 80261c6:	e004      	b.n	80261d2 <ethernet_input+0x106>
        goto free_and_return;
 80261c8:	bf00      	nop
 80261ca:	e002      	b.n	80261d2 <ethernet_input+0x106>
        goto free_and_return;
 80261cc:	bf00      	nop
 80261ce:	e000      	b.n	80261d2 <ethernet_input+0x106>
        goto free_and_return;
 80261d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80261d2:	6878      	ldr	r0, [r7, #4]
 80261d4:	f7f5 fc72 	bl	801babc <pbuf_free>
  return ERR_OK;
 80261d8:	2300      	movs	r3, #0
}
 80261da:	4618      	mov	r0, r3
 80261dc:	3718      	adds	r7, #24
 80261de:	46bd      	mov	sp, r7
 80261e0:	bd80      	pop	{r7, pc}
 80261e2:	bf00      	nop
 80261e4:	0802bb54 	.word	0x0802bb54

080261e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80261e8:	b580      	push	{r7, lr}
 80261ea:	b086      	sub	sp, #24
 80261ec:	af00      	add	r7, sp, #0
 80261ee:	60f8      	str	r0, [r7, #12]
 80261f0:	60b9      	str	r1, [r7, #8]
 80261f2:	607a      	str	r2, [r7, #4]
 80261f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80261f6:	8c3b      	ldrh	r3, [r7, #32]
 80261f8:	4618      	mov	r0, r3
 80261fa:	f7f3 ffa9 	bl	801a150 <lwip_htons>
 80261fe:	4603      	mov	r3, r0
 8026200:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8026202:	210e      	movs	r1, #14
 8026204:	68b8      	ldr	r0, [r7, #8]
 8026206:	f7f5 fbc3 	bl	801b990 <pbuf_add_header>
 802620a:	4603      	mov	r3, r0
 802620c:	2b00      	cmp	r3, #0
 802620e:	d125      	bne.n	802625c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8026210:	68bb      	ldr	r3, [r7, #8]
 8026212:	685b      	ldr	r3, [r3, #4]
 8026214:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8026216:	693b      	ldr	r3, [r7, #16]
 8026218:	8afa      	ldrh	r2, [r7, #22]
 802621a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 802621c:	693b      	ldr	r3, [r7, #16]
 802621e:	2206      	movs	r2, #6
 8026220:	6839      	ldr	r1, [r7, #0]
 8026222:	4618      	mov	r0, r3
 8026224:	f001 f822 	bl	802726c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8026228:	693b      	ldr	r3, [r7, #16]
 802622a:	3306      	adds	r3, #6
 802622c:	2206      	movs	r2, #6
 802622e:	6879      	ldr	r1, [r7, #4]
 8026230:	4618      	mov	r0, r3
 8026232:	f001 f81b 	bl	802726c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8026236:	68fb      	ldr	r3, [r7, #12]
 8026238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802623c:	2b06      	cmp	r3, #6
 802623e:	d006      	beq.n	802624e <ethernet_output+0x66>
 8026240:	4b0a      	ldr	r3, [pc, #40]	; (802626c <ethernet_output+0x84>)
 8026242:	f44f 7299 	mov.w	r2, #306	; 0x132
 8026246:	490a      	ldr	r1, [pc, #40]	; (8026270 <ethernet_output+0x88>)
 8026248:	480a      	ldr	r0, [pc, #40]	; (8026274 <ethernet_output+0x8c>)
 802624a:	f001 f935 	bl	80274b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802624e:	68fb      	ldr	r3, [r7, #12]
 8026250:	699b      	ldr	r3, [r3, #24]
 8026252:	68b9      	ldr	r1, [r7, #8]
 8026254:	68f8      	ldr	r0, [r7, #12]
 8026256:	4798      	blx	r3
 8026258:	4603      	mov	r3, r0
 802625a:	e002      	b.n	8026262 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 802625c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802625e:	f06f 0301 	mvn.w	r3, #1
}
 8026262:	4618      	mov	r0, r3
 8026264:	3718      	adds	r7, #24
 8026266:	46bd      	mov	sp, r7
 8026268:	bd80      	pop	{r7, pc}
 802626a:	bf00      	nop
 802626c:	0802b220 	.word	0x0802b220
 8026270:	0802b258 	.word	0x0802b258
 8026274:	0802b28c 	.word	0x0802b28c

08026278 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8026278:	b580      	push	{r7, lr}
 802627a:	b082      	sub	sp, #8
 802627c:	af00      	add	r7, sp, #0
 802627e:	6078      	str	r0, [r7, #4]
 8026280:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8026282:	683b      	ldr	r3, [r7, #0]
 8026284:	2200      	movs	r2, #0
 8026286:	2104      	movs	r1, #4
 8026288:	4618      	mov	r0, r3
 802628a:	f7f0 fb0f 	bl	80168ac <osMessageQueueNew>
 802628e:	4602      	mov	r2, r0
 8026290:	687b      	ldr	r3, [r7, #4]
 8026292:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	681b      	ldr	r3, [r3, #0]
 8026298:	2b00      	cmp	r3, #0
 802629a:	d102      	bne.n	80262a2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 802629c:	f04f 33ff 	mov.w	r3, #4294967295
 80262a0:	e000      	b.n	80262a4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80262a2:	2300      	movs	r3, #0
}
 80262a4:	4618      	mov	r0, r3
 80262a6:	3708      	adds	r7, #8
 80262a8:	46bd      	mov	sp, r7
 80262aa:	bd80      	pop	{r7, pc}

080262ac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80262ac:	b580      	push	{r7, lr}
 80262ae:	b084      	sub	sp, #16
 80262b0:	af00      	add	r7, sp, #0
 80262b2:	6078      	str	r0, [r7, #4]
 80262b4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80262b6:	687b      	ldr	r3, [r7, #4]
 80262b8:	6818      	ldr	r0, [r3, #0]
 80262ba:	4639      	mov	r1, r7
 80262bc:	2300      	movs	r3, #0
 80262be:	2200      	movs	r2, #0
 80262c0:	f7f0 fb68 	bl	8016994 <osMessageQueuePut>
 80262c4:	4603      	mov	r3, r0
 80262c6:	2b00      	cmp	r3, #0
 80262c8:	d102      	bne.n	80262d0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80262ca:	2300      	movs	r3, #0
 80262cc:	73fb      	strb	r3, [r7, #15]
 80262ce:	e001      	b.n	80262d4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80262d0:	23ff      	movs	r3, #255	; 0xff
 80262d2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80262d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80262d8:	4618      	mov	r0, r3
 80262da:	3710      	adds	r7, #16
 80262dc:	46bd      	mov	sp, r7
 80262de:	bd80      	pop	{r7, pc}

080262e0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80262e0:	b580      	push	{r7, lr}
 80262e2:	b086      	sub	sp, #24
 80262e4:	af00      	add	r7, sp, #0
 80262e6:	60f8      	str	r0, [r7, #12]
 80262e8:	60b9      	str	r1, [r7, #8]
 80262ea:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80262ec:	f7ef ffee 	bl	80162cc <osKernelGetTickCount>
 80262f0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80262f2:	687b      	ldr	r3, [r7, #4]
 80262f4:	2b00      	cmp	r3, #0
 80262f6:	d013      	beq.n	8026320 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80262f8:	68fb      	ldr	r3, [r7, #12]
 80262fa:	6818      	ldr	r0, [r3, #0]
 80262fc:	687b      	ldr	r3, [r7, #4]
 80262fe:	2200      	movs	r2, #0
 8026300:	68b9      	ldr	r1, [r7, #8]
 8026302:	f7f0 fba7 	bl	8016a54 <osMessageQueueGet>
 8026306:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8026308:	693b      	ldr	r3, [r7, #16]
 802630a:	2b00      	cmp	r3, #0
 802630c:	d105      	bne.n	802631a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 802630e:	f7ef ffdd 	bl	80162cc <osKernelGetTickCount>
 8026312:	4602      	mov	r2, r0
 8026314:	697b      	ldr	r3, [r7, #20]
 8026316:	1ad3      	subs	r3, r2, r3
 8026318:	e00f      	b.n	802633a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802631a:	f04f 33ff 	mov.w	r3, #4294967295
 802631e:	e00c      	b.n	802633a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8026320:	68fb      	ldr	r3, [r7, #12]
 8026322:	6818      	ldr	r0, [r3, #0]
 8026324:	f04f 33ff 	mov.w	r3, #4294967295
 8026328:	2200      	movs	r2, #0
 802632a:	68b9      	ldr	r1, [r7, #8]
 802632c:	f7f0 fb92 	bl	8016a54 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8026330:	f7ef ffcc 	bl	80162cc <osKernelGetTickCount>
 8026334:	4602      	mov	r2, r0
 8026336:	697b      	ldr	r3, [r7, #20]
 8026338:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 802633a:	4618      	mov	r0, r3
 802633c:	3718      	adds	r7, #24
 802633e:	46bd      	mov	sp, r7
 8026340:	bd80      	pop	{r7, pc}

08026342 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8026342:	b480      	push	{r7}
 8026344:	b083      	sub	sp, #12
 8026346:	af00      	add	r7, sp, #0
 8026348:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802634a:	687b      	ldr	r3, [r7, #4]
 802634c:	681b      	ldr	r3, [r3, #0]
 802634e:	2b00      	cmp	r3, #0
 8026350:	d101      	bne.n	8026356 <sys_mbox_valid+0x14>
    return 0;
 8026352:	2300      	movs	r3, #0
 8026354:	e000      	b.n	8026358 <sys_mbox_valid+0x16>
  else
    return 1;
 8026356:	2301      	movs	r3, #1
}
 8026358:	4618      	mov	r0, r3
 802635a:	370c      	adds	r7, #12
 802635c:	46bd      	mov	sp, r7
 802635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026362:	4770      	bx	lr

08026364 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8026364:	b580      	push	{r7, lr}
 8026366:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8026368:	2000      	movs	r0, #0
 802636a:	f7f0 f871 	bl	8016450 <osMutexNew>
 802636e:	4603      	mov	r3, r0
 8026370:	4a01      	ldr	r2, [pc, #4]	; (8026378 <sys_init+0x14>)
 8026372:	6013      	str	r3, [r2, #0]
#endif
}
 8026374:	bf00      	nop
 8026376:	bd80      	pop	{r7, pc}
 8026378:	2400d0e8 	.word	0x2400d0e8

0802637c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802637c:	b580      	push	{r7, lr}
 802637e:	b082      	sub	sp, #8
 8026380:	af00      	add	r7, sp, #0
 8026382:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8026384:	2000      	movs	r0, #0
 8026386:	f7f0 f863 	bl	8016450 <osMutexNew>
 802638a:	4602      	mov	r2, r0
 802638c:	687b      	ldr	r3, [r7, #4]
 802638e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8026390:	687b      	ldr	r3, [r7, #4]
 8026392:	681b      	ldr	r3, [r3, #0]
 8026394:	2b00      	cmp	r3, #0
 8026396:	d102      	bne.n	802639e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8026398:	f04f 33ff 	mov.w	r3, #4294967295
 802639c:	e000      	b.n	80263a0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 802639e:	2300      	movs	r3, #0
}
 80263a0:	4618      	mov	r0, r3
 80263a2:	3708      	adds	r7, #8
 80263a4:	46bd      	mov	sp, r7
 80263a6:	bd80      	pop	{r7, pc}

080263a8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80263a8:	b580      	push	{r7, lr}
 80263aa:	b082      	sub	sp, #8
 80263ac:	af00      	add	r7, sp, #0
 80263ae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80263b0:	687b      	ldr	r3, [r7, #4]
 80263b2:	681b      	ldr	r3, [r3, #0]
 80263b4:	f04f 31ff 	mov.w	r1, #4294967295
 80263b8:	4618      	mov	r0, r3
 80263ba:	f7f0 f8cf 	bl	801655c <osMutexAcquire>
#endif
}
 80263be:	bf00      	nop
 80263c0:	3708      	adds	r7, #8
 80263c2:	46bd      	mov	sp, r7
 80263c4:	bd80      	pop	{r7, pc}

080263c6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80263c6:	b580      	push	{r7, lr}
 80263c8:	b082      	sub	sp, #8
 80263ca:	af00      	add	r7, sp, #0
 80263cc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80263ce:	687b      	ldr	r3, [r7, #4]
 80263d0:	681b      	ldr	r3, [r3, #0]
 80263d2:	4618      	mov	r0, r3
 80263d4:	f7f0 f90d 	bl	80165f2 <osMutexRelease>
}
 80263d8:	bf00      	nop
 80263da:	3708      	adds	r7, #8
 80263dc:	46bd      	mov	sp, r7
 80263de:	bd80      	pop	{r7, pc}

080263e0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80263e0:	b580      	push	{r7, lr}
 80263e2:	b08e      	sub	sp, #56	; 0x38
 80263e4:	af00      	add	r7, sp, #0
 80263e6:	60f8      	str	r0, [r7, #12]
 80263e8:	60b9      	str	r1, [r7, #8]
 80263ea:	607a      	str	r2, [r7, #4]
 80263ec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80263ee:	f107 0314 	add.w	r3, r7, #20
 80263f2:	2224      	movs	r2, #36	; 0x24
 80263f4:	2100      	movs	r1, #0
 80263f6:	4618      	mov	r0, r3
 80263f8:	f000 ff60 	bl	80272bc <memset>
 80263fc:	68fb      	ldr	r3, [r7, #12]
 80263fe:	617b      	str	r3, [r7, #20]
 8026400:	683b      	ldr	r3, [r7, #0]
 8026402:	62bb      	str	r3, [r7, #40]	; 0x28
 8026404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026406:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8026408:	f107 0314 	add.w	r3, r7, #20
 802640c:	461a      	mov	r2, r3
 802640e:	6879      	ldr	r1, [r7, #4]
 8026410:	68b8      	ldr	r0, [r7, #8]
 8026412:	f7ef ff70 	bl	80162f6 <osThreadNew>
 8026416:	4603      	mov	r3, r0
#endif
}
 8026418:	4618      	mov	r0, r3
 802641a:	3738      	adds	r7, #56	; 0x38
 802641c:	46bd      	mov	sp, r7
 802641e:	bd80      	pop	{r7, pc}

08026420 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8026420:	b580      	push	{r7, lr}
 8026422:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8026424:	4b04      	ldr	r3, [pc, #16]	; (8026438 <sys_arch_protect+0x18>)
 8026426:	681b      	ldr	r3, [r3, #0]
 8026428:	f04f 31ff 	mov.w	r1, #4294967295
 802642c:	4618      	mov	r0, r3
 802642e:	f7f0 f895 	bl	801655c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8026432:	2301      	movs	r3, #1
}
 8026434:	4618      	mov	r0, r3
 8026436:	bd80      	pop	{r7, pc}
 8026438:	2400d0e8 	.word	0x2400d0e8

0802643c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 802643c:	b580      	push	{r7, lr}
 802643e:	b082      	sub	sp, #8
 8026440:	af00      	add	r7, sp, #0
 8026442:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8026444:	4b04      	ldr	r3, [pc, #16]	; (8026458 <sys_arch_unprotect+0x1c>)
 8026446:	681b      	ldr	r3, [r3, #0]
 8026448:	4618      	mov	r0, r3
 802644a:	f7f0 f8d2 	bl	80165f2 <osMutexRelease>
}
 802644e:	bf00      	nop
 8026450:	3708      	adds	r7, #8
 8026452:	46bd      	mov	sp, r7
 8026454:	bd80      	pop	{r7, pc}
 8026456:	bf00      	nop
 8026458:	2400d0e8 	.word	0x2400d0e8

0802645c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802645c:	b580      	push	{r7, lr}
 802645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8026460:	2201      	movs	r2, #1
 8026462:	4913      	ldr	r1, [pc, #76]	; (80264b0 <MX_USB_DEVICE_Init+0x54>)
 8026464:	4813      	ldr	r0, [pc, #76]	; (80264b4 <MX_USB_DEVICE_Init+0x58>)
 8026466:	f7ee fb2d 	bl	8014ac4 <USBD_Init>
 802646a:	4603      	mov	r3, r0
 802646c:	2b00      	cmp	r3, #0
 802646e:	d001      	beq.n	8026474 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8026470:	f7e0 fc26 	bl	8006cc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8026474:	4910      	ldr	r1, [pc, #64]	; (80264b8 <MX_USB_DEVICE_Init+0x5c>)
 8026476:	480f      	ldr	r0, [pc, #60]	; (80264b4 <MX_USB_DEVICE_Init+0x58>)
 8026478:	f7ee fb54 	bl	8014b24 <USBD_RegisterClass>
 802647c:	4603      	mov	r3, r0
 802647e:	2b00      	cmp	r3, #0
 8026480:	d001      	beq.n	8026486 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8026482:	f7e0 fc1d 	bl	8006cc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8026486:	490d      	ldr	r1, [pc, #52]	; (80264bc <MX_USB_DEVICE_Init+0x60>)
 8026488:	480a      	ldr	r0, [pc, #40]	; (80264b4 <MX_USB_DEVICE_Init+0x58>)
 802648a:	f7ee fa8b 	bl	80149a4 <USBD_CDC_RegisterInterface>
 802648e:	4603      	mov	r3, r0
 8026490:	2b00      	cmp	r3, #0
 8026492:	d001      	beq.n	8026498 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8026494:	f7e0 fc14 	bl	8006cc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8026498:	4806      	ldr	r0, [pc, #24]	; (80264b4 <MX_USB_DEVICE_Init+0x58>)
 802649a:	f7ee fb79 	bl	8014b90 <USBD_Start>
 802649e:	4603      	mov	r3, r0
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	d001      	beq.n	80264a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80264a4:	f7e0 fc0c 	bl	8006cc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80264a8:	f7e5 fe2a 	bl	800c100 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80264ac:	bf00      	nop
 80264ae:	bd80      	pop	{r7, pc}
 80264b0:	2400047c 	.word	0x2400047c
 80264b4:	2400d0ec 	.word	0x2400d0ec
 80264b8:	240003d4 	.word	0x240003d4
 80264bc:	24000468 	.word	0x24000468

080264c0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80264c0:	b580      	push	{r7, lr}
 80264c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80264c4:	2200      	movs	r2, #0
 80264c6:	4905      	ldr	r1, [pc, #20]	; (80264dc <CDC_Init_HS+0x1c>)
 80264c8:	4805      	ldr	r0, [pc, #20]	; (80264e0 <CDC_Init_HS+0x20>)
 80264ca:	f7ee fa85 	bl	80149d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80264ce:	4905      	ldr	r1, [pc, #20]	; (80264e4 <CDC_Init_HS+0x24>)
 80264d0:	4803      	ldr	r0, [pc, #12]	; (80264e0 <CDC_Init_HS+0x20>)
 80264d2:	f7ee faa3 	bl	8014a1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80264d6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80264d8:	4618      	mov	r0, r3
 80264da:	bd80      	pop	{r7, pc}
 80264dc:	2400dbc8 	.word	0x2400dbc8
 80264e0:	2400d0ec 	.word	0x2400d0ec
 80264e4:	2400d3c8 	.word	0x2400d3c8

080264e8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80264e8:	b480      	push	{r7}
 80264ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80264ec:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80264ee:	4618      	mov	r0, r3
 80264f0:	46bd      	mov	sp, r7
 80264f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264f6:	4770      	bx	lr

080264f8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80264f8:	b480      	push	{r7}
 80264fa:	b083      	sub	sp, #12
 80264fc:	af00      	add	r7, sp, #0
 80264fe:	4603      	mov	r3, r0
 8026500:	6039      	str	r1, [r7, #0]
 8026502:	71fb      	strb	r3, [r7, #7]
 8026504:	4613      	mov	r3, r2
 8026506:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8026508:	79fb      	ldrb	r3, [r7, #7]
 802650a:	2b23      	cmp	r3, #35	; 0x23
 802650c:	d84a      	bhi.n	80265a4 <CDC_Control_HS+0xac>
 802650e:	a201      	add	r2, pc, #4	; (adr r2, 8026514 <CDC_Control_HS+0x1c>)
 8026510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026514:	080265a5 	.word	0x080265a5
 8026518:	080265a5 	.word	0x080265a5
 802651c:	080265a5 	.word	0x080265a5
 8026520:	080265a5 	.word	0x080265a5
 8026524:	080265a5 	.word	0x080265a5
 8026528:	080265a5 	.word	0x080265a5
 802652c:	080265a5 	.word	0x080265a5
 8026530:	080265a5 	.word	0x080265a5
 8026534:	080265a5 	.word	0x080265a5
 8026538:	080265a5 	.word	0x080265a5
 802653c:	080265a5 	.word	0x080265a5
 8026540:	080265a5 	.word	0x080265a5
 8026544:	080265a5 	.word	0x080265a5
 8026548:	080265a5 	.word	0x080265a5
 802654c:	080265a5 	.word	0x080265a5
 8026550:	080265a5 	.word	0x080265a5
 8026554:	080265a5 	.word	0x080265a5
 8026558:	080265a5 	.word	0x080265a5
 802655c:	080265a5 	.word	0x080265a5
 8026560:	080265a5 	.word	0x080265a5
 8026564:	080265a5 	.word	0x080265a5
 8026568:	080265a5 	.word	0x080265a5
 802656c:	080265a5 	.word	0x080265a5
 8026570:	080265a5 	.word	0x080265a5
 8026574:	080265a5 	.word	0x080265a5
 8026578:	080265a5 	.word	0x080265a5
 802657c:	080265a5 	.word	0x080265a5
 8026580:	080265a5 	.word	0x080265a5
 8026584:	080265a5 	.word	0x080265a5
 8026588:	080265a5 	.word	0x080265a5
 802658c:	080265a5 	.word	0x080265a5
 8026590:	080265a5 	.word	0x080265a5
 8026594:	080265a5 	.word	0x080265a5
 8026598:	080265a5 	.word	0x080265a5
 802659c:	080265a5 	.word	0x080265a5
 80265a0:	080265a5 	.word	0x080265a5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80265a4:	bf00      	nop
  }

  return (USBD_OK);
 80265a6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80265a8:	4618      	mov	r0, r3
 80265aa:	370c      	adds	r7, #12
 80265ac:	46bd      	mov	sp, r7
 80265ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265b2:	4770      	bx	lr

080265b4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80265b4:	b580      	push	{r7, lr}
 80265b6:	b082      	sub	sp, #8
 80265b8:	af00      	add	r7, sp, #0
 80265ba:	6078      	str	r0, [r7, #4]
 80265bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80265be:	6879      	ldr	r1, [r7, #4]
 80265c0:	4805      	ldr	r0, [pc, #20]	; (80265d8 <CDC_Receive_HS+0x24>)
 80265c2:	f7ee fa2b 	bl	8014a1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80265c6:	4804      	ldr	r0, [pc, #16]	; (80265d8 <CDC_Receive_HS+0x24>)
 80265c8:	f7ee fa46 	bl	8014a58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80265cc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80265ce:	4618      	mov	r0, r3
 80265d0:	3708      	adds	r7, #8
 80265d2:	46bd      	mov	sp, r7
 80265d4:	bd80      	pop	{r7, pc}
 80265d6:	bf00      	nop
 80265d8:	2400d0ec 	.word	0x2400d0ec

080265dc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80265dc:	b480      	push	{r7}
 80265de:	b087      	sub	sp, #28
 80265e0:	af00      	add	r7, sp, #0
 80265e2:	60f8      	str	r0, [r7, #12]
 80265e4:	60b9      	str	r1, [r7, #8]
 80265e6:	4613      	mov	r3, r2
 80265e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80265ea:	2300      	movs	r3, #0
 80265ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80265ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80265f2:	4618      	mov	r0, r3
 80265f4:	371c      	adds	r7, #28
 80265f6:	46bd      	mov	sp, r7
 80265f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265fc:	4770      	bx	lr
	...

08026600 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8026600:	b480      	push	{r7}
 8026602:	b083      	sub	sp, #12
 8026604:	af00      	add	r7, sp, #0
 8026606:	4603      	mov	r3, r0
 8026608:	6039      	str	r1, [r7, #0]
 802660a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 802660c:	683b      	ldr	r3, [r7, #0]
 802660e:	2212      	movs	r2, #18
 8026610:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8026612:	4b03      	ldr	r3, [pc, #12]	; (8026620 <USBD_HS_DeviceDescriptor+0x20>)
}
 8026614:	4618      	mov	r0, r3
 8026616:	370c      	adds	r7, #12
 8026618:	46bd      	mov	sp, r7
 802661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802661e:	4770      	bx	lr
 8026620:	24000498 	.word	0x24000498

08026624 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8026624:	b480      	push	{r7}
 8026626:	b083      	sub	sp, #12
 8026628:	af00      	add	r7, sp, #0
 802662a:	4603      	mov	r3, r0
 802662c:	6039      	str	r1, [r7, #0]
 802662e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8026630:	683b      	ldr	r3, [r7, #0]
 8026632:	2204      	movs	r2, #4
 8026634:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8026636:	4b03      	ldr	r3, [pc, #12]	; (8026644 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8026638:	4618      	mov	r0, r3
 802663a:	370c      	adds	r7, #12
 802663c:	46bd      	mov	sp, r7
 802663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026642:	4770      	bx	lr
 8026644:	240004ac 	.word	0x240004ac

08026648 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8026648:	b580      	push	{r7, lr}
 802664a:	b082      	sub	sp, #8
 802664c:	af00      	add	r7, sp, #0
 802664e:	4603      	mov	r3, r0
 8026650:	6039      	str	r1, [r7, #0]
 8026652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8026654:	79fb      	ldrb	r3, [r7, #7]
 8026656:	2b00      	cmp	r3, #0
 8026658:	d105      	bne.n	8026666 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 802665a:	683a      	ldr	r2, [r7, #0]
 802665c:	4907      	ldr	r1, [pc, #28]	; (802667c <USBD_HS_ProductStrDescriptor+0x34>)
 802665e:	4808      	ldr	r0, [pc, #32]	; (8026680 <USBD_HS_ProductStrDescriptor+0x38>)
 8026660:	f7ef fc48 	bl	8015ef4 <USBD_GetString>
 8026664:	e004      	b.n	8026670 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8026666:	683a      	ldr	r2, [r7, #0]
 8026668:	4904      	ldr	r1, [pc, #16]	; (802667c <USBD_HS_ProductStrDescriptor+0x34>)
 802666a:	4805      	ldr	r0, [pc, #20]	; (8026680 <USBD_HS_ProductStrDescriptor+0x38>)
 802666c:	f7ef fc42 	bl	8015ef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8026670:	4b02      	ldr	r3, [pc, #8]	; (802667c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8026672:	4618      	mov	r0, r3
 8026674:	3708      	adds	r7, #8
 8026676:	46bd      	mov	sp, r7
 8026678:	bd80      	pop	{r7, pc}
 802667a:	bf00      	nop
 802667c:	2400e3c8 	.word	0x2400e3c8
 8026680:	0802b2b4 	.word	0x0802b2b4

08026684 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8026684:	b580      	push	{r7, lr}
 8026686:	b082      	sub	sp, #8
 8026688:	af00      	add	r7, sp, #0
 802668a:	4603      	mov	r3, r0
 802668c:	6039      	str	r1, [r7, #0]
 802668e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8026690:	683a      	ldr	r2, [r7, #0]
 8026692:	4904      	ldr	r1, [pc, #16]	; (80266a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8026694:	4804      	ldr	r0, [pc, #16]	; (80266a8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8026696:	f7ef fc2d 	bl	8015ef4 <USBD_GetString>
  return USBD_StrDesc;
 802669a:	4b02      	ldr	r3, [pc, #8]	; (80266a4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 802669c:	4618      	mov	r0, r3
 802669e:	3708      	adds	r7, #8
 80266a0:	46bd      	mov	sp, r7
 80266a2:	bd80      	pop	{r7, pc}
 80266a4:	2400e3c8 	.word	0x2400e3c8
 80266a8:	0802b2cc 	.word	0x0802b2cc

080266ac <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80266ac:	b580      	push	{r7, lr}
 80266ae:	b082      	sub	sp, #8
 80266b0:	af00      	add	r7, sp, #0
 80266b2:	4603      	mov	r3, r0
 80266b4:	6039      	str	r1, [r7, #0]
 80266b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80266b8:	683b      	ldr	r3, [r7, #0]
 80266ba:	221a      	movs	r2, #26
 80266bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80266be:	f000 f843 	bl	8026748 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80266c2:	4b02      	ldr	r3, [pc, #8]	; (80266cc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80266c4:	4618      	mov	r0, r3
 80266c6:	3708      	adds	r7, #8
 80266c8:	46bd      	mov	sp, r7
 80266ca:	bd80      	pop	{r7, pc}
 80266cc:	240004b0 	.word	0x240004b0

080266d0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80266d0:	b580      	push	{r7, lr}
 80266d2:	b082      	sub	sp, #8
 80266d4:	af00      	add	r7, sp, #0
 80266d6:	4603      	mov	r3, r0
 80266d8:	6039      	str	r1, [r7, #0]
 80266da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80266dc:	79fb      	ldrb	r3, [r7, #7]
 80266de:	2b00      	cmp	r3, #0
 80266e0:	d105      	bne.n	80266ee <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80266e2:	683a      	ldr	r2, [r7, #0]
 80266e4:	4907      	ldr	r1, [pc, #28]	; (8026704 <USBD_HS_ConfigStrDescriptor+0x34>)
 80266e6:	4808      	ldr	r0, [pc, #32]	; (8026708 <USBD_HS_ConfigStrDescriptor+0x38>)
 80266e8:	f7ef fc04 	bl	8015ef4 <USBD_GetString>
 80266ec:	e004      	b.n	80266f8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80266ee:	683a      	ldr	r2, [r7, #0]
 80266f0:	4904      	ldr	r1, [pc, #16]	; (8026704 <USBD_HS_ConfigStrDescriptor+0x34>)
 80266f2:	4805      	ldr	r0, [pc, #20]	; (8026708 <USBD_HS_ConfigStrDescriptor+0x38>)
 80266f4:	f7ef fbfe 	bl	8015ef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80266f8:	4b02      	ldr	r3, [pc, #8]	; (8026704 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80266fa:	4618      	mov	r0, r3
 80266fc:	3708      	adds	r7, #8
 80266fe:	46bd      	mov	sp, r7
 8026700:	bd80      	pop	{r7, pc}
 8026702:	bf00      	nop
 8026704:	2400e3c8 	.word	0x2400e3c8
 8026708:	0802b2e0 	.word	0x0802b2e0

0802670c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802670c:	b580      	push	{r7, lr}
 802670e:	b082      	sub	sp, #8
 8026710:	af00      	add	r7, sp, #0
 8026712:	4603      	mov	r3, r0
 8026714:	6039      	str	r1, [r7, #0]
 8026716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8026718:	79fb      	ldrb	r3, [r7, #7]
 802671a:	2b00      	cmp	r3, #0
 802671c:	d105      	bne.n	802672a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 802671e:	683a      	ldr	r2, [r7, #0]
 8026720:	4907      	ldr	r1, [pc, #28]	; (8026740 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8026722:	4808      	ldr	r0, [pc, #32]	; (8026744 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8026724:	f7ef fbe6 	bl	8015ef4 <USBD_GetString>
 8026728:	e004      	b.n	8026734 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 802672a:	683a      	ldr	r2, [r7, #0]
 802672c:	4904      	ldr	r1, [pc, #16]	; (8026740 <USBD_HS_InterfaceStrDescriptor+0x34>)
 802672e:	4805      	ldr	r0, [pc, #20]	; (8026744 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8026730:	f7ef fbe0 	bl	8015ef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8026734:	4b02      	ldr	r3, [pc, #8]	; (8026740 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8026736:	4618      	mov	r0, r3
 8026738:	3708      	adds	r7, #8
 802673a:	46bd      	mov	sp, r7
 802673c:	bd80      	pop	{r7, pc}
 802673e:	bf00      	nop
 8026740:	2400e3c8 	.word	0x2400e3c8
 8026744:	0802b2ec 	.word	0x0802b2ec

08026748 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8026748:	b580      	push	{r7, lr}
 802674a:	b084      	sub	sp, #16
 802674c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802674e:	4b0f      	ldr	r3, [pc, #60]	; (802678c <Get_SerialNum+0x44>)
 8026750:	681b      	ldr	r3, [r3, #0]
 8026752:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8026754:	4b0e      	ldr	r3, [pc, #56]	; (8026790 <Get_SerialNum+0x48>)
 8026756:	681b      	ldr	r3, [r3, #0]
 8026758:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802675a:	4b0e      	ldr	r3, [pc, #56]	; (8026794 <Get_SerialNum+0x4c>)
 802675c:	681b      	ldr	r3, [r3, #0]
 802675e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8026760:	68fa      	ldr	r2, [r7, #12]
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	4413      	add	r3, r2
 8026766:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8026768:	68fb      	ldr	r3, [r7, #12]
 802676a:	2b00      	cmp	r3, #0
 802676c:	d009      	beq.n	8026782 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802676e:	2208      	movs	r2, #8
 8026770:	4909      	ldr	r1, [pc, #36]	; (8026798 <Get_SerialNum+0x50>)
 8026772:	68f8      	ldr	r0, [r7, #12]
 8026774:	f000 f814 	bl	80267a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8026778:	2204      	movs	r2, #4
 802677a:	4908      	ldr	r1, [pc, #32]	; (802679c <Get_SerialNum+0x54>)
 802677c:	68b8      	ldr	r0, [r7, #8]
 802677e:	f000 f80f 	bl	80267a0 <IntToUnicode>
  }
}
 8026782:	bf00      	nop
 8026784:	3710      	adds	r7, #16
 8026786:	46bd      	mov	sp, r7
 8026788:	bd80      	pop	{r7, pc}
 802678a:	bf00      	nop
 802678c:	1ff1e800 	.word	0x1ff1e800
 8026790:	1ff1e804 	.word	0x1ff1e804
 8026794:	1ff1e808 	.word	0x1ff1e808
 8026798:	240004b2 	.word	0x240004b2
 802679c:	240004c2 	.word	0x240004c2

080267a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80267a0:	b480      	push	{r7}
 80267a2:	b087      	sub	sp, #28
 80267a4:	af00      	add	r7, sp, #0
 80267a6:	60f8      	str	r0, [r7, #12]
 80267a8:	60b9      	str	r1, [r7, #8]
 80267aa:	4613      	mov	r3, r2
 80267ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80267ae:	2300      	movs	r3, #0
 80267b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80267b2:	2300      	movs	r3, #0
 80267b4:	75fb      	strb	r3, [r7, #23]
 80267b6:	e027      	b.n	8026808 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80267b8:	68fb      	ldr	r3, [r7, #12]
 80267ba:	0f1b      	lsrs	r3, r3, #28
 80267bc:	2b09      	cmp	r3, #9
 80267be:	d80b      	bhi.n	80267d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80267c0:	68fb      	ldr	r3, [r7, #12]
 80267c2:	0f1b      	lsrs	r3, r3, #28
 80267c4:	b2da      	uxtb	r2, r3
 80267c6:	7dfb      	ldrb	r3, [r7, #23]
 80267c8:	005b      	lsls	r3, r3, #1
 80267ca:	4619      	mov	r1, r3
 80267cc:	68bb      	ldr	r3, [r7, #8]
 80267ce:	440b      	add	r3, r1
 80267d0:	3230      	adds	r2, #48	; 0x30
 80267d2:	b2d2      	uxtb	r2, r2
 80267d4:	701a      	strb	r2, [r3, #0]
 80267d6:	e00a      	b.n	80267ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80267d8:	68fb      	ldr	r3, [r7, #12]
 80267da:	0f1b      	lsrs	r3, r3, #28
 80267dc:	b2da      	uxtb	r2, r3
 80267de:	7dfb      	ldrb	r3, [r7, #23]
 80267e0:	005b      	lsls	r3, r3, #1
 80267e2:	4619      	mov	r1, r3
 80267e4:	68bb      	ldr	r3, [r7, #8]
 80267e6:	440b      	add	r3, r1
 80267e8:	3237      	adds	r2, #55	; 0x37
 80267ea:	b2d2      	uxtb	r2, r2
 80267ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80267ee:	68fb      	ldr	r3, [r7, #12]
 80267f0:	011b      	lsls	r3, r3, #4
 80267f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80267f4:	7dfb      	ldrb	r3, [r7, #23]
 80267f6:	005b      	lsls	r3, r3, #1
 80267f8:	3301      	adds	r3, #1
 80267fa:	68ba      	ldr	r2, [r7, #8]
 80267fc:	4413      	add	r3, r2
 80267fe:	2200      	movs	r2, #0
 8026800:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8026802:	7dfb      	ldrb	r3, [r7, #23]
 8026804:	3301      	adds	r3, #1
 8026806:	75fb      	strb	r3, [r7, #23]
 8026808:	7dfa      	ldrb	r2, [r7, #23]
 802680a:	79fb      	ldrb	r3, [r7, #7]
 802680c:	429a      	cmp	r2, r3
 802680e:	d3d3      	bcc.n	80267b8 <IntToUnicode+0x18>
  }
}
 8026810:	bf00      	nop
 8026812:	bf00      	nop
 8026814:	371c      	adds	r7, #28
 8026816:	46bd      	mov	sp, r7
 8026818:	f85d 7b04 	ldr.w	r7, [sp], #4
 802681c:	4770      	bx	lr
	...

08026820 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8026820:	b580      	push	{r7, lr}
 8026822:	b0b2      	sub	sp, #200	; 0xc8
 8026824:	af00      	add	r7, sp, #0
 8026826:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8026828:	f107 0310 	add.w	r3, r7, #16
 802682c:	22b8      	movs	r2, #184	; 0xb8
 802682e:	2100      	movs	r1, #0
 8026830:	4618      	mov	r0, r3
 8026832:	f000 fd43 	bl	80272bc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8026836:	687b      	ldr	r3, [r7, #4]
 8026838:	681b      	ldr	r3, [r3, #0]
 802683a:	4a1a      	ldr	r2, [pc, #104]	; (80268a4 <HAL_PCD_MspInit+0x84>)
 802683c:	4293      	cmp	r3, r2
 802683e:	d12c      	bne.n	802689a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8026840:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8026844:	f04f 0300 	mov.w	r3, #0
 8026848:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 802684c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8026850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8026854:	f107 0310 	add.w	r3, r7, #16
 8026858:	4618      	mov	r0, r3
 802685a:	f7e6 fbf3 	bl	800d044 <HAL_RCCEx_PeriphCLKConfig>
 802685e:	4603      	mov	r3, r0
 8026860:	2b00      	cmp	r3, #0
 8026862:	d001      	beq.n	8026868 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8026864:	f7e0 fa2c 	bl	8006cc0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8026868:	f7e5 fc4a 	bl	800c100 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802686c:	4b0e      	ldr	r3, [pc, #56]	; (80268a8 <HAL_PCD_MspInit+0x88>)
 802686e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8026872:	4a0d      	ldr	r2, [pc, #52]	; (80268a8 <HAL_PCD_MspInit+0x88>)
 8026874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8026878:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 802687c:	4b0a      	ldr	r3, [pc, #40]	; (80268a8 <HAL_PCD_MspInit+0x88>)
 802687e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8026882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026886:	60fb      	str	r3, [r7, #12]
 8026888:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 802688a:	2200      	movs	r2, #0
 802688c:	2105      	movs	r1, #5
 802688e:	204d      	movs	r0, #77	; 0x4d
 8026890:	f7e1 f89b 	bl	80079ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8026894:	204d      	movs	r0, #77	; 0x4d
 8026896:	f7e1 f8b2 	bl	80079fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802689a:	bf00      	nop
 802689c:	37c8      	adds	r7, #200	; 0xc8
 802689e:	46bd      	mov	sp, r7
 80268a0:	bd80      	pop	{r7, pc}
 80268a2:	bf00      	nop
 80268a4:	40040000 	.word	0x40040000
 80268a8:	58024400 	.word	0x58024400

080268ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80268ac:	b580      	push	{r7, lr}
 80268ae:	b082      	sub	sp, #8
 80268b0:	af00      	add	r7, sp, #0
 80268b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80268ba:	687b      	ldr	r3, [r7, #4]
 80268bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80268c0:	4619      	mov	r1, r3
 80268c2:	4610      	mov	r0, r2
 80268c4:	f7ee f9b1 	bl	8014c2a <USBD_LL_SetupStage>
}
 80268c8:	bf00      	nop
 80268ca:	3708      	adds	r7, #8
 80268cc:	46bd      	mov	sp, r7
 80268ce:	bd80      	pop	{r7, pc}

080268d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80268d0:	b580      	push	{r7, lr}
 80268d2:	b082      	sub	sp, #8
 80268d4:	af00      	add	r7, sp, #0
 80268d6:	6078      	str	r0, [r7, #4]
 80268d8:	460b      	mov	r3, r1
 80268da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80268e2:	78fa      	ldrb	r2, [r7, #3]
 80268e4:	6879      	ldr	r1, [r7, #4]
 80268e6:	4613      	mov	r3, r2
 80268e8:	00db      	lsls	r3, r3, #3
 80268ea:	4413      	add	r3, r2
 80268ec:	009b      	lsls	r3, r3, #2
 80268ee:	440b      	add	r3, r1
 80268f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80268f4:	681a      	ldr	r2, [r3, #0]
 80268f6:	78fb      	ldrb	r3, [r7, #3]
 80268f8:	4619      	mov	r1, r3
 80268fa:	f7ee f9eb 	bl	8014cd4 <USBD_LL_DataOutStage>
}
 80268fe:	bf00      	nop
 8026900:	3708      	adds	r7, #8
 8026902:	46bd      	mov	sp, r7
 8026904:	bd80      	pop	{r7, pc}

08026906 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8026906:	b580      	push	{r7, lr}
 8026908:	b082      	sub	sp, #8
 802690a:	af00      	add	r7, sp, #0
 802690c:	6078      	str	r0, [r7, #4]
 802690e:	460b      	mov	r3, r1
 8026910:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8026918:	78fa      	ldrb	r2, [r7, #3]
 802691a:	6879      	ldr	r1, [r7, #4]
 802691c:	4613      	mov	r3, r2
 802691e:	00db      	lsls	r3, r3, #3
 8026920:	4413      	add	r3, r2
 8026922:	009b      	lsls	r3, r3, #2
 8026924:	440b      	add	r3, r1
 8026926:	3348      	adds	r3, #72	; 0x48
 8026928:	681a      	ldr	r2, [r3, #0]
 802692a:	78fb      	ldrb	r3, [r7, #3]
 802692c:	4619      	mov	r1, r3
 802692e:	f7ee fa84 	bl	8014e3a <USBD_LL_DataInStage>
}
 8026932:	bf00      	nop
 8026934:	3708      	adds	r7, #8
 8026936:	46bd      	mov	sp, r7
 8026938:	bd80      	pop	{r7, pc}

0802693a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802693a:	b580      	push	{r7, lr}
 802693c:	b082      	sub	sp, #8
 802693e:	af00      	add	r7, sp, #0
 8026940:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8026942:	687b      	ldr	r3, [r7, #4]
 8026944:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026948:	4618      	mov	r0, r3
 802694a:	f7ee fbbe 	bl	80150ca <USBD_LL_SOF>
}
 802694e:	bf00      	nop
 8026950:	3708      	adds	r7, #8
 8026952:	46bd      	mov	sp, r7
 8026954:	bd80      	pop	{r7, pc}

08026956 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8026956:	b580      	push	{r7, lr}
 8026958:	b084      	sub	sp, #16
 802695a:	af00      	add	r7, sp, #0
 802695c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802695e:	2301      	movs	r3, #1
 8026960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	691b      	ldr	r3, [r3, #16]
 8026966:	2b00      	cmp	r3, #0
 8026968:	d102      	bne.n	8026970 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802696a:	2300      	movs	r3, #0
 802696c:	73fb      	strb	r3, [r7, #15]
 802696e:	e008      	b.n	8026982 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8026970:	687b      	ldr	r3, [r7, #4]
 8026972:	691b      	ldr	r3, [r3, #16]
 8026974:	2b02      	cmp	r3, #2
 8026976:	d102      	bne.n	802697e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8026978:	2301      	movs	r3, #1
 802697a:	73fb      	strb	r3, [r7, #15]
 802697c:	e001      	b.n	8026982 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 802697e:	f7e0 f99f 	bl	8006cc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8026982:	687b      	ldr	r3, [r7, #4]
 8026984:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026988:	7bfa      	ldrb	r2, [r7, #15]
 802698a:	4611      	mov	r1, r2
 802698c:	4618      	mov	r0, r3
 802698e:	f7ee fb58 	bl	8015042 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026998:	4618      	mov	r0, r3
 802699a:	f7ee fb00 	bl	8014f9e <USBD_LL_Reset>
}
 802699e:	bf00      	nop
 80269a0:	3710      	adds	r7, #16
 80269a2:	46bd      	mov	sp, r7
 80269a4:	bd80      	pop	{r7, pc}
	...

080269a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80269a8:	b580      	push	{r7, lr}
 80269aa:	b082      	sub	sp, #8
 80269ac:	af00      	add	r7, sp, #0
 80269ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80269b6:	4618      	mov	r0, r3
 80269b8:	f7ee fb53 	bl	8015062 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80269bc:	687b      	ldr	r3, [r7, #4]
 80269be:	681b      	ldr	r3, [r3, #0]
 80269c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80269c4:	681b      	ldr	r3, [r3, #0]
 80269c6:	687a      	ldr	r2, [r7, #4]
 80269c8:	6812      	ldr	r2, [r2, #0]
 80269ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80269ce:	f043 0301 	orr.w	r3, r3, #1
 80269d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80269d4:	687b      	ldr	r3, [r7, #4]
 80269d6:	6a1b      	ldr	r3, [r3, #32]
 80269d8:	2b00      	cmp	r3, #0
 80269da:	d005      	beq.n	80269e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80269dc:	4b04      	ldr	r3, [pc, #16]	; (80269f0 <HAL_PCD_SuspendCallback+0x48>)
 80269de:	691b      	ldr	r3, [r3, #16]
 80269e0:	4a03      	ldr	r2, [pc, #12]	; (80269f0 <HAL_PCD_SuspendCallback+0x48>)
 80269e2:	f043 0306 	orr.w	r3, r3, #6
 80269e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80269e8:	bf00      	nop
 80269ea:	3708      	adds	r7, #8
 80269ec:	46bd      	mov	sp, r7
 80269ee:	bd80      	pop	{r7, pc}
 80269f0:	e000ed00 	.word	0xe000ed00

080269f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80269f4:	b580      	push	{r7, lr}
 80269f6:	b082      	sub	sp, #8
 80269f8:	af00      	add	r7, sp, #0
 80269fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80269fc:	687b      	ldr	r3, [r7, #4]
 80269fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026a02:	4618      	mov	r0, r3
 8026a04:	f7ee fb49 	bl	801509a <USBD_LL_Resume>
}
 8026a08:	bf00      	nop
 8026a0a:	3708      	adds	r7, #8
 8026a0c:	46bd      	mov	sp, r7
 8026a0e:	bd80      	pop	{r7, pc}

08026a10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8026a10:	b580      	push	{r7, lr}
 8026a12:	b082      	sub	sp, #8
 8026a14:	af00      	add	r7, sp, #0
 8026a16:	6078      	str	r0, [r7, #4]
 8026a18:	460b      	mov	r3, r1
 8026a1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026a22:	78fa      	ldrb	r2, [r7, #3]
 8026a24:	4611      	mov	r1, r2
 8026a26:	4618      	mov	r0, r3
 8026a28:	f7ee fba1 	bl	801516e <USBD_LL_IsoOUTIncomplete>
}
 8026a2c:	bf00      	nop
 8026a2e:	3708      	adds	r7, #8
 8026a30:	46bd      	mov	sp, r7
 8026a32:	bd80      	pop	{r7, pc}

08026a34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8026a34:	b580      	push	{r7, lr}
 8026a36:	b082      	sub	sp, #8
 8026a38:	af00      	add	r7, sp, #0
 8026a3a:	6078      	str	r0, [r7, #4]
 8026a3c:	460b      	mov	r3, r1
 8026a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026a46:	78fa      	ldrb	r2, [r7, #3]
 8026a48:	4611      	mov	r1, r2
 8026a4a:	4618      	mov	r0, r3
 8026a4c:	f7ee fb5d 	bl	801510a <USBD_LL_IsoINIncomplete>
}
 8026a50:	bf00      	nop
 8026a52:	3708      	adds	r7, #8
 8026a54:	46bd      	mov	sp, r7
 8026a56:	bd80      	pop	{r7, pc}

08026a58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8026a58:	b580      	push	{r7, lr}
 8026a5a:	b082      	sub	sp, #8
 8026a5c:	af00      	add	r7, sp, #0
 8026a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026a66:	4618      	mov	r0, r3
 8026a68:	f7ee fbb3 	bl	80151d2 <USBD_LL_DevConnected>
}
 8026a6c:	bf00      	nop
 8026a6e:	3708      	adds	r7, #8
 8026a70:	46bd      	mov	sp, r7
 8026a72:	bd80      	pop	{r7, pc}

08026a74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8026a74:	b580      	push	{r7, lr}
 8026a76:	b082      	sub	sp, #8
 8026a78:	af00      	add	r7, sp, #0
 8026a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8026a7c:	687b      	ldr	r3, [r7, #4]
 8026a7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026a82:	4618      	mov	r0, r3
 8026a84:	f7ee fbb0 	bl	80151e8 <USBD_LL_DevDisconnected>
}
 8026a88:	bf00      	nop
 8026a8a:	3708      	adds	r7, #8
 8026a8c:	46bd      	mov	sp, r7
 8026a8e:	bd80      	pop	{r7, pc}

08026a90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8026a90:	b580      	push	{r7, lr}
 8026a92:	b082      	sub	sp, #8
 8026a94:	af00      	add	r7, sp, #0
 8026a96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8026a98:	687b      	ldr	r3, [r7, #4]
 8026a9a:	781b      	ldrb	r3, [r3, #0]
 8026a9c:	2b01      	cmp	r3, #1
 8026a9e:	d140      	bne.n	8026b22 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8026aa0:	4a22      	ldr	r2, [pc, #136]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8026aa8:	687b      	ldr	r3, [r7, #4]
 8026aaa:	4a20      	ldr	r2, [pc, #128]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026aac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8026ab0:	4b1e      	ldr	r3, [pc, #120]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026ab2:	4a1f      	ldr	r2, [pc, #124]	; (8026b30 <USBD_LL_Init+0xa0>)
 8026ab4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8026ab6:	4b1d      	ldr	r3, [pc, #116]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026ab8:	2209      	movs	r2, #9
 8026aba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8026abc:	4b1b      	ldr	r3, [pc, #108]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026abe:	2202      	movs	r2, #2
 8026ac0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8026ac2:	4b1a      	ldr	r3, [pc, #104]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026ac4:	2200      	movs	r2, #0
 8026ac6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8026ac8:	4b18      	ldr	r3, [pc, #96]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026aca:	2202      	movs	r2, #2
 8026acc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8026ace:	4b17      	ldr	r3, [pc, #92]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026ad0:	2200      	movs	r2, #0
 8026ad2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8026ad4:	4b15      	ldr	r3, [pc, #84]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026ad6:	2200      	movs	r2, #0
 8026ad8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8026ada:	4b14      	ldr	r3, [pc, #80]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026adc:	2200      	movs	r2, #0
 8026ade:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8026ae0:	4b12      	ldr	r3, [pc, #72]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026ae2:	2200      	movs	r2, #0
 8026ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8026ae6:	4b11      	ldr	r3, [pc, #68]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026ae8:	2200      	movs	r2, #0
 8026aea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8026aec:	4b0f      	ldr	r3, [pc, #60]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026aee:	2200      	movs	r2, #0
 8026af0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8026af2:	480e      	ldr	r0, [pc, #56]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026af4:	f7e4 f810 	bl	800ab18 <HAL_PCD_Init>
 8026af8:	4603      	mov	r3, r0
 8026afa:	2b00      	cmp	r3, #0
 8026afc:	d001      	beq.n	8026b02 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8026afe:	f7e0 f8df 	bl	8006cc0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8026b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026b06:	4809      	ldr	r0, [pc, #36]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026b08:	f7e5 fa7f 	bl	800c00a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8026b0c:	2280      	movs	r2, #128	; 0x80
 8026b0e:	2100      	movs	r1, #0
 8026b10:	4806      	ldr	r0, [pc, #24]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026b12:	f7e5 fa33 	bl	800bf7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8026b16:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8026b1a:	2101      	movs	r1, #1
 8026b1c:	4803      	ldr	r0, [pc, #12]	; (8026b2c <USBD_LL_Init+0x9c>)
 8026b1e:	f7e5 fa2d 	bl	800bf7c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8026b22:	2300      	movs	r3, #0
}
 8026b24:	4618      	mov	r0, r3
 8026b26:	3708      	adds	r7, #8
 8026b28:	46bd      	mov	sp, r7
 8026b2a:	bd80      	pop	{r7, pc}
 8026b2c:	2400e5c8 	.word	0x2400e5c8
 8026b30:	40040000 	.word	0x40040000

08026b34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8026b34:	b580      	push	{r7, lr}
 8026b36:	b084      	sub	sp, #16
 8026b38:	af00      	add	r7, sp, #0
 8026b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026b3c:	2300      	movs	r3, #0
 8026b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026b40:	2300      	movs	r3, #0
 8026b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8026b44:	687b      	ldr	r3, [r7, #4]
 8026b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026b4a:	4618      	mov	r0, r3
 8026b4c:	f7e4 f908 	bl	800ad60 <HAL_PCD_Start>
 8026b50:	4603      	mov	r3, r0
 8026b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026b54:	7bfb      	ldrb	r3, [r7, #15]
 8026b56:	4618      	mov	r0, r3
 8026b58:	f000 f942 	bl	8026de0 <USBD_Get_USB_Status>
 8026b5c:	4603      	mov	r3, r0
 8026b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8026b62:	4618      	mov	r0, r3
 8026b64:	3710      	adds	r7, #16
 8026b66:	46bd      	mov	sp, r7
 8026b68:	bd80      	pop	{r7, pc}

08026b6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8026b6a:	b580      	push	{r7, lr}
 8026b6c:	b084      	sub	sp, #16
 8026b6e:	af00      	add	r7, sp, #0
 8026b70:	6078      	str	r0, [r7, #4]
 8026b72:	4608      	mov	r0, r1
 8026b74:	4611      	mov	r1, r2
 8026b76:	461a      	mov	r2, r3
 8026b78:	4603      	mov	r3, r0
 8026b7a:	70fb      	strb	r3, [r7, #3]
 8026b7c:	460b      	mov	r3, r1
 8026b7e:	70bb      	strb	r3, [r7, #2]
 8026b80:	4613      	mov	r3, r2
 8026b82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026b84:	2300      	movs	r3, #0
 8026b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026b88:	2300      	movs	r3, #0
 8026b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8026b92:	78bb      	ldrb	r3, [r7, #2]
 8026b94:	883a      	ldrh	r2, [r7, #0]
 8026b96:	78f9      	ldrb	r1, [r7, #3]
 8026b98:	f7e4 fe08 	bl	800b7ac <HAL_PCD_EP_Open>
 8026b9c:	4603      	mov	r3, r0
 8026b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026ba0:	7bfb      	ldrb	r3, [r7, #15]
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	f000 f91c 	bl	8026de0 <USBD_Get_USB_Status>
 8026ba8:	4603      	mov	r3, r0
 8026baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8026bae:	4618      	mov	r0, r3
 8026bb0:	3710      	adds	r7, #16
 8026bb2:	46bd      	mov	sp, r7
 8026bb4:	bd80      	pop	{r7, pc}

08026bb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026bb6:	b580      	push	{r7, lr}
 8026bb8:	b084      	sub	sp, #16
 8026bba:	af00      	add	r7, sp, #0
 8026bbc:	6078      	str	r0, [r7, #4]
 8026bbe:	460b      	mov	r3, r1
 8026bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026bc2:	2300      	movs	r3, #0
 8026bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026bc6:	2300      	movs	r3, #0
 8026bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8026bca:	687b      	ldr	r3, [r7, #4]
 8026bcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026bd0:	78fa      	ldrb	r2, [r7, #3]
 8026bd2:	4611      	mov	r1, r2
 8026bd4:	4618      	mov	r0, r3
 8026bd6:	f7e4 fe51 	bl	800b87c <HAL_PCD_EP_Close>
 8026bda:	4603      	mov	r3, r0
 8026bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026bde:	7bfb      	ldrb	r3, [r7, #15]
 8026be0:	4618      	mov	r0, r3
 8026be2:	f000 f8fd 	bl	8026de0 <USBD_Get_USB_Status>
 8026be6:	4603      	mov	r3, r0
 8026be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8026bec:	4618      	mov	r0, r3
 8026bee:	3710      	adds	r7, #16
 8026bf0:	46bd      	mov	sp, r7
 8026bf2:	bd80      	pop	{r7, pc}

08026bf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026bf4:	b580      	push	{r7, lr}
 8026bf6:	b084      	sub	sp, #16
 8026bf8:	af00      	add	r7, sp, #0
 8026bfa:	6078      	str	r0, [r7, #4]
 8026bfc:	460b      	mov	r3, r1
 8026bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026c00:	2300      	movs	r3, #0
 8026c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026c04:	2300      	movs	r3, #0
 8026c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8026c08:	687b      	ldr	r3, [r7, #4]
 8026c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026c0e:	78fa      	ldrb	r2, [r7, #3]
 8026c10:	4611      	mov	r1, r2
 8026c12:	4618      	mov	r0, r3
 8026c14:	f7e4 ff0b 	bl	800ba2e <HAL_PCD_EP_SetStall>
 8026c18:	4603      	mov	r3, r0
 8026c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026c1c:	7bfb      	ldrb	r3, [r7, #15]
 8026c1e:	4618      	mov	r0, r3
 8026c20:	f000 f8de 	bl	8026de0 <USBD_Get_USB_Status>
 8026c24:	4603      	mov	r3, r0
 8026c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8026c2a:	4618      	mov	r0, r3
 8026c2c:	3710      	adds	r7, #16
 8026c2e:	46bd      	mov	sp, r7
 8026c30:	bd80      	pop	{r7, pc}

08026c32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026c32:	b580      	push	{r7, lr}
 8026c34:	b084      	sub	sp, #16
 8026c36:	af00      	add	r7, sp, #0
 8026c38:	6078      	str	r0, [r7, #4]
 8026c3a:	460b      	mov	r3, r1
 8026c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026c3e:	2300      	movs	r3, #0
 8026c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026c42:	2300      	movs	r3, #0
 8026c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8026c46:	687b      	ldr	r3, [r7, #4]
 8026c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026c4c:	78fa      	ldrb	r2, [r7, #3]
 8026c4e:	4611      	mov	r1, r2
 8026c50:	4618      	mov	r0, r3
 8026c52:	f7e4 ff50 	bl	800baf6 <HAL_PCD_EP_ClrStall>
 8026c56:	4603      	mov	r3, r0
 8026c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026c5a:	7bfb      	ldrb	r3, [r7, #15]
 8026c5c:	4618      	mov	r0, r3
 8026c5e:	f000 f8bf 	bl	8026de0 <USBD_Get_USB_Status>
 8026c62:	4603      	mov	r3, r0
 8026c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8026c68:	4618      	mov	r0, r3
 8026c6a:	3710      	adds	r7, #16
 8026c6c:	46bd      	mov	sp, r7
 8026c6e:	bd80      	pop	{r7, pc}

08026c70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026c70:	b480      	push	{r7}
 8026c72:	b085      	sub	sp, #20
 8026c74:	af00      	add	r7, sp, #0
 8026c76:	6078      	str	r0, [r7, #4]
 8026c78:	460b      	mov	r3, r1
 8026c7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8026c7c:	687b      	ldr	r3, [r7, #4]
 8026c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026c82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8026c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026c88:	2b00      	cmp	r3, #0
 8026c8a:	da0b      	bge.n	8026ca4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8026c8c:	78fb      	ldrb	r3, [r7, #3]
 8026c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8026c92:	68f9      	ldr	r1, [r7, #12]
 8026c94:	4613      	mov	r3, r2
 8026c96:	00db      	lsls	r3, r3, #3
 8026c98:	4413      	add	r3, r2
 8026c9a:	009b      	lsls	r3, r3, #2
 8026c9c:	440b      	add	r3, r1
 8026c9e:	333e      	adds	r3, #62	; 0x3e
 8026ca0:	781b      	ldrb	r3, [r3, #0]
 8026ca2:	e00b      	b.n	8026cbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8026ca4:	78fb      	ldrb	r3, [r7, #3]
 8026ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8026caa:	68f9      	ldr	r1, [r7, #12]
 8026cac:	4613      	mov	r3, r2
 8026cae:	00db      	lsls	r3, r3, #3
 8026cb0:	4413      	add	r3, r2
 8026cb2:	009b      	lsls	r3, r3, #2
 8026cb4:	440b      	add	r3, r1
 8026cb6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8026cba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8026cbc:	4618      	mov	r0, r3
 8026cbe:	3714      	adds	r7, #20
 8026cc0:	46bd      	mov	sp, r7
 8026cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cc6:	4770      	bx	lr

08026cc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8026cc8:	b580      	push	{r7, lr}
 8026cca:	b084      	sub	sp, #16
 8026ccc:	af00      	add	r7, sp, #0
 8026cce:	6078      	str	r0, [r7, #4]
 8026cd0:	460b      	mov	r3, r1
 8026cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026cd4:	2300      	movs	r3, #0
 8026cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026cd8:	2300      	movs	r3, #0
 8026cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8026cdc:	687b      	ldr	r3, [r7, #4]
 8026cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026ce2:	78fa      	ldrb	r2, [r7, #3]
 8026ce4:	4611      	mov	r1, r2
 8026ce6:	4618      	mov	r0, r3
 8026ce8:	f7e4 fd3b 	bl	800b762 <HAL_PCD_SetAddress>
 8026cec:	4603      	mov	r3, r0
 8026cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026cf0:	7bfb      	ldrb	r3, [r7, #15]
 8026cf2:	4618      	mov	r0, r3
 8026cf4:	f000 f874 	bl	8026de0 <USBD_Get_USB_Status>
 8026cf8:	4603      	mov	r3, r0
 8026cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8026cfe:	4618      	mov	r0, r3
 8026d00:	3710      	adds	r7, #16
 8026d02:	46bd      	mov	sp, r7
 8026d04:	bd80      	pop	{r7, pc}

08026d06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8026d06:	b580      	push	{r7, lr}
 8026d08:	b086      	sub	sp, #24
 8026d0a:	af00      	add	r7, sp, #0
 8026d0c:	60f8      	str	r0, [r7, #12]
 8026d0e:	607a      	str	r2, [r7, #4]
 8026d10:	603b      	str	r3, [r7, #0]
 8026d12:	460b      	mov	r3, r1
 8026d14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026d16:	2300      	movs	r3, #0
 8026d18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026d1a:	2300      	movs	r3, #0
 8026d1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8026d1e:	68fb      	ldr	r3, [r7, #12]
 8026d20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8026d24:	7af9      	ldrb	r1, [r7, #11]
 8026d26:	683b      	ldr	r3, [r7, #0]
 8026d28:	687a      	ldr	r2, [r7, #4]
 8026d2a:	f7e4 fe45 	bl	800b9b8 <HAL_PCD_EP_Transmit>
 8026d2e:	4603      	mov	r3, r0
 8026d30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026d32:	7dfb      	ldrb	r3, [r7, #23]
 8026d34:	4618      	mov	r0, r3
 8026d36:	f000 f853 	bl	8026de0 <USBD_Get_USB_Status>
 8026d3a:	4603      	mov	r3, r0
 8026d3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8026d3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8026d40:	4618      	mov	r0, r3
 8026d42:	3718      	adds	r7, #24
 8026d44:	46bd      	mov	sp, r7
 8026d46:	bd80      	pop	{r7, pc}

08026d48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8026d48:	b580      	push	{r7, lr}
 8026d4a:	b086      	sub	sp, #24
 8026d4c:	af00      	add	r7, sp, #0
 8026d4e:	60f8      	str	r0, [r7, #12]
 8026d50:	607a      	str	r2, [r7, #4]
 8026d52:	603b      	str	r3, [r7, #0]
 8026d54:	460b      	mov	r3, r1
 8026d56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026d58:	2300      	movs	r3, #0
 8026d5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026d5c:	2300      	movs	r3, #0
 8026d5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8026d60:	68fb      	ldr	r3, [r7, #12]
 8026d62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8026d66:	7af9      	ldrb	r1, [r7, #11]
 8026d68:	683b      	ldr	r3, [r7, #0]
 8026d6a:	687a      	ldr	r2, [r7, #4]
 8026d6c:	f7e4 fdd0 	bl	800b910 <HAL_PCD_EP_Receive>
 8026d70:	4603      	mov	r3, r0
 8026d72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026d74:	7dfb      	ldrb	r3, [r7, #23]
 8026d76:	4618      	mov	r0, r3
 8026d78:	f000 f832 	bl	8026de0 <USBD_Get_USB_Status>
 8026d7c:	4603      	mov	r3, r0
 8026d7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8026d80:	7dbb      	ldrb	r3, [r7, #22]
}
 8026d82:	4618      	mov	r0, r3
 8026d84:	3718      	adds	r7, #24
 8026d86:	46bd      	mov	sp, r7
 8026d88:	bd80      	pop	{r7, pc}

08026d8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026d8a:	b580      	push	{r7, lr}
 8026d8c:	b082      	sub	sp, #8
 8026d8e:	af00      	add	r7, sp, #0
 8026d90:	6078      	str	r0, [r7, #4]
 8026d92:	460b      	mov	r3, r1
 8026d94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8026d96:	687b      	ldr	r3, [r7, #4]
 8026d98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026d9c:	78fa      	ldrb	r2, [r7, #3]
 8026d9e:	4611      	mov	r1, r2
 8026da0:	4618      	mov	r0, r3
 8026da2:	f7e4 fdf1 	bl	800b988 <HAL_PCD_EP_GetRxCount>
 8026da6:	4603      	mov	r3, r0
}
 8026da8:	4618      	mov	r0, r3
 8026daa:	3708      	adds	r7, #8
 8026dac:	46bd      	mov	sp, r7
 8026dae:	bd80      	pop	{r7, pc}

08026db0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8026db0:	b480      	push	{r7}
 8026db2:	b083      	sub	sp, #12
 8026db4:	af00      	add	r7, sp, #0
 8026db6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8026db8:	4b03      	ldr	r3, [pc, #12]	; (8026dc8 <USBD_static_malloc+0x18>)
}
 8026dba:	4618      	mov	r0, r3
 8026dbc:	370c      	adds	r7, #12
 8026dbe:	46bd      	mov	sp, r7
 8026dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dc4:	4770      	bx	lr
 8026dc6:	bf00      	nop
 8026dc8:	2400ead4 	.word	0x2400ead4

08026dcc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8026dcc:	b480      	push	{r7}
 8026dce:	b083      	sub	sp, #12
 8026dd0:	af00      	add	r7, sp, #0
 8026dd2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8026dd4:	bf00      	nop
 8026dd6:	370c      	adds	r7, #12
 8026dd8:	46bd      	mov	sp, r7
 8026dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dde:	4770      	bx	lr

08026de0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8026de0:	b480      	push	{r7}
 8026de2:	b085      	sub	sp, #20
 8026de4:	af00      	add	r7, sp, #0
 8026de6:	4603      	mov	r3, r0
 8026de8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026dea:	2300      	movs	r3, #0
 8026dec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8026dee:	79fb      	ldrb	r3, [r7, #7]
 8026df0:	2b03      	cmp	r3, #3
 8026df2:	d817      	bhi.n	8026e24 <USBD_Get_USB_Status+0x44>
 8026df4:	a201      	add	r2, pc, #4	; (adr r2, 8026dfc <USBD_Get_USB_Status+0x1c>)
 8026df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026dfa:	bf00      	nop
 8026dfc:	08026e0d 	.word	0x08026e0d
 8026e00:	08026e13 	.word	0x08026e13
 8026e04:	08026e19 	.word	0x08026e19
 8026e08:	08026e1f 	.word	0x08026e1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8026e0c:	2300      	movs	r3, #0
 8026e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8026e10:	e00b      	b.n	8026e2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8026e12:	2303      	movs	r3, #3
 8026e14:	73fb      	strb	r3, [r7, #15]
    break;
 8026e16:	e008      	b.n	8026e2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8026e18:	2301      	movs	r3, #1
 8026e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8026e1c:	e005      	b.n	8026e2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8026e1e:	2303      	movs	r3, #3
 8026e20:	73fb      	strb	r3, [r7, #15]
    break;
 8026e22:	e002      	b.n	8026e2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8026e24:	2303      	movs	r3, #3
 8026e26:	73fb      	strb	r3, [r7, #15]
    break;
 8026e28:	bf00      	nop
  }
  return usb_status;
 8026e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8026e2c:	4618      	mov	r0, r3
 8026e2e:	3714      	adds	r7, #20
 8026e30:	46bd      	mov	sp, r7
 8026e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e36:	4770      	bx	lr

08026e38 <calloc>:
 8026e38:	4b02      	ldr	r3, [pc, #8]	; (8026e44 <calloc+0xc>)
 8026e3a:	460a      	mov	r2, r1
 8026e3c:	4601      	mov	r1, r0
 8026e3e:	6818      	ldr	r0, [r3, #0]
 8026e40:	f000 ba44 	b.w	80272cc <_calloc_r>
 8026e44:	240004cc 	.word	0x240004cc

08026e48 <__sflush_r>:
 8026e48:	898a      	ldrh	r2, [r1, #12]
 8026e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026e4e:	4605      	mov	r5, r0
 8026e50:	0710      	lsls	r0, r2, #28
 8026e52:	460c      	mov	r4, r1
 8026e54:	d458      	bmi.n	8026f08 <__sflush_r+0xc0>
 8026e56:	684b      	ldr	r3, [r1, #4]
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	dc05      	bgt.n	8026e68 <__sflush_r+0x20>
 8026e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026e5e:	2b00      	cmp	r3, #0
 8026e60:	dc02      	bgt.n	8026e68 <__sflush_r+0x20>
 8026e62:	2000      	movs	r0, #0
 8026e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026e6a:	2e00      	cmp	r6, #0
 8026e6c:	d0f9      	beq.n	8026e62 <__sflush_r+0x1a>
 8026e6e:	2300      	movs	r3, #0
 8026e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026e74:	682f      	ldr	r7, [r5, #0]
 8026e76:	602b      	str	r3, [r5, #0]
 8026e78:	d032      	beq.n	8026ee0 <__sflush_r+0x98>
 8026e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026e7c:	89a3      	ldrh	r3, [r4, #12]
 8026e7e:	075a      	lsls	r2, r3, #29
 8026e80:	d505      	bpl.n	8026e8e <__sflush_r+0x46>
 8026e82:	6863      	ldr	r3, [r4, #4]
 8026e84:	1ac0      	subs	r0, r0, r3
 8026e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026e88:	b10b      	cbz	r3, 8026e8e <__sflush_r+0x46>
 8026e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026e8c:	1ac0      	subs	r0, r0, r3
 8026e8e:	2300      	movs	r3, #0
 8026e90:	4602      	mov	r2, r0
 8026e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026e94:	6a21      	ldr	r1, [r4, #32]
 8026e96:	4628      	mov	r0, r5
 8026e98:	47b0      	blx	r6
 8026e9a:	1c43      	adds	r3, r0, #1
 8026e9c:	89a3      	ldrh	r3, [r4, #12]
 8026e9e:	d106      	bne.n	8026eae <__sflush_r+0x66>
 8026ea0:	6829      	ldr	r1, [r5, #0]
 8026ea2:	291d      	cmp	r1, #29
 8026ea4:	d82c      	bhi.n	8026f00 <__sflush_r+0xb8>
 8026ea6:	4a2a      	ldr	r2, [pc, #168]	; (8026f50 <__sflush_r+0x108>)
 8026ea8:	40ca      	lsrs	r2, r1
 8026eaa:	07d6      	lsls	r6, r2, #31
 8026eac:	d528      	bpl.n	8026f00 <__sflush_r+0xb8>
 8026eae:	2200      	movs	r2, #0
 8026eb0:	6062      	str	r2, [r4, #4]
 8026eb2:	04d9      	lsls	r1, r3, #19
 8026eb4:	6922      	ldr	r2, [r4, #16]
 8026eb6:	6022      	str	r2, [r4, #0]
 8026eb8:	d504      	bpl.n	8026ec4 <__sflush_r+0x7c>
 8026eba:	1c42      	adds	r2, r0, #1
 8026ebc:	d101      	bne.n	8026ec2 <__sflush_r+0x7a>
 8026ebe:	682b      	ldr	r3, [r5, #0]
 8026ec0:	b903      	cbnz	r3, 8026ec4 <__sflush_r+0x7c>
 8026ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8026ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026ec6:	602f      	str	r7, [r5, #0]
 8026ec8:	2900      	cmp	r1, #0
 8026eca:	d0ca      	beq.n	8026e62 <__sflush_r+0x1a>
 8026ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026ed0:	4299      	cmp	r1, r3
 8026ed2:	d002      	beq.n	8026eda <__sflush_r+0x92>
 8026ed4:	4628      	mov	r0, r5
 8026ed6:	f000 fa0f 	bl	80272f8 <_free_r>
 8026eda:	2000      	movs	r0, #0
 8026edc:	6360      	str	r0, [r4, #52]	; 0x34
 8026ede:	e7c1      	b.n	8026e64 <__sflush_r+0x1c>
 8026ee0:	6a21      	ldr	r1, [r4, #32]
 8026ee2:	2301      	movs	r3, #1
 8026ee4:	4628      	mov	r0, r5
 8026ee6:	47b0      	blx	r6
 8026ee8:	1c41      	adds	r1, r0, #1
 8026eea:	d1c7      	bne.n	8026e7c <__sflush_r+0x34>
 8026eec:	682b      	ldr	r3, [r5, #0]
 8026eee:	2b00      	cmp	r3, #0
 8026ef0:	d0c4      	beq.n	8026e7c <__sflush_r+0x34>
 8026ef2:	2b1d      	cmp	r3, #29
 8026ef4:	d001      	beq.n	8026efa <__sflush_r+0xb2>
 8026ef6:	2b16      	cmp	r3, #22
 8026ef8:	d101      	bne.n	8026efe <__sflush_r+0xb6>
 8026efa:	602f      	str	r7, [r5, #0]
 8026efc:	e7b1      	b.n	8026e62 <__sflush_r+0x1a>
 8026efe:	89a3      	ldrh	r3, [r4, #12]
 8026f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026f04:	81a3      	strh	r3, [r4, #12]
 8026f06:	e7ad      	b.n	8026e64 <__sflush_r+0x1c>
 8026f08:	690f      	ldr	r7, [r1, #16]
 8026f0a:	2f00      	cmp	r7, #0
 8026f0c:	d0a9      	beq.n	8026e62 <__sflush_r+0x1a>
 8026f0e:	0793      	lsls	r3, r2, #30
 8026f10:	680e      	ldr	r6, [r1, #0]
 8026f12:	bf08      	it	eq
 8026f14:	694b      	ldreq	r3, [r1, #20]
 8026f16:	600f      	str	r7, [r1, #0]
 8026f18:	bf18      	it	ne
 8026f1a:	2300      	movne	r3, #0
 8026f1c:	eba6 0807 	sub.w	r8, r6, r7
 8026f20:	608b      	str	r3, [r1, #8]
 8026f22:	f1b8 0f00 	cmp.w	r8, #0
 8026f26:	dd9c      	ble.n	8026e62 <__sflush_r+0x1a>
 8026f28:	6a21      	ldr	r1, [r4, #32]
 8026f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026f2c:	4643      	mov	r3, r8
 8026f2e:	463a      	mov	r2, r7
 8026f30:	4628      	mov	r0, r5
 8026f32:	47b0      	blx	r6
 8026f34:	2800      	cmp	r0, #0
 8026f36:	dc06      	bgt.n	8026f46 <__sflush_r+0xfe>
 8026f38:	89a3      	ldrh	r3, [r4, #12]
 8026f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026f3e:	81a3      	strh	r3, [r4, #12]
 8026f40:	f04f 30ff 	mov.w	r0, #4294967295
 8026f44:	e78e      	b.n	8026e64 <__sflush_r+0x1c>
 8026f46:	4407      	add	r7, r0
 8026f48:	eba8 0800 	sub.w	r8, r8, r0
 8026f4c:	e7e9      	b.n	8026f22 <__sflush_r+0xda>
 8026f4e:	bf00      	nop
 8026f50:	20400001 	.word	0x20400001

08026f54 <_fflush_r>:
 8026f54:	b538      	push	{r3, r4, r5, lr}
 8026f56:	690b      	ldr	r3, [r1, #16]
 8026f58:	4605      	mov	r5, r0
 8026f5a:	460c      	mov	r4, r1
 8026f5c:	b913      	cbnz	r3, 8026f64 <_fflush_r+0x10>
 8026f5e:	2500      	movs	r5, #0
 8026f60:	4628      	mov	r0, r5
 8026f62:	bd38      	pop	{r3, r4, r5, pc}
 8026f64:	b118      	cbz	r0, 8026f6e <_fflush_r+0x1a>
 8026f66:	6983      	ldr	r3, [r0, #24]
 8026f68:	b90b      	cbnz	r3, 8026f6e <_fflush_r+0x1a>
 8026f6a:	f000 f899 	bl	80270a0 <__sinit>
 8026f6e:	4b14      	ldr	r3, [pc, #80]	; (8026fc0 <_fflush_r+0x6c>)
 8026f70:	429c      	cmp	r4, r3
 8026f72:	d11b      	bne.n	8026fac <_fflush_r+0x58>
 8026f74:	686c      	ldr	r4, [r5, #4]
 8026f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026f7a:	2b00      	cmp	r3, #0
 8026f7c:	d0ef      	beq.n	8026f5e <_fflush_r+0xa>
 8026f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026f80:	07d0      	lsls	r0, r2, #31
 8026f82:	d404      	bmi.n	8026f8e <_fflush_r+0x3a>
 8026f84:	0599      	lsls	r1, r3, #22
 8026f86:	d402      	bmi.n	8026f8e <_fflush_r+0x3a>
 8026f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026f8a:	f000 f94c 	bl	8027226 <__retarget_lock_acquire_recursive>
 8026f8e:	4628      	mov	r0, r5
 8026f90:	4621      	mov	r1, r4
 8026f92:	f7ff ff59 	bl	8026e48 <__sflush_r>
 8026f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026f98:	07da      	lsls	r2, r3, #31
 8026f9a:	4605      	mov	r5, r0
 8026f9c:	d4e0      	bmi.n	8026f60 <_fflush_r+0xc>
 8026f9e:	89a3      	ldrh	r3, [r4, #12]
 8026fa0:	059b      	lsls	r3, r3, #22
 8026fa2:	d4dd      	bmi.n	8026f60 <_fflush_r+0xc>
 8026fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026fa6:	f000 f93f 	bl	8027228 <__retarget_lock_release_recursive>
 8026faa:	e7d9      	b.n	8026f60 <_fflush_r+0xc>
 8026fac:	4b05      	ldr	r3, [pc, #20]	; (8026fc4 <_fflush_r+0x70>)
 8026fae:	429c      	cmp	r4, r3
 8026fb0:	d101      	bne.n	8026fb6 <_fflush_r+0x62>
 8026fb2:	68ac      	ldr	r4, [r5, #8]
 8026fb4:	e7df      	b.n	8026f76 <_fflush_r+0x22>
 8026fb6:	4b04      	ldr	r3, [pc, #16]	; (8026fc8 <_fflush_r+0x74>)
 8026fb8:	429c      	cmp	r4, r3
 8026fba:	bf08      	it	eq
 8026fbc:	68ec      	ldreq	r4, [r5, #12]
 8026fbe:	e7da      	b.n	8026f76 <_fflush_r+0x22>
 8026fc0:	0802bb84 	.word	0x0802bb84
 8026fc4:	0802bba4 	.word	0x0802bba4
 8026fc8:	0802bb64 	.word	0x0802bb64

08026fcc <fflush>:
 8026fcc:	4601      	mov	r1, r0
 8026fce:	b920      	cbnz	r0, 8026fda <fflush+0xe>
 8026fd0:	4b04      	ldr	r3, [pc, #16]	; (8026fe4 <fflush+0x18>)
 8026fd2:	4905      	ldr	r1, [pc, #20]	; (8026fe8 <fflush+0x1c>)
 8026fd4:	6818      	ldr	r0, [r3, #0]
 8026fd6:	f000 b8e1 	b.w	802719c <_fwalk_reent>
 8026fda:	4b04      	ldr	r3, [pc, #16]	; (8026fec <fflush+0x20>)
 8026fdc:	6818      	ldr	r0, [r3, #0]
 8026fde:	f7ff bfb9 	b.w	8026f54 <_fflush_r>
 8026fe2:	bf00      	nop
 8026fe4:	0802bbc4 	.word	0x0802bbc4
 8026fe8:	08026f55 	.word	0x08026f55
 8026fec:	240004cc 	.word	0x240004cc

08026ff0 <std>:
 8026ff0:	2300      	movs	r3, #0
 8026ff2:	b510      	push	{r4, lr}
 8026ff4:	4604      	mov	r4, r0
 8026ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8026ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026ffe:	6083      	str	r3, [r0, #8]
 8027000:	8181      	strh	r1, [r0, #12]
 8027002:	6643      	str	r3, [r0, #100]	; 0x64
 8027004:	81c2      	strh	r2, [r0, #14]
 8027006:	6183      	str	r3, [r0, #24]
 8027008:	4619      	mov	r1, r3
 802700a:	2208      	movs	r2, #8
 802700c:	305c      	adds	r0, #92	; 0x5c
 802700e:	f000 f955 	bl	80272bc <memset>
 8027012:	4b05      	ldr	r3, [pc, #20]	; (8027028 <std+0x38>)
 8027014:	6263      	str	r3, [r4, #36]	; 0x24
 8027016:	4b05      	ldr	r3, [pc, #20]	; (802702c <std+0x3c>)
 8027018:	62a3      	str	r3, [r4, #40]	; 0x28
 802701a:	4b05      	ldr	r3, [pc, #20]	; (8027030 <std+0x40>)
 802701c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802701e:	4b05      	ldr	r3, [pc, #20]	; (8027034 <std+0x44>)
 8027020:	6224      	str	r4, [r4, #32]
 8027022:	6323      	str	r3, [r4, #48]	; 0x30
 8027024:	bd10      	pop	{r4, pc}
 8027026:	bf00      	nop
 8027028:	08027745 	.word	0x08027745
 802702c:	08027767 	.word	0x08027767
 8027030:	0802779f 	.word	0x0802779f
 8027034:	080277c3 	.word	0x080277c3

08027038 <_cleanup_r>:
 8027038:	4901      	ldr	r1, [pc, #4]	; (8027040 <_cleanup_r+0x8>)
 802703a:	f000 b8af 	b.w	802719c <_fwalk_reent>
 802703e:	bf00      	nop
 8027040:	08026f55 	.word	0x08026f55

08027044 <__sfmoreglue>:
 8027044:	b570      	push	{r4, r5, r6, lr}
 8027046:	2268      	movs	r2, #104	; 0x68
 8027048:	1e4d      	subs	r5, r1, #1
 802704a:	4355      	muls	r5, r2
 802704c:	460e      	mov	r6, r1
 802704e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027052:	f000 f9bd 	bl	80273d0 <_malloc_r>
 8027056:	4604      	mov	r4, r0
 8027058:	b140      	cbz	r0, 802706c <__sfmoreglue+0x28>
 802705a:	2100      	movs	r1, #0
 802705c:	e9c0 1600 	strd	r1, r6, [r0]
 8027060:	300c      	adds	r0, #12
 8027062:	60a0      	str	r0, [r4, #8]
 8027064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027068:	f000 f928 	bl	80272bc <memset>
 802706c:	4620      	mov	r0, r4
 802706e:	bd70      	pop	{r4, r5, r6, pc}

08027070 <__sfp_lock_acquire>:
 8027070:	4801      	ldr	r0, [pc, #4]	; (8027078 <__sfp_lock_acquire+0x8>)
 8027072:	f000 b8d8 	b.w	8027226 <__retarget_lock_acquire_recursive>
 8027076:	bf00      	nop
 8027078:	2400ecf5 	.word	0x2400ecf5

0802707c <__sfp_lock_release>:
 802707c:	4801      	ldr	r0, [pc, #4]	; (8027084 <__sfp_lock_release+0x8>)
 802707e:	f000 b8d3 	b.w	8027228 <__retarget_lock_release_recursive>
 8027082:	bf00      	nop
 8027084:	2400ecf5 	.word	0x2400ecf5

08027088 <__sinit_lock_acquire>:
 8027088:	4801      	ldr	r0, [pc, #4]	; (8027090 <__sinit_lock_acquire+0x8>)
 802708a:	f000 b8cc 	b.w	8027226 <__retarget_lock_acquire_recursive>
 802708e:	bf00      	nop
 8027090:	2400ecf6 	.word	0x2400ecf6

08027094 <__sinit_lock_release>:
 8027094:	4801      	ldr	r0, [pc, #4]	; (802709c <__sinit_lock_release+0x8>)
 8027096:	f000 b8c7 	b.w	8027228 <__retarget_lock_release_recursive>
 802709a:	bf00      	nop
 802709c:	2400ecf6 	.word	0x2400ecf6

080270a0 <__sinit>:
 80270a0:	b510      	push	{r4, lr}
 80270a2:	4604      	mov	r4, r0
 80270a4:	f7ff fff0 	bl	8027088 <__sinit_lock_acquire>
 80270a8:	69a3      	ldr	r3, [r4, #24]
 80270aa:	b11b      	cbz	r3, 80270b4 <__sinit+0x14>
 80270ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80270b0:	f7ff bff0 	b.w	8027094 <__sinit_lock_release>
 80270b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80270b8:	6523      	str	r3, [r4, #80]	; 0x50
 80270ba:	4b13      	ldr	r3, [pc, #76]	; (8027108 <__sinit+0x68>)
 80270bc:	4a13      	ldr	r2, [pc, #76]	; (802710c <__sinit+0x6c>)
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80270c2:	42a3      	cmp	r3, r4
 80270c4:	bf04      	itt	eq
 80270c6:	2301      	moveq	r3, #1
 80270c8:	61a3      	streq	r3, [r4, #24]
 80270ca:	4620      	mov	r0, r4
 80270cc:	f000 f820 	bl	8027110 <__sfp>
 80270d0:	6060      	str	r0, [r4, #4]
 80270d2:	4620      	mov	r0, r4
 80270d4:	f000 f81c 	bl	8027110 <__sfp>
 80270d8:	60a0      	str	r0, [r4, #8]
 80270da:	4620      	mov	r0, r4
 80270dc:	f000 f818 	bl	8027110 <__sfp>
 80270e0:	2200      	movs	r2, #0
 80270e2:	60e0      	str	r0, [r4, #12]
 80270e4:	2104      	movs	r1, #4
 80270e6:	6860      	ldr	r0, [r4, #4]
 80270e8:	f7ff ff82 	bl	8026ff0 <std>
 80270ec:	68a0      	ldr	r0, [r4, #8]
 80270ee:	2201      	movs	r2, #1
 80270f0:	2109      	movs	r1, #9
 80270f2:	f7ff ff7d 	bl	8026ff0 <std>
 80270f6:	68e0      	ldr	r0, [r4, #12]
 80270f8:	2202      	movs	r2, #2
 80270fa:	2112      	movs	r1, #18
 80270fc:	f7ff ff78 	bl	8026ff0 <std>
 8027100:	2301      	movs	r3, #1
 8027102:	61a3      	str	r3, [r4, #24]
 8027104:	e7d2      	b.n	80270ac <__sinit+0xc>
 8027106:	bf00      	nop
 8027108:	0802bbc4 	.word	0x0802bbc4
 802710c:	08027039 	.word	0x08027039

08027110 <__sfp>:
 8027110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027112:	4607      	mov	r7, r0
 8027114:	f7ff ffac 	bl	8027070 <__sfp_lock_acquire>
 8027118:	4b1e      	ldr	r3, [pc, #120]	; (8027194 <__sfp+0x84>)
 802711a:	681e      	ldr	r6, [r3, #0]
 802711c:	69b3      	ldr	r3, [r6, #24]
 802711e:	b913      	cbnz	r3, 8027126 <__sfp+0x16>
 8027120:	4630      	mov	r0, r6
 8027122:	f7ff ffbd 	bl	80270a0 <__sinit>
 8027126:	3648      	adds	r6, #72	; 0x48
 8027128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802712c:	3b01      	subs	r3, #1
 802712e:	d503      	bpl.n	8027138 <__sfp+0x28>
 8027130:	6833      	ldr	r3, [r6, #0]
 8027132:	b30b      	cbz	r3, 8027178 <__sfp+0x68>
 8027134:	6836      	ldr	r6, [r6, #0]
 8027136:	e7f7      	b.n	8027128 <__sfp+0x18>
 8027138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802713c:	b9d5      	cbnz	r5, 8027174 <__sfp+0x64>
 802713e:	4b16      	ldr	r3, [pc, #88]	; (8027198 <__sfp+0x88>)
 8027140:	60e3      	str	r3, [r4, #12]
 8027142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027146:	6665      	str	r5, [r4, #100]	; 0x64
 8027148:	f000 f86c 	bl	8027224 <__retarget_lock_init_recursive>
 802714c:	f7ff ff96 	bl	802707c <__sfp_lock_release>
 8027150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027158:	6025      	str	r5, [r4, #0]
 802715a:	61a5      	str	r5, [r4, #24]
 802715c:	2208      	movs	r2, #8
 802715e:	4629      	mov	r1, r5
 8027160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027164:	f000 f8aa 	bl	80272bc <memset>
 8027168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802716c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027170:	4620      	mov	r0, r4
 8027172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027174:	3468      	adds	r4, #104	; 0x68
 8027176:	e7d9      	b.n	802712c <__sfp+0x1c>
 8027178:	2104      	movs	r1, #4
 802717a:	4638      	mov	r0, r7
 802717c:	f7ff ff62 	bl	8027044 <__sfmoreglue>
 8027180:	4604      	mov	r4, r0
 8027182:	6030      	str	r0, [r6, #0]
 8027184:	2800      	cmp	r0, #0
 8027186:	d1d5      	bne.n	8027134 <__sfp+0x24>
 8027188:	f7ff ff78 	bl	802707c <__sfp_lock_release>
 802718c:	230c      	movs	r3, #12
 802718e:	603b      	str	r3, [r7, #0]
 8027190:	e7ee      	b.n	8027170 <__sfp+0x60>
 8027192:	bf00      	nop
 8027194:	0802bbc4 	.word	0x0802bbc4
 8027198:	ffff0001 	.word	0xffff0001

0802719c <_fwalk_reent>:
 802719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80271a0:	4606      	mov	r6, r0
 80271a2:	4688      	mov	r8, r1
 80271a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80271a8:	2700      	movs	r7, #0
 80271aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80271ae:	f1b9 0901 	subs.w	r9, r9, #1
 80271b2:	d505      	bpl.n	80271c0 <_fwalk_reent+0x24>
 80271b4:	6824      	ldr	r4, [r4, #0]
 80271b6:	2c00      	cmp	r4, #0
 80271b8:	d1f7      	bne.n	80271aa <_fwalk_reent+0xe>
 80271ba:	4638      	mov	r0, r7
 80271bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80271c0:	89ab      	ldrh	r3, [r5, #12]
 80271c2:	2b01      	cmp	r3, #1
 80271c4:	d907      	bls.n	80271d6 <_fwalk_reent+0x3a>
 80271c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80271ca:	3301      	adds	r3, #1
 80271cc:	d003      	beq.n	80271d6 <_fwalk_reent+0x3a>
 80271ce:	4629      	mov	r1, r5
 80271d0:	4630      	mov	r0, r6
 80271d2:	47c0      	blx	r8
 80271d4:	4307      	orrs	r7, r0
 80271d6:	3568      	adds	r5, #104	; 0x68
 80271d8:	e7e9      	b.n	80271ae <_fwalk_reent+0x12>
	...

080271dc <__libc_init_array>:
 80271dc:	b570      	push	{r4, r5, r6, lr}
 80271de:	4d0d      	ldr	r5, [pc, #52]	; (8027214 <__libc_init_array+0x38>)
 80271e0:	4c0d      	ldr	r4, [pc, #52]	; (8027218 <__libc_init_array+0x3c>)
 80271e2:	1b64      	subs	r4, r4, r5
 80271e4:	10a4      	asrs	r4, r4, #2
 80271e6:	2600      	movs	r6, #0
 80271e8:	42a6      	cmp	r6, r4
 80271ea:	d109      	bne.n	8027200 <__libc_init_array+0x24>
 80271ec:	4d0b      	ldr	r5, [pc, #44]	; (802721c <__libc_init_array+0x40>)
 80271ee:	4c0c      	ldr	r4, [pc, #48]	; (8027220 <__libc_init_array+0x44>)
 80271f0:	f000 fff0 	bl	80281d4 <_init>
 80271f4:	1b64      	subs	r4, r4, r5
 80271f6:	10a4      	asrs	r4, r4, #2
 80271f8:	2600      	movs	r6, #0
 80271fa:	42a6      	cmp	r6, r4
 80271fc:	d105      	bne.n	802720a <__libc_init_array+0x2e>
 80271fe:	bd70      	pop	{r4, r5, r6, pc}
 8027200:	f855 3b04 	ldr.w	r3, [r5], #4
 8027204:	4798      	blx	r3
 8027206:	3601      	adds	r6, #1
 8027208:	e7ee      	b.n	80271e8 <__libc_init_array+0xc>
 802720a:	f855 3b04 	ldr.w	r3, [r5], #4
 802720e:	4798      	blx	r3
 8027210:	3601      	adds	r6, #1
 8027212:	e7f2      	b.n	80271fa <__libc_init_array+0x1e>
 8027214:	0802bcac 	.word	0x0802bcac
 8027218:	0802bcac 	.word	0x0802bcac
 802721c:	0802bcac 	.word	0x0802bcac
 8027220:	0802bcb0 	.word	0x0802bcb0

08027224 <__retarget_lock_init_recursive>:
 8027224:	4770      	bx	lr

08027226 <__retarget_lock_acquire_recursive>:
 8027226:	4770      	bx	lr

08027228 <__retarget_lock_release_recursive>:
 8027228:	4770      	bx	lr
	...

0802722c <malloc>:
 802722c:	4b02      	ldr	r3, [pc, #8]	; (8027238 <malloc+0xc>)
 802722e:	4601      	mov	r1, r0
 8027230:	6818      	ldr	r0, [r3, #0]
 8027232:	f000 b8cd 	b.w	80273d0 <_malloc_r>
 8027236:	bf00      	nop
 8027238:	240004cc 	.word	0x240004cc

0802723c <free>:
 802723c:	4b02      	ldr	r3, [pc, #8]	; (8027248 <free+0xc>)
 802723e:	4601      	mov	r1, r0
 8027240:	6818      	ldr	r0, [r3, #0]
 8027242:	f000 b859 	b.w	80272f8 <_free_r>
 8027246:	bf00      	nop
 8027248:	240004cc 	.word	0x240004cc

0802724c <memcmp>:
 802724c:	b510      	push	{r4, lr}
 802724e:	3901      	subs	r1, #1
 8027250:	4402      	add	r2, r0
 8027252:	4290      	cmp	r0, r2
 8027254:	d101      	bne.n	802725a <memcmp+0xe>
 8027256:	2000      	movs	r0, #0
 8027258:	e005      	b.n	8027266 <memcmp+0x1a>
 802725a:	7803      	ldrb	r3, [r0, #0]
 802725c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8027260:	42a3      	cmp	r3, r4
 8027262:	d001      	beq.n	8027268 <memcmp+0x1c>
 8027264:	1b18      	subs	r0, r3, r4
 8027266:	bd10      	pop	{r4, pc}
 8027268:	3001      	adds	r0, #1
 802726a:	e7f2      	b.n	8027252 <memcmp+0x6>

0802726c <memcpy>:
 802726c:	440a      	add	r2, r1
 802726e:	4291      	cmp	r1, r2
 8027270:	f100 33ff 	add.w	r3, r0, #4294967295
 8027274:	d100      	bne.n	8027278 <memcpy+0xc>
 8027276:	4770      	bx	lr
 8027278:	b510      	push	{r4, lr}
 802727a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802727e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027282:	4291      	cmp	r1, r2
 8027284:	d1f9      	bne.n	802727a <memcpy+0xe>
 8027286:	bd10      	pop	{r4, pc}

08027288 <memmove>:
 8027288:	4288      	cmp	r0, r1
 802728a:	b510      	push	{r4, lr}
 802728c:	eb01 0402 	add.w	r4, r1, r2
 8027290:	d902      	bls.n	8027298 <memmove+0x10>
 8027292:	4284      	cmp	r4, r0
 8027294:	4623      	mov	r3, r4
 8027296:	d807      	bhi.n	80272a8 <memmove+0x20>
 8027298:	1e43      	subs	r3, r0, #1
 802729a:	42a1      	cmp	r1, r4
 802729c:	d008      	beq.n	80272b0 <memmove+0x28>
 802729e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80272a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80272a6:	e7f8      	b.n	802729a <memmove+0x12>
 80272a8:	4402      	add	r2, r0
 80272aa:	4601      	mov	r1, r0
 80272ac:	428a      	cmp	r2, r1
 80272ae:	d100      	bne.n	80272b2 <memmove+0x2a>
 80272b0:	bd10      	pop	{r4, pc}
 80272b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80272b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80272ba:	e7f7      	b.n	80272ac <memmove+0x24>

080272bc <memset>:
 80272bc:	4402      	add	r2, r0
 80272be:	4603      	mov	r3, r0
 80272c0:	4293      	cmp	r3, r2
 80272c2:	d100      	bne.n	80272c6 <memset+0xa>
 80272c4:	4770      	bx	lr
 80272c6:	f803 1b01 	strb.w	r1, [r3], #1
 80272ca:	e7f9      	b.n	80272c0 <memset+0x4>

080272cc <_calloc_r>:
 80272cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80272ce:	fba1 2402 	umull	r2, r4, r1, r2
 80272d2:	b94c      	cbnz	r4, 80272e8 <_calloc_r+0x1c>
 80272d4:	4611      	mov	r1, r2
 80272d6:	9201      	str	r2, [sp, #4]
 80272d8:	f000 f87a 	bl	80273d0 <_malloc_r>
 80272dc:	9a01      	ldr	r2, [sp, #4]
 80272de:	4605      	mov	r5, r0
 80272e0:	b930      	cbnz	r0, 80272f0 <_calloc_r+0x24>
 80272e2:	4628      	mov	r0, r5
 80272e4:	b003      	add	sp, #12
 80272e6:	bd30      	pop	{r4, r5, pc}
 80272e8:	220c      	movs	r2, #12
 80272ea:	6002      	str	r2, [r0, #0]
 80272ec:	2500      	movs	r5, #0
 80272ee:	e7f8      	b.n	80272e2 <_calloc_r+0x16>
 80272f0:	4621      	mov	r1, r4
 80272f2:	f7ff ffe3 	bl	80272bc <memset>
 80272f6:	e7f4      	b.n	80272e2 <_calloc_r+0x16>

080272f8 <_free_r>:
 80272f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80272fa:	2900      	cmp	r1, #0
 80272fc:	d044      	beq.n	8027388 <_free_r+0x90>
 80272fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027302:	9001      	str	r0, [sp, #4]
 8027304:	2b00      	cmp	r3, #0
 8027306:	f1a1 0404 	sub.w	r4, r1, #4
 802730a:	bfb8      	it	lt
 802730c:	18e4      	addlt	r4, r4, r3
 802730e:	f000 fbe7 	bl	8027ae0 <__malloc_lock>
 8027312:	4a1e      	ldr	r2, [pc, #120]	; (802738c <_free_r+0x94>)
 8027314:	9801      	ldr	r0, [sp, #4]
 8027316:	6813      	ldr	r3, [r2, #0]
 8027318:	b933      	cbnz	r3, 8027328 <_free_r+0x30>
 802731a:	6063      	str	r3, [r4, #4]
 802731c:	6014      	str	r4, [r2, #0]
 802731e:	b003      	add	sp, #12
 8027320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027324:	f000 bbe2 	b.w	8027aec <__malloc_unlock>
 8027328:	42a3      	cmp	r3, r4
 802732a:	d908      	bls.n	802733e <_free_r+0x46>
 802732c:	6825      	ldr	r5, [r4, #0]
 802732e:	1961      	adds	r1, r4, r5
 8027330:	428b      	cmp	r3, r1
 8027332:	bf01      	itttt	eq
 8027334:	6819      	ldreq	r1, [r3, #0]
 8027336:	685b      	ldreq	r3, [r3, #4]
 8027338:	1949      	addeq	r1, r1, r5
 802733a:	6021      	streq	r1, [r4, #0]
 802733c:	e7ed      	b.n	802731a <_free_r+0x22>
 802733e:	461a      	mov	r2, r3
 8027340:	685b      	ldr	r3, [r3, #4]
 8027342:	b10b      	cbz	r3, 8027348 <_free_r+0x50>
 8027344:	42a3      	cmp	r3, r4
 8027346:	d9fa      	bls.n	802733e <_free_r+0x46>
 8027348:	6811      	ldr	r1, [r2, #0]
 802734a:	1855      	adds	r5, r2, r1
 802734c:	42a5      	cmp	r5, r4
 802734e:	d10b      	bne.n	8027368 <_free_r+0x70>
 8027350:	6824      	ldr	r4, [r4, #0]
 8027352:	4421      	add	r1, r4
 8027354:	1854      	adds	r4, r2, r1
 8027356:	42a3      	cmp	r3, r4
 8027358:	6011      	str	r1, [r2, #0]
 802735a:	d1e0      	bne.n	802731e <_free_r+0x26>
 802735c:	681c      	ldr	r4, [r3, #0]
 802735e:	685b      	ldr	r3, [r3, #4]
 8027360:	6053      	str	r3, [r2, #4]
 8027362:	4421      	add	r1, r4
 8027364:	6011      	str	r1, [r2, #0]
 8027366:	e7da      	b.n	802731e <_free_r+0x26>
 8027368:	d902      	bls.n	8027370 <_free_r+0x78>
 802736a:	230c      	movs	r3, #12
 802736c:	6003      	str	r3, [r0, #0]
 802736e:	e7d6      	b.n	802731e <_free_r+0x26>
 8027370:	6825      	ldr	r5, [r4, #0]
 8027372:	1961      	adds	r1, r4, r5
 8027374:	428b      	cmp	r3, r1
 8027376:	bf04      	itt	eq
 8027378:	6819      	ldreq	r1, [r3, #0]
 802737a:	685b      	ldreq	r3, [r3, #4]
 802737c:	6063      	str	r3, [r4, #4]
 802737e:	bf04      	itt	eq
 8027380:	1949      	addeq	r1, r1, r5
 8027382:	6021      	streq	r1, [r4, #0]
 8027384:	6054      	str	r4, [r2, #4]
 8027386:	e7ca      	b.n	802731e <_free_r+0x26>
 8027388:	b003      	add	sp, #12
 802738a:	bd30      	pop	{r4, r5, pc}
 802738c:	2400ecf8 	.word	0x2400ecf8

08027390 <sbrk_aligned>:
 8027390:	b570      	push	{r4, r5, r6, lr}
 8027392:	4e0e      	ldr	r6, [pc, #56]	; (80273cc <sbrk_aligned+0x3c>)
 8027394:	460c      	mov	r4, r1
 8027396:	6831      	ldr	r1, [r6, #0]
 8027398:	4605      	mov	r5, r0
 802739a:	b911      	cbnz	r1, 80273a2 <sbrk_aligned+0x12>
 802739c:	f000 f9c2 	bl	8027724 <_sbrk_r>
 80273a0:	6030      	str	r0, [r6, #0]
 80273a2:	4621      	mov	r1, r4
 80273a4:	4628      	mov	r0, r5
 80273a6:	f000 f9bd 	bl	8027724 <_sbrk_r>
 80273aa:	1c43      	adds	r3, r0, #1
 80273ac:	d00a      	beq.n	80273c4 <sbrk_aligned+0x34>
 80273ae:	1cc4      	adds	r4, r0, #3
 80273b0:	f024 0403 	bic.w	r4, r4, #3
 80273b4:	42a0      	cmp	r0, r4
 80273b6:	d007      	beq.n	80273c8 <sbrk_aligned+0x38>
 80273b8:	1a21      	subs	r1, r4, r0
 80273ba:	4628      	mov	r0, r5
 80273bc:	f000 f9b2 	bl	8027724 <_sbrk_r>
 80273c0:	3001      	adds	r0, #1
 80273c2:	d101      	bne.n	80273c8 <sbrk_aligned+0x38>
 80273c4:	f04f 34ff 	mov.w	r4, #4294967295
 80273c8:	4620      	mov	r0, r4
 80273ca:	bd70      	pop	{r4, r5, r6, pc}
 80273cc:	2400ecfc 	.word	0x2400ecfc

080273d0 <_malloc_r>:
 80273d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273d4:	1ccd      	adds	r5, r1, #3
 80273d6:	f025 0503 	bic.w	r5, r5, #3
 80273da:	3508      	adds	r5, #8
 80273dc:	2d0c      	cmp	r5, #12
 80273de:	bf38      	it	cc
 80273e0:	250c      	movcc	r5, #12
 80273e2:	2d00      	cmp	r5, #0
 80273e4:	4607      	mov	r7, r0
 80273e6:	db01      	blt.n	80273ec <_malloc_r+0x1c>
 80273e8:	42a9      	cmp	r1, r5
 80273ea:	d905      	bls.n	80273f8 <_malloc_r+0x28>
 80273ec:	230c      	movs	r3, #12
 80273ee:	603b      	str	r3, [r7, #0]
 80273f0:	2600      	movs	r6, #0
 80273f2:	4630      	mov	r0, r6
 80273f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80273f8:	4e2e      	ldr	r6, [pc, #184]	; (80274b4 <_malloc_r+0xe4>)
 80273fa:	f000 fb71 	bl	8027ae0 <__malloc_lock>
 80273fe:	6833      	ldr	r3, [r6, #0]
 8027400:	461c      	mov	r4, r3
 8027402:	bb34      	cbnz	r4, 8027452 <_malloc_r+0x82>
 8027404:	4629      	mov	r1, r5
 8027406:	4638      	mov	r0, r7
 8027408:	f7ff ffc2 	bl	8027390 <sbrk_aligned>
 802740c:	1c43      	adds	r3, r0, #1
 802740e:	4604      	mov	r4, r0
 8027410:	d14d      	bne.n	80274ae <_malloc_r+0xde>
 8027412:	6834      	ldr	r4, [r6, #0]
 8027414:	4626      	mov	r6, r4
 8027416:	2e00      	cmp	r6, #0
 8027418:	d140      	bne.n	802749c <_malloc_r+0xcc>
 802741a:	6823      	ldr	r3, [r4, #0]
 802741c:	4631      	mov	r1, r6
 802741e:	4638      	mov	r0, r7
 8027420:	eb04 0803 	add.w	r8, r4, r3
 8027424:	f000 f97e 	bl	8027724 <_sbrk_r>
 8027428:	4580      	cmp	r8, r0
 802742a:	d13a      	bne.n	80274a2 <_malloc_r+0xd2>
 802742c:	6821      	ldr	r1, [r4, #0]
 802742e:	3503      	adds	r5, #3
 8027430:	1a6d      	subs	r5, r5, r1
 8027432:	f025 0503 	bic.w	r5, r5, #3
 8027436:	3508      	adds	r5, #8
 8027438:	2d0c      	cmp	r5, #12
 802743a:	bf38      	it	cc
 802743c:	250c      	movcc	r5, #12
 802743e:	4629      	mov	r1, r5
 8027440:	4638      	mov	r0, r7
 8027442:	f7ff ffa5 	bl	8027390 <sbrk_aligned>
 8027446:	3001      	adds	r0, #1
 8027448:	d02b      	beq.n	80274a2 <_malloc_r+0xd2>
 802744a:	6823      	ldr	r3, [r4, #0]
 802744c:	442b      	add	r3, r5
 802744e:	6023      	str	r3, [r4, #0]
 8027450:	e00e      	b.n	8027470 <_malloc_r+0xa0>
 8027452:	6822      	ldr	r2, [r4, #0]
 8027454:	1b52      	subs	r2, r2, r5
 8027456:	d41e      	bmi.n	8027496 <_malloc_r+0xc6>
 8027458:	2a0b      	cmp	r2, #11
 802745a:	d916      	bls.n	802748a <_malloc_r+0xba>
 802745c:	1961      	adds	r1, r4, r5
 802745e:	42a3      	cmp	r3, r4
 8027460:	6025      	str	r5, [r4, #0]
 8027462:	bf18      	it	ne
 8027464:	6059      	strne	r1, [r3, #4]
 8027466:	6863      	ldr	r3, [r4, #4]
 8027468:	bf08      	it	eq
 802746a:	6031      	streq	r1, [r6, #0]
 802746c:	5162      	str	r2, [r4, r5]
 802746e:	604b      	str	r3, [r1, #4]
 8027470:	4638      	mov	r0, r7
 8027472:	f104 060b 	add.w	r6, r4, #11
 8027476:	f000 fb39 	bl	8027aec <__malloc_unlock>
 802747a:	f026 0607 	bic.w	r6, r6, #7
 802747e:	1d23      	adds	r3, r4, #4
 8027480:	1af2      	subs	r2, r6, r3
 8027482:	d0b6      	beq.n	80273f2 <_malloc_r+0x22>
 8027484:	1b9b      	subs	r3, r3, r6
 8027486:	50a3      	str	r3, [r4, r2]
 8027488:	e7b3      	b.n	80273f2 <_malloc_r+0x22>
 802748a:	6862      	ldr	r2, [r4, #4]
 802748c:	42a3      	cmp	r3, r4
 802748e:	bf0c      	ite	eq
 8027490:	6032      	streq	r2, [r6, #0]
 8027492:	605a      	strne	r2, [r3, #4]
 8027494:	e7ec      	b.n	8027470 <_malloc_r+0xa0>
 8027496:	4623      	mov	r3, r4
 8027498:	6864      	ldr	r4, [r4, #4]
 802749a:	e7b2      	b.n	8027402 <_malloc_r+0x32>
 802749c:	4634      	mov	r4, r6
 802749e:	6876      	ldr	r6, [r6, #4]
 80274a0:	e7b9      	b.n	8027416 <_malloc_r+0x46>
 80274a2:	230c      	movs	r3, #12
 80274a4:	603b      	str	r3, [r7, #0]
 80274a6:	4638      	mov	r0, r7
 80274a8:	f000 fb20 	bl	8027aec <__malloc_unlock>
 80274ac:	e7a1      	b.n	80273f2 <_malloc_r+0x22>
 80274ae:	6025      	str	r5, [r4, #0]
 80274b0:	e7de      	b.n	8027470 <_malloc_r+0xa0>
 80274b2:	bf00      	nop
 80274b4:	2400ecf8 	.word	0x2400ecf8

080274b8 <iprintf>:
 80274b8:	b40f      	push	{r0, r1, r2, r3}
 80274ba:	4b0a      	ldr	r3, [pc, #40]	; (80274e4 <iprintf+0x2c>)
 80274bc:	b513      	push	{r0, r1, r4, lr}
 80274be:	681c      	ldr	r4, [r3, #0]
 80274c0:	b124      	cbz	r4, 80274cc <iprintf+0x14>
 80274c2:	69a3      	ldr	r3, [r4, #24]
 80274c4:	b913      	cbnz	r3, 80274cc <iprintf+0x14>
 80274c6:	4620      	mov	r0, r4
 80274c8:	f7ff fdea 	bl	80270a0 <__sinit>
 80274cc:	ab05      	add	r3, sp, #20
 80274ce:	9a04      	ldr	r2, [sp, #16]
 80274d0:	68a1      	ldr	r1, [r4, #8]
 80274d2:	9301      	str	r3, [sp, #4]
 80274d4:	4620      	mov	r0, r4
 80274d6:	f000 fb39 	bl	8027b4c <_vfiprintf_r>
 80274da:	b002      	add	sp, #8
 80274dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80274e0:	b004      	add	sp, #16
 80274e2:	4770      	bx	lr
 80274e4:	240004cc 	.word	0x240004cc

080274e8 <_puts_r>:
 80274e8:	b570      	push	{r4, r5, r6, lr}
 80274ea:	460e      	mov	r6, r1
 80274ec:	4605      	mov	r5, r0
 80274ee:	b118      	cbz	r0, 80274f8 <_puts_r+0x10>
 80274f0:	6983      	ldr	r3, [r0, #24]
 80274f2:	b90b      	cbnz	r3, 80274f8 <_puts_r+0x10>
 80274f4:	f7ff fdd4 	bl	80270a0 <__sinit>
 80274f8:	69ab      	ldr	r3, [r5, #24]
 80274fa:	68ac      	ldr	r4, [r5, #8]
 80274fc:	b913      	cbnz	r3, 8027504 <_puts_r+0x1c>
 80274fe:	4628      	mov	r0, r5
 8027500:	f7ff fdce 	bl	80270a0 <__sinit>
 8027504:	4b2c      	ldr	r3, [pc, #176]	; (80275b8 <_puts_r+0xd0>)
 8027506:	429c      	cmp	r4, r3
 8027508:	d120      	bne.n	802754c <_puts_r+0x64>
 802750a:	686c      	ldr	r4, [r5, #4]
 802750c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802750e:	07db      	lsls	r3, r3, #31
 8027510:	d405      	bmi.n	802751e <_puts_r+0x36>
 8027512:	89a3      	ldrh	r3, [r4, #12]
 8027514:	0598      	lsls	r0, r3, #22
 8027516:	d402      	bmi.n	802751e <_puts_r+0x36>
 8027518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802751a:	f7ff fe84 	bl	8027226 <__retarget_lock_acquire_recursive>
 802751e:	89a3      	ldrh	r3, [r4, #12]
 8027520:	0719      	lsls	r1, r3, #28
 8027522:	d51d      	bpl.n	8027560 <_puts_r+0x78>
 8027524:	6923      	ldr	r3, [r4, #16]
 8027526:	b1db      	cbz	r3, 8027560 <_puts_r+0x78>
 8027528:	3e01      	subs	r6, #1
 802752a:	68a3      	ldr	r3, [r4, #8]
 802752c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8027530:	3b01      	subs	r3, #1
 8027532:	60a3      	str	r3, [r4, #8]
 8027534:	bb39      	cbnz	r1, 8027586 <_puts_r+0x9e>
 8027536:	2b00      	cmp	r3, #0
 8027538:	da38      	bge.n	80275ac <_puts_r+0xc4>
 802753a:	4622      	mov	r2, r4
 802753c:	210a      	movs	r1, #10
 802753e:	4628      	mov	r0, r5
 8027540:	f000 f944 	bl	80277cc <__swbuf_r>
 8027544:	3001      	adds	r0, #1
 8027546:	d011      	beq.n	802756c <_puts_r+0x84>
 8027548:	250a      	movs	r5, #10
 802754a:	e011      	b.n	8027570 <_puts_r+0x88>
 802754c:	4b1b      	ldr	r3, [pc, #108]	; (80275bc <_puts_r+0xd4>)
 802754e:	429c      	cmp	r4, r3
 8027550:	d101      	bne.n	8027556 <_puts_r+0x6e>
 8027552:	68ac      	ldr	r4, [r5, #8]
 8027554:	e7da      	b.n	802750c <_puts_r+0x24>
 8027556:	4b1a      	ldr	r3, [pc, #104]	; (80275c0 <_puts_r+0xd8>)
 8027558:	429c      	cmp	r4, r3
 802755a:	bf08      	it	eq
 802755c:	68ec      	ldreq	r4, [r5, #12]
 802755e:	e7d5      	b.n	802750c <_puts_r+0x24>
 8027560:	4621      	mov	r1, r4
 8027562:	4628      	mov	r0, r5
 8027564:	f000 f996 	bl	8027894 <__swsetup_r>
 8027568:	2800      	cmp	r0, #0
 802756a:	d0dd      	beq.n	8027528 <_puts_r+0x40>
 802756c:	f04f 35ff 	mov.w	r5, #4294967295
 8027570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027572:	07da      	lsls	r2, r3, #31
 8027574:	d405      	bmi.n	8027582 <_puts_r+0x9a>
 8027576:	89a3      	ldrh	r3, [r4, #12]
 8027578:	059b      	lsls	r3, r3, #22
 802757a:	d402      	bmi.n	8027582 <_puts_r+0x9a>
 802757c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802757e:	f7ff fe53 	bl	8027228 <__retarget_lock_release_recursive>
 8027582:	4628      	mov	r0, r5
 8027584:	bd70      	pop	{r4, r5, r6, pc}
 8027586:	2b00      	cmp	r3, #0
 8027588:	da04      	bge.n	8027594 <_puts_r+0xac>
 802758a:	69a2      	ldr	r2, [r4, #24]
 802758c:	429a      	cmp	r2, r3
 802758e:	dc06      	bgt.n	802759e <_puts_r+0xb6>
 8027590:	290a      	cmp	r1, #10
 8027592:	d004      	beq.n	802759e <_puts_r+0xb6>
 8027594:	6823      	ldr	r3, [r4, #0]
 8027596:	1c5a      	adds	r2, r3, #1
 8027598:	6022      	str	r2, [r4, #0]
 802759a:	7019      	strb	r1, [r3, #0]
 802759c:	e7c5      	b.n	802752a <_puts_r+0x42>
 802759e:	4622      	mov	r2, r4
 80275a0:	4628      	mov	r0, r5
 80275a2:	f000 f913 	bl	80277cc <__swbuf_r>
 80275a6:	3001      	adds	r0, #1
 80275a8:	d1bf      	bne.n	802752a <_puts_r+0x42>
 80275aa:	e7df      	b.n	802756c <_puts_r+0x84>
 80275ac:	6823      	ldr	r3, [r4, #0]
 80275ae:	250a      	movs	r5, #10
 80275b0:	1c5a      	adds	r2, r3, #1
 80275b2:	6022      	str	r2, [r4, #0]
 80275b4:	701d      	strb	r5, [r3, #0]
 80275b6:	e7db      	b.n	8027570 <_puts_r+0x88>
 80275b8:	0802bb84 	.word	0x0802bb84
 80275bc:	0802bba4 	.word	0x0802bba4
 80275c0:	0802bb64 	.word	0x0802bb64

080275c4 <puts>:
 80275c4:	4b02      	ldr	r3, [pc, #8]	; (80275d0 <puts+0xc>)
 80275c6:	4601      	mov	r1, r0
 80275c8:	6818      	ldr	r0, [r3, #0]
 80275ca:	f7ff bf8d 	b.w	80274e8 <_puts_r>
 80275ce:	bf00      	nop
 80275d0:	240004cc 	.word	0x240004cc

080275d4 <rand>:
 80275d4:	4b16      	ldr	r3, [pc, #88]	; (8027630 <rand+0x5c>)
 80275d6:	b510      	push	{r4, lr}
 80275d8:	681c      	ldr	r4, [r3, #0]
 80275da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80275dc:	b9b3      	cbnz	r3, 802760c <rand+0x38>
 80275de:	2018      	movs	r0, #24
 80275e0:	f7ff fe24 	bl	802722c <malloc>
 80275e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80275e6:	b928      	cbnz	r0, 80275f4 <rand+0x20>
 80275e8:	4602      	mov	r2, r0
 80275ea:	4b12      	ldr	r3, [pc, #72]	; (8027634 <rand+0x60>)
 80275ec:	4812      	ldr	r0, [pc, #72]	; (8027638 <rand+0x64>)
 80275ee:	214e      	movs	r1, #78	; 0x4e
 80275f0:	f000 f9be 	bl	8027970 <__assert_func>
 80275f4:	4a11      	ldr	r2, [pc, #68]	; (802763c <rand+0x68>)
 80275f6:	4b12      	ldr	r3, [pc, #72]	; (8027640 <rand+0x6c>)
 80275f8:	e9c0 2300 	strd	r2, r3, [r0]
 80275fc:	4b11      	ldr	r3, [pc, #68]	; (8027644 <rand+0x70>)
 80275fe:	6083      	str	r3, [r0, #8]
 8027600:	230b      	movs	r3, #11
 8027602:	8183      	strh	r3, [r0, #12]
 8027604:	2201      	movs	r2, #1
 8027606:	2300      	movs	r3, #0
 8027608:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802760c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802760e:	4a0e      	ldr	r2, [pc, #56]	; (8027648 <rand+0x74>)
 8027610:	6920      	ldr	r0, [r4, #16]
 8027612:	6963      	ldr	r3, [r4, #20]
 8027614:	490d      	ldr	r1, [pc, #52]	; (802764c <rand+0x78>)
 8027616:	4342      	muls	r2, r0
 8027618:	fb01 2203 	mla	r2, r1, r3, r2
 802761c:	fba0 0101 	umull	r0, r1, r0, r1
 8027620:	1c43      	adds	r3, r0, #1
 8027622:	eb42 0001 	adc.w	r0, r2, r1
 8027626:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802762a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802762e:	bd10      	pop	{r4, pc}
 8027630:	240004cc 	.word	0x240004cc
 8027634:	0802bbc8 	.word	0x0802bbc8
 8027638:	0802bbdf 	.word	0x0802bbdf
 802763c:	abcd330e 	.word	0xabcd330e
 8027640:	e66d1234 	.word	0xe66d1234
 8027644:	0005deec 	.word	0x0005deec
 8027648:	5851f42d 	.word	0x5851f42d
 802764c:	4c957f2d 	.word	0x4c957f2d

08027650 <cleanup_glue>:
 8027650:	b538      	push	{r3, r4, r5, lr}
 8027652:	460c      	mov	r4, r1
 8027654:	6809      	ldr	r1, [r1, #0]
 8027656:	4605      	mov	r5, r0
 8027658:	b109      	cbz	r1, 802765e <cleanup_glue+0xe>
 802765a:	f7ff fff9 	bl	8027650 <cleanup_glue>
 802765e:	4621      	mov	r1, r4
 8027660:	4628      	mov	r0, r5
 8027662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027666:	f7ff be47 	b.w	80272f8 <_free_r>
	...

0802766c <_reclaim_reent>:
 802766c:	4b2c      	ldr	r3, [pc, #176]	; (8027720 <_reclaim_reent+0xb4>)
 802766e:	681b      	ldr	r3, [r3, #0]
 8027670:	4283      	cmp	r3, r0
 8027672:	b570      	push	{r4, r5, r6, lr}
 8027674:	4604      	mov	r4, r0
 8027676:	d051      	beq.n	802771c <_reclaim_reent+0xb0>
 8027678:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802767a:	b143      	cbz	r3, 802768e <_reclaim_reent+0x22>
 802767c:	68db      	ldr	r3, [r3, #12]
 802767e:	2b00      	cmp	r3, #0
 8027680:	d14a      	bne.n	8027718 <_reclaim_reent+0xac>
 8027682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027684:	6819      	ldr	r1, [r3, #0]
 8027686:	b111      	cbz	r1, 802768e <_reclaim_reent+0x22>
 8027688:	4620      	mov	r0, r4
 802768a:	f7ff fe35 	bl	80272f8 <_free_r>
 802768e:	6961      	ldr	r1, [r4, #20]
 8027690:	b111      	cbz	r1, 8027698 <_reclaim_reent+0x2c>
 8027692:	4620      	mov	r0, r4
 8027694:	f7ff fe30 	bl	80272f8 <_free_r>
 8027698:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802769a:	b111      	cbz	r1, 80276a2 <_reclaim_reent+0x36>
 802769c:	4620      	mov	r0, r4
 802769e:	f7ff fe2b 	bl	80272f8 <_free_r>
 80276a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80276a4:	b111      	cbz	r1, 80276ac <_reclaim_reent+0x40>
 80276a6:	4620      	mov	r0, r4
 80276a8:	f7ff fe26 	bl	80272f8 <_free_r>
 80276ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80276ae:	b111      	cbz	r1, 80276b6 <_reclaim_reent+0x4a>
 80276b0:	4620      	mov	r0, r4
 80276b2:	f7ff fe21 	bl	80272f8 <_free_r>
 80276b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80276b8:	b111      	cbz	r1, 80276c0 <_reclaim_reent+0x54>
 80276ba:	4620      	mov	r0, r4
 80276bc:	f7ff fe1c 	bl	80272f8 <_free_r>
 80276c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80276c2:	b111      	cbz	r1, 80276ca <_reclaim_reent+0x5e>
 80276c4:	4620      	mov	r0, r4
 80276c6:	f7ff fe17 	bl	80272f8 <_free_r>
 80276ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80276cc:	b111      	cbz	r1, 80276d4 <_reclaim_reent+0x68>
 80276ce:	4620      	mov	r0, r4
 80276d0:	f7ff fe12 	bl	80272f8 <_free_r>
 80276d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80276d6:	b111      	cbz	r1, 80276de <_reclaim_reent+0x72>
 80276d8:	4620      	mov	r0, r4
 80276da:	f7ff fe0d 	bl	80272f8 <_free_r>
 80276de:	69a3      	ldr	r3, [r4, #24]
 80276e0:	b1e3      	cbz	r3, 802771c <_reclaim_reent+0xb0>
 80276e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80276e4:	4620      	mov	r0, r4
 80276e6:	4798      	blx	r3
 80276e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80276ea:	b1b9      	cbz	r1, 802771c <_reclaim_reent+0xb0>
 80276ec:	4620      	mov	r0, r4
 80276ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80276f2:	f7ff bfad 	b.w	8027650 <cleanup_glue>
 80276f6:	5949      	ldr	r1, [r1, r5]
 80276f8:	b941      	cbnz	r1, 802770c <_reclaim_reent+0xa0>
 80276fa:	3504      	adds	r5, #4
 80276fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80276fe:	2d80      	cmp	r5, #128	; 0x80
 8027700:	68d9      	ldr	r1, [r3, #12]
 8027702:	d1f8      	bne.n	80276f6 <_reclaim_reent+0x8a>
 8027704:	4620      	mov	r0, r4
 8027706:	f7ff fdf7 	bl	80272f8 <_free_r>
 802770a:	e7ba      	b.n	8027682 <_reclaim_reent+0x16>
 802770c:	680e      	ldr	r6, [r1, #0]
 802770e:	4620      	mov	r0, r4
 8027710:	f7ff fdf2 	bl	80272f8 <_free_r>
 8027714:	4631      	mov	r1, r6
 8027716:	e7ef      	b.n	80276f8 <_reclaim_reent+0x8c>
 8027718:	2500      	movs	r5, #0
 802771a:	e7ef      	b.n	80276fc <_reclaim_reent+0x90>
 802771c:	bd70      	pop	{r4, r5, r6, pc}
 802771e:	bf00      	nop
 8027720:	240004cc 	.word	0x240004cc

08027724 <_sbrk_r>:
 8027724:	b538      	push	{r3, r4, r5, lr}
 8027726:	4d06      	ldr	r5, [pc, #24]	; (8027740 <_sbrk_r+0x1c>)
 8027728:	2300      	movs	r3, #0
 802772a:	4604      	mov	r4, r0
 802772c:	4608      	mov	r0, r1
 802772e:	602b      	str	r3, [r5, #0]
 8027730:	f7df fdae 	bl	8007290 <_sbrk>
 8027734:	1c43      	adds	r3, r0, #1
 8027736:	d102      	bne.n	802773e <_sbrk_r+0x1a>
 8027738:	682b      	ldr	r3, [r5, #0]
 802773a:	b103      	cbz	r3, 802773e <_sbrk_r+0x1a>
 802773c:	6023      	str	r3, [r4, #0]
 802773e:	bd38      	pop	{r3, r4, r5, pc}
 8027740:	2400ed00 	.word	0x2400ed00

08027744 <__sread>:
 8027744:	b510      	push	{r4, lr}
 8027746:	460c      	mov	r4, r1
 8027748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802774c:	f000 fcc2 	bl	80280d4 <_read_r>
 8027750:	2800      	cmp	r0, #0
 8027752:	bfab      	itete	ge
 8027754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027756:	89a3      	ldrhlt	r3, [r4, #12]
 8027758:	181b      	addge	r3, r3, r0
 802775a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802775e:	bfac      	ite	ge
 8027760:	6563      	strge	r3, [r4, #84]	; 0x54
 8027762:	81a3      	strhlt	r3, [r4, #12]
 8027764:	bd10      	pop	{r4, pc}

08027766 <__swrite>:
 8027766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802776a:	461f      	mov	r7, r3
 802776c:	898b      	ldrh	r3, [r1, #12]
 802776e:	05db      	lsls	r3, r3, #23
 8027770:	4605      	mov	r5, r0
 8027772:	460c      	mov	r4, r1
 8027774:	4616      	mov	r6, r2
 8027776:	d505      	bpl.n	8027784 <__swrite+0x1e>
 8027778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802777c:	2302      	movs	r3, #2
 802777e:	2200      	movs	r2, #0
 8027780:	f000 f936 	bl	80279f0 <_lseek_r>
 8027784:	89a3      	ldrh	r3, [r4, #12]
 8027786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802778a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802778e:	81a3      	strh	r3, [r4, #12]
 8027790:	4632      	mov	r2, r6
 8027792:	463b      	mov	r3, r7
 8027794:	4628      	mov	r0, r5
 8027796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802779a:	f000 b869 	b.w	8027870 <_write_r>

0802779e <__sseek>:
 802779e:	b510      	push	{r4, lr}
 80277a0:	460c      	mov	r4, r1
 80277a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80277a6:	f000 f923 	bl	80279f0 <_lseek_r>
 80277aa:	1c43      	adds	r3, r0, #1
 80277ac:	89a3      	ldrh	r3, [r4, #12]
 80277ae:	bf15      	itete	ne
 80277b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80277b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80277b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80277ba:	81a3      	strheq	r3, [r4, #12]
 80277bc:	bf18      	it	ne
 80277be:	81a3      	strhne	r3, [r4, #12]
 80277c0:	bd10      	pop	{r4, pc}

080277c2 <__sclose>:
 80277c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80277c6:	f000 b8f1 	b.w	80279ac <_close_r>
	...

080277cc <__swbuf_r>:
 80277cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80277ce:	460e      	mov	r6, r1
 80277d0:	4614      	mov	r4, r2
 80277d2:	4605      	mov	r5, r0
 80277d4:	b118      	cbz	r0, 80277de <__swbuf_r+0x12>
 80277d6:	6983      	ldr	r3, [r0, #24]
 80277d8:	b90b      	cbnz	r3, 80277de <__swbuf_r+0x12>
 80277da:	f7ff fc61 	bl	80270a0 <__sinit>
 80277de:	4b21      	ldr	r3, [pc, #132]	; (8027864 <__swbuf_r+0x98>)
 80277e0:	429c      	cmp	r4, r3
 80277e2:	d12b      	bne.n	802783c <__swbuf_r+0x70>
 80277e4:	686c      	ldr	r4, [r5, #4]
 80277e6:	69a3      	ldr	r3, [r4, #24]
 80277e8:	60a3      	str	r3, [r4, #8]
 80277ea:	89a3      	ldrh	r3, [r4, #12]
 80277ec:	071a      	lsls	r2, r3, #28
 80277ee:	d52f      	bpl.n	8027850 <__swbuf_r+0x84>
 80277f0:	6923      	ldr	r3, [r4, #16]
 80277f2:	b36b      	cbz	r3, 8027850 <__swbuf_r+0x84>
 80277f4:	6923      	ldr	r3, [r4, #16]
 80277f6:	6820      	ldr	r0, [r4, #0]
 80277f8:	1ac0      	subs	r0, r0, r3
 80277fa:	6963      	ldr	r3, [r4, #20]
 80277fc:	b2f6      	uxtb	r6, r6
 80277fe:	4283      	cmp	r3, r0
 8027800:	4637      	mov	r7, r6
 8027802:	dc04      	bgt.n	802780e <__swbuf_r+0x42>
 8027804:	4621      	mov	r1, r4
 8027806:	4628      	mov	r0, r5
 8027808:	f7ff fba4 	bl	8026f54 <_fflush_r>
 802780c:	bb30      	cbnz	r0, 802785c <__swbuf_r+0x90>
 802780e:	68a3      	ldr	r3, [r4, #8]
 8027810:	3b01      	subs	r3, #1
 8027812:	60a3      	str	r3, [r4, #8]
 8027814:	6823      	ldr	r3, [r4, #0]
 8027816:	1c5a      	adds	r2, r3, #1
 8027818:	6022      	str	r2, [r4, #0]
 802781a:	701e      	strb	r6, [r3, #0]
 802781c:	6963      	ldr	r3, [r4, #20]
 802781e:	3001      	adds	r0, #1
 8027820:	4283      	cmp	r3, r0
 8027822:	d004      	beq.n	802782e <__swbuf_r+0x62>
 8027824:	89a3      	ldrh	r3, [r4, #12]
 8027826:	07db      	lsls	r3, r3, #31
 8027828:	d506      	bpl.n	8027838 <__swbuf_r+0x6c>
 802782a:	2e0a      	cmp	r6, #10
 802782c:	d104      	bne.n	8027838 <__swbuf_r+0x6c>
 802782e:	4621      	mov	r1, r4
 8027830:	4628      	mov	r0, r5
 8027832:	f7ff fb8f 	bl	8026f54 <_fflush_r>
 8027836:	b988      	cbnz	r0, 802785c <__swbuf_r+0x90>
 8027838:	4638      	mov	r0, r7
 802783a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802783c:	4b0a      	ldr	r3, [pc, #40]	; (8027868 <__swbuf_r+0x9c>)
 802783e:	429c      	cmp	r4, r3
 8027840:	d101      	bne.n	8027846 <__swbuf_r+0x7a>
 8027842:	68ac      	ldr	r4, [r5, #8]
 8027844:	e7cf      	b.n	80277e6 <__swbuf_r+0x1a>
 8027846:	4b09      	ldr	r3, [pc, #36]	; (802786c <__swbuf_r+0xa0>)
 8027848:	429c      	cmp	r4, r3
 802784a:	bf08      	it	eq
 802784c:	68ec      	ldreq	r4, [r5, #12]
 802784e:	e7ca      	b.n	80277e6 <__swbuf_r+0x1a>
 8027850:	4621      	mov	r1, r4
 8027852:	4628      	mov	r0, r5
 8027854:	f000 f81e 	bl	8027894 <__swsetup_r>
 8027858:	2800      	cmp	r0, #0
 802785a:	d0cb      	beq.n	80277f4 <__swbuf_r+0x28>
 802785c:	f04f 37ff 	mov.w	r7, #4294967295
 8027860:	e7ea      	b.n	8027838 <__swbuf_r+0x6c>
 8027862:	bf00      	nop
 8027864:	0802bb84 	.word	0x0802bb84
 8027868:	0802bba4 	.word	0x0802bba4
 802786c:	0802bb64 	.word	0x0802bb64

08027870 <_write_r>:
 8027870:	b538      	push	{r3, r4, r5, lr}
 8027872:	4d07      	ldr	r5, [pc, #28]	; (8027890 <_write_r+0x20>)
 8027874:	4604      	mov	r4, r0
 8027876:	4608      	mov	r0, r1
 8027878:	4611      	mov	r1, r2
 802787a:	2200      	movs	r2, #0
 802787c:	602a      	str	r2, [r5, #0]
 802787e:	461a      	mov	r2, r3
 8027880:	f7df fcb5 	bl	80071ee <_write>
 8027884:	1c43      	adds	r3, r0, #1
 8027886:	d102      	bne.n	802788e <_write_r+0x1e>
 8027888:	682b      	ldr	r3, [r5, #0]
 802788a:	b103      	cbz	r3, 802788e <_write_r+0x1e>
 802788c:	6023      	str	r3, [r4, #0]
 802788e:	bd38      	pop	{r3, r4, r5, pc}
 8027890:	2400ed00 	.word	0x2400ed00

08027894 <__swsetup_r>:
 8027894:	4b32      	ldr	r3, [pc, #200]	; (8027960 <__swsetup_r+0xcc>)
 8027896:	b570      	push	{r4, r5, r6, lr}
 8027898:	681d      	ldr	r5, [r3, #0]
 802789a:	4606      	mov	r6, r0
 802789c:	460c      	mov	r4, r1
 802789e:	b125      	cbz	r5, 80278aa <__swsetup_r+0x16>
 80278a0:	69ab      	ldr	r3, [r5, #24]
 80278a2:	b913      	cbnz	r3, 80278aa <__swsetup_r+0x16>
 80278a4:	4628      	mov	r0, r5
 80278a6:	f7ff fbfb 	bl	80270a0 <__sinit>
 80278aa:	4b2e      	ldr	r3, [pc, #184]	; (8027964 <__swsetup_r+0xd0>)
 80278ac:	429c      	cmp	r4, r3
 80278ae:	d10f      	bne.n	80278d0 <__swsetup_r+0x3c>
 80278b0:	686c      	ldr	r4, [r5, #4]
 80278b2:	89a3      	ldrh	r3, [r4, #12]
 80278b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80278b8:	0719      	lsls	r1, r3, #28
 80278ba:	d42c      	bmi.n	8027916 <__swsetup_r+0x82>
 80278bc:	06dd      	lsls	r5, r3, #27
 80278be:	d411      	bmi.n	80278e4 <__swsetup_r+0x50>
 80278c0:	2309      	movs	r3, #9
 80278c2:	6033      	str	r3, [r6, #0]
 80278c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80278c8:	81a3      	strh	r3, [r4, #12]
 80278ca:	f04f 30ff 	mov.w	r0, #4294967295
 80278ce:	e03e      	b.n	802794e <__swsetup_r+0xba>
 80278d0:	4b25      	ldr	r3, [pc, #148]	; (8027968 <__swsetup_r+0xd4>)
 80278d2:	429c      	cmp	r4, r3
 80278d4:	d101      	bne.n	80278da <__swsetup_r+0x46>
 80278d6:	68ac      	ldr	r4, [r5, #8]
 80278d8:	e7eb      	b.n	80278b2 <__swsetup_r+0x1e>
 80278da:	4b24      	ldr	r3, [pc, #144]	; (802796c <__swsetup_r+0xd8>)
 80278dc:	429c      	cmp	r4, r3
 80278de:	bf08      	it	eq
 80278e0:	68ec      	ldreq	r4, [r5, #12]
 80278e2:	e7e6      	b.n	80278b2 <__swsetup_r+0x1e>
 80278e4:	0758      	lsls	r0, r3, #29
 80278e6:	d512      	bpl.n	802790e <__swsetup_r+0x7a>
 80278e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80278ea:	b141      	cbz	r1, 80278fe <__swsetup_r+0x6a>
 80278ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80278f0:	4299      	cmp	r1, r3
 80278f2:	d002      	beq.n	80278fa <__swsetup_r+0x66>
 80278f4:	4630      	mov	r0, r6
 80278f6:	f7ff fcff 	bl	80272f8 <_free_r>
 80278fa:	2300      	movs	r3, #0
 80278fc:	6363      	str	r3, [r4, #52]	; 0x34
 80278fe:	89a3      	ldrh	r3, [r4, #12]
 8027900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027904:	81a3      	strh	r3, [r4, #12]
 8027906:	2300      	movs	r3, #0
 8027908:	6063      	str	r3, [r4, #4]
 802790a:	6923      	ldr	r3, [r4, #16]
 802790c:	6023      	str	r3, [r4, #0]
 802790e:	89a3      	ldrh	r3, [r4, #12]
 8027910:	f043 0308 	orr.w	r3, r3, #8
 8027914:	81a3      	strh	r3, [r4, #12]
 8027916:	6923      	ldr	r3, [r4, #16]
 8027918:	b94b      	cbnz	r3, 802792e <__swsetup_r+0x9a>
 802791a:	89a3      	ldrh	r3, [r4, #12]
 802791c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027924:	d003      	beq.n	802792e <__swsetup_r+0x9a>
 8027926:	4621      	mov	r1, r4
 8027928:	4630      	mov	r0, r6
 802792a:	f000 f899 	bl	8027a60 <__smakebuf_r>
 802792e:	89a0      	ldrh	r0, [r4, #12]
 8027930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027934:	f010 0301 	ands.w	r3, r0, #1
 8027938:	d00a      	beq.n	8027950 <__swsetup_r+0xbc>
 802793a:	2300      	movs	r3, #0
 802793c:	60a3      	str	r3, [r4, #8]
 802793e:	6963      	ldr	r3, [r4, #20]
 8027940:	425b      	negs	r3, r3
 8027942:	61a3      	str	r3, [r4, #24]
 8027944:	6923      	ldr	r3, [r4, #16]
 8027946:	b943      	cbnz	r3, 802795a <__swsetup_r+0xc6>
 8027948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802794c:	d1ba      	bne.n	80278c4 <__swsetup_r+0x30>
 802794e:	bd70      	pop	{r4, r5, r6, pc}
 8027950:	0781      	lsls	r1, r0, #30
 8027952:	bf58      	it	pl
 8027954:	6963      	ldrpl	r3, [r4, #20]
 8027956:	60a3      	str	r3, [r4, #8]
 8027958:	e7f4      	b.n	8027944 <__swsetup_r+0xb0>
 802795a:	2000      	movs	r0, #0
 802795c:	e7f7      	b.n	802794e <__swsetup_r+0xba>
 802795e:	bf00      	nop
 8027960:	240004cc 	.word	0x240004cc
 8027964:	0802bb84 	.word	0x0802bb84
 8027968:	0802bba4 	.word	0x0802bba4
 802796c:	0802bb64 	.word	0x0802bb64

08027970 <__assert_func>:
 8027970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027972:	4614      	mov	r4, r2
 8027974:	461a      	mov	r2, r3
 8027976:	4b09      	ldr	r3, [pc, #36]	; (802799c <__assert_func+0x2c>)
 8027978:	681b      	ldr	r3, [r3, #0]
 802797a:	4605      	mov	r5, r0
 802797c:	68d8      	ldr	r0, [r3, #12]
 802797e:	b14c      	cbz	r4, 8027994 <__assert_func+0x24>
 8027980:	4b07      	ldr	r3, [pc, #28]	; (80279a0 <__assert_func+0x30>)
 8027982:	9100      	str	r1, [sp, #0]
 8027984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027988:	4906      	ldr	r1, [pc, #24]	; (80279a4 <__assert_func+0x34>)
 802798a:	462b      	mov	r3, r5
 802798c:	f000 f81e 	bl	80279cc <fiprintf>
 8027990:	f000 fbb2 	bl	80280f8 <abort>
 8027994:	4b04      	ldr	r3, [pc, #16]	; (80279a8 <__assert_func+0x38>)
 8027996:	461c      	mov	r4, r3
 8027998:	e7f3      	b.n	8027982 <__assert_func+0x12>
 802799a:	bf00      	nop
 802799c:	240004cc 	.word	0x240004cc
 80279a0:	0802bc3a 	.word	0x0802bc3a
 80279a4:	0802bc47 	.word	0x0802bc47
 80279a8:	0802bc75 	.word	0x0802bc75

080279ac <_close_r>:
 80279ac:	b538      	push	{r3, r4, r5, lr}
 80279ae:	4d06      	ldr	r5, [pc, #24]	; (80279c8 <_close_r+0x1c>)
 80279b0:	2300      	movs	r3, #0
 80279b2:	4604      	mov	r4, r0
 80279b4:	4608      	mov	r0, r1
 80279b6:	602b      	str	r3, [r5, #0]
 80279b8:	f7df fc35 	bl	8007226 <_close>
 80279bc:	1c43      	adds	r3, r0, #1
 80279be:	d102      	bne.n	80279c6 <_close_r+0x1a>
 80279c0:	682b      	ldr	r3, [r5, #0]
 80279c2:	b103      	cbz	r3, 80279c6 <_close_r+0x1a>
 80279c4:	6023      	str	r3, [r4, #0]
 80279c6:	bd38      	pop	{r3, r4, r5, pc}
 80279c8:	2400ed00 	.word	0x2400ed00

080279cc <fiprintf>:
 80279cc:	b40e      	push	{r1, r2, r3}
 80279ce:	b503      	push	{r0, r1, lr}
 80279d0:	4601      	mov	r1, r0
 80279d2:	ab03      	add	r3, sp, #12
 80279d4:	4805      	ldr	r0, [pc, #20]	; (80279ec <fiprintf+0x20>)
 80279d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80279da:	6800      	ldr	r0, [r0, #0]
 80279dc:	9301      	str	r3, [sp, #4]
 80279de:	f000 f8b5 	bl	8027b4c <_vfiprintf_r>
 80279e2:	b002      	add	sp, #8
 80279e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80279e8:	b003      	add	sp, #12
 80279ea:	4770      	bx	lr
 80279ec:	240004cc 	.word	0x240004cc

080279f0 <_lseek_r>:
 80279f0:	b538      	push	{r3, r4, r5, lr}
 80279f2:	4d07      	ldr	r5, [pc, #28]	; (8027a10 <_lseek_r+0x20>)
 80279f4:	4604      	mov	r4, r0
 80279f6:	4608      	mov	r0, r1
 80279f8:	4611      	mov	r1, r2
 80279fa:	2200      	movs	r2, #0
 80279fc:	602a      	str	r2, [r5, #0]
 80279fe:	461a      	mov	r2, r3
 8027a00:	f7df fc38 	bl	8007274 <_lseek>
 8027a04:	1c43      	adds	r3, r0, #1
 8027a06:	d102      	bne.n	8027a0e <_lseek_r+0x1e>
 8027a08:	682b      	ldr	r3, [r5, #0]
 8027a0a:	b103      	cbz	r3, 8027a0e <_lseek_r+0x1e>
 8027a0c:	6023      	str	r3, [r4, #0]
 8027a0e:	bd38      	pop	{r3, r4, r5, pc}
 8027a10:	2400ed00 	.word	0x2400ed00

08027a14 <__swhatbuf_r>:
 8027a14:	b570      	push	{r4, r5, r6, lr}
 8027a16:	460e      	mov	r6, r1
 8027a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027a1c:	2900      	cmp	r1, #0
 8027a1e:	b096      	sub	sp, #88	; 0x58
 8027a20:	4614      	mov	r4, r2
 8027a22:	461d      	mov	r5, r3
 8027a24:	da08      	bge.n	8027a38 <__swhatbuf_r+0x24>
 8027a26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027a2a:	2200      	movs	r2, #0
 8027a2c:	602a      	str	r2, [r5, #0]
 8027a2e:	061a      	lsls	r2, r3, #24
 8027a30:	d410      	bmi.n	8027a54 <__swhatbuf_r+0x40>
 8027a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027a36:	e00e      	b.n	8027a56 <__swhatbuf_r+0x42>
 8027a38:	466a      	mov	r2, sp
 8027a3a:	f000 fb65 	bl	8028108 <_fstat_r>
 8027a3e:	2800      	cmp	r0, #0
 8027a40:	dbf1      	blt.n	8027a26 <__swhatbuf_r+0x12>
 8027a42:	9a01      	ldr	r2, [sp, #4]
 8027a44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027a48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027a4c:	425a      	negs	r2, r3
 8027a4e:	415a      	adcs	r2, r3
 8027a50:	602a      	str	r2, [r5, #0]
 8027a52:	e7ee      	b.n	8027a32 <__swhatbuf_r+0x1e>
 8027a54:	2340      	movs	r3, #64	; 0x40
 8027a56:	2000      	movs	r0, #0
 8027a58:	6023      	str	r3, [r4, #0]
 8027a5a:	b016      	add	sp, #88	; 0x58
 8027a5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08027a60 <__smakebuf_r>:
 8027a60:	898b      	ldrh	r3, [r1, #12]
 8027a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027a64:	079d      	lsls	r5, r3, #30
 8027a66:	4606      	mov	r6, r0
 8027a68:	460c      	mov	r4, r1
 8027a6a:	d507      	bpl.n	8027a7c <__smakebuf_r+0x1c>
 8027a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027a70:	6023      	str	r3, [r4, #0]
 8027a72:	6123      	str	r3, [r4, #16]
 8027a74:	2301      	movs	r3, #1
 8027a76:	6163      	str	r3, [r4, #20]
 8027a78:	b002      	add	sp, #8
 8027a7a:	bd70      	pop	{r4, r5, r6, pc}
 8027a7c:	ab01      	add	r3, sp, #4
 8027a7e:	466a      	mov	r2, sp
 8027a80:	f7ff ffc8 	bl	8027a14 <__swhatbuf_r>
 8027a84:	9900      	ldr	r1, [sp, #0]
 8027a86:	4605      	mov	r5, r0
 8027a88:	4630      	mov	r0, r6
 8027a8a:	f7ff fca1 	bl	80273d0 <_malloc_r>
 8027a8e:	b948      	cbnz	r0, 8027aa4 <__smakebuf_r+0x44>
 8027a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027a94:	059a      	lsls	r2, r3, #22
 8027a96:	d4ef      	bmi.n	8027a78 <__smakebuf_r+0x18>
 8027a98:	f023 0303 	bic.w	r3, r3, #3
 8027a9c:	f043 0302 	orr.w	r3, r3, #2
 8027aa0:	81a3      	strh	r3, [r4, #12]
 8027aa2:	e7e3      	b.n	8027a6c <__smakebuf_r+0xc>
 8027aa4:	4b0d      	ldr	r3, [pc, #52]	; (8027adc <__smakebuf_r+0x7c>)
 8027aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8027aa8:	89a3      	ldrh	r3, [r4, #12]
 8027aaa:	6020      	str	r0, [r4, #0]
 8027aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027ab0:	81a3      	strh	r3, [r4, #12]
 8027ab2:	9b00      	ldr	r3, [sp, #0]
 8027ab4:	6163      	str	r3, [r4, #20]
 8027ab6:	9b01      	ldr	r3, [sp, #4]
 8027ab8:	6120      	str	r0, [r4, #16]
 8027aba:	b15b      	cbz	r3, 8027ad4 <__smakebuf_r+0x74>
 8027abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027ac0:	4630      	mov	r0, r6
 8027ac2:	f000 fb33 	bl	802812c <_isatty_r>
 8027ac6:	b128      	cbz	r0, 8027ad4 <__smakebuf_r+0x74>
 8027ac8:	89a3      	ldrh	r3, [r4, #12]
 8027aca:	f023 0303 	bic.w	r3, r3, #3
 8027ace:	f043 0301 	orr.w	r3, r3, #1
 8027ad2:	81a3      	strh	r3, [r4, #12]
 8027ad4:	89a0      	ldrh	r0, [r4, #12]
 8027ad6:	4305      	orrs	r5, r0
 8027ad8:	81a5      	strh	r5, [r4, #12]
 8027ada:	e7cd      	b.n	8027a78 <__smakebuf_r+0x18>
 8027adc:	08027039 	.word	0x08027039

08027ae0 <__malloc_lock>:
 8027ae0:	4801      	ldr	r0, [pc, #4]	; (8027ae8 <__malloc_lock+0x8>)
 8027ae2:	f7ff bba0 	b.w	8027226 <__retarget_lock_acquire_recursive>
 8027ae6:	bf00      	nop
 8027ae8:	2400ecf4 	.word	0x2400ecf4

08027aec <__malloc_unlock>:
 8027aec:	4801      	ldr	r0, [pc, #4]	; (8027af4 <__malloc_unlock+0x8>)
 8027aee:	f7ff bb9b 	b.w	8027228 <__retarget_lock_release_recursive>
 8027af2:	bf00      	nop
 8027af4:	2400ecf4 	.word	0x2400ecf4

08027af8 <__sfputc_r>:
 8027af8:	6893      	ldr	r3, [r2, #8]
 8027afa:	3b01      	subs	r3, #1
 8027afc:	2b00      	cmp	r3, #0
 8027afe:	b410      	push	{r4}
 8027b00:	6093      	str	r3, [r2, #8]
 8027b02:	da08      	bge.n	8027b16 <__sfputc_r+0x1e>
 8027b04:	6994      	ldr	r4, [r2, #24]
 8027b06:	42a3      	cmp	r3, r4
 8027b08:	db01      	blt.n	8027b0e <__sfputc_r+0x16>
 8027b0a:	290a      	cmp	r1, #10
 8027b0c:	d103      	bne.n	8027b16 <__sfputc_r+0x1e>
 8027b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027b12:	f7ff be5b 	b.w	80277cc <__swbuf_r>
 8027b16:	6813      	ldr	r3, [r2, #0]
 8027b18:	1c58      	adds	r0, r3, #1
 8027b1a:	6010      	str	r0, [r2, #0]
 8027b1c:	7019      	strb	r1, [r3, #0]
 8027b1e:	4608      	mov	r0, r1
 8027b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027b24:	4770      	bx	lr

08027b26 <__sfputs_r>:
 8027b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b28:	4606      	mov	r6, r0
 8027b2a:	460f      	mov	r7, r1
 8027b2c:	4614      	mov	r4, r2
 8027b2e:	18d5      	adds	r5, r2, r3
 8027b30:	42ac      	cmp	r4, r5
 8027b32:	d101      	bne.n	8027b38 <__sfputs_r+0x12>
 8027b34:	2000      	movs	r0, #0
 8027b36:	e007      	b.n	8027b48 <__sfputs_r+0x22>
 8027b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b3c:	463a      	mov	r2, r7
 8027b3e:	4630      	mov	r0, r6
 8027b40:	f7ff ffda 	bl	8027af8 <__sfputc_r>
 8027b44:	1c43      	adds	r3, r0, #1
 8027b46:	d1f3      	bne.n	8027b30 <__sfputs_r+0xa>
 8027b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027b4c <_vfiprintf_r>:
 8027b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b50:	460d      	mov	r5, r1
 8027b52:	b09d      	sub	sp, #116	; 0x74
 8027b54:	4614      	mov	r4, r2
 8027b56:	4698      	mov	r8, r3
 8027b58:	4606      	mov	r6, r0
 8027b5a:	b118      	cbz	r0, 8027b64 <_vfiprintf_r+0x18>
 8027b5c:	6983      	ldr	r3, [r0, #24]
 8027b5e:	b90b      	cbnz	r3, 8027b64 <_vfiprintf_r+0x18>
 8027b60:	f7ff fa9e 	bl	80270a0 <__sinit>
 8027b64:	4b89      	ldr	r3, [pc, #548]	; (8027d8c <_vfiprintf_r+0x240>)
 8027b66:	429d      	cmp	r5, r3
 8027b68:	d11b      	bne.n	8027ba2 <_vfiprintf_r+0x56>
 8027b6a:	6875      	ldr	r5, [r6, #4]
 8027b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027b6e:	07d9      	lsls	r1, r3, #31
 8027b70:	d405      	bmi.n	8027b7e <_vfiprintf_r+0x32>
 8027b72:	89ab      	ldrh	r3, [r5, #12]
 8027b74:	059a      	lsls	r2, r3, #22
 8027b76:	d402      	bmi.n	8027b7e <_vfiprintf_r+0x32>
 8027b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027b7a:	f7ff fb54 	bl	8027226 <__retarget_lock_acquire_recursive>
 8027b7e:	89ab      	ldrh	r3, [r5, #12]
 8027b80:	071b      	lsls	r3, r3, #28
 8027b82:	d501      	bpl.n	8027b88 <_vfiprintf_r+0x3c>
 8027b84:	692b      	ldr	r3, [r5, #16]
 8027b86:	b9eb      	cbnz	r3, 8027bc4 <_vfiprintf_r+0x78>
 8027b88:	4629      	mov	r1, r5
 8027b8a:	4630      	mov	r0, r6
 8027b8c:	f7ff fe82 	bl	8027894 <__swsetup_r>
 8027b90:	b1c0      	cbz	r0, 8027bc4 <_vfiprintf_r+0x78>
 8027b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027b94:	07dc      	lsls	r4, r3, #31
 8027b96:	d50e      	bpl.n	8027bb6 <_vfiprintf_r+0x6a>
 8027b98:	f04f 30ff 	mov.w	r0, #4294967295
 8027b9c:	b01d      	add	sp, #116	; 0x74
 8027b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ba2:	4b7b      	ldr	r3, [pc, #492]	; (8027d90 <_vfiprintf_r+0x244>)
 8027ba4:	429d      	cmp	r5, r3
 8027ba6:	d101      	bne.n	8027bac <_vfiprintf_r+0x60>
 8027ba8:	68b5      	ldr	r5, [r6, #8]
 8027baa:	e7df      	b.n	8027b6c <_vfiprintf_r+0x20>
 8027bac:	4b79      	ldr	r3, [pc, #484]	; (8027d94 <_vfiprintf_r+0x248>)
 8027bae:	429d      	cmp	r5, r3
 8027bb0:	bf08      	it	eq
 8027bb2:	68f5      	ldreq	r5, [r6, #12]
 8027bb4:	e7da      	b.n	8027b6c <_vfiprintf_r+0x20>
 8027bb6:	89ab      	ldrh	r3, [r5, #12]
 8027bb8:	0598      	lsls	r0, r3, #22
 8027bba:	d4ed      	bmi.n	8027b98 <_vfiprintf_r+0x4c>
 8027bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027bbe:	f7ff fb33 	bl	8027228 <__retarget_lock_release_recursive>
 8027bc2:	e7e9      	b.n	8027b98 <_vfiprintf_r+0x4c>
 8027bc4:	2300      	movs	r3, #0
 8027bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8027bc8:	2320      	movs	r3, #32
 8027bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8027bd2:	2330      	movs	r3, #48	; 0x30
 8027bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027d98 <_vfiprintf_r+0x24c>
 8027bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027bdc:	f04f 0901 	mov.w	r9, #1
 8027be0:	4623      	mov	r3, r4
 8027be2:	469a      	mov	sl, r3
 8027be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027be8:	b10a      	cbz	r2, 8027bee <_vfiprintf_r+0xa2>
 8027bea:	2a25      	cmp	r2, #37	; 0x25
 8027bec:	d1f9      	bne.n	8027be2 <_vfiprintf_r+0x96>
 8027bee:	ebba 0b04 	subs.w	fp, sl, r4
 8027bf2:	d00b      	beq.n	8027c0c <_vfiprintf_r+0xc0>
 8027bf4:	465b      	mov	r3, fp
 8027bf6:	4622      	mov	r2, r4
 8027bf8:	4629      	mov	r1, r5
 8027bfa:	4630      	mov	r0, r6
 8027bfc:	f7ff ff93 	bl	8027b26 <__sfputs_r>
 8027c00:	3001      	adds	r0, #1
 8027c02:	f000 80aa 	beq.w	8027d5a <_vfiprintf_r+0x20e>
 8027c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027c08:	445a      	add	r2, fp
 8027c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8027c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8027c10:	2b00      	cmp	r3, #0
 8027c12:	f000 80a2 	beq.w	8027d5a <_vfiprintf_r+0x20e>
 8027c16:	2300      	movs	r3, #0
 8027c18:	f04f 32ff 	mov.w	r2, #4294967295
 8027c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027c20:	f10a 0a01 	add.w	sl, sl, #1
 8027c24:	9304      	str	r3, [sp, #16]
 8027c26:	9307      	str	r3, [sp, #28]
 8027c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8027c2e:	4654      	mov	r4, sl
 8027c30:	2205      	movs	r2, #5
 8027c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027c36:	4858      	ldr	r0, [pc, #352]	; (8027d98 <_vfiprintf_r+0x24c>)
 8027c38:	f7d8 fb72 	bl	8000320 <memchr>
 8027c3c:	9a04      	ldr	r2, [sp, #16]
 8027c3e:	b9d8      	cbnz	r0, 8027c78 <_vfiprintf_r+0x12c>
 8027c40:	06d1      	lsls	r1, r2, #27
 8027c42:	bf44      	itt	mi
 8027c44:	2320      	movmi	r3, #32
 8027c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027c4a:	0713      	lsls	r3, r2, #28
 8027c4c:	bf44      	itt	mi
 8027c4e:	232b      	movmi	r3, #43	; 0x2b
 8027c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027c54:	f89a 3000 	ldrb.w	r3, [sl]
 8027c58:	2b2a      	cmp	r3, #42	; 0x2a
 8027c5a:	d015      	beq.n	8027c88 <_vfiprintf_r+0x13c>
 8027c5c:	9a07      	ldr	r2, [sp, #28]
 8027c5e:	4654      	mov	r4, sl
 8027c60:	2000      	movs	r0, #0
 8027c62:	f04f 0c0a 	mov.w	ip, #10
 8027c66:	4621      	mov	r1, r4
 8027c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027c6c:	3b30      	subs	r3, #48	; 0x30
 8027c6e:	2b09      	cmp	r3, #9
 8027c70:	d94e      	bls.n	8027d10 <_vfiprintf_r+0x1c4>
 8027c72:	b1b0      	cbz	r0, 8027ca2 <_vfiprintf_r+0x156>
 8027c74:	9207      	str	r2, [sp, #28]
 8027c76:	e014      	b.n	8027ca2 <_vfiprintf_r+0x156>
 8027c78:	eba0 0308 	sub.w	r3, r0, r8
 8027c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8027c80:	4313      	orrs	r3, r2
 8027c82:	9304      	str	r3, [sp, #16]
 8027c84:	46a2      	mov	sl, r4
 8027c86:	e7d2      	b.n	8027c2e <_vfiprintf_r+0xe2>
 8027c88:	9b03      	ldr	r3, [sp, #12]
 8027c8a:	1d19      	adds	r1, r3, #4
 8027c8c:	681b      	ldr	r3, [r3, #0]
 8027c8e:	9103      	str	r1, [sp, #12]
 8027c90:	2b00      	cmp	r3, #0
 8027c92:	bfbb      	ittet	lt
 8027c94:	425b      	neglt	r3, r3
 8027c96:	f042 0202 	orrlt.w	r2, r2, #2
 8027c9a:	9307      	strge	r3, [sp, #28]
 8027c9c:	9307      	strlt	r3, [sp, #28]
 8027c9e:	bfb8      	it	lt
 8027ca0:	9204      	strlt	r2, [sp, #16]
 8027ca2:	7823      	ldrb	r3, [r4, #0]
 8027ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8027ca6:	d10c      	bne.n	8027cc2 <_vfiprintf_r+0x176>
 8027ca8:	7863      	ldrb	r3, [r4, #1]
 8027caa:	2b2a      	cmp	r3, #42	; 0x2a
 8027cac:	d135      	bne.n	8027d1a <_vfiprintf_r+0x1ce>
 8027cae:	9b03      	ldr	r3, [sp, #12]
 8027cb0:	1d1a      	adds	r2, r3, #4
 8027cb2:	681b      	ldr	r3, [r3, #0]
 8027cb4:	9203      	str	r2, [sp, #12]
 8027cb6:	2b00      	cmp	r3, #0
 8027cb8:	bfb8      	it	lt
 8027cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8027cbe:	3402      	adds	r4, #2
 8027cc0:	9305      	str	r3, [sp, #20]
 8027cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027da8 <_vfiprintf_r+0x25c>
 8027cc6:	7821      	ldrb	r1, [r4, #0]
 8027cc8:	2203      	movs	r2, #3
 8027cca:	4650      	mov	r0, sl
 8027ccc:	f7d8 fb28 	bl	8000320 <memchr>
 8027cd0:	b140      	cbz	r0, 8027ce4 <_vfiprintf_r+0x198>
 8027cd2:	2340      	movs	r3, #64	; 0x40
 8027cd4:	eba0 000a 	sub.w	r0, r0, sl
 8027cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8027cdc:	9b04      	ldr	r3, [sp, #16]
 8027cde:	4303      	orrs	r3, r0
 8027ce0:	3401      	adds	r4, #1
 8027ce2:	9304      	str	r3, [sp, #16]
 8027ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027ce8:	482c      	ldr	r0, [pc, #176]	; (8027d9c <_vfiprintf_r+0x250>)
 8027cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027cee:	2206      	movs	r2, #6
 8027cf0:	f7d8 fb16 	bl	8000320 <memchr>
 8027cf4:	2800      	cmp	r0, #0
 8027cf6:	d03f      	beq.n	8027d78 <_vfiprintf_r+0x22c>
 8027cf8:	4b29      	ldr	r3, [pc, #164]	; (8027da0 <_vfiprintf_r+0x254>)
 8027cfa:	bb1b      	cbnz	r3, 8027d44 <_vfiprintf_r+0x1f8>
 8027cfc:	9b03      	ldr	r3, [sp, #12]
 8027cfe:	3307      	adds	r3, #7
 8027d00:	f023 0307 	bic.w	r3, r3, #7
 8027d04:	3308      	adds	r3, #8
 8027d06:	9303      	str	r3, [sp, #12]
 8027d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d0a:	443b      	add	r3, r7
 8027d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8027d0e:	e767      	b.n	8027be0 <_vfiprintf_r+0x94>
 8027d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8027d14:	460c      	mov	r4, r1
 8027d16:	2001      	movs	r0, #1
 8027d18:	e7a5      	b.n	8027c66 <_vfiprintf_r+0x11a>
 8027d1a:	2300      	movs	r3, #0
 8027d1c:	3401      	adds	r4, #1
 8027d1e:	9305      	str	r3, [sp, #20]
 8027d20:	4619      	mov	r1, r3
 8027d22:	f04f 0c0a 	mov.w	ip, #10
 8027d26:	4620      	mov	r0, r4
 8027d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027d2c:	3a30      	subs	r2, #48	; 0x30
 8027d2e:	2a09      	cmp	r2, #9
 8027d30:	d903      	bls.n	8027d3a <_vfiprintf_r+0x1ee>
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	d0c5      	beq.n	8027cc2 <_vfiprintf_r+0x176>
 8027d36:	9105      	str	r1, [sp, #20]
 8027d38:	e7c3      	b.n	8027cc2 <_vfiprintf_r+0x176>
 8027d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8027d3e:	4604      	mov	r4, r0
 8027d40:	2301      	movs	r3, #1
 8027d42:	e7f0      	b.n	8027d26 <_vfiprintf_r+0x1da>
 8027d44:	ab03      	add	r3, sp, #12
 8027d46:	9300      	str	r3, [sp, #0]
 8027d48:	462a      	mov	r2, r5
 8027d4a:	4b16      	ldr	r3, [pc, #88]	; (8027da4 <_vfiprintf_r+0x258>)
 8027d4c:	a904      	add	r1, sp, #16
 8027d4e:	4630      	mov	r0, r6
 8027d50:	f3af 8000 	nop.w
 8027d54:	4607      	mov	r7, r0
 8027d56:	1c78      	adds	r0, r7, #1
 8027d58:	d1d6      	bne.n	8027d08 <_vfiprintf_r+0x1bc>
 8027d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027d5c:	07d9      	lsls	r1, r3, #31
 8027d5e:	d405      	bmi.n	8027d6c <_vfiprintf_r+0x220>
 8027d60:	89ab      	ldrh	r3, [r5, #12]
 8027d62:	059a      	lsls	r2, r3, #22
 8027d64:	d402      	bmi.n	8027d6c <_vfiprintf_r+0x220>
 8027d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027d68:	f7ff fa5e 	bl	8027228 <__retarget_lock_release_recursive>
 8027d6c:	89ab      	ldrh	r3, [r5, #12]
 8027d6e:	065b      	lsls	r3, r3, #25
 8027d70:	f53f af12 	bmi.w	8027b98 <_vfiprintf_r+0x4c>
 8027d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027d76:	e711      	b.n	8027b9c <_vfiprintf_r+0x50>
 8027d78:	ab03      	add	r3, sp, #12
 8027d7a:	9300      	str	r3, [sp, #0]
 8027d7c:	462a      	mov	r2, r5
 8027d7e:	4b09      	ldr	r3, [pc, #36]	; (8027da4 <_vfiprintf_r+0x258>)
 8027d80:	a904      	add	r1, sp, #16
 8027d82:	4630      	mov	r0, r6
 8027d84:	f000 f880 	bl	8027e88 <_printf_i>
 8027d88:	e7e4      	b.n	8027d54 <_vfiprintf_r+0x208>
 8027d8a:	bf00      	nop
 8027d8c:	0802bb84 	.word	0x0802bb84
 8027d90:	0802bba4 	.word	0x0802bba4
 8027d94:	0802bb64 	.word	0x0802bb64
 8027d98:	0802bc76 	.word	0x0802bc76
 8027d9c:	0802bc80 	.word	0x0802bc80
 8027da0:	00000000 	.word	0x00000000
 8027da4:	08027b27 	.word	0x08027b27
 8027da8:	0802bc7c 	.word	0x0802bc7c

08027dac <_printf_common>:
 8027dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027db0:	4616      	mov	r6, r2
 8027db2:	4699      	mov	r9, r3
 8027db4:	688a      	ldr	r2, [r1, #8]
 8027db6:	690b      	ldr	r3, [r1, #16]
 8027db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027dbc:	4293      	cmp	r3, r2
 8027dbe:	bfb8      	it	lt
 8027dc0:	4613      	movlt	r3, r2
 8027dc2:	6033      	str	r3, [r6, #0]
 8027dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027dc8:	4607      	mov	r7, r0
 8027dca:	460c      	mov	r4, r1
 8027dcc:	b10a      	cbz	r2, 8027dd2 <_printf_common+0x26>
 8027dce:	3301      	adds	r3, #1
 8027dd0:	6033      	str	r3, [r6, #0]
 8027dd2:	6823      	ldr	r3, [r4, #0]
 8027dd4:	0699      	lsls	r1, r3, #26
 8027dd6:	bf42      	ittt	mi
 8027dd8:	6833      	ldrmi	r3, [r6, #0]
 8027dda:	3302      	addmi	r3, #2
 8027ddc:	6033      	strmi	r3, [r6, #0]
 8027dde:	6825      	ldr	r5, [r4, #0]
 8027de0:	f015 0506 	ands.w	r5, r5, #6
 8027de4:	d106      	bne.n	8027df4 <_printf_common+0x48>
 8027de6:	f104 0a19 	add.w	sl, r4, #25
 8027dea:	68e3      	ldr	r3, [r4, #12]
 8027dec:	6832      	ldr	r2, [r6, #0]
 8027dee:	1a9b      	subs	r3, r3, r2
 8027df0:	42ab      	cmp	r3, r5
 8027df2:	dc26      	bgt.n	8027e42 <_printf_common+0x96>
 8027df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027df8:	1e13      	subs	r3, r2, #0
 8027dfa:	6822      	ldr	r2, [r4, #0]
 8027dfc:	bf18      	it	ne
 8027dfe:	2301      	movne	r3, #1
 8027e00:	0692      	lsls	r2, r2, #26
 8027e02:	d42b      	bmi.n	8027e5c <_printf_common+0xb0>
 8027e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027e08:	4649      	mov	r1, r9
 8027e0a:	4638      	mov	r0, r7
 8027e0c:	47c0      	blx	r8
 8027e0e:	3001      	adds	r0, #1
 8027e10:	d01e      	beq.n	8027e50 <_printf_common+0xa4>
 8027e12:	6823      	ldr	r3, [r4, #0]
 8027e14:	68e5      	ldr	r5, [r4, #12]
 8027e16:	6832      	ldr	r2, [r6, #0]
 8027e18:	f003 0306 	and.w	r3, r3, #6
 8027e1c:	2b04      	cmp	r3, #4
 8027e1e:	bf08      	it	eq
 8027e20:	1aad      	subeq	r5, r5, r2
 8027e22:	68a3      	ldr	r3, [r4, #8]
 8027e24:	6922      	ldr	r2, [r4, #16]
 8027e26:	bf0c      	ite	eq
 8027e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027e2c:	2500      	movne	r5, #0
 8027e2e:	4293      	cmp	r3, r2
 8027e30:	bfc4      	itt	gt
 8027e32:	1a9b      	subgt	r3, r3, r2
 8027e34:	18ed      	addgt	r5, r5, r3
 8027e36:	2600      	movs	r6, #0
 8027e38:	341a      	adds	r4, #26
 8027e3a:	42b5      	cmp	r5, r6
 8027e3c:	d11a      	bne.n	8027e74 <_printf_common+0xc8>
 8027e3e:	2000      	movs	r0, #0
 8027e40:	e008      	b.n	8027e54 <_printf_common+0xa8>
 8027e42:	2301      	movs	r3, #1
 8027e44:	4652      	mov	r2, sl
 8027e46:	4649      	mov	r1, r9
 8027e48:	4638      	mov	r0, r7
 8027e4a:	47c0      	blx	r8
 8027e4c:	3001      	adds	r0, #1
 8027e4e:	d103      	bne.n	8027e58 <_printf_common+0xac>
 8027e50:	f04f 30ff 	mov.w	r0, #4294967295
 8027e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e58:	3501      	adds	r5, #1
 8027e5a:	e7c6      	b.n	8027dea <_printf_common+0x3e>
 8027e5c:	18e1      	adds	r1, r4, r3
 8027e5e:	1c5a      	adds	r2, r3, #1
 8027e60:	2030      	movs	r0, #48	; 0x30
 8027e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027e66:	4422      	add	r2, r4
 8027e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027e70:	3302      	adds	r3, #2
 8027e72:	e7c7      	b.n	8027e04 <_printf_common+0x58>
 8027e74:	2301      	movs	r3, #1
 8027e76:	4622      	mov	r2, r4
 8027e78:	4649      	mov	r1, r9
 8027e7a:	4638      	mov	r0, r7
 8027e7c:	47c0      	blx	r8
 8027e7e:	3001      	adds	r0, #1
 8027e80:	d0e6      	beq.n	8027e50 <_printf_common+0xa4>
 8027e82:	3601      	adds	r6, #1
 8027e84:	e7d9      	b.n	8027e3a <_printf_common+0x8e>
	...

08027e88 <_printf_i>:
 8027e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027e8c:	7e0f      	ldrb	r7, [r1, #24]
 8027e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027e90:	2f78      	cmp	r7, #120	; 0x78
 8027e92:	4691      	mov	r9, r2
 8027e94:	4680      	mov	r8, r0
 8027e96:	460c      	mov	r4, r1
 8027e98:	469a      	mov	sl, r3
 8027e9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8027e9e:	d807      	bhi.n	8027eb0 <_printf_i+0x28>
 8027ea0:	2f62      	cmp	r7, #98	; 0x62
 8027ea2:	d80a      	bhi.n	8027eba <_printf_i+0x32>
 8027ea4:	2f00      	cmp	r7, #0
 8027ea6:	f000 80d8 	beq.w	802805a <_printf_i+0x1d2>
 8027eaa:	2f58      	cmp	r7, #88	; 0x58
 8027eac:	f000 80a3 	beq.w	8027ff6 <_printf_i+0x16e>
 8027eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027eb8:	e03a      	b.n	8027f30 <_printf_i+0xa8>
 8027eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027ebe:	2b15      	cmp	r3, #21
 8027ec0:	d8f6      	bhi.n	8027eb0 <_printf_i+0x28>
 8027ec2:	a101      	add	r1, pc, #4	; (adr r1, 8027ec8 <_printf_i+0x40>)
 8027ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027ec8:	08027f21 	.word	0x08027f21
 8027ecc:	08027f35 	.word	0x08027f35
 8027ed0:	08027eb1 	.word	0x08027eb1
 8027ed4:	08027eb1 	.word	0x08027eb1
 8027ed8:	08027eb1 	.word	0x08027eb1
 8027edc:	08027eb1 	.word	0x08027eb1
 8027ee0:	08027f35 	.word	0x08027f35
 8027ee4:	08027eb1 	.word	0x08027eb1
 8027ee8:	08027eb1 	.word	0x08027eb1
 8027eec:	08027eb1 	.word	0x08027eb1
 8027ef0:	08027eb1 	.word	0x08027eb1
 8027ef4:	08028041 	.word	0x08028041
 8027ef8:	08027f65 	.word	0x08027f65
 8027efc:	08028023 	.word	0x08028023
 8027f00:	08027eb1 	.word	0x08027eb1
 8027f04:	08027eb1 	.word	0x08027eb1
 8027f08:	08028063 	.word	0x08028063
 8027f0c:	08027eb1 	.word	0x08027eb1
 8027f10:	08027f65 	.word	0x08027f65
 8027f14:	08027eb1 	.word	0x08027eb1
 8027f18:	08027eb1 	.word	0x08027eb1
 8027f1c:	0802802b 	.word	0x0802802b
 8027f20:	682b      	ldr	r3, [r5, #0]
 8027f22:	1d1a      	adds	r2, r3, #4
 8027f24:	681b      	ldr	r3, [r3, #0]
 8027f26:	602a      	str	r2, [r5, #0]
 8027f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027f30:	2301      	movs	r3, #1
 8027f32:	e0a3      	b.n	802807c <_printf_i+0x1f4>
 8027f34:	6820      	ldr	r0, [r4, #0]
 8027f36:	6829      	ldr	r1, [r5, #0]
 8027f38:	0606      	lsls	r6, r0, #24
 8027f3a:	f101 0304 	add.w	r3, r1, #4
 8027f3e:	d50a      	bpl.n	8027f56 <_printf_i+0xce>
 8027f40:	680e      	ldr	r6, [r1, #0]
 8027f42:	602b      	str	r3, [r5, #0]
 8027f44:	2e00      	cmp	r6, #0
 8027f46:	da03      	bge.n	8027f50 <_printf_i+0xc8>
 8027f48:	232d      	movs	r3, #45	; 0x2d
 8027f4a:	4276      	negs	r6, r6
 8027f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027f50:	485e      	ldr	r0, [pc, #376]	; (80280cc <_printf_i+0x244>)
 8027f52:	230a      	movs	r3, #10
 8027f54:	e019      	b.n	8027f8a <_printf_i+0x102>
 8027f56:	680e      	ldr	r6, [r1, #0]
 8027f58:	602b      	str	r3, [r5, #0]
 8027f5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027f5e:	bf18      	it	ne
 8027f60:	b236      	sxthne	r6, r6
 8027f62:	e7ef      	b.n	8027f44 <_printf_i+0xbc>
 8027f64:	682b      	ldr	r3, [r5, #0]
 8027f66:	6820      	ldr	r0, [r4, #0]
 8027f68:	1d19      	adds	r1, r3, #4
 8027f6a:	6029      	str	r1, [r5, #0]
 8027f6c:	0601      	lsls	r1, r0, #24
 8027f6e:	d501      	bpl.n	8027f74 <_printf_i+0xec>
 8027f70:	681e      	ldr	r6, [r3, #0]
 8027f72:	e002      	b.n	8027f7a <_printf_i+0xf2>
 8027f74:	0646      	lsls	r6, r0, #25
 8027f76:	d5fb      	bpl.n	8027f70 <_printf_i+0xe8>
 8027f78:	881e      	ldrh	r6, [r3, #0]
 8027f7a:	4854      	ldr	r0, [pc, #336]	; (80280cc <_printf_i+0x244>)
 8027f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8027f7e:	bf0c      	ite	eq
 8027f80:	2308      	moveq	r3, #8
 8027f82:	230a      	movne	r3, #10
 8027f84:	2100      	movs	r1, #0
 8027f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027f8a:	6865      	ldr	r5, [r4, #4]
 8027f8c:	60a5      	str	r5, [r4, #8]
 8027f8e:	2d00      	cmp	r5, #0
 8027f90:	bfa2      	ittt	ge
 8027f92:	6821      	ldrge	r1, [r4, #0]
 8027f94:	f021 0104 	bicge.w	r1, r1, #4
 8027f98:	6021      	strge	r1, [r4, #0]
 8027f9a:	b90e      	cbnz	r6, 8027fa0 <_printf_i+0x118>
 8027f9c:	2d00      	cmp	r5, #0
 8027f9e:	d04d      	beq.n	802803c <_printf_i+0x1b4>
 8027fa0:	4615      	mov	r5, r2
 8027fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8027fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8027faa:	5dc7      	ldrb	r7, [r0, r7]
 8027fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027fb0:	4637      	mov	r7, r6
 8027fb2:	42bb      	cmp	r3, r7
 8027fb4:	460e      	mov	r6, r1
 8027fb6:	d9f4      	bls.n	8027fa2 <_printf_i+0x11a>
 8027fb8:	2b08      	cmp	r3, #8
 8027fba:	d10b      	bne.n	8027fd4 <_printf_i+0x14c>
 8027fbc:	6823      	ldr	r3, [r4, #0]
 8027fbe:	07de      	lsls	r6, r3, #31
 8027fc0:	d508      	bpl.n	8027fd4 <_printf_i+0x14c>
 8027fc2:	6923      	ldr	r3, [r4, #16]
 8027fc4:	6861      	ldr	r1, [r4, #4]
 8027fc6:	4299      	cmp	r1, r3
 8027fc8:	bfde      	ittt	le
 8027fca:	2330      	movle	r3, #48	; 0x30
 8027fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027fd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027fd4:	1b52      	subs	r2, r2, r5
 8027fd6:	6122      	str	r2, [r4, #16]
 8027fd8:	f8cd a000 	str.w	sl, [sp]
 8027fdc:	464b      	mov	r3, r9
 8027fde:	aa03      	add	r2, sp, #12
 8027fe0:	4621      	mov	r1, r4
 8027fe2:	4640      	mov	r0, r8
 8027fe4:	f7ff fee2 	bl	8027dac <_printf_common>
 8027fe8:	3001      	adds	r0, #1
 8027fea:	d14c      	bne.n	8028086 <_printf_i+0x1fe>
 8027fec:	f04f 30ff 	mov.w	r0, #4294967295
 8027ff0:	b004      	add	sp, #16
 8027ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027ff6:	4835      	ldr	r0, [pc, #212]	; (80280cc <_printf_i+0x244>)
 8027ff8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8027ffc:	6829      	ldr	r1, [r5, #0]
 8027ffe:	6823      	ldr	r3, [r4, #0]
 8028000:	f851 6b04 	ldr.w	r6, [r1], #4
 8028004:	6029      	str	r1, [r5, #0]
 8028006:	061d      	lsls	r5, r3, #24
 8028008:	d514      	bpl.n	8028034 <_printf_i+0x1ac>
 802800a:	07df      	lsls	r7, r3, #31
 802800c:	bf44      	itt	mi
 802800e:	f043 0320 	orrmi.w	r3, r3, #32
 8028012:	6023      	strmi	r3, [r4, #0]
 8028014:	b91e      	cbnz	r6, 802801e <_printf_i+0x196>
 8028016:	6823      	ldr	r3, [r4, #0]
 8028018:	f023 0320 	bic.w	r3, r3, #32
 802801c:	6023      	str	r3, [r4, #0]
 802801e:	2310      	movs	r3, #16
 8028020:	e7b0      	b.n	8027f84 <_printf_i+0xfc>
 8028022:	6823      	ldr	r3, [r4, #0]
 8028024:	f043 0320 	orr.w	r3, r3, #32
 8028028:	6023      	str	r3, [r4, #0]
 802802a:	2378      	movs	r3, #120	; 0x78
 802802c:	4828      	ldr	r0, [pc, #160]	; (80280d0 <_printf_i+0x248>)
 802802e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8028032:	e7e3      	b.n	8027ffc <_printf_i+0x174>
 8028034:	0659      	lsls	r1, r3, #25
 8028036:	bf48      	it	mi
 8028038:	b2b6      	uxthmi	r6, r6
 802803a:	e7e6      	b.n	802800a <_printf_i+0x182>
 802803c:	4615      	mov	r5, r2
 802803e:	e7bb      	b.n	8027fb8 <_printf_i+0x130>
 8028040:	682b      	ldr	r3, [r5, #0]
 8028042:	6826      	ldr	r6, [r4, #0]
 8028044:	6961      	ldr	r1, [r4, #20]
 8028046:	1d18      	adds	r0, r3, #4
 8028048:	6028      	str	r0, [r5, #0]
 802804a:	0635      	lsls	r5, r6, #24
 802804c:	681b      	ldr	r3, [r3, #0]
 802804e:	d501      	bpl.n	8028054 <_printf_i+0x1cc>
 8028050:	6019      	str	r1, [r3, #0]
 8028052:	e002      	b.n	802805a <_printf_i+0x1d2>
 8028054:	0670      	lsls	r0, r6, #25
 8028056:	d5fb      	bpl.n	8028050 <_printf_i+0x1c8>
 8028058:	8019      	strh	r1, [r3, #0]
 802805a:	2300      	movs	r3, #0
 802805c:	6123      	str	r3, [r4, #16]
 802805e:	4615      	mov	r5, r2
 8028060:	e7ba      	b.n	8027fd8 <_printf_i+0x150>
 8028062:	682b      	ldr	r3, [r5, #0]
 8028064:	1d1a      	adds	r2, r3, #4
 8028066:	602a      	str	r2, [r5, #0]
 8028068:	681d      	ldr	r5, [r3, #0]
 802806a:	6862      	ldr	r2, [r4, #4]
 802806c:	2100      	movs	r1, #0
 802806e:	4628      	mov	r0, r5
 8028070:	f7d8 f956 	bl	8000320 <memchr>
 8028074:	b108      	cbz	r0, 802807a <_printf_i+0x1f2>
 8028076:	1b40      	subs	r0, r0, r5
 8028078:	6060      	str	r0, [r4, #4]
 802807a:	6863      	ldr	r3, [r4, #4]
 802807c:	6123      	str	r3, [r4, #16]
 802807e:	2300      	movs	r3, #0
 8028080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028084:	e7a8      	b.n	8027fd8 <_printf_i+0x150>
 8028086:	6923      	ldr	r3, [r4, #16]
 8028088:	462a      	mov	r2, r5
 802808a:	4649      	mov	r1, r9
 802808c:	4640      	mov	r0, r8
 802808e:	47d0      	blx	sl
 8028090:	3001      	adds	r0, #1
 8028092:	d0ab      	beq.n	8027fec <_printf_i+0x164>
 8028094:	6823      	ldr	r3, [r4, #0]
 8028096:	079b      	lsls	r3, r3, #30
 8028098:	d413      	bmi.n	80280c2 <_printf_i+0x23a>
 802809a:	68e0      	ldr	r0, [r4, #12]
 802809c:	9b03      	ldr	r3, [sp, #12]
 802809e:	4298      	cmp	r0, r3
 80280a0:	bfb8      	it	lt
 80280a2:	4618      	movlt	r0, r3
 80280a4:	e7a4      	b.n	8027ff0 <_printf_i+0x168>
 80280a6:	2301      	movs	r3, #1
 80280a8:	4632      	mov	r2, r6
 80280aa:	4649      	mov	r1, r9
 80280ac:	4640      	mov	r0, r8
 80280ae:	47d0      	blx	sl
 80280b0:	3001      	adds	r0, #1
 80280b2:	d09b      	beq.n	8027fec <_printf_i+0x164>
 80280b4:	3501      	adds	r5, #1
 80280b6:	68e3      	ldr	r3, [r4, #12]
 80280b8:	9903      	ldr	r1, [sp, #12]
 80280ba:	1a5b      	subs	r3, r3, r1
 80280bc:	42ab      	cmp	r3, r5
 80280be:	dcf2      	bgt.n	80280a6 <_printf_i+0x21e>
 80280c0:	e7eb      	b.n	802809a <_printf_i+0x212>
 80280c2:	2500      	movs	r5, #0
 80280c4:	f104 0619 	add.w	r6, r4, #25
 80280c8:	e7f5      	b.n	80280b6 <_printf_i+0x22e>
 80280ca:	bf00      	nop
 80280cc:	0802bc87 	.word	0x0802bc87
 80280d0:	0802bc98 	.word	0x0802bc98

080280d4 <_read_r>:
 80280d4:	b538      	push	{r3, r4, r5, lr}
 80280d6:	4d07      	ldr	r5, [pc, #28]	; (80280f4 <_read_r+0x20>)
 80280d8:	4604      	mov	r4, r0
 80280da:	4608      	mov	r0, r1
 80280dc:	4611      	mov	r1, r2
 80280de:	2200      	movs	r2, #0
 80280e0:	602a      	str	r2, [r5, #0]
 80280e2:	461a      	mov	r2, r3
 80280e4:	f7df f866 	bl	80071b4 <_read>
 80280e8:	1c43      	adds	r3, r0, #1
 80280ea:	d102      	bne.n	80280f2 <_read_r+0x1e>
 80280ec:	682b      	ldr	r3, [r5, #0]
 80280ee:	b103      	cbz	r3, 80280f2 <_read_r+0x1e>
 80280f0:	6023      	str	r3, [r4, #0]
 80280f2:	bd38      	pop	{r3, r4, r5, pc}
 80280f4:	2400ed00 	.word	0x2400ed00

080280f8 <abort>:
 80280f8:	b508      	push	{r3, lr}
 80280fa:	2006      	movs	r0, #6
 80280fc:	f000 f84e 	bl	802819c <raise>
 8028100:	2001      	movs	r0, #1
 8028102:	f7df f84d 	bl	80071a0 <_exit>
	...

08028108 <_fstat_r>:
 8028108:	b538      	push	{r3, r4, r5, lr}
 802810a:	4d07      	ldr	r5, [pc, #28]	; (8028128 <_fstat_r+0x20>)
 802810c:	2300      	movs	r3, #0
 802810e:	4604      	mov	r4, r0
 8028110:	4608      	mov	r0, r1
 8028112:	4611      	mov	r1, r2
 8028114:	602b      	str	r3, [r5, #0]
 8028116:	f7df f892 	bl	800723e <_fstat>
 802811a:	1c43      	adds	r3, r0, #1
 802811c:	d102      	bne.n	8028124 <_fstat_r+0x1c>
 802811e:	682b      	ldr	r3, [r5, #0]
 8028120:	b103      	cbz	r3, 8028124 <_fstat_r+0x1c>
 8028122:	6023      	str	r3, [r4, #0]
 8028124:	bd38      	pop	{r3, r4, r5, pc}
 8028126:	bf00      	nop
 8028128:	2400ed00 	.word	0x2400ed00

0802812c <_isatty_r>:
 802812c:	b538      	push	{r3, r4, r5, lr}
 802812e:	4d06      	ldr	r5, [pc, #24]	; (8028148 <_isatty_r+0x1c>)
 8028130:	2300      	movs	r3, #0
 8028132:	4604      	mov	r4, r0
 8028134:	4608      	mov	r0, r1
 8028136:	602b      	str	r3, [r5, #0]
 8028138:	f7df f891 	bl	800725e <_isatty>
 802813c:	1c43      	adds	r3, r0, #1
 802813e:	d102      	bne.n	8028146 <_isatty_r+0x1a>
 8028140:	682b      	ldr	r3, [r5, #0]
 8028142:	b103      	cbz	r3, 8028146 <_isatty_r+0x1a>
 8028144:	6023      	str	r3, [r4, #0]
 8028146:	bd38      	pop	{r3, r4, r5, pc}
 8028148:	2400ed00 	.word	0x2400ed00

0802814c <_raise_r>:
 802814c:	291f      	cmp	r1, #31
 802814e:	b538      	push	{r3, r4, r5, lr}
 8028150:	4604      	mov	r4, r0
 8028152:	460d      	mov	r5, r1
 8028154:	d904      	bls.n	8028160 <_raise_r+0x14>
 8028156:	2316      	movs	r3, #22
 8028158:	6003      	str	r3, [r0, #0]
 802815a:	f04f 30ff 	mov.w	r0, #4294967295
 802815e:	bd38      	pop	{r3, r4, r5, pc}
 8028160:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028162:	b112      	cbz	r2, 802816a <_raise_r+0x1e>
 8028164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028168:	b94b      	cbnz	r3, 802817e <_raise_r+0x32>
 802816a:	4620      	mov	r0, r4
 802816c:	f000 f830 	bl	80281d0 <_getpid_r>
 8028170:	462a      	mov	r2, r5
 8028172:	4601      	mov	r1, r0
 8028174:	4620      	mov	r0, r4
 8028176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802817a:	f000 b817 	b.w	80281ac <_kill_r>
 802817e:	2b01      	cmp	r3, #1
 8028180:	d00a      	beq.n	8028198 <_raise_r+0x4c>
 8028182:	1c59      	adds	r1, r3, #1
 8028184:	d103      	bne.n	802818e <_raise_r+0x42>
 8028186:	2316      	movs	r3, #22
 8028188:	6003      	str	r3, [r0, #0]
 802818a:	2001      	movs	r0, #1
 802818c:	e7e7      	b.n	802815e <_raise_r+0x12>
 802818e:	2400      	movs	r4, #0
 8028190:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028194:	4628      	mov	r0, r5
 8028196:	4798      	blx	r3
 8028198:	2000      	movs	r0, #0
 802819a:	e7e0      	b.n	802815e <_raise_r+0x12>

0802819c <raise>:
 802819c:	4b02      	ldr	r3, [pc, #8]	; (80281a8 <raise+0xc>)
 802819e:	4601      	mov	r1, r0
 80281a0:	6818      	ldr	r0, [r3, #0]
 80281a2:	f7ff bfd3 	b.w	802814c <_raise_r>
 80281a6:	bf00      	nop
 80281a8:	240004cc 	.word	0x240004cc

080281ac <_kill_r>:
 80281ac:	b538      	push	{r3, r4, r5, lr}
 80281ae:	4d07      	ldr	r5, [pc, #28]	; (80281cc <_kill_r+0x20>)
 80281b0:	2300      	movs	r3, #0
 80281b2:	4604      	mov	r4, r0
 80281b4:	4608      	mov	r0, r1
 80281b6:	4611      	mov	r1, r2
 80281b8:	602b      	str	r3, [r5, #0]
 80281ba:	f7de ffdf 	bl	800717c <_kill>
 80281be:	1c43      	adds	r3, r0, #1
 80281c0:	d102      	bne.n	80281c8 <_kill_r+0x1c>
 80281c2:	682b      	ldr	r3, [r5, #0]
 80281c4:	b103      	cbz	r3, 80281c8 <_kill_r+0x1c>
 80281c6:	6023      	str	r3, [r4, #0]
 80281c8:	bd38      	pop	{r3, r4, r5, pc}
 80281ca:	bf00      	nop
 80281cc:	2400ed00 	.word	0x2400ed00

080281d0 <_getpid_r>:
 80281d0:	f7de bfcc 	b.w	800716c <_getpid>

080281d4 <_init>:
 80281d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281d6:	bf00      	nop
 80281d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80281da:	bc08      	pop	{r3}
 80281dc:	469e      	mov	lr, r3
 80281de:	4770      	bx	lr

080281e0 <_fini>:
 80281e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281e2:	bf00      	nop
 80281e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80281e6:	bc08      	pop	{r3}
 80281e8:	469e      	mov	lr, r3
 80281ea:	4770      	bx	lr
