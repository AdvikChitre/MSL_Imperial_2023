
Gateway_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000269c8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a74  08026c98  08026c98  00036c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802a70c  0802a70c  0003a70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0802a710  0802a710  0003a710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000530  24000000  0802a714  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RxDecripSection 00000060  24000530  0802ac44  00040530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 00000060  24000590  0802aca4  00040590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000e7b8  240005f0  0802ad04  000405f0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2400eda8  0802ad04  0004eda8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000405f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000616c9  00000000  00000000  0004061e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000d5b7  00000000  00000000  000a1ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003be8  00000000  00000000  000af2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00003908  00000000  00000000  000b2e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00050b77  00000000  00000000  000b6790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00062c4d  00000000  00000000  00107307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00189649  00000000  00000000  00169f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002f359d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00010058  00000000  00000000  002f35f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240005f0 	.word	0x240005f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08026c80 	.word	0x08026c80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240005f4 	.word	0x240005f4
 800030c:	08026c80 	.word	0x08026c80

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80003bc:	73fb      	strb	r3, [r7, #15]
 80003be:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
 80003d8:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	2304      	movs	r3, #4
}
 80003fe:	4618      	mov	r0, r3
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <OD_getIndex+0x14>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	e000      	b.n	8000420 <OD_getIndex+0x16>
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d101      	bne.n	8000440 <OD_extension_init+0x14>
 800043c:	2305      	movs	r3, #5
 800043e:	e003      	b.n	8000448 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af02      	add	r7, sp, #8
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	460b      	mov	r3, r1
 8000462:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000464:	7af9      	ldrb	r1, [r7, #11]
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2304      	movs	r3, #4
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	68f8      	ldr	r0, [r7, #12]
 8000470:	f000 ffee 	bl	8001450 <OD_get_value>
 8000474:	4603      	mov	r3, r0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b086      	sub	sp, #24
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
 800048a:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d00c      	beq.n	80004ac <OD_read_1014_default+0x2e>
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	7c5b      	ldrb	r3, [r3, #17]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d108      	bne.n	80004ac <OD_read_1014_default+0x2e>
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d005      	beq.n	80004ac <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	d902      	bls.n	80004ac <OD_read_1014_default+0x2e>
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80004ac:	2309      	movs	r3, #9
 80004ae:	e01b      	b.n	80004e8 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <OD_read_1014_default+0x44>
 80004be:	2300      	movs	r3, #0
 80004c0:	e001      	b.n	80004c6 <OD_read_1014_default+0x48>
 80004c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80004c6:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004ce:	3380      	adds	r3, #128	; 0x80
 80004d0:	461a      	mov	r2, r3
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80004d8:	6939      	ldr	r1, [r7, #16]
 80004da:	68b8      	ldr	r0, [r7, #8]
 80004dc:	f7ff ff86 	bl	80003ec <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2204      	movs	r2, #4
 80004e4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00f      	beq.n	8000524 <OD_read_1003+0x34>
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00c      	beq.n	8000524 <OD_read_1003+0x34>
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d009      	beq.n	8000524 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d803      	bhi.n	800051e <OD_read_1003+0x2e>
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	7c5b      	ldrb	r3, [r3, #17]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d102      	bne.n	8000524 <OD_read_1003+0x34>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000524:	2309      	movs	r3, #9
 8000526:	e04d      	b.n	80005c4 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	7f1b      	ldrb	r3, [r3, #28]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d801      	bhi.n	800053a <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000536:	2309      	movs	r3, #9
 8000538:	e044      	b.n	80005c4 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	7c5b      	ldrb	r3, [r3, #17]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10b      	bne.n	800055a <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000548:	4619      	mov	r1, r3
 800054a:	68b8      	ldr	r0, [r7, #8]
 800054c:	f7ff ff3e 	bl	80003cc <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	e034      	b.n	80005c4 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	7c5a      	ldrb	r2, [r3, #17]
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000564:	429a      	cmp	r2, r3
 8000566:	d82c      	bhi.n	80005c2 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	7f5b      	ldrb	r3, [r3, #29]
 800056c:	b29a      	uxth	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	7c5b      	ldrb	r3, [r3, #17]
 8000572:	b29b      	uxth	r3, r3
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	b29b      	uxth	r3, r3
 8000578:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800057a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800057e:	2b00      	cmp	r3, #0
 8000580:	da07      	bge.n	8000592 <OD_read_1003+0xa2>
            index += em->fifoSize;
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	7f1b      	ldrb	r3, [r3, #28]
 8000586:	b29a      	uxth	r2, r3
 8000588:	8afb      	ldrh	r3, [r7, #22]
 800058a:	4413      	add	r3, r2
 800058c:	b29b      	uxth	r3, r3
 800058e:	82fb      	strh	r3, [r7, #22]
 8000590:	e007      	b.n	80005a2 <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 8000592:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	7f12      	ldrb	r2, [r2, #28]
 800059a:	4293      	cmp	r3, r2
 800059c:	db01      	blt.n	80005a2 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 800059e:	2309      	movs	r3, #9
 80005a0:	e010      	b.n	80005c4 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	f7ff ff1a 	bl	80003ec <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2204      	movs	r2, #4
 80005bc:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e000      	b.n	80005c4 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 80005c2:	2319      	movs	r3, #25
    }
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <OD_write_1003+0x2e>
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	7c5b      	ldrb	r3, [r3, #17]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d108      	bne.n	80005fa <OD_write_1003+0x2e>
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d005      	beq.n	80005fa <OD_write_1003+0x2e>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d102      	bne.n	80005fa <OD_write_1003+0x2e>
        || countWritten == NULL)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80005fa:	2309      	movs	r3, #9
 80005fc:	e012      	b.n	8000624 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80005fe:	68b8      	ldr	r0, [r7, #8]
 8000600:	f7ff fed6 	bl	80003b0 <CO_getUint8>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 800060a:	230f      	movs	r3, #15
 800060c:	e00a      	b.n	8000624 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800063a:	2300      	movs	r3, #0
 800063c:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d01a      	beq.n	800067a <CO_EM_init+0x4e>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d017      	beq.n	800067a <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <CO_EM_init+0x2c>
 8000650:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d810      	bhi.n	800067a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00d      	beq.n	800067a <CO_EM_init+0x4e>
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00a      	beq.n	800067a <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000664:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000668:	2b00      	cmp	r3, #0
 800066a:	d006      	beq.n	800067a <CO_EM_init+0x4e>
 800066c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000670:	2b00      	cmp	r3, #0
 8000672:	db02      	blt.n	800067a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	e0a7      	b.n	80007d0 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8000680:	2250      	movs	r2, #80	; 0x50
 8000682:	2100      	movs	r1, #0
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f025 fb6f 	bl	8025d68 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000690:	2300      	movs	r3, #0
 8000692:	2201      	movs	r2, #1
 8000694:	2100      	movs	r1, #0
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 ff41 	bl	800151e <OD_getPtr>
 800069c:	4602      	mov	r2, r0
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10c      	bne.n	80006c4 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80006aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d006      	beq.n	80006be <CO_EM_init+0x92>
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff feaa 	bl	800040a <OD_getIndex>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006bc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80006be:	f06f 030b 	mvn.w	r3, #11
 80006c2:	e085      	b.n	80007d0 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006d8:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80006da:	f107 0210 	add.w	r2, r7, #16
 80006de:	2301      	movs	r3, #1
 80006e0:	2100      	movs	r1, #0
 80006e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006e4:	f7ff feb6 	bl	8000454 <OD_get_u32>
 80006e8:	4603      	mov	r3, r0
 80006ea:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80006ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d104      	bne.n	80006fe <CO_EM_init+0xd2>
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <CO_EM_init+0x1ac>)
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d010      	beq.n	8000720 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80006fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <CO_EM_init+0xe6>
 8000704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000706:	f7ff fe80 	bl	800040a <OD_getIndex>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000710:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 8000712:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 800071a:	f06f 030b 	mvn.w	r3, #11
 800071e:	e057      	b.n	80007d0 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8000720:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000724:	b29b      	uxth	r3, r3
 8000726:	3380      	adds	r3, #128	; 0x80
 8000728:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43db      	mvns	r3, r3
 800072e:	0fdb      	lsrs	r3, r3, #31
 8000730:	b2db      	uxtb	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4a26      	ldr	r2, [pc, #152]	; (80007dc <CO_EM_init+0x1b0>)
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <CO_EM_init+0x1b4>)
 8000748:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3330      	adds	r3, #48	; 0x30
 800074e:	4619      	mov	r1, r3
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f7ff fe6b 	bl	800042c <OD_extension_init>
 8000756:	4603      	mov	r3, r0
 8000758:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800075a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00c      	beq.n	800077c <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <CO_EM_init+0x14a>
 8000768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800076a:	f7ff fe4e 	bl	800040a <OD_getIndex>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000774:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000776:	f06f 030b 	mvn.w	r3, #11
 800077a:	e029      	b.n	80007d0 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000786:	8aba      	ldrh	r2, [r7, #20]
 8000788:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800078a:	2300      	movs	r3, #0
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2308      	movs	r3, #8
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2300      	movs	r3, #0
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f004 f99b 	bl	8004ad0 <CO_CANtxBufferInit>
 800079a:	4602      	mov	r2, r0
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	e010      	b.n	80007d0 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <CO_EM_init+0x1b8>)
 80007b8:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <CO_EM_init+0x1bc>)
 80007be:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3340      	adds	r3, #64	; 0x40
 80007c4:	4619      	mov	r1, r3
 80007c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80007c8:	f7ff fe30 	bl	800042c <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80007cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	7ffff800 	.word	0x7ffff800
 80007dc:	0800047f 	.word	0x0800047f
 80007e0:	080010c1 	.word	0x080010c1
 80007e4:	080004f1 	.word	0x080004f1
 80007e8:	080005cd 	.word	0x080005cd

080007ec <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b08d      	sub	sp, #52	; 0x34
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	4611      	mov	r1, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	4613      	mov	r3, r2
 8000800:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 80a6 	beq.w	8000956 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 0307 	and.w	r3, r3, #7
 8000818:	2201      	movs	r2, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000826:	2b09      	cmp	r3, #9
 8000828:	d90a      	bls.n	8000840 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 800082a:	2305      	movs	r3, #5
 800082c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000830:	2301      	movs	r3, #1
 8000832:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000836:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 800083a:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 800084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000852:	4013      	ands	r3, r2
 8000854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d004      	beq.n	8000868 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 800085e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <CO_error+0x88>
            return;
 8000866:	e079      	b.n	800095c <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086c:	2b00      	cmp	r3, #0
 800086e:	d074      	beq.n	800095a <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000870:	2300      	movs	r3, #0
 8000872:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	061a      	lsls	r2, r3, #24
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	4313      	orrs	r3, r2
 800087c:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 800087e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000880:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000886:	f3ef 8210 	mrs	r2, PRIMASK
 800088a:	617a      	str	r2, [r7, #20]
  return(result);
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d008      	beq.n	80008ac <CO_error+0xc0>
 800089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	e00b      	b.n	80008c4 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 80008ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80008b6:	43db      	mvns	r3, r3
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	4013      	ands	r3, r2
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	7f1b      	ldrb	r3, [r3, #28]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d93c      	bls.n	8000946 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	7f5b      	ldrb	r3, [r3, #29]
 80008d0:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 80008d2:	7efb      	ldrb	r3, [r7, #27]
 80008d4:	3301      	adds	r3, #1
 80008d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	7f1b      	ldrb	r3, [r3, #28]
 80008de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d302      	bcc.n	80008ec <CO_error+0x100>
            fifoWrPtrNext = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	7f9b      	ldrb	r3, [r3, #30]
 80008f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d103      	bne.n	8000900 <CO_error+0x114>
            em->fifoOverflow = 1;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2201      	movs	r2, #1
 80008fc:	77da      	strb	r2, [r3, #31]
 80008fe:	e022      	b.n	8000946 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	7efb      	ldrb	r3, [r7, #27]
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	4413      	add	r3, r2
 800090a:	6a3a      	ldr	r2, [r7, #32]
 800090c:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	699a      	ldr	r2, [r3, #24]
 8000912:	7efb      	ldrb	r3, [r7, #27]
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4413      	add	r3, r2
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000922:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	7f1b      	ldrb	r3, [r3, #28]
 8000930:	3b01      	subs	r3, #1
 8000932:	429a      	cmp	r2, r3
 8000934:	da07      	bge.n	8000946 <CO_error+0x15a>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800093c:	3301      	adds	r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	f383 8810 	msr	PRIMASK, r3
}
 8000954:	e002      	b.n	800095c <CO_error+0x170>
    if (em == NULL) return;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <CO_error+0x170>
            return;
 800095a:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 800095c:	3734      	adds	r7, #52	; 0x34
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <OD_getIndex+0x14>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	e000      	b.n	8000998 <OD_getIndex+0x16>
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <OD_extension_init>:
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <OD_extension_init+0x14>
 80009b4:	2305      	movs	r3, #5
 80009b6:	e003      	b.n	80009c0 <OD_extension_init+0x1c>
    entry->extension = extension;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <OD_get_u32>:
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	460b      	mov	r3, r1
 80009da:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80009dc:	7af9      	ldrb	r1, [r7, #11]
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2304      	movs	r3, #4
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f000 fd32 	bl	8001450 <OD_get_value>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 80009f6:	b480      	push	{r7}
 80009f8:	b087      	sub	sp, #28
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	3305      	adds	r3, #5
 8000a0e:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000a10:	7cfb      	ldrb	r3, [r7, #19]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b25a      	sxtb	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	2201      	movs	r2, #1
 8000a24:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000a26:	bf00      	nop
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b088      	sub	sp, #32
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d012      	beq.n	8000a72 <OD_write_1016+0x40>
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d00f      	beq.n	8000a72 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	7c5b      	ldrb	r3, [r3, #17]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00b      	beq.n	8000a72 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	7c5a      	ldrb	r2, [r3, #17]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	7a1b      	ldrb	r3, [r3, #8]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d805      	bhi.n	8000a72 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d102      	bne.n	8000a72 <OD_write_1016+0x40>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000a72:	2309      	movs	r3, #9
 8000a74:	e020      	b.n	8000ab8 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000a76:	68b8      	ldr	r0, [r7, #8]
 8000a78:	f7ff ff75 	bl	8000966 <CO_getUint32>
 8000a7c:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	0c1b      	lsrs	r3, r3, #16
 8000a82:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	7c5b      	ldrb	r3, [r3, #17]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	b2d9      	uxtb	r1, r3
 8000a90:	8abb      	ldrh	r3, [r7, #20]
 8000a92:	7dfa      	ldrb	r2, [r7, #23]
 8000a94:	69f8      	ldr	r0, [r7, #28]
 8000a96:	f000 f8bf 	bl	8000c18 <CO_HBconsumer_initEntry>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000a9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	e006      	b.n	8000ab8 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	68b9      	ldr	r1, [r7, #8]
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f000 fb05 	bl	80010c0 <OD_writeOriginal>
 8000ab6:	4603      	mov	r3, r0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00b      	beq.n	8000aec <CO_HBconsumer_init+0x2c>
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d008      	beq.n	8000aec <CO_HBconsumer_init+0x2c>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <CO_HBconsumer_init+0x2c>
 8000ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	e08a      	b.n	8000c08 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000af2:	2230      	movs	r2, #48	; 0x30
 8000af4:	2100      	movs	r1, #0
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f025 f936 	bl	8025d68 <memset>
    HBcons->em = em;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b0c:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b12:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000b18:	78fa      	ldrb	r2, [r7, #3]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d304      	bcc.n	8000b28 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b20:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	e000      	b.n	8000b2a <CO_HBconsumer_init+0x6a>
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	77fb      	strb	r3, [r7, #31]
 8000b32:	e041      	b.n	8000bb8 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000b34:	7ffb      	ldrb	r3, [r7, #31]
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	f107 0214 	add.w	r2, r7, #20
 8000b3e:	2301      	movs	r3, #1
 8000b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b42:	f7ff ff43 	bl	80009cc <OD_get_u32>
 8000b46:	4603      	mov	r3, r0
 8000b48:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000b4a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00c      	beq.n	8000b6c <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <CO_HBconsumer_init+0xa6>
 8000b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b5a:	f7ff ff12 	bl	8000982 <OD_getIndex>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	461a      	mov	r2, r3
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000b66:	f06f 030b 	mvn.w	r3, #11
 8000b6a:	e04d      	b.n	8000c08 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	0c1b      	lsrs	r3, r3, #16
 8000b70:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8000b76:	8b7b      	ldrh	r3, [r7, #26]
 8000b78:	7f7a      	ldrb	r2, [r7, #29]
 8000b7a:	7ff9      	ldrb	r1, [r7, #31]
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f84b 	bl	8000c18 <CO_HBconsumer_initEntry>
 8000b82:	4603      	mov	r3, r0
 8000b84:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000b86:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d011      	beq.n	8000bb2 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <CO_HBconsumer_init+0xe2>
 8000b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b96:	f7ff fef4 	bl	8000982 <OD_getIndex>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba0:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8000ba2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000ba6:	f113 0f0c 	cmn.w	r3, #12
 8000baa:	d002      	beq.n	8000bb2 <CO_HBconsumer_init+0xf2>
                return ret;
 8000bac:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bb0:	e02a      	b.n	8000c08 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000bb2:	7ffb      	ldrb	r3, [r7, #31]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	77fb      	strb	r3, [r7, #31]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	7a1b      	ldrb	r3, [r3, #8]
 8000bbc:	7ffa      	ldrb	r2, [r7, #31]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d3b8      	bcc.n	8000b34 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <CO_HBconsumer_init+0x150>)
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <CO_HBconsumer_init+0x154>)
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3320      	adds	r3, #32
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bdc:	f7ff fee2 	bl	80009a4 <OD_extension_init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8000be4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00c      	beq.n	8000c06 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <CO_HBconsumer_init+0x140>
 8000bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bf4:	f7ff fec5 	bl	8000982 <OD_getIndex>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000c00:	f06f 030b 	mvn.w	r3, #11
 8000c04:	e000      	b.n	8000c08 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	08001011 	.word	0x08001011
 8000c14:	08000a33 	.word	0x08000a33

08000c18 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08d      	sub	sp, #52	; 0x34
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	4608      	mov	r0, r1
 8000c22:	4611      	mov	r1, r2
 8000c24:	461a      	mov	r2, r3
 8000c26:	4603      	mov	r3, r0
 8000c28:	70fb      	strb	r3, [r7, #3]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70bb      	strb	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000c32:	2300      	movs	r3, #0
 8000c34:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <CO_HBconsumer_initEntry+0x2e>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7a1b      	ldrb	r3, [r3, #8]
 8000c40:	78fa      	ldrb	r2, [r7, #3]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d302      	bcc.n	8000c4c <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e077      	b.n	8000d3c <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8000c4c:	883b      	ldrh	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d024      	beq.n	8000c9c <CO_HBconsumer_initEntry+0x84>
 8000c52:	78bb      	ldrb	r3, [r7, #2]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d021      	beq.n	8000c9c <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	77bb      	strb	r3, [r7, #30]
 8000c5c:	e019      	b.n	8000c92 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	7fbb      	ldrb	r3, [r7, #30]
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	4413      	add	r3, r2
 8000c68:	f107 0408 	add.w	r4, r7, #8
 8000c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8000c72:	78fa      	ldrb	r2, [r7, #3]
 8000c74:	7fbb      	ldrb	r3, [r7, #30]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d008      	beq.n	8000c8c <CO_HBconsumer_initEntry+0x74>
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <CO_HBconsumer_initEntry+0x74>
 8000c80:	7a3b      	ldrb	r3, [r7, #8]
 8000c82:	78ba      	ldrb	r2, [r7, #2]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d101      	bne.n	8000c8c <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8000c88:	23f4      	movs	r3, #244	; 0xf4
 8000c8a:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000c8c:	7fbb      	ldrb	r3, [r7, #30]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	77bb      	strb	r3, [r7, #30]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	7fba      	ldrb	r2, [r7, #30]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d3e0      	bcc.n	8000c5e <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000c9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d149      	bne.n	8000d38 <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	4413      	add	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	78ba      	ldrb	r2, [r7, #2]
 8000cb4:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8000cb6:	883b      	ldrh	r3, [r7, #0]
 8000cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	22ff      	movs	r2, #255	; 0xff
 8000cca:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00d      	beq.n	8000cf6 <CO_HBconsumer_initEntry+0xde>
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d009      	beq.n	8000cf6 <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000cec:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	709a      	strb	r2, [r3, #2]
 8000cf4:	e007      	b.n	8000d06 <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2200      	movs	r2, #0
 8000d04:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000d20:	8bba      	ldrh	r2, [r7, #28]
 8000d22:	4c08      	ldr	r4, [pc, #32]	; (8000d44 <CO_HBconsumer_initEntry+0x12c>)
 8000d24:	9402      	str	r4, [sp, #8]
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d30:	f003 fe72 	bl	8004a18 <CO_CANrxBufferInit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8000d38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3724      	adds	r7, #36	; 0x24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	080009f7 	.word	0x080009f7

08000d48 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8000d56:	81fb      	strh	r3, [r7, #14]
 8000d58:	89fb      	ldrh	r3, [r7, #14]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <OD_getIndex+0x14>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	e000      	b.n	8000d7c <OD_getIndex+0x16>
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <OD_extension_init>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <OD_extension_init+0x14>
 8000d98:	2305      	movs	r3, #5
 8000d9a:	e003      	b.n	8000da4 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <OD_get_u16>:
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000dc0:	7af9      	ldrb	r1, [r7, #11]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f000 fb40 	bl	8001450 <OD_get_value>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8000dda:	b480      	push	{r7}
 8000ddc:	b087      	sub	sp, #28
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3305      	adds	r3, #5
 8000dee:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	785b      	ldrb	r3, [r3, #1]
 8000dfa:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d10a      	bne.n	8000e1c <CO_NMT_receive+0x42>
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d004      	beq.n	8000e16 <CO_NMT_receive+0x3c>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	78db      	ldrb	r3, [r3, #3]
 8000e10:	7bba      	ldrb	r2, [r7, #14]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d102      	bne.n	8000e1c <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00c      	beq.n	8000e56 <OD_write_1017+0x2e>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	7c5b      	ldrb	r3, [r3, #17]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d108      	bne.n	8000e56 <OD_write_1017+0x2e>
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d102      	bne.n	8000e56 <OD_write_1017+0x2e>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8000e56:	2309      	movs	r3, #9
 8000e58:	e017      	b.n	8000e8a <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8000e60:	68b8      	ldr	r0, [r7, #8]
 8000e62:	f7ff ff71 	bl	8000d48 <CO_getUint16>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fb03 f202 	mul.w	r2, r3, r2
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 f91c 	bl	80010c0 <OD_writeOriginal>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00b      	beq.n	8000ec4 <CO_NMT_init+0x30>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <CO_NMT_init+0x30>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d005      	beq.n	8000ec4 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8000eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <CO_NMT_init+0x30>
 8000ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	e098      	b.n	8000ffc <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8000eca:	222c      	movs	r2, #44	; 0x2c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f024 ff4a 	bl	8025d68 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8c3a      	ldrh	r2, [r7, #32]
 8000eea:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8000ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8000f02:	f107 0214 	add.w	r2, r7, #20
 8000f06:	2301      	movs	r3, #1
 8000f08:	2100      	movs	r1, #0
 8000f0a:	68b8      	ldr	r0, [r7, #8]
 8000f0c:	f7ff ff50 	bl	8000db0 <OD_get_u16>
 8000f10:	4603      	mov	r3, r0
 8000f12:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000f14:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00c      	beq.n	8000f36 <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8000f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <CO_NMT_init+0x9c>
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f7ff ff1f 	bl	8000d66 <OD_getIndex>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f2e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000f30:	f06f 030b 	mvn.w	r3, #11
 8000f34:	e062      	b.n	8000ffc <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8000f36:	8abb      	ldrh	r3, [r7, #20]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fb03 f202 	mul.w	r2, r3, r2
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	; (8001004 <CO_NMT_init+0x170>)
 8000f50:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <CO_NMT_init+0x174>)
 8000f56:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68b8      	ldr	r0, [r7, #8]
 8000f60:	f7ff ff12 	bl	8000d88 <OD_extension_init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000f68:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00c      	beq.n	8000f8a <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8000f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <CO_NMT_init+0xf0>
 8000f76:	68b8      	ldr	r0, [r7, #8]
 8000f78:	f7ff fef5 	bl	8000d66 <OD_getIndex>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f82:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000f84:	f06f 030b 	mvn.w	r3, #11
 8000f88:	e038      	b.n	8000ffc <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d903      	bls.n	8000f9e <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8000f9e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fa0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <CO_NMT_init+0x178>)
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fb4:	f003 fd30 	bl	8004a18 <CO_CANrxBufferInit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8000fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <CO_NMT_init+0x136>
        return ret;
 8000fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc8:	e018      	b.n	8000ffc <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8000fd0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000fd2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fe0:	f003 fd76 	bl	8004ad0 <CO_CANtxBufferInit>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e001      	b.n	8000ffc <CO_NMT_init+0x168>
    }

    return ret;
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08001011 	.word	0x08001011
 8001008:	08000e29 	.word	0x08000e29
 800100c:	08000ddb 	.word	0x08000ddb

08001010 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <OD_readOriginal+0x20>
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <OD_readOriginal+0x20>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001030:	2309      	movs	r3, #9
 8001032:	e041      	b.n	80010b8 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001046:	230e      	movs	r3, #14
 8001048:	e036      	b.n	80010b8 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <OD_readOriginal+0x4e>
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	d922      	bls.n	80010a4 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	429a      	cmp	r2, r3
 8001066:	d801      	bhi.n	800106c <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001068:	2309      	movs	r3, #9
 800106a:	e025      	b.n	80010b8 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4413      	add	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d90a      	bls.n	800109e <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	441a      	add	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001098:	23ff      	movs	r3, #255	; 0xff
 800109a:	75fb      	strb	r3, [r7, #23]
 800109c:	e002      	b.n	80010a4 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f024 fe4f 	bl	8025d4c <memcpy>

    *countRead = dataLenToCopy;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	601a      	str	r2, [r3, #0]
    return returnCode;
 80010b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <OD_writeOriginal+0x20>
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <OD_writeOriginal+0x20>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80010e0:	2309      	movs	r3, #9
 80010e2:	e047      	b.n	8001174 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80010f6:	230e      	movs	r3, #14
 80010f8:	e03c      	b.n	8001174 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <OD_writeOriginal+0x4e>
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	429a      	cmp	r2, r3
 800110c:	d922      	bls.n	8001154 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	429a      	cmp	r2, r3
 8001116:	d801      	bhi.n	800111c <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001118:	2309      	movs	r3, #9
 800111a:	e02b      	b.n	8001174 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4413      	add	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	d90a      	bls.n	800114e <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	441a      	add	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001148:	23ff      	movs	r3, #255	; 0xff
 800114a:	75fb      	strb	r3, [r7, #23]
 800114c:	e002      	b.n	8001154 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	d201      	bcs.n	8001160 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 800115c:	230c      	movs	r3, #12
 800115e:	e009      	b.n	8001174 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	69b8      	ldr	r0, [r7, #24]
 8001166:	f024 fdf1 	bl	8025d4c <memcpy>

    *countWritten = dataLenToCopy;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 800118a:	2302      	movs	r3, #2
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 80011a6:	2302      	movs	r3, #2
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <OD_find+0x1a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <OD_find+0x1e>
        return NULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e046      	b.n	8001260 <OD_find+0xac>
    }

    uint16_t min = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 80011de:	e026      	b.n	800122e <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 80011e0:	8afa      	ldrh	r2, [r7, #22]
 80011e2:	8abb      	ldrh	r3, [r7, #20]
 80011e4:	4413      	add	r3, r2
 80011e6:	105b      	asrs	r3, r3, #1
 80011e8:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6859      	ldr	r1, [r3, #4]
 80011ee:	89fa      	ldrh	r2, [r7, #14]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	429a      	cmp	r2, r3
 8001204:	d101      	bne.n	800120a <OD_find+0x56>
            return entry;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	e02a      	b.n	8001260 <OD_find+0xac>
        }

        if (index < entry->index) {
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	429a      	cmp	r2, r3
 8001212:	d209      	bcs.n	8001228 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <OD_find+0x6e>
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	3b01      	subs	r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	e000      	b.n	8001224 <OD_find+0x70>
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	82bb      	strh	r3, [r7, #20]
 8001226:	e002      	b.n	800122e <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001228:	89fb      	ldrh	r3, [r7, #14]
 800122a:	3301      	adds	r3, #1
 800122c:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 800122e:	8afa      	ldrh	r2, [r7, #22]
 8001230:	8abb      	ldrh	r3, [r7, #20]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3d4      	bcc.n	80011e0 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001236:	8afa      	ldrh	r2, [r7, #22]
 8001238:	8abb      	ldrh	r3, [r7, #20]
 800123a:	429a      	cmp	r2, r3
 800123c:	d10f      	bne.n	800125e <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	8afa      	ldrh	r2, [r7, #22]
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	887a      	ldrh	r2, [r7, #2]
 8001256:	429a      	cmp	r2, r3
 8001258:	d101      	bne.n	800125e <OD_find+0xaa>
            return entry;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	e000      	b.n	8001260 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 800126c:	b480      	push	{r7}
 800126e:	b08d      	sub	sp, #52	; 0x34
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	460b      	mov	r3, r1
 800127a:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <OD_getSub+0x1e>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <OD_getSub+0x22>
 800128a:	2305      	movs	r3, #5
 800128c:	e0d2      	b.n	8001434 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <OD_getSub+0x2c>
 8001294:	2309      	movs	r3, #9
 8001296:	e0cd      	b.n	8001434 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	78db      	ldrb	r3, [r3, #3]
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d050      	beq.n	800134a <OD_getSub+0xde>
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	f300 808c 	bgt.w	80013c6 <OD_getSub+0x15a>
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d002      	beq.n	80012b8 <OD_getSub+0x4c>
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d015      	beq.n	80012e2 <OD_getSub+0x76>
 80012b6:	e086      	b.n	80013c6 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <OD_getSub+0x56>
 80012be:	230e      	movs	r3, #14
 80012c0:	e0b8      	b.n	8001434 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	791a      	ldrb	r2, [r3, #4]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	609a      	str	r2, [r3, #8]
        break;
 80012e0:	e073      	b.n	80013ca <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	7afa      	ldrb	r2, [r7, #11]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d301      	bcc.n	80012f0 <OD_getSub+0x84>
 80012ec:	230e      	movs	r3, #14
 80012ee:	e0a1      	b.n	8001434 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	7a1a      	ldrb	r2, [r3, #8]
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	2201      	movs	r2, #1
 8001310:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001312:	e05a      	b.n	80013ca <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	7a5a      	ldrb	r2, [r3, #9]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	7afa      	ldrb	r2, [r7, #11]
 800132e:	3a01      	subs	r2, #1
 8001330:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4413      	add	r3, r2
 8001338:	e000      	b.n	800133c <OD_getSub+0xd0>
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133e:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	609a      	str	r2, [r3, #8]
        break;
 8001348:	e03f      	b.n	80013ca <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001354:	2300      	movs	r3, #0
 8001356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800135a:	e01c      	b.n	8001396 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 800135c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	461a      	mov	r2, r3
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	4413      	add	r3, r2
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	7afa      	ldrb	r2, [r7, #11]
 8001372:	429a      	cmp	r2, r3
 8001374:	d10a      	bne.n	800138c <OD_getSub+0x120>
                odo = &odoArr[i];
 8001376:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	461a      	mov	r2, r3
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	4413      	add	r3, r2
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800138a:	e00a      	b.n	80013a2 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 800138c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001390:	3301      	adds	r3, #1
 8001392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	789b      	ldrb	r3, [r3, #2]
 800139a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3dc      	bcc.n	800135c <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <OD_getSub+0x140>
 80013a8:	230e      	movs	r3, #14
 80013aa:	e043      	b.n	8001434 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	795a      	ldrb	r2, [r3, #5]
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	609a      	str	r2, [r3, #8]
        break;
 80013c4:	e001      	b.n	80013ca <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 80013c6:	2309      	movs	r3, #9
 80013c8:	e034      	b.n	8001434 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <OD_getSub+0x16c>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <OD_getSub+0x180>
        io->read = OD_readOriginal;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <OD_getSub+0x1d4>)
 80013dc:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a18      	ldr	r2, [pc, #96]	; (8001444 <OD_getSub+0x1d8>)
 80013e2:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	e01c      	b.n	8001426 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <OD_getSub+0x192>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	e000      	b.n	8001400 <OD_getSub+0x194>
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <OD_getSub+0x1aa>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	e000      	b.n	8001418 <OD_getSub+0x1ac>
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	7afa      	ldrb	r2, [r7, #11]
 8001430:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3734      	adds	r7, #52	; 0x34
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	08001011 	.word	0x08001011
 8001444:	080010c1 	.word	0x080010c1
 8001448:	0800117d 	.word	0x0800117d
 800144c:	08001199 	.word	0x08001199

08001450 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b08f      	sub	sp, #60	; 0x3c
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	460b      	mov	r3, r1
 800145e:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <OD_get_value+0x1a>
 8001466:	2309      	movs	r3, #9
 8001468:	e024      	b.n	80014b4 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001474:	f107 0214 	add.w	r2, r7, #20
 8001478:	7af9      	ldrb	r1, [r7, #11]
 800147a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff fef5 	bl	800126c <OD_getSub>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001488:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <OD_get_value+0x46>
 8001490:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001494:	e00e      	b.n	80014b4 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <OD_get_value+0x54>
 80014a0:	230b      	movs	r3, #11
 80014a2:	e007      	b.n	80014b4 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 80014a4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014b0:	47a0      	blx	r4
 80014b2:	4603      	mov	r3, r0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	373c      	adds	r7, #60	; 0x3c
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b08f      	sub	sp, #60	; 0x3c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	460b      	mov	r3, r1
 80014ca:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80014d6:	f107 0214 	add.w	r2, r7, #20
 80014da:	7af9      	ldrb	r1, [r7, #11]
 80014dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff fec4 	bl	800126c <OD_getSub>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 80014ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <OD_set_value+0x3c>
 80014f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80014f6:	e00e      	b.n	8001516 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 80014f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <OD_set_value+0x4a>
 8001502:	230b      	movs	r3, #11
 8001504:	e007      	b.n	8001516 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001506:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001512:	47a0      	blx	r4
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	373c      	adds	r7, #60	; 0x3c
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}

0800151e <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b08e      	sub	sp, #56	; 0x38
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	460b      	mov	r3, r1
 800152c:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001534:	f107 0214 	add.w	r2, r7, #20
 8001538:	7af9      	ldrb	r1, [r7, #11]
 800153a:	2301      	movs	r3, #1
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff fe95 	bl	800126c <OD_getSub>
 8001542:	4603      	mov	r3, r0
 8001544:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001548:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800154c:	2b00      	cmp	r3, #0
 800154e:	d116      	bne.n	800157e <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <OD_getPtr+0x42>
 8001558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001560:	2309      	movs	r3, #9
 8001562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001566:	e00a      	b.n	800157e <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <OD_getPtr+0x60>
 800156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	d002      	beq.n	800157e <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001578:	230b      	movs	r3, #11
 800157a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <OD_getPtr+0x6e>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800158a:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 800158c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <OD_getPtr+0x7c>
 8001594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e000      	b.n	800159c <OD_getPtr+0x7e>
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80015ce:	81fb      	strh	r3, [r7, #14]
 80015d0:	89fb      	ldrh	r3, [r7, #14]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
 8001604:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	2304      	movs	r3, #4
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <OD_getIndex+0x14>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	e000      	b.n	800162e <OD_getIndex+0x16>
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <OD_extension_init>:
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <OD_extension_init+0x14>
 800164a:	2305      	movs	r3, #5
 800164c:	e003      	b.n	8001656 <OD_extension_init+0x1c>
    entry->extension = extension;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <OD_get_u8>:
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af02      	add	r7, sp, #8
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	460b      	mov	r3, r1
 8001670:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001672:	7af9      	ldrb	r1, [r7, #11]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2301      	movs	r3, #1
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff fee7 	bl	8001450 <OD_get_value>
 8001682:	4603      	mov	r3, r0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <OD_get_u16>:
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af02      	add	r7, sp, #8
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	460b      	mov	r3, r1
 800169a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800169c:	7af9      	ldrb	r1, [r7, #11]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2302      	movs	r3, #2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f7ff fed2 	bl	8001450 <OD_get_value>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <OD_get_u32>:
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af02      	add	r7, sp, #8
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	460b      	mov	r3, r1
 80016c4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80016c6:	7af9      	ldrb	r1, [r7, #11]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2304      	movs	r3, #4
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff febd 	bl	8001450 <OD_get_value>
 80016d6:	4603      	mov	r3, r0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <OD_write_dummy+0x1a>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <OD_read_dummy+0x20>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <OD_read_dummy+0x20>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001728:	2309      	movs	r3, #9
 800172a:	e010      	b.n	800174e <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	d902      	bls.n	800173c <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	2100      	movs	r1, #0
 8001740:	68b8      	ldr	r0, [r7, #8]
 8001742:	f024 fb11 	bl	8025d68 <memset>

    *countRead = count;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b092      	sub	sp, #72	; 0x48
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 800177e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	3310      	adds	r3, #16
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 800179a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d901      	bls.n	80017a6 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 80017a2:	2307      	movs	r3, #7
 80017a4:	e090      	b.n	80018c8 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 80017a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017aa:	2b1f      	cmp	r3, #31
 80017ac:	d81a      	bhi.n	80017e4 <PDOconfigMap+0x8c>
 80017ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d116      	bne.n	80017e4 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 80017b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 80017ba:	2214      	movs	r2, #20
 80017bc:	2100      	movs	r1, #0
 80017be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017c0:	f024 fad2 	bl	8025d68 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 80017c4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80017c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d2:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 80017d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d6:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <PDOconfigMap+0x178>)
 80017d8:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 80017da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017dc:	4a3d      	ldr	r2, [pc, #244]	; (80018d4 <PDOconfigMap+0x17c>)
 80017de:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e071      	b.n	80018c8 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 80017e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017e8:	4619      	mov	r1, r3
 80017ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017ec:	f7ff fce2 	bl	80011b4 <OD_find>
 80017f0:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 80017f2:	f107 0214 	add.w	r2, r7, #20
 80017f6:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 80017fa:	2300      	movs	r3, #0
 80017fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017fe:	f7ff fd35 	bl	800126c <OD_getSub>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8001808:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <PDOconfigMap+0xbe>
        return odRet;
 8001810:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001814:	e058      	b.n	80018c8 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <PDOconfigMap+0xc8>
 800181c:	2308      	movs	r3, #8
 800181e:	e000      	b.n	8001822 <PDOconfigMap+0xca>
 8001820:	2304      	movs	r3, #4
 8001822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8001826:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800182a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800182e:	4013      	ands	r3, r2
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00a      	beq.n	800184c <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 8001836:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	2b00      	cmp	r3, #0
 8001840:	d104      	bne.n	800184c <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001848:	429a      	cmp	r2, r3
 800184a:	d201      	bcs.n	8001850 <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 800184c:	2306      	movs	r3, #6
 800184e:	e03b      	b.n	80018c8 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8001850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001852:	461d      	mov	r5, r3
 8001854:	f107 0414 	add.w	r4, r7, #20
 8001858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001860:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8001864:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186a:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d129      	bne.n	80018c6 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8001872:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001876:	2b1f      	cmp	r3, #31
 8001878:	d81f      	bhi.n	80018ba <PDOconfigMap+0x162>
 800187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d01b      	beq.n	80018ba <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 8001882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 800188e:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8001890:	3308      	adds	r3, #8
 8001892:	440b      	add	r3, r1
 8001894:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	323c      	adds	r2, #60	; 0x3c
 800189a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800189e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	2201      	movs	r2, #1
 80018a8:	409a      	lsls	r2, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	b2d1      	uxtb	r1, r2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	460a      	mov	r2, r1
 80018b4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80018b8:	e005      	b.n	80018c6 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 80018ba:	79fa      	ldrb	r2, [r7, #7]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	323c      	adds	r2, #60	; 0x3c
 80018c0:	2100      	movs	r1, #0
 80018c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3748      	adds	r7, #72	; 0x48
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}
 80018d0:	08001709 	.word	0x08001709
 80018d4:	080016e1 	.word	0x080016e1

080018d8 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 80018ee:	f107 021b 	add.w	r2, r7, #27
 80018f2:	2301      	movs	r3, #1
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff feb3 	bl	8001662 <OD_get_u8>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8001902:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 800190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fe81 	bl	8001618 <OD_getIndex>
 8001916:	4603      	mov	r3, r0
 8001918:	021a      	lsls	r2, r3, #8
 800191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800191e:	f06f 030b 	mvn.w	r3, #11
 8001922:	e082      	b.n	8001a2a <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800192a:	e05e      	b.n	80019ea <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800192c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	3310      	adds	r3, #16
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8001944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001948:	3301      	adds	r3, #1
 800194a:	b2d9      	uxtb	r1, r3
 800194c:	f107 0214 	add.w	r2, r7, #20
 8001950:	2301      	movs	r3, #1
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff feaf 	bl	80016b6 <OD_get_u32>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 800195e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001962:	2b0e      	cmp	r3, #14
 8001964:	d03b      	beq.n	80019de <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8001966:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00f      	beq.n	800198e <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	2b00      	cmp	r3, #0
 8001972:	d009      	beq.n	8001988 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fe4f 	bl	8001618 <OD_getIndex>
 800197a:	4603      	mov	r3, r0
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001982:	431a      	orrs	r2, r3
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8001988:	f06f 030b 	mvn.w	r3, #11
 800198c:	e04d      	b.n	8001a2a <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fedc 	bl	8001758 <PDOconfigMap>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 80019a6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00c      	beq.n	80019c8 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	22ff      	movs	r2, #255	; 0xff
 80019b8:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <PDO_initMapping+0xf0>
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 80019c8:	7efb      	ldrb	r3, [r7, #27]
 80019ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d206      	bcs.n	80019e0 <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	4413      	add	r3, r2
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
 80019dc:	e000      	b.n	80019e0 <PDO_initMapping+0x108>
            continue;
 80019de:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80019e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019e4:	3301      	adds	r3, #1
 80019e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ee:	2b07      	cmp	r3, #7
 80019f0:	d99c      	bls.n	800192c <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d805      	bhi.n	8001a04 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <PDO_initMapping+0x13a>
 80019fe:	7efb      	ldrb	r3, [r7, #27]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8001a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <PDO_initMapping+0x13a>
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001a22:	7efa      	ldrb	r2, [r7, #27]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b08e      	sub	sp, #56	; 0x38
 8001a36:	af02      	add	r7, sp, #8
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <OD_write_PDO_mapping+0x28>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <OD_write_PDO_mapping+0x28>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	7c5b      	ldrb	r3, [r3, #17]
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d901      	bls.n	8001a5e <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8001a5a:	2309      	movs	r3, #9
 8001a5c:	e081      	b.n	8001b62 <OD_write_PDO_mapping+0x130>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <OD_write_PDO_mapping+0x4a>
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	7b5b      	ldrb	r3, [r3, #13]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <OD_write_PDO_mapping+0x4e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	7c5b      	ldrb	r3, [r3, #17]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e070      	b.n	8001b62 <OD_write_PDO_mapping+0x130>
    }

    if (stream->subIndex == 0) {
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7c5b      	ldrb	r3, [r3, #17]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d148      	bne.n	8001b1a <OD_write_PDO_mapping+0xe8>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8001a88:	68b8      	ldr	r0, [r7, #8]
 8001a8a:	f7ff fd8b 	bl	80015a4 <CO_getUint8>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8001a96:	7fbb      	ldrb	r3, [r7, #30]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d901      	bls.n	8001aa0 <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	e060      	b.n	8001b62 <OD_write_PDO_mapping+0x130>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001aa6:	e01e      	b.n	8001ae6 <OD_write_PDO_mapping+0xb4>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8001aa8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	3310      	adds	r3, #16
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	4413      	add	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d901      	bls.n	8001ad4 <OD_write_PDO_mapping+0xa2>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	e046      	b.n	8001b62 <OD_write_PDO_mapping+0x130>
            }
            pdoDataLength += mappedLength;
 8001ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ae6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001aea:	7fbb      	ldrb	r3, [r7, #30]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3db      	bcc.n	8001aa8 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d901      	bls.n	8001afa <OD_write_PDO_mapping+0xc8>
            return ODR_MAP_LEN;
 8001af6:	2307      	movs	r3, #7
 8001af8:	e033      	b.n	8001b62 <OD_write_PDO_mapping+0x130>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d104      	bne.n	8001b0a <OD_write_PDO_mapping+0xd8>
 8001b00:	7fbb      	ldrb	r3, [r7, #30]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <OD_write_PDO_mapping+0xd8>
            return ODR_INVALID_VALUE;
 8001b06:	230f      	movs	r3, #15
 8001b08:	e02b      	b.n	8001b62 <OD_write_PDO_mapping+0x130>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	7fba      	ldrb	r2, [r7, #30]
 8001b16:	735a      	strb	r2, [r3, #13]
 8001b18:	e01c      	b.n	8001b54 <OD_write_PDO_mapping+0x122>
    }
    else {
        uint32_t val = CO_getUint32(buf);
 8001b1a:	68b8      	ldr	r0, [r7, #8]
 8001b1c:	f7ff fd5f 	bl	80015de <CO_getUint32>
 8001b20:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex-1,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	7c5b      	ldrb	r3, [r3, #17]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b3e:	f7ff fe0b 	bl	8001758 <PDOconfigMap>
 8001b42:	4603      	mov	r3, r0
 8001b44:	77fb      	strb	r3, [r7, #31]
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8001b46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <OD_write_PDO_mapping+0x122>
            return odRet;
 8001b4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b52:	e006      	b.n	8001b62 <OD_write_PDO_mapping+0x130>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fab0 	bl	80010c0 <OD_writeOriginal>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7ff fa45 	bl	8001010 <OD_readOriginal>
 8001b86:	4603      	mov	r3, r0
 8001b88:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8001b8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d134      	bne.n	8001bfc <OD_read_PDO_commParam+0x90>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	7c5b      	ldrb	r3, [r3, #17]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d130      	bne.n	8001bfc <OD_read_PDO_commParam+0x90>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d12c      	bne.n	8001bfc <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8001ba8:	68b8      	ldr	r0, [r7, #8]
 8001baa:	f7ff fd18 	bl	80015de <CO_getUint32>
 8001bae:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb8:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8001bba:	8a7b      	ldrh	r3, [r7, #18]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d011      	beq.n	8001be4 <OD_read_PDO_commParam+0x78>
 8001bc0:	8a7a      	ldrh	r2, [r7, #18]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001bce:	400b      	ands	r3, r1
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d107      	bne.n	8001be4 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <OD_read_PDO_commParam+0x9c>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <OD_read_PDO_commParam+0x88>
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bf2:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8001bf4:	69f9      	ldr	r1, [r7, #28]
 8001bf6:	68b8      	ldr	r0, [r7, #8]
 8001bf8:	f7ff fcff 	bl	80015fa <CO_setUint32>
    }

    return returnCode;
 8001bfc:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	ffff0000 	.word	0xffff0000

08001c0c <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b097      	sub	sp, #92	; 0x5c
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 810c 	beq.w	8001e40 <CO_RPDO_process+0x234>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8108 	beq.w	8001e40 <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8001c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <CO_RPDO_process+0x36>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 80ff 	bne.w	8001e40 <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001c48:	2b0a      	cmp	r3, #10
 8001c4a:	d928      	bls.n	8001c9e <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001c52:	2b0b      	cmp	r3, #11
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d102      	bne.n	8001c6e <CO_RPDO_process+0x62>
 8001c68:	f248 2310 	movw	r3, #33296	; 0x8210
 8001c6c:	e001      	b.n	8001c72 <CO_RPDO_process+0x66>
 8001c6e:	f248 2320 	movw	r3, #33312	; 0x8220
 8001c72:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c80:	9200      	str	r2, [sp, #0]
 8001c82:	2204      	movs	r2, #4
 8001c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c86:	f7fe fdb1 	bl	80007ec <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <CO_RPDO_process+0xbe>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <CO_RPDO_process+0xbe>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <CO_RPDO_process+0xbe>
            bufNo = 1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8001cce:	e065      	b.n	8001d9c <CO_RPDO_process+0x190>
            rpdoReceived = true;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8001cd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cd8:	332a      	adds	r3, #42	; 0x2a
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8001ce2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3252      	adds	r2, #82	; 0x52
 8001cea:	2100      	movs	r1, #0
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001cf6:	e04b      	b.n	8001d90 <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8001cf8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	3310      	adds	r3, #16
 8001d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d08:	4413      	add	r3, r2
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	330c      	adds	r3, #12
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8001d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d901      	bls.n	8001d2a <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8001d26:	2308      	movs	r3, #8
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8001d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d912      	bls.n	8001d5a <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	2208      	movs	r2, #8
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f024 f813 	bl	8025d68 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8001d42:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d46:	f107 0318 	add.w	r3, r7, #24
 8001d4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f023 fffd 	bl	8025d4c <memcpy>
                    dataOD = buf;
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d58:	e001      	b.n	8001d5e <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 8001d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	699c      	ldr	r4, [r3, #24]
 8001d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d72:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8001d74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8001d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d82:	4413      	add	r3, r2
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8001d86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	7b5b      	ldrb	r3, [r3, #13]
 8001d94:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3ad      	bcc.n	8001cf8 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8001d9c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3252      	adds	r2, #82	; 0x52
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d191      	bne.n	8001cd0 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d058      	beq.n	8001e68 <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 8001db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d017      	beq.n	8001dec <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d90a      	bls.n	8001de2 <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2217      	movs	r2, #23
 8001ddc:	2100      	movs	r1, #0
 8001dde:	f7fe fd05 	bl	80007ec <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ) {
 8001dea:	e03d      	b.n	8001e68 <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d038      	beq.n	8001e68 <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d230      	bcs.n	8001e68 <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	441a      	add	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d920      	bls.n	8001e68 <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8001e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	f248 2350 	movw	r3, #33360	; 0x8250
 8001e36:	2217      	movs	r2, #23
 8001e38:	2101      	movs	r1, #1
 8001e3a:	f7fe fcd7 	bl	80007ec <CO_error>
    ) {
 8001e3e:	e013      	b.n	8001e68 <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <CO_RPDO_process+0x242>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8001e66:	e000      	b.n	8001e6a <CO_RPDO_process+0x25e>
    ) {
 8001e68:	bf00      	nop
}
 8001e6a:	bf00      	nop
 8001e6c:	3754      	adds	r7, #84	; 0x54
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}
	...

08001e74 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b093      	sub	sp, #76	; 0x4c
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <OD_write_18xx+0x26>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <OD_write_18xx+0x26>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <OD_write_18xx+0x26>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d901      	bls.n	8001e9e <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8001e9a:	2309      	movs	r3, #9
 8001e9c:	e136      	b.n	800210c <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f023 ff4b 	bl	8025d4c <memcpy>

    switch (stream->subIndex) {
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	7c5b      	ldrb	r3, [r3, #17]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	f200 811d 	bhi.w	80020fc <OD_write_18xx+0x288>
 8001ec2:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <OD_write_18xx+0x54>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08002017 	.word	0x08002017
 8001ed0:	0800207d 	.word	0x0800207d
 8001ed4:	080020fd 	.word	0x080020fd
 8001ed8:	080020ab 	.word	0x080020ab
 8001edc:	080020cf 	.word	0x080020cf
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7ff fb7c 	bl	80015de <CO_getUint32>
 8001ee6:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ef0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	0fdb      	lsrs	r3, r3, #31
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	4b85      	ldr	r3, [pc, #532]	; (8002114 <OD_write_18xx+0x2a0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d13d      	bne.n	8001f82 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d009      	beq.n	8001f20 <OD_write_18xx+0xac>
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <OD_write_18xx+0xac>
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8001f1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d130      	bne.n	8001f82 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d026      	beq.n	8001f74 <OD_write_18xx+0x100>
 8001f26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f28:	2b7f      	cmp	r3, #127	; 0x7f
 8001f2a:	d92a      	bls.n	8001f82 <OD_write_18xx+0x10e>
 8001f2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f32:	d903      	bls.n	8001f3c <OD_write_18xx+0xc8>
 8001f34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f36:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001f3a:	d922      	bls.n	8001f82 <OD_write_18xx+0x10e>
 8001f3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f3e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8001f42:	d903      	bls.n	8001f4c <OD_write_18xx+0xd8>
 8001f44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f4a:	d31a      	bcc.n	8001f82 <OD_write_18xx+0x10e>
 8001f4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f52:	d903      	bls.n	8001f5c <OD_write_18xx+0xe8>
 8001f54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f56:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8001f5a:	d312      	bcc.n	8001f82 <OD_write_18xx+0x10e>
 8001f5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f5e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8001f62:	d303      	bcc.n	8001f6c <OD_write_18xx+0xf8>
 8001f64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f6a:	d30a      	bcc.n	8001f82 <OD_write_18xx+0x10e>
 8001f6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f72:	d806      	bhi.n	8001f82 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <OD_write_18xx+0x112>
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	7b5b      	ldrb	r3, [r3, #13]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 8001f82:	230f      	movs	r3, #15
 8001f84:	e0c2      	b.n	800210c <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d106      	bne.n	8001f9e <OD_write_18xx+0x12a>
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8001f96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f000 80ae 	beq.w	80020fa <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8001fa4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d108      	bne.n	8001fbc <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fb1f 	bl	80015fa <CO_setUint32>
            }
            if (!valid) {
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <OD_write_18xx+0x152>
                CAN_ID = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc8:	6858      	ldr	r0, [r3, #4]
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8001fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd6:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8001fda:	2af0      	cmp	r2, #240	; 0xf0
 8001fdc:	bf94      	ite	ls
 8001fde:	2201      	movls	r2, #1
 8001fe0:	2200      	movhi	r2, #0
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001fe8:	9401      	str	r4, [sp, #4]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	f002 fd6f 	bl	8004ad0 <CO_CANtxBufferInit>
 8001ff2:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	e086      	b.n	800210c <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 8002006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 800200c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002010:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 8002014:	e071      	b.n	80020fa <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002016:	68b8      	ldr	r0, [r7, #8]
 8002018:	f7ff fac4 	bl	80015a4 <CO_getUint8>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002026:	2bf0      	cmp	r3, #240	; 0xf0
 8002028:	d905      	bls.n	8002036 <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800202a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800202e:	2bfd      	cmp	r3, #253	; 0xfd
 8002030:	d801      	bhi.n	8002036 <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8002032:	230f      	movs	r3, #15
 8002034:	e06a      	b.n	800210c <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800203a:	2bf0      	cmp	r3, #240	; 0xf0
 800203c:	bf94      	ite	ls
 800203e:	2301      	movls	r3, #1
 8002040:	2300      	movhi	r3, #0
 8002042:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800204a:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	22ff      	movs	r2, #255	; 0xff
 8002050:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800205a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	2201      	movs	r2, #1
 8002062:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	2200      	movs	r2, #0
 800206a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002076:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 800207a:	e03f      	b.n	80020fc <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8002084:	230f      	movs	r3, #15
 8002086:	e041      	b.n	800210c <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	f7ff fa99 	bl	80015c0 <CO_getUint16>
 800208e:	4603      	mov	r3, r0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	2264      	movs	r2, #100	; 0x64
 8002096:	fb03 f202 	mul.w	r2, r3, r2
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 80020a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 80020a8:	e028      	b.n	80020fc <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 80020aa:	68b8      	ldr	r0, [r7, #8]
 80020ac:	f7ff fa88 	bl	80015c0 <CO_getUint16>
 80020b0:	4603      	mov	r3, r0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ba:	fb03 f202 	mul.w	r2, r3, r2
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 80020cc:	e016      	b.n	80020fc <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 80020ce:	68b8      	ldr	r0, [r7, #8]
 80020d0:	f7ff fa68 	bl	80015a4 <CO_getUint8>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <OD_write_18xx+0x276>
 80020e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020e6:	2bf0      	cmp	r3, #240	; 0xf0
 80020e8:	d901      	bls.n	80020ee <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 80020ea:	230f      	movs	r3, #15
 80020ec:	e00e      	b.n	800210c <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 80020ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80020f4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 80020f8:	e000      	b.n	80020fc <OD_write_18xx+0x288>
        break;
 80020fa:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80020fc:	f107 0114 	add.w	r1, r7, #20
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7fe ffdb 	bl	80010c0 <OD_writeOriginal>
 800210a:	4603      	mov	r3, r0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3744      	adds	r7, #68	; 0x44
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	3ffff800 	.word	0x3ffff800

08002118 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08e      	sub	sp, #56	; 0x38
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <CO_TPDO_init+0x36>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <CO_TPDO_init+0x36>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <CO_TPDO_init+0x36>
 800213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8002142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <CO_TPDO_init+0x36>
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e14d      	b.n	80023f0 <CO_TPDO_init+0x2d8>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002154:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8002158:	2100      	movs	r1, #0
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f023 fe04 	bl	8025d68 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800216a:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002182:	f7ff fba9 	bl	80018d8 <PDO_initMapping>
 8002186:	4603      	mov	r3, r0
 8002188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 800218c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <CO_TPDO_init+0x82>
        return ret;
 8002194:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002198:	e12a      	b.n	80023f0 <CO_TPDO_init+0x2d8>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800219a:	23fe      	movs	r3, #254	; 0xfe
 800219c:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 800219e:	f107 021b 	add.w	r2, r7, #27
 80021a2:	2301      	movs	r3, #1
 80021a4:	2102      	movs	r1, #2
 80021a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021a8:	f7ff fa5b 	bl	8001662 <OD_get_u8>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80021b2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00e      	beq.n	80021d8 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 80021ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 80021c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021c2:	f7ff fa29 	bl	8001618 <OD_getIndex>
 80021c6:	4603      	mov	r3, r0
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80021d2:	f06f 030b 	mvn.w	r3, #11
 80021d6:	e10b      	b.n	80023f0 <CO_TPDO_init+0x2d8>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80021d8:	7efb      	ldrb	r3, [r7, #27]
 80021da:	2bfd      	cmp	r3, #253	; 0xfd
 80021dc:	d804      	bhi.n	80021e8 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80021de:	7efb      	ldrb	r3, [r7, #27]
 80021e0:	2bf0      	cmp	r3, #240	; 0xf0
 80021e2:	d901      	bls.n	80021e8 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80021e4:	23fe      	movs	r3, #254	; 0xfe
 80021e6:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 80021e8:	7efa      	ldrb	r2, [r7, #27]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 80021fc:	f107 0214 	add.w	r2, r7, #20
 8002200:	2301      	movs	r3, #1
 8002202:	2101      	movs	r1, #1
 8002204:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002206:	f7ff fa56 	bl	80016b6 <OD_get_u32>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002210:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8002218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 800221e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002220:	f7ff f9fa 	bl	8001618 <OD_getIndex>
 8002224:	4603      	mov	r3, r0
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002230:	f06f 030b 	mvn.w	r3, #11
 8002234:	e0dc      	b.n	80023f0 <CO_TPDO_init+0x2d8>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	43db      	mvns	r3, r3
 800223a:	0fdb      	lsrs	r3, r3, #31
 800223c:	b2db      	uxtb	r3, r3
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002248:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <CO_TPDO_init+0x154>
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	7b5b      	ldrb	r3, [r3, #13]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <CO_TPDO_init+0x146>
 8002258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <CO_TPDO_init+0x154>
        valid = false;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <CO_TPDO_init+0x154>
 8002268:	2301      	movs	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d001      	beq.n	8002280 <CO_TPDO_init+0x168>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	e000      	b.n	8002282 <CO_TPDO_init+0x16a>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002288:	221a      	movs	r2, #26
 800228a:	2101      	movs	r1, #1
 800228c:	f7fe faae 	bl	80007ec <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 800229a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <CO_TPDO_init+0x19a>
 80022a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80022a2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80022a4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80022a8:	400b      	ands	r3, r1
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d101      	bne.n	80022b2 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80022ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80022b0:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80022bc:	2af0      	cmp	r2, #240	; 0xf0
 80022be:	bf94      	ite	ls
 80022c0:	2201      	movls	r2, #1
 80022c2:	2200      	movhi	r2, #0
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	4610      	mov	r0, r2
 80022c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80022ca:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80022ce:	9001      	str	r0, [sp, #4]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2300      	movs	r3, #0
 80022d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022d6:	f002 fbfb 	bl	8004ad0 <CO_CANtxBufferInit>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	e07e      	b.n	80023f0 <CO_TPDO_init+0x2d8>
    }

    PDO->valid = valid;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f6:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002300:	f107 0212 	add.w	r2, r7, #18
 8002304:	2301      	movs	r3, #1
 8002306:	2103      	movs	r1, #3
 8002308:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800230a:	f7ff f9bf 	bl	800168c <OD_get_u16>
 800230e:	4603      	mov	r3, r0
 8002310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8002314:	f107 0210 	add.w	r2, r7, #16
 8002318:	2301      	movs	r3, #1
 800231a:	2105      	movs	r1, #5
 800231c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800231e:	f7ff f9b5 	bl	800168c <OD_get_u16>
 8002322:	4603      	mov	r3, r0
 8002324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100;
 8002328:	8a7b      	ldrh	r3, [r7, #18]
 800232a:	461a      	mov	r2, r3
 800232c:	2364      	movs	r3, #100	; 0x64
 800232e:	fb03 f202 	mul.w	r2, r3, r2
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000;
 8002338:	8a3b      	ldrh	r3, [r7, #16]
 800233a:	461a      	mov	r2, r3
 800233c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002340:	fb03 f202 	mul.w	r2, r3, r2
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8002358:	2301      	movs	r3, #1
 800235a:	2106      	movs	r1, #6
 800235c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800235e:	f7ff f980 	bl	8001662 <OD_get_u8>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	22ff      	movs	r2, #255	; 0xff
 8002374:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	2200      	movs	r2, #0
 800237c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800238e:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002396:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800239e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <CO_TPDO_init+0x2e0>)
 80023ae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <CO_TPDO_init+0x2e4>)
 80023b6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <CO_TPDO_init+0x2e8>)
 80023c6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <CO_TPDO_init+0x2ec>)
 80023ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023d8:	4619      	mov	r1, r3
 80023da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80023dc:	f7ff f92d 	bl	800163a <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80023e6:	4619      	mov	r1, r3
 80023e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80023ea:	f7ff f926 	bl	800163a <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3730      	adds	r7, #48	; 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	08001b6d 	.word	0x08001b6d
 80023fc:	08001e75 	.word	0x08001e75
 8002400:	08001011 	.word	0x08001011
 8002404:	08001a33 	.word	0x08001a33

08002408 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b091      	sub	sp, #68	; 0x44
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800241a:	3305      	adds	r3, #5
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <CO_TPDOsend+0x2a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800242e:	2bfd      	cmp	r3, #253	; 0xfd
 8002430:	d901      	bls.n	8002436 <CO_TPDOsend+0x2e>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <CO_TPDOsend+0x30>
 8002436:	2300      	movs	r3, #0
    bool_t eventDriven =
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800243a:	2300      	movs	r3, #0
 800243c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002440:	e062      	b.n	8002508 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002442:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	3310      	adds	r3, #16
 8002450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002452:	4413      	add	r3, r2
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 8002466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002468:	2b08      	cmp	r3, #8
 800246a:	d901      	bls.n	8002470 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 800246c:	2308      	movs	r3, #8
 800246e:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8002470:	7ffb      	ldrb	r3, [r7, #31]
 8002472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002474:	429a      	cmp	r2, r3
 8002476:	d90a      	bls.n	800248e <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	2208      	movs	r2, #8
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f023 fc71 	bl	8025d68 <memset>
            dataTPDOCopy = buf;
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	e001      	b.n	8002492 <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 800248e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	695c      	ldr	r4, [r3, #20]
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a4:	6a38      	ldr	r0, [r7, #32]
 80024a6:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 80024a8:	7ffa      	ldrb	r2, [r7, #31]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 80024ae:	7ffb      	ldrb	r3, [r7, #31]
 80024b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d906      	bls.n	80024c4 <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 80024b6:	7ffa      	ldrb	r2, [r7, #31]
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024c0:	f023 fc44 	bl	8025d4c <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80024c4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	323c      	adds	r2, #60	; 0x3c
 80024cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d0:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <CO_TPDOsend+0xee>
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80024e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024e8:	440b      	add	r3, r1
 80024ea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
 80024f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fa:	4413      	add	r3, r2
 80024fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80024fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002502:	3301      	adds	r3, #1
 8002504:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	7b5b      	ldrb	r3, [r3, #13]
 800250c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002510:	429a      	cmp	r2, r3
 8002512:	d396      	bcc.n	8002442 <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f002 fb8b 	bl	8004c5c <CO_CANsend>
 8002546:	4603      	mov	r3, r0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3744      	adds	r7, #68	; 0x44
 800254c:	46bd      	mov	sp, r7
 800254e:	bd90      	pop	{r4, r7, pc}

08002550 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80dc 	beq.w	8002724 <CO_TPDO_process+0x1d4>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80d8 	beq.w	8002724 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8002584:	2bfd      	cmp	r3, #253	; 0xfd
 8002586:	d946      	bls.n	8002616 <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d205      	bcs.n	80025aa <CO_TPDO_process+0x5a>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	e000      	b.n	80025ac <CO_TPDO_process+0x5c>
 80025aa:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d123      	bne.n	8002616 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80025ce:	2300      	movs	r3, #0
 80025d0:	77fb      	strb	r3, [r7, #31]
 80025d2:	e01b      	b.n	800260c <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80025d4:	7ffa      	ldrb	r2, [r7, #31]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	323c      	adds	r2, #60	; 0x3c
 80025da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025de:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00f      	beq.n	8002606 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
 80025ec:	69b9      	ldr	r1, [r7, #24]
 80025ee:	440b      	add	r3, r1
 80025f0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80025f4:	4013      	ands	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d104      	bne.n	8002606 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 8002604:	e007      	b.n	8002616 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002606:	7ffb      	ldrb	r3, [r7, #31]
 8002608:	3301      	adds	r3, #1
 800260a:	77fb      	strb	r3, [r7, #31]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	7b5b      	ldrb	r3, [r3, #13]
 8002610:	7ffa      	ldrb	r2, [r7, #31]
 8002612:	429a      	cmp	r2, r3
 8002614:	d3de      	bcc.n	80025d4 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800261c:	2bfd      	cmp	r3, #253	; 0xfd
 800261e:	d91d      	bls.n	800265c <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	d205      	bcs.n	8002638 <CO_TPDO_process+0xe8>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	e000      	b.n	800263a <CO_TPDO_process+0xea>
 8002638:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002646:	2b00      	cmp	r3, #0
 8002648:	d07f      	beq.n	800274a <CO_TPDO_process+0x1fa>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002650:	2b00      	cmp	r3, #0
 8002652:	d17a      	bne.n	800274a <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff fed7 	bl	8002408 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800265a:	e076      	b.n	800274a <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002662:	2b00      	cmp	r3, #0
 8002664:	d071      	beq.n	800274a <CO_TPDO_process+0x1fa>
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06e      	beq.n	800274a <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800267c:	2b00      	cmp	r3, #0
 800267e:	d064      	beq.n	800274a <CO_TPDO_process+0x1fa>
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7ff fec1 	bl	8002408 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002686:	e060      	b.n	800274a <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800268e:	2bff      	cmp	r3, #255	; 0xff
 8002690:	d119      	bne.n	80026c6 <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002698:	7c5b      	ldrb	r3, [r3, #17]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	22fe      	movs	r2, #254	; 0xfe
 80026ac:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80026b0:	e009      	b.n	80026c6 <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80026cc:	2bfe      	cmp	r3, #254	; 0xfe
 80026ce:	d112      	bne.n	80026f6 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80026d6:	7c9a      	ldrb	r2, [r3, #18]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80026de:	429a      	cmp	r2, r3
 80026e0:	d133      	bne.n	800274a <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff fe8a 	bl	8002408 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80026f4:	e029      	b.n	800274a <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11c      	bne.n	800274a <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fe73 	bl	8002408 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002722:	e012      	b.n	800274a <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	22ff      	movs	r2, #255	; 0xff
 8002744:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 8002748:	e000      	b.n	800274c <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800274a:	bf00      	nop
}
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <OD_getIndex+0x14>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	e000      	b.n	80027a2 <OD_getIndex+0x16>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <OD_extension_init>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <OD_extension_init+0x14>
 80027be:	2305      	movs	r3, #5
 80027c0:	e003      	b.n	80027ca <OD_extension_init+0x1c>
    entry->extension = extension;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <OD_get_u8>:
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af02      	add	r7, sp, #8
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	460b      	mov	r3, r1
 80027e4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80027e6:	7af9      	ldrb	r1, [r7, #11]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7fe fe2d 	bl	8001450 <OD_get_value>
 80027f6:	4603      	mov	r3, r0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <OD_get_u32>:
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	460b      	mov	r3, r1
 800280e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002810:	7af9      	ldrb	r1, [r7, #11]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2304      	movs	r3, #4
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7fe fe18 	bl	8001450 <OD_get_value>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af02      	add	r7, sp, #8
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	460b      	mov	r3, r1
 8002838:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800283a:	1d3a      	adds	r2, r7, #4
 800283c:	7af9      	ldrb	r1, [r7, #11]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2304      	movs	r3, #4
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7fe fe39 	bl	80014bc <OD_set_value>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3305      	adds	r3, #5
 800286c:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d115      	bne.n	80028a0 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d103      	bne.n	8002884 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002882:	e00d      	b.n	80028a0 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	333c      	adds	r3, #60	; 0x3c
 8002890:	7cfa      	ldrb	r2, [r7, #19]
 8002892:	68f9      	ldr	r1, [r7, #12]
 8002894:	4618      	mov	r0, r3
 8002896:	f023 fa59 	bl	8025d4c <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2201      	movs	r2, #1
 800289e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	460b      	mov	r3, r1
 80028b8:	80fb      	strh	r3, [r7, #6]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	6a3a      	ldr	r2, [r7, #32]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d101      	bne.n	80028d6 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e04e      	b.n	8002974 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db02      	blt.n	80028ee <CO_SDOserver_init_canRxTx+0x46>
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	e000      	b.n	80028f0 <CO_SDOserver_init_canRxTx+0x48>
 80028ee:	2300      	movs	r3, #0
 80028f0:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db02      	blt.n	80028fe <CO_SDOserver_init_canRxTx+0x56>
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	e000      	b.n	8002900 <CO_SDOserver_init_canRxTx+0x58>
 80028fe:	2300      	movs	r3, #0
 8002900:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8002902:	8afb      	ldrh	r3, [r7, #22]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <CO_SDOserver_init_canRxTx+0x6e>
 8002908:	8abb      	ldrh	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	611a      	str	r2, [r3, #16]
 8002914:	e006      	b.n	8002924 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002924:	8afa      	ldrh	r2, [r7, #22]
 8002926:	88f9      	ldrh	r1, [r7, #6]
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <CO_SDOserver_init_canRxTx+0xd4>)
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002938:	68b8      	ldr	r0, [r7, #8]
 800293a:	f002 f86d 	bl	8004a18 <CO_CANrxBufferInit>
 800293e:	4603      	mov	r3, r0
 8002940:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	8aba      	ldrh	r2, [r7, #20]
 8002948:	88b9      	ldrh	r1, [r7, #4]
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2308      	movs	r3, #8
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	f002 f8bc 	bl	8004ad0 <CO_CANtxBufferInit>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002966:	23ff      	movs	r3, #255	; 0xff
 8002968:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8002970:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	08002855 	.word	0x08002855

08002980 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b08f      	sub	sp, #60	; 0x3c
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <OD_write_1201_additional+0x20>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <OD_write_1201_additional+0x20>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 80029a0:	2309      	movs	r3, #9
 80029a2:	e0f9      	b.n	8002b98 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	7c5b      	ldrb	r3, [r3, #17]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	f200 80e8 	bhi.w	8002b84 <OD_write_1201_additional+0x204>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <OD_write_1201_additional+0x3c>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	08002a95 	.word	0x08002a95
 80029c8:	08002b5b 	.word	0x08002b5b
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 80029cc:	2304      	movs	r3, #4
 80029ce:	e0e3      	b.n	8002b98 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 80029d0:	68b8      	ldr	r0, [r7, #8]
 80029d2:	f7ff fecd 	bl	8002770 <CO_getUint32>
 80029d6:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e0:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ec:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	0fdb      	lsrs	r3, r3, #31
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <OD_write_1201_additional+0x220>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d134      	bne.n	8002a6c <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <OD_write_1201_additional+0x98>
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <OD_write_1201_additional+0x98>
 8002a10:	8afa      	ldrh	r2, [r7, #22]
 8002a12:	8abb      	ldrh	r3, [r7, #20]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d129      	bne.n	8002a6c <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <OD_write_1201_additional+0xf0>
 8002a1e:	8afb      	ldrh	r3, [r7, #22]
 8002a20:	2b7f      	cmp	r3, #127	; 0x7f
 8002a22:	d923      	bls.n	8002a6c <OD_write_1201_additional+0xec>
 8002a24:	8afb      	ldrh	r3, [r7, #22]
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2a:	d903      	bls.n	8002a34 <OD_write_1201_additional+0xb4>
 8002a2c:	8afb      	ldrh	r3, [r7, #22]
 8002a2e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002a32:	d91b      	bls.n	8002a6c <OD_write_1201_additional+0xec>
 8002a34:	8afb      	ldrh	r3, [r7, #22]
 8002a36:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002a3a:	d903      	bls.n	8002a44 <OD_write_1201_additional+0xc4>
 8002a3c:	8afb      	ldrh	r3, [r7, #22]
 8002a3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a42:	d313      	bcc.n	8002a6c <OD_write_1201_additional+0xec>
 8002a44:	8afb      	ldrh	r3, [r7, #22]
 8002a46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a4a:	d903      	bls.n	8002a54 <OD_write_1201_additional+0xd4>
 8002a4c:	8afb      	ldrh	r3, [r7, #22]
 8002a4e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002a52:	d30b      	bcc.n	8002a6c <OD_write_1201_additional+0xec>
 8002a54:	8afb      	ldrh	r3, [r7, #22]
 8002a56:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002a5a:	d303      	bcc.n	8002a64 <OD_write_1201_additional+0xe4>
 8002a5c:	8afb      	ldrh	r3, [r7, #22]
 8002a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a62:	d303      	bcc.n	8002a6c <OD_write_1201_additional+0xec>
 8002a64:	8afb      	ldrh	r3, [r7, #22]
 8002a66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a6a:	d901      	bls.n	8002a70 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 8002a6c:	230f      	movs	r3, #15
 8002a6e:	e093      	b.n	8002b98 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a8e:	f7ff ff0b 	bl	80028a8 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8002a92:	e07a      	b.n	8002b8a <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8002a94:	68b8      	ldr	r0, [r7, #8]
 8002a96:	f7ff fe6b 	bl	8002770 <CO_getUint32>
 8002a9a:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa4:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab0:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	0fdb      	lsrs	r3, r3, #31
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <OD_write_1201_additional+0x220>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d134      	bne.n	8002b30 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <OD_write_1201_additional+0x15c>
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <OD_write_1201_additional+0x15c>
 8002ad4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002ad6:	8c3b      	ldrh	r3, [r7, #32]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d129      	bne.n	8002b30 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <OD_write_1201_additional+0x1b4>
 8002ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ae6:	d923      	bls.n	8002b30 <OD_write_1201_additional+0x1b0>
 8002ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	d903      	bls.n	8002af8 <OD_write_1201_additional+0x178>
 8002af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002af2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002af6:	d91b      	bls.n	8002b30 <OD_write_1201_additional+0x1b0>
 8002af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002afa:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002afe:	d903      	bls.n	8002b08 <OD_write_1201_additional+0x188>
 8002b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b02:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b06:	d313      	bcc.n	8002b30 <OD_write_1201_additional+0x1b0>
 8002b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b0e:	d903      	bls.n	8002b18 <OD_write_1201_additional+0x198>
 8002b10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b12:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002b16:	d30b      	bcc.n	8002b30 <OD_write_1201_additional+0x1b0>
 8002b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b1a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002b1e:	d303      	bcc.n	8002b28 <OD_write_1201_additional+0x1a8>
 8002b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b26:	d303      	bcc.n	8002b30 <OD_write_1201_additional+0x1b0>
 8002b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b2e:	d901      	bls.n	8002b34 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8002b30:	230f      	movs	r3, #15
 8002b32:	e031      	b.n	8002b98 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	9201      	str	r2, [sp, #4]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4623      	mov	r3, r4
 8002b50:	4602      	mov	r2, r0
 8002b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b54:	f7ff fea8 	bl	80028a8 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8002b58:	e017      	b.n	8002b8a <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d001      	beq.n	8002b64 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8002b60:	230b      	movs	r3, #11
 8002b62:	e019      	b.n	8002b98 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8002b64:	68b8      	ldr	r0, [r7, #8]
 8002b66:	f7ff fdf5 	bl	8002754 <CO_getUint8>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 8002b70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <OD_write_1201_additional+0x200>
 8002b78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da03      	bge.n	8002b88 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8002b80:	230f      	movs	r3, #15
 8002b82:	e009      	b.n	8002b98 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8002b84:	230e      	movs	r3, #14
 8002b86:	e007      	b.n	8002b98 <OD_write_1201_additional+0x218>
            break;
 8002b88:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7fe fa95 	bl	80010c0 <OD_writeOriginal>
 8002b96:	4603      	mov	r3, r0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3734      	adds	r7, #52	; 0x34
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd90      	pop	{r4, r7, pc}
 8002ba0:	3ffff800 	.word	0x3ffff800

08002ba4 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	; 0x30
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <CO_SDOserver_init+0x26>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <CO_SDOserver_init+0x26>
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <CO_SDOserver_init+0x26>
 8002bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e0f5      	b.n	8002dbc <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8002bdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002be2:	fb03 f202 	mul.w	r2, r3, r2
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d117      	bne.n	8002c26 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <CO_SDOserver_init+0x60>
 8002bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da02      	bge.n	8002c0a <CO_SDOserver_init+0x66>
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e0d8      	b.n	8002dbc <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002c12:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	611a      	str	r2, [r3, #16]
 8002c24:	e0a4      	b.n	8002d70 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff fdb0 	bl	800278c <OD_getIndex>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8002c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c32:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002c36:	d123      	bne.n	8002c80 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <CO_SDOserver_init+0xa2>
 8002c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da02      	bge.n	8002c4c <CO_SDOserver_init+0xa8>
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e0b7      	b.n	8002dbc <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002c54:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002c5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8002c66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c68:	2301      	movs	r3, #1
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fddc 	bl	800282a <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8002c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c74:	2301      	movs	r3, #1
 8002c76:	2102      	movs	r1, #2
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fdd6 	bl	800282a <OD_set_u32>
 8002c7e:	e077      	b.n	8002d70 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8002c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c82:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8002c86:	d96f      	bls.n	8002d68 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8002c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c8a:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8002c8e:	d26b      	bcs.n	8002d68 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8002c90:	f107 021d 	add.w	r2, r7, #29
 8002c94:	2301      	movs	r3, #1
 8002c96:	2100      	movs	r1, #0
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fd9c 	bl	80027d6 <OD_get_u8>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8002ca4:	f107 0218 	add.w	r2, r7, #24
 8002ca8:	2301      	movs	r3, #1
 8002caa:	2101      	movs	r1, #1
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fda7 	bl	8002800 <OD_get_u32>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8002cb8:	f107 0214 	add.w	r2, r7, #20
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff fd9d 	bl	8002800 <OD_get_u32>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8002cca:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <CO_SDOserver_init+0x14a>
 8002cd2:	7f7b      	ldrb	r3, [r7, #29]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d002      	beq.n	8002cde <CO_SDOserver_init+0x13a>
 8002cd8:	7f7b      	ldrb	r3, [r7, #29]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 8002cde:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <CO_SDOserver_init+0x14a>
 8002ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <CO_SDOserver_init+0x156>
 8002cf4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf8:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8002cfa:	f06f 030b 	mvn.w	r3, #11
 8002cfe:	e05d      	b.n	8002dbc <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db05      	blt.n	8002d12 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8002d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	e000      	b.n	8002d14 <CO_SDOserver_init+0x170>
 8002d12:	2300      	movs	r3, #0
 8002d14:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db05      	blt.n	8002d28 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8002d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	e000      	b.n	8002d2a <CO_SDOserver_init+0x186>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <CO_SDOserver_init+0x220>)
 8002d36:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <CO_SDOserver_init+0x224>)
 8002d3c:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3354      	adds	r3, #84	; 0x54
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fd32 	bl	80027ae <OD_extension_init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 8002d4e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8002d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <CO_SDOserver_init+0x1be>
 8002d5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d60:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8002d62:	f06f 030b 	mvn.w	r3, #11
 8002d66:	e029      	b.n	8002dbc <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e026      	b.n	8002dbc <CO_SDOserver_init+0x218>
        ) {
 8002d6e:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002d80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002d8a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d9e:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8002da0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002da2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002da4:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8002da8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002daa:	9201      	str	r2, [sp, #4]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4603      	mov	r3, r0
 8002db0:	460a      	mov	r2, r1
 8002db2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff fd77 	bl	80028a8 <CO_SDOserver_init_canRxTx>
 8002dba:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	08001011 	.word	0x08001011
 8002dc8:	08002981 	.word	0x08002981

08002dcc <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <OD_getIndex+0x14>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	e000      	b.n	8002e1a <OD_getIndex+0x16>
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <OD_extension_init>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <OD_extension_init+0x14>
 8002e36:	2305      	movs	r3, #5
 8002e38:	e003      	b.n	8002e42 <OD_extension_init+0x1c>
    entry->extension = extension;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <OD_get_u8>:
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002e5e:	7af9      	ldrb	r1, [r7, #11]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2301      	movs	r3, #1
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7fe faf1 	bl	8001450 <OD_get_value>
 8002e6e:	4603      	mov	r3, r0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <OD_get_u32>:
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	460b      	mov	r3, r1
 8002e86:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002e88:	7af9      	ldrb	r1, [r7, #11]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2304      	movs	r3, #4
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7fe fadc 	bl	8001450 <OD_get_value>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7c9b      	ldrb	r3, [r3, #18]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	749a      	strb	r2, [r3, #18]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7c9a      	ldrb	r2, [r3, #18]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7c5b      	ldrb	r3, [r3, #17]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d902      	bls.n	8002ec8 <CO_SYNCsend+0x26>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	7c92      	ldrb	r2, [r2, #18]
 8002eea:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f001 feb0 	bl	8004c5c <CO_CANsend>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8002f06:	b480      	push	{r7}
 8002f08:	b087      	sub	sp, #28
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	791b      	ldrb	r3, [r3, #4]
 8002f18:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	7c5b      	ldrb	r3, [r3, #17]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e019      	b.n	8002f66 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	721a      	strb	r2, [r3, #8]
 8002f3e:	e012      	b.n	8002f66 <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d109      	bne.n	8002f5a <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	3305      	adds	r3, #5
 8002f4a:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781a      	ldrb	r2, [r3, #0]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8002f54:	2301      	movs	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e005      	b.n	8002f66 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2201      	movs	r2, #1
 8002f84:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b08f      	sub	sp, #60	; 0x3c
 8002f98:	af04      	add	r7, sp, #16
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00c      	beq.n	8002fc2 <OD_write_1005+0x2e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	7c5b      	ldrb	r3, [r3, #17]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d108      	bne.n	8002fc2 <OD_write_1005+0x2e>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d102      	bne.n	8002fc2 <OD_write_1005+0x2e>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8002fc2:	2309      	movs	r3, #9
 8002fc4:	e0a3      	b.n	800310e <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	f7ff ff0b 	bl	8002de8 <CO_getUint32>
 8002fd2:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fdc:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	4b49      	ldr	r3, [pc, #292]	; (8003118 <OD_write_1005+0x184>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d133      	bne.n	8003062 <OD_write_1005+0xce>
 8002ffa:	8bfb      	ldrh	r3, [r7, #30]
 8002ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ffe:	d930      	bls.n	8003062 <OD_write_1005+0xce>
 8003000:	8bfb      	ldrh	r3, [r7, #30]
 8003002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003006:	d903      	bls.n	8003010 <OD_write_1005+0x7c>
 8003008:	8bfb      	ldrh	r3, [r7, #30]
 800300a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800300e:	d928      	bls.n	8003062 <OD_write_1005+0xce>
 8003010:	8bfb      	ldrh	r3, [r7, #30]
 8003012:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003016:	d903      	bls.n	8003020 <OD_write_1005+0x8c>
 8003018:	8bfb      	ldrh	r3, [r7, #30]
 800301a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800301e:	d320      	bcc.n	8003062 <OD_write_1005+0xce>
 8003020:	8bfb      	ldrh	r3, [r7, #30]
 8003022:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003026:	d903      	bls.n	8003030 <OD_write_1005+0x9c>
 8003028:	8bfb      	ldrh	r3, [r7, #30]
 800302a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800302e:	d318      	bcc.n	8003062 <OD_write_1005+0xce>
 8003030:	8bfb      	ldrh	r3, [r7, #30]
 8003032:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003036:	d303      	bcc.n	8003040 <OD_write_1005+0xac>
 8003038:	8bfb      	ldrh	r3, [r7, #30]
 800303a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800303e:	d310      	bcc.n	8003062 <OD_write_1005+0xce>
 8003040:	8bfb      	ldrh	r3, [r7, #30]
 8003042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003046:	d80c      	bhi.n	8003062 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <OD_write_1005+0xd2>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <OD_write_1005+0xd2>
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800305c:	8bfa      	ldrh	r2, [r7, #30]
 800305e:	429a      	cmp	r2, r3
 8003060:	d001      	beq.n	8003066 <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8003062:	230f      	movs	r3, #15
 8003064:	e053      	b.n	800310e <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800306c:	8bfa      	ldrh	r2, [r7, #30]
 800306e:	429a      	cmp	r2, r3
 8003070:	d03a      	beq.n	80030e8 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800307a:	8bfa      	ldrh	r2, [r7, #30]
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <OD_write_1005+0x188>)
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	2300      	movs	r3, #0
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800308c:	f001 fcc4 	bl	8004a18 <CO_CANrxBufferInit>
 8003090:	4603      	mov	r3, r0
 8003092:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8003094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 800309c:	2309      	movs	r3, #9
 800309e:	e036      	b.n	800310e <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461c      	mov	r4, r3
 80030ba:	8bfa      	ldrh	r2, [r7, #30]
 80030bc:	2300      	movs	r3, #0
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	9400      	str	r4, [sp, #0]
 80030c2:	2300      	movs	r3, #0
 80030c4:	f001 fd04 	bl	8004ad0 <CO_CANtxBufferInit>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 80030dc:	2309      	movs	r3, #9
 80030de:	e016      	b.n	800310e <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	8bfa      	ldrh	r2, [r7, #30]
 80030e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	2200      	movs	r2, #0
 80030f8:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7fd ffda 	bl	80010c0 <OD_writeOriginal>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	372c      	adds	r7, #44	; 0x2c
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	bf00      	nop
 8003118:	bffff800 	.word	0xbffff800
 800311c:	08002f07 	.word	0x08002f07

08003120 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <OD_write_1019+0x2e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	7c5b      	ldrb	r3, [r3, #17]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <OD_write_1019+0x2e>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <OD_write_1019+0x2e>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800314e:	2309      	movs	r3, #9
 8003150:	e041      	b.n	80031d6 <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8003158:	68b8      	ldr	r0, [r7, #8]
 800315a:	f7ff fe37 	bl	8002dcc <CO_getUint8>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d002      	beq.n	800316e <OD_write_1019+0x4e>
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2bf0      	cmp	r3, #240	; 0xf0
 800316c:	d901      	bls.n	8003172 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 800316e:	230f      	movs	r3, #15
 8003170:	e031      	b.n	80031d6 <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 800317c:	2317      	movs	r3, #23
 800317e:	e02a      	b.n	80031d6 <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461c      	mov	r4, r3
 800319e:	2300      	movs	r3, #0
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	9400      	str	r4, [sp, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	f001 fc93 	bl	8004ad0 <CO_CANtxBufferInit>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2200      	movs	r2, #0
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80031be:	2309      	movs	r3, #9
 80031c0:	e009      	b.n	80031d6 <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	7cfa      	ldrb	r2, [r7, #19]
 80031c6:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7fd ff76 	bl	80010c0 <OD_writeOriginal>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}
	...

080031e0 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af04      	add	r7, sp, #16
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <CO_SYNC_init+0x32>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <CO_SYNC_init+0x32>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <CO_SYNC_init+0x32>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	e0fe      	b.n	8003416 <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8003218:	2260      	movs	r2, #96	; 0x60
 800321a:	2100      	movs	r1, #0
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f022 fda3 	bl	8025d68 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8003226:	f107 0218 	add.w	r2, r7, #24
 800322a:	2301      	movs	r3, #1
 800322c:	2100      	movs	r1, #0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fe22 	bl	8002e78 <OD_get_u32>
 8003234:	4603      	mov	r3, r0
 8003236:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8003238:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8003240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <CO_SYNC_init+0x74>
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fddc 	bl	8002e04 <OD_getIndex>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003252:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003254:	f06f 030b 	mvn.w	r3, #11
 8003258:	e0dd      	b.n	8003416 <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a6f      	ldr	r2, [pc, #444]	; (8003420 <CO_SYNC_init+0x240>)
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a6e      	ldr	r2, [pc, #440]	; (8003424 <CO_SYNC_init+0x244>)
 800326a:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3334      	adds	r3, #52	; 0x34
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff fdd7 	bl	8002e26 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8003278:	2300      	movs	r3, #0
 800327a:	2204      	movs	r2, #4
 800327c:	2100      	movs	r1, #0
 800327e:	6838      	ldr	r0, [r7, #0]
 8003280:	f7fe f94d 	bl	800151e <OD_getPtr>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8003292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <CO_SYNC_init+0xc6>
 8003298:	6838      	ldr	r0, [r7, #0]
 800329a:	f7ff fdb3 	bl	8002e04 <OD_getIndex>
 800329e:	4603      	mov	r3, r0
 80032a0:	461a      	mov	r2, r3
 80032a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a4:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80032a6:	f06f 030b 	mvn.w	r3, #11
 80032aa:	e0b4      	b.n	8003416 <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 80032ac:	2300      	movs	r3, #0
 80032ae:	2204      	movs	r2, #4
 80032b0:	2100      	movs	r1, #0
 80032b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b4:	f7fe f933 	bl	800151e <OD_getPtr>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d010      	beq.n	80032e6 <CO_SYNC_init+0x106>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10c      	bne.n	80032e6 <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d006      	beq.n	80032e0 <CO_SYNC_init+0x100>
 80032d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d4:	f7ff fd96 	bl	8002e04 <OD_getIndex>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032de:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80032e0:	f06f 030b 	mvn.w	r3, #11
 80032e4:	e097      	b.n	8003416 <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d033      	beq.n	8003358 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80032f0:	f107 0217 	add.w	r2, r7, #23
 80032f4:	2301      	movs	r3, #1
 80032f6:	2100      	movs	r1, #0
 80032f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032fa:	f7ff fda8 	bl	8002e4e <OD_get_u8>
 80032fe:	4603      	mov	r3, r0
 8003300:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8003302:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 800330a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <CO_SYNC_init+0x13e>
 8003310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003312:	f7ff fd77 	bl	8002e04 <OD_getIndex>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331c:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 800331e:	f06f 030b 	mvn.w	r3, #11
 8003322:	e078      	b.n	8003416 <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <CO_SYNC_init+0x150>
 800332a:	2302      	movs	r3, #2
 800332c:	75fb      	strb	r3, [r7, #23]
 800332e:	e004      	b.n	800333a <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2bf0      	cmp	r3, #240	; 0xf0
 8003334:	d901      	bls.n	800333a <CO_SYNC_init+0x15a>
 8003336:	23f0      	movs	r3, #240	; 0xf0
 8003338:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a37      	ldr	r2, [pc, #220]	; (8003420 <CO_SYNC_init+0x240>)
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a37      	ldr	r2, [pc, #220]	; (8003428 <CO_SYNC_init+0x248>)
 800334a:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3350      	adds	r3, #80	; 0x50
 8003350:	4619      	mov	r1, r3
 8003352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003354:	f7ff fd67 	bl	8002e26 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8003358:	7dfa      	ldrb	r2, [r7, #23]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003394:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800339a:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80033a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <CO_SYNC_init+0x24c>)
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80033c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033c2:	f001 fb29 	bl	8004a18 <CO_CANrxBufferInit>
 80033c6:	4603      	mov	r3, r0
 80033c8:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 80033ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <CO_SYNC_init+0x1f8>
        return ret;
 80033d2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80033d6:	e01e      	b.n	8003416 <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80033f2:	2300      	movs	r3, #0
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	9000      	str	r0, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033fc:	f001 fb68 	bl	8004ad0 <CO_CANtxBufferInit>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	e000      	b.n	8003416 <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	08001011 	.word	0x08001011
 8003424:	08002f95 	.word	0x08002f95
 8003428:	08003121 	.word	0x08003121
 800342c:	08002f07 	.word	0x08002f07

08003430 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8088 	beq.w	800355a <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <CO_SYNC_process+0x34>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8003472:	2301      	movs	r3, #1
 8003474:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <CO_SYNC_process+0x5c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e000      	b.n	800348e <CO_SYNC_process+0x5e>
 800348c:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 800348e:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d031      	beq.n	80034fa <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d828      	bhi.n	80034fa <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fcf8 	bl	8002ea2 <CO_SYNCsend>
 80034b2:	e022      	b.n	80034fa <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	7c1b      	ldrb	r3, [r3, #16]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d11e      	bne.n	80034fa <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d202      	bcs.n	80034d4 <CO_SYNC_process+0xa4>
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d20d      	bcs.n	80034fa <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80034ec:	2218      	movs	r2, #24
 80034ee:	2101      	movs	r1, #1
 80034f0:	f7fd f97c 	bl	80007ec <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2202      	movs	r2, #2
 80034f8:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <CO_SYNC_process+0xfe>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d909      	bls.n	800352e <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8003522:	2302      	movs	r3, #2
 8003524:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	615a      	str	r2, [r3, #20]
 800352c:	e002      	b.n	8003534 <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	7a1b      	ldrb	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01a      	beq.n	8003572 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	7a1b      	ldrb	r3, [r3, #8]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f248 2340 	movw	r3, #33344	; 0x8240
 800354a:	2219      	movs	r2, #25
 800354c:	2101      	movs	r1, #1
 800354e:	f7fd f94d 	bl	80007ec <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	721a      	strb	r2, [r3, #8]
 8003558:	e00b      	b.n	8003572 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8003572:	7ffb      	ldrb	r3, [r7, #31]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10f      	bne.n	8003598 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	7c1b      	ldrb	r3, [r3, #16]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d108      	bne.n	8003592 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	2218      	movs	r2, #24
 800358c:	2100      	movs	r1, #0
 800358e:	f7fd f92d 	bl	80007ec <CO_error>
        }
        SYNC->timeoutError = 1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8003598:	7ffb      	ldrb	r3, [r7, #31]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <OD_getIndex+0x14>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	e000      	b.n	80035d4 <OD_getIndex+0x16>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <OD_extension_init>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <OD_extension_init+0x14>
 80035f0:	2305      	movs	r3, #5
 80035f2:	e003      	b.n	80035fc <OD_extension_init+0x1c>
    entry->extension = extension;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <OD_get_u32>:
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	460b      	mov	r3, r1
 8003616:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003618:	7af9      	ldrb	r1, [r7, #11]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2304      	movs	r3, #4
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7fd ff14 	bl	8001450 <OD_get_value>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	791b      	ldrb	r3, [r3, #4]
 8003644:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	3305      	adds	r3, #5
 800364a:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b06      	cmp	r3, #6
 8003650:	d108      	bne.n	8003664 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2206      	movs	r2, #6
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	4618      	mov	r0, r3
 800365a:	f022 fb77 	bl	8025d4c <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2201      	movs	r2, #1
 8003662:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00c      	beq.n	800369a <OD_write_1012+0x2e>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	7c5b      	ldrb	r3, [r3, #17]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <OD_write_1012+0x2e>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d102      	bne.n	800369a <OD_write_1012+0x2e>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800369a:	2309      	movs	r3, #9
 800369c:	e051      	b.n	8003742 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80036a4:	68b8      	ldr	r0, [r7, #8]
 80036a6:	f7ff ff7c 	bl	80035a2 <CO_getUint32>
 80036aa:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b4:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <OD_write_1012+0xe0>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d126      	bne.n	800370e <OD_write_1012+0xa2>
 80036c0:	8afb      	ldrh	r3, [r7, #22]
 80036c2:	2b7f      	cmp	r3, #127	; 0x7f
 80036c4:	d923      	bls.n	800370e <OD_write_1012+0xa2>
 80036c6:	8afb      	ldrh	r3, [r7, #22]
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036cc:	d903      	bls.n	80036d6 <OD_write_1012+0x6a>
 80036ce:	8afb      	ldrh	r3, [r7, #22]
 80036d0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80036d4:	d91b      	bls.n	800370e <OD_write_1012+0xa2>
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80036dc:	d903      	bls.n	80036e6 <OD_write_1012+0x7a>
 80036de:	8afb      	ldrh	r3, [r7, #22]
 80036e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036e4:	d313      	bcc.n	800370e <OD_write_1012+0xa2>
 80036e6:	8afb      	ldrh	r3, [r7, #22]
 80036e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036ec:	d903      	bls.n	80036f6 <OD_write_1012+0x8a>
 80036ee:	8afb      	ldrh	r3, [r7, #22]
 80036f0:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80036f4:	d30b      	bcc.n	800370e <OD_write_1012+0xa2>
 80036f6:	8afb      	ldrh	r3, [r7, #22]
 80036f8:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80036fc:	d303      	bcc.n	8003706 <OD_write_1012+0x9a>
 80036fe:	8afb      	ldrh	r3, [r7, #22]
 8003700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003704:	d303      	bcc.n	800370e <OD_write_1012+0xa2>
 8003706:	8afb      	ldrh	r3, [r7, #22]
 8003708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800370c:	d901      	bls.n	8003712 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 800370e:	230f      	movs	r3, #15
 8003710:	e017      	b.n	8003742 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	0fdb      	lsrs	r3, r3, #31
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7fd fcc0 	bl	80010c0 <OD_writeOriginal>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	3ffff800 	.word	0x3ffff800

08003750 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af04      	add	r7, sp, #16
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <CO_TIME_init+0x20>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <CO_TIME_init+0x20>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e061      	b.n	800383a <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8003776:	222c      	movs	r2, #44	; 0x2c
 8003778:	2100      	movs	r1, #0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f022 faf4 	bl	8025d68 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8003780:	f107 0214 	add.w	r2, r7, #20
 8003784:	2301      	movs	r3, #1
 8003786:	2100      	movs	r1, #0
 8003788:	68b8      	ldr	r0, [r7, #8]
 800378a:	f7ff ff3d 	bl	8003608 <OD_get_u32>
 800378e:	4603      	mov	r3, r0
 8003790:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8003792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00c      	beq.n	80037b4 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <CO_TIME_init+0x5e>
 80037a0:	68b8      	ldr	r0, [r7, #8]
 80037a2:	f7ff ff0c 	bl	80035be <OD_getIndex>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80037ae:	f06f 030b 	mvn.w	r3, #11
 80037b2:	e042      	b.n	800383a <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a21      	ldr	r2, [pc, #132]	; (8003844 <CO_TIME_init+0xf4>)
 80037be:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a21      	ldr	r2, [pc, #132]	; (8003848 <CO_TIME_init+0xf8>)
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	331c      	adds	r3, #28
 80037ca:	4619      	mov	r1, r3
 80037cc:	68b8      	ldr	r0, [r7, #8]
 80037ce:	f7ff ff07 	bl	80035e0 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037da:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	0fdb      	lsrs	r3, r3, #31
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 800380c:	8bba      	ldrh	r2, [r7, #28]
 800380e:	8879      	ldrh	r1, [r7, #2]
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <CO_TIME_init+0xfc>)
 8003812:	9302      	str	r3, [sp, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	2300      	movs	r3, #0
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f001 f8f9 	bl	8004a18 <CO_CANrxBufferInit>
 8003826:	4603      	mov	r3, r0
 8003828:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 800382a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <CO_TIME_init+0xe8>
            return ret;
 8003832:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003836:	e000      	b.n	800383a <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	08001011 	.word	0x08001011
 8003848:	0800366d 	.word	0x0800366d
 800384c:	08003633 	.word	0x08003633

08003850 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	e006      	b.n	8003876 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8003868:	220c      	movs	r2, #12
 800386a:	2100      	movs	r1, #0
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f022 fa7b 	bl	8025d68 <memset>

    return ret;
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b090      	sub	sp, #64	; 0x40
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	791b      	ldrb	r3, [r3, #4]
 8003892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8003896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800389a:	2b08      	cmp	r3, #8
 800389c:	f040 814c 	bne.w	8003b38 <CO_LSSslave_receive+0x2b8>
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f040 8147 	bne.w	8003b38 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 80038aa:	2300      	movs	r3, #0
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	3305      	adds	r3, #5
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 80038bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d12c      	bne.n	800391e <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <CO_LSSslave_receive+0x56>
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d020      	beq.n	8003916 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 80038d4:	e12a      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	7c1b      	ldrb	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d110      	bne.n	8003900 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 80038e4:	2bff      	cmp	r3, #255	; 0xff
 80038e6:	d10b      	bne.n	8003900 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80038ee:	2bff      	cmp	r3, #255	; 0xff
 80038f0:	d006      	beq.n	8003900 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80038f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80038fc:	2301      	movs	r3, #1
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	2200      	movs	r2, #0
 8003904:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	3314      	adds	r3, #20
 800390a:	2210      	movs	r2, #16
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f022 fa2a 	bl	8025d68 <memset>
                    break;
 8003914:	e10a      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	2201      	movs	r2, #1
 800391a:	741a      	strb	r2, [r3, #16]
                    break;
 800391c:	e106      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	7c1b      	ldrb	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 80ee 	bne.w	8003b04 <CO_LSSslave_receive+0x284>
            switch (cs) {
 8003928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800392c:	3b40      	subs	r3, #64	; 0x40
 800392e:	2b11      	cmp	r3, #17
 8003930:	f200 80f7 	bhi.w	8003b22 <CO_LSSslave_receive+0x2a2>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <CO_LSSslave_receive+0xbc>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003985 	.word	0x08003985
 8003940:	08003995 	.word	0x08003995
 8003944:	080039a5 	.word	0x080039a5
 8003948:	080039b5 	.word	0x080039b5
 800394c:	08003b23 	.word	0x08003b23
 8003950:	08003b23 	.word	0x08003b23
 8003954:	08003b23 	.word	0x08003b23
 8003958:	08003b23 	.word	0x08003b23
 800395c:	08003b23 	.word	0x08003b23
 8003960:	08003b23 	.word	0x08003b23
 8003964:	08003b23 	.word	0x08003b23
 8003968:	08003b23 	.word	0x08003b23
 800396c:	08003b23 	.word	0x08003b23
 8003970:	08003b23 	.word	0x08003b23
 8003974:	08003b23 	.word	0x08003b23
 8003978:	08003b23 	.word	0x08003b23
 800397c:	08003b23 	.word	0x08003b23
 8003980:	08003a11 	.word	0x08003a11
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	3301      	adds	r3, #1
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	615a      	str	r2, [r3, #20]
                break;
 8003992:	e0cb      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	3301      	adds	r3, #1
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	619a      	str	r2, [r3, #24]
                break;
 80039a2:	e0c3      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	3301      	adds	r3, #1
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b0:	61da      	str	r2, [r3, #28]
                break;
 80039b2:	e0bb      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	3301      	adds	r3, #1
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 80039c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	f040 80ab 	bne.w	8003b26 <CO_LSSslave_receive+0x2a6>
 80039d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f040 80a4 	bne.w	8003b26 <CO_LSSslave_receive+0x2a6>
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	f040 809d 	bne.w	8003b26 <CO_LSSslave_receive+0x2a6>
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	f040 8096 	bne.w	8003b26 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80039fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fc:	2201      	movs	r2, #1
 80039fe:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003a06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 8003a0e:	e08a      	b.n	8003b26 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2bff      	cmp	r3, #255	; 0xff
 8003a18:	f040 8087 	bne.w	8003b2a <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8003a22:	2bff      	cmp	r3, #255	; 0xff
 8003a24:	f040 8081 	bne.w	8003b2a <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	795b      	ldrb	r3, [r3, #5]
 8003a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	799b      	ldrb	r3, [r3, #6]
 8003a34:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	79db      	ldrb	r3, [r3, #7]
 8003a3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8003a40:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a44:	2b1f      	cmp	r3, #31
 8003a46:	d903      	bls.n	8003a50 <CO_LSSslave_receive+0x1d0>
 8003a48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d16d      	bne.n	8003b2c <CO_LSSslave_receive+0x2ac>
 8003a50:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d869      	bhi.n	8003b2c <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8003a58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d865      	bhi.n	8003b2c <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	3301      	adds	r3, #1
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8003a70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a74:	2b80      	cmp	r3, #128	; 0x80
 8003a76:	d10d      	bne.n	8003a94 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	3324      	adds	r3, #36	; 0x24
 8003a88:	2210      	movs	r2, #16
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f022 f96b 	bl	8025d68 <memset>
 8003a92:	e02c      	b.n	8003aee <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a9a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d125      	bne.n	8003aee <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8003aa2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8003ab0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	405a      	eors	r2, r3
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d113      	bne.n	8003aee <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8003aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003acc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8003ad4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d108      	bne.n	8003aee <CO_LSSslave_receive+0x26e>
 8003adc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003ae0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d202      	bcs.n	8003aee <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	2201      	movs	r2, #1
 8003aec:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01a      	beq.n	8003b2a <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003afa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8003afe:	2301      	movs	r3, #1
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 8003b02:	e012      	b.n	8003b2a <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8003b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b06:	3349      	adds	r3, #73	; 0x49
 8003b08:	2208      	movs	r2, #8
 8003b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f022 f91d 	bl	8025d4c <memcpy>
            LSSslave->service = cs;
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b20:	e004      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
                break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
                break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <CO_LSSslave_receive+0x2ac>
                break;
 8003b2a:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	2201      	movs	r2, #1
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003b38:	bf00      	nop
 8003b3a:	3740      	adds	r7, #64	; 0x40
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d018      	beq.n	8003b8a <CO_LSSslave_init+0x4a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d015      	beq.n	8003b8a <CO_LSSslave_init+0x4a>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <CO_LSSslave_init+0x4a>
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00f      	beq.n	8003b8a <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da06      	bge.n	8003b90 <CO_LSSslave_init+0x50>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2bff      	cmp	r3, #255	; 0xff
 8003b88:	d002      	beq.n	8003b90 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	e046      	b.n	8003c1e <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8003b90:	2274      	movs	r2, #116	; 0x74
 8003b92:	2100      	movs	r1, #0
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f022 f8e7 	bl	8025d68 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f022 f8d3 	bl	8025d4c <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8003bd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003bd2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <CO_LSSslave_init+0xe8>)
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003be4:	6a38      	ldr	r0, [r7, #32]
 8003be6:	f000 ff17 	bl	8004a18 <CO_CANrxBufferInit>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf2:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8003bf4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bf6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c04:	f000 ff64 	bl	8004ad0 <CO_CANtxBufferInit>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003c16:	23ff      	movs	r3, #255	; 0xff
 8003c18:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8003c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08003881 	.word	0x08003881

08003c2c <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <CO_NMT_getInternalState+0x16>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c40:	e000      	b.n	8003c44 <CO_NMT_getInternalState+0x18>
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8003c66:	2140      	movs	r1, #64	; 0x40
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f021 fe55 	bl	8025918 <calloc>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80f2 	beq.w	8003e5e <CO_new+0x20e>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	3340      	adds	r3, #64	; 0x40
 8003c7e:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	2001      	movs	r0, #1
 8003c84:	f021 fe48 	bl	8025918 <calloc>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80e4 	beq.w	8003e62 <CO_new+0x212>
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	332c      	adds	r3, #44	; 0x2c
 8003c9e:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8003ca4:	2130      	movs	r1, #48	; 0x30
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f021 fe36 	bl	8025918 <calloc>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	615a      	str	r2, [r3, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80d4 	beq.w	8003e66 <CO_new+0x216>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	3330      	adds	r3, #48	; 0x30
 8003cc2:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f021 fe25 	bl	8025918 <calloc>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	619a      	str	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80c5 	beq.w	8003e6a <CO_new+0x21a>
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8003cea:	2150      	movs	r1, #80	; 0x50
 8003cec:	2001      	movs	r0, #1
 8003cee:	f021 fe13 	bl	8025918 <calloc>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	61da      	str	r2, [r3, #28]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80b5 	beq.w	8003e6e <CO_new+0x21e>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	3350      	adds	r3, #80	; 0x50
 8003d08:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8003d0a:	2311      	movs	r3, #17
 8003d0c:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8003d0e:	7abb      	ldrb	r3, [r7, #10]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d912      	bls.n	8003d3a <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8003d14:	7abb      	ldrb	r3, [r7, #10]
 8003d16:	2108      	movs	r1, #8
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f021 fdfd 	bl	8025918 <calloc>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461a      	mov	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	621a      	str	r2, [r3, #32]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80a1 	beq.w	8003e72 <CO_new+0x222>
 8003d30:	7abb      	ldrb	r3, [r7, #10]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8003d3a:	21a8      	movs	r1, #168	; 0xa8
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f021 fdeb 	bl	8025918 <calloc>
 8003d42:	4603      	mov	r3, r0
 8003d44:	461a      	mov	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8091 	beq.w	8003e76 <CO_new+0x226>
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	33a8      	adds	r3, #168	; 0xa8
 8003d58:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f021 fddb 	bl	8025918 <calloc>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8083 	beq.w	8003e7a <CO_new+0x22a>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	332c      	adds	r3, #44	; 0x2c
 8003d78:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8003d7a:	2160      	movs	r1, #96	; 0x60
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f021 fdcb 	bl	8025918 <calloc>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d075      	beq.n	8003e7e <CO_new+0x22e>
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3360      	adds	r3, #96	; 0x60
 8003d96:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8003d98:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8003d9c:	2007      	movs	r0, #7
 8003d9e:	f021 fdbb 	bl	8025918 <calloc>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d067      	beq.n	8003e82 <CO_new+0x232>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8003db8:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8003dba:	210c      	movs	r1, #12
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f021 fdab 	bl	8025918 <calloc>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d059      	beq.n	8003e86 <CO_new+0x236>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8003dd8:	2174      	movs	r1, #116	; 0x74
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f021 fd9c 	bl	8025918 <calloc>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d04c      	beq.n	8003e8a <CO_new+0x23a>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3374      	adds	r3, #116	; 0x74
 8003df4:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8003df6:	2138      	movs	r1, #56	; 0x38
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f021 fd8d 	bl	8025918 <calloc>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d03f      	beq.n	8003e8e <CO_new+0x23e>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3338      	adds	r3, #56	; 0x38
 8003e12:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8003e14:	210c      	movs	r1, #12
 8003e16:	200d      	movs	r0, #13
 8003e18:	f021 fd7e 	bl	8025918 <calloc>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d032      	beq.n	8003e92 <CO_new+0x242>
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	339c      	adds	r3, #156	; 0x9c
 8003e30:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8003e32:	2118      	movs	r1, #24
 8003e34:	200c      	movs	r0, #12
 8003e36:	f021 fd6f 	bl	8025918 <calloc>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d025      	beq.n	8003e96 <CO_new+0x246>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003e50:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e01c      	b.n	8003e98 <CO_new+0x248>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8003e5e:	bf00      	nop
 8003e60:	e01a      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8003e62:	bf00      	nop
 8003e64:	e018      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8003e66:	bf00      	nop
 8003e68:	e016      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8003e6a:	bf00      	nop
 8003e6c:	e014      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8003e6e:	bf00      	nop
 8003e70:	e012      	b.n	8003e98 <CO_new+0x248>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8003e72:	bf00      	nop
 8003e74:	e010      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8003e76:	bf00      	nop
 8003e78:	e00e      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8003e7a:	bf00      	nop
 8003e7c:	e00c      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8003e7e:	bf00      	nop
 8003e80:	e00a      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8003e82:	bf00      	nop
 8003e84:	e008      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8003e86:	bf00      	nop
 8003e88:	e006      	b.n	8003e98 <CO_new+0x248>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8003e8a:	bf00      	nop
 8003e8c:	e004      	b.n	8003e98 <CO_new+0x248>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8003e8e:	bf00      	nop
 8003e90:	e002      	b.n	8003e98 <CO_new+0x248>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <CO_new+0x248>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8003e96:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <CO_new+0x254>
        CO_delete(co);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f80b 	bl	8003eba <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <CO_new+0x260>
        *heapMemoryUsed = mem;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8003eb0:	697b      	ldr	r3, [r7, #20]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <CO_delete>:

void CO_delete(CO_t *co) {
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d053      	beq.n	8003f70 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fd8d 	bl	80049ec <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f021 ff20 	bl	8025d1c <free>
    CO_free(co->CANrx);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f021 ff1b 	bl	8025d1c <free>
    CO_free(co->CANmodule);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f021 ff16 	bl	8025d1c <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f021 ff11 	bl	8025d1c <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	4618      	mov	r0, r3
 8003f00:	f021 ff0c 	bl	8025d1c <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f021 ff07 	bl	8025d1c <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4618      	mov	r0, r3
 8003f14:	f021 ff02 	bl	8025d1c <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f021 fefd 	bl	8025d1c <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	4618      	mov	r0, r3
 8003f28:	f021 fef8 	bl	8025d1c <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f021 fef3 	bl	8025d1c <free>

    /* Emergency */
    CO_free(co->em);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f021 feee 	bl	8025d1c <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f021 fee9 	bl	8025d1c <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f021 fee4 	bl	8025d1c <free>
    CO_free(co->HBcons);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f021 fedf 	bl	8025d1c <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f021 feda 	bl	8025d1c <free>

    /* CANopen object */
    CO_free(co);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f021 fed7 	bl	8025d1c <free>
 8003f6e:	e000      	b.n	8003f72 <CO_delete+0xb8>
        return;
 8003f70:	bf00      	nop
}
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af04      	add	r7, sp, #16
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <CO_CANinit+0x1a>
 8003f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f90:	e01a      	b.n	8003fc8 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8003f9a:	68b8      	ldr	r0, [r7, #8]
 8003f9c:	f000 fc54 	bl	8004848 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6858      	ldr	r0, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6899      	ldr	r1, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	9202      	str	r2, [sp, #8]
 8003fb0:	220c      	movs	r2, #12
 8003fb2:	9201      	str	r2, [sp, #4]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	230d      	movs	r3, #13
 8003fb8:	460a      	mov	r2, r1
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	f000 fc6c 	bl	8004898 <CO_CANmodule_init>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8003fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	; 0x30
 8003fd4:	af06      	add	r7, sp, #24
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	e01a      	b.n	8004020 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6852      	ldr	r2, [r2, #4]
 8003ff6:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8003ffa:	9105      	str	r1, [sp, #20]
 8003ffc:	210b      	movs	r1, #11
 8003ffe:	9104      	str	r1, [sp, #16]
 8004000:	9203      	str	r2, [sp, #12]
 8004002:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8004006:	9202      	str	r2, [sp, #8]
 8004008:	220c      	movs	r2, #12
 800400a:	9201      	str	r2, [sp, #4]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	f7ff fd94 	bl	8003b40 <CO_LSSslave_init>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 800401c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8004028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402a:	b091      	sub	sp, #68	; 0x44
 800402c:	af0a      	add	r7, sp, #40	; 0x28
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e134      	b.n	80042ac <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <CO_CANopenInit+0x26>
        em = co->em;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8004054:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004058:	2bff      	cmp	r3, #255	; 0xff
 800405a:	d103      	bne.n	8004064 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e00a      	b.n	800407a <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8004064:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <CO_CANopenInit+0x4c>
 800406c:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8004070:	2b00      	cmp	r3, #0
 8004072:	da02      	bge.n	800407a <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004074:	f04f 33ff 	mov.w	r3, #4294967295
 8004078:	e118      	b.n	80042ac <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fbe6 	bl	8003850 <CO_LEDs_init>
 8004084:	4603      	mov	r3, r0
 8004086:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 8004088:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <CO_CANopenInit+0x6e>
 8004090:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004094:	e10a      	b.n	80042ac <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 800409e:	f06f 0312 	mvn.w	r3, #18
 80040a2:	e103      	b.n	80042ac <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	69d8      	ldr	r0, [r3, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80040ac:	4b81      	ldr	r3, [pc, #516]	; (80042b4 <CO_CANopenInit+0x28c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 80040ba:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <CO_CANopenInit+0x28c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 80040c0:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 80040c2:	4a7c      	ldr	r2, [pc, #496]	; (80042b4 <CO_CANopenInit+0x28c>)
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 80040c8:	3218      	adds	r2, #24
 80040ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80040cc:	9105      	str	r1, [sp, #20]
 80040ce:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80040d2:	9104      	str	r1, [sp, #16]
 80040d4:	9203      	str	r2, [sp, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	9202      	str	r2, [sp, #8]
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	2311      	movs	r3, #17
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4633      	mov	r3, r6
 80040e2:	462a      	mov	r2, r5
 80040e4:	4621      	mov	r1, r4
 80040e6:	f7fc faa1 	bl	800062c <CO_EM_init>
 80040ea:	4603      	mov	r3, r0
 80040ec:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 80040ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <CO_CANopenInit+0xd4>
 80040f6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80040fa:	e0d7      	b.n	80042ac <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8004100:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <CO_CANopenInit+0x28c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8004106:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6852      	ldr	r2, [r2, #4]
 8004112:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8004116:	b289      	uxth	r1, r1
 8004118:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 800411c:	b289      	uxth	r1, r1
 800411e:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8004122:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004124:	9008      	str	r0, [sp, #32]
 8004126:	9107      	str	r1, [sp, #28]
 8004128:	210a      	movs	r1, #10
 800412a:	9106      	str	r1, [sp, #24]
 800412c:	9205      	str	r2, [sp, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	9204      	str	r2, [sp, #16]
 8004132:	2200      	movs	r2, #0
 8004134:	9203      	str	r2, [sp, #12]
 8004136:	9302      	str	r3, [sp, #8]
 8004138:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	4633      	mov	r3, r6
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4629      	mov	r1, r5
 8004146:	4620      	mov	r0, r4
 8004148:	f7fc fea4 	bl	8000e94 <CO_NMT_init>
 800414c:	4603      	mov	r3, r0
 800414e:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 8004150:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <CO_CANopenInit+0x136>
 8004158:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800415c:	e0a6      	b.n	80042ac <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6958      	ldr	r0, [r3, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8004166:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <CO_CANopenInit+0x28c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 800416c:	3384      	adds	r3, #132	; 0x84
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	6852      	ldr	r2, [r2, #4]
 8004172:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004174:	9103      	str	r1, [sp, #12]
 8004176:	2104      	movs	r1, #4
 8004178:	9102      	str	r1, [sp, #8]
 800417a:	9201      	str	r2, [sp, #4]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2308      	movs	r3, #8
 8004180:	4622      	mov	r2, r4
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	f7fc fc9c 	bl	8000ac0 <CO_HBconsumer_init>
 8004188:	4603      	mov	r3, r0
 800418a:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 800418c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <CO_CANopenInit+0x172>
 8004194:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004198:	e088      	b.n	80042ac <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <CO_CANopenInit+0x28c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	33b4      	adds	r3, #180	; 0xb4
 80041a2:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80041a4:	2300      	movs	r3, #0
 80041a6:	827b      	strh	r3, [r7, #18]
 80041a8:	e033      	b.n	8004212 <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041b2:	21a8      	movs	r1, #168	; 0xa8
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	18d6      	adds	r6, r2, r3
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	f102 030c 	add.w	r3, r2, #12
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	8a79      	ldrh	r1, [r7, #18]
 80041c8:	3103      	adds	r1, #3
 80041ca:	b289      	uxth	r1, r1
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	6840      	ldr	r0, [r0, #4]
 80041d0:	8a7c      	ldrh	r4, [r7, #18]
 80041d2:	3409      	adds	r4, #9
 80041d4:	b2a4      	uxth	r4, r4
 80041d6:	f897 c048 	ldrb.w	ip, [r7, #72]	; 0x48
 80041da:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80041dc:	9505      	str	r5, [sp, #20]
 80041de:	9404      	str	r4, [sp, #16]
 80041e0:	9003      	str	r0, [sp, #12]
 80041e2:	9102      	str	r1, [sp, #8]
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	4663      	mov	r3, ip
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7fe fcd8 	bl	8002ba4 <CO_SDOserver_init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 80041f8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <CO_CANopenInit+0x1de>
 8004200:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004204:	e052      	b.n	80042ac <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8004206:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800420a:	b29b      	uxth	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	827b      	strh	r3, [r7, #18]
 8004212:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004216:	2b00      	cmp	r3, #0
 8004218:	ddc7      	ble.n	80041aa <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <CO_CANopenInit+0x28c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8004224:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2302      	movs	r3, #2
 8004232:	f7ff fa8d 	bl	8003750 <CO_TIME_init>
 8004236:	4603      	mov	r3, r0
 8004238:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 800423a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <CO_CANopenInit+0x220>
 8004242:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004246:	e031      	b.n	80042ac <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6add      	ldr	r5, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <CO_CANopenInit+0x28c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8004252:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <CO_CANopenInit+0x28c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800425c:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <CO_CANopenInit+0x28c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8004266:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8004268:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <CO_CANopenInit+0x28c>)
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 800426e:	32a8      	adds	r2, #168	; 0xa8
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	6849      	ldr	r1, [r1, #4]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	6840      	ldr	r0, [r0, #4]
 8004278:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800427a:	9406      	str	r4, [sp, #24]
 800427c:	2400      	movs	r4, #0
 800427e:	9405      	str	r4, [sp, #20]
 8004280:	9004      	str	r0, [sp, #16]
 8004282:	2001      	movs	r0, #1
 8004284:	9003      	str	r0, [sp, #12]
 8004286:	9102      	str	r1, [sp, #8]
 8004288:	9201      	str	r2, [sp, #4]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4663      	mov	r3, ip
 800428e:	4632      	mov	r2, r6
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4628      	mov	r0, r5
 8004294:	f7fe ffa4 	bl	80031e0 <CO_SYNC_init>
 8004298:	4603      	mov	r3, r0
 800429a:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 800429c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <CO_CANopenInit+0x282>
 80042a4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80042a8:	e000      	b.n	80042ac <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b4:	240003a0 	.word	0x240003a0

080042b8 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 80042b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ba:	b08f      	sub	sp, #60	; 0x3c
 80042bc:	af06      	add	r7, sp, #24
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	e06c      	b.n	80043ac <CO_CANopenInitPDO+0xf4>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <CO_CANopenInitPDO+0x30>
 80042d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db03      	blt.n	80042e8 <CO_CANopenInitPDO+0x30>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <CO_CANopenInitPDO+0x3e>
 80042f0:	f06f 0312 	mvn.w	r3, #18
 80042f4:	e05a      	b.n	80043ac <CO_CANopenInitPDO+0xf4>
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	e057      	b.n	80043ac <CO_CANopenInitPDO+0xf4>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <CO_CANopenInitPDO+0xfc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	33cc      	adds	r3, #204	; 0xcc
 8004304:	61bb      	str	r3, [r7, #24]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <CO_CANopenInitPDO+0xfc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004310:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8004312:	2300      	movs	r3, #0
 8004314:	83fb      	strh	r3, [r7, #30]
 8004316:	e044      	b.n	80043a2 <CO_CANopenInitPDO+0xea>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	83bb      	strh	r3, [r7, #28]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 800431c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004320:	2b03      	cmp	r3, #3
 8004322:	dc09      	bgt.n	8004338 <CO_CANopenInitPDO+0x80>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8004324:	8bfb      	ldrh	r3, [r7, #30]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	b29a      	uxth	r2, r3
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	b29b      	uxth	r3, r3
 800432e:	4413      	add	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004336:	83bb      	strh	r3, [r7, #28]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004340:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	18d5      	adds	r5, r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f103 020c 	add.w	r2, r3, #12
 8004354:	61ba      	str	r2, [r7, #24]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	f102 010c 	add.w	r1, r2, #12
 800435c:	6179      	str	r1, [r7, #20]
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	6849      	ldr	r1, [r1, #4]
 8004362:	8bf8      	ldrh	r0, [r7, #30]
 8004364:	3002      	adds	r0, #2
 8004366:	b280      	uxth	r0, r0
 8004368:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800436a:	9405      	str	r4, [sp, #20]
 800436c:	9004      	str	r0, [sp, #16]
 800436e:	9103      	str	r1, [sp, #12]
 8004370:	9202      	str	r2, [sp, #8]
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	8bbb      	ldrh	r3, [r7, #28]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4633      	mov	r3, r6
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4628      	mov	r0, r5
 8004380:	f7fd feca 	bl	8002118 <CO_TPDO_init>
 8004384:	4603      	mov	r3, r0
 8004386:	74fb      	strb	r3, [r7, #19]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8004388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <CO_CANopenInitPDO+0xde>
 8004390:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004394:	e00a      	b.n	80043ac <CO_CANopenInitPDO+0xf4>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8004396:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800439a:	b29b      	uxth	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	83fb      	strh	r3, [r7, #30]
 80043a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043a6:	2b06      	cmp	r3, #6
 80043a8:	ddb6      	ble.n	8004318 <CO_CANopenInitPDO+0x60>
        }
    }
#endif

    return CO_ERROR_NO;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3724      	adds	r7, #36	; 0x24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b4:	240003a0 	.word	0x240003a0

080043b8 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d12d      	bne.n	800442c <CO_process_SYNC+0x74>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fc29 	bl	8003c2c <CO_NMT_getInternalState>
 80043da:	4603      	mov	r3, r0
 80043dc:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 80043de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80043e2:	2b7f      	cmp	r3, #127	; 0x7f
 80043e4:	d003      	beq.n	80043ee <CO_process_SYNC+0x36>
 80043e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d101      	bne.n	80043f2 <CO_process_SYNC+0x3a>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <CO_process_SYNC+0x3c>
 80043f2:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80043f4:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	6979      	ldr	r1, [r7, #20]
 8004400:	f7ff f816 	bl	8003430 <CO_SYNC_process>
 8004404:	4603      	mov	r3, r0
 8004406:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d008      	beq.n	8004420 <CO_process_SYNC+0x68>
 800440e:	2b02      	cmp	r3, #2
 8004410:	dc0f      	bgt.n	8004432 <CO_process_SYNC+0x7a>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <CO_process_SYNC+0x78>
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10b      	bne.n	8004432 <CO_process_SYNC+0x7a>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 800441a:	2301      	movs	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
                break;
 800441e:	e008      	b.n	8004432 <CO_process_SYNC+0x7a>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fc5c 	bl	8004ce2 <CO_CANclearPendingSyncPDOs>
                break;
 800442a:	e002      	b.n	8004432 <CO_process_SYNC+0x7a>
        }
    }
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <CO_process_SYNC+0x7a>
                break;
 8004430:	bf00      	nop

    return syncWas;
 8004432:	69fb      	ldr	r3, [r7, #28]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d129      	bne.n	80044a6 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fbe8 	bl	8003c2c <CO_NMT_getInternalState>
 800445c:	4603      	mov	r3, r0
 800445e:	2b05      	cmp	r3, #5
 8004460:	bf0c      	ite	eq
 8004462:	2301      	moveq	r3, #1
 8004464:	2300      	movne	r3, #0
 8004466:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8004468:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800446a:	2300      	movs	r3, #0
 800446c:	82fb      	strh	r3, [r7, #22]
 800446e:	e015      	b.n	800449c <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004474:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004478:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	18d0      	adds	r0, r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	f7fd fbbe 	bl	8001c0c <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8004490:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004494:	b29b      	uxth	r3, r3
 8004496:	3301      	adds	r3, #1
 8004498:	b29b      	uxth	r3, r3
 800449a:	82fb      	strh	r3, [r7, #22]
 800449c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dbe5      	blt.n	8004470 <CO_process_RPDO+0x34>
 80044a4:	e000      	b.n	80044a8 <CO_process_RPDO+0x6c>
        return;
 80044a6:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b088      	sub	sp, #32
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d129      	bne.n	8004518 <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fbaf 	bl	8003c2c <CO_NMT_getInternalState>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 80044da:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80044dc:	2300      	movs	r3, #0
 80044de:	82fb      	strh	r3, [r7, #22]
 80044e0:	e015      	b.n	800450e <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80044ea:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	18d0      	adds	r0, r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	f7fe f827 	bl	8002550 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8004502:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004506:	b29b      	uxth	r3, r3
 8004508:	3301      	adds	r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	82fb      	strh	r3, [r7, #22]
 800450e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004512:	2b06      	cmp	r3, #6
 8004514:	dde5      	ble.n	80044e2 <CO_process_TPDO+0x34>
 8004516:	e000      	b.n	800451a <CO_process_TPDO+0x6c>
        return;
 8004518:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <canopen_app_init+0x58>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4619      	mov	r1, r3
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff fb89 	bl	8003c50 <CO_new>
 800453e:	4603      	mov	r3, r0
 8004540:	4a0e      	ldr	r2, [pc, #56]	; (800457c <canopen_app_init+0x5c>)
 8004542:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <canopen_app_init+0x5c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 800454c:	480c      	ldr	r0, [pc, #48]	; (8004580 <canopen_app_init+0x60>)
 800454e:	f021 fd8f 	bl	8026070 <puts>
        return 1;
 8004552:	2301      	movs	r3, #1
 8004554:	e00c      	b.n	8004570 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %lu bytes for CANopen objects\n", heapMemoryUsed);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4619      	mov	r1, r3
 800455a:	480a      	ldr	r0, [pc, #40]	; (8004584 <canopen_app_init+0x64>)
 800455c:	f021 fd02 	bl	8025f64 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <canopen_app_init+0x58>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a05      	ldr	r2, [pc, #20]	; (800457c <canopen_app_init+0x5c>)
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 800456a:	f000 f80d 	bl	8004588 <canopen_app_resetCommunication>
    return 0;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2400060c 	.word	0x2400060c
 800457c:	24000610 	.word	0x24000610
 8004580:	08026c98 	.word	0x08026c98
 8004584:	08026cb8 	.word	0x08026cb8

08004588 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b08f      	sub	sp, #60	; 0x3c
 800458c:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 800458e:	487d      	ldr	r0, [pc, #500]	; (8004784 <canopen_app_resetCommunication+0x1fc>)
 8004590:	f021 fd6e 	bl	8026070 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8004594:	4b7c      	ldr	r3, [pc, #496]	; (8004788 <canopen_app_resetCommunication+0x200>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 800459e:	4b7b      	ldr	r3, [pc, #492]	; (800478c <canopen_app_resetCommunication+0x204>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f950 	bl	8004848 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 80045a8:	4b77      	ldr	r3, [pc, #476]	; (8004788 <canopen_app_resetCommunication+0x200>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fa1c 	bl	80049ec <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 80045b4:	4b74      	ldr	r3, [pc, #464]	; (8004788 <canopen_app_resetCommunication+0x200>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a74      	ldr	r2, [pc, #464]	; (800478c <canopen_app_resetCommunication+0x204>)
 80045ba:	6811      	ldr	r1, [r2, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fcda 	bl	8003f78 <CO_CANinit>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b71      	ldr	r3, [pc, #452]	; (8004790 <canopen_app_resetCommunication+0x208>)
 80045ca:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80045cc:	4b70      	ldr	r3, [pc, #448]	; (8004790 <canopen_app_resetCommunication+0x208>)
 80045ce:	f993 3000 	ldrsb.w	r3, [r3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80045d6:	4b6e      	ldr	r3, [pc, #440]	; (8004790 <canopen_app_resetCommunication+0x208>)
 80045d8:	f993 3000 	ldrsb.w	r3, [r3]
 80045dc:	4619      	mov	r1, r3
 80045de:	486d      	ldr	r0, [pc, #436]	; (8004794 <canopen_app_resetCommunication+0x20c>)
 80045e0:	f021 fcc0 	bl	8025f64 <iprintf>
        return 1;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0c8      	b.n	800477a <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80045e8:	4b6b      	ldr	r3, [pc, #428]	; (8004798 <canopen_app_resetCommunication+0x210>)
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 80045ee:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <canopen_app_resetCommunication+0x210>)
 80045f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80045f2:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <canopen_app_resetCommunication+0x210>)
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80045f8:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 80045fa:	4b67      	ldr	r3, [pc, #412]	; (8004798 <canopen_app_resetCommunication+0x210>)
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 80045fe:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8004600:	4b61      	ldr	r3, [pc, #388]	; (8004788 <canopen_app_resetCommunication+0x200>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	4b61      	ldr	r3, [pc, #388]	; (800478c <canopen_app_resetCommunication+0x204>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	4b60      	ldr	r3, [pc, #384]	; (800478c <canopen_app_resetCommunication+0x204>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3302      	adds	r3, #2
 8004610:	f107 0108 	add.w	r1, r7, #8
 8004614:	f7ff fcdc 	bl	8003fd0 <CO_LSSinit>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	4b5c      	ldr	r3, [pc, #368]	; (8004790 <canopen_app_resetCommunication+0x208>)
 800461e:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8004620:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <canopen_app_resetCommunication+0x208>)
 8004622:	f993 3000 	ldrsb.w	r3, [r3]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 800462a:	4b59      	ldr	r3, [pc, #356]	; (8004790 <canopen_app_resetCommunication+0x208>)
 800462c:	f993 3000 	ldrsb.w	r3, [r3]
 8004630:	4619      	mov	r1, r3
 8004632:	485a      	ldr	r0, [pc, #360]	; (800479c <canopen_app_resetCommunication+0x214>)
 8004634:	f021 fc96 	bl	8025f64 <iprintf>
        return 2;
 8004638:	2302      	movs	r3, #2
 800463a:	e09e      	b.n	800477a <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 800463c:	4b53      	ldr	r3, [pc, #332]	; (800478c <canopen_app_resetCommunication+0x204>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b52      	ldr	r3, [pc, #328]	; (800478c <canopen_app_resetCommunication+0x204>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 800464c:	4b4e      	ldr	r3, [pc, #312]	; (8004788 <canopen_app_resetCommunication+0x200>)
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	4b53      	ldr	r3, [pc, #332]	; (80047a0 <canopen_app_resetCommunication+0x218>)
 8004652:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8004654:	4b4d      	ldr	r3, [pc, #308]	; (800478c <canopen_app_resetCommunication+0x204>)
 8004656:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	1d3a      	adds	r2, r7, #4
 800465c:	9207      	str	r2, [sp, #28]
 800465e:	9306      	str	r3, [sp, #24]
 8004660:	2300      	movs	r3, #0
 8004662:	9305      	str	r3, [sp, #20]
 8004664:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004668:	9304      	str	r3, [sp, #16]
 800466a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004674:	9302      	str	r3, [sp, #8]
 8004676:	f242 1311 	movw	r3, #8465	; 0x2111
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	2300      	movs	r3, #0
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	460b      	mov	r3, r1
 8004682:	2200      	movs	r2, #0
 8004684:	2100      	movs	r1, #0
 8004686:	f7ff fccf 	bl	8004028 <CO_CANopenInit>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	4b40      	ldr	r3, [pc, #256]	; (8004790 <canopen_app_resetCommunication+0x208>)
 8004690:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <canopen_app_resetCommunication+0x208>)
 8004694:	f993 3000 	ldrsb.w	r3, [r3]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01a      	beq.n	80046d2 <canopen_app_resetCommunication+0x14a>
 800469c:	4b3c      	ldr	r3, [pc, #240]	; (8004790 <canopen_app_resetCommunication+0x208>)
 800469e:	f993 3000 	ldrsb.w	r3, [r3]
 80046a2:	f113 0f13 	cmn.w	r3, #19
 80046a6:	d014      	beq.n	80046d2 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80046a8:	4b39      	ldr	r3, [pc, #228]	; (8004790 <canopen_app_resetCommunication+0x208>)
 80046aa:	f993 3000 	ldrsb.w	r3, [r3]
 80046ae:	f113 0f0c 	cmn.w	r3, #12
 80046b2:	d105      	bne.n	80046c0 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4619      	mov	r1, r3
 80046b8:	483a      	ldr	r0, [pc, #232]	; (80047a4 <canopen_app_resetCommunication+0x21c>)
 80046ba:	f021 fc53 	bl	8025f64 <iprintf>
 80046be:	e006      	b.n	80046ce <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 80046c0:	4b33      	ldr	r3, [pc, #204]	; (8004790 <canopen_app_resetCommunication+0x208>)
 80046c2:	f993 3000 	ldrsb.w	r3, [r3]
 80046c6:	4619      	mov	r1, r3
 80046c8:	4837      	ldr	r0, [pc, #220]	; (80047a8 <canopen_app_resetCommunication+0x220>)
 80046ca:	f021 fc4b 	bl	8025f64 <iprintf>
        }
        return 3;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e053      	b.n	800477a <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80046d2:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <canopen_app_resetCommunication+0x200>)
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <canopen_app_resetCommunication+0x200>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <canopen_app_resetCommunication+0x218>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b2a      	ldr	r3, [pc, #168]	; (800478c <canopen_app_resetCommunication+0x204>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	785c      	ldrb	r4, [r3, #1]
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	4623      	mov	r3, r4
 80046ec:	f7ff fde4 	bl	80042b8 <CO_CANopenInitPDO>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <canopen_app_resetCommunication+0x208>)
 80046f6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80046f8:	4b25      	ldr	r3, [pc, #148]	; (8004790 <canopen_app_resetCommunication+0x208>)
 80046fa:	f993 3000 	ldrsb.w	r3, [r3]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d014      	beq.n	800472c <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <canopen_app_resetCommunication+0x208>)
 8004704:	f993 3000 	ldrsb.w	r3, [r3]
 8004708:	f113 0f0c 	cmn.w	r3, #12
 800470c:	d105      	bne.n	800471a <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%lX\n", errInfo);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4619      	mov	r1, r3
 8004712:	4824      	ldr	r0, [pc, #144]	; (80047a4 <canopen_app_resetCommunication+0x21c>)
 8004714:	f021 fc26 	bl	8025f64 <iprintf>
 8004718:	e006      	b.n	8004728 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 800471a:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <canopen_app_resetCommunication+0x208>)
 800471c:	f993 3000 	ldrsb.w	r3, [r3]
 8004720:	4619      	mov	r1, r3
 8004722:	4822      	ldr	r0, [pc, #136]	; (80047ac <canopen_app_resetCommunication+0x224>)
 8004724:	f021 fc1e 	bl	8025f64 <iprintf>
        }
        return 4;
 8004728:	2304      	movs	r3, #4
 800472a:	e026      	b.n	800477a <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 800472c:	4b17      	ldr	r3, [pc, #92]	; (800478c <canopen_app_resetCommunication+0x204>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	f00b f824 	bl	800f780 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <canopen_app_resetCommunication+0x200>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8004742:	481b      	ldr	r0, [pc, #108]	; (80047b0 <canopen_app_resetCommunication+0x228>)
 8004744:	f021 fc94 	bl	8026070 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <canopen_app_resetCommunication+0x200>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f88a 	bl	8004868 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8004754:	4817      	ldr	r0, [pc, #92]	; (80047b4 <canopen_app_resetCommunication+0x22c>)
 8004756:	f021 fc8b 	bl	8026070 <puts>
    fflush(stdout);
 800475a:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <canopen_app_resetCommunication+0x230>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f021 f9a3 	bl	8025aac <fflush>
    time_old = time_current = HAL_GetTick();
 8004766:	f001 fdaf 	bl	80062c8 <HAL_GetTick>
 800476a:	4603      	mov	r3, r0
 800476c:	4a13      	ldr	r2, [pc, #76]	; (80047bc <canopen_app_resetCommunication+0x234>)
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <canopen_app_resetCommunication+0x234>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <canopen_app_resetCommunication+0x238>)
 8004776:	6013      	str	r3, [r2, #0]
    return 0;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	bd90      	pop	{r4, r7, pc}
 8004782:	bf00      	nop
 8004784:	08026ce4 	.word	0x08026ce4
 8004788:	24000610 	.word	0x24000610
 800478c:	2400060c 	.word	0x2400060c
 8004790:	2400061c 	.word	0x2400061c
 8004794:	08026d0c 	.word	0x08026d0c
 8004798:	24000000 	.word	0x24000000
 800479c:	08026d34 	.word	0x08026d34
 80047a0:	240003a0 	.word	0x240003a0
 80047a4:	08026d60 	.word	0x08026d60
 80047a8:	08026d88 	.word	0x08026d88
 80047ac:	08026db4 	.word	0x08026db4
 80047b0:	08026ddc 	.word	0x08026ddc
 80047b4:	08026e04 	.word	0x08026e04
 80047b8:	240004cc 	.word	0x240004cc
 80047bc:	24000618 	.word	0x24000618
 80047c0:	24000614 	.word	0x24000614

080047c4 <canopen_app_interrupt>:
    }
}

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 80047ca:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <canopen_app_interrupt+0x80>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d0:	f3ef 8210 	mrs	r2, PRIMASK
 80047d4:	607a      	str	r2, [r7, #4]
  return(result);
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80047da:	b672      	cpsid	i
}
 80047dc:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <canopen_app_interrupt+0x80>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d120      	bne.n	800482a <canopen_app_interrupt+0x66>
 80047e8:	4b16      	ldr	r3, [pc, #88]	; (8004844 <canopen_app_interrupt+0x80>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01a      	beq.n	800482a <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 80047f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047fc:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <canopen_app_interrupt+0x80>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fdd6 	bl	80043b8 <CO_process_SYNC>
 800480c:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <canopen_app_interrupt+0x80>)
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	f7ff fe10 	bl	800443c <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <canopen_app_interrupt+0x80>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	f7ff fe42 	bl	80044ae <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <canopen_app_interrupt+0x80>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	bf00      	nop
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	24000610 	.word	0x24000610

08004848 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f003 fd4e 	bl	80082fc <HAL_FDCAN_Stop>
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#endif
    }
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f003 fd11 	bl	80082a6 <HAL_FDCAN_Start>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <CO_CANsetNormalMode+0x28>
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#endif
        {
            CANmodule->CANnormal = true;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	615a      	str	r2, [r3, #20]
        }
    }
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <CO_CANmodule_init+0x20>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <CO_CANmodule_init+0x20>
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e08e      	b.n	80049dc <CO_CANmodule_init+0x144>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 80048c4:	4a47      	ldr	r2, [pc, #284]	; (80049e4 <CO_CANmodule_init+0x14c>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048e0:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 800490c:	2300      	movs	r3, #0
 800490e:	82fb      	strh	r3, [r7, #22]
 8004910:	e02b      	b.n	800496a <CO_CANmodule_init+0xd2>
        rxArray[i].ident = 0U;
 8004912:	8afa      	ldrh	r2, [r7, #22]
 8004914:	4613      	mov	r3, r2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	461a      	mov	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	2200      	movs	r2, #0
 8004924:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8004926:	8afa      	ldrh	r2, [r7, #22]
 8004928:	4613      	mov	r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	461a      	mov	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800493a:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 800493c:	8afa      	ldrh	r2, [r7, #22]
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	461a      	mov	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	2200      	movs	r2, #0
 800494e:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8004950:	8afa      	ldrh	r2, [r7, #22]
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	461a      	mov	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4413      	add	r3, r2
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8004964:	8afb      	ldrh	r3, [r7, #22]
 8004966:	3301      	adds	r3, #1
 8004968:	82fb      	strh	r3, [r7, #22]
 800496a:	8afa      	ldrh	r2, [r7, #22]
 800496c:	887b      	ldrh	r3, [r7, #2]
 800496e:	429a      	cmp	r2, r3
 8004970:	d3cf      	bcc.n	8004912 <CO_CANmodule_init+0x7a>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8004972:	2300      	movs	r3, #0
 8004974:	82bb      	strh	r3, [r7, #20]
 8004976:	e00c      	b.n	8004992 <CO_CANmodule_init+0xfa>
        txArray[i].bufferFull = false;
 8004978:	8aba      	ldrh	r2, [r7, #20]
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	461a      	mov	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	4413      	add	r3, r2
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800498c:	8abb      	ldrh	r3, [r7, #20]
 800498e:	3301      	adds	r3, #1
 8004990:	82bb      	strh	r3, [r7, #20]
 8004992:	8aba      	ldrh	r2, [r7, #20]
 8004994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004996:	429a      	cmp	r2, r3
 8004998:	d3ee      	bcc.n	8004978 <CO_CANmodule_init+0xe0>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4798      	blx	r3
     * Accept non-matching standard ID messages
     * Reject non-matching extended ID messages
     */

#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ConfigGlobalFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT,
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6898      	ldr	r0, [r3, #8]
 80049a4:	2300      	movs	r3, #0
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2300      	movs	r3, #0
 80049aa:	2202      	movs	r2, #2
 80049ac:	2100      	movs	r1, #0
 80049ae:	f003 fc4d 	bl	800824c <HAL_FDCAN_ConfigGlobalFilter>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <CO_CANmodule_init+0x126>
                                     FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295
 80049bc:	e00e      	b.n	80049dc <CO_CANmodule_init+0x144>
    }
#endif
    /* Enable notifications */
    /* Activate the CAN notification interrupts */
#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle,
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f04f 32ff 	mov.w	r2, #4294967295
 80049c6:	4908      	ldr	r1, [pc, #32]	; (80049e8 <CO_CANmodule_init+0x150>)
 80049c8:	4618      	mov	r0, r3
 80049ca:	f003 fee9 	bl	80087a0 <HAL_FDCAN_ActivateNotification>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <CO_CANmodule_init+0x142>
                                           | FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_FIFO_EMPTY | FDCAN_IT_BUS_OFF
                                           | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
                                           | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING,
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80049d4:	f04f 33ff 	mov.w	r3, #4294967295
 80049d8:	e000      	b.n	80049dc <CO_CANmodule_init+0x144>
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	24000620 	.word	0x24000620
 80049e8:	1b800a11 	.word	0x1b800a11

080049ec <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <CO_CANmodule_disable+0x22>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f003 fc77 	bl	80082fc <HAL_FDCAN_Stop>

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
#endif
    }
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	813b      	strh	r3, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d03a      	beq.n	8004ab2 <CO_CANrxBufferInit+0x9a>
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d037      	beq.n	8004ab2 <CO_CANrxBufferInit+0x9a>
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d034      	beq.n	8004ab2 <CO_CANrxBufferInit+0x9a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	891b      	ldrh	r3, [r3, #8]
 8004a4c:	897a      	ldrh	r2, [r7, #10]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d22f      	bcs.n	8004ab2 <CO_CANrxBufferInit+0x9a>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	897a      	ldrh	r2, [r7, #10]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8004a70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a78:	b21b      	sxth	r3, r3
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	2a00      	cmp	r2, #0
 8004a7e:	d001      	beq.n	8004a84 <CO_CANrxBufferInit+0x6c>
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <CO_CANrxBufferInit+0xb4>)
 8004a82:	e000      	b.n	8004a86 <CO_CANrxBufferInit+0x6e>
 8004a84:	2200      	movs	r2, #0
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b21b      	sxth	r3, r3
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8004a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a98:	b21a      	sxth	r2, r3
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <CO_CANrxBufferInit+0xb4>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	b21b      	sxth	r3, r3
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <CO_CANrxBufferInit+0xa0>
            __NOP();
 8004aae:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8004ab0:	e002      	b.n	8004ab8 <CO_CANrxBufferInit+0xa0>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8004ab2:	23ff      	movs	r3, #255	; 0xff
 8004ab4:	75fb      	strb	r3, [r7, #23]
 8004ab6:	e000      	b.n	8004aba <CO_CANrxBufferInit+0xa2>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8004ab8:	bf00      	nop
    }

    return ret;
 8004aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	ffff8000 	.word	0xffff8000

08004ad0 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	607b      	str	r3, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	817b      	strh	r3, [r7, #10]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d024      	beq.n	8004b36 <CO_CANtxBufferInit+0x66>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8a1b      	ldrh	r3, [r3, #16]
 8004af0:	897a      	ldrh	r2, [r7, #10]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d21f      	bcs.n	8004b36 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	897a      	ldrh	r2, [r7, #10]
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	440b      	add	r3, r1
 8004b06:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8004b08:	893b      	ldrh	r3, [r7, #8]
 8004b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	2a00      	cmp	r2, #0
 8004b12:	d002      	beq.n	8004b1a <CO_CANtxBufferInit+0x4a>
 8004b14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b18:	e000      	b.n	8004b1c <CO_CANtxBufferInit+0x4c>
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b28:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8004b36:	697b      	ldr	r3, [r7, #20]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_TxHeaderTypeDef tx_hdr;
    if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f003 fe0f 	bl	800877c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d074      	beq.n	8004c4e <prv_send_can_message+0x10a>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b6c:	4a3a      	ldr	r2, [pc, #232]	; (8004c58 <prv_send_can_message+0x114>)
 8004b6e:	6013      	str	r3, [r2, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	039b      	lsls	r3, r3, #14
 8004b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	4a37      	ldr	r2, [pc, #220]	; (8004c58 <prv_send_can_message+0x114>)
 8004b7c:	6093      	str	r3, [r2, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 8004b7e:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <prv_send_can_message+0x114>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <prv_send_can_message+0x114>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	619a      	str	r2, [r3, #24]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 8004b8a:	4b33      	ldr	r3, [pc, #204]	; (8004c58 <prv_send_can_message+0x114>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	615a      	str	r2, [r3, #20]
        tx_hdr.MessageMarker = 0;
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <prv_send_can_message+0x114>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	621a      	str	r2, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004b96:	4b30      	ldr	r3, [pc, #192]	; (8004c58 <prv_send_can_message+0x114>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <prv_send_can_message+0x114>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	61da      	str	r2, [r3, #28]

        switch (buffer->DLC) {
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	791b      	ldrb	r3, [r3, #4]
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d840      	bhi.n	8004c2c <prv_send_can_message+0xe8>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <prv_send_can_message+0x6c>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004be7 	.word	0x08004be7
 8004bbc:	08004bf1 	.word	0x08004bf1
 8004bc0:	08004bfb 	.word	0x08004bfb
 8004bc4:	08004c05 	.word	0x08004c05
 8004bc8:	08004c0f 	.word	0x08004c0f
 8004bcc:	08004c19 	.word	0x08004c19
 8004bd0:	08004c23 	.word	0x08004c23
            case 0:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 8004bd4:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <prv_send_can_message+0x114>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
                break;
 8004bda:	e028      	b.n	8004c2e <prv_send_can_message+0xea>
            case 1:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 8004bdc:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <prv_send_can_message+0x114>)
 8004bde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004be2:	60da      	str	r2, [r3, #12]
                break;
 8004be4:	e023      	b.n	8004c2e <prv_send_can_message+0xea>
            case 2:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <prv_send_can_message+0x114>)
 8004be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bec:	60da      	str	r2, [r3, #12]
                break;
 8004bee:	e01e      	b.n	8004c2e <prv_send_can_message+0xea>
            case 3:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <prv_send_can_message+0x114>)
 8004bf2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004bf6:	60da      	str	r2, [r3, #12]
                break;
 8004bf8:	e019      	b.n	8004c2e <prv_send_can_message+0xea>
            case 4:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 8004bfa:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <prv_send_can_message+0x114>)
 8004bfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c00:	60da      	str	r2, [r3, #12]
                break;
 8004c02:	e014      	b.n	8004c2e <prv_send_can_message+0xea>
            case 5:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <prv_send_can_message+0x114>)
 8004c06:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8004c0a:	60da      	str	r2, [r3, #12]
                break;
 8004c0c:	e00f      	b.n	8004c2e <prv_send_can_message+0xea>
            case 6:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <prv_send_can_message+0x114>)
 8004c10:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8004c14:	60da      	str	r2, [r3, #12]
                break;
 8004c16:	e00a      	b.n	8004c2e <prv_send_can_message+0xea>
            case 7:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <prv_send_can_message+0x114>)
 8004c1a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004c1e:	60da      	str	r2, [r3, #12]
                break;
 8004c20:	e005      	b.n	8004c2e <prv_send_can_message+0xea>
            case 8:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <prv_send_can_message+0x114>)
 8004c24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c28:	60da      	str	r2, [r3, #12]
                break;
 8004c2a:	e000      	b.n	8004c2e <prv_send_can_message+0xea>
            default: /* Hard error... */
                break;
 8004c2c:	bf00      	nop
        }

        /* Now add message to FIFO. Should not fail */
        success =
            HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6898      	ldr	r0, [r3, #8]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	3305      	adds	r3, #5
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4907      	ldr	r1, [pc, #28]	; (8004c58 <prv_send_can_message+0x114>)
 8004c3c:	f003 fbd5 	bl	80083ea <HAL_FDCAN_AddMessageToTxFifoQ>
 8004c40:	4603      	mov	r3, r0
            == HAL_OK;
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
        success =
 8004c4c:	73fb      	strb	r3, [r7, #15]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	24000624 	.word	0x24000624

08004c5c <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8a5b      	ldrh	r3, [r3, #18]
 8004c7e:	f043 0308 	orr.w	r3, r3, #8
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8004c88:	23f7      	movs	r3, #247	; 0xf7
 8004c8a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c90:	613b      	str	r3, [r7, #16]
  return(result);
 8004c92:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8004c98:	b672      	cpsid	i
}
 8004c9a:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff50 	bl	8004b44 <prv_send_can_message>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	61da      	str	r2, [r3, #28]
 8004cb2:	e009      	b.n	8004cc8 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	bf00      	nop

    return err;
 8004cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8004ce2:	b480      	push	{r7}
 8004ce4:	b087      	sub	sp, #28
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cee:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf4:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8004cfa:	b672      	cpsid	i
}
 8004cfc:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d032      	beq.n	8004d80 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8a1b      	ldrh	r3, [r3, #16]
 8004d1e:	827b      	strh	r3, [r7, #18]
 8004d20:	e02b      	b.n	8004d7a <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68d9      	ldr	r1, [r3, #12]
 8004d26:	8a7a      	ldrh	r2, [r7, #18]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	440b      	add	r3, r1
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01d      	beq.n	8004d74 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68d9      	ldr	r1, [r3, #12]
 8004d3c:	8a7a      	ldrh	r2, [r7, #18]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	440b      	add	r3, r1
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d012      	beq.n	8004d74 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68d9      	ldr	r1, [r3, #12]
 8004d52:	8a7a      	ldrh	r2, [r7, #18]
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	440b      	add	r3, r1
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 8004d70:	2302      	movs	r3, #2
 8004d72:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8004d74:	8a7b      	ldrh	r3, [r7, #18]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	827b      	strh	r3, [r7, #18]
 8004d7a:	8a7b      	ldrh	r3, [r7, #18]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1d0      	bne.n	8004d22 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	bf00      	nop
    if (tpdoDeleted) {
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d006      	beq.n	8004da2 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8a5b      	ldrh	r3, [r3, #18]
 8004d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	825a      	strh	r2, [r3, #18]
    }
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08c      	sub	sp, #48	; 0x30
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8004dc6:	f107 0314 	add.w	r3, r7, #20
 8004dca:	3305      	adds	r3, #5
 8004dcc:	4a53      	ldr	r2, [pc, #332]	; (8004f1c <prv_read_can_received_msg+0x16c>)
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f003 fb65 	bl	80084a0 <HAL_FDCAN_GetRxMessage>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 809a 	bne.w	8004f12 <prv_read_can_received_msg+0x162>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 8004dde:	4b4f      	ldr	r3, [pc, #316]	; (8004f1c <prv_read_can_received_msg+0x16c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <prv_read_can_received_msg+0x16c>)
 8004de4:	6892      	ldr	r2, [r2, #8]
 8004de6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8004dea:	d102      	bne.n	8004df2 <prv_read_can_received_msg+0x42>
 8004dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004df0:	e000      	b.n	8004df4 <prv_read_can_received_msg+0x44>
 8004df2:	2200      	movs	r2, #0
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
    switch (rx_hdr.DataLength) {
 8004df8:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <prv_read_can_received_msg+0x16c>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e00:	d044      	beq.n	8004e8c <prv_read_can_received_msg+0xdc>
 8004e02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e06:	d844      	bhi.n	8004e92 <prv_read_can_received_msg+0xe2>
 8004e08:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8004e0c:	d03b      	beq.n	8004e86 <prv_read_can_received_msg+0xd6>
 8004e0e:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8004e12:	d83e      	bhi.n	8004e92 <prv_read_can_received_msg+0xe2>
 8004e14:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004e18:	d032      	beq.n	8004e80 <prv_read_can_received_msg+0xd0>
 8004e1a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004e1e:	d838      	bhi.n	8004e92 <prv_read_can_received_msg+0xe2>
 8004e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e24:	d029      	beq.n	8004e7a <prv_read_can_received_msg+0xca>
 8004e26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e2a:	d832      	bhi.n	8004e92 <prv_read_can_received_msg+0xe2>
 8004e2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e30:	d020      	beq.n	8004e74 <prv_read_can_received_msg+0xc4>
 8004e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e36:	d82c      	bhi.n	8004e92 <prv_read_can_received_msg+0xe2>
 8004e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e3c:	d017      	beq.n	8004e6e <prv_read_can_received_msg+0xbe>
 8004e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e42:	d826      	bhi.n	8004e92 <prv_read_can_received_msg+0xe2>
 8004e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e48:	d00e      	beq.n	8004e68 <prv_read_can_received_msg+0xb8>
 8004e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e4e:	d820      	bhi.n	8004e92 <prv_read_can_received_msg+0xe2>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <prv_read_can_received_msg+0xac>
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d003      	beq.n	8004e62 <prv_read_can_received_msg+0xb2>
 8004e5a:	e01a      	b.n	8004e92 <prv_read_can_received_msg+0xe2>
        case FDCAN_DLC_BYTES_0:
            rcvMsg.dlc = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	763b      	strb	r3, [r7, #24]
            break;
 8004e60:	e01a      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_1:
            rcvMsg.dlc = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	763b      	strb	r3, [r7, #24]
            break;
 8004e66:	e017      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_2:
            rcvMsg.dlc = 2;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	763b      	strb	r3, [r7, #24]
            break;
 8004e6c:	e014      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_3:
            rcvMsg.dlc = 3;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	763b      	strb	r3, [r7, #24]
            break;
 8004e72:	e011      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_4:
            rcvMsg.dlc = 4;
 8004e74:	2304      	movs	r3, #4
 8004e76:	763b      	strb	r3, [r7, #24]
            break;
 8004e78:	e00e      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_5:
            rcvMsg.dlc = 5;
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	763b      	strb	r3, [r7, #24]
            break;
 8004e7e:	e00b      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_6:
            rcvMsg.dlc = 6;
 8004e80:	2306      	movs	r3, #6
 8004e82:	763b      	strb	r3, [r7, #24]
            break;
 8004e84:	e008      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_7:
            rcvMsg.dlc = 7;
 8004e86:	2307      	movs	r3, #7
 8004e88:	763b      	strb	r3, [r7, #24]
            break;
 8004e8a:	e005      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_8:
            rcvMsg.dlc = 8;
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	763b      	strb	r3, [r7, #24]
            break;
 8004e90:	e002      	b.n	8004e98 <prv_read_can_received_msg+0xe8>
        default:
            rcvMsg.dlc = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	763b      	strb	r3, [r7, #24]
            break; /* Invalid length when more than 8 */
 8004e96:	bf00      	nop
    }
    rcvMsgIdent = rcvMsg.ident;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8004e9c:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <prv_read_can_received_msg+0x170>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <prv_read_can_received_msg+0xfa>
        __BKPT(0);
 8004ea6:	be00      	bkpt	0x0000
 8004ea8:	e01f      	b.n	8004eea <prv_read_can_received_msg+0x13a>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <prv_read_can_received_msg+0x170>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <prv_read_can_received_msg+0x170>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	891b      	ldrh	r3, [r3, #8]
 8004eb8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004eba:	e013      	b.n	8004ee4 <prv_read_can_received_msg+0x134>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	4053      	eors	r3, r2
 8004ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec8:	8852      	ldrh	r2, [r2, #2]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <prv_read_can_received_msg+0x128>
                messageFound = 1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8004ed6:	e008      	b.n	8004eea <prv_read_can_received_msg+0x13a>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8004ed8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004eda:	3b01      	subs	r3, #1
 8004edc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e8      	bne.n	8004ebc <prv_read_can_received_msg+0x10c>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8004eea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d010      	beq.n	8004f14 <prv_read_can_received_msg+0x164>
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <prv_read_can_received_msg+0x164>
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <prv_read_can_received_msg+0x164>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f06:	6852      	ldr	r2, [r2, #4]
 8004f08:	f107 0114 	add.w	r1, r7, #20
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4798      	blx	r3
 8004f10:	e000      	b.n	8004f14 <prv_read_can_received_msg+0x164>
        return;
 8004f12:	bf00      	nop
    }
}
 8004f14:	3730      	adds	r7, #48	; 0x30
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	24000648 	.word	0x24000648
 8004f20:	24000620 	.word	0x24000620

08004f24 <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <HAL_FDCAN_RxFifo0Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	2140      	movs	r1, #64	; 0x40
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff37 	bl	8004db0 <prv_read_can_received_msg>
    }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_FDCAN_RxFifo1Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo1ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo1ITs) {
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
    if (RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) {
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <HAL_FDCAN_RxFifo1Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO1, RxFifo1ITs);
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	2141      	movs	r1, #65	; 0x41
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ff24 	bl	8004db0 <prv_read_can_received_msg>
    }
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
    CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8004f7a:	4b2c      	ldr	r3, [pc, #176]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	621a      	str	r2, [r3, #32]
    CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8004f82:	4b2a      	ldr	r3, [pc, #168]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	61da      	str	r2, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8004f8a:	4b28      	ldr	r3, [pc, #160]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d045      	beq.n	8005022 <HAL_FDCAN_TxBufferCompleteCallback+0xb2>
        CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 8004f96:	4b25      	ldr	r3, [pc, #148]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	617b      	str	r3, [r7, #20]
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 8004f9e:	4b23      	ldr	r3, [pc, #140]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa2:	f3ef 8210 	mrs	r2, PRIMASK
 8004fa6:	60fa      	str	r2, [r7, #12]
  return(result);
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8004fac:	b672      	cpsid	i
}
 8004fae:	bf00      	nop
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	8a1b      	ldrh	r3, [r3, #16]
 8004fb6:	827b      	strh	r3, [r7, #18]
 8004fb8:	e021      	b.n	8004ffe <HAL_FDCAN_TxBufferCompleteCallback+0x8e>
            /* Try to send message */
            if (buffer->bufferFull) {
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d017      	beq.n	8004ff2 <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                if (prv_send_can_message(CANModule_local, buffer)) {
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fdbb 	bl	8004b44 <prv_send_can_message>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                    buffer->bufferFull = false;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]
                    CANModule_local->CANtxCount--;
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	3a01      	subs	r2, #1
 8004fe4:	b292      	uxth	r2, r2
 8004fe6:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	6952      	ldr	r2, [r2, #20]
 8004ff0:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8004ff2:	8a7b      	ldrh	r3, [r7, #18]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	827b      	strh	r3, [r7, #18]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3318      	adds	r3, #24
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	8a7b      	ldrh	r3, [r7, #18]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1da      	bne.n	8004fba <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8005004:	8a7b      	ldrh	r3, [r7, #18]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <HAL_FDCAN_TxBufferCompleteCallback+0xa2>
            CANModule_local->CANtxCount = 0U;
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f383 8810 	msr	PRIMASK, r3
}
 8005020:	bf00      	nop
    }
}
 8005022:	bf00      	nop
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	24000620 	.word	0x24000620

08005030 <MX_DTS_Init>:

DTS_HandleTypeDef hdts;

/* DTS init function */
void MX_DTS_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <MX_DTS_Init+0x4c>)
 8005036:	4a12      	ldr	r2, [pc, #72]	; (8005080 <MX_DTS_Init+0x50>)
 8005038:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <MX_DTS_Init+0x4c>)
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 8005040:	4b0e      	ldr	r3, [pc, #56]	; (800507c <MX_DTS_Init+0x4c>)
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <MX_DTS_Init+0x4c>)
 8005048:	2200      	movs	r2, #0
 800504a:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_1_CYCLE;
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <MX_DTS_Init+0x4c>)
 800504e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005052:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <MX_DTS_Init+0x4c>)
 8005056:	2200      	movs	r2, #0
 8005058:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <MX_DTS_Init+0x4c>)
 800505c:	2200      	movs	r2, #0
 800505e:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <MX_DTS_Init+0x4c>)
 8005062:	2200      	movs	r2, #0
 8005064:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8005066:	4805      	ldr	r0, [pc, #20]	; (800507c <MX_DTS_Init+0x4c>)
 8005068:	f001 fa52 	bl	8006510 <HAL_DTS_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 8005072:	f000 fc3d 	bl	80058f0 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	24000670 	.word	0x24000670
 8005080:	58006800 	.word	0x58006800

08005084 <HAL_DTS_MspInit>:

void HAL_DTS_MspInit(DTS_HandleTypeDef* dtsHandle)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  if(dtsHandle->Instance==DTS)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_DTS_MspInit+0x3c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10e      	bne.n	80050b4 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* DTS clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_DTS_MspInit+0x40>)
 8005098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800509c:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <HAL_DTS_MspInit+0x40>)
 800509e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <HAL_DTS_MspInit+0x40>)
 80050a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	58006800 	.word	0x58006800
 80050c4:	58024400 	.word	0x58024400

080050c8 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan2;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050ce:	4a2f      	ldr	r2, [pc, #188]	; (800518c <MX_FDCAN1_Init+0xc4>)
 80050d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80050d2:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050da:	2200      	movs	r2, #0
 80050dc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80050de:	4b2a      	ldr	r3, [pc, #168]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80050e4:	4b28      	ldr	r3, [pc, #160]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80050ea:	4b27      	ldr	r3, [pc, #156]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050f2:	2208      	movs	r2, #8
 80050f4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 80050fe:	220d      	movs	r2, #13
 8005100:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8005102:	4b21      	ldr	r3, [pc, #132]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005104:	2202      	movs	r2, #2
 8005106:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 8005108:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 800510a:	2208      	movs	r2, #8
 800510c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800510e:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005110:	2201      	movs	r2, #1
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005116:	220d      	movs	r2, #13
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 800511c:	2202      	movs	r2, #2
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005122:	2200      	movs	r2, #0
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8005126:	4b18      	ldr	r3, [pc, #96]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005128:	2200      	movs	r2, #0
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 800512e:	2200      	movs	r2, #0
 8005130:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005134:	2200      	movs	r2, #0
 8005136:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 800513a:	2204      	movs	r2, #4
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005140:	2200      	movs	r2, #0
 8005142:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8005144:	4b10      	ldr	r3, [pc, #64]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005146:	2204      	movs	r2, #4
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 800514c:	2200      	movs	r2, #0
 800514e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005152:	2204      	movs	r2, #4
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005158:	2200      	movs	r2, #0
 800515a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 800515e:	2200      	movs	r2, #0
 8005160:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005164:	2200      	movs	r2, #0
 8005166:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8005168:	4b07      	ldr	r3, [pc, #28]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 800516a:	2200      	movs	r2, #0
 800516c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005170:	2204      	movs	r2, #4
 8005172:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8005174:	4804      	ldr	r0, [pc, #16]	; (8005188 <MX_FDCAN1_Init+0xc0>)
 8005176:	f002 fe8b 	bl	8007e90 <HAL_FDCAN_Init>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8005180:	f000 fbb6 	bl	80058f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8005184:	bf00      	nop
 8005186:	bd80      	pop	{r7, pc}
 8005188:	24000694 	.word	0x24000694
 800518c:	4000a000 	.word	0x4000a000

08005190 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8005194:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005196:	4a2f      	ldr	r2, [pc, #188]	; (8005254 <MX_FDCAN2_Init+0xc4>)
 8005198:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800519a:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 800519c:	2200      	movs	r2, #0
 800519e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80051a6:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80051ac:	4b28      	ldr	r3, [pc, #160]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80051b2:	4b27      	ldr	r3, [pc, #156]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051ba:	2210      	movs	r2, #16
 80051bc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80051be:	4b24      	ldr	r3, [pc, #144]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051c6:	2202      	movs	r2, #2
 80051c8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80051ca:	4b21      	ldr	r3, [pc, #132]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051cc:	2202      	movs	r2, #2
 80051ce:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80051d6:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051d8:	2201      	movs	r2, #1
 80051da:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051de:	2201      	movs	r2, #1
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80051e8:	4b19      	ldr	r3, [pc, #100]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80051ee:	4b18      	ldr	r3, [pc, #96]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005202:	2204      	movs	r2, #4
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005208:	2200      	movs	r2, #0
 800520a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 800520e:	2204      	movs	r2, #4
 8005210:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8005212:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005214:	2200      	movs	r2, #0
 8005216:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 800521a:	2204      	movs	r2, #4
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800521e:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005220:	2200      	movs	r2, #0
 8005222:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005226:	2200      	movs	r2, #0
 8005228:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 800522c:	2200      	movs	r2, #0
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005232:	2200      	movs	r2, #0
 8005234:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 8005238:	2204      	movs	r2, #4
 800523a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800523c:	4804      	ldr	r0, [pc, #16]	; (8005250 <MX_FDCAN2_Init+0xc0>)
 800523e:	f002 fe27 	bl	8007e90 <HAL_FDCAN_Init>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8005248:	f000 fb52 	bl	80058f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800524c:	bf00      	nop
 800524e:	bd80      	pop	{r7, pc}
 8005250:	24000734 	.word	0x24000734
 8005254:	4000a400 	.word	0x4000a400

08005258 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800525c:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <MX_FDCAN3_Init+0xc4>)
 8005260:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8005262:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005264:	2200      	movs	r2, #0
 8005266:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 800526a:	2200      	movs	r2, #0
 800526c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005270:	2200      	movs	r2, #0
 8005272:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005276:	2200      	movs	r2, #0
 8005278:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 800527c:	2200      	movs	r2, #0
 800527e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005282:	2210      	movs	r2, #16
 8005284:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005288:	2201      	movs	r2, #1
 800528a:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800528c:	4b22      	ldr	r3, [pc, #136]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 800528e:	2202      	movs	r2, #2
 8005290:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8005292:	4b21      	ldr	r3, [pc, #132]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005294:	2202      	movs	r2, #2
 8005296:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8005298:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 800529a:	2201      	movs	r2, #1
 800529c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80052bc:	4b16      	ldr	r3, [pc, #88]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052be:	2200      	movs	r2, #0
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052ca:	2204      	movs	r2, #4
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052d6:	2204      	movs	r2, #4
 80052d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052dc:	2200      	movs	r2, #0
 80052de:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80052e0:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052e2:	2204      	movs	r2, #4
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80052f2:	4b09      	ldr	r3, [pc, #36]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80052f8:	4b07      	ldr	r3, [pc, #28]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005300:	2204      	movs	r2, #4
 8005302:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8005304:	4804      	ldr	r0, [pc, #16]	; (8005318 <MX_FDCAN3_Init+0xc0>)
 8005306:	f002 fdc3 	bl	8007e90 <HAL_FDCAN_Init>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8005310:	f000 faee 	bl	80058f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8005314:	bf00      	nop
 8005316:	bd80      	pop	{r7, pc}
 8005318:	240007d4 	.word	0x240007d4
 800531c:	4000d400 	.word	0x4000d400

08005320 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	; 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a63      	ldr	r2, [pc, #396]	; (80054cc <HAL_FDCAN_MspInit+0x1ac>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d147      	bne.n	80053d2 <HAL_FDCAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a61      	ldr	r2, [pc, #388]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 800534a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10e      	bne.n	8005372 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8005354:	4b5f      	ldr	r3, [pc, #380]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005356:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800535a:	4a5e      	ldr	r2, [pc, #376]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 800535c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005360:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005364:	4b5b      	ldr	r3, [pc, #364]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005366:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	623b      	str	r3, [r7, #32]
 8005370:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005372:	4b58      	ldr	r3, [pc, #352]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005378:	4a56      	ldr	r2, [pc, #344]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 800537a:	f043 0308 	orr.w	r3, r3, #8
 800537e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005382:	4b54      	ldr	r3, [pc, #336]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	69fb      	ldr	r3, [r7, #28]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005390:	2303      	movs	r3, #3
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539c:	2300      	movs	r3, #0
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80053a0:	2309      	movs	r3, #9
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a8:	4619      	mov	r1, r3
 80053aa:	484b      	ldr	r0, [pc, #300]	; (80054d8 <HAL_FDCAN_MspInit+0x1b8>)
 80053ac:	f003 ff6a 	bl	8009284 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80053b0:	2200      	movs	r2, #0
 80053b2:	2105      	movs	r1, #5
 80053b4:	2013      	movs	r0, #19
 80053b6:	f001 f883 	bl	80064c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80053ba:	2013      	movs	r0, #19
 80053bc:	f001 f89a 	bl	80064f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80053c0:	2200      	movs	r2, #0
 80053c2:	2105      	movs	r1, #5
 80053c4:	2015      	movs	r0, #21
 80053c6:	f001 f87b 	bl	80064c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80053ca:	2015      	movs	r0, #21
 80053cc:	f001 f892 	bl	80064f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 80053d0:	e078      	b.n	80054c4 <HAL_FDCAN_MspInit+0x1a4>
  else if(fdcanHandle->Instance==FDCAN2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a41      	ldr	r2, [pc, #260]	; (80054dc <HAL_FDCAN_MspInit+0x1bc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d137      	bne.n	800544c <HAL_FDCAN_MspInit+0x12c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80053dc:	4b3c      	ldr	r3, [pc, #240]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3301      	adds	r3, #1
 80053e2:	4a3b      	ldr	r2, [pc, #236]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 80053e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80053e6:	4b3a      	ldr	r3, [pc, #232]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d10e      	bne.n	800540c <HAL_FDCAN_MspInit+0xec>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80053ee:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 80053f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053f4:	4a37      	ldr	r2, [pc, #220]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 80053f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80053fe:	4b35      	ldr	r3, [pc, #212]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005400:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005412:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800541c:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 800541e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800542a:	2360      	movs	r3, #96	; 0x60
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542e:	2302      	movs	r3, #2
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005432:	2300      	movs	r3, #0
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005436:	2300      	movs	r3, #0
 8005438:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800543a:	2309      	movs	r3, #9
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800543e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005442:	4619      	mov	r1, r3
 8005444:	4826      	ldr	r0, [pc, #152]	; (80054e0 <HAL_FDCAN_MspInit+0x1c0>)
 8005446:	f003 ff1d 	bl	8009284 <HAL_GPIO_Init>
}
 800544a:	e03b      	b.n	80054c4 <HAL_FDCAN_MspInit+0x1a4>
  else if(fdcanHandle->Instance==FDCAN3)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a24      	ldr	r2, [pc, #144]	; (80054e4 <HAL_FDCAN_MspInit+0x1c4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d136      	bne.n	80054c4 <HAL_FDCAN_MspInit+0x1a4>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a1c      	ldr	r2, [pc, #112]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 800545e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8005460:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <HAL_FDCAN_MspInit+0x1b0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10e      	bne.n	8005486 <HAL_FDCAN_MspInit+0x166>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 800546a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800546e:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005474:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005478:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 800547a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800548c:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 800548e:	f043 0320 	orr.w	r3, r3, #32
 8005492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <HAL_FDCAN_MspInit+0x1b4>)
 8005498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054a4:	23c0      	movs	r3, #192	; 0xc0
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a8:	2302      	movs	r3, #2
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b0:	2300      	movs	r3, #0
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80054b4:	2302      	movs	r3, #2
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054bc:	4619      	mov	r1, r3
 80054be:	480a      	ldr	r0, [pc, #40]	; (80054e8 <HAL_FDCAN_MspInit+0x1c8>)
 80054c0:	f003 fee0 	bl	8009284 <HAL_GPIO_Init>
}
 80054c4:	bf00      	nop
 80054c6:	3738      	adds	r7, #56	; 0x38
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	4000a000 	.word	0x4000a000
 80054d0:	24000874 	.word	0x24000874
 80054d4:	58024400 	.word	0x58024400
 80054d8:	58020c00 	.word	0x58020c00
 80054dc:	4000a400 	.word	0x4000a400
 80054e0:	58020400 	.word	0x58020400
 80054e4:	4000d400 	.word	0x4000d400
 80054e8:	58021400 	.word	0x58021400

080054ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80054f0:	4a08      	ldr	r2, [pc, #32]	; (8005514 <MX_FREERTOS_Init+0x28>)
 80054f2:	2100      	movs	r1, #0
 80054f4:	4808      	ldr	r0, [pc, #32]	; (8005518 <MX_FREERTOS_Init+0x2c>)
 80054f6:	f00f fc74 	bl	8014de2 <osThreadNew>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4a07      	ldr	r2, [pc, #28]	; (800551c <MX_FREERTOS_Init+0x30>)
 80054fe:	6013      	str	r3, [r2, #0]

  /* creation of CANopenTask */
  CANopenTaskHandle = osThreadNew(taskCANopen, NULL, &CANopenTask_attributes);
 8005500:	4a07      	ldr	r2, [pc, #28]	; (8005520 <MX_FREERTOS_Init+0x34>)
 8005502:	2100      	movs	r1, #0
 8005504:	4807      	ldr	r0, [pc, #28]	; (8005524 <MX_FREERTOS_Init+0x38>)
 8005506:	f00f fc6c 	bl	8014de2 <osThreadNew>
 800550a:	4603      	mov	r3, r0
 800550c:	4a06      	ldr	r2, [pc, #24]	; (8005528 <MX_FREERTOS_Init+0x3c>)
 800550e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}
 8005514:	0802a404 	.word	0x0802a404
 8005518:	0800552d 	.word	0x0800552d
 800551c:	24000878 	.word	0x24000878
 8005520:	0802a428 	.word	0x0802a428
 8005524:	08005545 	.word	0x08005545
 8005528:	2400087c 	.word	0x2400087c

0800552c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8005534:	f00c feae 	bl	8012294 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8005538:	f01f fd00 	bl	8024f3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800553c:	2001      	movs	r0, #1
 800553e:	f00f fce2 	bl	8014f06 <osDelay>
 8005542:	e7fb      	b.n	800553c <StartDefaultTask+0x10>

08005544 <taskCANopen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskCANopen */
void taskCANopen(void *argument)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskCANopen */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800554c:	2001      	movs	r0, #1
 800554e:	f00f fcda 	bl	8014f06 <osDelay>
 8005552:	e7fb      	b.n	800554c <taskCANopen+0x8>

08005554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08c      	sub	sp, #48	; 0x30
 8005558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800555a:	f107 031c 	add.w	r3, r7, #28
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800556a:	4b35      	ldr	r3, [pc, #212]	; (8005640 <MX_GPIO_Init+0xec>)
 800556c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005570:	4a33      	ldr	r2, [pc, #204]	; (8005640 <MX_GPIO_Init+0xec>)
 8005572:	f043 0304 	orr.w	r3, r3, #4
 8005576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800557a:	4b31      	ldr	r3, [pc, #196]	; (8005640 <MX_GPIO_Init+0xec>)
 800557c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005588:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <MX_GPIO_Init+0xec>)
 800558a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800558e:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <MX_GPIO_Init+0xec>)
 8005590:	f043 0320 	orr.w	r3, r3, #32
 8005594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005598:	4b29      	ldr	r3, [pc, #164]	; (8005640 <MX_GPIO_Init+0xec>)
 800559a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80055a6:	4b26      	ldr	r3, [pc, #152]	; (8005640 <MX_GPIO_Init+0xec>)
 80055a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ac:	4a24      	ldr	r2, [pc, #144]	; (8005640 <MX_GPIO_Init+0xec>)
 80055ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055b6:	4b22      	ldr	r3, [pc, #136]	; (8005640 <MX_GPIO_Init+0xec>)
 80055b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <MX_GPIO_Init+0xec>)
 80055c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ca:	4a1d      	ldr	r2, [pc, #116]	; (8005640 <MX_GPIO_Init+0xec>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <MX_GPIO_Init+0xec>)
 80055d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055e2:	4b17      	ldr	r3, [pc, #92]	; (8005640 <MX_GPIO_Init+0xec>)
 80055e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <MX_GPIO_Init+0xec>)
 80055ea:	f043 0302 	orr.w	r3, r3, #2
 80055ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <MX_GPIO_Init+0xec>)
 80055f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <MX_GPIO_Init+0xec>)
 8005602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005606:	4a0e      	ldr	r2, [pc, #56]	; (8005640 <MX_GPIO_Init+0xec>)
 8005608:	f043 0308 	orr.w	r3, r3, #8
 800560c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <MX_GPIO_Init+0xec>)
 8005612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin;
 800561e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005624:	2300      	movs	r3, #0
 8005626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	2300      	movs	r3, #0
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDMMC1_CD_GPIO_Port, &GPIO_InitStruct);
 800562c:	f107 031c 	add.w	r3, r7, #28
 8005630:	4619      	mov	r1, r3
 8005632:	4804      	ldr	r0, [pc, #16]	; (8005644 <MX_GPIO_Init+0xf0>)
 8005634:	f003 fe26 	bl	8009284 <HAL_GPIO_Init>

}
 8005638:	bf00      	nop
 800563a:	3730      	adds	r7, #48	; 0x30
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	58024400 	.word	0x58024400
 8005644:	58020000 	.word	0x58020000

08005648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800564e:	4b47      	ldr	r3, [pc, #284]	; (800576c <main+0x124>)
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d11b      	bne.n	8005692 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800565a:	f3bf 8f4f 	dsb	sy
}
 800565e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005660:	f3bf 8f6f 	isb	sy
}
 8005664:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <main+0x124>)
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800566e:	f3bf 8f4f 	dsb	sy
}
 8005672:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005674:	f3bf 8f6f 	isb	sy
}
 8005678:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800567a:	4b3c      	ldr	r3, [pc, #240]	; (800576c <main+0x124>)
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	4a3b      	ldr	r2, [pc, #236]	; (800576c <main+0x124>)
 8005680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005684:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005686:	f3bf 8f4f 	dsb	sy
}
 800568a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800568c:	f3bf 8f6f 	isb	sy
}
 8005690:	e000      	b.n	8005694 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005692:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005694:	4b35      	ldr	r3, [pc, #212]	; (800576c <main+0x124>)
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d138      	bne.n	8005712 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80056a0:	4b32      	ldr	r3, [pc, #200]	; (800576c <main+0x124>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80056a8:	f3bf 8f4f 	dsb	sy
}
 80056ac:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80056ae:	4b2f      	ldr	r3, [pc, #188]	; (800576c <main+0x124>)
 80056b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	0b5b      	lsrs	r3, r3, #13
 80056ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80056be:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	08db      	lsrs	r3, r3, #3
 80056c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c8:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80056d2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80056d8:	4924      	ldr	r1, [pc, #144]	; (800576c <main+0x124>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	61fa      	str	r2, [r7, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1ef      	bne.n	80056ca <main+0x82>
    } while(sets-- != 0U);
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	1e5a      	subs	r2, r3, #1
 80056ee:	623a      	str	r2, [r7, #32]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80056f4:	f3bf 8f4f 	dsb	sy
}
 80056f8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80056fa:	4b1c      	ldr	r3, [pc, #112]	; (800576c <main+0x124>)
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	4a1b      	ldr	r2, [pc, #108]	; (800576c <main+0x124>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005704:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005706:	f3bf 8f4f 	dsb	sy
}
 800570a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800570c:	f3bf 8f6f 	isb	sy
}
 8005710:	e000      	b.n	8005714 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005712:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005714:	f000 fd88 	bl	8006228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005718:	f000 f830 	bl	800577c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800571c:	f000 f89c 	bl	8005858 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005720:	f7ff ff18 	bl	8005554 <MX_GPIO_Init>
  MX_DTS_Init();
 8005724:	f7ff fc84 	bl	8005030 <MX_DTS_Init>
  MX_FDCAN1_Init();
 8005728:	f7ff fcce 	bl	80050c8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800572c:	f7ff fd30 	bl	8005190 <MX_FDCAN2_Init>
  MX_SDMMC1_SD_Init();
 8005730:	f000 f8e4 	bl	80058fc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8005734:	f00c fb86 	bl	8011e44 <MX_FATFS_Init>
  MX_TIM14_Init();
 8005738:	f000 fba0 	bl	8005e7c <MX_TIM14_Init>
  MX_FDCAN3_Init();
 800573c:	f7ff fd8c 	bl	8005258 <MX_FDCAN3_Init>
  /* USER CODE BEGIN 2 */

  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hfdcan1;
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <main+0x128>)
 8005742:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.HWInitFunction = MX_FDCAN1_Init;
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <main+0x12c>)
 8005746:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.timerHandle = &htim14;
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <main+0x130>)
 800574a:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.desiredNodeID = CAN_OPEN_ID;
 800574c:	2301      	movs	r3, #1
 800574e:	713b      	strb	r3, [r7, #4]
  canOpenNodeSTM32.baudrate = CAN_OPEN_BAUDRATE;
 8005750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005754:	80fb      	strh	r3, [r7, #6]
  canopen_app_init(&canOpenNodeSTM32);
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe fee1 	bl	8004520 <canopen_app_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800575e:	f00f fabf 	bl	8014ce0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8005762:	f7ff fec3 	bl	80054ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005766:	f00f fb01 	bl	8014d6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800576a:	e7fe      	b.n	800576a <main+0x122>
 800576c:	e000ed00 	.word	0xe000ed00
 8005770:	24000694 	.word	0x24000694
 8005774:	080050c9 	.word	0x080050c9
 8005778:	2400094c 	.word	0x2400094c

0800577c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b09c      	sub	sp, #112	; 0x70
 8005780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005786:	224c      	movs	r2, #76	; 0x4c
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f020 faec 	bl	8025d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	2220      	movs	r2, #32
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f020 fae6 	bl	8025d68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800579c:	2002      	movs	r0, #2
 800579e:	f005 f9eb 	bl	800ab78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80057a2:	2300      	movs	r3, #0
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <SystemClock_Config+0xd8>)
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <SystemClock_Config+0xd8>)
 80057ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80057b0:	6193      	str	r3, [r2, #24]
 80057b2:	4b28      	ldr	r3, [pc, #160]	; (8005854 <SystemClock_Config+0xd8>)
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80057be:	bf00      	nop
 80057c0:	4b24      	ldr	r3, [pc, #144]	; (8005854 <SystemClock_Config+0xd8>)
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057cc:	d1f8      	bne.n	80057c0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80057d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057d8:	2302      	movs	r3, #2
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057dc:	2302      	movs	r3, #2
 80057de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80057e0:	2302      	movs	r3, #2
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80057e4:	232c      	movs	r3, #44	; 0x2c
 80057e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80057e8:	2301      	movs	r3, #1
 80057ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80057ec:	2305      	movs	r3, #5
 80057ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80057f0:	2302      	movs	r3, #2
 80057f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80057f4:	230c      	movs	r3, #12
 80057f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005804:	4618      	mov	r0, r3
 8005806:	f005 fa01 	bl	800ac0c <HAL_RCC_OscConfig>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005810:	f000 f86e 	bl	80058f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005814:	233f      	movs	r3, #63	; 0x3f
 8005816:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005818:	2303      	movs	r3, #3
 800581a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005820:	2308      	movs	r3, #8
 8005822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005828:	2340      	movs	r3, #64	; 0x40
 800582a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800582c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005830:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005832:	2340      	movs	r3, #64	; 0x40
 8005834:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	2103      	movs	r1, #3
 800583a:	4618      	mov	r0, r3
 800583c:	f005 fdc0 	bl	800b3c0 <HAL_RCC_ClockConfig>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8005846:	f000 f853 	bl	80058f0 <Error_Handler>
  }
}
 800584a:	bf00      	nop
 800584c:	3770      	adds	r7, #112	; 0x70
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	58024800 	.word	0x58024800

08005858 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b0ae      	sub	sp, #184	; 0xb8
 800585c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800585e:	463b      	mov	r3, r7
 8005860:	22b8      	movs	r2, #184	; 0xb8
 8005862:	2100      	movs	r1, #0
 8005864:	4618      	mov	r0, r3
 8005866:	f020 fa7f 	bl	8025d68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800586a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8005876:	2305      	movs	r3, #5
 8005878:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800587e:	2302      	movs	r3, #2
 8005880:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8005882:	2305      	movs	r3, #5
 8005884:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005886:	2302      	movs	r3, #2
 8005888:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800588e:	2300      	movs	r3, #0
 8005890:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8005896:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800589a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800589c:	463b      	mov	r3, r7
 800589e:	4618      	mov	r0, r3
 80058a0:	f006 f946 	bl	800bb30 <HAL_RCCEx_PeriphCLKConfig>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80058aa:	f000 f821 	bl	80058f0 <Error_Handler>
  }
}
 80058ae:	bf00      	nop
 80058b0:	37b8      	adds	r7, #184	; 0xb8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d102      	bne.n	80058d0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80058ca:	f000 fce9 	bl	80062a0 <HAL_IncTick>
  else if (htim == canopenNodeSTM32->timerHandle) {
      canopen_app_interrupt();
  }

  /* USER CODE END Callback 1 */
}
 80058ce:	e007      	b.n	80058e0 <HAL_TIM_PeriodElapsedCallback+0x28>
  else if (htim == canopenNodeSTM32->timerHandle) {
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_PeriodElapsedCallback+0x28>
      canopen_app_interrupt();
 80058dc:	f7fe ff72 	bl	80047c4 <canopen_app_interrupt>
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40001000 	.word	0x40001000
 80058ec:	2400060c 	.word	0x2400060c

080058f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80058f4:	b672      	cpsid	i
}
 80058f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80058f8:	e7fe      	b.n	80058f8 <Error_Handler+0x8>
	...

080058fc <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <MX_SDMMC1_SD_Init+0x34>)
 8005902:	4a0c      	ldr	r2, [pc, #48]	; (8005934 <MX_SDMMC1_SD_Init+0x38>)
 8005904:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8005906:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <MX_SDMMC1_SD_Init+0x34>)
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <MX_SDMMC1_SD_Init+0x34>)
 800590e:	2200      	movs	r2, #0
 8005910:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8005912:	4b07      	ldr	r3, [pc, #28]	; (8005930 <MX_SDMMC1_SD_Init+0x34>)
 8005914:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005918:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <MX_SDMMC1_SD_Init+0x34>)
 800591c:	2200      	movs	r2, #0
 800591e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8005920:	4b03      	ldr	r3, [pc, #12]	; (8005930 <MX_SDMMC1_SD_Init+0x34>)
 8005922:	2200      	movs	r2, #0
 8005924:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	24000880 	.word	0x24000880
 8005934:	52007000 	.word	0x52007000

08005938 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b0ba      	sub	sp, #232	; 0xe8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005940:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005950:	f107 0318 	add.w	r3, r7, #24
 8005954:	22b8      	movs	r2, #184	; 0xb8
 8005956:	2100      	movs	r1, #0
 8005958:	4618      	mov	r0, r3
 800595a:	f020 fa05 	bl	8025d68 <memset>
  if(sdHandle->Instance==SDMMC1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a38      	ldr	r2, [pc, #224]	; (8005a44 <HAL_SD_MspInit+0x10c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d169      	bne.n	8005a3c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8005968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8005974:	2300      	movs	r3, #0
 8005976:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005978:	f107 0318 	add.w	r3, r7, #24
 800597c:	4618      	mov	r0, r3
 800597e:	f006 f8d7 	bl	800bb30 <HAL_RCCEx_PeriphCLKConfig>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8005988:	f7ff ffb2 	bl	80058f0 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <HAL_SD_MspInit+0x110>)
 800598e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005992:	4a2d      	ldr	r2, [pc, #180]	; (8005a48 <HAL_SD_MspInit+0x110>)
 8005994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005998:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800599c:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <HAL_SD_MspInit+0x110>)
 800599e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80059a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059aa:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <HAL_SD_MspInit+0x110>)
 80059ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059b0:	4a25      	ldr	r2, [pc, #148]	; (8005a48 <HAL_SD_MspInit+0x110>)
 80059b2:	f043 0304 	orr.w	r3, r3, #4
 80059b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059ba:	4b23      	ldr	r3, [pc, #140]	; (8005a48 <HAL_SD_MspInit+0x110>)
 80059bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059c8:	4b1f      	ldr	r3, [pc, #124]	; (8005a48 <HAL_SD_MspInit+0x110>)
 80059ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_SD_MspInit+0x110>)
 80059d0:	f043 0308 	orr.w	r3, r3, #8
 80059d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059d8:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <HAL_SD_MspInit+0x110>)
 80059da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80059e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80059ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	2302      	movs	r3, #2
 80059f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059fa:	2303      	movs	r3, #3
 80059fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005a00:	230c      	movs	r3, #12
 8005a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	480f      	ldr	r0, [pc, #60]	; (8005a4c <HAL_SD_MspInit+0x114>)
 8005a0e:	f003 fc39 	bl	8009284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005a12:	2304      	movs	r3, #4
 8005a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a24:	2303      	movs	r3, #3
 8005a26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4806      	ldr	r0, [pc, #24]	; (8005a50 <HAL_SD_MspInit+0x118>)
 8005a38:	f003 fc24 	bl	8009284 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	37e8      	adds	r7, #232	; 0xe8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	52007000 	.word	0x52007000
 8005a48:	58024400 	.word	0x58024400
 8005a4c:	58020800 	.word	0x58020800
 8005a50:	58020c00 	.word	0x58020c00

08005a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <HAL_MspInit+0x38>)
 8005a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a60:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <HAL_MspInit+0x38>)
 8005a62:	f043 0302 	orr.w	r3, r3, #2
 8005a66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a6a:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <HAL_MspInit+0x38>)
 8005a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	210f      	movs	r1, #15
 8005a7c:	f06f 0001 	mvn.w	r0, #1
 8005a80:	f000 fd1e 	bl	80064c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400

08005a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b090      	sub	sp, #64	; 0x40
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b0f      	cmp	r3, #15
 8005a9c:	d827      	bhi.n	8005aee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	2036      	movs	r0, #54	; 0x36
 8005aa4:	f000 fd0c 	bl	80064c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005aa8:	2036      	movs	r0, #54	; 0x36
 8005aaa:	f000 fd23 	bl	80064f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8005aae:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <HAL_InitTick+0xc4>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005ab4:	4b28      	ldr	r3, [pc, #160]	; (8005b58 <HAL_InitTick+0xc8>)
 8005ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005aba:	4a27      	ldr	r2, [pc, #156]	; (8005b58 <HAL_InitTick+0xc8>)
 8005abc:	f043 0310 	orr.w	r3, r3, #16
 8005ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_InitTick+0xc8>)
 8005ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ad2:	f107 0210 	add.w	r2, r7, #16
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f005 ffe5 	bl	800baac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_InitTick+0x6a>
 8005aec:	e001      	b.n	8005af2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e02b      	b.n	8005b4a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005af2:	f005 ffc5 	bl	800ba80 <HAL_RCC_GetPCLK1Freq>
 8005af6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005af8:	e004      	b.n	8005b04 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005afa:	f005 ffc1 	bl	800ba80 <HAL_RCC_GetPCLK1Freq>
 8005afe:	4603      	mov	r3, r0
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <HAL_InitTick+0xcc>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	0c9b      	lsrs	r3, r3, #18
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <HAL_InitTick+0xd0>)
 8005b14:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <HAL_InitTick+0xd4>)
 8005b16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005b18:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <HAL_InitTick+0xd0>)
 8005b1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005b20:	4a0f      	ldr	r2, [pc, #60]	; (8005b60 <HAL_InitTick+0xd0>)
 8005b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005b26:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <HAL_InitTick+0xd0>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <HAL_InitTick+0xd0>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005b32:	480b      	ldr	r0, [pc, #44]	; (8005b60 <HAL_InitTick+0xd0>)
 8005b34:	f009 fdcc 	bl	800f6d0 <HAL_TIM_Base_Init>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005b3e:	4808      	ldr	r0, [pc, #32]	; (8005b60 <HAL_InitTick+0xd0>)
 8005b40:	f009 fe1e 	bl	800f780 <HAL_TIM_Base_Start_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	e000      	b.n	8005b4a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3740      	adds	r7, #64	; 0x40
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	240003ac 	.word	0x240003ac
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	431bde83 	.word	0x431bde83
 8005b60:	240008fc 	.word	0x240008fc
 8005b64:	40001000 	.word	0x40001000

08005b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b6c:	e7fe      	b.n	8005b6c <NMI_Handler+0x4>

08005b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b72:	e7fe      	b.n	8005b72 <HardFault_Handler+0x4>

08005b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b78:	e7fe      	b.n	8005b78 <MemManage_Handler+0x4>

08005b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b7e:	e7fe      	b.n	8005b7e <BusFault_Handler+0x4>

08005b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b84:	e7fe      	b.n	8005b84 <UsageFault_Handler+0x4>

08005b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b86:	b480      	push	{r7}
 8005b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <FDCAN1_IT0_IRQHandler+0x10>)
 8005b9a:	f002 fe7b 	bl	8008894 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	24000694 	.word	0x24000694

08005ba8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <FDCAN1_IT1_IRQHandler+0x10>)
 8005bae:	f002 fe71 	bl	8008894 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	24000694 	.word	0x24000694

08005bbc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005bc2:	f009 fe63 	bl	800f88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2400094c 	.word	0x2400094c

08005bd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005bd4:	4802      	ldr	r0, [pc, #8]	; (8005be0 <TIM6_DAC_IRQHandler+0x10>)
 8005bd6:	f009 fe59 	bl	800f88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	240008fc 	.word	0x240008fc

08005be4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8005be8:	4802      	ldr	r0, [pc, #8]	; (8005bf4 <OTG_HS_IRQHandler+0x10>)
 8005bea:	f003 fe64 	bl	80098b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	2400e66c 	.word	0x2400e66c

08005bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return 1;
 8005bfc:	2301      	movs	r3, #1
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <_kill>:

int _kill(int pid, int sig)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <_kill+0x20>)
 8005c14:	2216      	movs	r2, #22
 8005c16:	601a      	str	r2, [r3, #0]
  return -1;
 8005c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	2400eda4 	.word	0x2400eda4

08005c2c <_exit>:

void _exit (int status)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c34:	f04f 31ff 	mov.w	r1, #4294967295
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ffe5 	bl	8005c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005c3e:	e7fe      	b.n	8005c3e <_exit+0x12>

08005c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e00a      	b.n	8005c68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c52:	f3af 8000 	nop.w
 8005c56:	4601      	mov	r1, r0
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	60ba      	str	r2, [r7, #8]
 8005c5e:	b2ca      	uxtb	r2, r1
 8005c60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	3301      	adds	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	dbf0      	blt.n	8005c52 <_read+0x12>
  }

  return len;
 8005c70:	687b      	ldr	r3, [r7, #4]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e009      	b.n	8005ca0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	60ba      	str	r2, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	dbf1      	blt.n	8005c8c <_write+0x12>
  }
  return len;
 8005ca8:	687b      	ldr	r3, [r7, #4]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <_close>:

int _close(int file)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cda:	605a      	str	r2, [r3, #4]
  return 0;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <_isatty>:

int _isatty(int file)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005cf2:	2301      	movs	r3, #1
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d24:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <_sbrk+0x5c>)
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <_sbrk+0x60>)
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d30:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <_sbrk+0x64>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <_sbrk+0x64>)
 8005d3a:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <_sbrk+0x68>)
 8005d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d3e:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <_sbrk+0x64>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d205      	bcs.n	8005d58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <_sbrk+0x6c>)
 8005d4e:	220c      	movs	r2, #12
 8005d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d52:	f04f 33ff 	mov.w	r3, #4294967295
 8005d56:	e009      	b.n	8005d6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <_sbrk+0x64>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <_sbrk+0x64>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	4a06      	ldr	r2, [pc, #24]	; (8005d80 <_sbrk+0x64>)
 8005d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	24050000 	.word	0x24050000
 8005d7c:	00000400 	.word	0x00000400
 8005d80:	24000948 	.word	0x24000948
 8005d84:	2400eda8 	.word	0x2400eda8
 8005d88:	2400eda4 	.word	0x2400eda4

08005d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005d90:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <SystemInit+0xd0>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	4a31      	ldr	r2, [pc, #196]	; (8005e5c <SystemInit+0xd0>)
 8005d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005da0:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <SystemInit+0xd4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	2b06      	cmp	r3, #6
 8005daa:	d807      	bhi.n	8005dbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005dac:	4b2c      	ldr	r3, [pc, #176]	; (8005e60 <SystemInit+0xd4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 030f 	bic.w	r3, r3, #15
 8005db4:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <SystemInit+0xd4>)
 8005db6:	f043 0307 	orr.w	r3, r3, #7
 8005dba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005dbc:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <SystemInit+0xd8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <SystemInit+0xd8>)
 8005dc2:	f043 0301 	orr.w	r3, r3, #1
 8005dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005dc8:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <SystemInit+0xd8>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005dce:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <SystemInit+0xd8>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4924      	ldr	r1, [pc, #144]	; (8005e64 <SystemInit+0xd8>)
 8005dd4:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <SystemInit+0xdc>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005dda:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <SystemInit+0xd4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005de6:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <SystemInit+0xd4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 030f 	bic.w	r3, r3, #15
 8005dee:	4a1c      	ldr	r2, [pc, #112]	; (8005e60 <SystemInit+0xd4>)
 8005df0:	f043 0307 	orr.w	r3, r3, #7
 8005df4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005df6:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <SystemInit+0xd8>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <SystemInit+0xd8>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005e02:	4b18      	ldr	r3, [pc, #96]	; (8005e64 <SystemInit+0xd8>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005e08:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <SystemInit+0xd8>)
 8005e0a:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <SystemInit+0xe0>)
 8005e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005e0e:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <SystemInit+0xd8>)
 8005e10:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <SystemInit+0xe4>)
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005e14:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <SystemInit+0xd8>)
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <SystemInit+0xe8>)
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <SystemInit+0xd8>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005e20:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <SystemInit+0xd8>)
 8005e22:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <SystemInit+0xe8>)
 8005e24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <SystemInit+0xd8>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <SystemInit+0xd8>)
 8005e2e:	4a11      	ldr	r2, [pc, #68]	; (8005e74 <SystemInit+0xe8>)
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <SystemInit+0xd8>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <SystemInit+0xd8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <SystemInit+0xd8>)
 8005e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005e44:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <SystemInit+0xd8>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <SystemInit+0xec>)
 8005e4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005e50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005e52:	bf00      	nop
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	e000ed00 	.word	0xe000ed00
 8005e60:	52002000 	.word	0x52002000
 8005e64:	58024400 	.word	0x58024400
 8005e68:	eaf6ed7f 	.word	0xeaf6ed7f
 8005e6c:	02020200 	.word	0x02020200
 8005e70:	01ff0000 	.word	0x01ff0000
 8005e74:	01010280 	.word	0x01010280
 8005e78:	52004000 	.word	0x52004000

08005e7c <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <MX_TIM14_Init+0x40>)
 8005e82:	4a0f      	ldr	r2, [pc, #60]	; (8005ec0 <MX_TIM14_Init+0x44>)
 8005e84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1374;
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <MX_TIM14_Init+0x40>)
 8005e88:	f240 525e 	movw	r2, #1374	; 0x55e
 8005e8c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <MX_TIM14_Init+0x40>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <MX_TIM14_Init+0x40>)
 8005e96:	2264      	movs	r2, #100	; 0x64
 8005e98:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e9a:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <MX_TIM14_Init+0x40>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <MX_TIM14_Init+0x40>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005ea6:	4805      	ldr	r0, [pc, #20]	; (8005ebc <MX_TIM14_Init+0x40>)
 8005ea8:	f009 fc12 	bl	800f6d0 <HAL_TIM_Base_Init>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005eb2:	f7ff fd1d 	bl	80058f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	2400094c 	.word	0x2400094c
 8005ec0:	40002000 	.word	0x40002000

08005ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <HAL_TIM_Base_MspInit+0x48>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d116      	bne.n	8005f04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005ed6:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <HAL_TIM_Base_MspInit+0x4c>)
 8005ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005edc:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <HAL_TIM_Base_MspInit+0x4c>)
 8005ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_TIM_Base_MspInit+0x4c>)
 8005ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2105      	movs	r1, #5
 8005ef8:	202d      	movs	r0, #45	; 0x2d
 8005efa:	f000 fae1 	bl	80064c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005efe:	202d      	movs	r0, #45	; 0x2d
 8005f00:	f000 faf8 	bl	80064f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40002000 	.word	0x40002000
 8005f10:	58024400 	.word	0x58024400

08005f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005f18:	f7ff ff38 	bl	8005d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f1c:	480c      	ldr	r0, [pc, #48]	; (8005f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f1e:	490d      	ldr	r1, [pc, #52]	; (8005f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f20:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f24:	e002      	b.n	8005f2c <LoopCopyDataInit>

08005f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f2a:	3304      	adds	r3, #4

08005f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f30:	d3f9      	bcc.n	8005f26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f32:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f34:	4c0a      	ldr	r4, [pc, #40]	; (8005f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f38:	e001      	b.n	8005f3e <LoopFillZerobss>

08005f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f3c:	3204      	adds	r2, #4

08005f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f40:	d3fb      	bcc.n	8005f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f42:	f01f febb 	bl	8025cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f46:	f7ff fb7f 	bl	8005648 <main>
  bx  lr
 8005f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f4c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005f50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005f54:	24000530 	.word	0x24000530
  ldr r2, =_sidata
 8005f58:	0802a714 	.word	0x0802a714
  ldr r2, =_sbss
 8005f5c:	240005f0 	.word	0x240005f0
  ldr r4, =_ebss
 8005f60:	2400eda8 	.word	0x2400eda8

08005f64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f64:	e7fe      	b.n	8005f64 <ADC3_IRQHandler>

08005f66 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <LAN8742_RegisterBusIO+0x28>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <LAN8742_RegisterBusIO+0x28>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <LAN8742_RegisterBusIO+0x28>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	e014      	b.n	8005fbe <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b086      	sub	sp, #24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d17c      	bne.n	80060e4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e01c      	b.n	800603e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f107 0208 	add.w	r2, r7, #8
 800600c:	2112      	movs	r1, #18
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	4798      	blx	r3
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	da03      	bge.n	8006020 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8006018:	f06f 0304 	mvn.w	r3, #4
 800601c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800601e:	e00b      	b.n	8006038 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	429a      	cmp	r2, r3
 800602a:	d105      	bne.n	8006038 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
         break;
 8006036:	e005      	b.n	8006044 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	3301      	adds	r3, #1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b1f      	cmp	r3, #31
 8006042:	d9df      	bls.n	8006004 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b1f      	cmp	r3, #31
 800604a:	d902      	bls.n	8006052 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800604c:	f06f 0302 	mvn.w	r3, #2
 8006050:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d145      	bne.n	80060e4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6810      	ldr	r0, [r2, #0]
 8006060:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006064:	2100      	movs	r1, #0
 8006066:	4798      	blx	r3
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	db37      	blt.n	80060de <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6810      	ldr	r0, [r2, #0]
 8006076:	f107 0208 	add.w	r2, r7, #8
 800607a:	2100      	movs	r1, #0
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	db28      	blt.n	80060d6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800608e:	e01c      	b.n	80060ca <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80060a2:	d80e      	bhi.n	80060c2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6810      	ldr	r0, [r2, #0]
 80060ac:	f107 0208 	add.w	r2, r7, #8
 80060b0:	2100      	movs	r1, #0
 80060b2:	4798      	blx	r3
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	da07      	bge.n	80060ca <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80060ba:	f06f 0304 	mvn.w	r3, #4
 80060be:	613b      	str	r3, [r7, #16]
                 break;
 80060c0:	e010      	b.n	80060e4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80060c2:	f06f 0301 	mvn.w	r3, #1
 80060c6:	613b      	str	r3, [r7, #16]
               break;
 80060c8:	e00c      	b.n	80060e4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1dd      	bne.n	8006090 <LAN8742_Init+0xc6>
 80060d4:	e006      	b.n	80060e4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80060d6:	f06f 0304 	mvn.w	r3, #4
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	e002      	b.n	80060e4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80060de:	f06f 0303 	mvn.w	r3, #3
 80060e2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d112      	bne.n	8006110 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	4798      	blx	r3
 80060f0:	4603      	mov	r3, r0
 80060f2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80060f4:	bf00      	nop
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	4798      	blx	r3
 80060fc:	4603      	mov	r3, r0
 80060fe:	461a      	mov	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006108:	d9f5      	bls.n	80060f6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8006110:	693b      	ldr	r3, [r7, #16]
 }
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6810      	ldr	r0, [r2, #0]
 800612e:	f107 020c 	add.w	r2, r7, #12
 8006132:	2101      	movs	r1, #1
 8006134:	4798      	blx	r3
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	da02      	bge.n	8006142 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800613c:	f06f 0304 	mvn.w	r3, #4
 8006140:	e06e      	b.n	8006220 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6810      	ldr	r0, [r2, #0]
 800614a:	f107 020c 	add.w	r2, r7, #12
 800614e:	2101      	movs	r1, #1
 8006150:	4798      	blx	r3
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	da02      	bge.n	800615e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006158:	f06f 0304 	mvn.w	r3, #4
 800615c:	e060      	b.n	8006220 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8006168:	2301      	movs	r3, #1
 800616a:	e059      	b.n	8006220 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6810      	ldr	r0, [r2, #0]
 8006174:	f107 020c 	add.w	r2, r7, #12
 8006178:	2100      	movs	r1, #0
 800617a:	4798      	blx	r3
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	da02      	bge.n	8006188 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006182:	f06f 0304 	mvn.w	r3, #4
 8006186:	e04b      	b.n	8006220 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d11b      	bne.n	80061ca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <LAN8742_GetLinkState+0x90>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80061a6:	2302      	movs	r3, #2
 80061a8:	e03a      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e033      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80061c2:	2304      	movs	r3, #4
 80061c4:	e02c      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80061c6:	2305      	movs	r3, #5
 80061c8:	e02a      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6810      	ldr	r0, [r2, #0]
 80061d2:	f107 020c 	add.w	r2, r7, #12
 80061d6:	211f      	movs	r1, #31
 80061d8:	4798      	blx	r3
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da02      	bge.n	80061e6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80061e0:	f06f 0304 	mvn.w	r3, #4
 80061e4:	e01c      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80061f0:	2306      	movs	r3, #6
 80061f2:	e015      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 031c 	and.w	r3, r3, #28
 80061fa:	2b18      	cmp	r3, #24
 80061fc:	d101      	bne.n	8006202 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80061fe:	2302      	movs	r3, #2
 8006200:	e00e      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 031c 	and.w	r3, r3, #28
 8006208:	2b08      	cmp	r3, #8
 800620a:	d101      	bne.n	8006210 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800620c:	2303      	movs	r3, #3
 800620e:	e007      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 031c 	and.w	r3, r3, #28
 8006216:	2b14      	cmp	r3, #20
 8006218:	d101      	bne.n	800621e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800621a:	2304      	movs	r3, #4
 800621c:	e000      	b.n	8006220 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800621e:	2305      	movs	r3, #5
    }				
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800622e:	2003      	movs	r0, #3
 8006230:	f000 f93b 	bl	80064aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006234:	f005 fa7a 	bl	800b72c <HAL_RCC_GetSysClockFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b15      	ldr	r3, [pc, #84]	; (8006290 <HAL_Init+0x68>)
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	4913      	ldr	r1, [pc, #76]	; (8006294 <HAL_Init+0x6c>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006252:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <HAL_Init+0x68>)
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <HAL_Init+0x6c>)
 800625c:	5cd3      	ldrb	r3, [r2, r3]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	4a0b      	ldr	r2, [pc, #44]	; (8006298 <HAL_Init+0x70>)
 800626a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800626c:	4a0b      	ldr	r2, [pc, #44]	; (800629c <HAL_Init+0x74>)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006272:	200f      	movs	r0, #15
 8006274:	f7ff fc0c 	bl	8005a90 <HAL_InitTick>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e002      	b.n	8006288 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006282:	f7ff fbe7 	bl	8005a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	58024400 	.word	0x58024400
 8006294:	0802a44c 	.word	0x0802a44c
 8006298:	240003a8 	.word	0x240003a8
 800629c:	240003a4 	.word	0x240003a4

080062a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_IncTick+0x20>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_IncTick+0x24>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4413      	add	r3, r2
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <HAL_IncTick+0x24>)
 80062b2:	6013      	str	r3, [r2, #0]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	240003b0 	.word	0x240003b0
 80062c4:	24000998 	.word	0x24000998

080062c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  return uwTick;
 80062cc:	4b03      	ldr	r3, [pc, #12]	; (80062dc <HAL_GetTick+0x14>)
 80062ce:	681b      	ldr	r3, [r3, #0]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	24000998 	.word	0x24000998

080062e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062e8:	f7ff ffee 	bl	80062c8 <HAL_GetTick>
 80062ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d005      	beq.n	8006306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062fa:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <HAL_Delay+0x44>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006306:	bf00      	nop
 8006308:	f7ff ffde 	bl	80062c8 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d8f7      	bhi.n	8006308 <HAL_Delay+0x28>
  {
  }
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	240003b0 	.word	0x240003b0

08006328 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006338:	4904      	ldr	r1, [pc, #16]	; (800634c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4313      	orrs	r3, r2
 800633e:	604b      	str	r3, [r1, #4]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	58000400 	.word	0x58000400

08006350 <__NVIC_SetPriorityGrouping>:
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <__NVIC_SetPriorityGrouping+0x40>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800636c:	4013      	ands	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <__NVIC_SetPriorityGrouping+0x44>)
 800637a:	4313      	orrs	r3, r2
 800637c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800637e:	4a04      	ldr	r2, [pc, #16]	; (8006390 <__NVIC_SetPriorityGrouping+0x40>)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	60d3      	str	r3, [r2, #12]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	e000ed00 	.word	0xe000ed00
 8006394:	05fa0000 	.word	0x05fa0000

08006398 <__NVIC_GetPriorityGrouping>:
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <__NVIC_GetPriorityGrouping+0x18>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	f003 0307 	and.w	r3, r3, #7
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	e000ed00 	.word	0xe000ed00

080063b4 <__NVIC_EnableIRQ>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	db0b      	blt.n	80063de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	f003 021f 	and.w	r2, r3, #31
 80063cc:	4907      	ldr	r1, [pc, #28]	; (80063ec <__NVIC_EnableIRQ+0x38>)
 80063ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	2001      	movs	r0, #1
 80063d6:	fa00 f202 	lsl.w	r2, r0, r2
 80063da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	e000e100 	.word	0xe000e100

080063f0 <__NVIC_SetPriority>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	6039      	str	r1, [r7, #0]
 80063fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80063fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006400:	2b00      	cmp	r3, #0
 8006402:	db0a      	blt.n	800641a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	490c      	ldr	r1, [pc, #48]	; (800643c <__NVIC_SetPriority+0x4c>)
 800640a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800640e:	0112      	lsls	r2, r2, #4
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	440b      	add	r3, r1
 8006414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006418:	e00a      	b.n	8006430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4908      	ldr	r1, [pc, #32]	; (8006440 <__NVIC_SetPriority+0x50>)
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	3b04      	subs	r3, #4
 8006428:	0112      	lsls	r2, r2, #4
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	440b      	add	r3, r1
 800642e:	761a      	strb	r2, [r3, #24]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	e000e100 	.word	0xe000e100
 8006440:	e000ed00 	.word	0xe000ed00

08006444 <NVIC_EncodePriority>:
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f1c3 0307 	rsb	r3, r3, #7
 800645e:	2b04      	cmp	r3, #4
 8006460:	bf28      	it	cs
 8006462:	2304      	movcs	r3, #4
 8006464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3304      	adds	r3, #4
 800646a:	2b06      	cmp	r3, #6
 800646c:	d902      	bls.n	8006474 <NVIC_EncodePriority+0x30>
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	3b03      	subs	r3, #3
 8006472:	e000      	b.n	8006476 <NVIC_EncodePriority+0x32>
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43da      	mvns	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	401a      	ands	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800648c:	f04f 31ff 	mov.w	r1, #4294967295
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	fa01 f303 	lsl.w	r3, r1, r3
 8006496:	43d9      	mvns	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800649c:	4313      	orrs	r3, r2
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3724      	adds	r7, #36	; 0x24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff ff4c 	bl	8006350 <__NVIC_SetPriorityGrouping>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064ce:	f7ff ff63 	bl	8006398 <__NVIC_GetPriorityGrouping>
 80064d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	6978      	ldr	r0, [r7, #20]
 80064da:	f7ff ffb3 	bl	8006444 <NVIC_EncodePriority>
 80064de:	4602      	mov	r2, r0
 80064e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff ff82 	bl	80063f0 <__NVIC_SetPriority>
}
 80064ec:	bf00      	nop
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff ff56 	bl	80063b4 <__NVIC_EnableIRQ>
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e089      	b.n	8006636 <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fe fda8 	bl	8005084 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e075      	b.n	8006636 <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e06e      	b.n	8006636 <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d108      	bne.n	8006572 <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	e00e      	b.n	8006590 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657a:	d001      	beq.n	8006580 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e05a      	b.n	8006636 <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800658e:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006598:	d108      	bne.n	80065ac <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e007      	b.n	80065bc <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80065ba:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	061a      	lsls	r2, r3, #24
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	b299      	uxth	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	041a      	lsls	r2, r3, #16
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	4b08      	ldr	r3, [pc, #32]	; (8006640 <HAL_DTS_Init+0x130>)
 800661e:	4013      	ands	r3, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	69d1      	ldr	r1, [r2, #28]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	430b      	orrs	r3, r1
 800662a:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	ffff0000 	.word	0xffff0000

08006644 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e0cf      	b.n	80067f6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2223      	movs	r2, #35	; 0x23
 8006664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f00c f8e5 	bl	8012838 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800666e:	4b64      	ldr	r3, [pc, #400]	; (8006800 <HAL_ETH_Init+0x1bc>)
 8006670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006674:	4a62      	ldr	r2, [pc, #392]	; (8006800 <HAL_ETH_Init+0x1bc>)
 8006676:	f043 0302 	orr.w	r3, r3, #2
 800667a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800667e:	4b60      	ldr	r3, [pc, #384]	; (8006800 <HAL_ETH_Init+0x1bc>)
 8006680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	7a1b      	ldrb	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006694:	2000      	movs	r0, #0
 8006696:	f7ff fe47 	bl	8006328 <HAL_SYSCFG_ETHInterfaceSelect>
 800669a:	e003      	b.n	80066a4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800669c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80066a0:	f7ff fe42 	bl	8006328 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80066a4:	4b57      	ldr	r3, [pc, #348]	; (8006804 <HAL_ETH_Init+0x1c0>)
 80066a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6812      	ldr	r2, [r2, #0]
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066c0:	f7ff fe02 	bl	80062c8 <HAL_GetTick>
 80066c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80066c6:	e011      	b.n	80066ec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80066c8:	f7ff fdfe 	bl	80062c8 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80066d6:	d909      	bls.n	80066ec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2204      	movs	r2, #4
 80066dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	22e0      	movs	r2, #224	; 0xe0
 80066e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e084      	b.n	80067f6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e4      	bne.n	80066c8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fdfa 	bl	80072f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006704:	f005 f98c 	bl	800ba20 <HAL_RCC_GetHCLKFreq>
 8006708:	4603      	mov	r3, r0
 800670a:	4a3f      	ldr	r2, [pc, #252]	; (8006808 <HAL_ETH_Init+0x1c4>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	0c9a      	lsrs	r2, r3, #18
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3a01      	subs	r2, #1
 8006718:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 ffe5 	bl	80076ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800672e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800673a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800673e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	22e0      	movs	r2, #224	; 0xe0
 800675a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e049      	b.n	80067f6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800676e:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_ETH_Init+0x1c8>)
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6952      	ldr	r2, [r2, #20]
 8006776:	0051      	lsls	r1, r2, #1
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	430b      	orrs	r3, r1
 800677e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006782:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 f84d 	bl	8007826 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 f893 	bl	80078b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	3305      	adds	r3, #5
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	021a      	lsls	r2, r3, #8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	3304      	adds	r3, #4
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	4619      	mov	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	3303      	adds	r3, #3
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	061a      	lsls	r2, r3, #24
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	3302      	adds	r3, #2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	3301      	adds	r3, #1
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067de:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2210      	movs	r2, #16
 80067f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
 8006804:	58000400 	.word	0x58000400
 8006808:	431bde83 	.word	0x431bde83
 800680c:	ffff8001 	.word	0xffff8001

08006810 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681e:	2b10      	cmp	r3, #16
 8006820:	d179      	bne.n	8006916 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2223      	movs	r2, #35	; 0x23
 8006826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b38      	ldr	r3, [pc, #224]	; (8006920 <HAL_ETH_Start_IT+0x110>)
 800683e:	430b      	orrs	r3, r1
 8006840:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	4b34      	ldr	r3, [pc, #208]	; (8006924 <HAL_ETH_Start_IT+0x114>)
 8006852:	430b      	orrs	r3, r1
 8006854:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2204      	movs	r2, #4
 800685c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9eb 	bl	8006c3a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0202 	orr.w	r2, r2, #2
 8006872:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0201 	orr.w	r2, r2, #1
 8006894:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068b0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80068e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068e8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f4:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8006900:	430b      	orrs	r3, r1
 8006902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006906:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2223      	movs	r2, #35	; 0x23
 800690e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e000      	b.n	8006918 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
  }
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	0c020060 	.word	0x0c020060
 8006924:	0c20c000 	.word	0x0c20c000

08006928 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006936:	2b23      	cmp	r3, #35	; 0x23
 8006938:	d165      	bne.n	8006a06 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2223      	movs	r2, #35	; 0x23
 800693e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800694a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <HAL_ETH_Stop_IT+0xec>)
 8006954:	400b      	ands	r3, r1
 8006956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800695a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006966:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006976:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006982:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006992:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0202 	bic.w	r2, r2, #2
 80069c8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	e00e      	b.n	80069ee <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	3212      	adds	r2, #18
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d9ed      	bls.n	80069d0 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2210      	movs	r2, #16
 80069fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	ffff2f3e 	.word	0xffff2f3e

08006a18 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d109      	bne.n	8006a3c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e03a      	b.n	8006ab2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a42:	2b23      	cmp	r3, #35	; 0x23
 8006a44:	d134      	bne.n	8006ab0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 ff8e 	bl	8007974 <ETH_Prepare_Tx_Descriptors>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f043 0202 	orr.w	r2, r3, #2
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e01f      	b.n	8006ab2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8006a72:	f3bf 8f4f 	dsb	sy
}
 8006a76:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d904      	bls.n	8006a94 <HAL_ETH_Transmit_IT+0x7c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	1f1a      	subs	r2, r3, #4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3106      	adds	r1, #6
 8006aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006aa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006aa8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	e000      	b.n	8006ab2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
  }
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b088      	sub	sp, #32
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad8:	f043 0201 	orr.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e0a5      	b.n	8006c32 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aec:	2b23      	cmp	r3, #35	; 0x23
 8006aee:	d001      	beq.n	8006af4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e09e      	b.n	8006c32 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	3212      	adds	r2, #18
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0a:	f1c3 0304 	rsb	r3, r3, #4
 8006b0e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006b10:	e067      	b.n	8006be2 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <HAL_ETH_ReadData+0x88>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d03d      	beq.n	8006bbe <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00d      	beq.n	8006b88 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006b98:	461a      	mov	r2, r3
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f00c f803 	bl	8012ba8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d902      	bls.n	8006bd0 <HAL_ETH_ReadData+0x116>
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3b04      	subs	r3, #4
 8006bce:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	3212      	adds	r2, #18
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3301      	adds	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	db06      	blt.n	8006bf8 <HAL_ETH_ReadData+0x13e>
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d202      	bcs.n	8006bf8 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d08c      	beq.n	8006b12 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	441a      	add	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f814 	bl	8006c3a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d108      	bne.n	8006c30 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e000      	b.n	8006c32 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b088      	sub	sp, #32
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006c46:	2301      	movs	r3, #1
 8006c48:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c4e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	3212      	adds	r2, #18
 8006c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c60:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006c62:	e03b      	b.n	8006cdc <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d112      	bne.n	8006c92 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006c6c:	f107 030c 	add.w	r3, r7, #12
 8006c70:	4618      	mov	r0, r3
 8006c72:	f00b ff69 	bl	8012b48 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	74fb      	strb	r3, [r7, #19]
 8006c80:	e007      	b.n	8006c92 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	461a      	mov	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006c92:	7cfb      	ldrb	r3, [r7, #19]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d021      	beq.n	8006cdc <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006c98:	f3bf 8f5f 	dmb	sy
}
 8006c9c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e003      	b.n	8006cb8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8006cb6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d902      	bls.n	8006cca <ETH_UpdateDescriptor+0x90>
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3b04      	subs	r3, #4
 8006cc8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	3212      	adds	r2, #18
 8006cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd4:	617b      	str	r3, [r7, #20]
      desccount--;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <ETH_UpdateDescriptor+0xae>
 8006ce2:	7cfb      	ldrb	r3, [r7, #19]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1bd      	bne.n	8006c64 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d00d      	beq.n	8006d0e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8006d0e:	bf00      	nop
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3318      	adds	r3, #24
 8006d22:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8006d34:	e03f      	b.n	8006db6 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8006d36:	2301      	movs	r3, #1
 8006d38:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	3304      	adds	r3, #4
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d106      	bne.n	8006d5e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3301      	adds	r3, #1
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d028      	beq.n	8006db6 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68d9      	ldr	r1, [r3, #12]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	440b      	add	r3, r1
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	db1b      	blt.n	8006db2 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f00b ff76 	bl	8012c78 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3304      	adds	r3, #4
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c
 8006db0:	e001      	b.n	8006db6 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_ETH_ReleaseTxPacket+0xac>
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1b9      	bne.n	8006d36 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e03e      	b.n	8006e6c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006df6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	055b      	lsls	r3, r3, #21
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f043 030c 	orr.w	r3, r3, #12
 8006e1a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006e2e:	f7ff fa4b 	bl	80062c8 <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006e34:	e009      	b.n	8006e4a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006e36:	f7ff fa47 	bl	80062c8 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e44:	d901      	bls.n	8006e4a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e010      	b.n	8006e6c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1ed      	bne.n	8006e36 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e03c      	b.n	8006f10 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e9e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	055b      	lsls	r3, r3, #21
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	041b      	lsls	r3, r3, #16
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f023 030c 	bic.w	r3, r3, #12
 8006ec2:	f043 0304 	orr.w	r3, r3, #4
 8006ec6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <HAL_ETH_WritePHYRegister+0xa4>)
 8006ed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006eda:	4a0f      	ldr	r2, [pc, #60]	; (8006f18 <HAL_ETH_WritePHYRegister+0xa4>)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006ee2:	f7ff f9f1 	bl	80062c8 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006ee8:	e009      	b.n	8006efe <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006eea:	f7ff f9ed 	bl	80062c8 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ef8:	d901      	bls.n	8006efe <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e008      	b.n	8006f10 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1ed      	bne.n	8006eea <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40028000 	.word	0x40028000

08006f1c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e1c3      	b.n	80072b8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 020c 	and.w	r2, r3, #12
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bf0c      	ite	eq
 8006f76:	2301      	moveq	r3, #1
 8006f78:	2300      	movne	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	bf14      	ite	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	2300      	moveq	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf14      	ite	ne
 8007016:	2301      	movne	r3, #1
 8007018:	2300      	moveq	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702c:	2b00      	cmp	r3, #0
 800702e:	bf0c      	ite	eq
 8007030:	2301      	moveq	r3, #1
 8007032:	2300      	movne	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007046:	2b00      	cmp	r3, #0
 8007048:	bf0c      	ite	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	2300      	movne	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf14      	ite	ne
 8007064:	2301      	movne	r3, #1
 8007066:	2300      	moveq	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800707a:	2b00      	cmp	r3, #0
 800707c:	bf14      	ite	ne
 800707e:	2301      	movne	r3, #1
 8007080:	2300      	moveq	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf14      	ite	ne
 8007098:	2301      	movne	r3, #1
 800709a:	2300      	moveq	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80070aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bf14      	ite	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	2300      	moveq	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bf14      	ite	ne
 80070da:	2301      	movne	r3, #1
 80070dc:	2300      	moveq	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf0c      	ite	eq
 8007110:	2301      	moveq	r3, #1
 8007112:	2300      	movne	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007128:	2b00      	cmp	r3, #0
 800712a:	bf14      	ite	ne
 800712c:	2301      	movne	r3, #1
 800712e:	2300      	moveq	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8007140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf14      	ite	ne
 8007148:	2301      	movne	r3, #1
 800714a:	2300      	moveq	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8007160:	2b00      	cmp	r3, #0
 8007162:	bf14      	ite	ne
 8007164:	2301      	movne	r3, #1
 8007166:	2300      	moveq	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	0e5b      	lsrs	r3, r3, #25
 800717a:	f003 021f 	and.w	r2, r3, #31
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	bf14      	ite	ne
 8007190:	2301      	movne	r3, #1
 8007192:	2300      	moveq	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bf0c      	ite	eq
 80071d6:	2301      	moveq	r3, #1
 80071d8:	2300      	movne	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800722a:	2b00      	cmp	r3, #0
 800722c:	bf14      	ite	ne
 800722e:	2301      	movne	r3, #1
 8007230:	2300      	moveq	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007244:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007254:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	bf14      	ite	ne
 800726c:	2301      	movne	r3, #1
 800726e:	2300      	moveq	r3, #0
 8007270:	b2db      	uxtb	r3, r3
 8007272:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80072a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf0c      	ite	eq
 80072a8:	2301      	moveq	r3, #1
 80072aa:	2300      	movne	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e00b      	b.n	80072f0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d105      	bne.n	80072ee <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f85f 	bl	80073a8 <ETH_SetMACConfig>

    return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e000      	b.n	80072f0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007308:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007310:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007312:	f004 fb85 	bl	800ba20 <HAL_RCC_GetHCLKFreq>
 8007316:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d908      	bls.n	8007332 <HAL_ETH_SetMDIOClockRange+0x3a>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d804      	bhi.n	8007332 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e027      	b.n	8007382 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	4a18      	ldr	r2, [pc, #96]	; (8007398 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d908      	bls.n	800734c <HAL_ETH_SetMDIOClockRange+0x54>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4a17      	ldr	r2, [pc, #92]	; (800739c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d204      	bcs.n	800734c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e01a      	b.n	8007382 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4a13      	ldr	r2, [pc, #76]	; (800739c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d303      	bcc.n	800735c <HAL_ETH_SetMDIOClockRange+0x64>
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a12      	ldr	r2, [pc, #72]	; (80073a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d911      	bls.n	8007380 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a10      	ldr	r2, [pc, #64]	; (80073a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d908      	bls.n	8007376 <HAL_ETH_SetMDIOClockRange+0x7e>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4a0f      	ldr	r2, [pc, #60]	; (80073a4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d804      	bhi.n	8007376 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e005      	b.n	8007382 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e000      	b.n	8007382 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007380:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	01312cff 	.word	0x01312cff
 8007398:	02160ebf 	.word	0x02160ebf
 800739c:	03938700 	.word	0x03938700
 80073a0:	05f5e0ff 	.word	0x05f5e0ff
 80073a4:	08f0d17f 	.word	0x08f0d17f

080073a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80073ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	791b      	ldrb	r3, [r3, #4]
 80073c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80073c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	7b1b      	ldrb	r3, [r3, #12]
 80073c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80073ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	7b5b      	ldrb	r3, [r3, #13]
 80073d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80073d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	7b9b      	ldrb	r3, [r3, #14]
 80073d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80073da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	7bdb      	ldrb	r3, [r3, #15]
 80073e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80073e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	7c12      	ldrb	r2, [r2, #16]
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	d102      	bne.n	80073f2 <ETH_SetMACConfig+0x4a>
 80073ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80073f0:	e000      	b.n	80073f4 <ETH_SetMACConfig+0x4c>
 80073f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80073f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	7c52      	ldrb	r2, [r2, #17]
 80073fa:	2a00      	cmp	r2, #0
 80073fc:	d102      	bne.n	8007404 <ETH_SetMACConfig+0x5c>
 80073fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007402:	e000      	b.n	8007406 <ETH_SetMACConfig+0x5e>
 8007404:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007406:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	7c9b      	ldrb	r3, [r3, #18]
 800740c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800740e:	431a      	orrs	r2, r3
               macconf->Speed |
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007414:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800741a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	7f1b      	ldrb	r3, [r3, #28]
 8007420:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8007422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	7f5b      	ldrb	r3, [r3, #29]
 8007428:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800742a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	7f92      	ldrb	r2, [r2, #30]
 8007430:	2a00      	cmp	r2, #0
 8007432:	d102      	bne.n	800743a <ETH_SetMACConfig+0x92>
 8007434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007438:	e000      	b.n	800743c <ETH_SetMACConfig+0x94>
 800743a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800743c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	7fdb      	ldrb	r3, [r3, #31]
 8007442:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007444:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	f892 2020 	ldrb.w	r2, [r2, #32]
 800744c:	2a00      	cmp	r2, #0
 800744e:	d102      	bne.n	8007456 <ETH_SetMACConfig+0xae>
 8007450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007454:	e000      	b.n	8007458 <ETH_SetMACConfig+0xb0>
 8007456:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007458:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800745e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007466:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007468:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	4b56      	ldr	r3, [pc, #344]	; (80075d4 <ETH_SetMACConfig+0x22c>)
 800747a:	4013      	ands	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6812      	ldr	r2, [r2, #0]
 8007480:	68f9      	ldr	r1, [r7, #12]
 8007482:	430b      	orrs	r3, r1
 8007484:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007492:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007494:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800749c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800749e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80074a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80074a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d102      	bne.n	80074ba <ETH_SetMACConfig+0x112>
 80074b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074b8:	e000      	b.n	80074bc <ETH_SetMACConfig+0x114>
 80074ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80074bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	4b42      	ldr	r3, [pc, #264]	; (80075d8 <ETH_SetMACConfig+0x230>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	430b      	orrs	r3, r1
 80074d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	4b3a      	ldr	r3, [pc, #232]	; (80075dc <ETH_SetMACConfig+0x234>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	68f9      	ldr	r1, [r7, #12]
 80074fa:	430b      	orrs	r3, r1
 80074fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007504:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800750a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007512:	2a00      	cmp	r2, #0
 8007514:	d101      	bne.n	800751a <ETH_SetMACConfig+0x172>
 8007516:	2280      	movs	r2, #128	; 0x80
 8007518:	e000      	b.n	800751c <ETH_SetMACConfig+0x174>
 800751a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800751c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800752e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007532:	4013      	ands	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	430b      	orrs	r3, r1
 800753c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007544:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800754c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755a:	f023 0103 	bic.w	r1, r3, #3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	430a      	orrs	r2, r1
 8007566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007572:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800758e:	2a00      	cmp	r2, #0
 8007590:	d101      	bne.n	8007596 <ETH_SetMACConfig+0x1ee>
 8007592:	2240      	movs	r2, #64	; 0x40
 8007594:	e000      	b.n	8007598 <ETH_SetMACConfig+0x1f0>
 8007596:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007598:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80075a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80075a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80075aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80075b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	00048083 	.word	0x00048083
 80075d8:	c0f88000 	.word	0xc0f88000
 80075dc:	fffffef0 	.word	0xfffffef0

080075e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	4b38      	ldr	r3, [pc, #224]	; (80076d8 <ETH_SetDMAConfig+0xf8>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	6811      	ldr	r1, [r2, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	430b      	orrs	r3, r1
 8007602:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007606:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	791b      	ldrb	r3, [r3, #4]
 800760c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007612:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	7b1b      	ldrb	r3, [r3, #12]
 8007618:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	4b2c      	ldr	r3, [pc, #176]	; (80076dc <ETH_SetDMAConfig+0xfc>)
 800762a:	4013      	ands	r3, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6812      	ldr	r2, [r2, #0]
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	430b      	orrs	r3, r1
 8007634:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007638:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	7b5b      	ldrb	r3, [r3, #13]
 800763e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007650:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007654:	4b22      	ldr	r3, [pc, #136]	; (80076e0 <ETH_SetDMAConfig+0x100>)
 8007656:	4013      	ands	r3, r2
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6812      	ldr	r2, [r2, #0]
 800765c:	68f9      	ldr	r1, [r7, #12]
 800765e:	430b      	orrs	r3, r1
 8007660:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007664:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	7d1b      	ldrb	r3, [r3, #20]
 8007670:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007672:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	7f5b      	ldrb	r3, [r3, #29]
 8007678:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007686:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800768a:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <ETH_SetDMAConfig+0x104>)
 800768c:	4013      	ands	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	430b      	orrs	r3, r1
 8007696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800769a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	7f1b      	ldrb	r3, [r3, #28]
 80076a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80076b8:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <ETH_SetDMAConfig+0x108>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	430b      	orrs	r3, r1
 80076c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076c8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80076cc:	bf00      	nop
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	ffff87fd 	.word	0xffff87fd
 80076dc:	ffff2ffe 	.word	0xffff2ffe
 80076e0:	fffec000 	.word	0xfffec000
 80076e4:	ffc0efef 	.word	0xffc0efef
 80076e8:	7fc0ffff 	.word	0x7fc0ffff

080076ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b0a4      	sub	sp, #144	; 0x90
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80076fa:	2300      	movs	r3, #0
 80076fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80076fe:	2300      	movs	r3, #0
 8007700:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007704:	2300      	movs	r3, #0
 8007706:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800770a:	2301      	movs	r3, #1
 800770c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007716:	2301      	movs	r3, #1
 8007718:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800772e:	2300      	movs	r3, #0
 8007730:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007734:	2300      	movs	r3, #0
 8007736:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007738:	2300      	movs	r3, #0
 800773a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800773e:	2300      	movs	r3, #0
 8007740:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007744:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007748:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800774a:	2300      	movs	r3, #0
 800774c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007750:	2300      	movs	r3, #0
 8007752:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800775a:	2300      	movs	r3, #0
 800775c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007766:	2300      	movs	r3, #0
 8007768:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800776a:	2300      	movs	r3, #0
 800776c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800776e:	2300      	movs	r3, #0
 8007770:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007772:	2300      	movs	r3, #0
 8007774:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007778:	2300      	movs	r3, #0
 800777a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007784:	2320      	movs	r3, #32
 8007786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007790:	2300      	movs	r3, #0
 8007792:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007796:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800779c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80077a8:	2302      	movs	r3, #2
 80077aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80077c6:	2300      	movs	r3, #0
 80077c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80077d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff fde6 	bl	80073a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80077dc:	2301      	movs	r3, #1
 80077de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80077e0:	2301      	movs	r3, #1
 80077e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80077ee:	2300      	movs	r3, #0
 80077f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80077f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007800:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007804:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007806:	2300      	movs	r3, #0
 8007808:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800780c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7ff fee1 	bl	80075e0 <ETH_SetDMAConfig>
}
 800781e:	bf00      	nop
 8007820:	3790      	adds	r7, #144	; 0x90
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e01d      	b.n	8007870 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68d9      	ldr	r1, [r3, #12]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4613      	mov	r3, r2
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4413      	add	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	440b      	add	r3, r1
 8007844:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2200      	movs	r2, #0
 8007856:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	3206      	adds	r2, #6
 8007866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3301      	adds	r3, #1
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d9de      	bls.n	8007834 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007884:	461a      	mov	r2, r3
 8007886:	2303      	movs	r3, #3
 8007888:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007898:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e023      	b.n	800790e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6919      	ldr	r1, [r3, #16]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4613      	mov	r3, r2
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	4413      	add	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	440b      	add	r3, r1
 80078d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2200      	movs	r2, #0
 80078e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2200      	movs	r2, #0
 80078ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2200      	movs	r2, #0
 80078fa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	3212      	adds	r2, #18
 8007904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3301      	adds	r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d9d8      	bls.n	80078c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793a:	461a      	mov	r2, r3
 800793c:	2303      	movs	r3, #3
 800793e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8007974:	b480      	push	{r7}
 8007976:	b08d      	sub	sp, #52	; 0x34
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3318      	adds	r3, #24
 8007984:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b6:	d007      	beq.n	80079c8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	3304      	adds	r3, #4
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80079c8:	2302      	movs	r3, #2
 80079ca:	e259      	b.n	8007e80 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d044      	beq.n	8007a62 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	4b75      	ldr	r3, [pc, #468]	; (8007bb4 <ETH_Prepare_Tx_Descriptors+0x240>)
 80079de:	4013      	ands	r3, r2
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079e4:	431a      	orrs	r2, r3
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a04:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d027      	beq.n	8007a62 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	041b      	lsls	r3, r3, #16
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a50:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007a60:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00e      	beq.n	8007a8c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	4b51      	ldr	r3, [pc, #324]	; (8007bb8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	6992      	ldr	r2, [r2, #24]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d036      	beq.n	8007b12 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007ab0:	f3bf 8f5f 	dmb	sy
}
 8007ab4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d902      	bls.n	8007ad4 <ETH_Prepare_Tx_Descriptors+0x160>
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	3b04      	subs	r3, #4
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af0:	d10f      	bne.n	8007b12 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007afc:	f3bf 8f5f 	dmb	sy
}
 8007b00:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e1b6      	b.n	8007e80 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	3301      	adds	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	6852      	ldr	r2, [r2, #4]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d012      	beq.n	8007b62 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <ETH_Prepare_Tx_Descriptors+0x248>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	6852      	ldr	r2, [r2, #4]
 8007b58:	0412      	lsls	r2, r2, #16
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	609a      	str	r2, [r3, #8]
 8007b60:	e008      	b.n	8007b74 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	2200      	movs	r2, #0
 8007b66:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <ETH_Prepare_Tx_Descriptors+0x248>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	6a3a      	ldr	r2, [r7, #32]
 8007b72:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d021      	beq.n	8007bc4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	04db      	lsls	r3, r3, #19
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	69d2      	ldr	r2, [r2, #28]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	60da      	str	r2, [r3, #12]
 8007bb2:	e02e      	b.n	8007c12 <ETH_Prepare_Tx_Descriptors+0x29e>
 8007bb4:	ffff0000 	.word	0xffff0000
 8007bb8:	ffffc000 	.word	0xffffc000
 8007bbc:	c000ffff 	.word	0xc000ffff
 8007bc0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	4b7b      	ldr	r3, [pc, #492]	; (8007db8 <ETH_Prepare_Tx_Descriptors+0x444>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	6852      	ldr	r2, [r2, #4]
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d008      	beq.n	8007bf4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d008      	beq.n	8007c12 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d008      	beq.n	8007c30 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007c48:	f3bf 8f5f 	dmb	sy
}
 8007c4c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 80da 	beq.w	8007e1c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8007c7a:	e0cf      	b.n	8007e1c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d902      	bls.n	8007c9a <ETH_Prepare_Tx_Descriptors+0x326>
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	3b04      	subs	r3, #4
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cbc:	d007      	beq.n	8007cce <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d029      	beq.n	8007d22 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cda:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ce0:	e019      	b.n	8007d16 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8007ce2:	f3bf 8f5f 	dmb	sy
}
 8007ce6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d902      	bls.n	8007d06 <ETH_Prepare_Tx_Descriptors+0x392>
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	3b04      	subs	r3, #4
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	3301      	adds	r3, #1
 8007d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d3e1      	bcc.n	8007ce2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e0ae      	b.n	8007e80 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	3301      	adds	r3, #1
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <ETH_Prepare_Tx_Descriptors+0x448>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	6852      	ldr	r2, [r2, #4]
 8007d44:	431a      	orrs	r2, r3
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d012      	beq.n	8007d78 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	69fa      	ldr	r2, [r7, #28]
 8007d6c:	6852      	ldr	r2, [r2, #4]
 8007d6e:	0412      	lsls	r2, r2, #16
 8007d70:	431a      	orrs	r2, r3
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	609a      	str	r2, [r3, #8]
 8007d76:	e008      	b.n	8007d8a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	6a3a      	ldr	r2, [r7, #32]
 8007d88:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d018      	beq.n	8007dc8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	69d2      	ldr	r2, [r2, #28]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	60da      	str	r2, [r3, #12]
 8007db4:	e020      	b.n	8007df8 <ETH_Prepare_Tx_Descriptors+0x484>
 8007db6:	bf00      	nop
 8007db8:	ffff8000 	.word	0xffff8000
 8007dbc:	ffffc000 	.word	0xffffc000
 8007dc0:	c000ffff 	.word	0xc000ffff
 8007dc4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	4b2f      	ldr	r3, [pc, #188]	; (8007e8c <ETH_Prepare_Tx_Descriptors+0x518>)
 8007dce:	4013      	ands	r3, r2
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	6852      	ldr	r2, [r2, #4]
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8007dfe:	f3bf 8f5f 	dmb	sy
}
 8007e02:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f af2b 	bne.w	8007c7c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	609a      	str	r2, [r3, #8]
 8007e38:	e005      	b.n	8007e46 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e56:	6979      	ldr	r1, [r7, #20]
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e66:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e68:	b672      	cpsid	i
}
 8007e6a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	4413      	add	r3, r2
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007e7a:	b662      	cpsie	i
}
 8007e7c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3734      	adds	r7, #52	; 0x34
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	ffff8000 	.word	0xffff8000

08007e90 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b098      	sub	sp, #96	; 0x60
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007e98:	4a84      	ldr	r2, [pc, #528]	; (80080ac <HAL_FDCAN_Init+0x21c>)
 8007e9a:	f107 030c 	add.w	r3, r7, #12
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	224c      	movs	r2, #76	; 0x4c
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f01d ff52 	bl	8025d4c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e1c6      	b.n	8008240 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a7e      	ldr	r2, [pc, #504]	; (80080b0 <HAL_FDCAN_Init+0x220>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d106      	bne.n	8007eca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fd fa1e 	bl	8005320 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0210 	bic.w	r2, r2, #16
 8007ef2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ef4:	f7fe f9e8 	bl	80062c8 <HAL_GetTick>
 8007ef8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007efa:	e014      	b.n	8007f26 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007efc:	f7fe f9e4 	bl	80062c8 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b0a      	cmp	r3, #10
 8007f08:	d90d      	bls.n	8007f26 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f10:	f043 0201 	orr.w	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e18c      	b.n	8008240 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f003 0308 	and.w	r3, r3, #8
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d0e3      	beq.n	8007efc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699a      	ldr	r2, [r3, #24]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f44:	f7fe f9c0 	bl	80062c8 <HAL_GetTick>
 8007f48:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007f4a:	e014      	b.n	8007f76 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007f4c:	f7fe f9bc 	bl	80062c8 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b0a      	cmp	r3, #10
 8007f58:	d90d      	bls.n	8007f76 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f60:	f043 0201 	orr.w	r2, r3, #1
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2203      	movs	r2, #3
 8007f6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e164      	b.n	8008240 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0e3      	beq.n	8007f4c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0202 	orr.w	r2, r2, #2
 8007f92:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7c1b      	ldrb	r3, [r3, #16]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d108      	bne.n	8007fae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007faa:	619a      	str	r2, [r3, #24]
 8007fac:	e007      	b.n	8007fbe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fbc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7c5b      	ldrb	r3, [r3, #17]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d108      	bne.n	8007fd8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fd4:	619a      	str	r2, [r3, #24]
 8007fd6:	e007      	b.n	8007fe8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fe6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	7c9b      	ldrb	r3, [r3, #18]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d108      	bne.n	8008002 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ffe:	619a      	str	r2, [r3, #24]
 8008000:	e007      	b.n	8008012 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008010:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008036:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0210 	bic.w	r2, r2, #16
 8008046:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d108      	bne.n	8008062 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0204 	orr.w	r2, r2, #4
 800805e:	619a      	str	r2, [r3, #24]
 8008060:	e030      	b.n	80080c4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d02c      	beq.n	80080c4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d020      	beq.n	80080b4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699a      	ldr	r2, [r3, #24]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008080:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0210 	orr.w	r2, r2, #16
 8008090:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	2b03      	cmp	r3, #3
 8008098:	d114      	bne.n	80080c4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0220 	orr.w	r2, r2, #32
 80080a8:	619a      	str	r2, [r3, #24]
 80080aa:	e00b      	b.n	80080c4 <HAL_FDCAN_Init+0x234>
 80080ac:	08026e7c 	.word	0x08026e7c
 80080b0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699a      	ldr	r2, [r3, #24]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0220 	orr.w	r2, r2, #32
 80080c2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80080d4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80080dc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80080ec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80080ee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f8:	d115      	bne.n	8008126 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	3b01      	subs	r3, #1
 8008106:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008108:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	3b01      	subs	r3, #1
 8008110:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008112:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	3b01      	subs	r3, #1
 800811c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008122:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008124:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800814c:	4413      	add	r3, r2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800815a:	f023 0107 	bic.w	r1, r3, #7
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	3360      	adds	r3, #96	; 0x60
 8008166:	443b      	add	r3, r7
 8008168:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	d011      	beq.n	80081a2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008186:	f023 0107 	bic.w	r1, r3, #7
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	3360      	adds	r3, #96	; 0x60
 8008192:	443b      	add	r3, r7
 8008194:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d012      	beq.n	80081d0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80081b2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	3360      	adds	r3, #96	; 0x60
 80081be:	443b      	add	r3, r7
 80081c0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80081c4:	011a      	lsls	r2, r3, #4
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80081e0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	3360      	adds	r3, #96	; 0x60
 80081ec:	443b      	add	r3, r7
 80081ee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80081f2:	021a      	lsls	r2, r3, #8
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a11      	ldr	r2, [pc, #68]	; (8008248 <HAL_FDCAN_Init+0x3b8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d107      	bne.n	8008218 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f022 0203 	bic.w	r2, r2, #3
 8008216:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fe23 	bl	8008e7c <FDCAN_CalcultateRamBlockAddresses>
 8008236:	4603      	mov	r3, r0
 8008238:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800823c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008240:	4618      	mov	r0, r3
 8008242:	3760      	adds	r7, #96	; 0x60
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	4000a000 	.word	0x4000a000

0800824c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b01      	cmp	r3, #1
 8008264:	d110      	bne.n	8008288 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800826e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8008274:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8008280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e008      	b.n	800829a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800828e:	f043 0204 	orr.w	r2, r3, #4
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d111      	bne.n	80082de <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2202      	movs	r2, #2
 80082be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0201 	bic.w	r2, r2, #1
 80082d0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e008      	b.n	80082f0 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082e4:	f043 0204 	orr.w	r2, r3, #4
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
  }
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d15b      	bne.n	80083cc <HAL_FDCAN_Stop+0xd0>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008324:	e013      	b.n	800834e <HAL_FDCAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b32      	cmp	r3, #50	; 0x32
 800832a:	d90d      	bls.n	8008348 <HAL_FDCAN_Stop+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008332:	f043 0201 	orr.w	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2203      	movs	r2, #3
 8008340:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e04a      	b.n	80083de <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0e4      	beq.n	8008326 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0210 	bic.w	r2, r2, #16
 800836e:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008370:	e013      	b.n	800839a <HAL_FDCAN_Stop+0x9e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b32      	cmp	r3, #50	; 0x32
 8008376:	d90d      	bls.n	8008394 <HAL_FDCAN_Stop+0x98>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800837e:	f043 0201 	orr.w	r2, r3, #1
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2203      	movs	r2, #3
 800838c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e024      	b.n	80083de <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	f003 0308 	and.w	r3, r3, #8
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d0e4      	beq.n	8008372 <HAL_FDCAN_Stop+0x76>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0202 	orr.w	r2, r2, #2
 80083b6:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Return function status */
    return HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e008      	b.n	80083de <HAL_FDCAN_Stop+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083d2:	f043 0208 	orr.w	r2, r3, #8
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
  }
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b086      	sub	sp, #24
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d141      	bne.n	8008486 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800840a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008418:	f043 0220 	orr.w	r2, r3, #32
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e038      	b.n	8008498 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800842e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800843c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e026      	b.n	8008498 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fe91 	bl	8009188 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2101      	movs	r1, #1
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	fa01 f202 	lsl.w	r2, r1, r2
 8008472:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008476:	2201      	movs	r2, #1
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	409a      	lsls	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	e008      	b.n	8008498 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800848c:	f043 0208 	orr.w	r2, r3, #8
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
  }
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b08b      	sub	sp, #44	; 0x2c
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80084b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80084ba:	7efb      	ldrb	r3, [r7, #27]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	f040 814b 	bne.w	8008758 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d14d      	bne.n	8008564 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d109      	bne.n	80084ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084de:	f043 0220 	orr.w	r2, r3, #32
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e13e      	b.n	800876a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d109      	bne.n	8008510 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e12c      	b.n	800876a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008518:	0e1b      	lsrs	r3, r3, #24
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b01      	cmp	r3, #1
 8008520:	d10b      	bne.n	800853a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800852a:	0fdb      	lsrs	r3, r3, #31
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008534:	d101      	bne.n	800853a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008536:	2301      	movs	r3, #1
 8008538:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008542:	0a1b      	lsrs	r3, r3, #8
 8008544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	4413      	add	r3, r2
 800854c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008556:	69f9      	ldr	r1, [r7, #28]
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
 8008562:	e069      	b.n	8008638 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b41      	cmp	r3, #65	; 0x41
 8008568:	d14d      	bne.n	8008606 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008580:	f043 0220 	orr.w	r2, r3, #32
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0ed      	b.n	800876a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	2b00      	cmp	r3, #0
 800859c:	d109      	bne.n	80085b2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e0db      	b.n	800876a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085ba:	0e1b      	lsrs	r3, r3, #24
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d10b      	bne.n	80085dc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085cc:	0fdb      	lsrs	r3, r3, #31
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d6:	d101      	bne.n	80085dc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80085d8:	2301      	movs	r3, #1
 80085da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085e4:	0a1b      	lsrs	r3, r3, #8
 80085e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	4413      	add	r3, r2
 80085ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f8:	69f9      	ldr	r1, [r7, #28]
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
 8008604:	e018      	b.n	8008638 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	429a      	cmp	r2, r3
 800860e:	d309      	bcc.n	8008624 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008616:	f043 0220 	orr.w	r2, r3, #32
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e0a2      	b.n	800876a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d107      	bne.n	800865c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	0c9b      	lsrs	r3, r3, #18
 8008652:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	e005      	b.n	8008668 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	3304      	adds	r3, #4
 8008684:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	0e1b      	lsrs	r3, r3, #24
 80086ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	0fda      	lsrs	r2, r3, #31
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	3304      	adds	r3, #4
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80086d6:	2300      	movs	r3, #0
 80086d8:	623b      	str	r3, [r7, #32]
 80086da:	e00a      	b.n	80086f2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	441a      	add	r2, r3
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	440b      	add	r3, r1
 80086e8:	7812      	ldrb	r2, [r2, #0]
 80086ea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	3301      	adds	r3, #1
 80086f0:	623b      	str	r3, [r7, #32]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	4a1f      	ldr	r2, [pc, #124]	; (8008778 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80086fa:	5cd3      	ldrb	r3, [r2, r3]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	4293      	cmp	r3, r2
 8008702:	d3eb      	bcc.n	80086dc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b40      	cmp	r3, #64	; 0x40
 8008708:	d105      	bne.n	8008716 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8008714:	e01e      	b.n	8008754 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b41      	cmp	r3, #65	; 0x41
 800871a:	d105      	bne.n	8008728 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8008726:	e015      	b.n	8008754 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b1f      	cmp	r3, #31
 800872c:	d808      	bhi.n	8008740 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2101      	movs	r1, #1
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	fa01 f202 	lsl.w	r2, r1, r2
 800873a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800873e:	e009      	b.n	8008754 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f003 021f 	and.w	r2, r3, #31
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2101      	movs	r1, #1
 800874c:	fa01 f202 	lsl.w	r2, r1, r2
 8008750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e008      	b.n	800876a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800875e:	f043 0208 	orr.w	r2, r3, #8
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
  }
}
 800876a:	4618      	mov	r0, r3
 800876c:	372c      	adds	r7, #44	; 0x2c
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	0802a45c 	.word	0x0802a45c

0800877c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800878c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008790:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8008792:	68fb      	ldr	r3, [r7, #12]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80087b2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d002      	beq.n	80087c0 <HAL_FDCAN_ActivateNotification+0x20>
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d155      	bne.n	800886c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	4013      	ands	r3, r2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d108      	bne.n	80087e0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f042 0201 	orr.w	r2, r2, #1
 80087dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80087de:	e014      	b.n	800880a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4013      	ands	r3, r2
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d108      	bne.n	8008802 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0202 	orr.w	r2, r2, #2
 80087fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8008800:	e003      	b.n	800880a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2203      	movs	r2, #3
 8008808:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	430a      	orrs	r2, r1
 8008824:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	430a      	orrs	r2, r1
 8008842:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	4b0f      	ldr	r3, [pc, #60]	; (800888c <HAL_FDCAN_ActivateNotification+0xec>)
 8008850:	4013      	ands	r3, r2
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	430b      	orrs	r3, r1
 8008858:	6553      	str	r3, [r2, #84]	; 0x54
 800885a:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <HAL_FDCAN_ActivateNotification+0xf0>)
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	0f9b      	lsrs	r3, r3, #30
 8008862:	490b      	ldr	r1, [pc, #44]	; (8008890 <HAL_FDCAN_ActivateNotification+0xf0>)
 8008864:	4313      	orrs	r3, r2
 8008866:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	e008      	b.n	800887e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008872:	f043 0202 	orr.w	r2, r3, #2
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
  }
}
 800887e:	4618      	mov	r0, r3
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	3fcfffff 	.word	0x3fcfffff
 8008890:	4000a800 	.word	0x4000a800

08008894 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b096      	sub	sp, #88	; 0x58
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800889c:	4b9a      	ldr	r3, [pc, #616]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	079b      	lsls	r3, r3, #30
 80088a2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80088a4:	4b98      	ldr	r3, [pc, #608]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	079b      	lsls	r3, r3, #30
 80088aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088ac:	4013      	ands	r3, r2
 80088ae:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80088ba:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088c4:	4013      	ands	r3, r2
 80088c6:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088dc:	4013      	ands	r3, r2
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f4:	4013      	ands	r3, r2
 80088f6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fe:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8008902:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800890c:	4013      	ands	r3, r2
 800890e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008916:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800891a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008924:	4013      	ands	r3, r2
 8008926:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008936:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	0a1b      	lsrs	r3, r3, #8
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008958:	651a      	str	r2, [r3, #80]	; 0x50
 800895a:	4b6b      	ldr	r3, [pc, #428]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 800895c:	2200      	movs	r2, #0
 800895e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fa3e 	bl	8008de2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008968:	0a9b      	lsrs	r3, r3, #10
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01d      	beq.n	80089ae <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	0a9b      	lsrs	r3, r3, #10
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d017      	beq.n	80089ae <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008992:	4013      	ands	r3, r2
 8008994:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800899e:	651a      	str	r2, [r3, #80]	; 0x50
 80089a0:	4b59      	ldr	r3, [pc, #356]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80089a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9f1 	bl	8008d90 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80089ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00d      	beq.n	80089d0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089ba:	4b54      	ldr	r3, [pc, #336]	; (8008b0c <HAL_FDCAN_IRQHandler+0x278>)
 80089bc:	400b      	ands	r3, r1
 80089be:	6513      	str	r3, [r2, #80]	; 0x50
 80089c0:	4a51      	ldr	r2, [pc, #324]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 80089c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089c4:	0f9b      	lsrs	r3, r3, #30
 80089c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80089c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f9c0 	bl	8008d50 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80089d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00d      	beq.n	80089f2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089dc:	4b4b      	ldr	r3, [pc, #300]	; (8008b0c <HAL_FDCAN_IRQHandler+0x278>)
 80089de:	400b      	ands	r3, r1
 80089e0:	6513      	str	r3, [r2, #80]	; 0x50
 80089e2:	4a49      	ldr	r2, [pc, #292]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 80089e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e6:	0f9b      	lsrs	r3, r3, #30
 80089e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80089ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f9ba 	bl	8008d66 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80089f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00d      	beq.n	8008a14 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089fe:	4b43      	ldr	r3, [pc, #268]	; (8008b0c <HAL_FDCAN_IRQHandler+0x278>)
 8008a00:	400b      	ands	r3, r1
 8008a02:	6513      	str	r3, [r2, #80]	; 0x50
 8008a04:	4a40      	ldr	r2, [pc, #256]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 8008a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a08:	0f9b      	lsrs	r3, r3, #30
 8008a0a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008a0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fc fa88 	bl	8004f24 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00d      	beq.n	8008a36 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a20:	4b3a      	ldr	r3, [pc, #232]	; (8008b0c <HAL_FDCAN_IRQHandler+0x278>)
 8008a22:	400b      	ands	r3, r1
 8008a24:	6513      	str	r3, [r2, #80]	; 0x50
 8008a26:	4a38      	ldr	r2, [pc, #224]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 8008a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a2a:	0f9b      	lsrs	r3, r3, #30
 8008a2c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008a2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fc fa8a 	bl	8004f4a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a38:	0adb      	lsrs	r3, r3, #11
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d010      	beq.n	8008a64 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	0adb      	lsrs	r3, r3, #11
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a56:	651a      	str	r2, [r3, #80]	; 0x50
 8008a58:	4b2b      	ldr	r3, [pc, #172]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f98c 	bl	8008d7c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8008a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a66:	0a5b      	lsrs	r3, r3, #9
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01d      	beq.n	8008aac <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	0a5b      	lsrs	r3, r3, #9
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d017      	beq.n	8008aac <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a84:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a90:	4013      	ands	r3, r2
 8008a92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9c:	651a      	str	r2, [r3, #80]	; 0x50
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fc fa62 	bl	8004f70 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aae:	0cdb      	lsrs	r3, r3, #19
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d010      	beq.n	8008ada <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	0cdb      	lsrs	r3, r3, #19
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008acc:	651a      	str	r2, [r3, #80]	; 0x50
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f966 	bl	8008da6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008adc:	0c1b      	lsrs	r3, r3, #16
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	0c1b      	lsrs	r3, r3, #16
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d010      	beq.n	8008b14 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008afa:	651a      	str	r2, [r3, #80]	; 0x50
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <HAL_FDCAN_IRQHandler+0x274>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	e004      	b.n	8008b10 <HAL_FDCAN_IRQHandler+0x27c>
 8008b06:	bf00      	nop
 8008b08:	4000a800 	.word	0x4000a800
 8008b0c:	3fcfffff 	.word	0x3fcfffff
 8008b10:	f000 f953 	bl	8008dba <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	0c9b      	lsrs	r3, r3, #18
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d010      	beq.n	8008b42 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	0c9b      	lsrs	r3, r3, #18
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008b34:	651a      	str	r2, [r3, #80]	; 0x50
 8008b36:	4b83      	ldr	r3, [pc, #524]	; (8008d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f946 	bl	8008dce <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b44:	0c5b      	lsrs	r3, r3, #17
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d015      	beq.n	8008b7a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	0c5b      	lsrs	r3, r3, #17
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00f      	beq.n	8008b7a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008b62:	651a      	str	r2, [r3, #80]	; 0x50
 8008b64:	4b77      	ldr	r3, [pc, #476]	; (8008d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00d      	beq.n	8008b9c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b86:	4b70      	ldr	r3, [pc, #448]	; (8008d48 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008b88:	400b      	ands	r3, r1
 8008b8a:	6513      	str	r3, [r2, #80]	; 0x50
 8008b8c:	4a6d      	ldr	r2, [pc, #436]	; (8008d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b90:	0f9b      	lsrs	r3, r3, #30
 8008b92:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f937 	bl	8008e0a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d011      	beq.n	8008bc6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ba8:	4b67      	ldr	r3, [pc, #412]	; (8008d48 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008baa:	400b      	ands	r3, r1
 8008bac:	6513      	str	r3, [r2, #80]	; 0x50
 8008bae:	4a65      	ldr	r2, [pc, #404]	; (8008d44 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb2:	0f9b      	lsrs	r3, r3, #30
 8008bb4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a60      	ldr	r2, [pc, #384]	; (8008d4c <HAL_FDCAN_IRQHandler+0x4b8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	f040 80ac 	bne.w	8008d2a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 80a4 	beq.w	8008d2a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c04:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0e:	4013      	ands	r3, r2
 8008c10:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c26:	4013      	ands	r3, r2
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8008c34:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8008c4c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	4013      	ands	r3, r2
 8008c58:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c76:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8008c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8d0 	bl	8008e20 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8008c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f8d0 	bl	8008e36 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	099b      	lsrs	r3, r3, #6
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01a      	beq.n	8008cd8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	099b      	lsrs	r3, r3, #6
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d014      	beq.n	8008cd8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cc4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	6939      	ldr	r1, [r7, #16]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f8ba 	bl	8008e4c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d007      	beq.n	8008cee <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f8bb 	bl	8008e64 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	6a3a      	ldr	r2, [r7, #32]
 8008cfa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f85e 	bl	8008df6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	3758      	adds	r7, #88	; 0x58
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	4000a800 	.word	0x4000a800
 8008d48:	3fcfffff 	.word	0x3fcfffff
 8008d4c:	4000a000 	.word	0x4000a000

08008d50 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008e6e:	bf00      	nop
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e88:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008e92:	4ba7      	ldr	r3, [pc, #668]	; (8009130 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	0091      	lsls	r1, r2, #2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6812      	ldr	r2, [r2, #0]
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	041a      	lsls	r2, r3, #16
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ed2:	4b97      	ldr	r3, [pc, #604]	; (8009130 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	0091      	lsls	r1, r2, #2
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6812      	ldr	r2, [r2, #0]
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef4:	041a      	lsls	r2, r3, #16
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008f14:	4b86      	ldr	r3, [pc, #536]	; (8009130 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	0091      	lsls	r1, r2, #2
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6812      	ldr	r2, [r2, #0]
 8008f20:	430b      	orrs	r3, r1
 8008f22:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f2e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	041a      	lsls	r2, r3, #16
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008f4a:	fb02 f303 	mul.w	r3, r2, r3
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008f5c:	4b74      	ldr	r3, [pc, #464]	; (8009130 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008f5e:	4013      	ands	r3, r2
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	0091      	lsls	r1, r2, #2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	6812      	ldr	r2, [r2, #0]
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7e:	041a      	lsls	r2, r3, #16
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	4413      	add	r3, r2
 8008f9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008fa4:	4b62      	ldr	r3, [pc, #392]	; (8009130 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	0091      	lsls	r1, r2, #2
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6812      	ldr	r2, [r2, #0]
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008fbe:	fb02 f303 	mul.w	r3, r2, r3
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008fd0:	4b57      	ldr	r3, [pc, #348]	; (8009130 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	0091      	lsls	r1, r2, #2
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	6812      	ldr	r2, [r2, #0]
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff2:	041a      	lsls	r2, r3, #16
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	4413      	add	r3, r2
 8009008:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8009012:	4b47      	ldr	r3, [pc, #284]	; (8009130 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009014:	4013      	ands	r3, r2
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	0091      	lsls	r1, r2, #2
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	6812      	ldr	r2, [r2, #0]
 800901e:	430b      	orrs	r3, r1
 8009020:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800902c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009034:	041a      	lsls	r2, r3, #16
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009048:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009050:	061a      	lsls	r2, r3, #24
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009060:	4b34      	ldr	r3, [pc, #208]	; (8009134 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009062:	4413      	add	r3, r2
 8009064:	009a      	lsls	r2, r3, #2
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	441a      	add	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	441a      	add	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8009096:	fb01 f303 	mul.w	r3, r1, r3
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	441a      	add	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	441a      	add	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80090c6:	fb01 f303 	mul.w	r3, r1, r3
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	441a      	add	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	441a      	add	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80090f6:	fb01 f303 	mul.w	r3, r1, r3
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	441a      	add	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8009112:	fb01 f303 	mul.w	r3, r1, r3
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	441a      	add	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009126:	4a04      	ldr	r2, [pc, #16]	; (8009138 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d915      	bls.n	8009158 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800912c:	e006      	b.n	800913c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800912e:	bf00      	nop
 8009130:	ffff0003 	.word	0xffff0003
 8009134:	10002b00 	.word	0x10002b00
 8009138:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009142:	f043 0220 	orr.w	r2, r3, #32
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2203      	movs	r2, #3
 8009150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e010      	b.n	800917a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	e005      	b.n	800916c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3304      	adds	r3, #4
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	429a      	cmp	r2, r3
 8009176:	d3f3      	bcc.n	8009160 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop

08009188 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8009188:	b480      	push	{r7}
 800918a:	b089      	sub	sp, #36	; 0x24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80091a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80091ae:	4313      	orrs	r3, r2
 80091b0:	61fb      	str	r3, [r7, #28]
 80091b2:	e00a      	b.n	80091ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80091bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80091c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80091c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80091d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80091da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80091e0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80091e6:	4313      	orrs	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	69fa      	ldr	r2, [r7, #28]
 8009204:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	3304      	adds	r3, #4
 800920a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	3304      	adds	r3, #4
 8009216:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	e020      	b.n	8009260 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3303      	adds	r3, #3
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	4413      	add	r3, r2
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	3302      	adds	r3, #2
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	440b      	add	r3, r1
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8009236:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	3301      	adds	r3, #1
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	440b      	add	r3, r1
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8009244:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	440a      	add	r2, r1
 800924c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800924e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	3304      	adds	r3, #4
 8009258:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	3304      	adds	r3, #4
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	0c1b      	lsrs	r3, r3, #16
 8009266:	4a06      	ldr	r2, [pc, #24]	; (8009280 <FDCAN_CopyMessageToRAM+0xf8>)
 8009268:	5cd3      	ldrb	r3, [r2, r3]
 800926a:	461a      	mov	r2, r3
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	4293      	cmp	r3, r2
 8009270:	d3d5      	bcc.n	800921e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	3724      	adds	r7, #36	; 0x24
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	0802a45c 	.word	0x0802a45c

08009284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009284:	b480      	push	{r7}
 8009286:	b089      	sub	sp, #36	; 0x24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800928e:	2300      	movs	r3, #0
 8009290:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009292:	4b86      	ldr	r3, [pc, #536]	; (80094ac <HAL_GPIO_Init+0x228>)
 8009294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009296:	e18c      	b.n	80095b2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	2101      	movs	r1, #1
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	fa01 f303 	lsl.w	r3, r1, r3
 80092a4:	4013      	ands	r3, r2
 80092a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 817e 	beq.w	80095ac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f003 0303 	and.w	r3, r3, #3
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d005      	beq.n	80092c8 <HAL_GPIO_Init+0x44>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d130      	bne.n	800932a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	2203      	movs	r2, #3
 80092d4:	fa02 f303 	lsl.w	r3, r2, r3
 80092d8:	43db      	mvns	r3, r3
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	4013      	ands	r3, r2
 80092de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ec:	69ba      	ldr	r2, [r7, #24]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80092fe:	2201      	movs	r2, #1
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	fa02 f303 	lsl.w	r3, r2, r3
 8009306:	43db      	mvns	r3, r3
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	4013      	ands	r3, r2
 800930c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	091b      	lsrs	r3, r3, #4
 8009314:	f003 0201 	and.w	r2, r3, #1
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	fa02 f303 	lsl.w	r3, r2, r3
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4313      	orrs	r3, r2
 8009322:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f003 0303 	and.w	r3, r3, #3
 8009332:	2b03      	cmp	r3, #3
 8009334:	d017      	beq.n	8009366 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	2203      	movs	r2, #3
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	43db      	mvns	r3, r3
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	4013      	ands	r3, r2
 800934c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	fa02 f303 	lsl.w	r3, r2, r3
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	4313      	orrs	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d123      	bne.n	80093ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	08da      	lsrs	r2, r3, #3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3208      	adds	r2, #8
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	220f      	movs	r2, #15
 800938a:	fa02 f303 	lsl.w	r3, r2, r3
 800938e:	43db      	mvns	r3, r3
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	4013      	ands	r3, r2
 8009394:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	691a      	ldr	r2, [r3, #16]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	fa02 f303 	lsl.w	r3, r2, r3
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	08da      	lsrs	r2, r3, #3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3208      	adds	r2, #8
 80093b4:	69b9      	ldr	r1, [r7, #24]
 80093b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	2203      	movs	r2, #3
 80093c6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ca:	43db      	mvns	r3, r3
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	4013      	ands	r3, r2
 80093d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f003 0203 	and.w	r2, r3, #3
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	fa02 f303 	lsl.w	r3, r2, r3
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80d8 	beq.w	80095ac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093fc:	4b2c      	ldr	r3, [pc, #176]	; (80094b0 <HAL_GPIO_Init+0x22c>)
 80093fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009402:	4a2b      	ldr	r2, [pc, #172]	; (80094b0 <HAL_GPIO_Init+0x22c>)
 8009404:	f043 0302 	orr.w	r3, r3, #2
 8009408:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800940c:	4b28      	ldr	r3, [pc, #160]	; (80094b0 <HAL_GPIO_Init+0x22c>)
 800940e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800941a:	4a26      	ldr	r2, [pc, #152]	; (80094b4 <HAL_GPIO_Init+0x230>)
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	089b      	lsrs	r3, r3, #2
 8009420:	3302      	adds	r3, #2
 8009422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	220f      	movs	r2, #15
 8009432:	fa02 f303 	lsl.w	r3, r2, r3
 8009436:	43db      	mvns	r3, r3
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	4013      	ands	r3, r2
 800943c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <HAL_GPIO_Init+0x234>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d04a      	beq.n	80094dc <HAL_GPIO_Init+0x258>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a1c      	ldr	r2, [pc, #112]	; (80094bc <HAL_GPIO_Init+0x238>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d02b      	beq.n	80094a6 <HAL_GPIO_Init+0x222>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a1b      	ldr	r2, [pc, #108]	; (80094c0 <HAL_GPIO_Init+0x23c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d025      	beq.n	80094a2 <HAL_GPIO_Init+0x21e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a1a      	ldr	r2, [pc, #104]	; (80094c4 <HAL_GPIO_Init+0x240>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d01f      	beq.n	800949e <HAL_GPIO_Init+0x21a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a19      	ldr	r2, [pc, #100]	; (80094c8 <HAL_GPIO_Init+0x244>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d019      	beq.n	800949a <HAL_GPIO_Init+0x216>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a18      	ldr	r2, [pc, #96]	; (80094cc <HAL_GPIO_Init+0x248>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d013      	beq.n	8009496 <HAL_GPIO_Init+0x212>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a17      	ldr	r2, [pc, #92]	; (80094d0 <HAL_GPIO_Init+0x24c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00d      	beq.n	8009492 <HAL_GPIO_Init+0x20e>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a16      	ldr	r2, [pc, #88]	; (80094d4 <HAL_GPIO_Init+0x250>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d007      	beq.n	800948e <HAL_GPIO_Init+0x20a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a15      	ldr	r2, [pc, #84]	; (80094d8 <HAL_GPIO_Init+0x254>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d101      	bne.n	800948a <HAL_GPIO_Init+0x206>
 8009486:	2309      	movs	r3, #9
 8009488:	e029      	b.n	80094de <HAL_GPIO_Init+0x25a>
 800948a:	230a      	movs	r3, #10
 800948c:	e027      	b.n	80094de <HAL_GPIO_Init+0x25a>
 800948e:	2307      	movs	r3, #7
 8009490:	e025      	b.n	80094de <HAL_GPIO_Init+0x25a>
 8009492:	2306      	movs	r3, #6
 8009494:	e023      	b.n	80094de <HAL_GPIO_Init+0x25a>
 8009496:	2305      	movs	r3, #5
 8009498:	e021      	b.n	80094de <HAL_GPIO_Init+0x25a>
 800949a:	2304      	movs	r3, #4
 800949c:	e01f      	b.n	80094de <HAL_GPIO_Init+0x25a>
 800949e:	2303      	movs	r3, #3
 80094a0:	e01d      	b.n	80094de <HAL_GPIO_Init+0x25a>
 80094a2:	2302      	movs	r3, #2
 80094a4:	e01b      	b.n	80094de <HAL_GPIO_Init+0x25a>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e019      	b.n	80094de <HAL_GPIO_Init+0x25a>
 80094aa:	bf00      	nop
 80094ac:	58000080 	.word	0x58000080
 80094b0:	58024400 	.word	0x58024400
 80094b4:	58000400 	.word	0x58000400
 80094b8:	58020000 	.word	0x58020000
 80094bc:	58020400 	.word	0x58020400
 80094c0:	58020800 	.word	0x58020800
 80094c4:	58020c00 	.word	0x58020c00
 80094c8:	58021000 	.word	0x58021000
 80094cc:	58021400 	.word	0x58021400
 80094d0:	58021800 	.word	0x58021800
 80094d4:	58021c00 	.word	0x58021c00
 80094d8:	58022400 	.word	0x58022400
 80094dc:	2300      	movs	r3, #0
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	f002 0203 	and.w	r2, r2, #3
 80094e4:	0092      	lsls	r2, r2, #2
 80094e6:	4093      	lsls	r3, r2
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80094ee:	4938      	ldr	r1, [pc, #224]	; (80095d0 <HAL_GPIO_Init+0x34c>)
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	089b      	lsrs	r3, r3, #2
 80094f4:	3302      	adds	r3, #2
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80094fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	43db      	mvns	r3, r3
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	4013      	ands	r3, r2
 800950c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	4313      	orrs	r3, r2
 8009520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800952a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	43db      	mvns	r3, r3
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	4013      	ands	r3, r2
 800953a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	4313      	orrs	r3, r2
 800954e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	43db      	mvns	r3, r3
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	4013      	ands	r3, r2
 8009566:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	4313      	orrs	r3, r2
 800957a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	43db      	mvns	r3, r3
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	4013      	ands	r3, r2
 8009590:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	3301      	adds	r3, #1
 80095b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	fa22 f303 	lsr.w	r3, r2, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f47f ae6b 	bne.w	8009298 <HAL_GPIO_Init+0x14>
  }
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	3724      	adds	r7, #36	; 0x24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	58000400 	.word	0x58000400

080095d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	887b      	ldrh	r3, [r7, #2]
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80095ec:	2301      	movs	r3, #1
 80095ee:	73fb      	strb	r3, [r7, #15]
 80095f0:	e001      	b.n	80095f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009606:	b08f      	sub	sp, #60	; 0x3c
 8009608:	af0a      	add	r7, sp, #40	; 0x28
 800960a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e116      	b.n	8009844 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f01b fe65 	bl	8025300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2203      	movs	r2, #3
 800963a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	f007 f9c0 	bl	80109da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	687e      	ldr	r6, [r7, #4]
 8009662:	466d      	mov	r5, sp
 8009664:	f106 0410 	add.w	r4, r6, #16
 8009668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800966a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800966c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800966e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009674:	e885 0003 	stmia.w	r5, {r0, r1}
 8009678:	1d33      	adds	r3, r6, #4
 800967a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800967c:	6838      	ldr	r0, [r7, #0]
 800967e:	f007 f88b 	bl	8010798 <USB_CoreInit>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d005      	beq.n	8009694 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e0d7      	b.n	8009844 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f007 f9ae 	bl	80109fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]
 80096a4:	e04a      	b.n	800973c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80096a6:	7bfa      	ldrb	r2, [r7, #15]
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	333d      	adds	r3, #61	; 0x3d
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80096ba:	7bfa      	ldrb	r2, [r7, #15]
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	4613      	mov	r3, r2
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	4413      	add	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	440b      	add	r3, r1
 80096c8:	333c      	adds	r3, #60	; 0x3c
 80096ca:	7bfa      	ldrb	r2, [r7, #15]
 80096cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80096ce:	7bfa      	ldrb	r2, [r7, #15]
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	b298      	uxth	r0, r3
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	3356      	adds	r3, #86	; 0x56
 80096e2:	4602      	mov	r2, r0
 80096e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80096e6:	7bfa      	ldrb	r2, [r7, #15]
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	4613      	mov	r3, r2
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	3340      	adds	r3, #64	; 0x40
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80096fa:	7bfa      	ldrb	r2, [r7, #15]
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	3344      	adds	r3, #68	; 0x44
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800970e:	7bfa      	ldrb	r2, [r7, #15]
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4613      	mov	r3, r2
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	440b      	add	r3, r1
 800971c:	3348      	adds	r3, #72	; 0x48
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009722:	7bfa      	ldrb	r2, [r7, #15]
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4613      	mov	r3, r2
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	334c      	adds	r3, #76	; 0x4c
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	3301      	adds	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
 800973c:	7bfa      	ldrb	r2, [r7, #15]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d3af      	bcc.n	80096a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
 800974a:	e044      	b.n	80097d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800974c:	7bfa      	ldrb	r2, [r7, #15]
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4613      	mov	r3, r2
 8009752:	00db      	lsls	r3, r3, #3
 8009754:	4413      	add	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800975e:	2200      	movs	r2, #0
 8009760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009762:	7bfa      	ldrb	r2, [r7, #15]
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4613      	mov	r3, r2
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	440b      	add	r3, r1
 8009770:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009774:	7bfa      	ldrb	r2, [r7, #15]
 8009776:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009778:	7bfa      	ldrb	r2, [r7, #15]
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	4613      	mov	r3, r2
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	4413      	add	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800978a:	2200      	movs	r2, #0
 800978c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800978e:	7bfa      	ldrb	r2, [r7, #15]
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	4613      	mov	r3, r2
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	440b      	add	r3, r1
 800979c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80097a4:	7bfa      	ldrb	r2, [r7, #15]
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	4613      	mov	r3, r2
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	440b      	add	r3, r1
 80097b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80097ba:	7bfa      	ldrb	r2, [r7, #15]
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80097cc:	2200      	movs	r2, #0
 80097ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	3301      	adds	r3, #1
 80097d4:	73fb      	strb	r3, [r7, #15]
 80097d6:	7bfa      	ldrb	r2, [r7, #15]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d3b5      	bcc.n	800974c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	603b      	str	r3, [r7, #0]
 80097e6:	687e      	ldr	r6, [r7, #4]
 80097e8:	466d      	mov	r5, sp
 80097ea:	f106 0410 	add.w	r4, r6, #16
 80097ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80097fe:	1d33      	adds	r3, r6, #4
 8009800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009802:	6838      	ldr	r0, [r7, #0]
 8009804:	f007 f946 	bl	8010a94 <USB_DevInit>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e014      	b.n	8009844 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2b01      	cmp	r3, #1
 8009830:	d102      	bne.n	8009838 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 f970 	bl	800ab18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f008 f988 	bl	8011b52 <USB_DevDisconnect>

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800984c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009860:	2b01      	cmp	r3, #1
 8009862:	d101      	bne.n	8009868 <HAL_PCD_Start+0x1c>
 8009864:	2302      	movs	r3, #2
 8009866:	e022      	b.n	80098ae <HAL_PCD_Start+0x62>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009878:	2b00      	cmp	r3, #0
 800987a:	d109      	bne.n	8009890 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009880:	2b01      	cmp	r3, #1
 8009882:	d105      	bne.n	8009890 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4618      	mov	r0, r3
 8009896:	f007 f88f 	bl	80109b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f008 f936 	bl	8011b10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80098b6:	b590      	push	{r4, r7, lr}
 80098b8:	b08d      	sub	sp, #52	; 0x34
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f008 f9f4 	bl	8011cba <USB_GetMode>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f040 84b7 	bne.w	800a248 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f008 f958 	bl	8011b94 <USB_ReadInterrupts>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 84ad 	beq.w	800a246 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	0a1b      	lsrs	r3, r3, #8
 80098f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f008 f945 	bl	8011b94 <USB_ReadInterrupts>
 800990a:	4603      	mov	r3, r0
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b02      	cmp	r3, #2
 8009912:	d107      	bne.n	8009924 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695a      	ldr	r2, [r3, #20]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f002 0202 	and.w	r2, r2, #2
 8009922:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4618      	mov	r0, r3
 800992a:	f008 f933 	bl	8011b94 <USB_ReadInterrupts>
 800992e:	4603      	mov	r3, r0
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b10      	cmp	r3, #16
 8009936:	d161      	bne.n	80099fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0210 	bic.w	r2, r2, #16
 8009946:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	f003 020f 	and.w	r2, r3, #15
 8009954:	4613      	mov	r3, r2
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	4413      	add	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4413      	add	r3, r2
 8009964:	3304      	adds	r3, #4
 8009966:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	0c5b      	lsrs	r3, r3, #17
 800996c:	f003 030f 	and.w	r3, r3, #15
 8009970:	2b02      	cmp	r3, #2
 8009972:	d124      	bne.n	80099be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800997a:	4013      	ands	r3, r2
 800997c:	2b00      	cmp	r3, #0
 800997e:	d035      	beq.n	80099ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	091b      	lsrs	r3, r3, #4
 8009988:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800998a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800998e:	b29b      	uxth	r3, r3
 8009990:	461a      	mov	r2, r3
 8009992:	6a38      	ldr	r0, [r7, #32]
 8009994:	f007 ff6a 	bl	801186c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	68da      	ldr	r2, [r3, #12]
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	091b      	lsrs	r3, r3, #4
 80099a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099a4:	441a      	add	r2, r3
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	695a      	ldr	r2, [r3, #20]
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	091b      	lsrs	r3, r3, #4
 80099b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099b6:	441a      	add	r2, r3
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	615a      	str	r2, [r3, #20]
 80099bc:	e016      	b.n	80099ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	0c5b      	lsrs	r3, r3, #17
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	2b06      	cmp	r3, #6
 80099c8:	d110      	bne.n	80099ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099d0:	2208      	movs	r2, #8
 80099d2:	4619      	mov	r1, r3
 80099d4:	6a38      	ldr	r0, [r7, #32]
 80099d6:	f007 ff49 	bl	801186c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	695a      	ldr	r2, [r3, #20]
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	091b      	lsrs	r3, r3, #4
 80099e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099e6:	441a      	add	r2, r3
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	699a      	ldr	r2, [r3, #24]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0210 	orr.w	r2, r2, #16
 80099fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f008 f8c7 	bl	8011b94 <USB_ReadInterrupts>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a10:	f040 80a7 	bne.w	8009b62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f008 f8cc 	bl	8011bba <USB_ReadDevAllOutEpInterrupt>
 8009a22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009a24:	e099      	b.n	8009b5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 808e 	beq.w	8009b4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a38:	b2d2      	uxtb	r2, r2
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f008 f8f0 	bl	8011c22 <USB_ReadDevOutEPInterrupt>
 8009a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00c      	beq.n	8009a68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fed2 	bl	800a80c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f003 0308 	and.w	r3, r3, #8
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00c      	beq.n	8009a8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	461a      	mov	r2, r3
 8009a80:	2308      	movs	r3, #8
 8009a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 ffa8 	bl	800a9dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f003 0310 	and.w	r3, r3, #16
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d008      	beq.n	8009aa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d030      	beq.n	8009b14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aba:	2b80      	cmp	r3, #128	; 0x80
 8009abc:	d109      	bne.n	8009ad2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009acc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ad0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4413      	add	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	78db      	ldrb	r3, [r3, #3]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d108      	bne.n	8009b02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2200      	movs	r2, #0
 8009af4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f01b fcf7 	bl	80254f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0e:	461a      	mov	r2, r3
 8009b10:	2302      	movs	r3, #2
 8009b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d008      	beq.n	8009b30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d009      	beq.n	8009b4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b46:	461a      	mov	r2, r3
 8009b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	3301      	adds	r3, #1
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b56:	085b      	lsrs	r3, r3, #1
 8009b58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f47f af62 	bne.w	8009a26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f008 f814 	bl	8011b94 <USB_ReadInterrupts>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b76:	f040 80db 	bne.w	8009d30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f008 f835 	bl	8011bee <USB_ReadDevAllInEpInterrupt>
 8009b84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009b8a:	e0cd      	b.n	8009d28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80c2 	beq.w	8009d1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f008 f85b 	bl	8011c5e <USB_ReadDevInEPInterrupt>
 8009ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d057      	beq.n	8009c64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	2201      	movs	r2, #1
 8009bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	69f9      	ldr	r1, [r7, #28]
 8009bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be4:	461a      	mov	r2, r3
 8009be6:	2301      	movs	r3, #1
 8009be8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d132      	bne.n	8009c58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	440b      	add	r3, r1
 8009c00:	3348      	adds	r3, #72	; 0x48
 8009c02:	6819      	ldr	r1, [r3, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c08:	4613      	mov	r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4403      	add	r3, r0
 8009c12:	3344      	adds	r3, #68	; 0x44
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4419      	add	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4403      	add	r3, r0
 8009c26:	3348      	adds	r3, #72	; 0x48
 8009c28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d113      	bne.n	8009c58 <HAL_PCD_IRQHandler+0x3a2>
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c34:	4613      	mov	r3, r2
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	334c      	adds	r3, #76	; 0x4c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d108      	bne.n	8009c58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c50:	461a      	mov	r2, r3
 8009c52:	2101      	movs	r1, #1
 8009c54:	f008 f864 	bl	8011d20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f01b fbc1 	bl	80253e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d008      	beq.n	8009c80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d008      	beq.n	8009c9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c96:	461a      	mov	r2, r3
 8009c98:	2310      	movs	r3, #16
 8009c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d008      	beq.n	8009cb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	2340      	movs	r3, #64	; 0x40
 8009cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d023      	beq.n	8009d0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cc4:	6a38      	ldr	r0, [r7, #32]
 8009cc6:	f007 f843 	bl	8010d50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ccc:	4613      	mov	r3, r2
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	3338      	adds	r3, #56	; 0x38
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	4413      	add	r3, r2
 8009cda:	3304      	adds	r3, #4
 8009cdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	78db      	ldrb	r3, [r3, #3]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d108      	bne.n	8009cf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f01b fc0e 	bl	8025514 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d04:	461a      	mov	r2, r3
 8009d06:	2302      	movs	r3, #2
 8009d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fcea 	bl	800a6f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	3301      	adds	r3, #1
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d24:	085b      	lsrs	r3, r3, #1
 8009d26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f47f af2e 	bne.w	8009b8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f007 ff2d 	bl	8011b94 <USB_ReadInterrupts>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d44:	d122      	bne.n	8009d8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	69fa      	ldr	r2, [r7, #28]
 8009d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d108      	bne.n	8009d76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fef6 	bl	800ab60 <HAL_PCDEx_LPM_Callback>
 8009d74:	e002      	b.n	8009d7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f01b fbac 	bl	80254d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695a      	ldr	r2, [r3, #20]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f007 feff 	bl	8011b94 <USB_ReadInterrupts>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009da0:	d112      	bne.n	8009dc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d102      	bne.n	8009db8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f01b fb68 	bl	8025488 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	695a      	ldr	r2, [r3, #20]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f007 fee1 	bl	8011b94 <USB_ReadInterrupts>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ddc:	d121      	bne.n	8009e22 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	695a      	ldr	r2, [r3, #20]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009dec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d111      	bne.n	8009e1c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e06:	089b      	lsrs	r3, r3, #2
 8009e08:	f003 020f 	and.w	r2, r3, #15
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009e12:	2101      	movs	r1, #1
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fea3 	bl	800ab60 <HAL_PCDEx_LPM_Callback>
 8009e1a:	e002      	b.n	8009e22 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f01b fb33 	bl	8025488 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f007 feb4 	bl	8011b94 <USB_ReadInterrupts>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e36:	f040 80b7 	bne.w	8009fa8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e48:	f023 0301 	bic.w	r3, r3, #1
 8009e4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2110      	movs	r1, #16
 8009e54:	4618      	mov	r0, r3
 8009e56:	f006 ff7b 	bl	8010d50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e5e:	e046      	b.n	8009eee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e84:	0151      	lsls	r1, r2, #5
 8009e86:	69fa      	ldr	r2, [r7, #28]
 8009e88:	440a      	add	r2, r1
 8009e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ea6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb8:	0151      	lsls	r1, r2, #5
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	440a      	add	r2, r1
 8009ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ec6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ed8:	0151      	lsls	r1, r2, #5
 8009eda:	69fa      	ldr	r2, [r7, #28]
 8009edc:	440a      	add	r2, r1
 8009ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ee6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	3301      	adds	r3, #1
 8009eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d3b3      	bcc.n	8009e60 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009f0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d016      	beq.n	8009f42 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f24:	f043 030b 	orr.w	r3, r3, #11
 8009f28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f3a:	f043 030b 	orr.w	r3, r3, #11
 8009f3e:	6453      	str	r3, [r2, #68]	; 0x44
 8009f40:	e015      	b.n	8009f6e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f48:	695a      	ldr	r2, [r3, #20]
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f50:	4619      	mov	r1, r3
 8009f52:	f242 032b 	movw	r3, #8235	; 0x202b
 8009f56:	4313      	orrs	r3, r2
 8009f58:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	69fa      	ldr	r2, [r7, #28]
 8009f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f68:	f043 030b 	orr.w	r3, r3, #11
 8009f6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	69fa      	ldr	r2, [r7, #28]
 8009f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009f92:	461a      	mov	r2, r3
 8009f94:	f007 fec4 	bl	8011d20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	695a      	ldr	r2, [r3, #20]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f007 fdf1 	bl	8011b94 <USB_ReadInterrupts>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fbc:	d124      	bne.n	800a008 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f007 fe88 	bl	8011cd8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f006 ff3c 	bl	8010e4a <USB_GetDevSpeed>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681c      	ldr	r4, [r3, #0]
 8009fde:	f001 fd1f 	bl	800ba20 <HAL_RCC_GetHCLKFreq>
 8009fe2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	4620      	mov	r0, r4
 8009fee:	f006 fc41 	bl	8010874 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f01b fa1f 	bl	8025436 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	695a      	ldr	r2, [r3, #20]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a006:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f007 fdc1 	bl	8011b94 <USB_ReadInterrupts>
 800a012:	4603      	mov	r3, r0
 800a014:	f003 0308 	and.w	r3, r3, #8
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d10a      	bne.n	800a032 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f01b f9fc 	bl	802541a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	695a      	ldr	r2, [r3, #20]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f002 0208 	and.w	r2, r2, #8
 800a030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f007 fdac 	bl	8011b94 <USB_ReadInterrupts>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a042:	2b80      	cmp	r3, #128	; 0x80
 800a044:	d122      	bne.n	800a08c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a052:	2301      	movs	r3, #1
 800a054:	627b      	str	r3, [r7, #36]	; 0x24
 800a056:	e014      	b.n	800a082 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	4613      	mov	r3, r2
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	4413      	add	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	440b      	add	r3, r1
 800a066:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d105      	bne.n	800a07c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	b2db      	uxtb	r3, r3
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fb09 	bl	800a68e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	3301      	adds	r3, #1
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a088:	429a      	cmp	r2, r3
 800a08a:	d3e5      	bcc.n	800a058 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4618      	mov	r0, r3
 800a092:	f007 fd7f 	bl	8011b94 <USB_ReadInterrupts>
 800a096:	4603      	mov	r3, r0
 800a098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a09c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a0:	d13b      	bne.n	800a11a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a6:	e02b      	b.n	800a100 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0bc:	4613      	mov	r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	440b      	add	r3, r1
 800a0c6:	3340      	adds	r3, #64	; 0x40
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d115      	bne.n	800a0fa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a0ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	da12      	bge.n	800a0fa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d8:	4613      	mov	r3, r2
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	440b      	add	r3, r1
 800a0e2:	333f      	adds	r3, #63	; 0x3f
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 faca 	bl	800a68e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a106:	429a      	cmp	r2, r3
 800a108:	d3ce      	bcc.n	800a0a8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	695a      	ldr	r2, [r3, #20]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4618      	mov	r0, r3
 800a120:	f007 fd38 	bl	8011b94 <USB_ReadInterrupts>
 800a124:	4603      	mov	r3, r0
 800a126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a12a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a12e:	d155      	bne.n	800a1dc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a130:	2301      	movs	r3, #1
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
 800a134:	e045      	b.n	800a1c2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14a:	4613      	mov	r3, r2
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d12e      	bne.n	800a1bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a15e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a160:	2b00      	cmp	r3, #0
 800a162:	da2b      	bge.n	800a1bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a170:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a174:	429a      	cmp	r2, r3
 800a176:	d121      	bne.n	800a1bc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17c:	4613      	mov	r3, r2
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	440b      	add	r3, r1
 800a186:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a18a:	2201      	movs	r2, #1
 800a18c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	69fa      	ldr	r2, [r7, #28]
 800a1b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1b8:	6053      	str	r3, [r2, #4]
            break;
 800a1ba:	e007      	b.n	800a1cc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	3301      	adds	r3, #1
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d3b4      	bcc.n	800a136 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	695a      	ldr	r2, [r3, #20]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a1da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f007 fcd7 	bl	8011b94 <USB_ReadInterrupts>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f0:	d10a      	bne.n	800a208 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f01b f9a0 	bl	8025538 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	695a      	ldr	r2, [r3, #20]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f007 fcc1 	bl	8011b94 <USB_ReadInterrupts>
 800a212:	4603      	mov	r3, r0
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b04      	cmp	r3, #4
 800a21a:	d115      	bne.n	800a248 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	f003 0304 	and.w	r3, r3, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f01b f990 	bl	8025554 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6859      	ldr	r1, [r3, #4]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	430a      	orrs	r2, r1
 800a242:	605a      	str	r2, [r3, #4]
 800a244:	e000      	b.n	800a248 <HAL_PCD_IRQHandler+0x992>
      return;
 800a246:	bf00      	nop
    }
  }
}
 800a248:	3734      	adds	r7, #52	; 0x34
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd90      	pop	{r4, r7, pc}

0800a24e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a260:	2b01      	cmp	r3, #1
 800a262:	d101      	bne.n	800a268 <HAL_PCD_SetAddress+0x1a>
 800a264:	2302      	movs	r3, #2
 800a266:	e013      	b.n	800a290 <HAL_PCD_SetAddress+0x42>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	78fa      	ldrb	r2, [r7, #3]
 800a274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f007 fc1f 	bl	8011ac4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	70fb      	strb	r3, [r7, #3]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	803b      	strh	r3, [r7, #0]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a2b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	da0f      	bge.n	800a2de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	f003 020f 	and.w	r2, r3, #15
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	3338      	adds	r3, #56	; 0x38
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	705a      	strb	r2, [r3, #1]
 800a2dc:	e00f      	b.n	800a2fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	f003 020f 	and.w	r2, r3, #15
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a2fe:	78fb      	ldrb	r3, [r7, #3]
 800a300:	f003 030f 	and.w	r3, r3, #15
 800a304:	b2da      	uxtb	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a30a:	883a      	ldrh	r2, [r7, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	78ba      	ldrb	r2, [r7, #2]
 800a314:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	785b      	ldrb	r3, [r3, #1]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d004      	beq.n	800a328 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b29a      	uxth	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a328:	78bb      	ldrb	r3, [r7, #2]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d102      	bne.n	800a334 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d101      	bne.n	800a342 <HAL_PCD_EP_Open+0xaa>
 800a33e:	2302      	movs	r3, #2
 800a340:	e00e      	b.n	800a360 <HAL_PCD_EP_Open+0xc8>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68f9      	ldr	r1, [r7, #12]
 800a350:	4618      	mov	r0, r3
 800a352:	f006 fd9f 	bl	8010e94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a35e:	7afb      	ldrb	r3, [r7, #11]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	460b      	mov	r3, r1
 800a372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	da0f      	bge.n	800a39c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	f003 020f 	and.w	r2, r3, #15
 800a382:	4613      	mov	r3, r2
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	4413      	add	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	3338      	adds	r3, #56	; 0x38
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	4413      	add	r3, r2
 800a390:	3304      	adds	r3, #4
 800a392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2201      	movs	r2, #1
 800a398:	705a      	strb	r2, [r3, #1]
 800a39a:	e00f      	b.n	800a3bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	f003 020f 	and.w	r2, r3, #15
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3bc:	78fb      	ldrb	r3, [r7, #3]
 800a3be:	f003 030f 	and.w	r3, r3, #15
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d101      	bne.n	800a3d6 <HAL_PCD_EP_Close+0x6e>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e00e      	b.n	800a3f4 <HAL_PCD_EP_Close+0x8c>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f006 fddd 	bl	8010fa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	607a      	str	r2, [r7, #4]
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	460b      	mov	r3, r1
 800a40a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a40c:	7afb      	ldrb	r3, [r7, #11]
 800a40e:	f003 020f 	and.w	r2, r3, #15
 800a412:	4613      	mov	r3, r2
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4413      	add	r3, r2
 800a422:	3304      	adds	r3, #4
 800a424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2200      	movs	r2, #0
 800a436:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2200      	movs	r2, #0
 800a43c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a43e:	7afb      	ldrb	r3, [r7, #11]
 800a440:	f003 030f 	and.w	r3, r3, #15
 800a444:	b2da      	uxtb	r2, r3
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d102      	bne.n	800a458 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	461a      	mov	r2, r3
 800a464:	6979      	ldr	r1, [r7, #20]
 800a466:	f006 fe79 	bl	801115c <USB_EPStartXfer>

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	f003 020f 	and.w	r2, r3, #15
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	4613      	mov	r3, r2
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	440b      	add	r3, r1
 800a492:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a496:	681b      	ldr	r3, [r3, #0]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4b4:	7afb      	ldrb	r3, [r7, #11]
 800a4b6:	f003 020f 	and.w	r2, r3, #15
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	3338      	adds	r3, #56	; 0x38
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4e4:	7afb      	ldrb	r3, [r7, #11]
 800a4e6:	f003 030f 	and.w	r3, r3, #15
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d102      	bne.n	800a4fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	b2db      	uxtb	r3, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	6979      	ldr	r1, [r7, #20]
 800a50c:	f006 fe26 	bl	801115c <USB_EPStartXfer>

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3718      	adds	r7, #24
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	f003 020f 	and.w	r2, r3, #15
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	d901      	bls.n	800a538 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e050      	b.n	800a5da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	da0f      	bge.n	800a560 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	f003 020f 	and.w	r2, r3, #15
 800a546:	4613      	mov	r3, r2
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	3338      	adds	r3, #56	; 0x38
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	3304      	adds	r3, #4
 800a556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2201      	movs	r2, #1
 800a55c:	705a      	strb	r2, [r3, #1]
 800a55e:	e00d      	b.n	800a57c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a560:	78fa      	ldrb	r2, [r7, #3]
 800a562:	4613      	mov	r3, r2
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	4413      	add	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	4413      	add	r3, r2
 800a572:	3304      	adds	r3, #4
 800a574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a582:	78fb      	ldrb	r3, [r7, #3]
 800a584:	f003 030f 	and.w	r3, r3, #15
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a594:	2b01      	cmp	r3, #1
 800a596:	d101      	bne.n	800a59c <HAL_PCD_EP_SetStall+0x82>
 800a598:	2302      	movs	r3, #2
 800a59a:	e01e      	b.n	800a5da <HAL_PCD_EP_SetStall+0xc0>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f007 f9b6 	bl	801191c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10a      	bne.n	800a5d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	b2d9      	uxtb	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f007 fba8 	bl	8011d20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	f003 020f 	and.w	r2, r3, #15
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d901      	bls.n	800a600 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e042      	b.n	800a686 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a604:	2b00      	cmp	r3, #0
 800a606:	da0f      	bge.n	800a628 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	f003 020f 	and.w	r2, r3, #15
 800a60e:	4613      	mov	r3, r2
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	3338      	adds	r3, #56	; 0x38
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	4413      	add	r3, r2
 800a61c:	3304      	adds	r3, #4
 800a61e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2201      	movs	r2, #1
 800a624:	705a      	strb	r2, [r3, #1]
 800a626:	e00f      	b.n	800a648 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	f003 020f 	and.w	r2, r3, #15
 800a62e:	4613      	mov	r3, r2
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	4413      	add	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	3304      	adds	r3, #4
 800a640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	f003 030f 	and.w	r3, r3, #15
 800a654:	b2da      	uxtb	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_PCD_EP_ClrStall+0x86>
 800a664:	2302      	movs	r3, #2
 800a666:	e00e      	b.n	800a686 <HAL_PCD_EP_ClrStall+0xa4>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68f9      	ldr	r1, [r7, #12]
 800a676:	4618      	mov	r0, r3
 800a678:	f007 f9be 	bl	80119f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a69a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da0c      	bge.n	800a6bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6a2:	78fb      	ldrb	r3, [r7, #3]
 800a6a4:	f003 020f 	and.w	r2, r3, #15
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	3338      	adds	r3, #56	; 0x38
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	60fb      	str	r3, [r7, #12]
 800a6ba:	e00c      	b.n	800a6d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	f003 020f 	and.w	r2, r3, #15
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68f9      	ldr	r1, [r7, #12]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f006 ffdd 	bl	801169c <USB_EPStopXfer>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a6e6:	7afb      	ldrb	r3, [r7, #11]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	4613      	mov	r3, r2
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	3338      	adds	r3, #56	; 0x38
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	4413      	add	r3, r2
 800a714:	3304      	adds	r3, #4
 800a716:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	695a      	ldr	r2, [r3, #20]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	429a      	cmp	r2, r3
 800a722:	d901      	bls.n	800a728 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e06c      	b.n	800a802 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	691a      	ldr	r2, [r3, #16]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	69fa      	ldr	r2, [r7, #28]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d902      	bls.n	800a744 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	3303      	adds	r3, #3
 800a748:	089b      	lsrs	r3, r3, #2
 800a74a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a74c:	e02b      	b.n	800a7a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	691a      	ldr	r2, [r3, #16]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	429a      	cmp	r2, r3
 800a762:	d902      	bls.n	800a76a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	3303      	adds	r3, #3
 800a76e:	089b      	lsrs	r3, r3, #2
 800a770:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	68d9      	ldr	r1, [r3, #12]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a782:	b2db      	uxtb	r3, r3
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	4603      	mov	r3, r0
 800a788:	6978      	ldr	r0, [r7, #20]
 800a78a:	f007 f831 	bl	80117f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	68da      	ldr	r2, [r3, #12]
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	441a      	add	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	695a      	ldr	r2, [r3, #20]
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d809      	bhi.n	800a7d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	695a      	ldr	r2, [r3, #20]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d203      	bcs.n	800a7d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1be      	bne.n	800a74e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d811      	bhi.n	800a800 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	f003 030f 	and.w	r3, r3, #15
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	43db      	mvns	r3, r3
 800a7f6:	6939      	ldr	r1, [r7, #16]
 800a7f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3720      	adds	r7, #32
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
	...

0800a80c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	333c      	adds	r3, #60	; 0x3c
 800a824:	3304      	adds	r3, #4
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d17b      	bne.n	800a93a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f003 0308 	and.w	r3, r3, #8
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d015      	beq.n	800a878 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	4a61      	ldr	r2, [pc, #388]	; (800a9d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	f240 80b9 	bls.w	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 80b3 	beq.w	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a86e:	461a      	mov	r2, r3
 800a870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a874:	6093      	str	r3, [r2, #8]
 800a876:	e0a7      	b.n	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d009      	beq.n	800a896 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	015a      	lsls	r2, r3, #5
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	4413      	add	r3, r2
 800a88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88e:	461a      	mov	r2, r3
 800a890:	2320      	movs	r3, #32
 800a892:	6093      	str	r3, [r2, #8]
 800a894:	e098      	b.n	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 8093 	bne.w	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	4a4b      	ldr	r2, [pc, #300]	; (800a9d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d90f      	bls.n	800a8ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00a      	beq.n	800a8ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c6:	6093      	str	r3, [r2, #8]
 800a8c8:	e07e      	b.n	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	4413      	add	r3, r2
 800a8dc:	3304      	adds	r3, #4
 800a8de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6a1a      	ldr	r2, [r3, #32]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	0159      	lsls	r1, r3, #5
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	440b      	add	r3, r1
 800a8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8f6:	1ad2      	subs	r2, r2, r3
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d114      	bne.n	800a92c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a914:	461a      	mov	r2, r3
 800a916:	2101      	movs	r1, #1
 800a918:	f007 fa02 	bl	8011d20 <USB_EP0_OutStart>
 800a91c:	e006      	b.n	800a92c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	441a      	add	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f01a fd3c 	bl	80253b0 <HAL_PCD_DataOutStageCallback>
 800a938:	e046      	b.n	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	4a26      	ldr	r2, [pc, #152]	; (800a9d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d124      	bne.n	800a98c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a958:	461a      	mov	r2, r3
 800a95a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a95e:	6093      	str	r3, [r2, #8]
 800a960:	e032      	b.n	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f003 0320 	and.w	r3, r3, #32
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a978:	461a      	mov	r2, r3
 800a97a:	2320      	movs	r3, #32
 800a97c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	b2db      	uxtb	r3, r3
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f01a fd13 	bl	80253b0 <HAL_PCD_DataOutStageCallback>
 800a98a:	e01d      	b.n	800a9c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d114      	bne.n	800a9bc <PCD_EP_OutXfrComplete_int+0x1b0>
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	4613      	mov	r3, r2
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d108      	bne.n	800a9bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6818      	ldr	r0, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	f007 f9b2 	bl	8011d20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f01a fcf4 	bl	80253b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3720      	adds	r7, #32
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	4f54300a 	.word	0x4f54300a
 800a9d8:	4f54310a 	.word	0x4f54310a

0800a9dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	333c      	adds	r3, #60	; 0x3c
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4a15      	ldr	r2, [pc, #84]	; (800aa64 <PCD_EP_OutSetupPacket_int+0x88>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d90e      	bls.n	800aa30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d009      	beq.n	800aa30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa28:	461a      	mov	r2, r3
 800aa2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f01a fcab 	bl	802538c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4a0a      	ldr	r2, [pc, #40]	; (800aa64 <PCD_EP_OutSetupPacket_int+0x88>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d90c      	bls.n	800aa58 <PCD_EP_OutSetupPacket_int+0x7c>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d108      	bne.n	800aa58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aa50:	461a      	mov	r2, r3
 800aa52:	2101      	movs	r1, #1
 800aa54:	f007 f964 	bl	8011d20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	4f54300a 	.word	0x4f54300a

0800aa68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
 800aa74:	4613      	mov	r3, r2
 800aa76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d107      	bne.n	800aa96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800aa86:	883b      	ldrh	r3, [r7, #0]
 800aa88:	0419      	lsls	r1, r3, #16
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	629a      	str	r2, [r3, #40]	; 0x28
 800aa94:	e028      	b.n	800aae8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9c:	0c1b      	lsrs	r3, r3, #16
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]
 800aaa8:	e00d      	b.n	800aac6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	3340      	adds	r3, #64	; 0x40
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	0c1b      	lsrs	r3, r3, #16
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	4413      	add	r3, r2
 800aabe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	3301      	adds	r3, #1
 800aac4:	73fb      	strb	r3, [r7, #15]
 800aac6:	7bfa      	ldrb	r2, [r7, #15]
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	429a      	cmp	r2, r3
 800aace:	d3ec      	bcc.n	800aaaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aad0:	883b      	ldrh	r3, [r7, #0]
 800aad2:	0418      	lsls	r0, r3, #16
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6819      	ldr	r1, [r3, #0]
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	3b01      	subs	r3, #1
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	4302      	orrs	r2, r0
 800aae0:	3340      	adds	r3, #64	; 0x40
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	440b      	add	r3, r1
 800aae6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b083      	sub	sp, #12
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	887a      	ldrh	r2, [r7, #2]
 800ab08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab46:	4b05      	ldr	r3, [pc, #20]	; (800ab5c <HAL_PCDEx_ActivateLPM+0x44>)
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	10000003 	.word	0x10000003

0800ab60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ab80:	4b19      	ldr	r3, [pc, #100]	; (800abe8 <HAL_PWREx_ConfigSupply+0x70>)
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d00a      	beq.n	800aba2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ab8c:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <HAL_PWREx_ConfigSupply+0x70>)
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f003 0307 	and.w	r3, r3, #7
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d001      	beq.n	800ab9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e01f      	b.n	800abde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e01d      	b.n	800abde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aba2:	4b11      	ldr	r3, [pc, #68]	; (800abe8 <HAL_PWREx_ConfigSupply+0x70>)
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f023 0207 	bic.w	r2, r3, #7
 800abaa:	490f      	ldr	r1, [pc, #60]	; (800abe8 <HAL_PWREx_ConfigSupply+0x70>)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800abb2:	f7fb fb89 	bl	80062c8 <HAL_GetTick>
 800abb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800abb8:	e009      	b.n	800abce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800abba:	f7fb fb85 	bl	80062c8 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abc8:	d901      	bls.n	800abce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e007      	b.n	800abde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800abce:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <HAL_PWREx_ConfigSupply+0x70>)
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abda:	d1ee      	bne.n	800abba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	58024800 	.word	0x58024800

0800abec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800abf0:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	4a04      	ldr	r2, [pc, #16]	; (800ac08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800abf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800abfa:	60d3      	str	r3, [r2, #12]
}
 800abfc:	bf00      	nop
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	58024800 	.word	0x58024800

0800ac0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08c      	sub	sp, #48	; 0x30
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e3c8      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 8087 	beq.w	800ad3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac2c:	4b88      	ldr	r3, [pc, #544]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac36:	4b86      	ldr	r3, [pc, #536]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d007      	beq.n	800ac52 <HAL_RCC_OscConfig+0x46>
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	2b18      	cmp	r3, #24
 800ac46:	d110      	bne.n	800ac6a <HAL_RCC_OscConfig+0x5e>
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	f003 0303 	and.w	r3, r3, #3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d10b      	bne.n	800ac6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac52:	4b7f      	ldr	r3, [pc, #508]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d06c      	beq.n	800ad38 <HAL_RCC_OscConfig+0x12c>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d168      	bne.n	800ad38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e3a2      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac72:	d106      	bne.n	800ac82 <HAL_RCC_OscConfig+0x76>
 800ac74:	4b76      	ldr	r3, [pc, #472]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a75      	ldr	r2, [pc, #468]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	e02e      	b.n	800ace0 <HAL_RCC_OscConfig+0xd4>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10c      	bne.n	800aca4 <HAL_RCC_OscConfig+0x98>
 800ac8a:	4b71      	ldr	r3, [pc, #452]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a70      	ldr	r2, [pc, #448]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	4b6e      	ldr	r3, [pc, #440]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a6d      	ldr	r2, [pc, #436]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ac9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	e01d      	b.n	800ace0 <HAL_RCC_OscConfig+0xd4>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acac:	d10c      	bne.n	800acc8 <HAL_RCC_OscConfig+0xbc>
 800acae:	4b68      	ldr	r3, [pc, #416]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a67      	ldr	r2, [pc, #412]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	4b65      	ldr	r3, [pc, #404]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a64      	ldr	r2, [pc, #400]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	e00b      	b.n	800ace0 <HAL_RCC_OscConfig+0xd4>
 800acc8:	4b61      	ldr	r3, [pc, #388]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a60      	ldr	r2, [pc, #384]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	4b5e      	ldr	r3, [pc, #376]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a5d      	ldr	r2, [pc, #372]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800acda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d013      	beq.n	800ad10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace8:	f7fb faee 	bl	80062c8 <HAL_GetTick>
 800acec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acee:	e008      	b.n	800ad02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acf0:	f7fb faea 	bl	80062c8 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b64      	cmp	r3, #100	; 0x64
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e356      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad02:	4b53      	ldr	r3, [pc, #332]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0f0      	beq.n	800acf0 <HAL_RCC_OscConfig+0xe4>
 800ad0e:	e014      	b.n	800ad3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad10:	f7fb fada 	bl	80062c8 <HAL_GetTick>
 800ad14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ad16:	e008      	b.n	800ad2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad18:	f7fb fad6 	bl	80062c8 <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b64      	cmp	r3, #100	; 0x64
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e342      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ad2a:	4b49      	ldr	r3, [pc, #292]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1f0      	bne.n	800ad18 <HAL_RCC_OscConfig+0x10c>
 800ad36:	e000      	b.n	800ad3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 808c 	beq.w	800ae60 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad48:	4b41      	ldr	r3, [pc, #260]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad52:	4b3f      	ldr	r3, [pc, #252]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ad54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d007      	beq.n	800ad6e <HAL_RCC_OscConfig+0x162>
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	2b18      	cmp	r3, #24
 800ad62:	d137      	bne.n	800add4 <HAL_RCC_OscConfig+0x1c8>
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d132      	bne.n	800add4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad6e:	4b38      	ldr	r3, [pc, #224]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0304 	and.w	r3, r3, #4
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d005      	beq.n	800ad86 <HAL_RCC_OscConfig+0x17a>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e314      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad86:	4b32      	ldr	r3, [pc, #200]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f023 0219 	bic.w	r2, r3, #25
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	492f      	ldr	r1, [pc, #188]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ad94:	4313      	orrs	r3, r2
 800ad96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad98:	f7fb fa96 	bl	80062c8 <HAL_GetTick>
 800ad9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad9e:	e008      	b.n	800adb2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ada0:	f7fb fa92 	bl	80062c8 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d901      	bls.n	800adb2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e2fe      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800adb2:	4b27      	ldr	r3, [pc, #156]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0f0      	beq.n	800ada0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	061b      	lsls	r3, r3, #24
 800adcc:	4920      	ldr	r1, [pc, #128]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800adce:	4313      	orrs	r3, r2
 800add0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800add2:	e045      	b.n	800ae60 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d026      	beq.n	800ae2a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800addc:	4b1c      	ldr	r3, [pc, #112]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f023 0219 	bic.w	r2, r3, #25
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	4919      	ldr	r1, [pc, #100]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800adea:	4313      	orrs	r3, r2
 800adec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adee:	f7fb fa6b 	bl	80062c8 <HAL_GetTick>
 800adf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800adf4:	e008      	b.n	800ae08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adf6:	f7fb fa67 	bl	80062c8 <HAL_GetTick>
 800adfa:	4602      	mov	r2, r0
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d901      	bls.n	800ae08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e2d3      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae08:	4b11      	ldr	r3, [pc, #68]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0f0      	beq.n	800adf6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae14:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	061b      	lsls	r3, r3, #24
 800ae22:	490b      	ldr	r1, [pc, #44]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	604b      	str	r3, [r1, #4]
 800ae28:	e01a      	b.n	800ae60 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a08      	ldr	r2, [pc, #32]	; (800ae50 <HAL_RCC_OscConfig+0x244>)
 800ae30:	f023 0301 	bic.w	r3, r3, #1
 800ae34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae36:	f7fb fa47 	bl	80062c8 <HAL_GetTick>
 800ae3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ae3c:	e00a      	b.n	800ae54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae3e:	f7fb fa43 	bl	80062c8 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d903      	bls.n	800ae54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e2af      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
 800ae50:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ae54:	4b96      	ldr	r3, [pc, #600]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1ee      	bne.n	800ae3e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0310 	and.w	r3, r3, #16
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d06a      	beq.n	800af42 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae6c:	4b90      	ldr	r3, [pc, #576]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae76:	4b8e      	ldr	r3, [pc, #568]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	2b08      	cmp	r3, #8
 800ae80:	d007      	beq.n	800ae92 <HAL_RCC_OscConfig+0x286>
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2b18      	cmp	r3, #24
 800ae86:	d11b      	bne.n	800aec0 <HAL_RCC_OscConfig+0x2b4>
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d116      	bne.n	800aec0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae92:	4b87      	ldr	r3, [pc, #540]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d005      	beq.n	800aeaa <HAL_RCC_OscConfig+0x29e>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	2b80      	cmp	r3, #128	; 0x80
 800aea4:	d001      	beq.n	800aeaa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e282      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aeaa:	4b81      	ldr	r3, [pc, #516]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	061b      	lsls	r3, r3, #24
 800aeb8:	497d      	ldr	r1, [pc, #500]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aebe:	e040      	b.n	800af42 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d023      	beq.n	800af10 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aec8:	4b79      	ldr	r3, [pc, #484]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a78      	ldr	r2, [pc, #480]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800aece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed4:	f7fb f9f8 	bl	80062c8 <HAL_GetTick>
 800aed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aeda:	e008      	b.n	800aeee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aedc:	f7fb f9f4 	bl	80062c8 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e260      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aeee:	4b70      	ldr	r3, [pc, #448]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0f0      	beq.n	800aedc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aefa:	4b6d      	ldr	r3, [pc, #436]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	061b      	lsls	r3, r3, #24
 800af08:	4969      	ldr	r1, [pc, #420]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60cb      	str	r3, [r1, #12]
 800af0e:	e018      	b.n	800af42 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800af10:	4b67      	ldr	r3, [pc, #412]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a66      	ldr	r2, [pc, #408]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af1c:	f7fb f9d4 	bl	80062c8 <HAL_GetTick>
 800af20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af22:	e008      	b.n	800af36 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800af24:	f7fb f9d0 	bl	80062c8 <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d901      	bls.n	800af36 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e23c      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af36:	4b5e      	ldr	r3, [pc, #376]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f0      	bne.n	800af24 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0308 	and.w	r3, r3, #8
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d036      	beq.n	800afbc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d019      	beq.n	800af8a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af56:	4b56      	ldr	r3, [pc, #344]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af5a:	4a55      	ldr	r2, [pc, #340]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af5c:	f043 0301 	orr.w	r3, r3, #1
 800af60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af62:	f7fb f9b1 	bl	80062c8 <HAL_GetTick>
 800af66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af68:	e008      	b.n	800af7c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af6a:	f7fb f9ad 	bl	80062c8 <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	2b02      	cmp	r3, #2
 800af76:	d901      	bls.n	800af7c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e219      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af7c:	4b4c      	ldr	r3, [pc, #304]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af80:	f003 0302 	and.w	r3, r3, #2
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0f0      	beq.n	800af6a <HAL_RCC_OscConfig+0x35e>
 800af88:	e018      	b.n	800afbc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af8a:	4b49      	ldr	r3, [pc, #292]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af8e:	4a48      	ldr	r2, [pc, #288]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800af90:	f023 0301 	bic.w	r3, r3, #1
 800af94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af96:	f7fb f997 	bl	80062c8 <HAL_GetTick>
 800af9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af9c:	e008      	b.n	800afb0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af9e:	f7fb f993 	bl	80062c8 <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d901      	bls.n	800afb0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800afac:	2303      	movs	r3, #3
 800afae:	e1ff      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800afb0:	4b3f      	ldr	r3, [pc, #252]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800afb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afb4:	f003 0302 	and.w	r3, r3, #2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1f0      	bne.n	800af9e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0320 	and.w	r3, r3, #32
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d036      	beq.n	800b036 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d019      	beq.n	800b004 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800afd0:	4b37      	ldr	r3, [pc, #220]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a36      	ldr	r2, [pc, #216]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800afd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800afda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800afdc:	f7fb f974 	bl	80062c8 <HAL_GetTick>
 800afe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afe2:	e008      	b.n	800aff6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afe4:	f7fb f970 	bl	80062c8 <HAL_GetTick>
 800afe8:	4602      	mov	r2, r0
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d901      	bls.n	800aff6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e1dc      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aff6:	4b2e      	ldr	r3, [pc, #184]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0f0      	beq.n	800afe4 <HAL_RCC_OscConfig+0x3d8>
 800b002:	e018      	b.n	800b036 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b004:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a29      	ldr	r2, [pc, #164]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b00a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b00e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b010:	f7fb f95a 	bl	80062c8 <HAL_GetTick>
 800b014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b016:	e008      	b.n	800b02a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b018:	f7fb f956 	bl	80062c8 <HAL_GetTick>
 800b01c:	4602      	mov	r2, r0
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	2b02      	cmp	r3, #2
 800b024:	d901      	bls.n	800b02a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b026:	2303      	movs	r3, #3
 800b028:	e1c2      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b02a:	4b21      	ldr	r3, [pc, #132]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1f0      	bne.n	800b018 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 8086 	beq.w	800b150 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b044:	4b1b      	ldr	r3, [pc, #108]	; (800b0b4 <HAL_RCC_OscConfig+0x4a8>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a1a      	ldr	r2, [pc, #104]	; (800b0b4 <HAL_RCC_OscConfig+0x4a8>)
 800b04a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b04e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b050:	f7fb f93a 	bl	80062c8 <HAL_GetTick>
 800b054:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b056:	e008      	b.n	800b06a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b058:	f7fb f936 	bl	80062c8 <HAL_GetTick>
 800b05c:	4602      	mov	r2, r0
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	2b64      	cmp	r3, #100	; 0x64
 800b064:	d901      	bls.n	800b06a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e1a2      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b06a:	4b12      	ldr	r3, [pc, #72]	; (800b0b4 <HAL_RCC_OscConfig+0x4a8>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0f0      	beq.n	800b058 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d106      	bne.n	800b08c <HAL_RCC_OscConfig+0x480>
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b082:	4a0b      	ldr	r2, [pc, #44]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b084:	f043 0301 	orr.w	r3, r3, #1
 800b088:	6713      	str	r3, [r2, #112]	; 0x70
 800b08a:	e032      	b.n	800b0f2 <HAL_RCC_OscConfig+0x4e6>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d111      	bne.n	800b0b8 <HAL_RCC_OscConfig+0x4ac>
 800b094:	4b06      	ldr	r3, [pc, #24]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b098:	4a05      	ldr	r2, [pc, #20]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b09a:	f023 0301 	bic.w	r3, r3, #1
 800b09e:	6713      	str	r3, [r2, #112]	; 0x70
 800b0a0:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a4:	4a02      	ldr	r2, [pc, #8]	; (800b0b0 <HAL_RCC_OscConfig+0x4a4>)
 800b0a6:	f023 0304 	bic.w	r3, r3, #4
 800b0aa:	6713      	str	r3, [r2, #112]	; 0x70
 800b0ac:	e021      	b.n	800b0f2 <HAL_RCC_OscConfig+0x4e6>
 800b0ae:	bf00      	nop
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	58024800 	.word	0x58024800
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	2b05      	cmp	r3, #5
 800b0be:	d10c      	bne.n	800b0da <HAL_RCC_OscConfig+0x4ce>
 800b0c0:	4b83      	ldr	r3, [pc, #524]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c4:	4a82      	ldr	r2, [pc, #520]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0c6:	f043 0304 	orr.w	r3, r3, #4
 800b0ca:	6713      	str	r3, [r2, #112]	; 0x70
 800b0cc:	4b80      	ldr	r3, [pc, #512]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d0:	4a7f      	ldr	r2, [pc, #508]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0d2:	f043 0301 	orr.w	r3, r3, #1
 800b0d6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0d8:	e00b      	b.n	800b0f2 <HAL_RCC_OscConfig+0x4e6>
 800b0da:	4b7d      	ldr	r3, [pc, #500]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0de:	4a7c      	ldr	r2, [pc, #496]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0e0:	f023 0301 	bic.w	r3, r3, #1
 800b0e4:	6713      	str	r3, [r2, #112]	; 0x70
 800b0e6:	4b7a      	ldr	r3, [pc, #488]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ea:	4a79      	ldr	r2, [pc, #484]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b0ec:	f023 0304 	bic.w	r3, r3, #4
 800b0f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d015      	beq.n	800b126 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0fa:	f7fb f8e5 	bl	80062c8 <HAL_GetTick>
 800b0fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b100:	e00a      	b.n	800b118 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b102:	f7fb f8e1 	bl	80062c8 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b110:	4293      	cmp	r3, r2
 800b112:	d901      	bls.n	800b118 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	e14b      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b118:	4b6d      	ldr	r3, [pc, #436]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b00      	cmp	r3, #0
 800b122:	d0ee      	beq.n	800b102 <HAL_RCC_OscConfig+0x4f6>
 800b124:	e014      	b.n	800b150 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b126:	f7fb f8cf 	bl	80062c8 <HAL_GetTick>
 800b12a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b12c:	e00a      	b.n	800b144 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b12e:	f7fb f8cb 	bl	80062c8 <HAL_GetTick>
 800b132:	4602      	mov	r2, r0
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d901      	bls.n	800b144 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	e135      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b144:	4b62      	ldr	r3, [pc, #392]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1ee      	bne.n	800b12e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 812a 	beq.w	800b3ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b15a:	4b5d      	ldr	r3, [pc, #372]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b162:	2b18      	cmp	r3, #24
 800b164:	f000 80ba 	beq.w	800b2dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	f040 8095 	bne.w	800b29c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b172:	4b57      	ldr	r3, [pc, #348]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a56      	ldr	r2, [pc, #344]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b17c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b17e:	f7fb f8a3 	bl	80062c8 <HAL_GetTick>
 800b182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b184:	e008      	b.n	800b198 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b186:	f7fb f89f 	bl	80062c8 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b02      	cmp	r3, #2
 800b192:	d901      	bls.n	800b198 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e10b      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b198:	4b4d      	ldr	r3, [pc, #308]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1f0      	bne.n	800b186 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b1a4:	4b4a      	ldr	r3, [pc, #296]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b1a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1a8:	4b4a      	ldr	r3, [pc, #296]	; (800b2d4 <HAL_RCC_OscConfig+0x6c8>)
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b1b4:	0112      	lsls	r2, r2, #4
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	4945      	ldr	r1, [pc, #276]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	628b      	str	r3, [r1, #40]	; 0x28
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	025b      	lsls	r3, r3, #9
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	041b      	lsls	r3, r3, #16
 800b1dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	061b      	lsls	r3, r3, #24
 800b1ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1ee:	4938      	ldr	r1, [pc, #224]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b1f4:	4b36      	ldr	r3, [pc, #216]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	4a35      	ldr	r2, [pc, #212]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b1fa:	f023 0301 	bic.w	r3, r3, #1
 800b1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b200:	4b33      	ldr	r3, [pc, #204]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b204:	4b34      	ldr	r3, [pc, #208]	; (800b2d8 <HAL_RCC_OscConfig+0x6cc>)
 800b206:	4013      	ands	r3, r2
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b20c:	00d2      	lsls	r2, r2, #3
 800b20e:	4930      	ldr	r1, [pc, #192]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b210:	4313      	orrs	r3, r2
 800b212:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b214:	4b2e      	ldr	r3, [pc, #184]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b218:	f023 020c 	bic.w	r2, r3, #12
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	492b      	ldr	r1, [pc, #172]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b222:	4313      	orrs	r3, r2
 800b224:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b226:	4b2a      	ldr	r3, [pc, #168]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	f023 0202 	bic.w	r2, r3, #2
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b232:	4927      	ldr	r1, [pc, #156]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b234:	4313      	orrs	r3, r2
 800b236:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b238:	4b25      	ldr	r3, [pc, #148]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a24      	ldr	r2, [pc, #144]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b23e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b244:	4b22      	ldr	r3, [pc, #136]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	4a21      	ldr	r2, [pc, #132]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b24a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b24e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b250:	4b1f      	ldr	r3, [pc, #124]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	4a1e      	ldr	r2, [pc, #120]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b25a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b25c:	4b1c      	ldr	r3, [pc, #112]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	4a1b      	ldr	r2, [pc, #108]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b262:	f043 0301 	orr.w	r3, r3, #1
 800b266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b268:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a18      	ldr	r2, [pc, #96]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b26e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b274:	f7fb f828 	bl	80062c8 <HAL_GetTick>
 800b278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b27c:	f7fb f824 	bl	80062c8 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e090      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b28e:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b296:	2b00      	cmp	r3, #0
 800b298:	d0f0      	beq.n	800b27c <HAL_RCC_OscConfig+0x670>
 800b29a:	e088      	b.n	800b3ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b29c:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a0b      	ldr	r2, [pc, #44]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b2a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2a8:	f7fb f80e 	bl	80062c8 <HAL_GetTick>
 800b2ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2ae:	e008      	b.n	800b2c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2b0:	f7fb f80a 	bl	80062c8 <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d901      	bls.n	800b2c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e076      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2c2:	4b03      	ldr	r3, [pc, #12]	; (800b2d0 <HAL_RCC_OscConfig+0x6c4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1f0      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x6a4>
 800b2ce:	e06e      	b.n	800b3ae <HAL_RCC_OscConfig+0x7a2>
 800b2d0:	58024400 	.word	0x58024400
 800b2d4:	fffffc0c 	.word	0xfffffc0c
 800b2d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b2dc:	4b36      	ldr	r3, [pc, #216]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b2e2:	4b35      	ldr	r3, [pc, #212]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d031      	beq.n	800b354 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f003 0203 	and.w	r2, r3, #3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d12a      	bne.n	800b354 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	091b      	lsrs	r3, r3, #4
 800b302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d122      	bne.n	800b354 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b318:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d11a      	bne.n	800b354 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	0a5b      	lsrs	r3, r3, #9
 800b322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d111      	bne.n	800b354 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	0c1b      	lsrs	r3, r3, #16
 800b334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b33e:	429a      	cmp	r2, r3
 800b340:	d108      	bne.n	800b354 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	0e1b      	lsrs	r3, r3, #24
 800b346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b350:	429a      	cmp	r2, r3
 800b352:	d001      	beq.n	800b358 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e02b      	b.n	800b3b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b358:	4b17      	ldr	r3, [pc, #92]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b35c:	08db      	lsrs	r3, r3, #3
 800b35e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b362:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d01f      	beq.n	800b3ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b36e:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b372:	4a11      	ldr	r2, [pc, #68]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b374:	f023 0301 	bic.w	r3, r3, #1
 800b378:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b37a:	f7fa ffa5 	bl	80062c8 <HAL_GetTick>
 800b37e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b380:	bf00      	nop
 800b382:	f7fa ffa1 	bl	80062c8 <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d0f9      	beq.n	800b382 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b38e:	4b0a      	ldr	r3, [pc, #40]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b392:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <HAL_RCC_OscConfig+0x7b0>)
 800b394:	4013      	ands	r3, r2
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b39a:	00d2      	lsls	r2, r2, #3
 800b39c:	4906      	ldr	r1, [pc, #24]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b3a2:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	4a04      	ldr	r2, [pc, #16]	; (800b3b8 <HAL_RCC_OscConfig+0x7ac>)
 800b3a8:	f043 0301 	orr.w	r3, r3, #1
 800b3ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3730      	adds	r7, #48	; 0x30
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	58024400 	.word	0x58024400
 800b3bc:	ffff0007 	.word	0xffff0007

0800b3c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e19c      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3d4:	4b8a      	ldr	r3, [pc, #552]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 030f 	and.w	r3, r3, #15
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d910      	bls.n	800b404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3e2:	4b87      	ldr	r3, [pc, #540]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f023 020f 	bic.w	r2, r3, #15
 800b3ea:	4985      	ldr	r1, [pc, #532]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3f2:	4b83      	ldr	r3, [pc, #524]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 030f 	and.w	r3, r3, #15
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d001      	beq.n	800b404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e184      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d010      	beq.n	800b432 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691a      	ldr	r2, [r3, #16]
 800b414:	4b7b      	ldr	r3, [pc, #492]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d908      	bls.n	800b432 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b420:	4b78      	ldr	r3, [pc, #480]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	4975      	ldr	r1, [pc, #468]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 0308 	and.w	r3, r3, #8
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d010      	beq.n	800b460 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	695a      	ldr	r2, [r3, #20]
 800b442:	4b70      	ldr	r3, [pc, #448]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d908      	bls.n	800b460 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b44e:	4b6d      	ldr	r3, [pc, #436]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	496a      	ldr	r1, [pc, #424]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0310 	and.w	r3, r3, #16
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d010      	beq.n	800b48e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699a      	ldr	r2, [r3, #24]
 800b470:	4b64      	ldr	r3, [pc, #400]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b478:	429a      	cmp	r2, r3
 800b47a:	d908      	bls.n	800b48e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b47c:	4b61      	ldr	r3, [pc, #388]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	495e      	ldr	r1, [pc, #376]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	d010      	beq.n	800b4bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69da      	ldr	r2, [r3, #28]
 800b49e:	4b59      	ldr	r3, [pc, #356]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d908      	bls.n	800b4bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b4aa:	4b56      	ldr	r3, [pc, #344]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	4953      	ldr	r1, [pc, #332]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 0302 	and.w	r3, r3, #2
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d010      	beq.n	800b4ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	4b4d      	ldr	r3, [pc, #308]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	f003 030f 	and.w	r3, r3, #15
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d908      	bls.n	800b4ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4d8:	4b4a      	ldr	r3, [pc, #296]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	f023 020f 	bic.w	r2, r3, #15
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	4947      	ldr	r1, [pc, #284]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d055      	beq.n	800b5a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b4f6:	4b43      	ldr	r3, [pc, #268]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	4940      	ldr	r1, [pc, #256]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b504:	4313      	orrs	r3, r2
 800b506:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d107      	bne.n	800b520 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b510:	4b3c      	ldr	r3, [pc, #240]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d121      	bne.n	800b560 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e0f6      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	2b03      	cmp	r3, #3
 800b526:	d107      	bne.n	800b538 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b528:	4b36      	ldr	r3, [pc, #216]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d115      	bne.n	800b560 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e0ea      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d107      	bne.n	800b550 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b540:	4b30      	ldr	r3, [pc, #192]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d109      	bne.n	800b560 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	e0de      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b550:	4b2c      	ldr	r3, [pc, #176]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0304 	and.w	r3, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e0d6      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	f023 0207 	bic.w	r2, r3, #7
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	4925      	ldr	r1, [pc, #148]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b56e:	4313      	orrs	r3, r2
 800b570:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b572:	f7fa fea9 	bl	80062c8 <HAL_GetTick>
 800b576:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b578:	e00a      	b.n	800b590 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b57a:	f7fa fea5 	bl	80062c8 <HAL_GetTick>
 800b57e:	4602      	mov	r2, r0
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	f241 3288 	movw	r2, #5000	; 0x1388
 800b588:	4293      	cmp	r3, r2
 800b58a:	d901      	bls.n	800b590 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e0be      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b590:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d1eb      	bne.n	800b57a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0302 	and.w	r3, r3, #2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d010      	beq.n	800b5d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68da      	ldr	r2, [r3, #12]
 800b5b2:	4b14      	ldr	r3, [pc, #80]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	f003 030f 	and.w	r3, r3, #15
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d208      	bcs.n	800b5d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5be:	4b11      	ldr	r3, [pc, #68]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	f023 020f 	bic.w	r2, r3, #15
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	490e      	ldr	r1, [pc, #56]	; (800b604 <HAL_RCC_ClockConfig+0x244>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5d0:	4b0b      	ldr	r3, [pc, #44]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d214      	bcs.n	800b608 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5de:	4b08      	ldr	r3, [pc, #32]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f023 020f 	bic.w	r2, r3, #15
 800b5e6:	4906      	ldr	r1, [pc, #24]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5ee:	4b04      	ldr	r3, [pc, #16]	; (800b600 <HAL_RCC_ClockConfig+0x240>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 030f 	and.w	r3, r3, #15
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d005      	beq.n	800b608 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e086      	b.n	800b70e <HAL_RCC_ClockConfig+0x34e>
 800b600:	52002000 	.word	0x52002000
 800b604:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b00      	cmp	r3, #0
 800b612:	d010      	beq.n	800b636 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	691a      	ldr	r2, [r3, #16]
 800b618:	4b3f      	ldr	r3, [pc, #252]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b620:	429a      	cmp	r2, r3
 800b622:	d208      	bcs.n	800b636 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b624:	4b3c      	ldr	r3, [pc, #240]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	4939      	ldr	r1, [pc, #228]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b632:	4313      	orrs	r3, r2
 800b634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0308 	and.w	r3, r3, #8
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d010      	beq.n	800b664 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	695a      	ldr	r2, [r3, #20]
 800b646:	4b34      	ldr	r3, [pc, #208]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b648:	69db      	ldr	r3, [r3, #28]
 800b64a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b64e:	429a      	cmp	r2, r3
 800b650:	d208      	bcs.n	800b664 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b652:	4b31      	ldr	r3, [pc, #196]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	492e      	ldr	r1, [pc, #184]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b660:	4313      	orrs	r3, r2
 800b662:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 0310 	and.w	r3, r3, #16
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d010      	beq.n	800b692 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	4b28      	ldr	r3, [pc, #160]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b676:	69db      	ldr	r3, [r3, #28]
 800b678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d208      	bcs.n	800b692 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b680:	4b25      	ldr	r3, [pc, #148]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b682:	69db      	ldr	r3, [r3, #28]
 800b684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	4922      	ldr	r1, [pc, #136]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b68e:	4313      	orrs	r3, r2
 800b690:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 0320 	and.w	r3, r3, #32
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d010      	beq.n	800b6c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	69da      	ldr	r2, [r3, #28]
 800b6a2:	4b1d      	ldr	r3, [pc, #116]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d208      	bcs.n	800b6c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b6ae:	4b1a      	ldr	r3, [pc, #104]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	4917      	ldr	r1, [pc, #92]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6c0:	f000 f834 	bl	800b72c <HAL_RCC_GetSysClockFreq>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	4b14      	ldr	r3, [pc, #80]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	0a1b      	lsrs	r3, r3, #8
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	4912      	ldr	r1, [pc, #72]	; (800b71c <HAL_RCC_ClockConfig+0x35c>)
 800b6d2:	5ccb      	ldrb	r3, [r1, r3]
 800b6d4:	f003 031f 	and.w	r3, r3, #31
 800b6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6de:	4b0e      	ldr	r3, [pc, #56]	; (800b718 <HAL_RCC_ClockConfig+0x358>)
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	f003 030f 	and.w	r3, r3, #15
 800b6e6:	4a0d      	ldr	r2, [pc, #52]	; (800b71c <HAL_RCC_ClockConfig+0x35c>)
 800b6e8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ea:	f003 031f 	and.w	r3, r3, #31
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6f4:	4a0a      	ldr	r2, [pc, #40]	; (800b720 <HAL_RCC_ClockConfig+0x360>)
 800b6f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6f8:	4a0a      	ldr	r2, [pc, #40]	; (800b724 <HAL_RCC_ClockConfig+0x364>)
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b6fe:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <HAL_RCC_ClockConfig+0x368>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f7fa f9c4 	bl	8005a90 <HAL_InitTick>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	58024400 	.word	0x58024400
 800b71c:	0802a44c 	.word	0x0802a44c
 800b720:	240003a8 	.word	0x240003a8
 800b724:	240003a4 	.word	0x240003a4
 800b728:	240003ac 	.word	0x240003ac

0800b72c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b089      	sub	sp, #36	; 0x24
 800b730:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b732:	4bb3      	ldr	r3, [pc, #716]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b73a:	2b18      	cmp	r3, #24
 800b73c:	f200 8155 	bhi.w	800b9ea <HAL_RCC_GetSysClockFreq+0x2be>
 800b740:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b746:	bf00      	nop
 800b748:	0800b7ad 	.word	0x0800b7ad
 800b74c:	0800b9eb 	.word	0x0800b9eb
 800b750:	0800b9eb 	.word	0x0800b9eb
 800b754:	0800b9eb 	.word	0x0800b9eb
 800b758:	0800b9eb 	.word	0x0800b9eb
 800b75c:	0800b9eb 	.word	0x0800b9eb
 800b760:	0800b9eb 	.word	0x0800b9eb
 800b764:	0800b9eb 	.word	0x0800b9eb
 800b768:	0800b7d3 	.word	0x0800b7d3
 800b76c:	0800b9eb 	.word	0x0800b9eb
 800b770:	0800b9eb 	.word	0x0800b9eb
 800b774:	0800b9eb 	.word	0x0800b9eb
 800b778:	0800b9eb 	.word	0x0800b9eb
 800b77c:	0800b9eb 	.word	0x0800b9eb
 800b780:	0800b9eb 	.word	0x0800b9eb
 800b784:	0800b9eb 	.word	0x0800b9eb
 800b788:	0800b7d9 	.word	0x0800b7d9
 800b78c:	0800b9eb 	.word	0x0800b9eb
 800b790:	0800b9eb 	.word	0x0800b9eb
 800b794:	0800b9eb 	.word	0x0800b9eb
 800b798:	0800b9eb 	.word	0x0800b9eb
 800b79c:	0800b9eb 	.word	0x0800b9eb
 800b7a0:	0800b9eb 	.word	0x0800b9eb
 800b7a4:	0800b9eb 	.word	0x0800b9eb
 800b7a8:	0800b7df 	.word	0x0800b7df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7ac:	4b94      	ldr	r3, [pc, #592]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 0320 	and.w	r3, r3, #32
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d009      	beq.n	800b7cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7b8:	4b91      	ldr	r3, [pc, #580]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	08db      	lsrs	r3, r3, #3
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	4a90      	ldr	r2, [pc, #576]	; (800ba04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b7ca:	e111      	b.n	800b9f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b7cc:	4b8d      	ldr	r3, [pc, #564]	; (800ba04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7ce:	61bb      	str	r3, [r7, #24]
      break;
 800b7d0:	e10e      	b.n	800b9f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b7d2:	4b8d      	ldr	r3, [pc, #564]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7d4:	61bb      	str	r3, [r7, #24]
      break;
 800b7d6:	e10b      	b.n	800b9f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b7d8:	4b8c      	ldr	r3, [pc, #560]	; (800ba0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b7da:	61bb      	str	r3, [r7, #24]
      break;
 800b7dc:	e108      	b.n	800b9f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7de:	4b88      	ldr	r3, [pc, #544]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e2:	f003 0303 	and.w	r3, r3, #3
 800b7e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b7e8:	4b85      	ldr	r3, [pc, #532]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ec:	091b      	lsrs	r3, r3, #4
 800b7ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b7f4:	4b82      	ldr	r3, [pc, #520]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b7fe:	4b80      	ldr	r3, [pc, #512]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b802:	08db      	lsrs	r3, r3, #3
 800b804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	fb02 f303 	mul.w	r3, r2, r3
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b816:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 80e1 	beq.w	800b9e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2b02      	cmp	r3, #2
 800b826:	f000 8083 	beq.w	800b930 <HAL_RCC_GetSysClockFreq+0x204>
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	f200 80a1 	bhi.w	800b974 <HAL_RCC_GetSysClockFreq+0x248>
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <HAL_RCC_GetSysClockFreq+0x114>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d056      	beq.n	800b8ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800b83e:	e099      	b.n	800b974 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b840:	4b6f      	ldr	r3, [pc, #444]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0320 	and.w	r3, r3, #32
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d02d      	beq.n	800b8a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b84c:	4b6c      	ldr	r3, [pc, #432]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	08db      	lsrs	r3, r3, #3
 800b852:	f003 0303 	and.w	r3, r3, #3
 800b856:	4a6b      	ldr	r2, [pc, #428]	; (800ba04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b858:	fa22 f303 	lsr.w	r3, r2, r3
 800b85c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	ee07 3a90 	vmov	s15, r3
 800b864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b876:	4b62      	ldr	r3, [pc, #392]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87e:	ee07 3a90 	vmov	s15, r3
 800b882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b886:	ed97 6a02 	vldr	s12, [r7, #8]
 800b88a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ba10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b8a6:	e087      	b.n	800b9b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	ee07 3a90 	vmov	s15, r3
 800b8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ba14 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ba:	4b51      	ldr	r3, [pc, #324]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c2:	ee07 3a90 	vmov	s15, r3
 800b8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ba10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8ea:	e065      	b.n	800b9b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ba18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8fe:	4b40      	ldr	r3, [pc, #256]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b906:	ee07 3a90 	vmov	s15, r3
 800b90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b90e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b912:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ba10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b91e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b92a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b92e:	e043      	b.n	800b9b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b93a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ba1c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b942:	4b2f      	ldr	r3, [pc, #188]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b952:	ed97 6a02 	vldr	s12, [r7, #8]
 800b956:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ba10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b96e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b972:	e021      	b.n	800b9b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	ee07 3a90 	vmov	s15, r3
 800b97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b97e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ba18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b986:	4b1e      	ldr	r3, [pc, #120]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b996:	ed97 6a02 	vldr	s12, [r7, #8]
 800b99a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ba10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b9b8:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	0a5b      	lsrs	r3, r3, #9
 800b9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9dc:	ee17 3a90 	vmov	r3, s15
 800b9e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b9e2:	e005      	b.n	800b9f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	61bb      	str	r3, [r7, #24]
      break;
 800b9e8:	e002      	b.n	800b9f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b9ea:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b9ec:	61bb      	str	r3, [r7, #24]
      break;
 800b9ee:	bf00      	nop
  }

  return sysclockfreq;
 800b9f0:	69bb      	ldr	r3, [r7, #24]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3724      	adds	r7, #36	; 0x24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	03d09000 	.word	0x03d09000
 800ba08:	003d0900 	.word	0x003d0900
 800ba0c:	017d7840 	.word	0x017d7840
 800ba10:	46000000 	.word	0x46000000
 800ba14:	4c742400 	.word	0x4c742400
 800ba18:	4a742400 	.word	0x4a742400
 800ba1c:	4bbebc20 	.word	0x4bbebc20

0800ba20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba26:	f7ff fe81 	bl	800b72c <HAL_RCC_GetSysClockFreq>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	4b10      	ldr	r3, [pc, #64]	; (800ba70 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	0a1b      	lsrs	r3, r3, #8
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	490f      	ldr	r1, [pc, #60]	; (800ba74 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba38:	5ccb      	ldrb	r3, [r1, r3]
 800ba3a:	f003 031f 	and.w	r3, r3, #31
 800ba3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba44:	4b0a      	ldr	r3, [pc, #40]	; (800ba70 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	f003 030f 	and.w	r3, r3, #15
 800ba4c:	4a09      	ldr	r2, [pc, #36]	; (800ba74 <HAL_RCC_GetHCLKFreq+0x54>)
 800ba4e:	5cd3      	ldrb	r3, [r2, r3]
 800ba50:	f003 031f 	and.w	r3, r3, #31
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5a:	4a07      	ldr	r2, [pc, #28]	; (800ba78 <HAL_RCC_GetHCLKFreq+0x58>)
 800ba5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba5e:	4a07      	ldr	r2, [pc, #28]	; (800ba7c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ba64:	4b04      	ldr	r3, [pc, #16]	; (800ba78 <HAL_RCC_GetHCLKFreq+0x58>)
 800ba66:	681b      	ldr	r3, [r3, #0]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	58024400 	.word	0x58024400
 800ba74:	0802a44c 	.word	0x0802a44c
 800ba78:	240003a8 	.word	0x240003a8
 800ba7c:	240003a4 	.word	0x240003a4

0800ba80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ba84:	f7ff ffcc 	bl	800ba20 <HAL_RCC_GetHCLKFreq>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	4b06      	ldr	r3, [pc, #24]	; (800baa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	091b      	lsrs	r3, r3, #4
 800ba90:	f003 0307 	and.w	r3, r3, #7
 800ba94:	4904      	ldr	r1, [pc, #16]	; (800baa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba96:	5ccb      	ldrb	r3, [r1, r3]
 800ba98:	f003 031f 	and.w	r3, r3, #31
 800ba9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	58024400 	.word	0x58024400
 800baa8:	0802a44c 	.word	0x0802a44c

0800baac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	223f      	movs	r2, #63	; 0x3f
 800baba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800babc:	4b1a      	ldr	r3, [pc, #104]	; (800bb28 <HAL_RCC_GetClockConfig+0x7c>)
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	f003 0207 	and.w	r2, r3, #7
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800bac8:	4b17      	ldr	r3, [pc, #92]	; (800bb28 <HAL_RCC_GetClockConfig+0x7c>)
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800bad4:	4b14      	ldr	r3, [pc, #80]	; (800bb28 <HAL_RCC_GetClockConfig+0x7c>)
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	f003 020f 	and.w	r2, r3, #15
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800bae0:	4b11      	ldr	r3, [pc, #68]	; (800bb28 <HAL_RCC_GetClockConfig+0x7c>)
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800baec:	4b0e      	ldr	r3, [pc, #56]	; (800bb28 <HAL_RCC_GetClockConfig+0x7c>)
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800baf8:	4b0b      	ldr	r3, [pc, #44]	; (800bb28 <HAL_RCC_GetClockConfig+0x7c>)
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800bb04:	4b08      	ldr	r3, [pc, #32]	; (800bb28 <HAL_RCC_GetClockConfig+0x7c>)
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bb10:	4b06      	ldr	r3, [pc, #24]	; (800bb2c <HAL_RCC_GetClockConfig+0x80>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 020f 	and.w	r2, r3, #15
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	601a      	str	r2, [r3, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	58024400 	.word	0x58024400
 800bb2c:	52002000 	.word	0x52002000

0800bb30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb34:	b0c6      	sub	sp, #280	; 0x118
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bb42:	2300      	movs	r3, #0
 800bb44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800bb54:	2500      	movs	r5, #0
 800bb56:	ea54 0305 	orrs.w	r3, r4, r5
 800bb5a:	d049      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb66:	d02f      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bb68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb6c:	d828      	bhi.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb72:	d01a      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bb74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb78:	d822      	bhi.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bb7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb82:	d007      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bb84:	e01c      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb86:	4bab      	ldr	r3, [pc, #684]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	4aaa      	ldr	r2, [pc, #680]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb92:	e01a      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb98:	3308      	adds	r3, #8
 800bb9a:	2102      	movs	r1, #2
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f002 fa49 	bl	800e034 <RCCEx_PLL2_Config>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bba8:	e00f      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbae:	3328      	adds	r3, #40	; 0x28
 800bbb0:	2102      	movs	r1, #2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f002 faf0 	bl	800e198 <RCCEx_PLL3_Config>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bbbe:	e004      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbc6:	e000      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bbc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bbd2:	4b98      	ldr	r3, [pc, #608]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bbda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbe0:	4a94      	ldr	r2, [pc, #592]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbe2:	430b      	orrs	r3, r1
 800bbe4:	6513      	str	r3, [r2, #80]	; 0x50
 800bbe6:	e003      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800bbfc:	f04f 0900 	mov.w	r9, #0
 800bc00:	ea58 0309 	orrs.w	r3, r8, r9
 800bc04:	d047      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bc06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0c:	2b04      	cmp	r3, #4
 800bc0e:	d82a      	bhi.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bc10:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc16:	bf00      	nop
 800bc18:	0800bc2d 	.word	0x0800bc2d
 800bc1c:	0800bc3b 	.word	0x0800bc3b
 800bc20:	0800bc51 	.word	0x0800bc51
 800bc24:	0800bc6f 	.word	0x0800bc6f
 800bc28:	0800bc6f 	.word	0x0800bc6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc2c:	4b81      	ldr	r3, [pc, #516]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	4a80      	ldr	r2, [pc, #512]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc38:	e01a      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3e:	3308      	adds	r3, #8
 800bc40:	2100      	movs	r1, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f002 f9f6 	bl	800e034 <RCCEx_PLL2_Config>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc4e:	e00f      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc54:	3328      	adds	r3, #40	; 0x28
 800bc56:	2100      	movs	r1, #0
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f002 fa9d 	bl	800e198 <RCCEx_PLL3_Config>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc64:	e004      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc6c:	e000      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bc6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc78:	4b6e      	ldr	r3, [pc, #440]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7c:	f023 0107 	bic.w	r1, r3, #7
 800bc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc86:	4a6b      	ldr	r2, [pc, #428]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc88:	430b      	orrs	r3, r1
 800bc8a:	6513      	str	r3, [r2, #80]	; 0x50
 800bc8c:	e003      	b.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800bca2:	f04f 0b00 	mov.w	fp, #0
 800bca6:	ea5a 030b 	orrs.w	r3, sl, fp
 800bcaa:	d05b      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcb4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bcb8:	d03b      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bcba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bcbe:	d834      	bhi.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bcc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcc4:	d037      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bcc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcca:	d82e      	bhi.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bccc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bcd0:	d033      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bcd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bcd6:	d828      	bhi.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bcd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcdc:	d01a      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bcde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bce2:	d822      	bhi.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcec:	d007      	beq.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bcee:	e01c      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcf0:	4b50      	ldr	r3, [pc, #320]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf4:	4a4f      	ldr	r2, [pc, #316]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bcf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bcfc:	e01e      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd02:	3308      	adds	r3, #8
 800bd04:	2100      	movs	r1, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f002 f994 	bl	800e034 <RCCEx_PLL2_Config>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bd12:	e013      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd18:	3328      	adds	r3, #40	; 0x28
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f002 fa3b 	bl	800e198 <RCCEx_PLL3_Config>
 800bd22:	4603      	mov	r3, r0
 800bd24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd28:	e008      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd30:	e004      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bd32:	bf00      	nop
 800bd34:	e002      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bd36:	bf00      	nop
 800bd38:	e000      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bd3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10b      	bne.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bd44:	4b3b      	ldr	r3, [pc, #236]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd48:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd54:	4a37      	ldr	r2, [pc, #220]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd56:	430b      	orrs	r3, r1
 800bd58:	6593      	str	r3, [r2, #88]	; 0x58
 800bd5a:	e003      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800bd70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bd74:	2300      	movs	r3, #0
 800bd76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800bd7e:	460b      	mov	r3, r1
 800bd80:	4313      	orrs	r3, r2
 800bd82:	d05d      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bd8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bd90:	d03b      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bd92:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bd96:	d834      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd9c:	d037      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bd9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bda2:	d82e      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bda4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bda8:	d033      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bdaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bdae:	d828      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bdb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdb4:	d01a      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bdb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdba:	d822      	bhi.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bdc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdc4:	d007      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bdc6:	e01c      	b.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdc8:	4b1a      	ldr	r3, [pc, #104]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	4a19      	ldr	r2, [pc, #100]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bdd4:	e01e      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdda:	3308      	adds	r3, #8
 800bddc:	2100      	movs	r1, #0
 800bdde:	4618      	mov	r0, r3
 800bde0:	f002 f928 	bl	800e034 <RCCEx_PLL2_Config>
 800bde4:	4603      	mov	r3, r0
 800bde6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bdea:	e013      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf0:	3328      	adds	r3, #40	; 0x28
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f002 f9cf 	bl	800e198 <RCCEx_PLL3_Config>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800be00:	e008      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be08:	e004      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800be0a:	bf00      	nop
 800be0c:	e002      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800be0e:	bf00      	nop
 800be10:	e000      	b.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800be12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10d      	bne.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800be1c:	4b05      	ldr	r3, [pc, #20]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be20:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800be24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800be2c:	4a01      	ldr	r2, [pc, #4]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be2e:	430b      	orrs	r3, r1
 800be30:	6593      	str	r3, [r2, #88]	; 0x58
 800be32:	e005      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800be34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800be40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800be4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800be50:	2300      	movs	r3, #0
 800be52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800be56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4313      	orrs	r3, r2
 800be5e:	d03a      	beq.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800be60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be66:	2b30      	cmp	r3, #48	; 0x30
 800be68:	d01f      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800be6a:	2b30      	cmp	r3, #48	; 0x30
 800be6c:	d819      	bhi.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d00c      	beq.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800be72:	2b20      	cmp	r3, #32
 800be74:	d815      	bhi.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800be76:	2b00      	cmp	r3, #0
 800be78:	d019      	beq.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800be7a:	2b10      	cmp	r3, #16
 800be7c:	d111      	bne.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be7e:	4baa      	ldr	r3, [pc, #680]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be82:	4aa9      	ldr	r2, [pc, #676]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be8a:	e011      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be90:	3308      	adds	r3, #8
 800be92:	2102      	movs	r1, #2
 800be94:	4618      	mov	r0, r3
 800be96:	f002 f8cd 	bl	800e034 <RCCEx_PLL2_Config>
 800be9a:	4603      	mov	r3, r0
 800be9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bea0:	e006      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bea8:	e002      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800beaa:	bf00      	nop
 800beac:	e000      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800beae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800beb8:	4b9b      	ldr	r3, [pc, #620]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800beba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bebc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec6:	4a98      	ldr	r2, [pc, #608]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bec8:	430b      	orrs	r3, r1
 800beca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800becc:	e003      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bece:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bed2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bee6:	2300      	movs	r3, #0
 800bee8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800beec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bef0:	460b      	mov	r3, r1
 800bef2:	4313      	orrs	r3, r2
 800bef4:	d051      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800befa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800befc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf00:	d035      	beq.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bf02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf06:	d82e      	bhi.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bf08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf0c:	d031      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bf0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf12:	d828      	bhi.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bf14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf18:	d01a      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bf1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf1e:	d822      	bhi.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d003      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bf24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf28:	d007      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bf2a:	e01c      	b.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf2c:	4b7e      	ldr	r3, [pc, #504]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	4a7d      	ldr	r2, [pc, #500]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf38:	e01c      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3e:	3308      	adds	r3, #8
 800bf40:	2100      	movs	r1, #0
 800bf42:	4618      	mov	r0, r3
 800bf44:	f002 f876 	bl	800e034 <RCCEx_PLL2_Config>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf4e:	e011      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf54:	3328      	adds	r3, #40	; 0x28
 800bf56:	2100      	movs	r1, #0
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f002 f91d 	bl	800e198 <RCCEx_PLL3_Config>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf64:	e006      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf6c:	e002      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bf6e:	bf00      	nop
 800bf70:	e000      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bf72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10a      	bne.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf7c:	4b6a      	ldr	r3, [pc, #424]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bf84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf8a:	4a67      	ldr	r2, [pc, #412]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	6513      	str	r3, [r2, #80]	; 0x50
 800bf90:	e003      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bfa6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bfb0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	d053      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfc4:	d033      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bfc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bfca:	d82c      	bhi.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bfcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfd0:	d02f      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bfd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bfd6:	d826      	bhi.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bfd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfdc:	d02b      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bfde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfe2:	d820      	bhi.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bfe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfe8:	d012      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bfea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfee:	d81a      	bhi.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d022      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff8:	d115      	bne.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bffe:	3308      	adds	r3, #8
 800c000:	2101      	movs	r1, #1
 800c002:	4618      	mov	r0, r3
 800c004:	f002 f816 	bl	800e034 <RCCEx_PLL2_Config>
 800c008:	4603      	mov	r3, r0
 800c00a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c00e:	e015      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c014:	3328      	adds	r3, #40	; 0x28
 800c016:	2101      	movs	r1, #1
 800c018:	4618      	mov	r0, r3
 800c01a:	f002 f8bd 	bl	800e198 <RCCEx_PLL3_Config>
 800c01e:	4603      	mov	r3, r0
 800c020:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c024:	e00a      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c02c:	e006      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c02e:	bf00      	nop
 800c030:	e004      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c032:	bf00      	nop
 800c034:	e002      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c036:	bf00      	nop
 800c038:	e000      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c03a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c03c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10a      	bne.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c044:	4b38      	ldr	r3, [pc, #224]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c048:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c052:	4a35      	ldr	r2, [pc, #212]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c054:	430b      	orrs	r3, r1
 800c056:	6513      	str	r3, [r2, #80]	; 0x50
 800c058:	e003      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c05e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c06e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c072:	2300      	movs	r3, #0
 800c074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c078:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c07c:	460b      	mov	r3, r1
 800c07e:	4313      	orrs	r3, r2
 800c080:	d058      	beq.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c08a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c08e:	d033      	beq.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c094:	d82c      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c09a:	d02f      	beq.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c09c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a0:	d826      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c0a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0a6:	d02b      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c0a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0ac:	d820      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c0ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0b2:	d012      	beq.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c0b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0b8:	d81a      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d022      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c0be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0c2:	d115      	bne.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f001 ffb1 	bl	800e034 <RCCEx_PLL2_Config>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c0d8:	e015      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0de:	3328      	adds	r3, #40	; 0x28
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f002 f858 	bl	800e198 <RCCEx_PLL3_Config>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c0ee:	e00a      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c0f6:	e006      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0f8:	bf00      	nop
 800c0fa:	e004      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c0fc:	bf00      	nop
 800c0fe:	e002      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c100:	bf00      	nop
 800c102:	e000      	b.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c104:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c106:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10e      	bne.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c10e:	4b06      	ldr	r3, [pc, #24]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c112:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c11e:	4a02      	ldr	r2, [pc, #8]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c120:	430b      	orrs	r3, r1
 800c122:	6593      	str	r3, [r2, #88]	; 0x58
 800c124:	e006      	b.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c126:	bf00      	nop
 800c128:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c130:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c144:	2300      	movs	r3, #0
 800c146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c14a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c14e:	460b      	mov	r3, r1
 800c150:	4313      	orrs	r3, r2
 800c152:	d037      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c15e:	d00e      	beq.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c164:	d816      	bhi.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c166:	2b00      	cmp	r3, #0
 800c168:	d018      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c16a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c16e:	d111      	bne.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c170:	4bc4      	ldr	r3, [pc, #784]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	4ac3      	ldr	r2, [pc, #780]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c17a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c17c:	e00f      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c182:	3308      	adds	r3, #8
 800c184:	2101      	movs	r1, #1
 800c186:	4618      	mov	r0, r3
 800c188:	f001 ff54 	bl	800e034 <RCCEx_PLL2_Config>
 800c18c:	4603      	mov	r3, r0
 800c18e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c192:	e004      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c19a:	e000      	b.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c19c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c19e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10a      	bne.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c1a6:	4bb7      	ldr	r3, [pc, #732]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b4:	4ab3      	ldr	r2, [pc, #716]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1b6:	430b      	orrs	r3, r1
 800c1b8:	6513      	str	r3, [r2, #80]	; 0x50
 800c1ba:	e003      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c1d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c1da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	d039      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d81c      	bhi.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c1ee:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c231 	.word	0x0800c231
 800c1f8:	0800c205 	.word	0x0800c205
 800c1fc:	0800c213 	.word	0x0800c213
 800c200:	0800c231 	.word	0x0800c231
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c204:	4b9f      	ldr	r3, [pc, #636]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c208:	4a9e      	ldr	r2, [pc, #632]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c20a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c20e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c210:	e00f      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c216:	3308      	adds	r3, #8
 800c218:	2102      	movs	r1, #2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f001 ff0a 	bl	800e034 <RCCEx_PLL2_Config>
 800c220:	4603      	mov	r3, r0
 800c222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c226:	e004      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c22e:	e000      	b.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c230:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10a      	bne.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c23a:	4b92      	ldr	r3, [pc, #584]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c23e:	f023 0103 	bic.w	r1, r3, #3
 800c242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c248:	4a8e      	ldr	r2, [pc, #568]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c24a:	430b      	orrs	r3, r1
 800c24c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c24e:	e003      	b.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c250:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c254:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c268:	2300      	movs	r3, #0
 800c26a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c26e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c272:	460b      	mov	r3, r1
 800c274:	4313      	orrs	r3, r2
 800c276:	f000 8099 	beq.w	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c27a:	4b83      	ldr	r3, [pc, #524]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a82      	ldr	r2, [pc, #520]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c286:	f7fa f81f 	bl	80062c8 <HAL_GetTick>
 800c28a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c28e:	e00b      	b.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c290:	f7fa f81a 	bl	80062c8 <HAL_GetTick>
 800c294:	4602      	mov	r2, r0
 800c296:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	2b64      	cmp	r3, #100	; 0x64
 800c29e:	d903      	bls.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c2a6:	e005      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2a8:	4b77      	ldr	r3, [pc, #476]	; (800c488 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d0ed      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c2b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d173      	bne.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c2bc:	4b71      	ldr	r3, [pc, #452]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c2c8:	4053      	eors	r3, r2
 800c2ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d015      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c2d2:	4b6c      	ldr	r3, [pc, #432]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2de:	4b69      	ldr	r3, [pc, #420]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e2:	4a68      	ldr	r2, [pc, #416]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c2ea:	4b66      	ldr	r3, [pc, #408]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ee:	4a65      	ldr	r2, [pc, #404]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c2f6:	4a63      	ldr	r2, [pc, #396]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30a:	d118      	bne.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c30c:	f7f9 ffdc 	bl	80062c8 <HAL_GetTick>
 800c310:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c314:	e00d      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c316:	f7f9 ffd7 	bl	80062c8 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c320:	1ad2      	subs	r2, r2, r3
 800c322:	f241 3388 	movw	r3, #5000	; 0x1388
 800c326:	429a      	cmp	r2, r3
 800c328:	d903      	bls.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c32a:	2303      	movs	r3, #3
 800c32c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800c330:	e005      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c332:	4b54      	ldr	r3, [pc, #336]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c336:	f003 0302 	and.w	r3, r3, #2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0eb      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c33e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c342:	2b00      	cmp	r3, #0
 800c344:	d129      	bne.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c34a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c356:	d10e      	bne.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c358:	4b4a      	ldr	r3, [pc, #296]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c368:	091a      	lsrs	r2, r3, #4
 800c36a:	4b48      	ldr	r3, [pc, #288]	; (800c48c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c36c:	4013      	ands	r3, r2
 800c36e:	4a45      	ldr	r2, [pc, #276]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c370:	430b      	orrs	r3, r1
 800c372:	6113      	str	r3, [r2, #16]
 800c374:	e005      	b.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c376:	4b43      	ldr	r3, [pc, #268]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	4a42      	ldr	r2, [pc, #264]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c37c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c380:	6113      	str	r3, [r2, #16]
 800c382:	4b40      	ldr	r3, [pc, #256]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c384:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c38e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c392:	4a3c      	ldr	r2, [pc, #240]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c394:	430b      	orrs	r3, r1
 800c396:	6713      	str	r3, [r2, #112]	; 0x70
 800c398:	e008      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c39a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c39e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800c3a2:	e003      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	f002 0301 	and.w	r3, r2, #1
 800c3b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c3c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	f000 808f 	beq.w	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3d4:	2b28      	cmp	r3, #40	; 0x28
 800c3d6:	d871      	bhi.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c3d8:	a201      	add	r2, pc, #4	; (adr r2, 800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3de:	bf00      	nop
 800c3e0:	0800c4c5 	.word	0x0800c4c5
 800c3e4:	0800c4bd 	.word	0x0800c4bd
 800c3e8:	0800c4bd 	.word	0x0800c4bd
 800c3ec:	0800c4bd 	.word	0x0800c4bd
 800c3f0:	0800c4bd 	.word	0x0800c4bd
 800c3f4:	0800c4bd 	.word	0x0800c4bd
 800c3f8:	0800c4bd 	.word	0x0800c4bd
 800c3fc:	0800c4bd 	.word	0x0800c4bd
 800c400:	0800c491 	.word	0x0800c491
 800c404:	0800c4bd 	.word	0x0800c4bd
 800c408:	0800c4bd 	.word	0x0800c4bd
 800c40c:	0800c4bd 	.word	0x0800c4bd
 800c410:	0800c4bd 	.word	0x0800c4bd
 800c414:	0800c4bd 	.word	0x0800c4bd
 800c418:	0800c4bd 	.word	0x0800c4bd
 800c41c:	0800c4bd 	.word	0x0800c4bd
 800c420:	0800c4a7 	.word	0x0800c4a7
 800c424:	0800c4bd 	.word	0x0800c4bd
 800c428:	0800c4bd 	.word	0x0800c4bd
 800c42c:	0800c4bd 	.word	0x0800c4bd
 800c430:	0800c4bd 	.word	0x0800c4bd
 800c434:	0800c4bd 	.word	0x0800c4bd
 800c438:	0800c4bd 	.word	0x0800c4bd
 800c43c:	0800c4bd 	.word	0x0800c4bd
 800c440:	0800c4c5 	.word	0x0800c4c5
 800c444:	0800c4bd 	.word	0x0800c4bd
 800c448:	0800c4bd 	.word	0x0800c4bd
 800c44c:	0800c4bd 	.word	0x0800c4bd
 800c450:	0800c4bd 	.word	0x0800c4bd
 800c454:	0800c4bd 	.word	0x0800c4bd
 800c458:	0800c4bd 	.word	0x0800c4bd
 800c45c:	0800c4bd 	.word	0x0800c4bd
 800c460:	0800c4c5 	.word	0x0800c4c5
 800c464:	0800c4bd 	.word	0x0800c4bd
 800c468:	0800c4bd 	.word	0x0800c4bd
 800c46c:	0800c4bd 	.word	0x0800c4bd
 800c470:	0800c4bd 	.word	0x0800c4bd
 800c474:	0800c4bd 	.word	0x0800c4bd
 800c478:	0800c4bd 	.word	0x0800c4bd
 800c47c:	0800c4bd 	.word	0x0800c4bd
 800c480:	0800c4c5 	.word	0x0800c4c5
 800c484:	58024400 	.word	0x58024400
 800c488:	58024800 	.word	0x58024800
 800c48c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c494:	3308      	adds	r3, #8
 800c496:	2101      	movs	r1, #1
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 fdcb 	bl	800e034 <RCCEx_PLL2_Config>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c4a4:	e00f      	b.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4aa:	3328      	adds	r3, #40	; 0x28
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f001 fe72 	bl	800e198 <RCCEx_PLL3_Config>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c4ba:	e004      	b.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c4c2:	e000      	b.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c4c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10a      	bne.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c4ce:	4bbf      	ldr	r3, [pc, #764]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4dc:	4abb      	ldr	r2, [pc, #748]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	6553      	str	r3, [r2, #84]	; 0x54
 800c4e2:	e003      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	f002 0302 	and.w	r3, r2, #2
 800c4f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c502:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c506:	460b      	mov	r3, r1
 800c508:	4313      	orrs	r3, r2
 800c50a:	d041      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c512:	2b05      	cmp	r3, #5
 800c514:	d824      	bhi.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c516:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c569 	.word	0x0800c569
 800c520:	0800c535 	.word	0x0800c535
 800c524:	0800c54b 	.word	0x0800c54b
 800c528:	0800c569 	.word	0x0800c569
 800c52c:	0800c569 	.word	0x0800c569
 800c530:	0800c569 	.word	0x0800c569
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c538:	3308      	adds	r3, #8
 800c53a:	2101      	movs	r1, #1
 800c53c:	4618      	mov	r0, r3
 800c53e:	f001 fd79 	bl	800e034 <RCCEx_PLL2_Config>
 800c542:	4603      	mov	r3, r0
 800c544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c548:	e00f      	b.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c54e:	3328      	adds	r3, #40	; 0x28
 800c550:	2101      	movs	r1, #1
 800c552:	4618      	mov	r0, r3
 800c554:	f001 fe20 	bl	800e198 <RCCEx_PLL3_Config>
 800c558:	4603      	mov	r3, r0
 800c55a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c55e:	e004      	b.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c566:	e000      	b.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c56a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10a      	bne.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c572:	4b96      	ldr	r3, [pc, #600]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c576:	f023 0107 	bic.w	r1, r3, #7
 800c57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c580:	4a92      	ldr	r2, [pc, #584]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c582:	430b      	orrs	r3, r1
 800c584:	6553      	str	r3, [r2, #84]	; 0x54
 800c586:	e003      	b.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c588:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c58c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f002 0304 	and.w	r3, r2, #4
 800c59c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	d044      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b8:	2b05      	cmp	r3, #5
 800c5ba:	d825      	bhi.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c5bc:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c2:	bf00      	nop
 800c5c4:	0800c611 	.word	0x0800c611
 800c5c8:	0800c5dd 	.word	0x0800c5dd
 800c5cc:	0800c5f3 	.word	0x0800c5f3
 800c5d0:	0800c611 	.word	0x0800c611
 800c5d4:	0800c611 	.word	0x0800c611
 800c5d8:	0800c611 	.word	0x0800c611
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e0:	3308      	adds	r3, #8
 800c5e2:	2101      	movs	r1, #1
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f001 fd25 	bl	800e034 <RCCEx_PLL2_Config>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c5f0:	e00f      	b.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f6:	3328      	adds	r3, #40	; 0x28
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f001 fdcc 	bl	800e198 <RCCEx_PLL3_Config>
 800c600:	4603      	mov	r3, r0
 800c602:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c606:	e004      	b.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c60e:	e000      	b.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c612:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10b      	bne.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c61a:	4b6c      	ldr	r3, [pc, #432]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61e:	f023 0107 	bic.w	r1, r3, #7
 800c622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c62a:	4a68      	ldr	r2, [pc, #416]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c62c:	430b      	orrs	r3, r1
 800c62e:	6593      	str	r3, [r2, #88]	; 0x58
 800c630:	e003      	b.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c636:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	f002 0320 	and.w	r3, r2, #32
 800c646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c64a:	2300      	movs	r3, #0
 800c64c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c650:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c654:	460b      	mov	r3, r1
 800c656:	4313      	orrs	r3, r2
 800c658:	d055      	beq.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c666:	d033      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c66c:	d82c      	bhi.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c66e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c672:	d02f      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c678:	d826      	bhi.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c67a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c67e:	d02b      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c684:	d820      	bhi.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c68a:	d012      	beq.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c68c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c690:	d81a      	bhi.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c692:	2b00      	cmp	r3, #0
 800c694:	d022      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c69a:	d115      	bne.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f001 fcc5 	bl	800e034 <RCCEx_PLL2_Config>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c6b0:	e015      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6b6:	3328      	adds	r3, #40	; 0x28
 800c6b8:	2102      	movs	r1, #2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f001 fd6c 	bl	800e198 <RCCEx_PLL3_Config>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c6c6:	e00a      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c6ce:	e006      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6d0:	bf00      	nop
 800c6d2:	e004      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6d4:	bf00      	nop
 800c6d6:	e002      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6d8:	bf00      	nop
 800c6da:	e000      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10b      	bne.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6e6:	4b39      	ldr	r3, [pc, #228]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6f6:	4a35      	ldr	r2, [pc, #212]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c6f8:	430b      	orrs	r3, r1
 800c6fa:	6553      	str	r3, [r2, #84]	; 0x54
 800c6fc:	e003      	b.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c702:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c712:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c716:	2300      	movs	r3, #0
 800c718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c71c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c720:	460b      	mov	r3, r1
 800c722:	4313      	orrs	r3, r2
 800c724:	d058      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c72a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c72e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c732:	d033      	beq.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c734:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c738:	d82c      	bhi.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c73a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c73e:	d02f      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c744:	d826      	bhi.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c74a:	d02b      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c74c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c750:	d820      	bhi.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c756:	d012      	beq.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c75c:	d81a      	bhi.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d022      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c766:	d115      	bne.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76c:	3308      	adds	r3, #8
 800c76e:	2100      	movs	r1, #0
 800c770:	4618      	mov	r0, r3
 800c772:	f001 fc5f 	bl	800e034 <RCCEx_PLL2_Config>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c77c:	e015      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c782:	3328      	adds	r3, #40	; 0x28
 800c784:	2102      	movs	r1, #2
 800c786:	4618      	mov	r0, r3
 800c788:	f001 fd06 	bl	800e198 <RCCEx_PLL3_Config>
 800c78c:	4603      	mov	r3, r0
 800c78e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c792:	e00a      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c79a:	e006      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c79c:	bf00      	nop
 800c79e:	e004      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7a0:	bf00      	nop
 800c7a2:	e002      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7a4:	bf00      	nop
 800c7a6:	e000      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10e      	bne.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7b2:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7c2:	4a02      	ldr	r2, [pc, #8]	; (800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	6593      	str	r3, [r2, #88]	; 0x58
 800c7c8:	e006      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c7ca:	bf00      	nop
 800c7cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c7e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	d055      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c800:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c804:	d033      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c806:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c80a:	d82c      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c80c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c810:	d02f      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c816:	d826      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c818:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c81c:	d02b      	beq.n	800c876 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c81e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c822:	d820      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c828:	d012      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c82a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c82e:	d81a      	bhi.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c830:	2b00      	cmp	r3, #0
 800c832:	d022      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c838:	d115      	bne.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c83e:	3308      	adds	r3, #8
 800c840:	2100      	movs	r1, #0
 800c842:	4618      	mov	r0, r3
 800c844:	f001 fbf6 	bl	800e034 <RCCEx_PLL2_Config>
 800c848:	4603      	mov	r3, r0
 800c84a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c84e:	e015      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c854:	3328      	adds	r3, #40	; 0x28
 800c856:	2102      	movs	r1, #2
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 fc9d 	bl	800e198 <RCCEx_PLL3_Config>
 800c85e:	4603      	mov	r3, r0
 800c860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c864:	e00a      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c86c:	e006      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c86e:	bf00      	nop
 800c870:	e004      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c872:	bf00      	nop
 800c874:	e002      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c876:	bf00      	nop
 800c878:	e000      	b.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c87a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c87c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10b      	bne.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c884:	4ba0      	ldr	r3, [pc, #640]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c888:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c890:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c894:	4a9c      	ldr	r2, [pc, #624]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c896:	430b      	orrs	r3, r1
 800c898:	6593      	str	r3, [r2, #88]	; 0x58
 800c89a:	e003      	b.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c89c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f002 0308 	and.w	r3, r2, #8
 800c8b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d01e      	beq.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8d0:	d10c      	bne.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d6:	3328      	adds	r3, #40	; 0x28
 800c8d8:	2102      	movs	r1, #2
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f001 fc5c 	bl	800e198 <RCCEx_PLL3_Config>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c8ec:	4b86      	ldr	r3, [pc, #536]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8fc:	4a82      	ldr	r2, [pc, #520]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8fe:	430b      	orrs	r3, r1
 800c900:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f002 0310 	and.w	r3, r2, #16
 800c90e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c912:	2300      	movs	r3, #0
 800c914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c918:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c91c:	460b      	mov	r3, r1
 800c91e:	4313      	orrs	r3, r2
 800c920:	d01e      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c92e:	d10c      	bne.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c934:	3328      	adds	r3, #40	; 0x28
 800c936:	2102      	movs	r1, #2
 800c938:	4618      	mov	r0, r3
 800c93a:	f001 fc2d 	bl	800e198 <RCCEx_PLL3_Config>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d002      	beq.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c94a:	4b6f      	ldr	r3, [pc, #444]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c94e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c95a:	4a6b      	ldr	r2, [pc, #428]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c95c:	430b      	orrs	r3, r1
 800c95e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c96c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c96e:	2300      	movs	r3, #0
 800c970:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c972:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c976:	460b      	mov	r3, r1
 800c978:	4313      	orrs	r3, r2
 800c97a:	d03e      	beq.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c980:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c988:	d022      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c98a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c98e:	d81b      	bhi.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c990:	2b00      	cmp	r3, #0
 800c992:	d003      	beq.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c998:	d00b      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c99a:	e015      	b.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a0:	3308      	adds	r3, #8
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f001 fb45 	bl	800e034 <RCCEx_PLL2_Config>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c9b0:	e00f      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9b6:	3328      	adds	r3, #40	; 0x28
 800c9b8:	2102      	movs	r1, #2
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f001 fbec 	bl	800e198 <RCCEx_PLL3_Config>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c9c6:	e004      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c9ce:	e000      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10b      	bne.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c9da:	4b4b      	ldr	r3, [pc, #300]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c9ea:	4a47      	ldr	r2, [pc, #284]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9ec:	430b      	orrs	r3, r1
 800c9ee:	6593      	str	r3, [r2, #88]	; 0x58
 800c9f0:	e003      	b.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ca06:	673b      	str	r3, [r7, #112]	; 0x70
 800ca08:	2300      	movs	r3, #0
 800ca0a:	677b      	str	r3, [r7, #116]	; 0x74
 800ca0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ca10:	460b      	mov	r3, r1
 800ca12:	4313      	orrs	r3, r2
 800ca14:	d03b      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ca16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca22:	d01f      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ca24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca28:	d818      	bhi.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ca2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca2e:	d003      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ca30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca34:	d007      	beq.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ca36:	e011      	b.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca38:	4b33      	ldr	r3, [pc, #204]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	4a32      	ldr	r2, [pc, #200]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca44:	e00f      	b.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca4a:	3328      	adds	r3, #40	; 0x28
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f001 fba2 	bl	800e198 <RCCEx_PLL3_Config>
 800ca54:	4603      	mov	r3, r0
 800ca56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca5a:	e004      	b.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ca62:	e000      	b.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ca64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10b      	bne.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca6e:	4b26      	ldr	r3, [pc, #152]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ca76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca7e:	4a22      	ldr	r2, [pc, #136]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca80:	430b      	orrs	r3, r1
 800ca82:	6553      	str	r3, [r2, #84]	; 0x54
 800ca84:	e003      	b.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ca8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ca9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800caa0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800caa4:	460b      	mov	r3, r1
 800caa6:	4313      	orrs	r3, r2
 800caa8:	d034      	beq.n	800cb14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800caaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d003      	beq.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800cab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cab8:	d007      	beq.n	800caca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800caba:	e011      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cabc:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac0:	4a11      	ldr	r2, [pc, #68]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cac8:	e00e      	b.n	800cae8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800caca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cace:	3308      	adds	r3, #8
 800cad0:	2102      	movs	r1, #2
 800cad2:	4618      	mov	r0, r3
 800cad4:	f001 faae 	bl	800e034 <RCCEx_PLL2_Config>
 800cad8:	4603      	mov	r3, r0
 800cada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cade:	e003      	b.n	800cae8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800cae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10d      	bne.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800caf0:	4b05      	ldr	r3, [pc, #20]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800caf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800caf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cafe:	4a02      	ldr	r2, [pc, #8]	; (800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb00:	430b      	orrs	r3, r1
 800cb02:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb04:	e006      	b.n	800cb14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800cb06:	bf00      	nop
 800cb08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800cb20:	663b      	str	r3, [r7, #96]	; 0x60
 800cb22:	2300      	movs	r3, #0
 800cb24:	667b      	str	r3, [r7, #100]	; 0x64
 800cb26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	d00c      	beq.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb34:	3328      	adds	r3, #40	; 0x28
 800cb36:	2102      	movs	r1, #2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f001 fb2d 	bl	800e198 <RCCEx_PLL3_Config>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800cb56:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb58:	2300      	movs	r3, #0
 800cb5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800cb60:	460b      	mov	r3, r1
 800cb62:	4313      	orrs	r3, r2
 800cb64:	d036      	beq.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb70:	d018      	beq.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cb72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb76:	d811      	bhi.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cb78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb7c:	d014      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cb7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb82:	d80b      	bhi.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d011      	beq.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cb88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb8c:	d106      	bne.n	800cb9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb8e:	4bb7      	ldr	r3, [pc, #732]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb92:	4ab6      	ldr	r2, [pc, #728]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cb9a:	e008      	b.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800cba2:	e004      	b.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cba4:	bf00      	nop
 800cba6:	e002      	b.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cba8:	bf00      	nop
 800cbaa:	e000      	b.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cbac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d10a      	bne.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cbb6:	4bad      	ldr	r3, [pc, #692]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbc4:	4aa9      	ldr	r2, [pc, #676]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbc6:	430b      	orrs	r3, r1
 800cbc8:	6553      	str	r3, [r2, #84]	; 0x54
 800cbca:	e003      	b.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbdc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800cbe0:	653b      	str	r3, [r7, #80]	; 0x50
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	657b      	str	r3, [r7, #84]	; 0x54
 800cbe6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800cbea:	460b      	mov	r3, r1
 800cbec:	4313      	orrs	r3, r2
 800cbee:	d009      	beq.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cbf0:	4b9e      	ldr	r3, [pc, #632]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbfe:	4a9b      	ldr	r2, [pc, #620]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc00:	430b      	orrs	r3, r1
 800cc02:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800cc10:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc12:	2300      	movs	r3, #0
 800cc14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	d009      	beq.n	800cc34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cc20:	4b92      	ldr	r3, [pc, #584]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc24:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800cc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc2e:	4a8f      	ldr	r2, [pc, #572]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc30:	430b      	orrs	r3, r1
 800cc32:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800cc40:	643b      	str	r3, [r7, #64]	; 0x40
 800cc42:	2300      	movs	r3, #0
 800cc44:	647b      	str	r3, [r7, #68]	; 0x44
 800cc46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	d00e      	beq.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc50:	4b86      	ldr	r3, [pc, #536]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	4a85      	ldr	r2, [pc, #532]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc5a:	6113      	str	r3, [r2, #16]
 800cc5c:	4b83      	ldr	r3, [pc, #524]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc5e:	6919      	ldr	r1, [r3, #16]
 800cc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cc68:	4a80      	ldr	r2, [pc, #512]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc6a:	430b      	orrs	r3, r1
 800cc6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800cc7a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800cc84:	460b      	mov	r3, r1
 800cc86:	4313      	orrs	r3, r2
 800cc88:	d009      	beq.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cc8a:	4b78      	ldr	r3, [pc, #480]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc98:	4a74      	ldr	r2, [pc, #464]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc9a:	430b      	orrs	r3, r1
 800cc9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cc9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ccaa:	633b      	str	r3, [r7, #48]	; 0x30
 800ccac:	2300      	movs	r3, #0
 800ccae:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	d00a      	beq.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ccba:	4b6c      	ldr	r3, [pc, #432]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccbe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ccc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccca:	4a68      	ldr	r2, [pc, #416]	; (800ce6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cccc:	430b      	orrs	r3, r1
 800ccce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ccd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	62b9      	str	r1, [r7, #40]	; 0x28
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cce2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800cce6:	460b      	mov	r3, r1
 800cce8:	4313      	orrs	r3, r2
 800ccea:	d011      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f001 f99d 	bl	800e034 <RCCEx_PLL2_Config>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cd00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cd0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	2100      	movs	r1, #0
 800cd1a:	6239      	str	r1, [r7, #32]
 800cd1c:	f003 0302 	and.w	r3, r3, #2
 800cd20:	627b      	str	r3, [r7, #36]	; 0x24
 800cd22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cd26:	460b      	mov	r3, r1
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	d011      	beq.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd30:	3308      	adds	r3, #8
 800cd32:	2101      	movs	r1, #1
 800cd34:	4618      	mov	r0, r3
 800cd36:	f001 f97d 	bl	800e034 <RCCEx_PLL2_Config>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cd40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d003      	beq.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cd4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	2100      	movs	r1, #0
 800cd5a:	61b9      	str	r1, [r7, #24]
 800cd5c:	f003 0304 	and.w	r3, r3, #4
 800cd60:	61fb      	str	r3, [r7, #28]
 800cd62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cd66:	460b      	mov	r3, r1
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	d011      	beq.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd70:	3308      	adds	r3, #8
 800cd72:	2102      	movs	r1, #2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f001 f95d 	bl	800e034 <RCCEx_PLL2_Config>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cd80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d003      	beq.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cd8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd98:	2100      	movs	r1, #0
 800cd9a:	6139      	str	r1, [r7, #16]
 800cd9c:	f003 0308 	and.w	r3, r3, #8
 800cda0:	617b      	str	r3, [r7, #20]
 800cda2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cda6:	460b      	mov	r3, r1
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	d011      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdb0:	3328      	adds	r3, #40	; 0x28
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f001 f9ef 	bl	800e198 <RCCEx_PLL3_Config>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800cdc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d003      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cdcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cdd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	2100      	movs	r1, #0
 800cdda:	60b9      	str	r1, [r7, #8]
 800cddc:	f003 0310 	and.w	r3, r3, #16
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cde6:	460b      	mov	r3, r1
 800cde8:	4313      	orrs	r3, r2
 800cdea:	d011      	beq.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdf0:	3328      	adds	r3, #40	; 0x28
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 f9cf 	bl	800e198 <RCCEx_PLL3_Config>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ce00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d003      	beq.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ce0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ce10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	2100      	movs	r1, #0
 800ce1a:	6039      	str	r1, [r7, #0]
 800ce1c:	f003 0320 	and.w	r3, r3, #32
 800ce20:	607b      	str	r3, [r7, #4]
 800ce22:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ce26:	460b      	mov	r3, r1
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	d011      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce30:	3328      	adds	r3, #40	; 0x28
 800ce32:	2102      	movs	r1, #2
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 f9af 	bl	800e198 <RCCEx_PLL3_Config>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ce40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d003      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ce4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ce50:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d101      	bne.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	e000      	b.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ce5c:	2301      	movs	r3, #1
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ce64:	46bd      	mov	sp, r7
 800ce66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce6a:	bf00      	nop
 800ce6c:	58024400 	.word	0x58024400

0800ce70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b090      	sub	sp, #64	; 0x40
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ce7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce7e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ce82:	430b      	orrs	r3, r1
 800ce84:	f040 8094 	bne.w	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ce88:	4b9b      	ldr	r3, [pc, #620]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce8c:	f003 0307 	and.w	r3, r3, #7
 800ce90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	2b04      	cmp	r3, #4
 800ce96:	f200 8087 	bhi.w	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ce9a:	a201      	add	r2, pc, #4	; (adr r2, 800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ce9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea0:	0800ceb5 	.word	0x0800ceb5
 800cea4:	0800cedd 	.word	0x0800cedd
 800cea8:	0800cf05 	.word	0x0800cf05
 800ceac:	0800cfa1 	.word	0x0800cfa1
 800ceb0:	0800cf2d 	.word	0x0800cf2d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ceb4:	4b90      	ldr	r3, [pc, #576]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cec0:	d108      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 ff62 	bl	800dd90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced0:	f000 bc93 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced8:	f000 bc8f 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cedc:	4b86      	ldr	r3, [pc, #536]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cee8:	d108      	bne.n	800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceea:	f107 0318 	add.w	r3, r7, #24
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 fca6 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cef8:	f000 bc7f 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf00:	f000 bc7b 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf04:	4b7c      	ldr	r3, [pc, #496]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf10:	d108      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf12:	f107 030c 	add.w	r3, r7, #12
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 fde6 	bl	800dae8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf20:	f000 bc6b 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf28:	f000 bc67 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf2c:	4b72      	ldr	r3, [pc, #456]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf36:	4b70      	ldr	r3, [pc, #448]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 0304 	and.w	r3, r3, #4
 800cf3e:	2b04      	cmp	r3, #4
 800cf40:	d10c      	bne.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cf42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d109      	bne.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf48:	4b6b      	ldr	r3, [pc, #428]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	08db      	lsrs	r3, r3, #3
 800cf4e:	f003 0303 	and.w	r3, r3, #3
 800cf52:	4a6a      	ldr	r2, [pc, #424]	; (800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cf54:	fa22 f303 	lsr.w	r3, r2, r3
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf5a:	e01f      	b.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf5c:	4b66      	ldr	r3, [pc, #408]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf68:	d106      	bne.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf70:	d102      	bne.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf72:	4b63      	ldr	r3, [pc, #396]	; (800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf76:	e011      	b.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf78:	4b5f      	ldr	r3, [pc, #380]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf84:	d106      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf8c:	d102      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf8e:	4b5d      	ldr	r3, [pc, #372]	; (800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cf90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf92:	e003      	b.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf98:	f000 bc2f 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf9c:	f000 bc2d 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cfa0:	4b59      	ldr	r3, [pc, #356]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa4:	f000 bc29 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfac:	f000 bc25 	b.w	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cfb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfb4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cfb8:	430b      	orrs	r3, r1
 800cfba:	f040 80a7 	bne.w	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cfbe:	4b4e      	ldr	r3, [pc, #312]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cfc6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cfce:	d054      	beq.n	800d07a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cfd6:	f200 808b 	bhi.w	800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cfe0:	f000 8083 	beq.w	800d0ea <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cfea:	f200 8081 	bhi.w	800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cff4:	d02f      	beq.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cffc:	d878      	bhi.n	800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	2b00      	cmp	r3, #0
 800d002:	d004      	beq.n	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d00a:	d012      	beq.n	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d00c:	e070      	b.n	800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d00e:	4b3a      	ldr	r3, [pc, #232]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d01a:	d107      	bne.n	800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d01c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d020:	4618      	mov	r0, r3
 800d022:	f000 feb5 	bl	800dd90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d02a:	e3e6      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d030:	e3e3      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d032:	4b31      	ldr	r3, [pc, #196]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d03a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d03e:	d107      	bne.n	800d050 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d040:	f107 0318 	add.w	r3, r7, #24
 800d044:	4618      	mov	r0, r3
 800d046:	f000 fbfb 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d04e:	e3d4      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d054:	e3d1      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d056:	4b28      	ldr	r3, [pc, #160]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d05e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d062:	d107      	bne.n	800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d064:	f107 030c 	add.w	r3, r7, #12
 800d068:	4618      	mov	r0, r3
 800d06a:	f000 fd3d 	bl	800dae8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d072:	e3c2      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d078:	e3bf      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d07a:	4b1f      	ldr	r3, [pc, #124]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d07e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d082:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d084:	4b1c      	ldr	r3, [pc, #112]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f003 0304 	and.w	r3, r3, #4
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	d10c      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d092:	2b00      	cmp	r3, #0
 800d094:	d109      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d096:	4b18      	ldr	r3, [pc, #96]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	08db      	lsrs	r3, r3, #3
 800d09c:	f003 0303 	and.w	r3, r3, #3
 800d0a0:	4a16      	ldr	r2, [pc, #88]	; (800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0a8:	e01e      	b.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0aa:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0b6:	d106      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0be:	d102      	bne.n	800d0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d0c0:	4b0f      	ldr	r3, [pc, #60]	; (800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0c4:	e010      	b.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0d2:	d106      	bne.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0da:	d102      	bne.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0dc:	4b09      	ldr	r3, [pc, #36]	; (800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d0de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0e0:	e002      	b.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d0e6:	e388      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0e8:	e387      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d0ea:	4b07      	ldr	r3, [pc, #28]	; (800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ee:	e384      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f4:	e381      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0f6:	bf00      	nop
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	03d09000 	.word	0x03d09000
 800d100:	003d0900 	.word	0x003d0900
 800d104:	017d7840 	.word	0x017d7840
 800d108:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d10c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d110:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800d114:	430b      	orrs	r3, r1
 800d116:	f040 809c 	bne.w	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d11a:	4b9e      	ldr	r3, [pc, #632]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d11e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d122:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d12a:	d054      	beq.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d132:	f200 808b 	bhi.w	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d13c:	f000 8083 	beq.w	800d246 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d146:	f200 8081 	bhi.w	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d150:	d02f      	beq.n	800d1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d158:	d878      	bhi.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d004      	beq.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d166:	d012      	beq.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d168:	e070      	b.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d16a:	4b8a      	ldr	r3, [pc, #552]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d176:	d107      	bne.n	800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 fe07 	bl	800dd90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d186:	e338      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d18c:	e335      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d18e:	4b81      	ldr	r3, [pc, #516]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d19a:	d107      	bne.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d19c:	f107 0318 	add.w	r3, r7, #24
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 fb4d 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1aa:	e326      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1b0:	e323      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1b2:	4b78      	ldr	r3, [pc, #480]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1be:	d107      	bne.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1c0:	f107 030c 	add.w	r3, r7, #12
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 fc8f 	bl	800dae8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ce:	e314      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1d4:	e311      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d1d6:	4b6f      	ldr	r3, [pc, #444]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d1de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d1e0:	4b6c      	ldr	r3, [pc, #432]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 0304 	and.w	r3, r3, #4
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d10c      	bne.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d109      	bne.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1f2:	4b68      	ldr	r3, [pc, #416]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	08db      	lsrs	r3, r3, #3
 800d1f8:	f003 0303 	and.w	r3, r3, #3
 800d1fc:	4a66      	ldr	r2, [pc, #408]	; (800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d204:	e01e      	b.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d206:	4b63      	ldr	r3, [pc, #396]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d212:	d106      	bne.n	800d222 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d21a:	d102      	bne.n	800d222 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d21c:	4b5f      	ldr	r3, [pc, #380]	; (800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d220:	e010      	b.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d222:	4b5c      	ldr	r3, [pc, #368]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d22a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d22e:	d106      	bne.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d236:	d102      	bne.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d238:	4b59      	ldr	r3, [pc, #356]	; (800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d23c:	e002      	b.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d242:	e2da      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d244:	e2d9      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d246:	4b57      	ldr	r3, [pc, #348]	; (800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d24a:	e2d6      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d250:	e2d3      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d252:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d256:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800d25a:	430b      	orrs	r3, r1
 800d25c:	f040 80a7 	bne.w	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d260:	4b4c      	ldr	r3, [pc, #304]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d264:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d268:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d270:	d055      	beq.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d278:	f200 8096 	bhi.w	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d282:	f000 8084 	beq.w	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d288:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d28c:	f200 808c 	bhi.w	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d296:	d030      	beq.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d29e:	f200 8083 	bhi.w	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d004      	beq.n	800d2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2ae:	d012      	beq.n	800d2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d2b0:	e07a      	b.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2b2:	4b38      	ldr	r3, [pc, #224]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2be:	d107      	bne.n	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 fd63 	bl	800dd90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2ce:	e294      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2d4:	e291      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2d6:	4b2f      	ldr	r3, [pc, #188]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2e2:	d107      	bne.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2e4:	f107 0318 	add.w	r3, r7, #24
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 faa9 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2f2:	e282      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2f8:	e27f      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2fa:	4b26      	ldr	r3, [pc, #152]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d306:	d107      	bne.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d308:	f107 030c 	add.w	r3, r7, #12
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 fbeb 	bl	800dae8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d316:	e270      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d31c:	e26d      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d31e:	4b1d      	ldr	r3, [pc, #116]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d326:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d328:	4b1a      	ldr	r3, [pc, #104]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f003 0304 	and.w	r3, r3, #4
 800d330:	2b04      	cmp	r3, #4
 800d332:	d10c      	bne.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d336:	2b00      	cmp	r3, #0
 800d338:	d109      	bne.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d33a:	4b16      	ldr	r3, [pc, #88]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	08db      	lsrs	r3, r3, #3
 800d340:	f003 0303 	and.w	r3, r3, #3
 800d344:	4a14      	ldr	r2, [pc, #80]	; (800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d346:	fa22 f303 	lsr.w	r3, r2, r3
 800d34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d34c:	e01e      	b.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d34e:	4b11      	ldr	r3, [pc, #68]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d35a:	d106      	bne.n	800d36a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d362:	d102      	bne.n	800d36a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d364:	4b0d      	ldr	r3, [pc, #52]	; (800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d368:	e010      	b.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d36a:	4b0a      	ldr	r3, [pc, #40]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d376:	d106      	bne.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d37e:	d102      	bne.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d380:	4b07      	ldr	r3, [pc, #28]	; (800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d384:	e002      	b.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d38a:	e236      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d38c:	e235      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d38e:	4b05      	ldr	r3, [pc, #20]	; (800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d392:	e232      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d394:	58024400 	.word	0x58024400
 800d398:	03d09000 	.word	0x03d09000
 800d39c:	003d0900 	.word	0x003d0900
 800d3a0:	017d7840 	.word	0x017d7840
 800d3a4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ac:	e225      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d3ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3b2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d3b6:	430b      	orrs	r3, r1
 800d3b8:	f040 8085 	bne.w	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d3bc:	4b9c      	ldr	r3, [pc, #624]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d3c4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d3cc:	d06b      	beq.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d3d4:	d874      	bhi.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d3dc:	d056      	beq.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d3e4:	d86c      	bhi.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d3ec:	d03b      	beq.n	800d466 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d3f4:	d864      	bhi.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3fc:	d021      	beq.n	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d404:	d85c      	bhi.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d004      	beq.n	800d416 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d412:	d004      	beq.n	800d41e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d414:	e054      	b.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d416:	f7fe fb33 	bl	800ba80 <HAL_RCC_GetPCLK1Freq>
 800d41a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d41c:	e1ed      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d41e:	4b84      	ldr	r3, [pc, #528]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d42a:	d107      	bne.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d42c:	f107 0318 	add.w	r3, r7, #24
 800d430:	4618      	mov	r0, r3
 800d432:	f000 fa05 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d43a:	e1de      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d440:	e1db      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d442:	4b7b      	ldr	r3, [pc, #492]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d44a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d44e:	d107      	bne.n	800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d450:	f107 030c 	add.w	r3, r7, #12
 800d454:	4618      	mov	r0, r3
 800d456:	f000 fb47 	bl	800dae8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d45e:	e1cc      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d460:	2300      	movs	r3, #0
 800d462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d464:	e1c9      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d466:	4b72      	ldr	r3, [pc, #456]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f003 0304 	and.w	r3, r3, #4
 800d46e:	2b04      	cmp	r3, #4
 800d470:	d109      	bne.n	800d486 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d472:	4b6f      	ldr	r3, [pc, #444]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	08db      	lsrs	r3, r3, #3
 800d478:	f003 0303 	and.w	r3, r3, #3
 800d47c:	4a6d      	ldr	r2, [pc, #436]	; (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d47e:	fa22 f303 	lsr.w	r3, r2, r3
 800d482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d484:	e1b9      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d48a:	e1b6      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d48c:	4b68      	ldr	r3, [pc, #416]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d498:	d102      	bne.n	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d49a:	4b67      	ldr	r3, [pc, #412]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d49e:	e1ac      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4a4:	e1a9      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d4a6:	4b62      	ldr	r3, [pc, #392]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4b2:	d102      	bne.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d4b4:	4b61      	ldr	r3, [pc, #388]	; (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4b8:	e19f      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4be:	e19c      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4c4:	e199      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ca:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d4ce:	430b      	orrs	r3, r1
 800d4d0:	d173      	bne.n	800d5ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d4d2:	4b57      	ldr	r3, [pc, #348]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d4da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4e2:	d02f      	beq.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4ea:	d863      	bhi.n	800d5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d004      	beq.n	800d4fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4f8:	d012      	beq.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d4fa:	e05b      	b.n	800d5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4fc:	4b4c      	ldr	r3, [pc, #304]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d508:	d107      	bne.n	800d51a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d50a:	f107 0318 	add.w	r3, r7, #24
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 f996 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d518:	e16f      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d51e:	e16c      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d520:	4b43      	ldr	r3, [pc, #268]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d52c:	d107      	bne.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d52e:	f107 030c 	add.w	r3, r7, #12
 800d532:	4618      	mov	r0, r3
 800d534:	f000 fad8 	bl	800dae8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d53c:	e15d      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d542:	e15a      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d544:	4b3a      	ldr	r3, [pc, #232]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d54c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d54e:	4b38      	ldr	r3, [pc, #224]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f003 0304 	and.w	r3, r3, #4
 800d556:	2b04      	cmp	r3, #4
 800d558:	d10c      	bne.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d109      	bne.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d560:	4b33      	ldr	r3, [pc, #204]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	08db      	lsrs	r3, r3, #3
 800d566:	f003 0303 	and.w	r3, r3, #3
 800d56a:	4a32      	ldr	r2, [pc, #200]	; (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d56c:	fa22 f303 	lsr.w	r3, r2, r3
 800d570:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d572:	e01e      	b.n	800d5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d574:	4b2e      	ldr	r3, [pc, #184]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d57c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d580:	d106      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d588:	d102      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d58a:	4b2b      	ldr	r3, [pc, #172]	; (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d58c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d58e:	e010      	b.n	800d5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d590:	4b27      	ldr	r3, [pc, #156]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d59c:	d106      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5a4:	d102      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d5a6:	4b25      	ldr	r3, [pc, #148]	; (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5aa:	e002      	b.n	800d5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d5b0:	e123      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5b2:	e122      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5b8:	e11f      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d5ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5be:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d5c2:	430b      	orrs	r3, r1
 800d5c4:	d13c      	bne.n	800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d5c6:	4b1a      	ldr	r3, [pc, #104]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5ce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d004      	beq.n	800d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5dc:	d012      	beq.n	800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d5de:	e023      	b.n	800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d5e0:	4b13      	ldr	r3, [pc, #76]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5ec:	d107      	bne.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 fbcc 	bl	800dd90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5fc:	e0fd      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d602:	e0fa      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d60c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d610:	d107      	bne.n	800d622 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d612:	f107 0318 	add.w	r3, r7, #24
 800d616:	4618      	mov	r0, r3
 800d618:	f000 f912 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d61c:	6a3b      	ldr	r3, [r7, #32]
 800d61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d620:	e0eb      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d626:	e0e8      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d62c:	e0e5      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d62e:	bf00      	nop
 800d630:	58024400 	.word	0x58024400
 800d634:	03d09000 	.word	0x03d09000
 800d638:	003d0900 	.word	0x003d0900
 800d63c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d644:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d648:	430b      	orrs	r3, r1
 800d64a:	f040 8085 	bne.w	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d64e:	4b6d      	ldr	r3, [pc, #436]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d652:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d656:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d65e:	d06b      	beq.n	800d738 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d666:	d874      	bhi.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d66e:	d056      	beq.n	800d71e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d676:	d86c      	bhi.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d67e:	d03b      	beq.n	800d6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d686:	d864      	bhi.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d68e:	d021      	beq.n	800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d696:	d85c      	bhi.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d004      	beq.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6a4:	d004      	beq.n	800d6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d6a6:	e054      	b.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d6a8:	f000 f8b4 	bl	800d814 <HAL_RCCEx_GetD3PCLK1Freq>
 800d6ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6ae:	e0a4      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6b0:	4b54      	ldr	r3, [pc, #336]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6bc:	d107      	bne.n	800d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6be:	f107 0318 	add.w	r3, r7, #24
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 f8bc 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6cc:	e095      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6d2:	e092      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d6d4:	4b4b      	ldr	r3, [pc, #300]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6e0:	d107      	bne.n	800d6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6e2:	f107 030c 	add.w	r3, r7, #12
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f000 f9fe 	bl	800dae8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6f0:	e083      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6f6:	e080      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d6f8:	4b42      	ldr	r3, [pc, #264]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f003 0304 	and.w	r3, r3, #4
 800d700:	2b04      	cmp	r3, #4
 800d702:	d109      	bne.n	800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d704:	4b3f      	ldr	r3, [pc, #252]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	08db      	lsrs	r3, r3, #3
 800d70a:	f003 0303 	and.w	r3, r3, #3
 800d70e:	4a3e      	ldr	r2, [pc, #248]	; (800d808 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d710:	fa22 f303 	lsr.w	r3, r2, r3
 800d714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d716:	e070      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d71c:	e06d      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d71e:	4b39      	ldr	r3, [pc, #228]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d72a:	d102      	bne.n	800d732 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d72c:	4b37      	ldr	r3, [pc, #220]	; (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d730:	e063      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d732:	2300      	movs	r3, #0
 800d734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d736:	e060      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d738:	4b32      	ldr	r3, [pc, #200]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d744:	d102      	bne.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d746:	4b32      	ldr	r3, [pc, #200]	; (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d74a:	e056      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d750:	e053      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d756:	e050      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d75c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d760:	430b      	orrs	r3, r1
 800d762:	d148      	bne.n	800d7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d764:	4b27      	ldr	r3, [pc, #156]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d76c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d774:	d02a      	beq.n	800d7cc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d77c:	d838      	bhi.n	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d780:	2b00      	cmp	r3, #0
 800d782:	d004      	beq.n	800d78e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d78a:	d00d      	beq.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d78c:	e030      	b.n	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d78e:	4b1d      	ldr	r3, [pc, #116]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d79a:	d102      	bne.n	800d7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d79c:	4b1c      	ldr	r3, [pc, #112]	; (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7a0:	e02b      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a6:	e028      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d7a8:	4b16      	ldr	r3, [pc, #88]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d7b4:	d107      	bne.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d7b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f000 fae8 	bl	800dd90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7c4:	e019      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7ca:	e016      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7cc:	4b0d      	ldr	r3, [pc, #52]	; (800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7d8:	d107      	bne.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7da:	f107 0318 	add.w	r3, r7, #24
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f82e 	bl	800d840 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7e8:	e007      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7ee:	e004      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7f4:	e001      	b.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3740      	adds	r7, #64	; 0x40
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	58024400 	.word	0x58024400
 800d808:	03d09000 	.word	0x03d09000
 800d80c:	003d0900 	.word	0x003d0900
 800d810:	017d7840 	.word	0x017d7840

0800d814 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d818:	f7fe f902 	bl	800ba20 <HAL_RCC_GetHCLKFreq>
 800d81c:	4602      	mov	r2, r0
 800d81e:	4b06      	ldr	r3, [pc, #24]	; (800d838 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	091b      	lsrs	r3, r3, #4
 800d824:	f003 0307 	and.w	r3, r3, #7
 800d828:	4904      	ldr	r1, [pc, #16]	; (800d83c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d82a:	5ccb      	ldrb	r3, [r1, r3]
 800d82c:	f003 031f 	and.w	r3, r3, #31
 800d830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d834:	4618      	mov	r0, r3
 800d836:	bd80      	pop	{r7, pc}
 800d838:	58024400 	.word	0x58024400
 800d83c:	0802a44c 	.word	0x0802a44c

0800d840 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d840:	b480      	push	{r7}
 800d842:	b089      	sub	sp, #36	; 0x24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d848:	4ba1      	ldr	r3, [pc, #644]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84c:	f003 0303 	and.w	r3, r3, #3
 800d850:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d852:	4b9f      	ldr	r3, [pc, #636]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d856:	0b1b      	lsrs	r3, r3, #12
 800d858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d85c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d85e:	4b9c      	ldr	r3, [pc, #624]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d862:	091b      	lsrs	r3, r3, #4
 800d864:	f003 0301 	and.w	r3, r3, #1
 800d868:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d86a:	4b99      	ldr	r3, [pc, #612]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d86e:	08db      	lsrs	r3, r3, #3
 800d870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d874:	693a      	ldr	r2, [r7, #16]
 800d876:	fb02 f303 	mul.w	r3, r2, r3
 800d87a:	ee07 3a90 	vmov	s15, r3
 800d87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 8111 	beq.w	800dab0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	2b02      	cmp	r3, #2
 800d892:	f000 8083 	beq.w	800d99c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	f200 80a1 	bhi.w	800d9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d003      	beq.n	800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d056      	beq.n	800d958 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d8aa:	e099      	b.n	800d9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8ac:	4b88      	ldr	r3, [pc, #544]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f003 0320 	and.w	r3, r3, #32
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d02d      	beq.n	800d914 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8b8:	4b85      	ldr	r3, [pc, #532]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	08db      	lsrs	r3, r3, #3
 800d8be:	f003 0303 	and.w	r3, r3, #3
 800d8c2:	4a84      	ldr	r2, [pc, #528]	; (800dad4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d8c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	ee07 3a90 	vmov	s15, r3
 800d8d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	ee07 3a90 	vmov	s15, r3
 800d8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8e2:	4b7b      	ldr	r3, [pc, #492]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ea:	ee07 3a90 	vmov	s15, r3
 800d8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d90e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d912:	e087      	b.n	800da24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	ee07 3a90 	vmov	s15, r3
 800d91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d91e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dadc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d926:	4b6a      	ldr	r3, [pc, #424]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d92e:	ee07 3a90 	vmov	s15, r3
 800d932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d936:	ed97 6a03 	vldr	s12, [r7, #12]
 800d93a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d956:	e065      	b.n	800da24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	ee07 3a90 	vmov	s15, r3
 800d95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d962:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d96a:	4b59      	ldr	r3, [pc, #356]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d972:	ee07 3a90 	vmov	s15, r3
 800d976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d97a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d97e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d98a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d99a:	e043      	b.n	800da24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	ee07 3a90 	vmov	s15, r3
 800d9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ae:	4b48      	ldr	r3, [pc, #288]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9b6:	ee07 3a90 	vmov	s15, r3
 800d9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9de:	e021      	b.n	800da24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	ee07 3a90 	vmov	s15, r3
 800d9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f2:	4b37      	ldr	r3, [pc, #220]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9fa:	ee07 3a90 	vmov	s15, r3
 800d9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da02:	ed97 6a03 	vldr	s12, [r7, #12]
 800da06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800da24:	4b2a      	ldr	r3, [pc, #168]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da28:	0a5b      	lsrs	r3, r3, #9
 800da2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da2e:	ee07 3a90 	vmov	s15, r3
 800da32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4a:	ee17 2a90 	vmov	r2, s15
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800da52:	4b1f      	ldr	r3, [pc, #124]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da56:	0c1b      	lsrs	r3, r3, #16
 800da58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da5c:	ee07 3a90 	vmov	s15, r3
 800da60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800da70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da78:	ee17 2a90 	vmov	r2, s15
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800da80:	4b13      	ldr	r3, [pc, #76]	; (800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da84:	0e1b      	lsrs	r3, r3, #24
 800da86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da8a:	ee07 3a90 	vmov	s15, r3
 800da8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800da9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daa6:	ee17 2a90 	vmov	r2, s15
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800daae:	e008      	b.n	800dac2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	609a      	str	r2, [r3, #8]
}
 800dac2:	bf00      	nop
 800dac4:	3724      	adds	r7, #36	; 0x24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	58024400 	.word	0x58024400
 800dad4:	03d09000 	.word	0x03d09000
 800dad8:	46000000 	.word	0x46000000
 800dadc:	4c742400 	.word	0x4c742400
 800dae0:	4a742400 	.word	0x4a742400
 800dae4:	4bbebc20 	.word	0x4bbebc20

0800dae8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dae8:	b480      	push	{r7}
 800daea:	b089      	sub	sp, #36	; 0x24
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800daf0:	4ba1      	ldr	r3, [pc, #644]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf4:	f003 0303 	and.w	r3, r3, #3
 800daf8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dafa:	4b9f      	ldr	r3, [pc, #636]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dafe:	0d1b      	lsrs	r3, r3, #20
 800db00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800db06:	4b9c      	ldr	r3, [pc, #624]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0a:	0a1b      	lsrs	r3, r3, #8
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800db12:	4b99      	ldr	r3, [pc, #612]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db16:	08db      	lsrs	r3, r3, #3
 800db18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	fb02 f303 	mul.w	r3, r2, r3
 800db22:	ee07 3a90 	vmov	s15, r3
 800db26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 8111 	beq.w	800dd58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	f000 8083 	beq.w	800dc44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	2b02      	cmp	r3, #2
 800db42:	f200 80a1 	bhi.w	800dc88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d003      	beq.n	800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d056      	beq.n	800dc00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800db52:	e099      	b.n	800dc88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db54:	4b88      	ldr	r3, [pc, #544]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f003 0320 	and.w	r3, r3, #32
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d02d      	beq.n	800dbbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db60:	4b85      	ldr	r3, [pc, #532]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	08db      	lsrs	r3, r3, #3
 800db66:	f003 0303 	and.w	r3, r3, #3
 800db6a:	4a84      	ldr	r2, [pc, #528]	; (800dd7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800db6c:	fa22 f303 	lsr.w	r3, r2, r3
 800db70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	ee07 3a90 	vmov	s15, r3
 800db78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	ee07 3a90 	vmov	s15, r3
 800db82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db8a:	4b7b      	ldr	r3, [pc, #492]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db92:	ee07 3a90 	vmov	s15, r3
 800db96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800db9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dd80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dbba:	e087      	b.n	800dccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	ee07 3a90 	vmov	s15, r3
 800dbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dd84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dbca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbce:	4b6a      	ldr	r3, [pc, #424]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd6:	ee07 3a90 	vmov	s15, r3
 800dbda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbde:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbe2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dd80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbfe:	e065      	b.n	800dccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	ee07 3a90 	vmov	s15, r3
 800dc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dd88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc12:	4b59      	ldr	r3, [pc, #356]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc1a:	ee07 3a90 	vmov	s15, r3
 800dc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc22:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc26:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dd80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc42:	e043      	b.n	800dccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	ee07 3a90 	vmov	s15, r3
 800dc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dd8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dc52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc56:	4b48      	ldr	r3, [pc, #288]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc5e:	ee07 3a90 	vmov	s15, r3
 800dc62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc66:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dd80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc86:	e021      	b.n	800dccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	ee07 3a90 	vmov	s15, r3
 800dc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dd88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc9a:	4b37      	ldr	r3, [pc, #220]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dca2:	ee07 3a90 	vmov	s15, r3
 800dca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dd80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800dccc:	4b2a      	ldr	r3, [pc, #168]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd0:	0a5b      	lsrs	r3, r3, #9
 800dcd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcd6:	ee07 3a90 	vmov	s15, r3
 800dcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dce6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcf2:	ee17 2a90 	vmov	r2, s15
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800dcfa:	4b1f      	ldr	r3, [pc, #124]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfe:	0c1b      	lsrs	r3, r3, #16
 800dd00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd04:	ee07 3a90 	vmov	s15, r3
 800dd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd14:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd20:	ee17 2a90 	vmov	r2, s15
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800dd28:	4b13      	ldr	r3, [pc, #76]	; (800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2c:	0e1b      	lsrs	r3, r3, #24
 800dd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd32:	ee07 3a90 	vmov	s15, r3
 800dd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd42:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd4e:	ee17 2a90 	vmov	r2, s15
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dd56:	e008      	b.n	800dd6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	609a      	str	r2, [r3, #8]
}
 800dd6a:	bf00      	nop
 800dd6c:	3724      	adds	r7, #36	; 0x24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	58024400 	.word	0x58024400
 800dd7c:	03d09000 	.word	0x03d09000
 800dd80:	46000000 	.word	0x46000000
 800dd84:	4c742400 	.word	0x4c742400
 800dd88:	4a742400 	.word	0x4a742400
 800dd8c:	4bbebc20 	.word	0x4bbebc20

0800dd90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b089      	sub	sp, #36	; 0x24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dd98:	4ba0      	ldr	r3, [pc, #640]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800dda2:	4b9e      	ldr	r3, [pc, #632]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda6:	091b      	lsrs	r3, r3, #4
 800dda8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ddae:	4b9b      	ldr	r3, [pc, #620]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ddb8:	4b98      	ldr	r3, [pc, #608]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddbc:	08db      	lsrs	r3, r3, #3
 800ddbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	fb02 f303 	mul.w	r3, r2, r3
 800ddc8:	ee07 3a90 	vmov	s15, r3
 800ddcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddd0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 8111 	beq.w	800dffe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	f000 8083 	beq.w	800deea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	2b02      	cmp	r3, #2
 800dde8:	f200 80a1 	bhi.w	800df2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d003      	beq.n	800ddfa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d056      	beq.n	800dea6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ddf8:	e099      	b.n	800df2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddfa:	4b88      	ldr	r3, [pc, #544]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 0320 	and.w	r3, r3, #32
 800de02:	2b00      	cmp	r3, #0
 800de04:	d02d      	beq.n	800de62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de06:	4b85      	ldr	r3, [pc, #532]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	08db      	lsrs	r3, r3, #3
 800de0c:	f003 0303 	and.w	r3, r3, #3
 800de10:	4a83      	ldr	r2, [pc, #524]	; (800e020 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800de12:	fa22 f303 	lsr.w	r3, r2, r3
 800de16:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	ee07 3a90 	vmov	s15, r3
 800de1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	ee07 3a90 	vmov	s15, r3
 800de28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de30:	4b7a      	ldr	r3, [pc, #488]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de38:	ee07 3a90 	vmov	s15, r3
 800de3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de40:	ed97 6a03 	vldr	s12, [r7, #12]
 800de44:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e024 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800de48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800de60:	e087      	b.n	800df72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	ee07 3a90 	vmov	s15, r3
 800de68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e028 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800de70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de74:	4b69      	ldr	r3, [pc, #420]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7c:	ee07 3a90 	vmov	s15, r3
 800de80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de84:	ed97 6a03 	vldr	s12, [r7, #12]
 800de88:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e024 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800de8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dea4:	e065      	b.n	800df72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	ee07 3a90 	vmov	s15, r3
 800deac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deb0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e02c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800deb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800deb8:	4b58      	ldr	r3, [pc, #352]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800deba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800debc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec0:	ee07 3a90 	vmov	s15, r3
 800dec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dec8:	ed97 6a03 	vldr	s12, [r7, #12]
 800decc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e024 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ded0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ded4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ded8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dedc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dee8:	e043      	b.n	800df72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	ee07 3a90 	vmov	s15, r3
 800def0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800def4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e030 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800def8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800defc:	4b47      	ldr	r3, [pc, #284]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800defe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df04:	ee07 3a90 	vmov	s15, r3
 800df08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800df10:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e024 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df2c:	e021      	b.n	800df72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	ee07 3a90 	vmov	s15, r3
 800df34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df38:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e028 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800df3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df40:	4b36      	ldr	r3, [pc, #216]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df48:	ee07 3a90 	vmov	s15, r3
 800df4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df50:	ed97 6a03 	vldr	s12, [r7, #12]
 800df54:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e024 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df70:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800df72:	4b2a      	ldr	r3, [pc, #168]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df76:	0a5b      	lsrs	r3, r3, #9
 800df78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df7c:	ee07 3a90 	vmov	s15, r3
 800df80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800df90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df98:	ee17 2a90 	vmov	r2, s15
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dfa0:	4b1e      	ldr	r3, [pc, #120]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa4:	0c1b      	lsrs	r3, r3, #16
 800dfa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfaa:	ee07 3a90 	vmov	s15, r3
 800dfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfba:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfc6:	ee17 2a90 	vmov	r2, s15
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dfce:	4b13      	ldr	r3, [pc, #76]	; (800e01c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd2:	0e1b      	lsrs	r3, r3, #24
 800dfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd8:	ee07 3a90 	vmov	s15, r3
 800dfdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dff4:	ee17 2a90 	vmov	r2, s15
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dffc:	e008      	b.n	800e010 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	609a      	str	r2, [r3, #8]
}
 800e010:	bf00      	nop
 800e012:	3724      	adds	r7, #36	; 0x24
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	58024400 	.word	0x58024400
 800e020:	03d09000 	.word	0x03d09000
 800e024:	46000000 	.word	0x46000000
 800e028:	4c742400 	.word	0x4c742400
 800e02c:	4a742400 	.word	0x4a742400
 800e030:	4bbebc20 	.word	0x4bbebc20

0800e034 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e03e:	2300      	movs	r3, #0
 800e040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e042:	4b53      	ldr	r3, [pc, #332]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e046:	f003 0303 	and.w	r3, r3, #3
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d101      	bne.n	800e052 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	e099      	b.n	800e186 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e052:	4b4f      	ldr	r3, [pc, #316]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a4e      	ldr	r2, [pc, #312]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e058:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e05c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e05e:	f7f8 f933 	bl	80062c8 <HAL_GetTick>
 800e062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e064:	e008      	b.n	800e078 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e066:	f7f8 f92f 	bl	80062c8 <HAL_GetTick>
 800e06a:	4602      	mov	r2, r0
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	2b02      	cmp	r3, #2
 800e072:	d901      	bls.n	800e078 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e074:	2303      	movs	r3, #3
 800e076:	e086      	b.n	800e186 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e078:	4b45      	ldr	r3, [pc, #276]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1f0      	bne.n	800e066 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e084:	4b42      	ldr	r3, [pc, #264]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e088:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	031b      	lsls	r3, r3, #12
 800e092:	493f      	ldr	r1, [pc, #252]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e094:	4313      	orrs	r3, r2
 800e096:	628b      	str	r3, [r1, #40]	; 0x28
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	3b01      	subs	r3, #1
 800e09e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	025b      	lsls	r3, r3, #9
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	041b      	lsls	r3, r3, #16
 800e0b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	061b      	lsls	r3, r3, #24
 800e0c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e0c8:	4931      	ldr	r1, [pc, #196]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e0ce:	4b30      	ldr	r3, [pc, #192]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	695b      	ldr	r3, [r3, #20]
 800e0da:	492d      	ldr	r1, [pc, #180]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e0e0:	4b2b      	ldr	r3, [pc, #172]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	f023 0220 	bic.w	r2, r3, #32
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	699b      	ldr	r3, [r3, #24]
 800e0ec:	4928      	ldr	r1, [pc, #160]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e0f2:	4b27      	ldr	r3, [pc, #156]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f6:	4a26      	ldr	r2, [pc, #152]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e0f8:	f023 0310 	bic.w	r3, r3, #16
 800e0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e0fe:	4b24      	ldr	r3, [pc, #144]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e102:	4b24      	ldr	r3, [pc, #144]	; (800e194 <RCCEx_PLL2_Config+0x160>)
 800e104:	4013      	ands	r3, r2
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	69d2      	ldr	r2, [r2, #28]
 800e10a:	00d2      	lsls	r2, r2, #3
 800e10c:	4920      	ldr	r1, [pc, #128]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e10e:	4313      	orrs	r3, r2
 800e110:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e112:	4b1f      	ldr	r3, [pc, #124]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e116:	4a1e      	ldr	r2, [pc, #120]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e118:	f043 0310 	orr.w	r3, r3, #16
 800e11c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d106      	bne.n	800e132 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e124:	4b1a      	ldr	r3, [pc, #104]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e128:	4a19      	ldr	r2, [pc, #100]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e12a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e12e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e130:	e00f      	b.n	800e152 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	2b01      	cmp	r3, #1
 800e136:	d106      	bne.n	800e146 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e138:	4b15      	ldr	r3, [pc, #84]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13c:	4a14      	ldr	r2, [pc, #80]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e13e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e142:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e144:	e005      	b.n	800e152 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14a:	4a11      	ldr	r2, [pc, #68]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e14c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e150:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e152:	4b0f      	ldr	r3, [pc, #60]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a0e      	ldr	r2, [pc, #56]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e158:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e15c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e15e:	f7f8 f8b3 	bl	80062c8 <HAL_GetTick>
 800e162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e164:	e008      	b.n	800e178 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e166:	f7f8 f8af 	bl	80062c8 <HAL_GetTick>
 800e16a:	4602      	mov	r2, r0
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	1ad3      	subs	r3, r2, r3
 800e170:	2b02      	cmp	r3, #2
 800e172:	d901      	bls.n	800e178 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e174:	2303      	movs	r3, #3
 800e176:	e006      	b.n	800e186 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <RCCEx_PLL2_Config+0x15c>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e180:	2b00      	cmp	r3, #0
 800e182:	d0f0      	beq.n	800e166 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e184:	7bfb      	ldrb	r3, [r7, #15]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	58024400 	.word	0x58024400
 800e194:	ffff0007 	.word	0xffff0007

0800e198 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e1a6:	4b53      	ldr	r3, [pc, #332]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1aa:	f003 0303 	and.w	r3, r3, #3
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d101      	bne.n	800e1b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	e099      	b.n	800e2ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e1b6:	4b4f      	ldr	r3, [pc, #316]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a4e      	ldr	r2, [pc, #312]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e1bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e1c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e1c2:	f7f8 f881 	bl	80062c8 <HAL_GetTick>
 800e1c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e1c8:	e008      	b.n	800e1dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e1ca:	f7f8 f87d 	bl	80062c8 <HAL_GetTick>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	1ad3      	subs	r3, r2, r3
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d901      	bls.n	800e1dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e1d8:	2303      	movs	r3, #3
 800e1da:	e086      	b.n	800e2ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e1dc:	4b45      	ldr	r3, [pc, #276]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1f0      	bne.n	800e1ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e1e8:	4b42      	ldr	r3, [pc, #264]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	051b      	lsls	r3, r3, #20
 800e1f6:	493f      	ldr	r1, [pc, #252]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	628b      	str	r3, [r1, #40]	; 0x28
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	3b01      	subs	r3, #1
 800e202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	025b      	lsls	r3, r3, #9
 800e20e:	b29b      	uxth	r3, r3
 800e210:	431a      	orrs	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	3b01      	subs	r3, #1
 800e218:	041b      	lsls	r3, r3, #16
 800e21a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e21e:	431a      	orrs	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	3b01      	subs	r3, #1
 800e226:	061b      	lsls	r3, r3, #24
 800e228:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e22c:	4931      	ldr	r1, [pc, #196]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e22e:	4313      	orrs	r3, r2
 800e230:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e232:	4b30      	ldr	r3, [pc, #192]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e236:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	492d      	ldr	r1, [pc, #180]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e240:	4313      	orrs	r3, r2
 800e242:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e244:	4b2b      	ldr	r3, [pc, #172]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	4928      	ldr	r1, [pc, #160]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e252:	4313      	orrs	r3, r2
 800e254:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e256:	4b27      	ldr	r3, [pc, #156]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e25a:	4a26      	ldr	r2, [pc, #152]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e25c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e262:	4b24      	ldr	r3, [pc, #144]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e266:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <RCCEx_PLL3_Config+0x160>)
 800e268:	4013      	ands	r3, r2
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	69d2      	ldr	r2, [r2, #28]
 800e26e:	00d2      	lsls	r2, r2, #3
 800e270:	4920      	ldr	r1, [pc, #128]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e272:	4313      	orrs	r3, r2
 800e274:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e276:	4b1f      	ldr	r3, [pc, #124]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27a:	4a1e      	ldr	r2, [pc, #120]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e27c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d106      	bne.n	800e296 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e288:	4b1a      	ldr	r3, [pc, #104]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28c:	4a19      	ldr	r2, [pc, #100]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e28e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e292:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e294:	e00f      	b.n	800e2b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d106      	bne.n	800e2aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e29c:	4b15      	ldr	r3, [pc, #84]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a0:	4a14      	ldr	r2, [pc, #80]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e2a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e2a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e2a8:	e005      	b.n	800e2b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e2aa:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ae:	4a11      	ldr	r2, [pc, #68]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e2b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e2b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e2b6:	4b0f      	ldr	r3, [pc, #60]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a0e      	ldr	r2, [pc, #56]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e2bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2c2:	f7f8 f801 	bl	80062c8 <HAL_GetTick>
 800e2c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e2c8:	e008      	b.n	800e2dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e2ca:	f7f7 fffd 	bl	80062c8 <HAL_GetTick>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d901      	bls.n	800e2dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e2d8:	2303      	movs	r3, #3
 800e2da:	e006      	b.n	800e2ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e2dc:	4b05      	ldr	r3, [pc, #20]	; (800e2f4 <RCCEx_PLL3_Config+0x15c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d0f0      	beq.n	800e2ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	58024400 	.word	0x58024400
 800e2f8:	ffff0007 	.word	0xffff0007

0800e2fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b08a      	sub	sp, #40	; 0x28
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	e075      	b.n	800e3fa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b00      	cmp	r3, #0
 800e318:	d105      	bne.n	800e326 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7f7 fb09 	bl	8005938 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2204      	movs	r2, #4
 800e32a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 f868 	bl	800e404 <HAL_SD_InitCard>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e05d      	b.n	800e3fa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e33e:	f107 0308 	add.w	r3, r7, #8
 800e342:	4619      	mov	r1, r3
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fbed 	bl	800eb24 <HAL_SD_GetCardStatus>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	e052      	b.n	800e3fa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e354:	7e3b      	ldrb	r3, [r7, #24]
 800e356:	b2db      	uxtb	r3, r3
 800e358:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e35a:	7e7b      	ldrb	r3, [r7, #25]
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e364:	2b01      	cmp	r3, #1
 800e366:	d10a      	bne.n	800e37e <HAL_SD_Init+0x82>
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d102      	bne.n	800e374 <HAL_SD_Init+0x78>
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d004      	beq.n	800e37e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e37a:	659a      	str	r2, [r3, #88]	; 0x58
 800e37c:	e00b      	b.n	800e396 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e382:	2b01      	cmp	r3, #1
 800e384:	d104      	bne.n	800e390 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e38c:	659a      	str	r2, [r3, #88]	; 0x58
 800e38e:	e002      	b.n	800e396 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 fcab 	bl	800ecf8 <HAL_SD_ConfigWideBusOperation>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e026      	b.n	800e3fa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e3ac:	f7f7 ff8c 	bl	80062c8 <HAL_GetTick>
 800e3b0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e3b2:	e011      	b.n	800e3d8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3b4:	f7f7 ff88 	bl	80062c8 <HAL_GetTick>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c2:	d109      	bne.n	800e3d8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e3ca:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e010      	b.n	800e3fa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 fd9f 	bl	800ef1c <HAL_SD_GetCardState>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b04      	cmp	r3, #4
 800e3e2:	d1e7      	bne.n	800e3b4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3728      	adds	r7, #40	; 0x28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
	...

0800e404 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b08d      	sub	sp, #52	; 0x34
 800e408:	af02      	add	r7, sp, #8
 800e40a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e40c:	2300      	movs	r3, #0
 800e40e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e410:	2300      	movs	r3, #0
 800e412:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e414:	2300      	movs	r3, #0
 800e416:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e418:	2300      	movs	r3, #0
 800e41a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e41c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e420:	f04f 0100 	mov.w	r1, #0
 800e424:	f7fe fd24 	bl	800ce70 <HAL_RCCEx_GetPeriphCLKFreq>
 800e428:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d109      	bne.n	800e444 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e43e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	e070      	b.n	800e526 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	0a1b      	lsrs	r3, r3, #8
 800e448:	4a39      	ldr	r2, [pc, #228]	; (800e530 <HAL_SD_InitCard+0x12c>)
 800e44a:	fba2 2303 	umull	r2, r3, r2, r3
 800e44e:	091b      	lsrs	r3, r3, #4
 800e450:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681c      	ldr	r4, [r3, #0]
 800e456:	466a      	mov	r2, sp
 800e458:	f107 0318 	add.w	r3, r7, #24
 800e45c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e460:	e882 0003 	stmia.w	r2, {r0, r1}
 800e464:	f107 030c 	add.w	r3, r7, #12
 800e468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e46a:	4620      	mov	r0, r4
 800e46c:	f001 fc1a 	bl	800fca4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4618      	mov	r0, r3
 800e476:	f001 fc4c 	bl	800fd12 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d005      	beq.n	800e48c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	005b      	lsls	r3, r3, #1
 800e484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e486:	fbb2 f3f3 	udiv	r3, r2, r3
 800e48a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d007      	beq.n	800e4a2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e492:	4a28      	ldr	r2, [pc, #160]	; (800e534 <HAL_SD_InitCard+0x130>)
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	fbb2 f3f3 	udiv	r3, r2, r3
 800e49a:	3301      	adds	r3, #1
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7f7 ff1f 	bl	80062e0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 fe28 	bl	800f0f8 <SD_PowerON>
 800e4a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00b      	beq.n	800e4c8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4bc:	6a3b      	ldr	r3, [r7, #32]
 800e4be:	431a      	orrs	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e02e      	b.n	800e526 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fd47 	bl	800ef5c <SD_InitCard>
 800e4ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00b      	beq.n	800e4ee <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2201      	movs	r2, #1
 800e4da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	431a      	orrs	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e01b      	b.n	800e526 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f001 fca0 	bl	800fe3c <SDMMC_CmdBlockLength>
 800e4fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4fe:	6a3b      	ldr	r3, [r7, #32]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00f      	beq.n	800e524 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a0b      	ldr	r2, [pc, #44]	; (800e538 <HAL_SD_InitCard+0x134>)
 800e50a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	431a      	orrs	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	e000      	b.n	800e526 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	372c      	adds	r7, #44	; 0x2c
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd90      	pop	{r4, r7, pc}
 800e52e:	bf00      	nop
 800e530:	014f8b59 	.word	0x014f8b59
 800e534:	00012110 	.word	0x00012110
 800e538:	1fe00fff 	.word	0x1fe00fff

0800e53c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08c      	sub	sp, #48	; 0x30
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
 800e548:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d107      	bne.n	800e564 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e558:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e560:	2301      	movs	r3, #1
 800e562:	e08d      	b.n	800e680 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	f040 8086 	bne.w	800e67e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	441a      	add	r2, r3
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e582:	429a      	cmp	r2, r3
 800e584:	d907      	bls.n	800e596 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e58a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e074      	b.n	800e680 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2203      	movs	r2, #3
 800e59a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	68ba      	ldr	r2, [r7, #8]
 800e5aa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	025a      	lsls	r2, r3, #9
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d002      	beq.n	800e5c2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	025b      	lsls	r3, r3, #9
 800e5c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	025b      	lsls	r3, r3, #9
 800e5cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e5ce:	2390      	movs	r3, #144	; 0x90
 800e5d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f107 0210 	add.w	r2, r7, #16
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f001 fbfb 	bl	800fde4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	68da      	ldr	r2, [r3, #12]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5fc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68ba      	ldr	r2, [r7, #8]
 800e604:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2201      	movs	r2, #1
 800e60c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d90a      	bls.n	800e62a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2282      	movs	r2, #130	; 0x82
 800e618:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e620:	4618      	mov	r0, r3
 800e622:	f001 fc51 	bl	800fec8 <SDMMC_CmdReadMultiBlock>
 800e626:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e628:	e009      	b.n	800e63e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2281      	movs	r2, #129	; 0x81
 800e62e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e636:	4618      	mov	r0, r3
 800e638:	f001 fc23 	bl	800fe82 <SDMMC_CmdReadSingleBlock>
 800e63c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e640:	2b00      	cmp	r3, #0
 800e642:	d012      	beq.n	800e66a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a0f      	ldr	r2, [pc, #60]	; (800e688 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e64a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	431a      	orrs	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e00a      	b.n	800e680 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e678:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e67a:	2300      	movs	r3, #0
 800e67c:	e000      	b.n	800e680 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e67e:	2302      	movs	r3, #2
  }
}
 800e680:	4618      	mov	r0, r3
 800e682:	3730      	adds	r7, #48	; 0x30
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	1fe00fff 	.word	0x1fe00fff

0800e68c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b08c      	sub	sp, #48	; 0x30
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d107      	bne.n	800e6b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e08d      	b.n	800e7d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	f040 8086 	bne.w	800e7ce <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e6c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	441a      	add	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d907      	bls.n	800e6e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e074      	b.n	800e7d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2203      	movs	r2, #3
 800e6ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	025a      	lsls	r2, r3, #9
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d002      	beq.n	800e712 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70e:	025b      	lsls	r3, r3, #9
 800e710:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e712:	f04f 33ff 	mov.w	r3, #4294967295
 800e716:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	025b      	lsls	r3, r3, #9
 800e71c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e71e:	2390      	movs	r3, #144	; 0x90
 800e720:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e722:	2300      	movs	r3, #0
 800e724:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e726:	2300      	movs	r3, #0
 800e728:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e72a:	2300      	movs	r3, #0
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f107 0210 	add.w	r2, r7, #16
 800e736:	4611      	mov	r1, r2
 800e738:	4618      	mov	r0, r3
 800e73a:	f001 fb53 	bl	800fde4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	68da      	ldr	r2, [r3, #12]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e74c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68ba      	ldr	r2, [r7, #8]
 800e754:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2201      	movs	r2, #1
 800e75c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	2b01      	cmp	r3, #1
 800e762:	d90a      	bls.n	800e77a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	22a0      	movs	r2, #160	; 0xa0
 800e768:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e770:	4618      	mov	r0, r3
 800e772:	f001 fbef 	bl	800ff54 <SDMMC_CmdWriteMultiBlock>
 800e776:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e778:	e009      	b.n	800e78e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2290      	movs	r2, #144	; 0x90
 800e77e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e786:	4618      	mov	r0, r3
 800e788:	f001 fbc1 	bl	800ff0e <SDMMC_CmdWriteSingleBlock>
 800e78c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e790:	2b00      	cmp	r3, #0
 800e792:	d012      	beq.n	800e7ba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a0f      	ldr	r2, [pc, #60]	; (800e7d8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e79a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a2:	431a      	orrs	r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e00a      	b.n	800e7d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e7c8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e000      	b.n	800e7d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e7ce:	2302      	movs	r3, #2
  }
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3730      	adds	r7, #48	; 0x30
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	1fe00fff 	.word	0x1fe00fff

0800e7dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7ea:	0f9b      	lsrs	r3, r3, #30
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7f6:	0e9b      	lsrs	r3, r3, #26
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	f003 030f 	and.w	r3, r3, #15
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e808:	0e1b      	lsrs	r3, r3, #24
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	f003 0303 	and.w	r3, r3, #3
 800e810:	b2da      	uxtb	r2, r3
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e81a:	0c1b      	lsrs	r3, r3, #16
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e826:	0a1b      	lsrs	r3, r3, #8
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e832:	b2da      	uxtb	r2, r3
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e83c:	0d1b      	lsrs	r3, r3, #20
 800e83e:	b29a      	uxth	r2, r3
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e848:	0c1b      	lsrs	r3, r3, #16
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	f003 030f 	and.w	r3, r3, #15
 800e850:	b2da      	uxtb	r2, r3
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e85a:	0bdb      	lsrs	r3, r3, #15
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	b2da      	uxtb	r2, r3
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e86c:	0b9b      	lsrs	r3, r3, #14
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	f003 0301 	and.w	r3, r3, #1
 800e874:	b2da      	uxtb	r2, r3
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e87e:	0b5b      	lsrs	r3, r3, #13
 800e880:	b2db      	uxtb	r3, r3
 800e882:	f003 0301 	and.w	r3, r3, #1
 800e886:	b2da      	uxtb	r2, r3
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e890:	0b1b      	lsrs	r3, r3, #12
 800e892:	b2db      	uxtb	r3, r3
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d163      	bne.n	800e974 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8b0:	009a      	lsls	r2, r3, #2
 800e8b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e8b6:	4013      	ands	r3, r2
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e8bc:	0f92      	lsrs	r2, r2, #30
 800e8be:	431a      	orrs	r2, r3
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8c8:	0edb      	lsrs	r3, r3, #27
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	f003 0307 	and.w	r3, r3, #7
 800e8d0:	b2da      	uxtb	r2, r3
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8da:	0e1b      	lsrs	r3, r3, #24
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	f003 0307 	and.w	r3, r3, #7
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ec:	0d5b      	lsrs	r3, r3, #21
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	f003 0307 	and.w	r3, r3, #7
 800e8f4:	b2da      	uxtb	r2, r3
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8fe:	0c9b      	lsrs	r3, r3, #18
 800e900:	b2db      	uxtb	r3, r3
 800e902:	f003 0307 	and.w	r3, r3, #7
 800e906:	b2da      	uxtb	r2, r3
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e910:	0bdb      	lsrs	r3, r3, #15
 800e912:	b2db      	uxtb	r3, r3
 800e914:	f003 0307 	and.w	r3, r3, #7
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	7e1b      	ldrb	r3, [r3, #24]
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f003 0307 	and.w	r3, r3, #7
 800e932:	3302      	adds	r3, #2
 800e934:	2201      	movs	r2, #1
 800e936:	fa02 f303 	lsl.w	r3, r2, r3
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e93e:	fb03 f202 	mul.w	r2, r3, r2
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	7a1b      	ldrb	r3, [r3, #8]
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	f003 030f 	and.w	r3, r3, #15
 800e950:	2201      	movs	r2, #1
 800e952:	409a      	lsls	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e960:	0a52      	lsrs	r2, r2, #9
 800e962:	fb03 f202 	mul.w	r2, r3, r2
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e970:	655a      	str	r2, [r3, #84]	; 0x54
 800e972:	e031      	b.n	800e9d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d11d      	bne.n	800e9b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e980:	041b      	lsls	r3, r3, #16
 800e982:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e98a:	0c1b      	lsrs	r3, r3, #16
 800e98c:	431a      	orrs	r2, r3
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	691b      	ldr	r3, [r3, #16]
 800e996:	3301      	adds	r3, #1
 800e998:	029a      	lsls	r2, r3, #10
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	655a      	str	r2, [r3, #84]	; 0x54
 800e9b6:	e00f      	b.n	800e9d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a58      	ldr	r2, [pc, #352]	; (800eb20 <HAL_SD_GetCardCSD+0x344>)
 800e9be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	e09d      	b.n	800eb14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9dc:	0b9b      	lsrs	r3, r3, #14
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9ee:	09db      	lsrs	r3, r3, #7
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea10:	0fdb      	lsrs	r3, r3, #31
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea1c:	0f5b      	lsrs	r3, r3, #29
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	f003 0303 	and.w	r3, r3, #3
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea2e:	0e9b      	lsrs	r3, r3, #26
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	f003 0307 	and.w	r3, r3, #7
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea40:	0d9b      	lsrs	r3, r3, #22
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f003 030f 	and.w	r3, r3, #15
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea52:	0d5b      	lsrs	r3, r3, #21
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	f003 0301 	and.w	r3, r3, #1
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea6e:	0c1b      	lsrs	r3, r3, #16
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea82:	0bdb      	lsrs	r3, r3, #15
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea96:	0b9b      	lsrs	r3, r3, #14
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	f003 0301 	and.w	r3, r3, #1
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaaa:	0b5b      	lsrs	r3, r3, #13
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eabe:	0b1b      	lsrs	r3, r3, #12
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	f003 0301 	and.w	r3, r3, #1
 800eac6:	b2da      	uxtb	r2, r3
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ead2:	0a9b      	lsrs	r3, r3, #10
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	f003 0303 	and.w	r3, r3, #3
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eae6:	0a1b      	lsrs	r3, r3, #8
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	f003 0303 	and.w	r3, r3, #3
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eafa:	085b      	lsrs	r3, r3, #1
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	1fe00fff 	.word	0x1fe00fff

0800eb24 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b094      	sub	sp, #80	; 0x50
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b03      	cmp	r3, #3
 800eb3e:	d101      	bne.n	800eb44 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e0a7      	b.n	800ec94 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800eb44:	f107 0308 	add.w	r3, r7, #8
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 fb62 	bl	800f214 <SD_SendSDStatus>
 800eb50:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d011      	beq.n	800eb7c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a4f      	ldr	r2, [pc, #316]	; (800ec9c <HAL_SD_GetCardStatus+0x178>)
 800eb5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb66:	431a      	orrs	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800eb7a:	e070      	b.n	800ec5e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	099b      	lsrs	r3, r3, #6
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	f003 0303 	and.w	r3, r3, #3
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	095b      	lsrs	r3, r3, #5
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	0a1b      	lsrs	r3, r3, #8
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	0e1b      	lsrs	r3, r3, #24
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	061a      	lsls	r2, r3, #24
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ebc2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	0a1b      	lsrs	r3, r3, #8
 800ebc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ebcc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	0e1b      	lsrs	r3, r3, #24
 800ebd2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	0a1b      	lsrs	r3, r3, #8
 800ebe4:	b2da      	uxtb	r2, r3
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	0d1b      	lsrs	r3, r3, #20
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	f003 030f 	and.w	r3, r3, #15
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	0c1b      	lsrs	r3, r3, #16
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	0a9b      	lsrs	r3, r3, #10
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec20:	b2da      	uxtb	r2, r3
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	0a1b      	lsrs	r3, r3, #8
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	f003 0303 	and.w	r3, r3, #3
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	091b      	lsrs	r3, r3, #4
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	f003 030f 	and.w	r3, r3, #15
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	f003 030f 	and.w	r3, r3, #15
 800ec4e:	b2da      	uxtb	r2, r3
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	0e1b      	lsrs	r3, r3, #24
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ec66:	4618      	mov	r0, r3
 800ec68:	f001 f8e8 	bl	800fe3c <SDMMC_CmdBlockLength>
 800ec6c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00d      	beq.n	800ec90 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a08      	ldr	r2, [pc, #32]	; (800ec9c <HAL_SD_GetCardStatus+0x178>)
 800ec7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec80:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2201      	movs	r2, #1
 800ec86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ec90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3750      	adds	r7, #80	; 0x50
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	1fe00fff 	.word	0x1fe00fff

0800eca0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ecf8:	b590      	push	{r4, r7, lr}
 800ecfa:	b08d      	sub	sp, #52	; 0x34
 800ecfc:	af02      	add	r7, sp, #8
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ed02:	2300      	movs	r3, #0
 800ed04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2203      	movs	r2, #3
 800ed0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	2b03      	cmp	r3, #3
 800ed16:	d02e      	beq.n	800ed76 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed1e:	d106      	bne.n	800ed2e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	635a      	str	r2, [r3, #52]	; 0x34
 800ed2c:	e029      	b.n	800ed82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed34:	d10a      	bne.n	800ed4c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fb64 	bl	800f404 <SD_WideBus_Enable>
 800ed3c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	431a      	orrs	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	635a      	str	r2, [r3, #52]	; 0x34
 800ed4a:	e01a      	b.n	800ed82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d10a      	bne.n	800ed68 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fba1 	bl	800f49a <SD_WideBus_Disable>
 800ed58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed5e:	6a3b      	ldr	r3, [r7, #32]
 800ed60:	431a      	orrs	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	635a      	str	r2, [r3, #52]	; 0x34
 800ed66:	e00c      	b.n	800ed82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	635a      	str	r2, [r3, #52]	; 0x34
 800ed74:	e005      	b.n	800ed82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d007      	beq.n	800ed9a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a5f      	ldr	r2, [pc, #380]	; (800ef0c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ed90:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed98:	e096      	b.n	800eec8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ed9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ed9e:	f04f 0100 	mov.w	r1, #0
 800eda2:	f7fe f865 	bl	800ce70 <HAL_RCCEx_GetPeriphCLKFreq>
 800eda6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 8083 	beq.w	800eeb6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	695a      	ldr	r2, [r3, #20]
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	4950      	ldr	r1, [pc, #320]	; (800ef10 <HAL_SD_ConfigWideBusOperation+0x218>)
 800edce:	fba1 1303 	umull	r1, r3, r1, r3
 800edd2:	0e1b      	lsrs	r3, r3, #24
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d303      	bcc.n	800ede0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	61bb      	str	r3, [r7, #24]
 800edde:	e05a      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ede4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ede8:	d103      	bne.n	800edf2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	695b      	ldr	r3, [r3, #20]
 800edee:	61bb      	str	r3, [r7, #24]
 800edf0:	e051      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edfa:	d126      	bne.n	800ee4a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	695b      	ldr	r3, [r3, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d10e      	bne.n	800ee22 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	4a43      	ldr	r2, [pc, #268]	; (800ef14 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d906      	bls.n	800ee1a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	4a40      	ldr	r2, [pc, #256]	; (800ef10 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee10:	fba2 2303 	umull	r2, r3, r2, r3
 800ee14:	0e5b      	lsrs	r3, r3, #25
 800ee16:	61bb      	str	r3, [r7, #24]
 800ee18:	e03d      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	61bb      	str	r3, [r7, #24]
 800ee20:	e039      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	69fa      	ldr	r2, [r7, #28]
 800ee2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee2e:	4a39      	ldr	r2, [pc, #228]	; (800ef14 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d906      	bls.n	800ee42 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	4a36      	ldr	r2, [pc, #216]	; (800ef10 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee38:	fba2 2303 	umull	r2, r3, r2, r3
 800ee3c:	0e5b      	lsrs	r3, r3, #25
 800ee3e:	61bb      	str	r3, [r7, #24]
 800ee40:	e029      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	695b      	ldr	r3, [r3, #20]
 800ee46:	61bb      	str	r3, [r7, #24]
 800ee48:	e025      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10e      	bne.n	800ee70 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	4a30      	ldr	r2, [pc, #192]	; (800ef18 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d906      	bls.n	800ee68 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	4a2c      	ldr	r2, [pc, #176]	; (800ef10 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee62:	0e1b      	lsrs	r3, r3, #24
 800ee64:	61bb      	str	r3, [r7, #24]
 800ee66:	e016      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	695b      	ldr	r3, [r3, #20]
 800ee6c:	61bb      	str	r3, [r7, #24]
 800ee6e:	e012      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	69fa      	ldr	r2, [r7, #28]
 800ee78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee7c:	4a26      	ldr	r2, [pc, #152]	; (800ef18 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d906      	bls.n	800ee90 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	4a22      	ldr	r2, [pc, #136]	; (800ef10 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee86:	fba2 2303 	umull	r2, r3, r2, r3
 800ee8a:	0e1b      	lsrs	r3, r3, #24
 800ee8c:	61bb      	str	r3, [r7, #24]
 800ee8e:	e002      	b.n	800ee96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681c      	ldr	r4, [r3, #0]
 800ee9a:	466a      	mov	r2, sp
 800ee9c:	f107 0314 	add.w	r3, r7, #20
 800eea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eea4:	e882 0003 	stmia.w	r2, {r0, r1}
 800eea8:	f107 0308 	add.w	r3, r7, #8
 800eeac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f000 fef8 	bl	800fca4 <SDMMC_Init>
 800eeb4:	e008      	b.n	800eec8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eed0:	4618      	mov	r0, r3
 800eed2:	f000 ffb3 	bl	800fe3c <SDMMC_CmdBlockLength>
 800eed6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eed8:	6a3b      	ldr	r3, [r7, #32]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00c      	beq.n	800eef8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a0a      	ldr	r2, [pc, #40]	; (800ef0c <HAL_SD_ConfigWideBusOperation+0x214>)
 800eee4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	431a      	orrs	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800eef2:	2301      	movs	r3, #1
 800eef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2201      	movs	r2, #1
 800eefc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ef00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	372c      	adds	r7, #44	; 0x2c
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd90      	pop	{r4, r7, pc}
 800ef0c:	1fe00fff 	.word	0x1fe00fff
 800ef10:	55e63b89 	.word	0x55e63b89
 800ef14:	02faf080 	.word	0x02faf080
 800ef18:	017d7840 	.word	0x017d7840

0800ef1c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ef24:	2300      	movs	r3, #0
 800ef26:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ef28:	f107 030c 	add.w	r3, r7, #12
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 fa40 	bl	800f3b4 <SD_SendStatus>
 800ef34:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d005      	beq.n	800ef48 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	431a      	orrs	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	0a5b      	lsrs	r3, r3, #9
 800ef4c:	f003 030f 	and.w	r3, r3, #15
 800ef50:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ef52:	693b      	ldr	r3, [r7, #16]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b090      	sub	sp, #64	; 0x40
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ef64:	2300      	movs	r3, #0
 800ef66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ef68:	f7f7 f9ae 	bl	80062c8 <HAL_GetTick>
 800ef6c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 fede 	bl	800fd34 <SDMMC_GetPowerState>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d102      	bne.n	800ef84 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ef7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ef82:	e0b5      	b.n	800f0f0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d02e      	beq.n	800efea <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f001 f8eb 	bl	801016c <SDMMC_CmdSendCID>
 800ef96:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <SD_InitCard+0x46>
    {
      return errorstate;
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa0:	e0a6      	b.n	800f0f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2100      	movs	r1, #0
 800efa8:	4618      	mov	r0, r3
 800efaa:	f000 ff08 	bl	800fdbe <SDMMC_GetResponse>
 800efae:	4602      	mov	r2, r0
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2104      	movs	r1, #4
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 feff 	bl	800fdbe <SDMMC_GetResponse>
 800efc0:	4602      	mov	r2, r0
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2108      	movs	r1, #8
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 fef6 	bl	800fdbe <SDMMC_GetResponse>
 800efd2:	4602      	mov	r2, r0
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	210c      	movs	r1, #12
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 feed 	bl	800fdbe <SDMMC_GetResponse>
 800efe4:	4602      	mov	r2, r0
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efee:	2b03      	cmp	r3, #3
 800eff0:	d01d      	beq.n	800f02e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800eff2:	e019      	b.n	800f028 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f107 020a 	add.w	r2, r7, #10
 800effc:	4611      	mov	r1, r2
 800effe:	4618      	mov	r0, r3
 800f000:	f001 f8f3 	bl	80101ea <SDMMC_CmdSetRelAdd>
 800f004:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <SD_InitCard+0xb4>
      {
        return errorstate;
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	e06f      	b.n	800f0f0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f010:	f7f7 f95a 	bl	80062c8 <HAL_GetTick>
 800f014:	4602      	mov	r2, r0
 800f016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	f241 3287 	movw	r2, #4999	; 0x1387
 800f01e:	4293      	cmp	r3, r2
 800f020:	d902      	bls.n	800f028 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f022:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f026:	e063      	b.n	800f0f0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f028:	897b      	ldrh	r3, [r7, #10]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d0e2      	beq.n	800eff4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f032:	2b03      	cmp	r3, #3
 800f034:	d036      	beq.n	800f0a4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f036:	897b      	ldrh	r3, [r7, #10]
 800f038:	461a      	mov	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f046:	041b      	lsls	r3, r3, #16
 800f048:	4619      	mov	r1, r3
 800f04a:	4610      	mov	r0, r2
 800f04c:	f001 f8ad 	bl	80101aa <SDMMC_CmdSendCSD>
 800f050:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <SD_InitCard+0x100>
    {
      return errorstate;
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	e049      	b.n	800f0f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2100      	movs	r1, #0
 800f062:	4618      	mov	r0, r3
 800f064:	f000 feab 	bl	800fdbe <SDMMC_GetResponse>
 800f068:	4602      	mov	r2, r0
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2104      	movs	r1, #4
 800f074:	4618      	mov	r0, r3
 800f076:	f000 fea2 	bl	800fdbe <SDMMC_GetResponse>
 800f07a:	4602      	mov	r2, r0
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2108      	movs	r1, #8
 800f086:	4618      	mov	r0, r3
 800f088:	f000 fe99 	bl	800fdbe <SDMMC_GetResponse>
 800f08c:	4602      	mov	r2, r0
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	210c      	movs	r1, #12
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 fe90 	bl	800fdbe <SDMMC_GetResponse>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2104      	movs	r1, #4
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f000 fe87 	bl	800fdbe <SDMMC_GetResponse>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	0d1a      	lsrs	r2, r3, #20
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f0b8:	f107 030c 	add.w	r3, r7, #12
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff fb8c 	bl	800e7dc <HAL_SD_GetCardCSD>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d002      	beq.n	800f0d0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0ce:	e00f      	b.n	800f0f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0d8:	041b      	lsls	r3, r3, #16
 800f0da:	4619      	mov	r1, r3
 800f0dc:	4610      	mov	r0, r2
 800f0de:	f000 ff5c 	bl	800ff9a <SDMMC_CmdSelDesel>
 800f0e2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <SD_InitCard+0x192>
  {
    return errorstate;
 800f0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ec:	e000      	b.n	800f0f0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3740      	adds	r7, #64	; 0x40
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b086      	sub	sp, #24
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f100:	2300      	movs	r3, #0
 800f102:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f104:	2300      	movs	r3, #0
 800f106:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f108:	2300      	movs	r3, #0
 800f10a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f000 ff65 	bl	800ffe0 <SDMMC_CmdGoIdleState>
 800f116:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d001      	beq.n	800f122 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	e072      	b.n	800f208 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4618      	mov	r0, r3
 800f128:	f000 ff78 	bl	801001c <SDMMC_CmdOperCond>
 800f12c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f134:	d10d      	bne.n	800f152 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4618      	mov	r0, r3
 800f142:	f000 ff4d 	bl	800ffe0 <SDMMC_CmdGoIdleState>
 800f146:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d004      	beq.n	800f158 <SD_PowerON+0x60>
    {
      return errorstate;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	e05a      	b.n	800f208 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2201      	movs	r2, #1
 800f156:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d137      	bne.n	800f1d0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2100      	movs	r1, #0
 800f166:	4618      	mov	r0, r3
 800f168:	f000 ff78 	bl	801005c <SDMMC_CmdAppCommand>
 800f16c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d02d      	beq.n	800f1d0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f178:	e046      	b.n	800f208 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2100      	movs	r1, #0
 800f180:	4618      	mov	r0, r3
 800f182:	f000 ff6b 	bl	801005c <SDMMC_CmdAppCommand>
 800f186:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <SD_PowerON+0x9a>
    {
      return errorstate;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	e03a      	b.n	800f208 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	491e      	ldr	r1, [pc, #120]	; (800f210 <SD_PowerON+0x118>)
 800f198:	4618      	mov	r0, r3
 800f19a:	f000 ff82 	bl	80100a2 <SDMMC_CmdAppOperCommand>
 800f19e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1aa:	e02d      	b.n	800f208 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 fe03 	bl	800fdbe <SDMMC_GetResponse>
 800f1b8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	0fdb      	lsrs	r3, r3, #31
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d101      	bne.n	800f1c6 <SD_PowerON+0xce>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e000      	b.n	800f1c8 <SD_PowerON+0xd0>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	613b      	str	r3, [r7, #16]

    count++;
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d802      	bhi.n	800f1e0 <SD_PowerON+0xe8>
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d0cc      	beq.n	800f17a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d902      	bls.n	800f1f0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f1ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f1ee:	e00b      	b.n	800f208 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d002      	beq.n	800f206 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3718      	adds	r7, #24
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	c1100000 	.word	0xc1100000

0800f214 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b08c      	sub	sp, #48	; 0x30
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f21e:	f7f7 f853 	bl	80062c8 <HAL_GetTick>
 800f222:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2100      	movs	r1, #0
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 fdc5 	bl	800fdbe <SDMMC_GetResponse>
 800f234:	4603      	mov	r3, r0
 800f236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f23a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f23e:	d102      	bne.n	800f246 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f240:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f244:	e0b0      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2140      	movs	r1, #64	; 0x40
 800f24c:	4618      	mov	r0, r3
 800f24e:	f000 fdf5 	bl	800fe3c <SDMMC_CmdBlockLength>
 800f252:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d005      	beq.n	800f266 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	e0a0      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f26e:	041b      	lsls	r3, r3, #16
 800f270:	4619      	mov	r1, r3
 800f272:	4610      	mov	r0, r2
 800f274:	f000 fef2 	bl	801005c <SDMMC_CmdAppCommand>
 800f278:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f27a:	6a3b      	ldr	r3, [r7, #32]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d005      	beq.n	800f28c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f288:	6a3b      	ldr	r3, [r7, #32]
 800f28a:	e08d      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f292:	2340      	movs	r3, #64	; 0x40
 800f294:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f296:	2360      	movs	r3, #96	; 0x60
 800f298:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f29a:	2302      	movs	r3, #2
 800f29c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f107 0208 	add.w	r2, r7, #8
 800f2ae:	4611      	mov	r1, r2
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f000 fd97 	bl	800fde4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f000 ffda 	bl	8010274 <SDMMC_CmdStatusRegister>
 800f2c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d02b      	beq.n	800f320 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f2d0:	6a3b      	ldr	r3, [r7, #32]
 800f2d2:	e069      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d013      	beq.n	800f30a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2e6:	e00d      	b.n	800f304 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f000 fd03 	bl	800fcf8 <SDMMC_ReadFIFO>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	601a      	str	r2, [r3, #0]
        pData++;
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	3304      	adds	r3, #4
 800f2fc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f300:	3301      	adds	r3, #1
 800f302:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	2b07      	cmp	r3, #7
 800f308:	d9ee      	bls.n	800f2e8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f30a:	f7f6 ffdd 	bl	80062c8 <HAL_GetTick>
 800f30e:	4602      	mov	r2, r0
 800f310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f312:	1ad3      	subs	r3, r2, r3
 800f314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f318:	d102      	bne.n	800f320 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f31a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f31e:	e043      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f326:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0d2      	beq.n	800f2d4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f334:	f003 0308 	and.w	r3, r3, #8
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f33c:	2308      	movs	r3, #8
 800f33e:	e033      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f346:	f003 0302 	and.w	r3, r3, #2
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d001      	beq.n	800f352 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f34e:	2302      	movs	r3, #2
 800f350:	e02a      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f358:	f003 0320 	and.w	r3, r3, #32
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d017      	beq.n	800f390 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f360:	2320      	movs	r3, #32
 800f362:	e021      	b.n	800f3a8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 fcc5 	bl	800fcf8 <SDMMC_ReadFIFO>
 800f36e:	4602      	mov	r2, r0
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	601a      	str	r2, [r3, #0]
    pData++;
 800f374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f376:	3304      	adds	r3, #4
 800f378:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f37a:	f7f6 ffa5 	bl	80062c8 <HAL_GetTick>
 800f37e:	4602      	mov	r2, r0
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f388:	d102      	bne.n	800f390 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f38a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f38e:	e00b      	b.n	800f3a8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1e2      	bne.n	800f364 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a03      	ldr	r2, [pc, #12]	; (800f3b0 <SD_SendSDStatus+0x19c>)
 800f3a4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3730      	adds	r7, #48	; 0x30
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	18000f3a 	.word	0x18000f3a

0800f3b4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b084      	sub	sp, #16
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d102      	bne.n	800f3ca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f3c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f3c8:	e018      	b.n	800f3fc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3d2:	041b      	lsls	r3, r3, #16
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4610      	mov	r0, r2
 800f3d8:	f000 ff29 	bl	801022e <SDMMC_CmdSendStatus>
 800f3dc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	e009      	b.n	800f3fc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f000 fce5 	bl	800fdbe <SDMMC_GetResponse>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f3fa:	2300      	movs	r3, #0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f40c:	2300      	movs	r3, #0
 800f40e:	60fb      	str	r3, [r7, #12]
 800f410:	2300      	movs	r3, #0
 800f412:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2100      	movs	r1, #0
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 fccf 	bl	800fdbe <SDMMC_GetResponse>
 800f420:	4603      	mov	r3, r0
 800f422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f42a:	d102      	bne.n	800f432 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f42c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f430:	e02f      	b.n	800f492 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f432:	f107 030c 	add.w	r3, r7, #12
 800f436:	4619      	mov	r1, r3
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 f879 	bl	800f530 <SD_FindSCR>
 800f43e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d001      	beq.n	800f44a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	e023      	b.n	800f492 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f450:	2b00      	cmp	r3, #0
 800f452:	d01c      	beq.n	800f48e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f45c:	041b      	lsls	r3, r3, #16
 800f45e:	4619      	mov	r1, r3
 800f460:	4610      	mov	r0, r2
 800f462:	f000 fdfb 	bl	801005c <SDMMC_CmdAppCommand>
 800f466:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	e00f      	b.n	800f492 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2102      	movs	r1, #2
 800f478:	4618      	mov	r0, r3
 800f47a:	f000 fe32 	bl	80100e2 <SDMMC_CmdBusWidth>
 800f47e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d001      	beq.n	800f48a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	e003      	b.n	800f492 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	e001      	b.n	800f492 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f48e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f492:	4618      	mov	r0, r3
 800f494:	3718      	adds	r7, #24
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b086      	sub	sp, #24
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60fb      	str	r3, [r7, #12]
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f000 fc84 	bl	800fdbe <SDMMC_GetResponse>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4c0:	d102      	bne.n	800f4c8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f4c6:	e02f      	b.n	800f528 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f4c8:	f107 030c 	add.w	r3, r7, #12
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 f82e 	bl	800f530 <SD_FindSCR>
 800f4d4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	e023      	b.n	800f528 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d01c      	beq.n	800f524 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f2:	041b      	lsls	r3, r3, #16
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	4610      	mov	r0, r2
 800f4f8:	f000 fdb0 	bl	801005c <SDMMC_CmdAppCommand>
 800f4fc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	e00f      	b.n	800f528 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2100      	movs	r1, #0
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 fde7 	bl	80100e2 <SDMMC_CmdBusWidth>
 800f514:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	e003      	b.n	800f528 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f520:	2300      	movs	r3, #0
 800f522:	e001      	b.n	800f528 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b08e      	sub	sp, #56	; 0x38
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f53a:	f7f6 fec5 	bl	80062c8 <HAL_GetTick>
 800f53e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f540:	2300      	movs	r3, #0
 800f542:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f544:	2300      	movs	r3, #0
 800f546:	60bb      	str	r3, [r7, #8]
 800f548:	2300      	movs	r3, #0
 800f54a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2108      	movs	r1, #8
 800f556:	4618      	mov	r0, r3
 800f558:	f000 fc70 	bl	800fe3c <SDMMC_CmdBlockLength>
 800f55c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f566:	e0ad      	b.n	800f6c4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f570:	041b      	lsls	r3, r3, #16
 800f572:	4619      	mov	r1, r3
 800f574:	4610      	mov	r0, r2
 800f576:	f000 fd71 	bl	801005c <SDMMC_CmdAppCommand>
 800f57a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f584:	e09e      	b.n	800f6c4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f586:	f04f 33ff 	mov.w	r3, #4294967295
 800f58a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f58c:	2308      	movs	r3, #8
 800f58e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f590:	2330      	movs	r3, #48	; 0x30
 800f592:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f594:	2302      	movs	r3, #2
 800f596:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f598:	2300      	movs	r3, #0
 800f59a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f59c:	2301      	movs	r3, #1
 800f59e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f107 0210 	add.w	r2, r7, #16
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f000 fc1a 	bl	800fde4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f000 fdb7 	bl	8010128 <SDMMC_CmdSendSCR>
 800f5ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d027      	beq.n	800f612 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c4:	e07e      	b.n	800f6c4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d113      	bne.n	800f5fc <SD_FindSCR+0xcc>
 800f5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d110      	bne.n	800f5fc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 fb8a 	bl	800fcf8 <SDMMC_ReadFIFO>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 fb83 	bl	800fcf8 <SDMMC_ReadFIFO>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	60fb      	str	r3, [r7, #12]
      index++;
 800f5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f5fc:	f7f6 fe64 	bl	80062c8 <HAL_GetTick>
 800f600:	4602      	mov	r2, r0
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60a:	d102      	bne.n	800f612 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f60c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f610:	e058      	b.n	800f6c4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f618:	f240 532a 	movw	r3, #1322	; 0x52a
 800f61c:	4013      	ands	r3, r2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d0d1      	beq.n	800f5c6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f628:	f003 0308 	and.w	r3, r3, #8
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d005      	beq.n	800f63c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2208      	movs	r2, #8
 800f636:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f638:	2308      	movs	r3, #8
 800f63a:	e043      	b.n	800f6c4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f642:	f003 0302 	and.w	r3, r3, #2
 800f646:	2b00      	cmp	r3, #0
 800f648:	d005      	beq.n	800f656 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2202      	movs	r2, #2
 800f650:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f652:	2302      	movs	r3, #2
 800f654:	e036      	b.n	800f6c4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f65c:	f003 0320 	and.w	r3, r3, #32
 800f660:	2b00      	cmp	r3, #0
 800f662:	d005      	beq.n	800f670 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2220      	movs	r2, #32
 800f66a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f66c:	2320      	movs	r3, #32
 800f66e:	e029      	b.n	800f6c4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a15      	ldr	r2, [pc, #84]	; (800f6cc <SD_FindSCR+0x19c>)
 800f676:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	061a      	lsls	r2, r3, #24
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	021b      	lsls	r3, r3, #8
 800f680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f684:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	0a1b      	lsrs	r3, r3, #8
 800f68a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f68e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	0e1b      	lsrs	r3, r3, #24
 800f694:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f698:	601a      	str	r2, [r3, #0]
    scr++;
 800f69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69c:	3304      	adds	r3, #4
 800f69e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	061a      	lsls	r2, r3, #24
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	021b      	lsls	r3, r3, #8
 800f6a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f6ac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	0a1b      	lsrs	r3, r3, #8
 800f6b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f6b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	0e1b      	lsrs	r3, r3, #24
 800f6bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3738      	adds	r7, #56	; 0x38
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	18000f3a 	.word	0x18000f3a

0800f6d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d101      	bne.n	800f6e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e049      	b.n	800f776 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d106      	bne.n	800f6fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7f6 fbe4 	bl	8005ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2202      	movs	r2, #2
 800f700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	3304      	adds	r3, #4
 800f70c:	4619      	mov	r1, r3
 800f70e:	4610      	mov	r0, r2
 800f710:	f000 fa04 	bl	800fb1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2201      	movs	r2, #1
 800f738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2201      	movs	r2, #1
 800f740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2201      	movs	r2, #1
 800f748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2201      	movs	r2, #1
 800f758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2201      	movs	r2, #1
 800f760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2201      	movs	r2, #1
 800f768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2201      	movs	r2, #1
 800f770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
	...

0800f780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f780:	b480      	push	{r7}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b01      	cmp	r3, #1
 800f792:	d001      	beq.n	800f798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f794:	2301      	movs	r3, #1
 800f796:	e05e      	b.n	800f856 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2202      	movs	r2, #2
 800f79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	68da      	ldr	r2, [r3, #12]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f042 0201 	orr.w	r2, r2, #1
 800f7ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a2b      	ldr	r2, [pc, #172]	; (800f864 <HAL_TIM_Base_Start_IT+0xe4>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d02c      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7c2:	d027      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a27      	ldr	r2, [pc, #156]	; (800f868 <HAL_TIM_Base_Start_IT+0xe8>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d022      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	4a26      	ldr	r2, [pc, #152]	; (800f86c <HAL_TIM_Base_Start_IT+0xec>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d01d      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4a24      	ldr	r2, [pc, #144]	; (800f870 <HAL_TIM_Base_Start_IT+0xf0>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d018      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a23      	ldr	r2, [pc, #140]	; (800f874 <HAL_TIM_Base_Start_IT+0xf4>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d013      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a21      	ldr	r2, [pc, #132]	; (800f878 <HAL_TIM_Base_Start_IT+0xf8>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d00e      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a20      	ldr	r2, [pc, #128]	; (800f87c <HAL_TIM_Base_Start_IT+0xfc>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d009      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a1e      	ldr	r2, [pc, #120]	; (800f880 <HAL_TIM_Base_Start_IT+0x100>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d004      	beq.n	800f814 <HAL_TIM_Base_Start_IT+0x94>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4a1d      	ldr	r2, [pc, #116]	; (800f884 <HAL_TIM_Base_Start_IT+0x104>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d115      	bne.n	800f840 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	689a      	ldr	r2, [r3, #8]
 800f81a:	4b1b      	ldr	r3, [pc, #108]	; (800f888 <HAL_TIM_Base_Start_IT+0x108>)
 800f81c:	4013      	ands	r3, r2
 800f81e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b06      	cmp	r3, #6
 800f824:	d015      	beq.n	800f852 <HAL_TIM_Base_Start_IT+0xd2>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f82c:	d011      	beq.n	800f852 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f042 0201 	orr.w	r2, r2, #1
 800f83c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f83e:	e008      	b.n	800f852 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f042 0201 	orr.w	r2, r2, #1
 800f84e:	601a      	str	r2, [r3, #0]
 800f850:	e000      	b.n	800f854 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f852:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	40010000 	.word	0x40010000
 800f868:	40000400 	.word	0x40000400
 800f86c:	40000800 	.word	0x40000800
 800f870:	40000c00 	.word	0x40000c00
 800f874:	40010400 	.word	0x40010400
 800f878:	40001800 	.word	0x40001800
 800f87c:	40014000 	.word	0x40014000
 800f880:	4000e000 	.word	0x4000e000
 800f884:	4000e400 	.word	0x4000e400
 800f888:	00010007 	.word	0x00010007

0800f88c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	691b      	ldr	r3, [r3, #16]
 800f89a:	f003 0302 	and.w	r3, r3, #2
 800f89e:	2b02      	cmp	r3, #2
 800f8a0:	d122      	bne.n	800f8e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	f003 0302 	and.w	r3, r3, #2
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	d11b      	bne.n	800f8e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f06f 0202 	mvn.w	r2, #2
 800f8b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	699b      	ldr	r3, [r3, #24]
 800f8c6:	f003 0303 	and.w	r3, r3, #3
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f905 	bl	800fade <HAL_TIM_IC_CaptureCallback>
 800f8d4:	e005      	b.n	800f8e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 f8f7 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 f908 	bl	800faf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	691b      	ldr	r3, [r3, #16]
 800f8ee:	f003 0304 	and.w	r3, r3, #4
 800f8f2:	2b04      	cmp	r3, #4
 800f8f4:	d122      	bne.n	800f93c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	f003 0304 	and.w	r3, r3, #4
 800f900:	2b04      	cmp	r3, #4
 800f902:	d11b      	bne.n	800f93c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f06f 0204 	mvn.w	r2, #4
 800f90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2202      	movs	r2, #2
 800f912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	699b      	ldr	r3, [r3, #24]
 800f91a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 f8db 	bl	800fade <HAL_TIM_IC_CaptureCallback>
 800f928:	e005      	b.n	800f936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f8cd 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 f8de 	bl	800faf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	691b      	ldr	r3, [r3, #16]
 800f942:	f003 0308 	and.w	r3, r3, #8
 800f946:	2b08      	cmp	r3, #8
 800f948:	d122      	bne.n	800f990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	f003 0308 	and.w	r3, r3, #8
 800f954:	2b08      	cmp	r3, #8
 800f956:	d11b      	bne.n	800f990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f06f 0208 	mvn.w	r2, #8
 800f960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2204      	movs	r2, #4
 800f966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	69db      	ldr	r3, [r3, #28]
 800f96e:	f003 0303 	and.w	r3, r3, #3
 800f972:	2b00      	cmp	r3, #0
 800f974:	d003      	beq.n	800f97e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 f8b1 	bl	800fade <HAL_TIM_IC_CaptureCallback>
 800f97c:	e005      	b.n	800f98a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f8a3 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 f8b4 	bl	800faf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	f003 0310 	and.w	r3, r3, #16
 800f99a:	2b10      	cmp	r3, #16
 800f99c:	d122      	bne.n	800f9e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	f003 0310 	and.w	r3, r3, #16
 800f9a8:	2b10      	cmp	r3, #16
 800f9aa:	d11b      	bne.n	800f9e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f06f 0210 	mvn.w	r2, #16
 800f9b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2208      	movs	r2, #8
 800f9ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	69db      	ldr	r3, [r3, #28]
 800f9c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d003      	beq.n	800f9d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f887 	bl	800fade <HAL_TIM_IC_CaptureCallback>
 800f9d0:	e005      	b.n	800f9de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f879 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f88a 	bl	800faf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	f003 0301 	and.w	r3, r3, #1
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	d10e      	bne.n	800fa10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	f003 0301 	and.w	r3, r3, #1
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d107      	bne.n	800fa10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f06f 0201 	mvn.w	r2, #1
 800fa08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7f5 ff54 	bl	80058b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa1a:	2b80      	cmp	r3, #128	; 0x80
 800fa1c:	d10e      	bne.n	800fa3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa28:	2b80      	cmp	r3, #128	; 0x80
 800fa2a:	d107      	bne.n	800fa3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fa34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f920 	bl	800fc7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	691b      	ldr	r3, [r3, #16]
 800fa42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa4a:	d10e      	bne.n	800fa6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa56:	2b80      	cmp	r3, #128	; 0x80
 800fa58:	d107      	bne.n	800fa6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fa62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f913 	bl	800fc90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	691b      	ldr	r3, [r3, #16]
 800fa70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa74:	2b40      	cmp	r3, #64	; 0x40
 800fa76:	d10e      	bne.n	800fa96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa82:	2b40      	cmp	r3, #64	; 0x40
 800fa84:	d107      	bne.n	800fa96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 f838 	bl	800fb06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	691b      	ldr	r3, [r3, #16]
 800fa9c:	f003 0320 	and.w	r3, r3, #32
 800faa0:	2b20      	cmp	r3, #32
 800faa2:	d10e      	bne.n	800fac2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	f003 0320 	and.w	r3, r3, #32
 800faae:	2b20      	cmp	r3, #32
 800fab0:	d107      	bne.n	800fac2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f06f 0220 	mvn.w	r2, #32
 800faba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 f8d3 	bl	800fc68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fac2:	bf00      	nop
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800faca:	b480      	push	{r7}
 800facc:	b083      	sub	sp, #12
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fad2:	bf00      	nop
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr

0800fade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fade:	b480      	push	{r7}
 800fae0:	b083      	sub	sp, #12
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fae6:	bf00      	nop
 800fae8:	370c      	adds	r7, #12
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr

0800faf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800faf2:	b480      	push	{r7}
 800faf4:	b083      	sub	sp, #12
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fafa:	bf00      	nop
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr

0800fb06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fb06:	b480      	push	{r7}
 800fb08:	b083      	sub	sp, #12
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fb0e:	bf00      	nop
 800fb10:	370c      	adds	r7, #12
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
	...

0800fb1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a44      	ldr	r2, [pc, #272]	; (800fc40 <TIM_Base_SetConfig+0x124>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d013      	beq.n	800fb5c <TIM_Base_SetConfig+0x40>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb3a:	d00f      	beq.n	800fb5c <TIM_Base_SetConfig+0x40>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a41      	ldr	r2, [pc, #260]	; (800fc44 <TIM_Base_SetConfig+0x128>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d00b      	beq.n	800fb5c <TIM_Base_SetConfig+0x40>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a40      	ldr	r2, [pc, #256]	; (800fc48 <TIM_Base_SetConfig+0x12c>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d007      	beq.n	800fb5c <TIM_Base_SetConfig+0x40>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a3f      	ldr	r2, [pc, #252]	; (800fc4c <TIM_Base_SetConfig+0x130>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d003      	beq.n	800fb5c <TIM_Base_SetConfig+0x40>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a3e      	ldr	r2, [pc, #248]	; (800fc50 <TIM_Base_SetConfig+0x134>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d108      	bne.n	800fb6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4a33      	ldr	r2, [pc, #204]	; (800fc40 <TIM_Base_SetConfig+0x124>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d027      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb7c:	d023      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	4a30      	ldr	r2, [pc, #192]	; (800fc44 <TIM_Base_SetConfig+0x128>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d01f      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4a2f      	ldr	r2, [pc, #188]	; (800fc48 <TIM_Base_SetConfig+0x12c>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d01b      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4a2e      	ldr	r2, [pc, #184]	; (800fc4c <TIM_Base_SetConfig+0x130>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d017      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4a2d      	ldr	r2, [pc, #180]	; (800fc50 <TIM_Base_SetConfig+0x134>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d013      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4a2c      	ldr	r2, [pc, #176]	; (800fc54 <TIM_Base_SetConfig+0x138>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d00f      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4a2b      	ldr	r2, [pc, #172]	; (800fc58 <TIM_Base_SetConfig+0x13c>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d00b      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4a2a      	ldr	r2, [pc, #168]	; (800fc5c <TIM_Base_SetConfig+0x140>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d007      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4a29      	ldr	r2, [pc, #164]	; (800fc60 <TIM_Base_SetConfig+0x144>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d003      	beq.n	800fbc6 <TIM_Base_SetConfig+0xaa>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4a28      	ldr	r2, [pc, #160]	; (800fc64 <TIM_Base_SetConfig+0x148>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d108      	bne.n	800fbd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	695b      	ldr	r3, [r3, #20]
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	689a      	ldr	r2, [r3, #8]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4a10      	ldr	r2, [pc, #64]	; (800fc40 <TIM_Base_SetConfig+0x124>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d00f      	beq.n	800fc24 <TIM_Base_SetConfig+0x108>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4a12      	ldr	r2, [pc, #72]	; (800fc50 <TIM_Base_SetConfig+0x134>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d00b      	beq.n	800fc24 <TIM_Base_SetConfig+0x108>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a11      	ldr	r2, [pc, #68]	; (800fc54 <TIM_Base_SetConfig+0x138>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d007      	beq.n	800fc24 <TIM_Base_SetConfig+0x108>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a10      	ldr	r2, [pc, #64]	; (800fc58 <TIM_Base_SetConfig+0x13c>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d003      	beq.n	800fc24 <TIM_Base_SetConfig+0x108>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a0f      	ldr	r2, [pc, #60]	; (800fc5c <TIM_Base_SetConfig+0x140>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d103      	bne.n	800fc2c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	691a      	ldr	r2, [r3, #16]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	615a      	str	r2, [r3, #20]
}
 800fc32:	bf00      	nop
 800fc34:	3714      	adds	r7, #20
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	40010000 	.word	0x40010000
 800fc44:	40000400 	.word	0x40000400
 800fc48:	40000800 	.word	0x40000800
 800fc4c:	40000c00 	.word	0x40000c00
 800fc50:	40010400 	.word	0x40010400
 800fc54:	40014000 	.word	0x40014000
 800fc58:	40014400 	.word	0x40014400
 800fc5c:	40014800 	.word	0x40014800
 800fc60:	4000e000 	.word	0x4000e000
 800fc64:	4000e400 	.word	0x4000e400

0800fc68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fc98:	bf00      	nop
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fca4:	b084      	sub	sp, #16
 800fca6:	b480      	push	{r7}
 800fca8:	b085      	sub	sp, #20
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
 800fcae:	f107 001c 	add.w	r0, r7, #28
 800fcb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fcba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fcbc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fcbe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800fcc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800fcc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800fcca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	4b07      	ldr	r3, [pc, #28]	; (800fcf4 <SDMMC_Init+0x50>)
 800fcd8:	4013      	ands	r3, r2
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	431a      	orrs	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fce2:	2300      	movs	r3, #0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3714      	adds	r7, #20
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	b004      	add	sp, #16
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	ffc02c00 	.word	0xffc02c00

0800fcf8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	370c      	adds	r7, #12
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fd12:	b480      	push	{r7}
 800fd14:	b083      	sub	sp, #12
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f043 0203 	orr.w	r2, r3, #3
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	370c      	adds	r7, #12
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f003 0303 	and.w	r3, r3, #3
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fd6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800fd74:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800fd7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fd7c:	68fa      	ldr	r2, [r7, #12]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	68da      	ldr	r2, [r3, #12]
 800fd86:	4b06      	ldr	r3, [pc, #24]	; (800fda0 <SDMMC_SendCommand+0x50>)
 800fd88:	4013      	ands	r3, r2
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	431a      	orrs	r2, r3
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3714      	adds	r7, #20
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	fffee0c0 	.word	0xfffee0c0

0800fda4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	b2db      	uxtb	r3, r3
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	370c      	adds	r7, #12
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fdbe:	b480      	push	{r7}
 800fdc0:	b085      	sub	sp, #20
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	3314      	adds	r3, #20
 800fdcc:	461a      	mov	r2, r3
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3714      	adds	r7, #20
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b085      	sub	sp, #20
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fe0a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fe10:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fe16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	431a      	orrs	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800fe2e:	2300      	movs	r3, #0

}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3714      	adds	r7, #20
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr

0800fe3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b088      	sub	sp, #32
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fe4a:	2310      	movs	r3, #16
 800fe4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe54:	2300      	movs	r3, #0
 800fe56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe5e:	f107 0308 	add.w	r3, r7, #8
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff ff73 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fe6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe6e:	2110      	movs	r1, #16
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 fa21 	bl	80102b8 <SDMMC_GetCmdResp1>
 800fe76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe78:	69fb      	ldr	r3, [r7, #28]
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3720      	adds	r7, #32
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b088      	sub	sp, #32
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fe90:	2311      	movs	r3, #17
 800fe92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fea4:	f107 0308 	add.w	r3, r7, #8
 800fea8:	4619      	mov	r1, r3
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f7ff ff50 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800feb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800feb4:	2111      	movs	r1, #17
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f9fe 	bl	80102b8 <SDMMC_GetCmdResp1>
 800febc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800febe:	69fb      	ldr	r3, [r7, #28]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3720      	adds	r7, #32
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b088      	sub	sp, #32
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fed6:	2312      	movs	r3, #18
 800fed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800feda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fee0:	2300      	movs	r3, #0
 800fee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fee8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800feea:	f107 0308 	add.w	r3, r7, #8
 800feee:	4619      	mov	r1, r3
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f7ff ff2d 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fef6:	f241 3288 	movw	r2, #5000	; 0x1388
 800fefa:	2112      	movs	r1, #18
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f9db 	bl	80102b8 <SDMMC_GetCmdResp1>
 800ff02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff04:	69fb      	ldr	r3, [r7, #28]
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3720      	adds	r7, #32
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b088      	sub	sp, #32
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ff1c:	2318      	movs	r3, #24
 800ff1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff26:	2300      	movs	r3, #0
 800ff28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff30:	f107 0308 	add.w	r3, r7, #8
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff ff0a 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ff3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff40:	2118      	movs	r1, #24
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 f9b8 	bl	80102b8 <SDMMC_GetCmdResp1>
 800ff48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff4a:	69fb      	ldr	r3, [r7, #28]
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3720      	adds	r7, #32
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b088      	sub	sp, #32
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ff62:	2319      	movs	r3, #25
 800ff64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff76:	f107 0308 	add.w	r3, r7, #8
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff fee7 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ff82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff86:	2119      	movs	r1, #25
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 f995 	bl	80102b8 <SDMMC_GetCmdResp1>
 800ff8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff90:	69fb      	ldr	r3, [r7, #28]
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3720      	adds	r7, #32
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b088      	sub	sp, #32
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
 800ffa2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ffa8:	2307      	movs	r3, #7
 800ffaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ffb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ffba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffbc:	f107 0308 	add.w	r3, r7, #8
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f7ff fec4 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ffc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffcc:	2107      	movs	r1, #7
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 f972 	bl	80102b8 <SDMMC_GetCmdResp1>
 800ffd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffd6:	69fb      	ldr	r3, [r7, #28]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3720      	adds	r7, #32
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b088      	sub	sp, #32
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ffec:	2300      	movs	r3, #0
 800ffee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fff0:	2300      	movs	r3, #0
 800fff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fff4:	2300      	movs	r3, #0
 800fff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fffc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fffe:	f107 0308 	add.w	r3, r7, #8
 8010002:	4619      	mov	r1, r3
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7ff fea3 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 fb96 	bl	801073c <SDMMC_GetCmdError>
 8010010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010012:	69fb      	ldr	r3, [r7, #28]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3720      	adds	r7, #32
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b088      	sub	sp, #32
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010024:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801002a:	2308      	movs	r3, #8
 801002c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801002e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010034:	2300      	movs	r3, #0
 8010036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801003c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801003e:	f107 0308 	add.w	r3, r7, #8
 8010042:	4619      	mov	r1, r3
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff fe83 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fb28 	bl	80106a0 <SDMMC_GetCmdResp7>
 8010050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010052:	69fb      	ldr	r3, [r7, #28]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3720      	adds	r7, #32
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b088      	sub	sp, #32
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801006a:	2337      	movs	r3, #55	; 0x37
 801006c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801006e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010074:	2300      	movs	r3, #0
 8010076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801007c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801007e:	f107 0308 	add.w	r3, r7, #8
 8010082:	4619      	mov	r1, r3
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff fe63 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801008a:	f241 3288 	movw	r2, #5000	; 0x1388
 801008e:	2137      	movs	r1, #55	; 0x37
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 f911 	bl	80102b8 <SDMMC_GetCmdResp1>
 8010096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010098:	69fb      	ldr	r3, [r7, #28]
}
 801009a:	4618      	mov	r0, r3
 801009c:	3720      	adds	r7, #32
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b088      	sub	sp, #32
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80100b0:	2329      	movs	r3, #41	; 0x29
 80100b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100ba:	2300      	movs	r3, #0
 80100bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100c4:	f107 0308 	add.w	r3, r7, #8
 80100c8:	4619      	mov	r1, r3
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f7ff fe40 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 fa2d 	bl	8010530 <SDMMC_GetCmdResp3>
 80100d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100d8:	69fb      	ldr	r3, [r7, #28]
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3720      	adds	r7, #32
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b088      	sub	sp, #32
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80100f0:	2306      	movs	r3, #6
 80100f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100fa:	2300      	movs	r3, #0
 80100fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010104:	f107 0308 	add.w	r3, r7, #8
 8010108:	4619      	mov	r1, r3
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f7ff fe20 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010110:	f241 3288 	movw	r2, #5000	; 0x1388
 8010114:	2106      	movs	r1, #6
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 f8ce 	bl	80102b8 <SDMMC_GetCmdResp1>
 801011c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801011e:	69fb      	ldr	r3, [r7, #28]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3720      	adds	r7, #32
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b088      	sub	sp, #32
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010130:	2300      	movs	r3, #0
 8010132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010134:	2333      	movs	r3, #51	; 0x33
 8010136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010138:	f44f 7380 	mov.w	r3, #256	; 0x100
 801013c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801013e:	2300      	movs	r3, #0
 8010140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010148:	f107 0308 	add.w	r3, r7, #8
 801014c:	4619      	mov	r1, r3
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7ff fdfe 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010154:	f241 3288 	movw	r2, #5000	; 0x1388
 8010158:	2133      	movs	r1, #51	; 0x33
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 f8ac 	bl	80102b8 <SDMMC_GetCmdResp1>
 8010160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010162:	69fb      	ldr	r3, [r7, #28]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3720      	adds	r7, #32
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b088      	sub	sp, #32
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010174:	2300      	movs	r3, #0
 8010176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010178:	2302      	movs	r3, #2
 801017a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801017c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010182:	2300      	movs	r3, #0
 8010184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801018a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801018c:	f107 0308 	add.w	r3, r7, #8
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7ff fddc 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f97f 	bl	801049c <SDMMC_GetCmdResp2>
 801019e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101a0:	69fb      	ldr	r3, [r7, #28]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3720      	adds	r7, #32
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b088      	sub	sp, #32
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80101b8:	2309      	movs	r3, #9
 80101ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80101bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80101c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101c2:	2300      	movs	r3, #0
 80101c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101cc:	f107 0308 	add.w	r3, r7, #8
 80101d0:	4619      	mov	r1, r3
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7ff fdbc 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 f95f 	bl	801049c <SDMMC_GetCmdResp2>
 80101de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101e0:	69fb      	ldr	r3, [r7, #28]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3720      	adds	r7, #32
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b088      	sub	sp, #32
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80101f4:	2300      	movs	r3, #0
 80101f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80101f8:	2303      	movs	r3, #3
 80101fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010202:	2300      	movs	r3, #0
 8010204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801020a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801020c:	f107 0308 	add.w	r3, r7, #8
 8010210:	4619      	mov	r1, r3
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7ff fd9c 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010218:	683a      	ldr	r2, [r7, #0]
 801021a:	2103      	movs	r1, #3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 f9c7 	bl	80105b0 <SDMMC_GetCmdResp6>
 8010222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010224:	69fb      	ldr	r3, [r7, #28]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3720      	adds	r7, #32
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b088      	sub	sp, #32
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801023c:	230d      	movs	r3, #13
 801023e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010246:	2300      	movs	r3, #0
 8010248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801024e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010250:	f107 0308 	add.w	r3, r7, #8
 8010254:	4619      	mov	r1, r3
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7ff fd7a 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801025c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010260:	210d      	movs	r1, #13
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f828 	bl	80102b8 <SDMMC_GetCmdResp1>
 8010268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801026a:	69fb      	ldr	r3, [r7, #28]
}
 801026c:	4618      	mov	r0, r3
 801026e:	3720      	adds	r7, #32
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b088      	sub	sp, #32
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801027c:	2300      	movs	r3, #0
 801027e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010280:	230d      	movs	r3, #13
 8010282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801028a:	2300      	movs	r3, #0
 801028c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801028e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010294:	f107 0308 	add.w	r3, r7, #8
 8010298:	4619      	mov	r1, r3
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f7ff fd58 	bl	800fd50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80102a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80102a4:	210d      	movs	r1, #13
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 f806 	bl	80102b8 <SDMMC_GetCmdResp1>
 80102ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ae:	69fb      	ldr	r3, [r7, #28]
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3720      	adds	r7, #32
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b088      	sub	sp, #32
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	460b      	mov	r3, r1
 80102c2:	607a      	str	r2, [r7, #4]
 80102c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80102c6:	4b70      	ldr	r3, [pc, #448]	; (8010488 <SDMMC_GetCmdResp1+0x1d0>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4a70      	ldr	r2, [pc, #448]	; (801048c <SDMMC_GetCmdResp1+0x1d4>)
 80102cc:	fba2 2303 	umull	r2, r3, r2, r3
 80102d0:	0a5a      	lsrs	r2, r3, #9
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	fb02 f303 	mul.w	r3, r2, r3
 80102d8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	1e5a      	subs	r2, r3, #1
 80102de:	61fa      	str	r2, [r7, #28]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d102      	bne.n	80102ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80102e8:	e0c9      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ee:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80102f0:	69ba      	ldr	r2, [r7, #24]
 80102f2:	4b67      	ldr	r3, [pc, #412]	; (8010490 <SDMMC_GetCmdResp1+0x1d8>)
 80102f4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d0ef      	beq.n	80102da <SDMMC_GetCmdResp1+0x22>
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1ea      	bne.n	80102da <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010308:	f003 0304 	and.w	r3, r3, #4
 801030c:	2b00      	cmp	r3, #0
 801030e:	d004      	beq.n	801031a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2204      	movs	r2, #4
 8010314:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010316:	2304      	movs	r3, #4
 8010318:	e0b1      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801031e:	f003 0301 	and.w	r3, r3, #1
 8010322:	2b00      	cmp	r3, #0
 8010324:	d004      	beq.n	8010330 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2201      	movs	r2, #1
 801032a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801032c:	2301      	movs	r3, #1
 801032e:	e0a6      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	4a58      	ldr	r2, [pc, #352]	; (8010494 <SDMMC_GetCmdResp1+0x1dc>)
 8010334:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f7ff fd34 	bl	800fda4 <SDMMC_GetCommandResponse>
 801033c:	4603      	mov	r3, r0
 801033e:	461a      	mov	r2, r3
 8010340:	7afb      	ldrb	r3, [r7, #11]
 8010342:	4293      	cmp	r3, r2
 8010344:	d001      	beq.n	801034a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010346:	2301      	movs	r3, #1
 8010348:	e099      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801034a:	2100      	movs	r1, #0
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f7ff fd36 	bl	800fdbe <SDMMC_GetResponse>
 8010352:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010354:	697a      	ldr	r2, [r7, #20]
 8010356:	4b50      	ldr	r3, [pc, #320]	; (8010498 <SDMMC_GetCmdResp1+0x1e0>)
 8010358:	4013      	ands	r3, r2
 801035a:	2b00      	cmp	r3, #0
 801035c:	d101      	bne.n	8010362 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801035e:	2300      	movs	r3, #0
 8010360:	e08d      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	2b00      	cmp	r3, #0
 8010366:	da02      	bge.n	801036e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801036c:	e087      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010378:	2340      	movs	r3, #64	; 0x40
 801037a:	e080      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010382:	2b00      	cmp	r3, #0
 8010384:	d001      	beq.n	801038a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010386:	2380      	movs	r3, #128	; 0x80
 8010388:	e079      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010398:	e071      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80103a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103a8:	e069      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d002      	beq.n	80103ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80103b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103b8:	e061      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80103c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80103c8:	e059      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d002      	beq.n	80103da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80103d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103d8:	e051      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80103e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80103e8:	e049      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80103f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80103f8:	e041      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010408:	e039      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010418:	e031      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010424:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010428:	e029      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010430:	2b00      	cmp	r3, #0
 8010432:	d002      	beq.n	801043a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010434:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010438:	e021      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010440:	2b00      	cmp	r3, #0
 8010442:	d002      	beq.n	801044a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010444:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010448:	e019      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010450:	2b00      	cmp	r3, #0
 8010452:	d002      	beq.n	801045a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010454:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010458:	e011      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010464:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010468:	e009      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	f003 0308 	and.w	r3, r3, #8
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010474:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010478:	e001      	b.n	801047e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801047e:	4618      	mov	r0, r3
 8010480:	3720      	adds	r7, #32
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	240003a4 	.word	0x240003a4
 801048c:	10624dd3 	.word	0x10624dd3
 8010490:	00200045 	.word	0x00200045
 8010494:	002000c5 	.word	0x002000c5
 8010498:	fdffe008 	.word	0xfdffe008

0801049c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801049c:	b480      	push	{r7}
 801049e:	b085      	sub	sp, #20
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80104a4:	4b1f      	ldr	r3, [pc, #124]	; (8010524 <SDMMC_GetCmdResp2+0x88>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a1f      	ldr	r2, [pc, #124]	; (8010528 <SDMMC_GetCmdResp2+0x8c>)
 80104aa:	fba2 2303 	umull	r2, r3, r2, r3
 80104ae:	0a5b      	lsrs	r3, r3, #9
 80104b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80104b4:	fb02 f303 	mul.w	r3, r2, r3
 80104b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	1e5a      	subs	r2, r3, #1
 80104be:	60fa      	str	r2, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d102      	bne.n	80104ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80104c8:	e026      	b.n	8010518 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d0ef      	beq.n	80104ba <SDMMC_GetCmdResp2+0x1e>
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d1ea      	bne.n	80104ba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104e8:	f003 0304 	and.w	r3, r3, #4
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d004      	beq.n	80104fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2204      	movs	r2, #4
 80104f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80104f6:	2304      	movs	r3, #4
 80104f8:	e00e      	b.n	8010518 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	d004      	beq.n	8010510 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2201      	movs	r2, #1
 801050a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801050c:	2301      	movs	r3, #1
 801050e:	e003      	b.n	8010518 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	4a06      	ldr	r2, [pc, #24]	; (801052c <SDMMC_GetCmdResp2+0x90>)
 8010514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	3714      	adds	r7, #20
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	240003a4 	.word	0x240003a4
 8010528:	10624dd3 	.word	0x10624dd3
 801052c:	002000c5 	.word	0x002000c5

08010530 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010530:	b480      	push	{r7}
 8010532:	b085      	sub	sp, #20
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010538:	4b1a      	ldr	r3, [pc, #104]	; (80105a4 <SDMMC_GetCmdResp3+0x74>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a1a      	ldr	r2, [pc, #104]	; (80105a8 <SDMMC_GetCmdResp3+0x78>)
 801053e:	fba2 2303 	umull	r2, r3, r2, r3
 8010542:	0a5b      	lsrs	r3, r3, #9
 8010544:	f241 3288 	movw	r2, #5000	; 0x1388
 8010548:	fb02 f303 	mul.w	r3, r2, r3
 801054c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	1e5a      	subs	r2, r3, #1
 8010552:	60fa      	str	r2, [r7, #12]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d102      	bne.n	801055e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801055c:	e01b      	b.n	8010596 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010562:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801056a:	2b00      	cmp	r3, #0
 801056c:	d0ef      	beq.n	801054e <SDMMC_GetCmdResp3+0x1e>
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010574:	2b00      	cmp	r3, #0
 8010576:	d1ea      	bne.n	801054e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801057c:	f003 0304 	and.w	r3, r3, #4
 8010580:	2b00      	cmp	r3, #0
 8010582:	d004      	beq.n	801058e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2204      	movs	r2, #4
 8010588:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801058a:	2304      	movs	r3, #4
 801058c:	e003      	b.n	8010596 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a06      	ldr	r2, [pc, #24]	; (80105ac <SDMMC_GetCmdResp3+0x7c>)
 8010592:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010594:	2300      	movs	r3, #0
}
 8010596:	4618      	mov	r0, r3
 8010598:	3714      	adds	r7, #20
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	240003a4 	.word	0x240003a4
 80105a8:	10624dd3 	.word	0x10624dd3
 80105ac:	002000c5 	.word	0x002000c5

080105b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b088      	sub	sp, #32
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	460b      	mov	r3, r1
 80105ba:	607a      	str	r2, [r7, #4]
 80105bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80105be:	4b35      	ldr	r3, [pc, #212]	; (8010694 <SDMMC_GetCmdResp6+0xe4>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4a35      	ldr	r2, [pc, #212]	; (8010698 <SDMMC_GetCmdResp6+0xe8>)
 80105c4:	fba2 2303 	umull	r2, r3, r2, r3
 80105c8:	0a5b      	lsrs	r3, r3, #9
 80105ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80105ce:	fb02 f303 	mul.w	r3, r2, r3
 80105d2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	1e5a      	subs	r2, r3, #1
 80105d8:	61fa      	str	r2, [r7, #28]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d102      	bne.n	80105e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105e2:	e052      	b.n	801068a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d0ef      	beq.n	80105d4 <SDMMC_GetCmdResp6+0x24>
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d1ea      	bne.n	80105d4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010602:	f003 0304 	and.w	r3, r3, #4
 8010606:	2b00      	cmp	r3, #0
 8010608:	d004      	beq.n	8010614 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2204      	movs	r2, #4
 801060e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010610:	2304      	movs	r3, #4
 8010612:	e03a      	b.n	801068a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010618:	f003 0301 	and.w	r3, r3, #1
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2201      	movs	r2, #1
 8010624:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010626:	2301      	movs	r3, #1
 8010628:	e02f      	b.n	801068a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7ff fbba 	bl	800fda4 <SDMMC_GetCommandResponse>
 8010630:	4603      	mov	r3, r0
 8010632:	461a      	mov	r2, r3
 8010634:	7afb      	ldrb	r3, [r7, #11]
 8010636:	4293      	cmp	r3, r2
 8010638:	d001      	beq.n	801063e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801063a:	2301      	movs	r3, #1
 801063c:	e025      	b.n	801068a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	4a16      	ldr	r2, [pc, #88]	; (801069c <SDMMC_GetCmdResp6+0xec>)
 8010642:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010644:	2100      	movs	r1, #0
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7ff fbb9 	bl	800fdbe <SDMMC_GetResponse>
 801064c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010654:	2b00      	cmp	r3, #0
 8010656:	d106      	bne.n	8010666 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	0c1b      	lsrs	r3, r3, #16
 801065c:	b29a      	uxth	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010662:	2300      	movs	r3, #0
 8010664:	e011      	b.n	801068a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010674:	e009      	b.n	801068a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010684:	e001      	b.n	801068a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801068a:	4618      	mov	r0, r3
 801068c:	3720      	adds	r7, #32
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	240003a4 	.word	0x240003a4
 8010698:	10624dd3 	.word	0x10624dd3
 801069c:	002000c5 	.word	0x002000c5

080106a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b085      	sub	sp, #20
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80106a8:	4b22      	ldr	r3, [pc, #136]	; (8010734 <SDMMC_GetCmdResp7+0x94>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4a22      	ldr	r2, [pc, #136]	; (8010738 <SDMMC_GetCmdResp7+0x98>)
 80106ae:	fba2 2303 	umull	r2, r3, r2, r3
 80106b2:	0a5b      	lsrs	r3, r3, #9
 80106b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80106b8:	fb02 f303 	mul.w	r3, r2, r3
 80106bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	1e5a      	subs	r2, r3, #1
 80106c2:	60fa      	str	r2, [r7, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d102      	bne.n	80106ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106cc:	e02c      	b.n	8010728 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d0ef      	beq.n	80106be <SDMMC_GetCmdResp7+0x1e>
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d1ea      	bne.n	80106be <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ec:	f003 0304 	and.w	r3, r3, #4
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d004      	beq.n	80106fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2204      	movs	r2, #4
 80106f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106fa:	2304      	movs	r3, #4
 80106fc:	e014      	b.n	8010728 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	2b00      	cmp	r3, #0
 8010708:	d004      	beq.n	8010714 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2201      	movs	r2, #1
 801070e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010710:	2301      	movs	r3, #1
 8010712:	e009      	b.n	8010728 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2240      	movs	r2, #64	; 0x40
 8010724:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010726:	2300      	movs	r3, #0

}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr
 8010734:	240003a4 	.word	0x240003a4
 8010738:	10624dd3 	.word	0x10624dd3

0801073c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010744:	4b11      	ldr	r3, [pc, #68]	; (801078c <SDMMC_GetCmdError+0x50>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	4a11      	ldr	r2, [pc, #68]	; (8010790 <SDMMC_GetCmdError+0x54>)
 801074a:	fba2 2303 	umull	r2, r3, r2, r3
 801074e:	0a5b      	lsrs	r3, r3, #9
 8010750:	f241 3288 	movw	r2, #5000	; 0x1388
 8010754:	fb02 f303 	mul.w	r3, r2, r3
 8010758:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	1e5a      	subs	r2, r3, #1
 801075e:	60fa      	str	r2, [r7, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d102      	bne.n	801076a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010764:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010768:	e009      	b.n	801077e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0f1      	beq.n	801075a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4a06      	ldr	r2, [pc, #24]	; (8010794 <SDMMC_GetCmdError+0x58>)
 801077a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801077c:	2300      	movs	r3, #0
}
 801077e:	4618      	mov	r0, r3
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	240003a4 	.word	0x240003a4
 8010790:	10624dd3 	.word	0x10624dd3
 8010794:	002000c5 	.word	0x002000c5

08010798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010798:	b084      	sub	sp, #16
 801079a:	b580      	push	{r7, lr}
 801079c:	b084      	sub	sp, #16
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
 80107a2:	f107 001c 	add.w	r0, r7, #28
 80107a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80107aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d120      	bne.n	80107f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	68da      	ldr	r2, [r3, #12]
 80107c0:	4b2a      	ldr	r3, [pc, #168]	; (801086c <USB_CoreInit+0xd4>)
 80107c2:	4013      	ands	r3, r2
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80107d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d105      	bne.n	80107e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f001 faf8 	bl	8011ddc <USB_CoreReset>
 80107ec:	4603      	mov	r3, r0
 80107ee:	73fb      	strb	r3, [r7, #15]
 80107f0:	e01a      	b.n	8010828 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	68db      	ldr	r3, [r3, #12]
 80107f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f001 faec 	bl	8011ddc <USB_CoreReset>
 8010804:	4603      	mov	r3, r0
 8010806:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801080a:	2b00      	cmp	r3, #0
 801080c:	d106      	bne.n	801081c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	639a      	str	r2, [r3, #56]	; 0x38
 801081a:	e005      	b.n	8010828 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082a:	2b01      	cmp	r3, #1
 801082c:	d116      	bne.n	801085c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010832:	b29a      	uxth	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801083c:	4b0c      	ldr	r3, [pc, #48]	; (8010870 <USB_CoreInit+0xd8>)
 801083e:	4313      	orrs	r3, r2
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	f043 0206 	orr.w	r2, r3, #6
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	f043 0220 	orr.w	r2, r3, #32
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801085c:	7bfb      	ldrb	r3, [r7, #15]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010868:	b004      	add	sp, #16
 801086a:	4770      	bx	lr
 801086c:	ffbdffbf 	.word	0xffbdffbf
 8010870:	03ee0000 	.word	0x03ee0000

08010874 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010874:	b480      	push	{r7}
 8010876:	b087      	sub	sp, #28
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	4613      	mov	r3, r2
 8010880:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010882:	79fb      	ldrb	r3, [r7, #7]
 8010884:	2b02      	cmp	r3, #2
 8010886:	d165      	bne.n	8010954 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	4a41      	ldr	r2, [pc, #260]	; (8010990 <USB_SetTurnaroundTime+0x11c>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d906      	bls.n	801089e <USB_SetTurnaroundTime+0x2a>
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	4a40      	ldr	r2, [pc, #256]	; (8010994 <USB_SetTurnaroundTime+0x120>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d202      	bcs.n	801089e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010898:	230f      	movs	r3, #15
 801089a:	617b      	str	r3, [r7, #20]
 801089c:	e062      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	4a3c      	ldr	r2, [pc, #240]	; (8010994 <USB_SetTurnaroundTime+0x120>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d306      	bcc.n	80108b4 <USB_SetTurnaroundTime+0x40>
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	4a3b      	ldr	r2, [pc, #236]	; (8010998 <USB_SetTurnaroundTime+0x124>)
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d202      	bcs.n	80108b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80108ae:	230e      	movs	r3, #14
 80108b0:	617b      	str	r3, [r7, #20]
 80108b2:	e057      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	4a38      	ldr	r2, [pc, #224]	; (8010998 <USB_SetTurnaroundTime+0x124>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d306      	bcc.n	80108ca <USB_SetTurnaroundTime+0x56>
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	4a37      	ldr	r2, [pc, #220]	; (801099c <USB_SetTurnaroundTime+0x128>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d202      	bcs.n	80108ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80108c4:	230d      	movs	r3, #13
 80108c6:	617b      	str	r3, [r7, #20]
 80108c8:	e04c      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	4a33      	ldr	r2, [pc, #204]	; (801099c <USB_SetTurnaroundTime+0x128>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d306      	bcc.n	80108e0 <USB_SetTurnaroundTime+0x6c>
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	4a32      	ldr	r2, [pc, #200]	; (80109a0 <USB_SetTurnaroundTime+0x12c>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d802      	bhi.n	80108e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80108da:	230c      	movs	r3, #12
 80108dc:	617b      	str	r3, [r7, #20]
 80108de:	e041      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	4a2f      	ldr	r2, [pc, #188]	; (80109a0 <USB_SetTurnaroundTime+0x12c>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d906      	bls.n	80108f6 <USB_SetTurnaroundTime+0x82>
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	4a2e      	ldr	r2, [pc, #184]	; (80109a4 <USB_SetTurnaroundTime+0x130>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d802      	bhi.n	80108f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80108f0:	230b      	movs	r3, #11
 80108f2:	617b      	str	r3, [r7, #20]
 80108f4:	e036      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	4a2a      	ldr	r2, [pc, #168]	; (80109a4 <USB_SetTurnaroundTime+0x130>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d906      	bls.n	801090c <USB_SetTurnaroundTime+0x98>
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	4a29      	ldr	r2, [pc, #164]	; (80109a8 <USB_SetTurnaroundTime+0x134>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d802      	bhi.n	801090c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010906:	230a      	movs	r3, #10
 8010908:	617b      	str	r3, [r7, #20]
 801090a:	e02b      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	4a26      	ldr	r2, [pc, #152]	; (80109a8 <USB_SetTurnaroundTime+0x134>)
 8010910:	4293      	cmp	r3, r2
 8010912:	d906      	bls.n	8010922 <USB_SetTurnaroundTime+0xae>
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	4a25      	ldr	r2, [pc, #148]	; (80109ac <USB_SetTurnaroundTime+0x138>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d202      	bcs.n	8010922 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801091c:	2309      	movs	r3, #9
 801091e:	617b      	str	r3, [r7, #20]
 8010920:	e020      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	4a21      	ldr	r2, [pc, #132]	; (80109ac <USB_SetTurnaroundTime+0x138>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d306      	bcc.n	8010938 <USB_SetTurnaroundTime+0xc4>
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	4a20      	ldr	r2, [pc, #128]	; (80109b0 <USB_SetTurnaroundTime+0x13c>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d802      	bhi.n	8010938 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010932:	2308      	movs	r3, #8
 8010934:	617b      	str	r3, [r7, #20]
 8010936:	e015      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	4a1d      	ldr	r2, [pc, #116]	; (80109b0 <USB_SetTurnaroundTime+0x13c>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d906      	bls.n	801094e <USB_SetTurnaroundTime+0xda>
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	4a1c      	ldr	r2, [pc, #112]	; (80109b4 <USB_SetTurnaroundTime+0x140>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d202      	bcs.n	801094e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010948:	2307      	movs	r3, #7
 801094a:	617b      	str	r3, [r7, #20]
 801094c:	e00a      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801094e:	2306      	movs	r3, #6
 8010950:	617b      	str	r3, [r7, #20]
 8010952:	e007      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010954:	79fb      	ldrb	r3, [r7, #7]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d102      	bne.n	8010960 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801095a:	2309      	movs	r3, #9
 801095c:	617b      	str	r3, [r7, #20]
 801095e:	e001      	b.n	8010964 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010960:	2309      	movs	r3, #9
 8010962:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68da      	ldr	r2, [r3, #12]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	029b      	lsls	r3, r3, #10
 8010978:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801097c:	431a      	orrs	r2, r3
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010982:	2300      	movs	r3, #0
}
 8010984:	4618      	mov	r0, r3
 8010986:	371c      	adds	r7, #28
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr
 8010990:	00d8acbf 	.word	0x00d8acbf
 8010994:	00e4e1c0 	.word	0x00e4e1c0
 8010998:	00f42400 	.word	0x00f42400
 801099c:	01067380 	.word	0x01067380
 80109a0:	011a499f 	.word	0x011a499f
 80109a4:	01312cff 	.word	0x01312cff
 80109a8:	014ca43f 	.word	0x014ca43f
 80109ac:	016e3600 	.word	0x016e3600
 80109b0:	01a6ab1f 	.word	0x01a6ab1f
 80109b4:	01e84800 	.word	0x01e84800

080109b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	f043 0201 	orr.w	r2, r3, #1
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	370c      	adds	r7, #12
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr

080109da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80109da:	b480      	push	{r7}
 80109dc:	b083      	sub	sp, #12
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	689b      	ldr	r3, [r3, #8]
 80109e6:	f023 0201 	bic.w	r2, r3, #1
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80109ee:	2300      	movs	r3, #0
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	370c      	adds	r7, #12
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr

080109fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010a18:	78fb      	ldrb	r3, [r7, #3]
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d115      	bne.n	8010a4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010a2a:	2001      	movs	r0, #1
 8010a2c:	f7f5 fc58 	bl	80062e0 <HAL_Delay>
      ms++;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	3301      	adds	r3, #1
 8010a34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f001 f93f 	bl	8011cba <USB_GetMode>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d01e      	beq.n	8010a80 <USB_SetCurrentMode+0x84>
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2b31      	cmp	r3, #49	; 0x31
 8010a46:	d9f0      	bls.n	8010a2a <USB_SetCurrentMode+0x2e>
 8010a48:	e01a      	b.n	8010a80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010a4a:	78fb      	ldrb	r3, [r7, #3]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d115      	bne.n	8010a7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	f7f5 fc3f 	bl	80062e0 <HAL_Delay>
      ms++;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	3301      	adds	r3, #1
 8010a66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f001 f926 	bl	8011cba <USB_GetMode>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d005      	beq.n	8010a80 <USB_SetCurrentMode+0x84>
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b31      	cmp	r3, #49	; 0x31
 8010a78:	d9f0      	bls.n	8010a5c <USB_SetCurrentMode+0x60>
 8010a7a:	e001      	b.n	8010a80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e005      	b.n	8010a8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2b32      	cmp	r3, #50	; 0x32
 8010a84:	d101      	bne.n	8010a8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010a86:	2301      	movs	r3, #1
 8010a88:	e000      	b.n	8010a8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3710      	adds	r7, #16
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010a94:	b084      	sub	sp, #16
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b086      	sub	sp, #24
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
 8010a9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010aae:	2300      	movs	r3, #0
 8010ab0:	613b      	str	r3, [r7, #16]
 8010ab2:	e009      	b.n	8010ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	3340      	adds	r3, #64	; 0x40
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	4413      	add	r3, r2
 8010abe:	2200      	movs	r2, #0
 8010ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	613b      	str	r3, [r7, #16]
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	2b0e      	cmp	r3, #14
 8010acc:	d9f2      	bls.n	8010ab4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d11c      	bne.n	8010b0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	68fa      	ldr	r2, [r7, #12]
 8010ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ae2:	f043 0302 	orr.w	r3, r3, #2
 8010ae6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	601a      	str	r2, [r3, #0]
 8010b0c:	e005      	b.n	8010b1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010b20:	461a      	mov	r2, r3
 8010b22:	2300      	movs	r3, #0
 8010b24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b34:	461a      	mov	r2, r3
 8010b36:	680b      	ldr	r3, [r1, #0]
 8010b38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d10c      	bne.n	8010b5a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d104      	bne.n	8010b50 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010b46:	2100      	movs	r1, #0
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 f965 	bl	8010e18 <USB_SetDevSpeed>
 8010b4e:	e008      	b.n	8010b62 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010b50:	2101      	movs	r1, #1
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 f960 	bl	8010e18 <USB_SetDevSpeed>
 8010b58:	e003      	b.n	8010b62 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010b5a:	2103      	movs	r1, #3
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 f95b 	bl	8010e18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010b62:	2110      	movs	r1, #16
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f000 f8f3 	bl	8010d50 <USB_FlushTxFifo>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d001      	beq.n	8010b74 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010b70:	2301      	movs	r3, #1
 8010b72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 f91f 	bl	8010db8 <USB_FlushRxFifo>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d001      	beq.n	8010b84 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010b80:	2301      	movs	r3, #1
 8010b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b96:	461a      	mov	r2, r3
 8010b98:	2300      	movs	r3, #0
 8010b9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ba8:	2300      	movs	r3, #0
 8010baa:	613b      	str	r3, [r7, #16]
 8010bac:	e043      	b.n	8010c36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	015a      	lsls	r2, r3, #5
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010bc4:	d118      	bne.n	8010bf8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d10a      	bne.n	8010be2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	015a      	lsls	r2, r3, #5
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	4413      	add	r3, r2
 8010bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bd8:	461a      	mov	r2, r3
 8010bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010bde:	6013      	str	r3, [r2, #0]
 8010be0:	e013      	b.n	8010c0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	015a      	lsls	r2, r3, #5
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	4413      	add	r3, r2
 8010bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bee:	461a      	mov	r2, r3
 8010bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010bf4:	6013      	str	r3, [r2, #0]
 8010bf6:	e008      	b.n	8010c0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	015a      	lsls	r2, r3, #5
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	4413      	add	r3, r2
 8010c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c04:	461a      	mov	r2, r3
 8010c06:	2300      	movs	r3, #0
 8010c08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	015a      	lsls	r2, r3, #5
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	4413      	add	r3, r2
 8010c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c16:	461a      	mov	r2, r3
 8010c18:	2300      	movs	r3, #0
 8010c1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	015a      	lsls	r2, r3, #5
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	4413      	add	r3, r2
 8010c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c28:	461a      	mov	r2, r3
 8010c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010c2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	3301      	adds	r3, #1
 8010c34:	613b      	str	r3, [r7, #16]
 8010c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c38:	693a      	ldr	r2, [r7, #16]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d3b7      	bcc.n	8010bae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c3e:	2300      	movs	r3, #0
 8010c40:	613b      	str	r3, [r7, #16]
 8010c42:	e043      	b.n	8010ccc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	015a      	lsls	r2, r3, #5
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	4413      	add	r3, r2
 8010c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c5a:	d118      	bne.n	8010c8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d10a      	bne.n	8010c78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	015a      	lsls	r2, r3, #5
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	4413      	add	r3, r2
 8010c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c6e:	461a      	mov	r2, r3
 8010c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010c74:	6013      	str	r3, [r2, #0]
 8010c76:	e013      	b.n	8010ca0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	015a      	lsls	r2, r3, #5
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	4413      	add	r3, r2
 8010c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c84:	461a      	mov	r2, r3
 8010c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010c8a:	6013      	str	r3, [r2, #0]
 8010c8c:	e008      	b.n	8010ca0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	015a      	lsls	r2, r3, #5
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	4413      	add	r3, r2
 8010c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	015a      	lsls	r2, r3, #5
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cac:	461a      	mov	r2, r3
 8010cae:	2300      	movs	r3, #0
 8010cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	015a      	lsls	r2, r3, #5
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	4413      	add	r3, r2
 8010cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010cc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	613b      	str	r3, [r7, #16]
 8010ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cce:	693a      	ldr	r2, [r7, #16]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d3b7      	bcc.n	8010c44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cda:	691b      	ldr	r3, [r3, #16]
 8010cdc:	68fa      	ldr	r2, [r7, #12]
 8010cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ce6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2200      	movs	r2, #0
 8010cec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010cf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d105      	bne.n	8010d08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	699b      	ldr	r3, [r3, #24]
 8010d00:	f043 0210 	orr.w	r2, r3, #16
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	699a      	ldr	r2, [r3, #24]
 8010d0c:	4b0e      	ldr	r3, [pc, #56]	; (8010d48 <USB_DevInit+0x2b4>)
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d005      	beq.n	8010d26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	699b      	ldr	r3, [r3, #24]
 8010d1e:	f043 0208 	orr.w	r2, r3, #8
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d105      	bne.n	8010d38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	699a      	ldr	r2, [r3, #24]
 8010d30:	4b06      	ldr	r3, [pc, #24]	; (8010d4c <USB_DevInit+0x2b8>)
 8010d32:	4313      	orrs	r3, r2
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3718      	adds	r7, #24
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d44:	b004      	add	sp, #16
 8010d46:	4770      	bx	lr
 8010d48:	803c3800 	.word	0x803c3800
 8010d4c:	40000004 	.word	0x40000004

08010d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b085      	sub	sp, #20
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	3301      	adds	r3, #1
 8010d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	4a13      	ldr	r2, [pc, #76]	; (8010db4 <USB_FlushTxFifo+0x64>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d901      	bls.n	8010d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010d6c:	2303      	movs	r3, #3
 8010d6e:	e01b      	b.n	8010da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	691b      	ldr	r3, [r3, #16]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	daf2      	bge.n	8010d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	019b      	lsls	r3, r3, #6
 8010d80:	f043 0220 	orr.w	r2, r3, #32
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	4a08      	ldr	r2, [pc, #32]	; (8010db4 <USB_FlushTxFifo+0x64>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d901      	bls.n	8010d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010d96:	2303      	movs	r3, #3
 8010d98:	e006      	b.n	8010da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	f003 0320 	and.w	r3, r3, #32
 8010da2:	2b20      	cmp	r3, #32
 8010da4:	d0f0      	beq.n	8010d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3714      	adds	r7, #20
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr
 8010db4:	00030d40 	.word	0x00030d40

08010db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	4a11      	ldr	r2, [pc, #68]	; (8010e14 <USB_FlushRxFifo+0x5c>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d901      	bls.n	8010dd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010dd2:	2303      	movs	r3, #3
 8010dd4:	e018      	b.n	8010e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	daf2      	bge.n	8010dc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010dde:	2300      	movs	r3, #0
 8010de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2210      	movs	r2, #16
 8010de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	3301      	adds	r3, #1
 8010dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	4a08      	ldr	r2, [pc, #32]	; (8010e14 <USB_FlushRxFifo+0x5c>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d901      	bls.n	8010dfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010df6:	2303      	movs	r3, #3
 8010df8:	e006      	b.n	8010e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	691b      	ldr	r3, [r3, #16]
 8010dfe:	f003 0310 	and.w	r3, r3, #16
 8010e02:	2b10      	cmp	r3, #16
 8010e04:	d0f0      	beq.n	8010de8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010e06:	2300      	movs	r3, #0
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3714      	adds	r7, #20
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	00030d40 	.word	0x00030d40

08010e18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b085      	sub	sp, #20
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	460b      	mov	r3, r1
 8010e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	78fb      	ldrb	r3, [r7, #3]
 8010e32:	68f9      	ldr	r1, [r7, #12]
 8010e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e38:	4313      	orrs	r3, r2
 8010e3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010e3c:	2300      	movs	r3, #0
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3714      	adds	r7, #20
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010e4a:	b480      	push	{r7}
 8010e4c:	b087      	sub	sp, #28
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	f003 0306 	and.w	r3, r3, #6
 8010e62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d102      	bne.n	8010e70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	75fb      	strb	r3, [r7, #23]
 8010e6e:	e00a      	b.n	8010e86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	d002      	beq.n	8010e7c <USB_GetDevSpeed+0x32>
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	2b06      	cmp	r3, #6
 8010e7a:	d102      	bne.n	8010e82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	75fb      	strb	r3, [r7, #23]
 8010e80:	e001      	b.n	8010e86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010e82:	230f      	movs	r3, #15
 8010e84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	371c      	adds	r7, #28
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b085      	sub	sp, #20
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	785b      	ldrb	r3, [r3, #1]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d139      	bne.n	8010f24 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eb6:	69da      	ldr	r2, [r3, #28]
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	f003 030f 	and.w	r3, r3, #15
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	68f9      	ldr	r1, [r7, #12]
 8010eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	015a      	lsls	r2, r3, #5
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	4413      	add	r3, r2
 8010eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d153      	bne.n	8010f90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	015a      	lsls	r2, r3, #5
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	4413      	add	r3, r2
 8010ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	791b      	ldrb	r3, [r3, #4]
 8010f02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	059b      	lsls	r3, r3, #22
 8010f0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f0c:	431a      	orrs	r2, r3
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	0159      	lsls	r1, r3, #5
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	440b      	add	r3, r1
 8010f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	4b20      	ldr	r3, [pc, #128]	; (8010fa0 <USB_ActivateEndpoint+0x10c>)
 8010f1e:	4313      	orrs	r3, r2
 8010f20:	600b      	str	r3, [r1, #0]
 8010f22:	e035      	b.n	8010f90 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f2a:	69da      	ldr	r2, [r3, #28]
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	f003 030f 	and.w	r3, r3, #15
 8010f34:	2101      	movs	r1, #1
 8010f36:	fa01 f303 	lsl.w	r3, r1, r3
 8010f3a:	041b      	lsls	r3, r3, #16
 8010f3c:	68f9      	ldr	r1, [r7, #12]
 8010f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010f42:	4313      	orrs	r3, r2
 8010f44:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	015a      	lsls	r2, r3, #5
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d119      	bne.n	8010f90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	015a      	lsls	r2, r3, #5
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	4413      	add	r3, r2
 8010f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	791b      	ldrb	r3, [r3, #4]
 8010f76:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010f78:	430b      	orrs	r3, r1
 8010f7a:	431a      	orrs	r2, r3
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	0159      	lsls	r1, r3, #5
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	440b      	add	r3, r1
 8010f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f88:	4619      	mov	r1, r3
 8010f8a:	4b05      	ldr	r3, [pc, #20]	; (8010fa0 <USB_ActivateEndpoint+0x10c>)
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010f90:	2300      	movs	r3, #0
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3714      	adds	r7, #20
 8010f96:	46bd      	mov	sp, r7
 8010f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop
 8010fa0:	10008000 	.word	0x10008000

08010fa4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	785b      	ldrb	r3, [r3, #1]
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d161      	bne.n	8011084 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	015a      	lsls	r2, r3, #5
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fd6:	d11f      	bne.n	8011018 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	015a      	lsls	r2, r3, #5
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	4413      	add	r3, r2
 8010fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	0151      	lsls	r1, r2, #5
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	440a      	add	r2, r1
 8010fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010ff6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	015a      	lsls	r2, r3, #5
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	4413      	add	r3, r2
 8011000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	68ba      	ldr	r2, [r7, #8]
 8011008:	0151      	lsls	r1, r2, #5
 801100a:	68fa      	ldr	r2, [r7, #12]
 801100c:	440a      	add	r2, r1
 801100e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011016:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801101e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	f003 030f 	and.w	r3, r3, #15
 8011028:	2101      	movs	r1, #1
 801102a:	fa01 f303 	lsl.w	r3, r1, r3
 801102e:	b29b      	uxth	r3, r3
 8011030:	43db      	mvns	r3, r3
 8011032:	68f9      	ldr	r1, [r7, #12]
 8011034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011038:	4013      	ands	r3, r2
 801103a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011042:	69da      	ldr	r2, [r3, #28]
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	f003 030f 	and.w	r3, r3, #15
 801104c:	2101      	movs	r1, #1
 801104e:	fa01 f303 	lsl.w	r3, r1, r3
 8011052:	b29b      	uxth	r3, r3
 8011054:	43db      	mvns	r3, r3
 8011056:	68f9      	ldr	r1, [r7, #12]
 8011058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801105c:	4013      	ands	r3, r2
 801105e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	015a      	lsls	r2, r3, #5
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	4413      	add	r3, r2
 8011068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	0159      	lsls	r1, r3, #5
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	440b      	add	r3, r1
 8011076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801107a:	4619      	mov	r1, r3
 801107c:	4b35      	ldr	r3, [pc, #212]	; (8011154 <USB_DeactivateEndpoint+0x1b0>)
 801107e:	4013      	ands	r3, r2
 8011080:	600b      	str	r3, [r1, #0]
 8011082:	e060      	b.n	8011146 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	015a      	lsls	r2, r3, #5
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	4413      	add	r3, r2
 801108c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801109a:	d11f      	bne.n	80110dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	015a      	lsls	r2, r3, #5
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	4413      	add	r3, r2
 80110a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	0151      	lsls	r1, r2, #5
 80110ae:	68fa      	ldr	r2, [r7, #12]
 80110b0:	440a      	add	r2, r1
 80110b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80110ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	015a      	lsls	r2, r3, #5
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	4413      	add	r3, r2
 80110c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	0151      	lsls	r1, r2, #5
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	440a      	add	r2, r1
 80110d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80110da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	f003 030f 	and.w	r3, r3, #15
 80110ec:	2101      	movs	r1, #1
 80110ee:	fa01 f303 	lsl.w	r3, r1, r3
 80110f2:	041b      	lsls	r3, r3, #16
 80110f4:	43db      	mvns	r3, r3
 80110f6:	68f9      	ldr	r1, [r7, #12]
 80110f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80110fc:	4013      	ands	r3, r2
 80110fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011106:	69da      	ldr	r2, [r3, #28]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	f003 030f 	and.w	r3, r3, #15
 8011110:	2101      	movs	r1, #1
 8011112:	fa01 f303 	lsl.w	r3, r1, r3
 8011116:	041b      	lsls	r3, r3, #16
 8011118:	43db      	mvns	r3, r3
 801111a:	68f9      	ldr	r1, [r7, #12]
 801111c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011120:	4013      	ands	r3, r2
 8011122:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	015a      	lsls	r2, r3, #5
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	4413      	add	r3, r2
 801112c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	0159      	lsls	r1, r3, #5
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	440b      	add	r3, r1
 801113a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801113e:	4619      	mov	r1, r3
 8011140:	4b05      	ldr	r3, [pc, #20]	; (8011158 <USB_DeactivateEndpoint+0x1b4>)
 8011142:	4013      	ands	r3, r2
 8011144:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3714      	adds	r7, #20
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr
 8011154:	ec337800 	.word	0xec337800
 8011158:	eff37800 	.word	0xeff37800

0801115c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b08a      	sub	sp, #40	; 0x28
 8011160:	af02      	add	r7, sp, #8
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	4613      	mov	r3, r2
 8011168:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	785b      	ldrb	r3, [r3, #1]
 8011178:	2b01      	cmp	r3, #1
 801117a:	f040 8181 	bne.w	8011480 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	691b      	ldr	r3, [r3, #16]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d132      	bne.n	80111ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	015a      	lsls	r2, r3, #5
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	4413      	add	r3, r2
 801118e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011192:	691a      	ldr	r2, [r3, #16]
 8011194:	69bb      	ldr	r3, [r7, #24]
 8011196:	0159      	lsls	r1, r3, #5
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	440b      	add	r3, r1
 801119c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111a0:	4619      	mov	r1, r3
 80111a2:	4ba5      	ldr	r3, [pc, #660]	; (8011438 <USB_EPStartXfer+0x2dc>)
 80111a4:	4013      	ands	r3, r2
 80111a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80111a8:	69bb      	ldr	r3, [r7, #24]
 80111aa:	015a      	lsls	r2, r3, #5
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	4413      	add	r3, r2
 80111b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	69ba      	ldr	r2, [r7, #24]
 80111b8:	0151      	lsls	r1, r2, #5
 80111ba:	69fa      	ldr	r2, [r7, #28]
 80111bc:	440a      	add	r2, r1
 80111be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80111c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	015a      	lsls	r2, r3, #5
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	4413      	add	r3, r2
 80111d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111d4:	691a      	ldr	r2, [r3, #16]
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	0159      	lsls	r1, r3, #5
 80111da:	69fb      	ldr	r3, [r7, #28]
 80111dc:	440b      	add	r3, r1
 80111de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111e2:	4619      	mov	r1, r3
 80111e4:	4b95      	ldr	r3, [pc, #596]	; (801143c <USB_EPStartXfer+0x2e0>)
 80111e6:	4013      	ands	r3, r2
 80111e8:	610b      	str	r3, [r1, #16]
 80111ea:	e092      	b.n	8011312 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80111ec:	69bb      	ldr	r3, [r7, #24]
 80111ee:	015a      	lsls	r2, r3, #5
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	4413      	add	r3, r2
 80111f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111f8:	691a      	ldr	r2, [r3, #16]
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	0159      	lsls	r1, r3, #5
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	440b      	add	r3, r1
 8011202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011206:	4619      	mov	r1, r3
 8011208:	4b8c      	ldr	r3, [pc, #560]	; (801143c <USB_EPStartXfer+0x2e0>)
 801120a:	4013      	ands	r3, r2
 801120c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	015a      	lsls	r2, r3, #5
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	4413      	add	r3, r2
 8011216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801121a:	691a      	ldr	r2, [r3, #16]
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	0159      	lsls	r1, r3, #5
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	440b      	add	r3, r1
 8011224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011228:	4619      	mov	r1, r3
 801122a:	4b83      	ldr	r3, [pc, #524]	; (8011438 <USB_EPStartXfer+0x2dc>)
 801122c:	4013      	ands	r3, r2
 801122e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d11a      	bne.n	801126c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	691a      	ldr	r2, [r3, #16]
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	429a      	cmp	r2, r3
 8011240:	d903      	bls.n	801124a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	689a      	ldr	r2, [r3, #8]
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	015a      	lsls	r2, r3, #5
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	4413      	add	r3, r2
 8011252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	69ba      	ldr	r2, [r7, #24]
 801125a:	0151      	lsls	r1, r2, #5
 801125c:	69fa      	ldr	r2, [r7, #28]
 801125e:	440a      	add	r2, r1
 8011260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011268:	6113      	str	r3, [r2, #16]
 801126a:	e01b      	b.n	80112a4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	015a      	lsls	r2, r3, #5
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	4413      	add	r3, r2
 8011274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011278:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	6919      	ldr	r1, [r3, #16]
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	440b      	add	r3, r1
 8011284:	1e59      	subs	r1, r3, #1
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	fbb1 f3f3 	udiv	r3, r1, r3
 801128e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011290:	4b6b      	ldr	r3, [pc, #428]	; (8011440 <USB_EPStartXfer+0x2e4>)
 8011292:	400b      	ands	r3, r1
 8011294:	69b9      	ldr	r1, [r7, #24]
 8011296:	0148      	lsls	r0, r1, #5
 8011298:	69f9      	ldr	r1, [r7, #28]
 801129a:	4401      	add	r1, r0
 801129c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80112a0:	4313      	orrs	r3, r2
 80112a2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	015a      	lsls	r2, r3, #5
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	4413      	add	r3, r2
 80112ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112b0:	691a      	ldr	r2, [r3, #16]
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	691b      	ldr	r3, [r3, #16]
 80112b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80112ba:	69b9      	ldr	r1, [r7, #24]
 80112bc:	0148      	lsls	r0, r1, #5
 80112be:	69f9      	ldr	r1, [r7, #28]
 80112c0:	4401      	add	r1, r0
 80112c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80112c6:	4313      	orrs	r3, r2
 80112c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	791b      	ldrb	r3, [r3, #4]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d11f      	bne.n	8011312 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	015a      	lsls	r2, r3, #5
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	4413      	add	r3, r2
 80112da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112de:	691b      	ldr	r3, [r3, #16]
 80112e0:	69ba      	ldr	r2, [r7, #24]
 80112e2:	0151      	lsls	r1, r2, #5
 80112e4:	69fa      	ldr	r2, [r7, #28]
 80112e6:	440a      	add	r2, r1
 80112e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80112f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80112f2:	69bb      	ldr	r3, [r7, #24]
 80112f4:	015a      	lsls	r2, r3, #5
 80112f6:	69fb      	ldr	r3, [r7, #28]
 80112f8:	4413      	add	r3, r2
 80112fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112fe:	691b      	ldr	r3, [r3, #16]
 8011300:	69ba      	ldr	r2, [r7, #24]
 8011302:	0151      	lsls	r1, r2, #5
 8011304:	69fa      	ldr	r2, [r7, #28]
 8011306:	440a      	add	r2, r1
 8011308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801130c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011310:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011312:	79fb      	ldrb	r3, [r7, #7]
 8011314:	2b01      	cmp	r3, #1
 8011316:	d14b      	bne.n	80113b0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	69db      	ldr	r3, [r3, #28]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d009      	beq.n	8011334 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	015a      	lsls	r2, r3, #5
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	4413      	add	r3, r2
 8011328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801132c:	461a      	mov	r2, r3
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	69db      	ldr	r3, [r3, #28]
 8011332:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	791b      	ldrb	r3, [r3, #4]
 8011338:	2b01      	cmp	r3, #1
 801133a:	d128      	bne.n	801138e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011348:	2b00      	cmp	r3, #0
 801134a:	d110      	bne.n	801136e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	015a      	lsls	r2, r3, #5
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	4413      	add	r3, r2
 8011354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	69ba      	ldr	r2, [r7, #24]
 801135c:	0151      	lsls	r1, r2, #5
 801135e:	69fa      	ldr	r2, [r7, #28]
 8011360:	440a      	add	r2, r1
 8011362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801136a:	6013      	str	r3, [r2, #0]
 801136c:	e00f      	b.n	801138e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	015a      	lsls	r2, r3, #5
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	4413      	add	r3, r2
 8011376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	69ba      	ldr	r2, [r7, #24]
 801137e:	0151      	lsls	r1, r2, #5
 8011380:	69fa      	ldr	r2, [r7, #28]
 8011382:	440a      	add	r2, r1
 8011384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801138c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	015a      	lsls	r2, r3, #5
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	4413      	add	r3, r2
 8011396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	69ba      	ldr	r2, [r7, #24]
 801139e:	0151      	lsls	r1, r2, #5
 80113a0:	69fa      	ldr	r2, [r7, #28]
 80113a2:	440a      	add	r2, r1
 80113a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80113ac:	6013      	str	r3, [r2, #0]
 80113ae:	e16a      	b.n	8011686 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	015a      	lsls	r2, r3, #5
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	4413      	add	r3, r2
 80113b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	69ba      	ldr	r2, [r7, #24]
 80113c0:	0151      	lsls	r1, r2, #5
 80113c2:	69fa      	ldr	r2, [r7, #28]
 80113c4:	440a      	add	r2, r1
 80113c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80113ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	791b      	ldrb	r3, [r3, #4]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d015      	beq.n	8011404 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	691b      	ldr	r3, [r3, #16]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 8152 	beq.w	8011686 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	f003 030f 	and.w	r3, r3, #15
 80113f2:	2101      	movs	r1, #1
 80113f4:	fa01 f303 	lsl.w	r3, r1, r3
 80113f8:	69f9      	ldr	r1, [r7, #28]
 80113fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113fe:	4313      	orrs	r3, r2
 8011400:	634b      	str	r3, [r1, #52]	; 0x34
 8011402:	e140      	b.n	8011686 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801140a:	689b      	ldr	r3, [r3, #8]
 801140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011410:	2b00      	cmp	r3, #0
 8011412:	d117      	bne.n	8011444 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	015a      	lsls	r2, r3, #5
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	4413      	add	r3, r2
 801141c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	69ba      	ldr	r2, [r7, #24]
 8011424:	0151      	lsls	r1, r2, #5
 8011426:	69fa      	ldr	r2, [r7, #28]
 8011428:	440a      	add	r2, r1
 801142a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801142e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011432:	6013      	str	r3, [r2, #0]
 8011434:	e016      	b.n	8011464 <USB_EPStartXfer+0x308>
 8011436:	bf00      	nop
 8011438:	e007ffff 	.word	0xe007ffff
 801143c:	fff80000 	.word	0xfff80000
 8011440:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	015a      	lsls	r2, r3, #5
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	4413      	add	r3, r2
 801144c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	69ba      	ldr	r2, [r7, #24]
 8011454:	0151      	lsls	r1, r2, #5
 8011456:	69fa      	ldr	r2, [r7, #28]
 8011458:	440a      	add	r2, r1
 801145a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011462:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	68d9      	ldr	r1, [r3, #12]
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	781a      	ldrb	r2, [r3, #0]
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	691b      	ldr	r3, [r3, #16]
 8011470:	b298      	uxth	r0, r3
 8011472:	79fb      	ldrb	r3, [r7, #7]
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	4603      	mov	r3, r0
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f000 f9b9 	bl	80117f0 <USB_WritePacket>
 801147e:	e102      	b.n	8011686 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011480:	69bb      	ldr	r3, [r7, #24]
 8011482:	015a      	lsls	r2, r3, #5
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	4413      	add	r3, r2
 8011488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801148c:	691a      	ldr	r2, [r3, #16]
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	0159      	lsls	r1, r3, #5
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	440b      	add	r3, r1
 8011496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801149a:	4619      	mov	r1, r3
 801149c:	4b7c      	ldr	r3, [pc, #496]	; (8011690 <USB_EPStartXfer+0x534>)
 801149e:	4013      	ands	r3, r2
 80114a0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	015a      	lsls	r2, r3, #5
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	4413      	add	r3, r2
 80114aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ae:	691a      	ldr	r2, [r3, #16]
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	0159      	lsls	r1, r3, #5
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	440b      	add	r3, r1
 80114b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114bc:	4619      	mov	r1, r3
 80114be:	4b75      	ldr	r3, [pc, #468]	; (8011694 <USB_EPStartXfer+0x538>)
 80114c0:	4013      	ands	r3, r2
 80114c2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d12f      	bne.n	801152a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	691b      	ldr	r3, [r3, #16]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d003      	beq.n	80114da <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	689a      	ldr	r2, [r3, #8]
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	689a      	ldr	r2, [r3, #8]
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	015a      	lsls	r2, r3, #5
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	4413      	add	r3, r2
 80114ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ee:	691a      	ldr	r2, [r3, #16]
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	6a1b      	ldr	r3, [r3, #32]
 80114f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80114f8:	69b9      	ldr	r1, [r7, #24]
 80114fa:	0148      	lsls	r0, r1, #5
 80114fc:	69f9      	ldr	r1, [r7, #28]
 80114fe:	4401      	add	r1, r0
 8011500:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011504:	4313      	orrs	r3, r2
 8011506:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	015a      	lsls	r2, r3, #5
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	4413      	add	r3, r2
 8011510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011514:	691b      	ldr	r3, [r3, #16]
 8011516:	69ba      	ldr	r2, [r7, #24]
 8011518:	0151      	lsls	r1, r2, #5
 801151a:	69fa      	ldr	r2, [r7, #28]
 801151c:	440a      	add	r2, r1
 801151e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011526:	6113      	str	r3, [r2, #16]
 8011528:	e05f      	b.n	80115ea <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	691b      	ldr	r3, [r3, #16]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d123      	bne.n	801157a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011532:	69bb      	ldr	r3, [r7, #24]
 8011534:	015a      	lsls	r2, r3, #5
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	4413      	add	r3, r2
 801153a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801153e:	691a      	ldr	r2, [r3, #16]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011548:	69b9      	ldr	r1, [r7, #24]
 801154a:	0148      	lsls	r0, r1, #5
 801154c:	69f9      	ldr	r1, [r7, #28]
 801154e:	4401      	add	r1, r0
 8011550:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011554:	4313      	orrs	r3, r2
 8011556:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	015a      	lsls	r2, r3, #5
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	4413      	add	r3, r2
 8011560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011564:	691b      	ldr	r3, [r3, #16]
 8011566:	69ba      	ldr	r2, [r7, #24]
 8011568:	0151      	lsls	r1, r2, #5
 801156a:	69fa      	ldr	r2, [r7, #28]
 801156c:	440a      	add	r2, r1
 801156e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011576:	6113      	str	r3, [r2, #16]
 8011578:	e037      	b.n	80115ea <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	691a      	ldr	r2, [r3, #16]
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	4413      	add	r3, r2
 8011584:	1e5a      	subs	r2, r3, #1
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	fbb2 f3f3 	udiv	r3, r2, r3
 801158e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	8afa      	ldrh	r2, [r7, #22]
 8011596:	fb03 f202 	mul.w	r2, r3, r2
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	015a      	lsls	r2, r3, #5
 80115a2:	69fb      	ldr	r3, [r7, #28]
 80115a4:	4413      	add	r3, r2
 80115a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115aa:	691a      	ldr	r2, [r3, #16]
 80115ac:	8afb      	ldrh	r3, [r7, #22]
 80115ae:	04d9      	lsls	r1, r3, #19
 80115b0:	4b39      	ldr	r3, [pc, #228]	; (8011698 <USB_EPStartXfer+0x53c>)
 80115b2:	400b      	ands	r3, r1
 80115b4:	69b9      	ldr	r1, [r7, #24]
 80115b6:	0148      	lsls	r0, r1, #5
 80115b8:	69f9      	ldr	r1, [r7, #28]
 80115ba:	4401      	add	r1, r0
 80115bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80115c0:	4313      	orrs	r3, r2
 80115c2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80115c4:	69bb      	ldr	r3, [r7, #24]
 80115c6:	015a      	lsls	r2, r3, #5
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	4413      	add	r3, r2
 80115cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115d0:	691a      	ldr	r2, [r3, #16]
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	6a1b      	ldr	r3, [r3, #32]
 80115d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115da:	69b9      	ldr	r1, [r7, #24]
 80115dc:	0148      	lsls	r0, r1, #5
 80115de:	69f9      	ldr	r1, [r7, #28]
 80115e0:	4401      	add	r1, r0
 80115e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80115e6:	4313      	orrs	r3, r2
 80115e8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80115ea:	79fb      	ldrb	r3, [r7, #7]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d10d      	bne.n	801160c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d009      	beq.n	801160c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	68d9      	ldr	r1, [r3, #12]
 80115fc:	69bb      	ldr	r3, [r7, #24]
 80115fe:	015a      	lsls	r2, r3, #5
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	4413      	add	r3, r2
 8011604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011608:	460a      	mov	r2, r1
 801160a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	791b      	ldrb	r3, [r3, #4]
 8011610:	2b01      	cmp	r3, #1
 8011612:	d128      	bne.n	8011666 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011620:	2b00      	cmp	r3, #0
 8011622:	d110      	bne.n	8011646 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	015a      	lsls	r2, r3, #5
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	4413      	add	r3, r2
 801162c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	69ba      	ldr	r2, [r7, #24]
 8011634:	0151      	lsls	r1, r2, #5
 8011636:	69fa      	ldr	r2, [r7, #28]
 8011638:	440a      	add	r2, r1
 801163a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801163e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011642:	6013      	str	r3, [r2, #0]
 8011644:	e00f      	b.n	8011666 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	015a      	lsls	r2, r3, #5
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	4413      	add	r3, r2
 801164e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	69ba      	ldr	r2, [r7, #24]
 8011656:	0151      	lsls	r1, r2, #5
 8011658:	69fa      	ldr	r2, [r7, #28]
 801165a:	440a      	add	r2, r1
 801165c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011664:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011666:	69bb      	ldr	r3, [r7, #24]
 8011668:	015a      	lsls	r2, r3, #5
 801166a:	69fb      	ldr	r3, [r7, #28]
 801166c:	4413      	add	r3, r2
 801166e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	69ba      	ldr	r2, [r7, #24]
 8011676:	0151      	lsls	r1, r2, #5
 8011678:	69fa      	ldr	r2, [r7, #28]
 801167a:	440a      	add	r2, r1
 801167c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3720      	adds	r7, #32
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	fff80000 	.word	0xfff80000
 8011694:	e007ffff 	.word	0xe007ffff
 8011698:	1ff80000 	.word	0x1ff80000

0801169c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801169c:	b480      	push	{r7}
 801169e:	b087      	sub	sp, #28
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80116a6:	2300      	movs	r3, #0
 80116a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80116aa:	2300      	movs	r3, #0
 80116ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	785b      	ldrb	r3, [r3, #1]
 80116b6:	2b01      	cmp	r3, #1
 80116b8:	d14a      	bne.n	8011750 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	015a      	lsls	r2, r3, #5
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	4413      	add	r3, r2
 80116c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80116ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80116d2:	f040 8086 	bne.w	80117e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	015a      	lsls	r2, r3, #5
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	4413      	add	r3, r2
 80116e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	683a      	ldr	r2, [r7, #0]
 80116e8:	7812      	ldrb	r2, [r2, #0]
 80116ea:	0151      	lsls	r1, r2, #5
 80116ec:	693a      	ldr	r2, [r7, #16]
 80116ee:	440a      	add	r2, r1
 80116f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80116f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	015a      	lsls	r2, r3, #5
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	4413      	add	r3, r2
 8011704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	683a      	ldr	r2, [r7, #0]
 801170c:	7812      	ldrb	r2, [r2, #0]
 801170e:	0151      	lsls	r1, r2, #5
 8011710:	693a      	ldr	r2, [r7, #16]
 8011712:	440a      	add	r2, r1
 8011714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801171c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	3301      	adds	r3, #1
 8011722:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f242 7210 	movw	r2, #10000	; 0x2710
 801172a:	4293      	cmp	r3, r2
 801172c:	d902      	bls.n	8011734 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801172e:	2301      	movs	r3, #1
 8011730:	75fb      	strb	r3, [r7, #23]
          break;
 8011732:	e056      	b.n	80117e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	015a      	lsls	r2, r3, #5
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	4413      	add	r3, r2
 801173e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801174c:	d0e7      	beq.n	801171e <USB_EPStopXfer+0x82>
 801174e:	e048      	b.n	80117e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	015a      	lsls	r2, r3, #5
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	4413      	add	r3, r2
 801175a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011768:	d13b      	bne.n	80117e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	015a      	lsls	r2, r3, #5
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	4413      	add	r3, r2
 8011774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	683a      	ldr	r2, [r7, #0]
 801177c:	7812      	ldrb	r2, [r2, #0]
 801177e:	0151      	lsls	r1, r2, #5
 8011780:	693a      	ldr	r2, [r7, #16]
 8011782:	440a      	add	r2, r1
 8011784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801178c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	015a      	lsls	r2, r3, #5
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	4413      	add	r3, r2
 8011798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	683a      	ldr	r2, [r7, #0]
 80117a0:	7812      	ldrb	r2, [r2, #0]
 80117a2:	0151      	lsls	r1, r2, #5
 80117a4:	693a      	ldr	r2, [r7, #16]
 80117a6:	440a      	add	r2, r1
 80117a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80117ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80117b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	3301      	adds	r3, #1
 80117b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80117be:	4293      	cmp	r3, r2
 80117c0:	d902      	bls.n	80117c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80117c2:	2301      	movs	r3, #1
 80117c4:	75fb      	strb	r3, [r7, #23]
          break;
 80117c6:	e00c      	b.n	80117e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	015a      	lsls	r2, r3, #5
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	4413      	add	r3, r2
 80117d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80117dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80117e0:	d0e7      	beq.n	80117b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80117e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	371c      	adds	r7, #28
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b089      	sub	sp, #36	; 0x24
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	4611      	mov	r1, r2
 80117fc:	461a      	mov	r2, r3
 80117fe:	460b      	mov	r3, r1
 8011800:	71fb      	strb	r3, [r7, #7]
 8011802:	4613      	mov	r3, r2
 8011804:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801180e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011812:	2b00      	cmp	r3, #0
 8011814:	d123      	bne.n	801185e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011816:	88bb      	ldrh	r3, [r7, #4]
 8011818:	3303      	adds	r3, #3
 801181a:	089b      	lsrs	r3, r3, #2
 801181c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801181e:	2300      	movs	r3, #0
 8011820:	61bb      	str	r3, [r7, #24]
 8011822:	e018      	b.n	8011856 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011824:	79fb      	ldrb	r3, [r7, #7]
 8011826:	031a      	lsls	r2, r3, #12
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	4413      	add	r3, r2
 801182c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011830:	461a      	mov	r2, r3
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	3301      	adds	r3, #1
 801183c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	3301      	adds	r3, #1
 8011842:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	3301      	adds	r3, #1
 8011848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	3301      	adds	r3, #1
 801184e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	3301      	adds	r3, #1
 8011854:	61bb      	str	r3, [r7, #24]
 8011856:	69ba      	ldr	r2, [r7, #24]
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	429a      	cmp	r2, r3
 801185c:	d3e2      	bcc.n	8011824 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801185e:	2300      	movs	r3, #0
}
 8011860:	4618      	mov	r0, r3
 8011862:	3724      	adds	r7, #36	; 0x24
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr

0801186c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801186c:	b480      	push	{r7}
 801186e:	b08b      	sub	sp, #44	; 0x2c
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	4613      	mov	r3, r2
 8011878:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011882:	88fb      	ldrh	r3, [r7, #6]
 8011884:	089b      	lsrs	r3, r3, #2
 8011886:	b29b      	uxth	r3, r3
 8011888:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801188a:	88fb      	ldrh	r3, [r7, #6]
 801188c:	f003 0303 	and.w	r3, r3, #3
 8011890:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011892:	2300      	movs	r3, #0
 8011894:	623b      	str	r3, [r7, #32]
 8011896:	e014      	b.n	80118c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80118a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a6:	3301      	adds	r3, #1
 80118a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80118aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ac:	3301      	adds	r3, #1
 80118ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	3301      	adds	r3, #1
 80118b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80118b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b8:	3301      	adds	r3, #1
 80118ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80118bc:	6a3b      	ldr	r3, [r7, #32]
 80118be:	3301      	adds	r3, #1
 80118c0:	623b      	str	r3, [r7, #32]
 80118c2:	6a3a      	ldr	r2, [r7, #32]
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d3e6      	bcc.n	8011898 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80118ca:	8bfb      	ldrh	r3, [r7, #30]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d01e      	beq.n	801190e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80118d0:	2300      	movs	r3, #0
 80118d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118da:	461a      	mov	r2, r3
 80118dc:	f107 0310 	add.w	r3, r7, #16
 80118e0:	6812      	ldr	r2, [r2, #0]
 80118e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80118e4:	693a      	ldr	r2, [r7, #16]
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	00db      	lsls	r3, r3, #3
 80118ec:	fa22 f303 	lsr.w	r3, r2, r3
 80118f0:	b2da      	uxtb	r2, r3
 80118f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f4:	701a      	strb	r2, [r3, #0]
      i++;
 80118f6:	6a3b      	ldr	r3, [r7, #32]
 80118f8:	3301      	adds	r3, #1
 80118fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80118fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fe:	3301      	adds	r3, #1
 8011900:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8011902:	8bfb      	ldrh	r3, [r7, #30]
 8011904:	3b01      	subs	r3, #1
 8011906:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011908:	8bfb      	ldrh	r3, [r7, #30]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d1ea      	bne.n	80118e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011910:	4618      	mov	r0, r3
 8011912:	372c      	adds	r7, #44	; 0x2c
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr

0801191c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801191c:	b480      	push	{r7}
 801191e:	b085      	sub	sp, #20
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	785b      	ldrb	r3, [r3, #1]
 8011934:	2b01      	cmp	r3, #1
 8011936:	d12c      	bne.n	8011992 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	015a      	lsls	r2, r3, #5
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	4413      	add	r3, r2
 8011940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	db12      	blt.n	8011970 <USB_EPSetStall+0x54>
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00f      	beq.n	8011970 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	015a      	lsls	r2, r3, #5
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	4413      	add	r3, r2
 8011958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	68ba      	ldr	r2, [r7, #8]
 8011960:	0151      	lsls	r1, r2, #5
 8011962:	68fa      	ldr	r2, [r7, #12]
 8011964:	440a      	add	r2, r1
 8011966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801196a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801196e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	015a      	lsls	r2, r3, #5
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	4413      	add	r3, r2
 8011978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	0151      	lsls	r1, r2, #5
 8011982:	68fa      	ldr	r2, [r7, #12]
 8011984:	440a      	add	r2, r1
 8011986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801198a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801198e:	6013      	str	r3, [r2, #0]
 8011990:	e02b      	b.n	80119ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	015a      	lsls	r2, r3, #5
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	4413      	add	r3, r2
 801199a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	db12      	blt.n	80119ca <USB_EPSetStall+0xae>
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00f      	beq.n	80119ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	015a      	lsls	r2, r3, #5
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	4413      	add	r3, r2
 80119b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	0151      	lsls	r1, r2, #5
 80119bc:	68fa      	ldr	r2, [r7, #12]
 80119be:	440a      	add	r2, r1
 80119c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80119c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	015a      	lsls	r2, r3, #5
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	4413      	add	r3, r2
 80119d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	68ba      	ldr	r2, [r7, #8]
 80119da:	0151      	lsls	r1, r2, #5
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	440a      	add	r2, r1
 80119e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80119e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80119ea:	2300      	movs	r3, #0
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3714      	adds	r7, #20
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b085      	sub	sp, #20
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	785b      	ldrb	r3, [r3, #1]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d128      	bne.n	8011a66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	015a      	lsls	r2, r3, #5
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	0151      	lsls	r1, r2, #5
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	440a      	add	r2, r1
 8011a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011a32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	791b      	ldrb	r3, [r3, #4]
 8011a38:	2b03      	cmp	r3, #3
 8011a3a:	d003      	beq.n	8011a44 <USB_EPClearStall+0x4c>
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	791b      	ldrb	r3, [r3, #4]
 8011a40:	2b02      	cmp	r3, #2
 8011a42:	d138      	bne.n	8011ab6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	015a      	lsls	r2, r3, #5
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	68ba      	ldr	r2, [r7, #8]
 8011a54:	0151      	lsls	r1, r2, #5
 8011a56:	68fa      	ldr	r2, [r7, #12]
 8011a58:	440a      	add	r2, r1
 8011a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a62:	6013      	str	r3, [r2, #0]
 8011a64:	e027      	b.n	8011ab6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	015a      	lsls	r2, r3, #5
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	68ba      	ldr	r2, [r7, #8]
 8011a76:	0151      	lsls	r1, r2, #5
 8011a78:	68fa      	ldr	r2, [r7, #12]
 8011a7a:	440a      	add	r2, r1
 8011a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011a84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	791b      	ldrb	r3, [r3, #4]
 8011a8a:	2b03      	cmp	r3, #3
 8011a8c:	d003      	beq.n	8011a96 <USB_EPClearStall+0x9e>
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	791b      	ldrb	r3, [r3, #4]
 8011a92:	2b02      	cmp	r3, #2
 8011a94:	d10f      	bne.n	8011ab6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	015a      	lsls	r2, r3, #5
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	68ba      	ldr	r2, [r7, #8]
 8011aa6:	0151      	lsls	r1, r2, #5
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	440a      	add	r2, r1
 8011aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ab4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011ab6:	2300      	movs	r3, #0
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3714      	adds	r7, #20
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr

08011ac4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b085      	sub	sp, #20
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	460b      	mov	r3, r1
 8011ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ae2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011ae6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	78fb      	ldrb	r3, [r7, #3]
 8011af2:	011b      	lsls	r3, r3, #4
 8011af4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011af8:	68f9      	ldr	r1, [r7, #12]
 8011afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011afe:	4313      	orrs	r3, r2
 8011b00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3714      	adds	r7, #20
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b085      	sub	sp, #20
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	68fa      	ldr	r2, [r7, #12]
 8011b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011b2a:	f023 0303 	bic.w	r3, r3, #3
 8011b2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b3e:	f023 0302 	bic.w	r3, r3, #2
 8011b42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011b44:	2300      	movs	r3, #0
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3714      	adds	r7, #20
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr

08011b52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011b52:	b480      	push	{r7}
 8011b54:	b085      	sub	sp, #20
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	68fa      	ldr	r2, [r7, #12]
 8011b68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011b6c:	f023 0303 	bic.w	r3, r3, #3
 8011b70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b78:	685b      	ldr	r3, [r3, #4]
 8011b7a:	68fa      	ldr	r2, [r7, #12]
 8011b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b80:	f043 0302 	orr.w	r3, r3, #2
 8011b84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011b86:	2300      	movs	r3, #0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	695b      	ldr	r3, [r3, #20]
 8011ba0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	699b      	ldr	r3, [r3, #24]
 8011ba6:	68fa      	ldr	r2, [r7, #12]
 8011ba8:	4013      	ands	r3, r2
 8011baa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011bac:	68fb      	ldr	r3, [r7, #12]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3714      	adds	r7, #20
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb8:	4770      	bx	lr

08011bba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bba:	b480      	push	{r7}
 8011bbc:	b085      	sub	sp, #20
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bd6:	69db      	ldr	r3, [r3, #28]
 8011bd8:	68ba      	ldr	r2, [r7, #8]
 8011bda:	4013      	ands	r3, r2
 8011bdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	0c1b      	lsrs	r3, r3, #16
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3714      	adds	r7, #20
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr

08011bee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bee:	b480      	push	{r7}
 8011bf0:	b085      	sub	sp, #20
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c00:	699b      	ldr	r3, [r3, #24]
 8011c02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c0a:	69db      	ldr	r3, [r3, #28]
 8011c0c:	68ba      	ldr	r2, [r7, #8]
 8011c0e:	4013      	ands	r3, r2
 8011c10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	b29b      	uxth	r3, r3
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr

08011c22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011c22:	b480      	push	{r7}
 8011c24:	b085      	sub	sp, #20
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011c32:	78fb      	ldrb	r3, [r7, #3]
 8011c34:	015a      	lsls	r2, r3, #5
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	4413      	add	r3, r2
 8011c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c48:	695b      	ldr	r3, [r3, #20]
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	4013      	ands	r3, r2
 8011c4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011c50:	68bb      	ldr	r3, [r7, #8]
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3714      	adds	r7, #20
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr

08011c5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011c5e:	b480      	push	{r7}
 8011c60:	b087      	sub	sp, #28
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	460b      	mov	r3, r1
 8011c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c74:	691b      	ldr	r3, [r3, #16]
 8011c76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011c82:	78fb      	ldrb	r3, [r7, #3]
 8011c84:	f003 030f 	and.w	r3, r3, #15
 8011c88:	68fa      	ldr	r2, [r7, #12]
 8011c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8011c8e:	01db      	lsls	r3, r3, #7
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	693a      	ldr	r2, [r7, #16]
 8011c94:	4313      	orrs	r3, r2
 8011c96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011c98:	78fb      	ldrb	r3, [r7, #3]
 8011c9a:	015a      	lsls	r2, r3, #5
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	4413      	add	r3, r2
 8011ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ca4:	689b      	ldr	r3, [r3, #8]
 8011ca6:	693a      	ldr	r2, [r7, #16]
 8011ca8:	4013      	ands	r3, r2
 8011caa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011cac:	68bb      	ldr	r3, [r7, #8]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	371c      	adds	r7, #28
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011cba:	b480      	push	{r7}
 8011cbc:	b083      	sub	sp, #12
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	695b      	ldr	r3, [r3, #20]
 8011cc6:	f003 0301 	and.w	r3, r3, #1
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	370c      	adds	r7, #12
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd4:	4770      	bx	lr
	...

08011cd8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	4b09      	ldr	r3, [pc, #36]	; (8011d1c <USB_ActivateSetup+0x44>)
 8011cf6:	4013      	ands	r3, r2
 8011cf8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	68fa      	ldr	r2, [r7, #12]
 8011d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d0e:	2300      	movs	r3, #0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3714      	adds	r7, #20
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr
 8011d1c:	fffff800 	.word	0xfffff800

08011d20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b087      	sub	sp, #28
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	460b      	mov	r3, r1
 8011d2a:	607a      	str	r2, [r7, #4]
 8011d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	333c      	adds	r3, #60	; 0x3c
 8011d36:	3304      	adds	r3, #4
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	4a26      	ldr	r2, [pc, #152]	; (8011dd8 <USB_EP0_OutStart+0xb8>)
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d90a      	bls.n	8011d5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d54:	d101      	bne.n	8011d5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011d56:	2300      	movs	r3, #0
 8011d58:	e037      	b.n	8011dca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d60:	461a      	mov	r2, r3
 8011d62:	2300      	movs	r3, #0
 8011d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d6c:	691b      	ldr	r3, [r3, #16]
 8011d6e:	697a      	ldr	r2, [r7, #20]
 8011d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011d78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d80:	691b      	ldr	r3, [r3, #16]
 8011d82:	697a      	ldr	r2, [r7, #20]
 8011d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d88:	f043 0318 	orr.w	r3, r3, #24
 8011d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d94:	691b      	ldr	r3, [r3, #16]
 8011d96:	697a      	ldr	r2, [r7, #20]
 8011d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011da0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011da2:	7afb      	ldrb	r3, [r7, #11]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d10f      	bne.n	8011dc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dae:	461a      	mov	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	697a      	ldr	r2, [r7, #20]
 8011dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011dc2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011dc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011dc8:	2300      	movs	r3, #0
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	371c      	adds	r7, #28
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd4:	4770      	bx	lr
 8011dd6:	bf00      	nop
 8011dd8:	4f54300a 	.word	0x4f54300a

08011ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b085      	sub	sp, #20
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011de4:	2300      	movs	r3, #0
 8011de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	3301      	adds	r3, #1
 8011dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	4a13      	ldr	r2, [pc, #76]	; (8011e40 <USB_CoreReset+0x64>)
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d901      	bls.n	8011dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011df6:	2303      	movs	r3, #3
 8011df8:	e01b      	b.n	8011e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	691b      	ldr	r3, [r3, #16]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	daf2      	bge.n	8011de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011e02:	2300      	movs	r3, #0
 8011e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	691b      	ldr	r3, [r3, #16]
 8011e0a:	f043 0201 	orr.w	r2, r3, #1
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	3301      	adds	r3, #1
 8011e16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	4a09      	ldr	r2, [pc, #36]	; (8011e40 <USB_CoreReset+0x64>)
 8011e1c:	4293      	cmp	r3, r2
 8011e1e:	d901      	bls.n	8011e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011e20:	2303      	movs	r3, #3
 8011e22:	e006      	b.n	8011e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	691b      	ldr	r3, [r3, #16]
 8011e28:	f003 0301 	and.w	r3, r3, #1
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d0f0      	beq.n	8011e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3714      	adds	r7, #20
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop
 8011e40:	00030d40 	.word	0x00030d40

08011e44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011e48:	4904      	ldr	r1, [pc, #16]	; (8011e5c <MX_FATFS_Init+0x18>)
 8011e4a:	4805      	ldr	r0, [pc, #20]	; (8011e60 <MX_FATFS_Init+0x1c>)
 8011e4c:	f002 fef4 	bl	8014c38 <FATFS_LinkDriver>
 8011e50:	4603      	mov	r3, r0
 8011e52:	461a      	mov	r2, r3
 8011e54:	4b03      	ldr	r3, [pc, #12]	; (8011e64 <MX_FATFS_Init+0x20>)
 8011e56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011e58:	bf00      	nop
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	240009a0 	.word	0x240009a0
 8011e60:	0802a46c 	.word	0x0802a46c
 8011e64:	2400099c 	.word	0x2400099c

08011e68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b082      	sub	sp, #8
 8011e6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011e72:	f000 f871 	bl	8011f58 <BSP_SD_IsDetected>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d001      	beq.n	8011e80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	e012      	b.n	8011ea6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011e80:	480b      	ldr	r0, [pc, #44]	; (8011eb0 <BSP_SD_Init+0x48>)
 8011e82:	f7fc fa3b 	bl	800e2fc <HAL_SD_Init>
 8011e86:	4603      	mov	r3, r0
 8011e88:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d109      	bne.n	8011ea4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011e94:	4806      	ldr	r0, [pc, #24]	; (8011eb0 <BSP_SD_Init+0x48>)
 8011e96:	f7fc ff2f 	bl	800ecf8 <HAL_SD_ConfigWideBusOperation>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	24000880 	.word	0x24000880

08011eb4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	68ba      	ldr	r2, [r7, #8]
 8011ec8:	68f9      	ldr	r1, [r7, #12]
 8011eca:	4806      	ldr	r0, [pc, #24]	; (8011ee4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011ecc:	f7fc fb36 	bl	800e53c <HAL_SD_ReadBlocks_DMA>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3718      	adds	r7, #24
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	24000880 	.word	0x24000880

08011ee8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b086      	sub	sp, #24
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	68ba      	ldr	r2, [r7, #8]
 8011efc:	68f9      	ldr	r1, [r7, #12]
 8011efe:	4806      	ldr	r0, [pc, #24]	; (8011f18 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011f00:	f7fc fbc4 	bl	800e68c <HAL_SD_WriteBlocks_DMA>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d001      	beq.n	8011f0e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3718      	adds	r7, #24
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	24000880 	.word	0x24000880

08011f1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011f20:	4805      	ldr	r0, [pc, #20]	; (8011f38 <BSP_SD_GetCardState+0x1c>)
 8011f22:	f7fc fffb 	bl	800ef1c <HAL_SD_GetCardState>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b04      	cmp	r3, #4
 8011f2a:	bf14      	ite	ne
 8011f2c:	2301      	movne	r3, #1
 8011f2e:	2300      	moveq	r3, #0
 8011f30:	b2db      	uxtb	r3, r3
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	24000880 	.word	0x24000880

08011f3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011f44:	6879      	ldr	r1, [r7, #4]
 8011f46:	4803      	ldr	r0, [pc, #12]	; (8011f54 <BSP_SD_GetCardInfo+0x18>)
 8011f48:	f7fc feaa 	bl	800eca0 <HAL_SD_GetCardInfo>
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	24000880 	.word	0x24000880

08011f58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011f62:	f000 f80b 	bl	8011f7c <BSP_PlatformIsDetected>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d101      	bne.n	8011f70 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011f70:	79fb      	ldrb	r3, [r7, #7]
 8011f72:	b2db      	uxtb	r3, r3
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011f82:	2301      	movs	r3, #1
 8011f84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011f8a:	4806      	ldr	r0, [pc, #24]	; (8011fa4 <BSP_PlatformIsDetected+0x28>)
 8011f8c:	f7f7 fb22 	bl	80095d4 <HAL_GPIO_ReadPin>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d001      	beq.n	8011f9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011f96:	2300      	movs	r3, #0
 8011f98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	58020000 	.word	0x58020000

08011fa8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8011fb0:	f002 ff02 	bl	8014db8 <osKernelGetTickCount>
 8011fb4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8011fb6:	e006      	b.n	8011fc6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011fb8:	f7ff ffb0 	bl	8011f1c <BSP_SD_GetCardState>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d101      	bne.n	8011fc6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	e009      	b.n	8011fda <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8011fc6:	f002 fef7 	bl	8014db8 <osKernelGetTickCount>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d8f0      	bhi.n	8011fb8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3710      	adds	r7, #16
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
	...

08011fe4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	4603      	mov	r3, r0
 8011fec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011fee:	4b0b      	ldr	r3, [pc, #44]	; (801201c <SD_CheckStatus+0x38>)
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011ff4:	f7ff ff92 	bl	8011f1c <BSP_SD_GetCardState>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d107      	bne.n	801200e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011ffe:	4b07      	ldr	r3, [pc, #28]	; (801201c <SD_CheckStatus+0x38>)
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	b2db      	uxtb	r3, r3
 8012004:	f023 0301 	bic.w	r3, r3, #1
 8012008:	b2da      	uxtb	r2, r3
 801200a:	4b04      	ldr	r3, [pc, #16]	; (801201c <SD_CheckStatus+0x38>)
 801200c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801200e:	4b03      	ldr	r3, [pc, #12]	; (801201c <SD_CheckStatus+0x38>)
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	b2db      	uxtb	r3, r3
}
 8012014:	4618      	mov	r0, r3
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	240003b1 	.word	0x240003b1

08012020 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	4603      	mov	r3, r0
 8012028:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801202a:	4b1c      	ldr	r3, [pc, #112]	; (801209c <SD_initialize+0x7c>)
 801202c:	2201      	movs	r2, #1
 801202e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8012030:	f002 fe7a 	bl	8014d28 <osKernelGetState>
 8012034:	4603      	mov	r3, r0
 8012036:	2b02      	cmp	r3, #2
 8012038:	d129      	bne.n	801208e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801203a:	f7ff ff15 	bl	8011e68 <BSP_SD_Init>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d107      	bne.n	8012054 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012044:	79fb      	ldrb	r3, [r7, #7]
 8012046:	4618      	mov	r0, r3
 8012048:	f7ff ffcc 	bl	8011fe4 <SD_CheckStatus>
 801204c:	4603      	mov	r3, r0
 801204e:	461a      	mov	r2, r3
 8012050:	4b12      	ldr	r3, [pc, #72]	; (801209c <SD_initialize+0x7c>)
 8012052:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012054:	4b11      	ldr	r3, [pc, #68]	; (801209c <SD_initialize+0x7c>)
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	b2db      	uxtb	r3, r3
 801205a:	2b01      	cmp	r3, #1
 801205c:	d017      	beq.n	801208e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801205e:	4b10      	ldr	r3, [pc, #64]	; (80120a0 <SD_initialize+0x80>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d107      	bne.n	8012076 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8012066:	2200      	movs	r2, #0
 8012068:	2102      	movs	r1, #2
 801206a:	200a      	movs	r0, #10
 801206c:	f003 f994 	bl	8015398 <osMessageQueueNew>
 8012070:	4603      	mov	r3, r0
 8012072:	4a0b      	ldr	r2, [pc, #44]	; (80120a0 <SD_initialize+0x80>)
 8012074:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8012076:	4b0a      	ldr	r3, [pc, #40]	; (80120a0 <SD_initialize+0x80>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d107      	bne.n	801208e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801207e:	4b07      	ldr	r3, [pc, #28]	; (801209c <SD_initialize+0x7c>)
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	f043 0301 	orr.w	r3, r3, #1
 8012088:	b2da      	uxtb	r2, r3
 801208a:	4b04      	ldr	r3, [pc, #16]	; (801209c <SD_initialize+0x7c>)
 801208c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801208e:	4b03      	ldr	r3, [pc, #12]	; (801209c <SD_initialize+0x7c>)
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	b2db      	uxtb	r3, r3
}
 8012094:	4618      	mov	r0, r3
 8012096:	3708      	adds	r7, #8
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	240003b1 	.word	0x240003b1
 80120a0:	240009a4 	.word	0x240009a4

080120a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80120ae:	79fb      	ldrb	r3, [r7, #7]
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7ff ff97 	bl	8011fe4 <SD_CheckStatus>
 80120b6:	4603      	mov	r3, r0
}
 80120b8:	4618      	mov	r0, r3
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b088      	sub	sp, #32
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	60b9      	str	r1, [r7, #8]
 80120c8:	607a      	str	r2, [r7, #4]
 80120ca:	603b      	str	r3, [r7, #0]
 80120cc:	4603      	mov	r3, r0
 80120ce:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80120d0:	2301      	movs	r3, #1
 80120d2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80120d4:	f247 5030 	movw	r0, #30000	; 0x7530
 80120d8:	f7ff ff66 	bl	8011fa8 <SD_CheckStatusWithTimeout>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	da01      	bge.n	80120e6 <SD_read+0x26>
  {
    return res;
 80120e2:	7ffb      	ldrb	r3, [r7, #31]
 80120e4:	e02f      	b.n	8012146 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80120e6:	683a      	ldr	r2, [r7, #0]
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	68b8      	ldr	r0, [r7, #8]
 80120ec:	f7ff fee2 	bl	8011eb4 <BSP_SD_ReadBlocks_DMA>
 80120f0:	4603      	mov	r3, r0
 80120f2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80120f4:	7fbb      	ldrb	r3, [r7, #30]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d124      	bne.n	8012144 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80120fa:	4b15      	ldr	r3, [pc, #84]	; (8012150 <SD_read+0x90>)
 80120fc:	6818      	ldr	r0, [r3, #0]
 80120fe:	f107 0112 	add.w	r1, r7, #18
 8012102:	f247 5330 	movw	r3, #30000	; 0x7530
 8012106:	2200      	movs	r2, #0
 8012108:	f003 fa1a 	bl	8015540 <osMessageQueueGet>
 801210c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d117      	bne.n	8012144 <SD_read+0x84>
 8012114:	8a7b      	ldrh	r3, [r7, #18]
 8012116:	2b01      	cmp	r3, #1
 8012118:	d114      	bne.n	8012144 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801211a:	f002 fe4d 	bl	8014db8 <osKernelGetTickCount>
 801211e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8012120:	e007      	b.n	8012132 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012122:	f7ff fefb 	bl	8011f1c <BSP_SD_GetCardState>
 8012126:	4603      	mov	r3, r0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d102      	bne.n	8012132 <SD_read+0x72>
              {
                res = RES_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012130:	e008      	b.n	8012144 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8012132:	f002 fe41 	bl	8014db8 <osKernelGetTickCount>
 8012136:	4602      	mov	r2, r0
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012140:	4293      	cmp	r3, r2
 8012142:	d9ee      	bls.n	8012122 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012144:	7ffb      	ldrb	r3, [r7, #31]
}
 8012146:	4618      	mov	r0, r3
 8012148:	3720      	adds	r7, #32
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	240009a4 	.word	0x240009a4

08012154 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b088      	sub	sp, #32
 8012158:	af00      	add	r7, sp, #0
 801215a:	60b9      	str	r1, [r7, #8]
 801215c:	607a      	str	r2, [r7, #4]
 801215e:	603b      	str	r3, [r7, #0]
 8012160:	4603      	mov	r3, r0
 8012162:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012164:	2301      	movs	r3, #1
 8012166:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012168:	f247 5030 	movw	r0, #30000	; 0x7530
 801216c:	f7ff ff1c 	bl	8011fa8 <SD_CheckStatusWithTimeout>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	da01      	bge.n	801217a <SD_write+0x26>
  {
    return res;
 8012176:	7ffb      	ldrb	r3, [r7, #31]
 8012178:	e02d      	b.n	80121d6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801217a:	683a      	ldr	r2, [r7, #0]
 801217c:	6879      	ldr	r1, [r7, #4]
 801217e:	68b8      	ldr	r0, [r7, #8]
 8012180:	f7ff feb2 	bl	8011ee8 <BSP_SD_WriteBlocks_DMA>
 8012184:	4603      	mov	r3, r0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d124      	bne.n	80121d4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801218a:	4b15      	ldr	r3, [pc, #84]	; (80121e0 <SD_write+0x8c>)
 801218c:	6818      	ldr	r0, [r3, #0]
 801218e:	f107 0112 	add.w	r1, r7, #18
 8012192:	f247 5330 	movw	r3, #30000	; 0x7530
 8012196:	2200      	movs	r2, #0
 8012198:	f003 f9d2 	bl	8015540 <osMessageQueueGet>
 801219c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d117      	bne.n	80121d4 <SD_write+0x80>
 80121a4:	8a7b      	ldrh	r3, [r7, #18]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d114      	bne.n	80121d4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80121aa:	f002 fe05 	bl	8014db8 <osKernelGetTickCount>
 80121ae:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80121b0:	e007      	b.n	80121c2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80121b2:	f7ff feb3 	bl	8011f1c <BSP_SD_GetCardState>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d102      	bne.n	80121c2 <SD_write+0x6e>
          {
            res = RES_OK;
 80121bc:	2300      	movs	r3, #0
 80121be:	77fb      	strb	r3, [r7, #31]
            break;
 80121c0:	e008      	b.n	80121d4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80121c2:	f002 fdf9 	bl	8014db8 <osKernelGetTickCount>
 80121c6:	4602      	mov	r2, r0
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d9ee      	bls.n	80121b2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80121d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3720      	adds	r7, #32
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	240009a4 	.word	0x240009a4

080121e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b08c      	sub	sp, #48	; 0x30
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	4603      	mov	r3, r0
 80121ec:	603a      	str	r2, [r7, #0]
 80121ee:	71fb      	strb	r3, [r7, #7]
 80121f0:	460b      	mov	r3, r1
 80121f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80121f4:	2301      	movs	r3, #1
 80121f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80121fa:	4b25      	ldr	r3, [pc, #148]	; (8012290 <SD_ioctl+0xac>)
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	f003 0301 	and.w	r3, r3, #1
 8012204:	2b00      	cmp	r3, #0
 8012206:	d001      	beq.n	801220c <SD_ioctl+0x28>
 8012208:	2303      	movs	r3, #3
 801220a:	e03c      	b.n	8012286 <SD_ioctl+0xa2>

  switch (cmd)
 801220c:	79bb      	ldrb	r3, [r7, #6]
 801220e:	2b03      	cmp	r3, #3
 8012210:	d834      	bhi.n	801227c <SD_ioctl+0x98>
 8012212:	a201      	add	r2, pc, #4	; (adr r2, 8012218 <SD_ioctl+0x34>)
 8012214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012218:	08012229 	.word	0x08012229
 801221c:	08012231 	.word	0x08012231
 8012220:	08012249 	.word	0x08012249
 8012224:	08012263 	.word	0x08012263
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012228:	2300      	movs	r3, #0
 801222a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801222e:	e028      	b.n	8012282 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012230:	f107 0308 	add.w	r3, r7, #8
 8012234:	4618      	mov	r0, r3
 8012236:	f7ff fe81 	bl	8011f3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801223a:	6a3a      	ldr	r2, [r7, #32]
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012240:	2300      	movs	r3, #0
 8012242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012246:	e01c      	b.n	8012282 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012248:	f107 0308 	add.w	r3, r7, #8
 801224c:	4618      	mov	r0, r3
 801224e:	f7ff fe75 	bl	8011f3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012254:	b29a      	uxth	r2, r3
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012260:	e00f      	b.n	8012282 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012262:	f107 0308 	add.w	r3, r7, #8
 8012266:	4618      	mov	r0, r3
 8012268:	f7ff fe68 	bl	8011f3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226e:	0a5a      	lsrs	r2, r3, #9
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012274:	2300      	movs	r3, #0
 8012276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801227a:	e002      	b.n	8012282 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801227c:	2304      	movs	r3, #4
 801227e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012286:	4618      	mov	r0, r3
 8012288:	3730      	adds	r7, #48	; 0x30
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	240003b1 	.word	0x240003b1

08012294 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801229a:	2100      	movs	r1, #0
 801229c:	2000      	movs	r0, #0
 801229e:	f006 fc7d 	bl	8018b9c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80122a2:	4b23      	ldr	r3, [pc, #140]	; (8012330 <MX_LWIP_Init+0x9c>)
 80122a4:	2200      	movs	r2, #0
 80122a6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80122a8:	4b22      	ldr	r3, [pc, #136]	; (8012334 <MX_LWIP_Init+0xa0>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80122ae:	4b22      	ldr	r3, [pc, #136]	; (8012338 <MX_LWIP_Init+0xa4>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80122b4:	4b21      	ldr	r3, [pc, #132]	; (801233c <MX_LWIP_Init+0xa8>)
 80122b6:	9302      	str	r3, [sp, #8]
 80122b8:	4b21      	ldr	r3, [pc, #132]	; (8012340 <MX_LWIP_Init+0xac>)
 80122ba:	9301      	str	r3, [sp, #4]
 80122bc:	2300      	movs	r3, #0
 80122be:	9300      	str	r3, [sp, #0]
 80122c0:	4b1d      	ldr	r3, [pc, #116]	; (8012338 <MX_LWIP_Init+0xa4>)
 80122c2:	4a1c      	ldr	r2, [pc, #112]	; (8012334 <MX_LWIP_Init+0xa0>)
 80122c4:	491a      	ldr	r1, [pc, #104]	; (8012330 <MX_LWIP_Init+0x9c>)
 80122c6:	481f      	ldr	r0, [pc, #124]	; (8012344 <MX_LWIP_Init+0xb0>)
 80122c8:	f007 faea 	bl	80198a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80122cc:	481d      	ldr	r0, [pc, #116]	; (8012344 <MX_LWIP_Init+0xb0>)
 80122ce:	f007 fca1 	bl	8019c14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80122d2:	4b1c      	ldr	r3, [pc, #112]	; (8012344 <MX_LWIP_Init+0xb0>)
 80122d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80122d8:	089b      	lsrs	r3, r3, #2
 80122da:	f003 0301 	and.w	r3, r3, #1
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d003      	beq.n	80122ec <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80122e4:	4817      	ldr	r0, [pc, #92]	; (8012344 <MX_LWIP_Init+0xb0>)
 80122e6:	f007 fca5 	bl	8019c34 <netif_set_up>
 80122ea:	e002      	b.n	80122f2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80122ec:	4815      	ldr	r0, [pc, #84]	; (8012344 <MX_LWIP_Init+0xb0>)
 80122ee:	f007 fd0d 	bl	8019d0c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80122f2:	4915      	ldr	r1, [pc, #84]	; (8012348 <MX_LWIP_Init+0xb4>)
 80122f4:	4813      	ldr	r0, [pc, #76]	; (8012344 <MX_LWIP_Init+0xb0>)
 80122f6:	f007 fda3 	bl	8019e40 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80122fa:	2224      	movs	r2, #36	; 0x24
 80122fc:	2100      	movs	r1, #0
 80122fe:	4813      	ldr	r0, [pc, #76]	; (801234c <MX_LWIP_Init+0xb8>)
 8012300:	f013 fd32 	bl	8025d68 <memset>
  attributes.name = "EthLink";
 8012304:	4b11      	ldr	r3, [pc, #68]	; (801234c <MX_LWIP_Init+0xb8>)
 8012306:	4a12      	ldr	r2, [pc, #72]	; (8012350 <MX_LWIP_Init+0xbc>)
 8012308:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 801230a:	4b10      	ldr	r3, [pc, #64]	; (801234c <MX_LWIP_Init+0xb8>)
 801230c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012310:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8012312:	4b0e      	ldr	r3, [pc, #56]	; (801234c <MX_LWIP_Init+0xb8>)
 8012314:	2210      	movs	r2, #16
 8012316:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8012318:	4a0c      	ldr	r2, [pc, #48]	; (801234c <MX_LWIP_Init+0xb8>)
 801231a:	490a      	ldr	r1, [pc, #40]	; (8012344 <MX_LWIP_Init+0xb0>)
 801231c:	480d      	ldr	r0, [pc, #52]	; (8012354 <MX_LWIP_Init+0xc0>)
 801231e:	f002 fd60 	bl	8014de2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8012322:	4808      	ldr	r0, [pc, #32]	; (8012344 <MX_LWIP_Init+0xb0>)
 8012324:	f00e fef4 	bl	8021110 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8012328:	bf00      	nop
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	240009e0 	.word	0x240009e0
 8012334:	240009e4 	.word	0x240009e4
 8012338:	240009e8 	.word	0x240009e8
 801233c:	08018ad9 	.word	0x08018ad9
 8012340:	0801278d 	.word	0x0801278d
 8012344:	240009a8 	.word	0x240009a8
 8012348:	08012359 	.word	0x08012359
 801234c:	240009ec 	.word	0x240009ec
 8012350:	08026ec8 	.word	0x08026ec8
 8012354:	08012a2d 	.word	0x08012a2d

08012358 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8012360:	bf00      	nop
 8012362:	370c      	adds	r7, #12
 8012364:	46bd      	mov	sp, r7
 8012366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236a:	4770      	bx	lr

0801236c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b0aa      	sub	sp, #168	; 0xa8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8012374:	2300      	movs	r3, #0
 8012376:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 801237a:	2300      	movs	r3, #0
 801237c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8012380:	2300      	movs	r3, #0
 8012382:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8012386:	f107 0310 	add.w	r3, r7, #16
 801238a:	2264      	movs	r2, #100	; 0x64
 801238c:	2100      	movs	r1, #0
 801238e:	4618      	mov	r0, r3
 8012390:	f013 fcea 	bl	8025d68 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8012394:	4b85      	ldr	r3, [pc, #532]	; (80125ac <low_level_init+0x240>)
 8012396:	4a86      	ldr	r2, [pc, #536]	; (80125b0 <low_level_init+0x244>)
 8012398:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801239a:	2300      	movs	r3, #0
 801239c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801239e:	2380      	movs	r3, #128	; 0x80
 80123a0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80123a2:	23e1      	movs	r3, #225	; 0xe1
 80123a4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80123a6:	2300      	movs	r3, #0
 80123a8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80123aa:	2300      	movs	r3, #0
 80123ac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80123ae:	2300      	movs	r3, #0
 80123b0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80123b2:	4a7e      	ldr	r2, [pc, #504]	; (80125ac <low_level_init+0x240>)
 80123b4:	f107 0308 	add.w	r3, r7, #8
 80123b8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80123ba:	4b7c      	ldr	r3, [pc, #496]	; (80125ac <low_level_init+0x240>)
 80123bc:	2201      	movs	r2, #1
 80123be:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80123c0:	4b7a      	ldr	r3, [pc, #488]	; (80125ac <low_level_init+0x240>)
 80123c2:	4a7c      	ldr	r2, [pc, #496]	; (80125b4 <low_level_init+0x248>)
 80123c4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80123c6:	4b79      	ldr	r3, [pc, #484]	; (80125ac <low_level_init+0x240>)
 80123c8:	4a7b      	ldr	r2, [pc, #492]	; (80125b8 <low_level_init+0x24c>)
 80123ca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80123cc:	4b77      	ldr	r3, [pc, #476]	; (80125ac <low_level_init+0x240>)
 80123ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80123d2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80123d4:	4875      	ldr	r0, [pc, #468]	; (80125ac <low_level_init+0x240>)
 80123d6:	f7f4 f935 	bl	8006644 <HAL_ETH_Init>
 80123da:	4603      	mov	r3, r0
 80123dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80123e0:	2238      	movs	r2, #56	; 0x38
 80123e2:	2100      	movs	r1, #0
 80123e4:	4875      	ldr	r0, [pc, #468]	; (80125bc <low_level_init+0x250>)
 80123e6:	f013 fcbf 	bl	8025d68 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80123ea:	4b74      	ldr	r3, [pc, #464]	; (80125bc <low_level_init+0x250>)
 80123ec:	2221      	movs	r2, #33	; 0x21
 80123ee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80123f0:	4b72      	ldr	r3, [pc, #456]	; (80125bc <low_level_init+0x250>)
 80123f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80123f6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80123f8:	4b70      	ldr	r3, [pc, #448]	; (80125bc <low_level_init+0x250>)
 80123fa:	2200      	movs	r2, #0
 80123fc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80123fe:	4870      	ldr	r0, [pc, #448]	; (80125c0 <low_level_init+0x254>)
 8012400:	f007 f908 	bl	8019614 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2206      	movs	r2, #6
 8012408:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801240c:	4b67      	ldr	r3, [pc, #412]	; (80125ac <low_level_init+0x240>)
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	781a      	ldrb	r2, [r3, #0]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012418:	4b64      	ldr	r3, [pc, #400]	; (80125ac <low_level_init+0x240>)
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	785a      	ldrb	r2, [r3, #1]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8012424:	4b61      	ldr	r3, [pc, #388]	; (80125ac <low_level_init+0x240>)
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	789a      	ldrb	r2, [r3, #2]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8012430:	4b5e      	ldr	r3, [pc, #376]	; (80125ac <low_level_init+0x240>)
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	78da      	ldrb	r2, [r3, #3]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801243c:	4b5b      	ldr	r3, [pc, #364]	; (80125ac <low_level_init+0x240>)
 801243e:	685b      	ldr	r3, [r3, #4]
 8012440:	791a      	ldrb	r2, [r3, #4]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012448:	4b58      	ldr	r3, [pc, #352]	; (80125ac <low_level_init+0x240>)
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	795a      	ldrb	r2, [r3, #5]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801245a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012462:	f043 030a 	orr.w	r3, r3, #10
 8012466:	b2da      	uxtb	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 801246e:	2200      	movs	r2, #0
 8012470:	2101      	movs	r1, #1
 8012472:	2001      	movs	r0, #1
 8012474:	f002 fe70 	bl	8015158 <osSemaphoreNew>
 8012478:	4603      	mov	r3, r0
 801247a:	4a52      	ldr	r2, [pc, #328]	; (80125c4 <low_level_init+0x258>)
 801247c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 801247e:	2200      	movs	r2, #0
 8012480:	2101      	movs	r1, #1
 8012482:	2001      	movs	r0, #1
 8012484:	f002 fe68 	bl	8015158 <osSemaphoreNew>
 8012488:	4603      	mov	r3, r0
 801248a:	4a4f      	ldr	r2, [pc, #316]	; (80125c8 <low_level_init+0x25c>)
 801248c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 801248e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012492:	2224      	movs	r2, #36	; 0x24
 8012494:	2100      	movs	r1, #0
 8012496:	4618      	mov	r0, r3
 8012498:	f013 fc66 	bl	8025d68 <memset>
  attributes.name = "EthIf";
 801249c:	4b4b      	ldr	r3, [pc, #300]	; (80125cc <low_level_init+0x260>)
 801249e:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80124a0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80124a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 80124a8:	2330      	movs	r3, #48	; 0x30
 80124aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80124ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80124b2:	461a      	mov	r2, r3
 80124b4:	6879      	ldr	r1, [r7, #4]
 80124b6:	4846      	ldr	r0, [pc, #280]	; (80125d0 <low_level_init+0x264>)
 80124b8:	f002 fc93 	bl	8014de2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80124bc:	4945      	ldr	r1, [pc, #276]	; (80125d4 <low_level_init+0x268>)
 80124be:	4846      	ldr	r0, [pc, #280]	; (80125d8 <low_level_init+0x26c>)
 80124c0:	f7f3 fd51 	bl	8005f66 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80124c4:	4844      	ldr	r0, [pc, #272]	; (80125d8 <low_level_init+0x26c>)
 80124c6:	f7f3 fd80 	bl	8005fca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80124ca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d165      	bne.n	801259e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80124d2:	4841      	ldr	r0, [pc, #260]	; (80125d8 <low_level_init+0x26c>)
 80124d4:	f7f3 fe21 	bl	800611a <LAN8742_GetLinkState>
 80124d8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80124dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	dc06      	bgt.n	80124f2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f007 fc7b 	bl	8019de0 <netif_set_link_down>
      netif_set_down(netif);
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f007 fc0e 	bl	8019d0c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80124f0:	e057      	b.n	80125a2 <low_level_init+0x236>
      switch (PHYLinkState)
 80124f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80124f6:	3b02      	subs	r3, #2
 80124f8:	2b03      	cmp	r3, #3
 80124fa:	d82b      	bhi.n	8012554 <low_level_init+0x1e8>
 80124fc:	a201      	add	r2, pc, #4	; (adr r2, 8012504 <low_level_init+0x198>)
 80124fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012502:	bf00      	nop
 8012504:	08012515 	.word	0x08012515
 8012508:	08012527 	.word	0x08012527
 801250c:	08012537 	.word	0x08012537
 8012510:	08012547 	.word	0x08012547
        duplex = ETH_FULLDUPLEX_MODE;
 8012514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 801251c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8012524:	e01f      	b.n	8012566 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8012526:	2300      	movs	r3, #0
 8012528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 801252c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012530:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8012534:	e017      	b.n	8012566 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8012536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801253a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 801253e:	2300      	movs	r3, #0
 8012540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8012544:	e00f      	b.n	8012566 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8012546:	2300      	movs	r3, #0
 8012548:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 801254c:	2300      	movs	r3, #0
 801254e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8012552:	e008      	b.n	8012566 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8012554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 801255c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8012564:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012566:	f107 0310 	add.w	r3, r7, #16
 801256a:	4619      	mov	r1, r3
 801256c:	480f      	ldr	r0, [pc, #60]	; (80125ac <low_level_init+0x240>)
 801256e:	f7f4 fcd5 	bl	8006f1c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8012572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012576:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8012578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801257c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 801257e:	f107 0310 	add.w	r3, r7, #16
 8012582:	4619      	mov	r1, r3
 8012584:	4809      	ldr	r0, [pc, #36]	; (80125ac <low_level_init+0x240>)
 8012586:	f7f4 fe9d 	bl	80072c4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 801258a:	4808      	ldr	r0, [pc, #32]	; (80125ac <low_level_init+0x240>)
 801258c:	f7f4 f940 	bl	8006810 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f007 fb4f 	bl	8019c34 <netif_set_up>
    netif_set_link_up(netif);
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f007 fbea 	bl	8019d70 <netif_set_link_up>
}
 801259c:	e001      	b.n	80125a2 <low_level_init+0x236>
    Error_Handler();
 801259e:	f7f3 f9a7 	bl	80058f0 <Error_Handler>
}
 80125a2:	bf00      	nop
 80125a4:	37a8      	adds	r7, #168	; 0xa8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	240053a4 	.word	0x240053a4
 80125b0:	40028000 	.word	0x40028000
 80125b4:	24000590 	.word	0x24000590
 80125b8:	24000530 	.word	0x24000530
 80125bc:	24005454 	.word	0x24005454
 80125c0:	0802a480 	.word	0x0802a480
 80125c4:	2400539c 	.word	0x2400539c
 80125c8:	240053a0 	.word	0x240053a0
 80125cc:	08026ed0 	.word	0x08026ed0
 80125d0:	08012739 	.word	0x08012739
 80125d4:	240003b4 	.word	0x240003b4
 80125d8:	2400548c 	.word	0x2400548c

080125dc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b092      	sub	sp, #72	; 0x48
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80125e6:	2300      	movs	r3, #0
 80125e8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80125ea:	2300      	movs	r3, #0
 80125ec:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80125ee:	2300      	movs	r3, #0
 80125f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80125f4:	f107 030c 	add.w	r3, r7, #12
 80125f8:	2230      	movs	r2, #48	; 0x30
 80125fa:	2100      	movs	r1, #0
 80125fc:	4618      	mov	r0, r3
 80125fe:	f013 fbb3 	bl	8025d68 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8012602:	f107 030c 	add.w	r3, r7, #12
 8012606:	2230      	movs	r2, #48	; 0x30
 8012608:	2100      	movs	r1, #0
 801260a:	4618      	mov	r0, r3
 801260c:	f013 fbac 	bl	8025d68 <memset>

  for(q = p; q != NULL; q = q->next)
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	643b      	str	r3, [r7, #64]	; 0x40
 8012614:	e045      	b.n	80126a2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8012616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012618:	2b03      	cmp	r3, #3
 801261a:	d902      	bls.n	8012622 <low_level_output+0x46>
      return ERR_IF;
 801261c:	f06f 030b 	mvn.w	r3, #11
 8012620:	e065      	b.n	80126ee <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8012622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012624:	6859      	ldr	r1, [r3, #4]
 8012626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012628:	4613      	mov	r3, r2
 801262a:	005b      	lsls	r3, r3, #1
 801262c:	4413      	add	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	3348      	adds	r3, #72	; 0x48
 8012632:	443b      	add	r3, r7
 8012634:	3b3c      	subs	r3, #60	; 0x3c
 8012636:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8012638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801263a:	895b      	ldrh	r3, [r3, #10]
 801263c:	4619      	mov	r1, r3
 801263e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012640:	4613      	mov	r3, r2
 8012642:	005b      	lsls	r3, r3, #1
 8012644:	4413      	add	r3, r2
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	3348      	adds	r3, #72	; 0x48
 801264a:	443b      	add	r3, r7
 801264c:	3b38      	subs	r3, #56	; 0x38
 801264e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8012650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012652:	2b00      	cmp	r3, #0
 8012654:	d011      	beq.n	801267a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8012656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012658:	1e5a      	subs	r2, r3, #1
 801265a:	f107 000c 	add.w	r0, r7, #12
 801265e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012660:	460b      	mov	r3, r1
 8012662:	005b      	lsls	r3, r3, #1
 8012664:	440b      	add	r3, r1
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	18c1      	adds	r1, r0, r3
 801266a:	4613      	mov	r3, r2
 801266c:	005b      	lsls	r3, r3, #1
 801266e:	4413      	add	r3, r2
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	3348      	adds	r3, #72	; 0x48
 8012674:	443b      	add	r3, r7
 8012676:	3b34      	subs	r3, #52	; 0x34
 8012678:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801267a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d109      	bne.n	8012696 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8012682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012684:	4613      	mov	r3, r2
 8012686:	005b      	lsls	r3, r3, #1
 8012688:	4413      	add	r3, r2
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	3348      	adds	r3, #72	; 0x48
 801268e:	443b      	add	r3, r7
 8012690:	3b34      	subs	r3, #52	; 0x34
 8012692:	2200      	movs	r2, #0
 8012694:	601a      	str	r2, [r3, #0]
    }

    i++;
 8012696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012698:	3301      	adds	r3, #1
 801269a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801269c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	643b      	str	r3, [r7, #64]	; 0x40
 80126a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d1b6      	bne.n	8012616 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	891b      	ldrh	r3, [r3, #8]
 80126ac:	461a      	mov	r2, r3
 80126ae:	4b12      	ldr	r3, [pc, #72]	; (80126f8 <low_level_output+0x11c>)
 80126b0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80126b2:	4a11      	ldr	r2, [pc, #68]	; (80126f8 <low_level_output+0x11c>)
 80126b4:	f107 030c 	add.w	r3, r7, #12
 80126b8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80126ba:	4a0f      	ldr	r2, [pc, #60]	; (80126f8 <low_level_output+0x11c>)
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80126c0:	6838      	ldr	r0, [r7, #0]
 80126c2:	f008 f811 	bl	801a6e8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80126c6:	490c      	ldr	r1, [pc, #48]	; (80126f8 <low_level_output+0x11c>)
 80126c8:	480c      	ldr	r0, [pc, #48]	; (80126fc <low_level_output+0x120>)
 80126ca:	f7f4 f9a5 	bl	8006a18 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80126ce:	bf00      	nop
 80126d0:	4b0b      	ldr	r3, [pc, #44]	; (8012700 <low_level_output+0x124>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f04f 31ff 	mov.w	r1, #4294967295
 80126d8:	4618      	mov	r0, r3
 80126da:	f002 fdc7 	bl	801526c <osSemaphoreAcquire>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d1f5      	bne.n	80126d0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80126e4:	4805      	ldr	r0, [pc, #20]	; (80126fc <low_level_output+0x120>)
 80126e6:	f7f4 fb16 	bl	8006d16 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80126ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3748      	adds	r7, #72	; 0x48
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	24005454 	.word	0x24005454
 80126fc:	240053a4 	.word	0x240053a4
 8012700:	240053a0 	.word	0x240053a0

08012704 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801270c:	2300      	movs	r3, #0
 801270e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8012710:	4b07      	ldr	r3, [pc, #28]	; (8012730 <low_level_input+0x2c>)
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d105      	bne.n	8012724 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8012718:	f107 030c 	add.w	r3, r7, #12
 801271c:	4619      	mov	r1, r3
 801271e:	4805      	ldr	r0, [pc, #20]	; (8012734 <low_level_input+0x30>)
 8012720:	f7f4 f9cb 	bl	8006aba <HAL_ETH_ReadData>
  }

  return p;
 8012724:	68fb      	ldr	r3, [r7, #12]
}
 8012726:	4618      	mov	r0, r3
 8012728:	3710      	adds	r7, #16
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	24005398 	.word	0x24005398
 8012734:	240053a4 	.word	0x240053a4

08012738 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8012740:	2300      	movs	r3, #0
 8012742:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8012748:	4b0f      	ldr	r3, [pc, #60]	; (8012788 <ethernetif_input+0x50>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f04f 31ff 	mov.w	r1, #4294967295
 8012750:	4618      	mov	r0, r3
 8012752:	f002 fd8b 	bl	801526c <osSemaphoreAcquire>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d1f5      	bne.n	8012748 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 801275c:	68b8      	ldr	r0, [r7, #8]
 801275e:	f7ff ffd1 	bl	8012704 <low_level_input>
 8012762:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d00a      	beq.n	8012780 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	691b      	ldr	r3, [r3, #16]
 801276e:	68b9      	ldr	r1, [r7, #8]
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	4798      	blx	r3
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	d002      	beq.n	8012780 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 801277a:	68f8      	ldr	r0, [r7, #12]
 801277c:	f007 ff0e 	bl	801a59c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1ea      	bne.n	801275c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8012786:	e7df      	b.n	8012748 <ethernetif_input+0x10>
 8012788:	2400539c 	.word	0x2400539c

0801278c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d106      	bne.n	80127a8 <ethernetif_init+0x1c>
 801279a:	4b0e      	ldr	r3, [pc, #56]	; (80127d4 <ethernetif_init+0x48>)
 801279c:	f240 12f5 	movw	r2, #501	; 0x1f5
 80127a0:	490d      	ldr	r1, [pc, #52]	; (80127d8 <ethernetif_init+0x4c>)
 80127a2:	480e      	ldr	r0, [pc, #56]	; (80127dc <ethernetif_init+0x50>)
 80127a4:	f013 fbde 	bl	8025f64 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2273      	movs	r2, #115	; 0x73
 80127ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2274      	movs	r2, #116	; 0x74
 80127b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4a09      	ldr	r2, [pc, #36]	; (80127e0 <ethernetif_init+0x54>)
 80127bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4a08      	ldr	r2, [pc, #32]	; (80127e4 <ethernetif_init+0x58>)
 80127c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7ff fdd1 	bl	801236c <low_level_init>

  return ERR_OK;
 80127ca:	2300      	movs	r3, #0
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	08026ed8 	.word	0x08026ed8
 80127d8:	08026ef4 	.word	0x08026ef4
 80127dc:	08026f04 	.word	0x08026f04
 80127e0:	08022fdd 	.word	0x08022fdd
 80127e4:	080125dd 	.word	0x080125dd

080127e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80127f4:	68f9      	ldr	r1, [r7, #12]
 80127f6:	4809      	ldr	r0, [pc, #36]	; (801281c <pbuf_free_custom+0x34>)
 80127f8:	f006 fffc 	bl	80197f4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80127fc:	4b08      	ldr	r3, [pc, #32]	; (8012820 <pbuf_free_custom+0x38>)
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d107      	bne.n	8012814 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8012804:	4b06      	ldr	r3, [pc, #24]	; (8012820 <pbuf_free_custom+0x38>)
 8012806:	2200      	movs	r2, #0
 8012808:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 801280a:	4b06      	ldr	r3, [pc, #24]	; (8012824 <pbuf_free_custom+0x3c>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4618      	mov	r0, r3
 8012810:	f002 fd7e 	bl	8015310 <osSemaphoreRelease>
  }
}
 8012814:	bf00      	nop
 8012816:	3710      	adds	r7, #16
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	0802a480 	.word	0x0802a480
 8012820:	24005398 	.word	0x24005398
 8012824:	2400539c 	.word	0x2400539c

08012828 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801282c:	f7f3 fd4c 	bl	80062c8 <HAL_GetTick>
 8012830:	4603      	mov	r3, r0
}
 8012832:	4618      	mov	r0, r3
 8012834:	bd80      	pop	{r7, pc}
	...

08012838 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b08e      	sub	sp, #56	; 0x38
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]
 8012848:	605a      	str	r2, [r3, #4]
 801284a:	609a      	str	r2, [r3, #8]
 801284c:	60da      	str	r2, [r3, #12]
 801284e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4a49      	ldr	r2, [pc, #292]	; (801297c <HAL_ETH_MspInit+0x144>)
 8012856:	4293      	cmp	r3, r2
 8012858:	f040 808b 	bne.w	8012972 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 801285c:	4b48      	ldr	r3, [pc, #288]	; (8012980 <HAL_ETH_MspInit+0x148>)
 801285e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012862:	4a47      	ldr	r2, [pc, #284]	; (8012980 <HAL_ETH_MspInit+0x148>)
 8012864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012868:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801286c:	4b44      	ldr	r3, [pc, #272]	; (8012980 <HAL_ETH_MspInit+0x148>)
 801286e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012876:	623b      	str	r3, [r7, #32]
 8012878:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 801287a:	4b41      	ldr	r3, [pc, #260]	; (8012980 <HAL_ETH_MspInit+0x148>)
 801287c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012880:	4a3f      	ldr	r2, [pc, #252]	; (8012980 <HAL_ETH_MspInit+0x148>)
 8012882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012886:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801288a:	4b3d      	ldr	r3, [pc, #244]	; (8012980 <HAL_ETH_MspInit+0x148>)
 801288c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012894:	61fb      	str	r3, [r7, #28]
 8012896:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8012898:	4b39      	ldr	r3, [pc, #228]	; (8012980 <HAL_ETH_MspInit+0x148>)
 801289a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801289e:	4a38      	ldr	r2, [pc, #224]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80128a8:	4b35      	ldr	r3, [pc, #212]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80128ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128b2:	61bb      	str	r3, [r7, #24]
 80128b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80128b6:	4b32      	ldr	r3, [pc, #200]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128bc:	4a30      	ldr	r2, [pc, #192]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128be:	f043 0304 	orr.w	r3, r3, #4
 80128c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80128c6:	4b2e      	ldr	r3, [pc, #184]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128cc:	f003 0304 	and.w	r3, r3, #4
 80128d0:	617b      	str	r3, [r7, #20]
 80128d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128d4:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128da:	4a29      	ldr	r2, [pc, #164]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128dc:	f043 0301 	orr.w	r3, r3, #1
 80128e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80128e4:	4b26      	ldr	r3, [pc, #152]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128ea:	f003 0301 	and.w	r3, r3, #1
 80128ee:	613b      	str	r3, [r7, #16]
 80128f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80128f2:	4b23      	ldr	r3, [pc, #140]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128f8:	4a21      	ldr	r2, [pc, #132]	; (8012980 <HAL_ETH_MspInit+0x148>)
 80128fa:	f043 0302 	orr.w	r3, r3, #2
 80128fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012902:	4b1f      	ldr	r3, [pc, #124]	; (8012980 <HAL_ETH_MspInit+0x148>)
 8012904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012908:	f003 0302 	and.w	r3, r3, #2
 801290c:	60fb      	str	r3, [r7, #12]
 801290e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8012910:	2332      	movs	r3, #50	; 0x32
 8012912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012914:	2302      	movs	r3, #2
 8012916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012918:	2300      	movs	r3, #0
 801291a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801291c:	2300      	movs	r3, #0
 801291e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012920:	230b      	movs	r3, #11
 8012922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012928:	4619      	mov	r1, r3
 801292a:	4816      	ldr	r0, [pc, #88]	; (8012984 <HAL_ETH_MspInit+0x14c>)
 801292c:	f7f6 fcaa 	bl	8009284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8012930:	2386      	movs	r3, #134	; 0x86
 8012932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012934:	2302      	movs	r3, #2
 8012936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012938:	2300      	movs	r3, #0
 801293a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801293c:	2300      	movs	r3, #0
 801293e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012940:	230b      	movs	r3, #11
 8012942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012948:	4619      	mov	r1, r3
 801294a:	480f      	ldr	r0, [pc, #60]	; (8012988 <HAL_ETH_MspInit+0x150>)
 801294c:	f7f6 fc9a 	bl	8009284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8012950:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8012954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012956:	2302      	movs	r3, #2
 8012958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801295a:	2300      	movs	r3, #0
 801295c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801295e:	2300      	movs	r3, #0
 8012960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012962:	230b      	movs	r3, #11
 8012964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801296a:	4619      	mov	r1, r3
 801296c:	4807      	ldr	r0, [pc, #28]	; (801298c <HAL_ETH_MspInit+0x154>)
 801296e:	f7f6 fc89 	bl	8009284 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8012972:	bf00      	nop
 8012974:	3738      	adds	r7, #56	; 0x38
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	40028000 	.word	0x40028000
 8012980:	58024400 	.word	0x58024400
 8012984:	58020800 	.word	0x58020800
 8012988:	58020000 	.word	0x58020000
 801298c:	58020400 	.word	0x58020400

08012990 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8012994:	4802      	ldr	r0, [pc, #8]	; (80129a0 <ETH_PHY_IO_Init+0x10>)
 8012996:	f7f4 fcaf 	bl	80072f8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801299a:	2300      	movs	r3, #0
}
 801299c:	4618      	mov	r0, r3
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	240053a4 	.word	0x240053a4

080129a4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80129a4:	b480      	push	{r7}
 80129a6:	af00      	add	r7, sp, #0
  return 0;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	68ba      	ldr	r2, [r7, #8]
 80129c4:	68f9      	ldr	r1, [r7, #12]
 80129c6:	4807      	ldr	r0, [pc, #28]	; (80129e4 <ETH_PHY_IO_ReadReg+0x30>)
 80129c8:	f7f4 fa00 	bl	8006dcc <HAL_ETH_ReadPHYRegister>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d002      	beq.n	80129d8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80129d2:	f04f 33ff 	mov.w	r3, #4294967295
 80129d6:	e000      	b.n	80129da <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80129d8:	2300      	movs	r3, #0
}
 80129da:	4618      	mov	r0, r3
 80129dc:	3710      	adds	r7, #16
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	240053a4 	.word	0x240053a4

080129e8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b084      	sub	sp, #16
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	68ba      	ldr	r2, [r7, #8]
 80129f8:	68f9      	ldr	r1, [r7, #12]
 80129fa:	4807      	ldr	r0, [pc, #28]	; (8012a18 <ETH_PHY_IO_WriteReg+0x30>)
 80129fc:	f7f4 fa3a 	bl	8006e74 <HAL_ETH_WritePHYRegister>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d002      	beq.n	8012a0c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8012a06:	f04f 33ff 	mov.w	r3, #4294967295
 8012a0a:	e000      	b.n	8012a0e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8012a0c:	2300      	movs	r3, #0
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3710      	adds	r7, #16
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	240053a4 	.word	0x240053a4

08012a1c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012a20:	f7f3 fc52 	bl	80062c8 <HAL_GetTick>
 8012a24:	4603      	mov	r3, r0
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	bd80      	pop	{r7, pc}
	...

08012a2c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b0a0      	sub	sp, #128	; 0x80
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8012a34:	f107 0308 	add.w	r3, r7, #8
 8012a38:	2264      	movs	r2, #100	; 0x64
 8012a3a:	2100      	movs	r1, #0
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f013 f993 	bl	8025d68 <memset>
  int32_t PHYLinkState = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8012a46:	2300      	movs	r3, #0
 8012a48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8012a4e:	2300      	movs	r3, #0
 8012a50:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8012a56:	483a      	ldr	r0, [pc, #232]	; (8012b40 <ethernet_link_thread+0x114>)
 8012a58:	f7f3 fb5f 	bl	800611a <LAN8742_GetLinkState>
 8012a5c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8012a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a64:	089b      	lsrs	r3, r3, #2
 8012a66:	f003 0301 	and.w	r3, r3, #1
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d00c      	beq.n	8012a8a <ethernet_link_thread+0x5e>
 8012a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	dc09      	bgt.n	8012a8a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8012a76:	4833      	ldr	r0, [pc, #204]	; (8012b44 <ethernet_link_thread+0x118>)
 8012a78:	f7f3 ff56 	bl	8006928 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8012a7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012a7e:	f007 f945 	bl	8019d0c <netif_set_down>
    netif_set_link_down(netif);
 8012a82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012a84:	f007 f9ac 	bl	8019de0 <netif_set_link_down>
 8012a88:	e055      	b.n	8012b36 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8012a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a90:	f003 0304 	and.w	r3, r3, #4
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d14e      	bne.n	8012b36 <ethernet_link_thread+0x10a>
 8012a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	dd4b      	ble.n	8012b36 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8012a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012aa0:	3b02      	subs	r3, #2
 8012aa2:	2b03      	cmp	r3, #3
 8012aa4:	d82a      	bhi.n	8012afc <ethernet_link_thread+0xd0>
 8012aa6:	a201      	add	r2, pc, #4	; (adr r2, 8012aac <ethernet_link_thread+0x80>)
 8012aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aac:	08012abd 	.word	0x08012abd
 8012ab0:	08012acf 	.word	0x08012acf
 8012ab4:	08012adf 	.word	0x08012adf
 8012ab8:	08012aef 	.word	0x08012aef
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8012abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ac0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8012ac2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012ac6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012acc:	e017      	b.n	8012afe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8012ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012ad6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012adc:	e00f      	b.n	8012afe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8012ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ae2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012aec:	e007      	b.n	8012afe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8012aee:	2300      	movs	r3, #0
 8012af0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8012af2:	2300      	movs	r3, #0
 8012af4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8012af6:	2301      	movs	r3, #1
 8012af8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8012afa:	e000      	b.n	8012afe <ethernet_link_thread+0xd2>
    default:
      break;
 8012afc:	bf00      	nop
    }

    if(linkchanged)
 8012afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d018      	beq.n	8012b36 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012b04:	f107 0308 	add.w	r3, r7, #8
 8012b08:	4619      	mov	r1, r3
 8012b0a:	480e      	ldr	r0, [pc, #56]	; (8012b44 <ethernet_link_thread+0x118>)
 8012b0c:	f7f4 fa06 	bl	8006f1c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8012b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b12:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8012b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b16:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8012b18:	f107 0308 	add.w	r3, r7, #8
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	4809      	ldr	r0, [pc, #36]	; (8012b44 <ethernet_link_thread+0x118>)
 8012b20:	f7f4 fbd0 	bl	80072c4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8012b24:	4807      	ldr	r0, [pc, #28]	; (8012b44 <ethernet_link_thread+0x118>)
 8012b26:	f7f3 fe73 	bl	8006810 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8012b2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012b2c:	f007 f882 	bl	8019c34 <netif_set_up>
      netif_set_link_up(netif);
 8012b30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012b32:	f007 f91d 	bl	8019d70 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8012b36:	2064      	movs	r0, #100	; 0x64
 8012b38:	f002 f9e5 	bl	8014f06 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8012b3c:	e78b      	b.n	8012a56 <ethernet_link_thread+0x2a>
 8012b3e:	bf00      	nop
 8012b40:	2400548c 	.word	0x2400548c
 8012b44:	240053a4 	.word	0x240053a4

08012b48 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b086      	sub	sp, #24
 8012b4c:	af02      	add	r7, sp, #8
 8012b4e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8012b50:	4812      	ldr	r0, [pc, #72]	; (8012b9c <HAL_ETH_RxAllocateCallback+0x54>)
 8012b52:	f006 fddb 	bl	801970c <memp_malloc_pool>
 8012b56:	60f8      	str	r0, [r7, #12]
  if (p)
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d014      	beq.n	8012b88 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	f103 0220 	add.w	r2, r3, #32
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	4a0d      	ldr	r2, [pc, #52]	; (8012ba0 <HAL_ETH_RxAllocateCallback+0x58>)
 8012b6c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8012b76:	9201      	str	r2, [sp, #4]
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2241      	movs	r2, #65	; 0x41
 8012b7e:	2100      	movs	r1, #0
 8012b80:	2000      	movs	r0, #0
 8012b82:	f007 fb51 	bl	801a228 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8012b86:	e005      	b.n	8012b94 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8012b88:	4b06      	ldr	r3, [pc, #24]	; (8012ba4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8012b8a:	2201      	movs	r2, #1
 8012b8c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	601a      	str	r2, [r3, #0]
}
 8012b94:	bf00      	nop
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	0802a480 	.word	0x0802a480
 8012ba0:	080127e9 	.word	0x080127e9
 8012ba4:	24005398 	.word	0x24005398

08012ba8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b08d      	sub	sp, #52	; 0x34
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	60b9      	str	r1, [r7, #8]
 8012bb2:	607a      	str	r2, [r7, #4]
 8012bb4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	3b20      	subs	r3, #32
 8012bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8012bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bca:	2200      	movs	r2, #0
 8012bcc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8012bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8012bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd6:	887a      	ldrh	r2, [r7, #2]
 8012bd8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8012bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d103      	bne.n	8012bea <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012be6:	601a      	str	r2, [r3, #0]
 8012be8:	e003      	b.n	8012bf2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bf0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bf6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8012bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bfe:	e009      	b.n	8012c14 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8012c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c02:	891a      	ldrh	r2, [r3, #8]
 8012c04:	887b      	ldrh	r3, [r7, #2]
 8012c06:	4413      	add	r3, r2
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8012c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d1f2      	bne.n	8012c00 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8012c1a:	887b      	ldrh	r3, [r7, #2]
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	623a      	str	r2, [r7, #32]
 8012c20:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	dd1d      	ble.n	8012c64 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	f003 021f 	and.w	r2, r3, #31
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	4413      	add	r3, r2
 8012c32:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012c34:	6a3b      	ldr	r3, [r7, #32]
 8012c36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012c38:	f3bf 8f4f 	dsb	sy
}
 8012c3c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012c3e:	4a0d      	ldr	r2, [pc, #52]	; (8012c74 <HAL_ETH_RxLinkCallback+0xcc>)
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	3320      	adds	r3, #32
 8012c4a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	3b20      	subs	r3, #32
 8012c50:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	dcf2      	bgt.n	8012c3e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8012c58:	f3bf 8f4f 	dsb	sy
}
 8012c5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012c5e:	f3bf 8f6f 	isb	sy
}
 8012c62:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8012c64:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8012c66:	bf00      	nop
 8012c68:	3734      	adds	r7, #52	; 0x34
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	e000ed00 	.word	0xe000ed00

08012c78 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f007 fc8b 	bl	801a59c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8012c86:	bf00      	nop
 8012c88:	3708      	adds	r7, #8
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
	...

08012c90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b084      	sub	sp, #16
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
 8012c98:	460b      	mov	r3, r1
 8012c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012c9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012ca0:	f012 fdf6 	bl	8025890 <USBD_static_malloc>
 8012ca4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d109      	bne.n	8012cc0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	32b0      	adds	r2, #176	; 0xb0
 8012cb6:	2100      	movs	r1, #0
 8012cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	e0d4      	b.n	8012e6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012cc0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8012cc4:	2100      	movs	r1, #0
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f013 f84e 	bl	8025d68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	32b0      	adds	r2, #176	; 0xb0
 8012cd6:	68f9      	ldr	r1, [r7, #12]
 8012cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	32b0      	adds	r2, #176	; 0xb0
 8012ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	7c1b      	ldrb	r3, [r3, #16]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d138      	bne.n	8012d6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012cf8:	4b5e      	ldr	r3, [pc, #376]	; (8012e74 <USBD_CDC_Init+0x1e4>)
 8012cfa:	7819      	ldrb	r1, [r3, #0]
 8012cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d00:	2202      	movs	r2, #2
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f012 fca1 	bl	802564a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012d08:	4b5a      	ldr	r3, [pc, #360]	; (8012e74 <USBD_CDC_Init+0x1e4>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	f003 020f 	and.w	r2, r3, #15
 8012d10:	6879      	ldr	r1, [r7, #4]
 8012d12:	4613      	mov	r3, r2
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	4413      	add	r3, r2
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	440b      	add	r3, r1
 8012d1c:	3324      	adds	r3, #36	; 0x24
 8012d1e:	2201      	movs	r2, #1
 8012d20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012d22:	4b55      	ldr	r3, [pc, #340]	; (8012e78 <USBD_CDC_Init+0x1e8>)
 8012d24:	7819      	ldrb	r1, [r3, #0]
 8012d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d2a:	2202      	movs	r2, #2
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f012 fc8c 	bl	802564a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012d32:	4b51      	ldr	r3, [pc, #324]	; (8012e78 <USBD_CDC_Init+0x1e8>)
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	f003 020f 	and.w	r2, r3, #15
 8012d3a:	6879      	ldr	r1, [r7, #4]
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	4413      	add	r3, r2
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	440b      	add	r3, r1
 8012d46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012d4e:	4b4b      	ldr	r3, [pc, #300]	; (8012e7c <USBD_CDC_Init+0x1ec>)
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	f003 020f 	and.w	r2, r3, #15
 8012d56:	6879      	ldr	r1, [r7, #4]
 8012d58:	4613      	mov	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	4413      	add	r3, r2
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	440b      	add	r3, r1
 8012d62:	3326      	adds	r3, #38	; 0x26
 8012d64:	2210      	movs	r2, #16
 8012d66:	801a      	strh	r2, [r3, #0]
 8012d68:	e035      	b.n	8012dd6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012d6a:	4b42      	ldr	r3, [pc, #264]	; (8012e74 <USBD_CDC_Init+0x1e4>)
 8012d6c:	7819      	ldrb	r1, [r3, #0]
 8012d6e:	2340      	movs	r3, #64	; 0x40
 8012d70:	2202      	movs	r2, #2
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f012 fc69 	bl	802564a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012d78:	4b3e      	ldr	r3, [pc, #248]	; (8012e74 <USBD_CDC_Init+0x1e4>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	f003 020f 	and.w	r2, r3, #15
 8012d80:	6879      	ldr	r1, [r7, #4]
 8012d82:	4613      	mov	r3, r2
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	4413      	add	r3, r2
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	440b      	add	r3, r1
 8012d8c:	3324      	adds	r3, #36	; 0x24
 8012d8e:	2201      	movs	r2, #1
 8012d90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012d92:	4b39      	ldr	r3, [pc, #228]	; (8012e78 <USBD_CDC_Init+0x1e8>)
 8012d94:	7819      	ldrb	r1, [r3, #0]
 8012d96:	2340      	movs	r3, #64	; 0x40
 8012d98:	2202      	movs	r2, #2
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f012 fc55 	bl	802564a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012da0:	4b35      	ldr	r3, [pc, #212]	; (8012e78 <USBD_CDC_Init+0x1e8>)
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	f003 020f 	and.w	r2, r3, #15
 8012da8:	6879      	ldr	r1, [r7, #4]
 8012daa:	4613      	mov	r3, r2
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	4413      	add	r3, r2
 8012db0:	009b      	lsls	r3, r3, #2
 8012db2:	440b      	add	r3, r1
 8012db4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012db8:	2201      	movs	r2, #1
 8012dba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012dbc:	4b2f      	ldr	r3, [pc, #188]	; (8012e7c <USBD_CDC_Init+0x1ec>)
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	f003 020f 	and.w	r2, r3, #15
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	4613      	mov	r3, r2
 8012dc8:	009b      	lsls	r3, r3, #2
 8012dca:	4413      	add	r3, r2
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	440b      	add	r3, r1
 8012dd0:	3326      	adds	r3, #38	; 0x26
 8012dd2:	2210      	movs	r2, #16
 8012dd4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012dd6:	4b29      	ldr	r3, [pc, #164]	; (8012e7c <USBD_CDC_Init+0x1ec>)
 8012dd8:	7819      	ldrb	r1, [r3, #0]
 8012dda:	2308      	movs	r3, #8
 8012ddc:	2203      	movs	r2, #3
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f012 fc33 	bl	802564a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012de4:	4b25      	ldr	r3, [pc, #148]	; (8012e7c <USBD_CDC_Init+0x1ec>)
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	f003 020f 	and.w	r2, r3, #15
 8012dec:	6879      	ldr	r1, [r7, #4]
 8012dee:	4613      	mov	r3, r2
 8012df0:	009b      	lsls	r3, r3, #2
 8012df2:	4413      	add	r3, r2
 8012df4:	009b      	lsls	r3, r3, #2
 8012df6:	440b      	add	r3, r1
 8012df8:	3324      	adds	r3, #36	; 0x24
 8012dfa:	2201      	movs	r2, #1
 8012dfc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	2200      	movs	r2, #0
 8012e02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e0c:	687a      	ldr	r2, [r7, #4]
 8012e0e:	33b0      	adds	r3, #176	; 0xb0
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	4413      	add	r3, r2
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2200      	movs	r2, #0
 8012e26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d101      	bne.n	8012e38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012e34:	2302      	movs	r3, #2
 8012e36:	e018      	b.n	8012e6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	7c1b      	ldrb	r3, [r3, #16]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d10a      	bne.n	8012e56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012e40:	4b0d      	ldr	r3, [pc, #52]	; (8012e78 <USBD_CDC_Init+0x1e8>)
 8012e42:	7819      	ldrb	r1, [r3, #0]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f012 fcea 	bl	8025828 <USBD_LL_PrepareReceive>
 8012e54:	e008      	b.n	8012e68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012e56:	4b08      	ldr	r3, [pc, #32]	; (8012e78 <USBD_CDC_Init+0x1e8>)
 8012e58:	7819      	ldrb	r1, [r3, #0]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012e60:	2340      	movs	r3, #64	; 0x40
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f012 fce0 	bl	8025828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3710      	adds	r7, #16
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	2400044f 	.word	0x2400044f
 8012e78:	24000450 	.word	0x24000450
 8012e7c:	24000451 	.word	0x24000451

08012e80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	460b      	mov	r3, r1
 8012e8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012e8c:	4b3a      	ldr	r3, [pc, #232]	; (8012f78 <USBD_CDC_DeInit+0xf8>)
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	4619      	mov	r1, r3
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f012 fbff 	bl	8025696 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012e98:	4b37      	ldr	r3, [pc, #220]	; (8012f78 <USBD_CDC_DeInit+0xf8>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f003 020f 	and.w	r2, r3, #15
 8012ea0:	6879      	ldr	r1, [r7, #4]
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	009b      	lsls	r3, r3, #2
 8012ea6:	4413      	add	r3, r2
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	440b      	add	r3, r1
 8012eac:	3324      	adds	r3, #36	; 0x24
 8012eae:	2200      	movs	r2, #0
 8012eb0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012eb2:	4b32      	ldr	r3, [pc, #200]	; (8012f7c <USBD_CDC_DeInit+0xfc>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f012 fbec 	bl	8025696 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012ebe:	4b2f      	ldr	r3, [pc, #188]	; (8012f7c <USBD_CDC_DeInit+0xfc>)
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	f003 020f 	and.w	r2, r3, #15
 8012ec6:	6879      	ldr	r1, [r7, #4]
 8012ec8:	4613      	mov	r3, r2
 8012eca:	009b      	lsls	r3, r3, #2
 8012ecc:	4413      	add	r3, r2
 8012ece:	009b      	lsls	r3, r3, #2
 8012ed0:	440b      	add	r3, r1
 8012ed2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012eda:	4b29      	ldr	r3, [pc, #164]	; (8012f80 <USBD_CDC_DeInit+0x100>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	4619      	mov	r1, r3
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f012 fbd8 	bl	8025696 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012ee6:	4b26      	ldr	r3, [pc, #152]	; (8012f80 <USBD_CDC_DeInit+0x100>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	f003 020f 	and.w	r2, r3, #15
 8012eee:	6879      	ldr	r1, [r7, #4]
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	4413      	add	r3, r2
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	440b      	add	r3, r1
 8012efa:	3324      	adds	r3, #36	; 0x24
 8012efc:	2200      	movs	r2, #0
 8012efe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012f00:	4b1f      	ldr	r3, [pc, #124]	; (8012f80 <USBD_CDC_DeInit+0x100>)
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	f003 020f 	and.w	r2, r3, #15
 8012f08:	6879      	ldr	r1, [r7, #4]
 8012f0a:	4613      	mov	r3, r2
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	4413      	add	r3, r2
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	440b      	add	r3, r1
 8012f14:	3326      	adds	r3, #38	; 0x26
 8012f16:	2200      	movs	r2, #0
 8012f18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	32b0      	adds	r2, #176	; 0xb0
 8012f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d01f      	beq.n	8012f6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	33b0      	adds	r3, #176	; 0xb0
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	4413      	add	r3, r2
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	32b0      	adds	r2, #176	; 0xb0
 8012f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f012 fcac 	bl	80258ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	32b0      	adds	r2, #176	; 0xb0
 8012f5e:	2100      	movs	r1, #0
 8012f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2200      	movs	r2, #0
 8012f68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012f6c:	2300      	movs	r3, #0
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	2400044f 	.word	0x2400044f
 8012f7c:	24000450 	.word	0x24000450
 8012f80:	24000451 	.word	0x24000451

08012f84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b086      	sub	sp, #24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	32b0      	adds	r2, #176	; 0xb0
 8012f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d101      	bne.n	8012fb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012fb0:	2303      	movs	r3, #3
 8012fb2:	e0bf      	b.n	8013134 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d050      	beq.n	8013062 <USBD_CDC_Setup+0xde>
 8012fc0:	2b20      	cmp	r3, #32
 8012fc2:	f040 80af 	bne.w	8013124 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	88db      	ldrh	r3, [r3, #6]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d03a      	beq.n	8013044 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	b25b      	sxtb	r3, r3
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	da1b      	bge.n	8013010 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	33b0      	adds	r3, #176	; 0xb0
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	4413      	add	r3, r2
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	689b      	ldr	r3, [r3, #8]
 8012fea:	683a      	ldr	r2, [r7, #0]
 8012fec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012fee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ff0:	683a      	ldr	r2, [r7, #0]
 8012ff2:	88d2      	ldrh	r2, [r2, #6]
 8012ff4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	88db      	ldrh	r3, [r3, #6]
 8012ffa:	2b07      	cmp	r3, #7
 8012ffc:	bf28      	it	cs
 8012ffe:	2307      	movcs	r3, #7
 8013000:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	89fa      	ldrh	r2, [r7, #14]
 8013006:	4619      	mov	r1, r3
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f001 fd49 	bl	8014aa0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801300e:	e090      	b.n	8013132 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	785a      	ldrb	r2, [r3, #1]
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	88db      	ldrh	r3, [r3, #6]
 801301e:	2b3f      	cmp	r3, #63	; 0x3f
 8013020:	d803      	bhi.n	801302a <USBD_CDC_Setup+0xa6>
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	88db      	ldrh	r3, [r3, #6]
 8013026:	b2da      	uxtb	r2, r3
 8013028:	e000      	b.n	801302c <USBD_CDC_Setup+0xa8>
 801302a:	2240      	movs	r2, #64	; 0x40
 801302c:	693b      	ldr	r3, [r7, #16]
 801302e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013032:	6939      	ldr	r1, [r7, #16]
 8013034:	693b      	ldr	r3, [r7, #16]
 8013036:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801303a:	461a      	mov	r2, r3
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f001 fd5b 	bl	8014af8 <USBD_CtlPrepareRx>
      break;
 8013042:	e076      	b.n	8013132 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	33b0      	adds	r3, #176	; 0xb0
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	4413      	add	r3, r2
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	689b      	ldr	r3, [r3, #8]
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	7850      	ldrb	r0, [r2, #1]
 801305a:	2200      	movs	r2, #0
 801305c:	6839      	ldr	r1, [r7, #0]
 801305e:	4798      	blx	r3
      break;
 8013060:	e067      	b.n	8013132 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	785b      	ldrb	r3, [r3, #1]
 8013066:	2b0b      	cmp	r3, #11
 8013068:	d851      	bhi.n	801310e <USBD_CDC_Setup+0x18a>
 801306a:	a201      	add	r2, pc, #4	; (adr r2, 8013070 <USBD_CDC_Setup+0xec>)
 801306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013070:	080130a1 	.word	0x080130a1
 8013074:	0801311d 	.word	0x0801311d
 8013078:	0801310f 	.word	0x0801310f
 801307c:	0801310f 	.word	0x0801310f
 8013080:	0801310f 	.word	0x0801310f
 8013084:	0801310f 	.word	0x0801310f
 8013088:	0801310f 	.word	0x0801310f
 801308c:	0801310f 	.word	0x0801310f
 8013090:	0801310f 	.word	0x0801310f
 8013094:	0801310f 	.word	0x0801310f
 8013098:	080130cb 	.word	0x080130cb
 801309c:	080130f5 	.word	0x080130f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	2b03      	cmp	r3, #3
 80130aa:	d107      	bne.n	80130bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80130ac:	f107 030a 	add.w	r3, r7, #10
 80130b0:	2202      	movs	r2, #2
 80130b2:	4619      	mov	r1, r3
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f001 fcf3 	bl	8014aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80130ba:	e032      	b.n	8013122 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80130bc:	6839      	ldr	r1, [r7, #0]
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f001 fc7d 	bl	80149be <USBD_CtlError>
            ret = USBD_FAIL;
 80130c4:	2303      	movs	r3, #3
 80130c6:	75fb      	strb	r3, [r7, #23]
          break;
 80130c8:	e02b      	b.n	8013122 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130d0:	b2db      	uxtb	r3, r3
 80130d2:	2b03      	cmp	r3, #3
 80130d4:	d107      	bne.n	80130e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80130d6:	f107 030d 	add.w	r3, r7, #13
 80130da:	2201      	movs	r2, #1
 80130dc:	4619      	mov	r1, r3
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f001 fcde 	bl	8014aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80130e4:	e01d      	b.n	8013122 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80130e6:	6839      	ldr	r1, [r7, #0]
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f001 fc68 	bl	80149be <USBD_CtlError>
            ret = USBD_FAIL;
 80130ee:	2303      	movs	r3, #3
 80130f0:	75fb      	strb	r3, [r7, #23]
          break;
 80130f2:	e016      	b.n	8013122 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130fa:	b2db      	uxtb	r3, r3
 80130fc:	2b03      	cmp	r3, #3
 80130fe:	d00f      	beq.n	8013120 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013100:	6839      	ldr	r1, [r7, #0]
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f001 fc5b 	bl	80149be <USBD_CtlError>
            ret = USBD_FAIL;
 8013108:	2303      	movs	r3, #3
 801310a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801310c:	e008      	b.n	8013120 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801310e:	6839      	ldr	r1, [r7, #0]
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f001 fc54 	bl	80149be <USBD_CtlError>
          ret = USBD_FAIL;
 8013116:	2303      	movs	r3, #3
 8013118:	75fb      	strb	r3, [r7, #23]
          break;
 801311a:	e002      	b.n	8013122 <USBD_CDC_Setup+0x19e>
          break;
 801311c:	bf00      	nop
 801311e:	e008      	b.n	8013132 <USBD_CDC_Setup+0x1ae>
          break;
 8013120:	bf00      	nop
      }
      break;
 8013122:	e006      	b.n	8013132 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013124:	6839      	ldr	r1, [r7, #0]
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f001 fc49 	bl	80149be <USBD_CtlError>
      ret = USBD_FAIL;
 801312c:	2303      	movs	r3, #3
 801312e:	75fb      	strb	r3, [r7, #23]
      break;
 8013130:	bf00      	nop
  }

  return (uint8_t)ret;
 8013132:	7dfb      	ldrb	r3, [r7, #23]
}
 8013134:	4618      	mov	r0, r3
 8013136:	3718      	adds	r7, #24
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	460b      	mov	r3, r1
 8013146:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801314e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	32b0      	adds	r2, #176	; 0xb0
 801315a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d101      	bne.n	8013166 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013162:	2303      	movs	r3, #3
 8013164:	e065      	b.n	8013232 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	32b0      	adds	r2, #176	; 0xb0
 8013170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013174:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013176:	78fb      	ldrb	r3, [r7, #3]
 8013178:	f003 020f 	and.w	r2, r3, #15
 801317c:	6879      	ldr	r1, [r7, #4]
 801317e:	4613      	mov	r3, r2
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	4413      	add	r3, r2
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	440b      	add	r3, r1
 8013188:	3318      	adds	r3, #24
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d02f      	beq.n	80131f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013190:	78fb      	ldrb	r3, [r7, #3]
 8013192:	f003 020f 	and.w	r2, r3, #15
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	4613      	mov	r3, r2
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	4413      	add	r3, r2
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	440b      	add	r3, r1
 80131a2:	3318      	adds	r3, #24
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	78fb      	ldrb	r3, [r7, #3]
 80131a8:	f003 010f 	and.w	r1, r3, #15
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	460b      	mov	r3, r1
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	440b      	add	r3, r1
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	4403      	add	r3, r0
 80131b8:	3344      	adds	r3, #68	; 0x44
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80131c0:	fb01 f303 	mul.w	r3, r1, r3
 80131c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d112      	bne.n	80131f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80131ca:	78fb      	ldrb	r3, [r7, #3]
 80131cc:	f003 020f 	and.w	r2, r3, #15
 80131d0:	6879      	ldr	r1, [r7, #4]
 80131d2:	4613      	mov	r3, r2
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	4413      	add	r3, r2
 80131d8:	009b      	lsls	r3, r3, #2
 80131da:	440b      	add	r3, r1
 80131dc:	3318      	adds	r3, #24
 80131de:	2200      	movs	r2, #0
 80131e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80131e2:	78f9      	ldrb	r1, [r7, #3]
 80131e4:	2300      	movs	r3, #0
 80131e6:	2200      	movs	r2, #0
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f012 fafc 	bl	80257e6 <USBD_LL_Transmit>
 80131ee:	e01f      	b.n	8013230 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	2200      	movs	r2, #0
 80131f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	33b0      	adds	r3, #176	; 0xb0
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	4413      	add	r3, r2
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	691b      	ldr	r3, [r3, #16]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d010      	beq.n	8013230 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	33b0      	adds	r3, #176	; 0xb0
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	4413      	add	r3, r2
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	691b      	ldr	r3, [r3, #16]
 8013220:	68ba      	ldr	r2, [r7, #8]
 8013222:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013226:	68ba      	ldr	r2, [r7, #8]
 8013228:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801322c:	78fa      	ldrb	r2, [r7, #3]
 801322e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3710      	adds	r7, #16
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}

0801323a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b084      	sub	sp, #16
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	460b      	mov	r3, r1
 8013244:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	32b0      	adds	r2, #176	; 0xb0
 8013250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013254:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	32b0      	adds	r2, #176	; 0xb0
 8013260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d101      	bne.n	801326c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013268:	2303      	movs	r3, #3
 801326a:	e01a      	b.n	80132a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801326c:	78fb      	ldrb	r3, [r7, #3]
 801326e:	4619      	mov	r1, r3
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f012 fafa 	bl	802586a <USBD_LL_GetRxDataSize>
 8013276:	4602      	mov	r2, r0
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	33b0      	adds	r3, #176	; 0xb0
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	4413      	add	r3, r2
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	68db      	ldr	r3, [r3, #12]
 8013290:	68fa      	ldr	r2, [r7, #12]
 8013292:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013296:	68fa      	ldr	r2, [r7, #12]
 8013298:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801329c:	4611      	mov	r1, r2
 801329e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80132a0:	2300      	movs	r3, #0
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3710      	adds	r7, #16
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}

080132aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80132aa:	b580      	push	{r7, lr}
 80132ac:	b084      	sub	sp, #16
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	32b0      	adds	r2, #176	; 0xb0
 80132bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d101      	bne.n	80132cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80132c8:	2303      	movs	r3, #3
 80132ca:	e025      	b.n	8013318 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	33b0      	adds	r3, #176	; 0xb0
 80132d6:	009b      	lsls	r3, r3, #2
 80132d8:	4413      	add	r3, r2
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d01a      	beq.n	8013316 <USBD_CDC_EP0_RxReady+0x6c>
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80132e6:	2bff      	cmp	r3, #255	; 0xff
 80132e8:	d015      	beq.n	8013316 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	33b0      	adds	r3, #176	; 0xb0
 80132f4:	009b      	lsls	r3, r3, #2
 80132f6:	4413      	add	r3, r2
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	689b      	ldr	r3, [r3, #8]
 80132fc:	68fa      	ldr	r2, [r7, #12]
 80132fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013302:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013304:	68fa      	ldr	r2, [r7, #12]
 8013306:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801330a:	b292      	uxth	r2, r2
 801330c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	22ff      	movs	r2, #255	; 0xff
 8013312:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013316:	2300      	movs	r3, #0
}
 8013318:	4618      	mov	r0, r3
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013328:	2182      	movs	r1, #130	; 0x82
 801332a:	4818      	ldr	r0, [pc, #96]	; (801338c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801332c:	f000 fd0f 	bl	8013d4e <USBD_GetEpDesc>
 8013330:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013332:	2101      	movs	r1, #1
 8013334:	4815      	ldr	r0, [pc, #84]	; (801338c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013336:	f000 fd0a 	bl	8013d4e <USBD_GetEpDesc>
 801333a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801333c:	2181      	movs	r1, #129	; 0x81
 801333e:	4813      	ldr	r0, [pc, #76]	; (801338c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013340:	f000 fd05 	bl	8013d4e <USBD_GetEpDesc>
 8013344:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d002      	beq.n	8013352 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	2210      	movs	r2, #16
 8013350:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d006      	beq.n	8013366 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	2200      	movs	r2, #0
 801335c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013360:	711a      	strb	r2, [r3, #4]
 8013362:	2200      	movs	r2, #0
 8013364:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d006      	beq.n	801337a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2200      	movs	r2, #0
 8013370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013374:	711a      	strb	r2, [r3, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	2243      	movs	r2, #67	; 0x43
 801337e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013380:	4b02      	ldr	r3, [pc, #8]	; (801338c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013382:	4618      	mov	r0, r3
 8013384:	3718      	adds	r7, #24
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	2400040c 	.word	0x2400040c

08013390 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b086      	sub	sp, #24
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013398:	2182      	movs	r1, #130	; 0x82
 801339a:	4818      	ldr	r0, [pc, #96]	; (80133fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801339c:	f000 fcd7 	bl	8013d4e <USBD_GetEpDesc>
 80133a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80133a2:	2101      	movs	r1, #1
 80133a4:	4815      	ldr	r0, [pc, #84]	; (80133fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80133a6:	f000 fcd2 	bl	8013d4e <USBD_GetEpDesc>
 80133aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80133ac:	2181      	movs	r1, #129	; 0x81
 80133ae:	4813      	ldr	r0, [pc, #76]	; (80133fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80133b0:	f000 fccd 	bl	8013d4e <USBD_GetEpDesc>
 80133b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	2210      	movs	r2, #16
 80133c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d006      	beq.n	80133d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	2200      	movs	r2, #0
 80133cc:	711a      	strb	r2, [r3, #4]
 80133ce:	2200      	movs	r2, #0
 80133d0:	f042 0202 	orr.w	r2, r2, #2
 80133d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d006      	beq.n	80133ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2200      	movs	r2, #0
 80133e0:	711a      	strb	r2, [r3, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	f042 0202 	orr.w	r2, r2, #2
 80133e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2243      	movs	r2, #67	; 0x43
 80133ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80133f0:	4b02      	ldr	r3, [pc, #8]	; (80133fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3718      	adds	r7, #24
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	2400040c 	.word	0x2400040c

08013400 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b086      	sub	sp, #24
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013408:	2182      	movs	r1, #130	; 0x82
 801340a:	4818      	ldr	r0, [pc, #96]	; (801346c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801340c:	f000 fc9f 	bl	8013d4e <USBD_GetEpDesc>
 8013410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013412:	2101      	movs	r1, #1
 8013414:	4815      	ldr	r0, [pc, #84]	; (801346c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013416:	f000 fc9a 	bl	8013d4e <USBD_GetEpDesc>
 801341a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801341c:	2181      	movs	r1, #129	; 0x81
 801341e:	4813      	ldr	r0, [pc, #76]	; (801346c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013420:	f000 fc95 	bl	8013d4e <USBD_GetEpDesc>
 8013424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	2210      	movs	r2, #16
 8013430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d006      	beq.n	8013446 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	2200      	movs	r2, #0
 801343c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013440:	711a      	strb	r2, [r3, #4]
 8013442:	2200      	movs	r2, #0
 8013444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d006      	beq.n	801345a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2200      	movs	r2, #0
 8013450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013454:	711a      	strb	r2, [r3, #4]
 8013456:	2200      	movs	r2, #0
 8013458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2243      	movs	r2, #67	; 0x43
 801345e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013460:	4b02      	ldr	r3, [pc, #8]	; (801346c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013462:	4618      	mov	r0, r3
 8013464:	3718      	adds	r7, #24
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	2400040c 	.word	0x2400040c

08013470 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013470:	b480      	push	{r7}
 8013472:	b083      	sub	sp, #12
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	220a      	movs	r2, #10
 801347c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801347e:	4b03      	ldr	r3, [pc, #12]	; (801348c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013480:	4618      	mov	r0, r3
 8013482:	370c      	adds	r7, #12
 8013484:	46bd      	mov	sp, r7
 8013486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348a:	4770      	bx	lr
 801348c:	240003c8 	.word	0x240003c8

08013490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d101      	bne.n	80134a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80134a0:	2303      	movs	r3, #3
 80134a2:	e009      	b.n	80134b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	33b0      	adds	r3, #176	; 0xb0
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	4413      	add	r3, r2
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80134b6:	2300      	movs	r3, #0
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr

080134c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80134c4:	b480      	push	{r7}
 80134c6:	b087      	sub	sp, #28
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	32b0      	adds	r2, #176	; 0xb0
 80134da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d101      	bne.n	80134ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80134e6:	2303      	movs	r3, #3
 80134e8:	e008      	b.n	80134fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	68ba      	ldr	r2, [r7, #8]
 80134ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80134fa:	2300      	movs	r3, #0
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	371c      	adds	r7, #28
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr

08013508 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013508:	b480      	push	{r7}
 801350a:	b085      	sub	sp, #20
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	32b0      	adds	r2, #176	; 0xb0
 801351c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013520:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d101      	bne.n	801352c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013528:	2303      	movs	r3, #3
 801352a:	e004      	b.n	8013536 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	683a      	ldr	r2, [r7, #0]
 8013530:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013534:	2300      	movs	r3, #0
}
 8013536:	4618      	mov	r0, r3
 8013538:	3714      	adds	r7, #20
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
	...

08013544 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b084      	sub	sp, #16
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	32b0      	adds	r2, #176	; 0xb0
 8013556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801355a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	32b0      	adds	r2, #176	; 0xb0
 8013566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d101      	bne.n	8013572 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801356e:	2303      	movs	r3, #3
 8013570:	e018      	b.n	80135a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	7c1b      	ldrb	r3, [r3, #16]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d10a      	bne.n	8013590 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801357a:	4b0c      	ldr	r3, [pc, #48]	; (80135ac <USBD_CDC_ReceivePacket+0x68>)
 801357c:	7819      	ldrb	r1, [r3, #0]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f012 f94d 	bl	8025828 <USBD_LL_PrepareReceive>
 801358e:	e008      	b.n	80135a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013590:	4b06      	ldr	r3, [pc, #24]	; (80135ac <USBD_CDC_ReceivePacket+0x68>)
 8013592:	7819      	ldrb	r1, [r3, #0]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801359a:	2340      	movs	r3, #64	; 0x40
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f012 f943 	bl	8025828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3710      	adds	r7, #16
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	24000450 	.word	0x24000450

080135b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b086      	sub	sp, #24
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	4613      	mov	r3, r2
 80135bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d101      	bne.n	80135c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80135c4:	2303      	movs	r3, #3
 80135c6:	e01f      	b.n	8013608 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2200      	movs	r2, #0
 80135cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2200      	movs	r2, #0
 80135d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2200      	movs	r2, #0
 80135dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d003      	beq.n	80135ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	68ba      	ldr	r2, [r7, #8]
 80135ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2201      	movs	r2, #1
 80135f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	79fa      	ldrb	r2, [r7, #7]
 80135fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f011 ffb7 	bl	8025570 <USBD_LL_Init>
 8013602:	4603      	mov	r3, r0
 8013604:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013606:	7dfb      	ldrb	r3, [r7, #23]
}
 8013608:	4618      	mov	r0, r3
 801360a:	3718      	adds	r7, #24
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801361a:	2300      	movs	r3, #0
 801361c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d101      	bne.n	8013628 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013624:	2303      	movs	r3, #3
 8013626:	e025      	b.n	8013674 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	683a      	ldr	r2, [r7, #0]
 801362c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	32ae      	adds	r2, #174	; 0xae
 801363a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013640:	2b00      	cmp	r3, #0
 8013642:	d00f      	beq.n	8013664 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	32ae      	adds	r2, #174	; 0xae
 801364e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013654:	f107 020e 	add.w	r2, r7, #14
 8013658:	4610      	mov	r0, r2
 801365a:	4798      	blx	r3
 801365c:	4602      	mov	r2, r0
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801366a:	1c5a      	adds	r2, r3, #1
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013672:	2300      	movs	r3, #0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3710      	adds	r7, #16
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f011 ffc5 	bl	8025614 <USBD_LL_Start>
 801368a:	4603      	mov	r3, r0
}
 801368c:	4618      	mov	r0, r3
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013694:	b480      	push	{r7}
 8013696:	b083      	sub	sp, #12
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801369c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801369e:	4618      	mov	r0, r3
 80136a0:	370c      	adds	r7, #12
 80136a2:	46bd      	mov	sp, r7
 80136a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a8:	4770      	bx	lr

080136aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136aa:	b580      	push	{r7, lr}
 80136ac:	b084      	sub	sp, #16
 80136ae:	af00      	add	r7, sp, #0
 80136b0:	6078      	str	r0, [r7, #4]
 80136b2:	460b      	mov	r3, r1
 80136b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80136b6:	2300      	movs	r3, #0
 80136b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d009      	beq.n	80136d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	78fa      	ldrb	r2, [r7, #3]
 80136ce:	4611      	mov	r1, r2
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	4798      	blx	r3
 80136d4:	4603      	mov	r3, r0
 80136d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80136d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3710      	adds	r7, #16
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}

080136e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b084      	sub	sp, #16
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
 80136ea:	460b      	mov	r3, r1
 80136ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80136ee:	2300      	movs	r3, #0
 80136f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	78fa      	ldrb	r2, [r7, #3]
 80136fc:	4611      	mov	r1, r2
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	4798      	blx	r3
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d001      	beq.n	801370c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013708:	2303      	movs	r3, #3
 801370a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801370c:	7bfb      	ldrb	r3, [r7, #15]
}
 801370e:	4618      	mov	r0, r3
 8013710:	3710      	adds	r7, #16
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}

08013716 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013716:	b580      	push	{r7, lr}
 8013718:	b084      	sub	sp, #16
 801371a:	af00      	add	r7, sp, #0
 801371c:	6078      	str	r0, [r7, #4]
 801371e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	4618      	mov	r0, r3
 801372a:	f001 f90e 	bl	801494a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2201      	movs	r2, #1
 8013732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801373c:	461a      	mov	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801374a:	f003 031f 	and.w	r3, r3, #31
 801374e:	2b02      	cmp	r3, #2
 8013750:	d01a      	beq.n	8013788 <USBD_LL_SetupStage+0x72>
 8013752:	2b02      	cmp	r3, #2
 8013754:	d822      	bhi.n	801379c <USBD_LL_SetupStage+0x86>
 8013756:	2b00      	cmp	r3, #0
 8013758:	d002      	beq.n	8013760 <USBD_LL_SetupStage+0x4a>
 801375a:	2b01      	cmp	r3, #1
 801375c:	d00a      	beq.n	8013774 <USBD_LL_SetupStage+0x5e>
 801375e:	e01d      	b.n	801379c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013766:	4619      	mov	r1, r3
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f000 fb65 	bl	8013e38 <USBD_StdDevReq>
 801376e:	4603      	mov	r3, r0
 8013770:	73fb      	strb	r3, [r7, #15]
      break;
 8013772:	e020      	b.n	80137b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801377a:	4619      	mov	r1, r3
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f000 fbcd 	bl	8013f1c <USBD_StdItfReq>
 8013782:	4603      	mov	r3, r0
 8013784:	73fb      	strb	r3, [r7, #15]
      break;
 8013786:	e016      	b.n	80137b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801378e:	4619      	mov	r1, r3
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f000 fc2f 	bl	8013ff4 <USBD_StdEPReq>
 8013796:	4603      	mov	r3, r0
 8013798:	73fb      	strb	r3, [r7, #15]
      break;
 801379a:	e00c      	b.n	80137b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80137a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	4619      	mov	r1, r3
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f011 ff92 	bl	80256d4 <USBD_LL_StallEP>
 80137b0:	4603      	mov	r3, r0
 80137b2:	73fb      	strb	r3, [r7, #15]
      break;
 80137b4:	bf00      	nop
  }

  return ret;
 80137b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	460b      	mov	r3, r1
 80137ca:	607a      	str	r2, [r7, #4]
 80137cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80137ce:	2300      	movs	r3, #0
 80137d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80137d2:	7afb      	ldrb	r3, [r7, #11]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d16e      	bne.n	80138b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80137de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80137e6:	2b03      	cmp	r3, #3
 80137e8:	f040 8098 	bne.w	801391c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	689a      	ldr	r2, [r3, #8]
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	429a      	cmp	r2, r3
 80137f6:	d913      	bls.n	8013820 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	689a      	ldr	r2, [r3, #8]
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	68db      	ldr	r3, [r3, #12]
 8013800:	1ad2      	subs	r2, r2, r3
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	68da      	ldr	r2, [r3, #12]
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	4293      	cmp	r3, r2
 8013810:	bf28      	it	cs
 8013812:	4613      	movcs	r3, r2
 8013814:	461a      	mov	r2, r3
 8013816:	6879      	ldr	r1, [r7, #4]
 8013818:	68f8      	ldr	r0, [r7, #12]
 801381a:	f001 f98a 	bl	8014b32 <USBD_CtlContinueRx>
 801381e:	e07d      	b.n	801391c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013826:	f003 031f 	and.w	r3, r3, #31
 801382a:	2b02      	cmp	r3, #2
 801382c:	d014      	beq.n	8013858 <USBD_LL_DataOutStage+0x98>
 801382e:	2b02      	cmp	r3, #2
 8013830:	d81d      	bhi.n	801386e <USBD_LL_DataOutStage+0xae>
 8013832:	2b00      	cmp	r3, #0
 8013834:	d002      	beq.n	801383c <USBD_LL_DataOutStage+0x7c>
 8013836:	2b01      	cmp	r3, #1
 8013838:	d003      	beq.n	8013842 <USBD_LL_DataOutStage+0x82>
 801383a:	e018      	b.n	801386e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801383c:	2300      	movs	r3, #0
 801383e:	75bb      	strb	r3, [r7, #22]
            break;
 8013840:	e018      	b.n	8013874 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013848:	b2db      	uxtb	r3, r3
 801384a:	4619      	mov	r1, r3
 801384c:	68f8      	ldr	r0, [r7, #12]
 801384e:	f000 fa64 	bl	8013d1a <USBD_CoreFindIF>
 8013852:	4603      	mov	r3, r0
 8013854:	75bb      	strb	r3, [r7, #22]
            break;
 8013856:	e00d      	b.n	8013874 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801385e:	b2db      	uxtb	r3, r3
 8013860:	4619      	mov	r1, r3
 8013862:	68f8      	ldr	r0, [r7, #12]
 8013864:	f000 fa66 	bl	8013d34 <USBD_CoreFindEP>
 8013868:	4603      	mov	r3, r0
 801386a:	75bb      	strb	r3, [r7, #22]
            break;
 801386c:	e002      	b.n	8013874 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801386e:	2300      	movs	r3, #0
 8013870:	75bb      	strb	r3, [r7, #22]
            break;
 8013872:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013874:	7dbb      	ldrb	r3, [r7, #22]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d119      	bne.n	80138ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013880:	b2db      	uxtb	r3, r3
 8013882:	2b03      	cmp	r3, #3
 8013884:	d113      	bne.n	80138ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013886:	7dba      	ldrb	r2, [r7, #22]
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	32ae      	adds	r2, #174	; 0xae
 801388c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013890:	691b      	ldr	r3, [r3, #16]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d00b      	beq.n	80138ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013896:	7dba      	ldrb	r2, [r7, #22]
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801389e:	7dba      	ldrb	r2, [r7, #22]
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	32ae      	adds	r2, #174	; 0xae
 80138a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138a8:	691b      	ldr	r3, [r3, #16]
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f001 f950 	bl	8014b54 <USBD_CtlSendStatus>
 80138b4:	e032      	b.n	801391c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80138b6:	7afb      	ldrb	r3, [r7, #11]
 80138b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	4619      	mov	r1, r3
 80138c0:	68f8      	ldr	r0, [r7, #12]
 80138c2:	f000 fa37 	bl	8013d34 <USBD_CoreFindEP>
 80138c6:	4603      	mov	r3, r0
 80138c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80138ca:	7dbb      	ldrb	r3, [r7, #22]
 80138cc:	2bff      	cmp	r3, #255	; 0xff
 80138ce:	d025      	beq.n	801391c <USBD_LL_DataOutStage+0x15c>
 80138d0:	7dbb      	ldrb	r3, [r7, #22]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d122      	bne.n	801391c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138dc:	b2db      	uxtb	r3, r3
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d117      	bne.n	8013912 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80138e2:	7dba      	ldrb	r2, [r7, #22]
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	32ae      	adds	r2, #174	; 0xae
 80138e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ec:	699b      	ldr	r3, [r3, #24]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d00f      	beq.n	8013912 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80138f2:	7dba      	ldrb	r2, [r7, #22]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80138fa:	7dba      	ldrb	r2, [r7, #22]
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	32ae      	adds	r2, #174	; 0xae
 8013900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013904:	699b      	ldr	r3, [r3, #24]
 8013906:	7afa      	ldrb	r2, [r7, #11]
 8013908:	4611      	mov	r1, r2
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	4798      	blx	r3
 801390e:	4603      	mov	r3, r0
 8013910:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013912:	7dfb      	ldrb	r3, [r7, #23]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013918:	7dfb      	ldrb	r3, [r7, #23]
 801391a:	e000      	b.n	801391e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3718      	adds	r7, #24
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b086      	sub	sp, #24
 801392a:	af00      	add	r7, sp, #0
 801392c:	60f8      	str	r0, [r7, #12]
 801392e:	460b      	mov	r3, r1
 8013930:	607a      	str	r2, [r7, #4]
 8013932:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013934:	7afb      	ldrb	r3, [r7, #11]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d16f      	bne.n	8013a1a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	3314      	adds	r3, #20
 801393e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013946:	2b02      	cmp	r3, #2
 8013948:	d15a      	bne.n	8013a00 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	689a      	ldr	r2, [r3, #8]
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	429a      	cmp	r2, r3
 8013954:	d914      	bls.n	8013980 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	689a      	ldr	r2, [r3, #8]
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	68db      	ldr	r3, [r3, #12]
 801395e:	1ad2      	subs	r2, r2, r3
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	689b      	ldr	r3, [r3, #8]
 8013968:	461a      	mov	r2, r3
 801396a:	6879      	ldr	r1, [r7, #4]
 801396c:	68f8      	ldr	r0, [r7, #12]
 801396e:	f001 f8b2 	bl	8014ad6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013972:	2300      	movs	r3, #0
 8013974:	2200      	movs	r2, #0
 8013976:	2100      	movs	r1, #0
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f011 ff55 	bl	8025828 <USBD_LL_PrepareReceive>
 801397e:	e03f      	b.n	8013a00 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	68da      	ldr	r2, [r3, #12]
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	689b      	ldr	r3, [r3, #8]
 8013988:	429a      	cmp	r2, r3
 801398a:	d11c      	bne.n	80139c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	685a      	ldr	r2, [r3, #4]
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013994:	429a      	cmp	r2, r3
 8013996:	d316      	bcc.n	80139c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	685a      	ldr	r2, [r3, #4]
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d20f      	bcs.n	80139c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80139a6:	2200      	movs	r2, #0
 80139a8:	2100      	movs	r1, #0
 80139aa:	68f8      	ldr	r0, [r7, #12]
 80139ac:	f001 f893 	bl	8014ad6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	2200      	movs	r2, #0
 80139b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80139b8:	2300      	movs	r3, #0
 80139ba:	2200      	movs	r2, #0
 80139bc:	2100      	movs	r1, #0
 80139be:	68f8      	ldr	r0, [r7, #12]
 80139c0:	f011 ff32 	bl	8025828 <USBD_LL_PrepareReceive>
 80139c4:	e01c      	b.n	8013a00 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139cc:	b2db      	uxtb	r3, r3
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	d10f      	bne.n	80139f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d009      	beq.n	80139f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2200      	movs	r2, #0
 80139e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139ec:	68db      	ldr	r3, [r3, #12]
 80139ee:	68f8      	ldr	r0, [r7, #12]
 80139f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80139f2:	2180      	movs	r1, #128	; 0x80
 80139f4:	68f8      	ldr	r0, [r7, #12]
 80139f6:	f011 fe6d 	bl	80256d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80139fa:	68f8      	ldr	r0, [r7, #12]
 80139fc:	f001 f8bd 	bl	8014b7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d03a      	beq.n	8013a80 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7ff fe42 	bl	8013694 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2200      	movs	r2, #0
 8013a14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013a18:	e032      	b.n	8013a80 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013a1a:	7afb      	ldrb	r3, [r7, #11]
 8013a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	4619      	mov	r1, r3
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f000 f985 	bl	8013d34 <USBD_CoreFindEP>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013a2e:	7dfb      	ldrb	r3, [r7, #23]
 8013a30:	2bff      	cmp	r3, #255	; 0xff
 8013a32:	d025      	beq.n	8013a80 <USBD_LL_DataInStage+0x15a>
 8013a34:	7dfb      	ldrb	r3, [r7, #23]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d122      	bne.n	8013a80 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	2b03      	cmp	r3, #3
 8013a44:	d11c      	bne.n	8013a80 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013a46:	7dfa      	ldrb	r2, [r7, #23]
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	32ae      	adds	r2, #174	; 0xae
 8013a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a50:	695b      	ldr	r3, [r3, #20]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d014      	beq.n	8013a80 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013a56:	7dfa      	ldrb	r2, [r7, #23]
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013a5e:	7dfa      	ldrb	r2, [r7, #23]
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	32ae      	adds	r2, #174	; 0xae
 8013a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a68:	695b      	ldr	r3, [r3, #20]
 8013a6a:	7afa      	ldrb	r2, [r7, #11]
 8013a6c:	4611      	mov	r1, r2
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	4798      	blx	r3
 8013a72:	4603      	mov	r3, r0
 8013a74:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013a76:	7dbb      	ldrb	r3, [r7, #22]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d001      	beq.n	8013a80 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013a7c:	7dbb      	ldrb	r3, [r7, #22]
 8013a7e:	e000      	b.n	8013a82 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013a80:	2300      	movs	r3, #0
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3718      	adds	r7, #24
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013a8a:	b580      	push	{r7, lr}
 8013a8c:	b084      	sub	sp, #16
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a92:	2300      	movs	r3, #0
 8013a94:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2201      	movs	r2, #1
 8013a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d014      	beq.n	8013af0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013acc:	685b      	ldr	r3, [r3, #4]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00e      	beq.n	8013af0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ad8:	685b      	ldr	r3, [r3, #4]
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	6852      	ldr	r2, [r2, #4]
 8013ade:	b2d2      	uxtb	r2, r2
 8013ae0:	4611      	mov	r1, r2
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	4798      	blx	r3
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d001      	beq.n	8013af0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013aec:	2303      	movs	r3, #3
 8013aee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013af0:	2340      	movs	r3, #64	; 0x40
 8013af2:	2200      	movs	r2, #0
 8013af4:	2100      	movs	r1, #0
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f011 fda7 	bl	802564a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2201      	movs	r2, #1
 8013b00:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2240      	movs	r2, #64	; 0x40
 8013b08:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013b0c:	2340      	movs	r3, #64	; 0x40
 8013b0e:	2200      	movs	r2, #0
 8013b10:	2180      	movs	r1, #128	; 0x80
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f011 fd99 	bl	802564a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2240      	movs	r2, #64	; 0x40
 8013b22:	621a      	str	r2, [r3, #32]

  return ret;
 8013b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3710      	adds	r7, #16
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013b2e:	b480      	push	{r7}
 8013b30:	b083      	sub	sp, #12
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	460b      	mov	r3, r1
 8013b38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	78fa      	ldrb	r2, [r7, #3]
 8013b3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013b40:	2300      	movs	r3, #0
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	370c      	adds	r7, #12
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr

08013b4e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013b4e:	b480      	push	{r7}
 8013b50:	b083      	sub	sp, #12
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b5c:	b2db      	uxtb	r3, r3
 8013b5e:	2b04      	cmp	r3, #4
 8013b60:	d006      	beq.n	8013b70 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b68:	b2da      	uxtb	r2, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2204      	movs	r2, #4
 8013b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013b78:	2300      	movs	r3, #0
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	2b04      	cmp	r3, #4
 8013b98:	d106      	bne.n	8013ba8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013ba0:	b2da      	uxtb	r2, r3
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013ba8:	2300      	movs	r3, #0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr

08013bb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b082      	sub	sp, #8
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bc4:	b2db      	uxtb	r3, r3
 8013bc6:	2b03      	cmp	r3, #3
 8013bc8:	d110      	bne.n	8013bec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d00b      	beq.n	8013bec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bda:	69db      	ldr	r3, [r3, #28]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d005      	beq.n	8013bec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013be6:	69db      	ldr	r3, [r3, #28]
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013bec:	2300      	movs	r3, #0
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3708      	adds	r7, #8
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}

08013bf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013bf6:	b580      	push	{r7, lr}
 8013bf8:	b082      	sub	sp, #8
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
 8013bfe:	460b      	mov	r3, r1
 8013c00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	32ae      	adds	r2, #174	; 0xae
 8013c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d101      	bne.n	8013c18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013c14:	2303      	movs	r3, #3
 8013c16:	e01c      	b.n	8013c52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	2b03      	cmp	r3, #3
 8013c22:	d115      	bne.n	8013c50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	32ae      	adds	r2, #174	; 0xae
 8013c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c32:	6a1b      	ldr	r3, [r3, #32]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00b      	beq.n	8013c50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	32ae      	adds	r2, #174	; 0xae
 8013c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c46:	6a1b      	ldr	r3, [r3, #32]
 8013c48:	78fa      	ldrb	r2, [r7, #3]
 8013c4a:	4611      	mov	r1, r2
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013c50:	2300      	movs	r3, #0
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b082      	sub	sp, #8
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	6078      	str	r0, [r7, #4]
 8013c62:	460b      	mov	r3, r1
 8013c64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	32ae      	adds	r2, #174	; 0xae
 8013c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d101      	bne.n	8013c7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013c78:	2303      	movs	r3, #3
 8013c7a:	e01c      	b.n	8013cb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c82:	b2db      	uxtb	r3, r3
 8013c84:	2b03      	cmp	r3, #3
 8013c86:	d115      	bne.n	8013cb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	32ae      	adds	r2, #174	; 0xae
 8013c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00b      	beq.n	8013cb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	32ae      	adds	r2, #174	; 0xae
 8013ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cac:	78fa      	ldrb	r2, [r7, #3]
 8013cae:	4611      	mov	r1, r2
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013cb4:	2300      	movs	r3, #0
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3708      	adds	r7, #8
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}

08013cbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013cbe:	b480      	push	{r7}
 8013cc0:	b083      	sub	sp, #12
 8013cc2:	af00      	add	r7, sp, #0
 8013cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013cc6:	2300      	movs	r3, #0
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b084      	sub	sp, #16
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2201      	movs	r2, #1
 8013ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00e      	beq.n	8013d10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cf8:	685b      	ldr	r3, [r3, #4]
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	6852      	ldr	r2, [r2, #4]
 8013cfe:	b2d2      	uxtb	r2, r2
 8013d00:	4611      	mov	r1, r2
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	4798      	blx	r3
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d001      	beq.n	8013d10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013d0c:	2303      	movs	r3, #3
 8013d0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3710      	adds	r7, #16
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	b083      	sub	sp, #12
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
 8013d22:	460b      	mov	r3, r1
 8013d24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013d26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	370c      	adds	r7, #12
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr

08013d34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b083      	sub	sp, #12
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	460b      	mov	r3, r1
 8013d3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013d40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	370c      	adds	r7, #12
 8013d46:	46bd      	mov	sp, r7
 8013d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4c:	4770      	bx	lr

08013d4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013d4e:	b580      	push	{r7, lr}
 8013d50:	b086      	sub	sp, #24
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	6078      	str	r0, [r7, #4]
 8013d56:	460b      	mov	r3, r1
 8013d58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013d62:	2300      	movs	r3, #0
 8013d64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	885b      	ldrh	r3, [r3, #2]
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	781b      	ldrb	r3, [r3, #0]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d920      	bls.n	8013db8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013d7e:	e013      	b.n	8013da8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013d80:	f107 030a 	add.w	r3, r7, #10
 8013d84:	4619      	mov	r1, r3
 8013d86:	6978      	ldr	r0, [r7, #20]
 8013d88:	f000 f81b 	bl	8013dc2 <USBD_GetNextDesc>
 8013d8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	785b      	ldrb	r3, [r3, #1]
 8013d92:	2b05      	cmp	r3, #5
 8013d94:	d108      	bne.n	8013da8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	789b      	ldrb	r3, [r3, #2]
 8013d9e:	78fa      	ldrb	r2, [r7, #3]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d008      	beq.n	8013db6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013da4:	2300      	movs	r3, #0
 8013da6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	885b      	ldrh	r3, [r3, #2]
 8013dac:	b29a      	uxth	r2, r3
 8013dae:	897b      	ldrh	r3, [r7, #10]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d8e5      	bhi.n	8013d80 <USBD_GetEpDesc+0x32>
 8013db4:	e000      	b.n	8013db8 <USBD_GetEpDesc+0x6a>
          break;
 8013db6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013db8:	693b      	ldr	r3, [r7, #16]
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3718      	adds	r7, #24
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}

08013dc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013dc2:	b480      	push	{r7}
 8013dc4:	b085      	sub	sp, #20
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	6078      	str	r0, [r7, #4]
 8013dca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	881a      	ldrh	r2, [r3, #0]
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	4413      	add	r3, r2
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	461a      	mov	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	4413      	add	r3, r2
 8013dec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013dee:	68fb      	ldr	r3, [r7, #12]
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3714      	adds	r7, #20
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr

08013dfc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b087      	sub	sp, #28
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	781b      	ldrb	r3, [r3, #0]
 8013e0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	3301      	adds	r3, #1
 8013e12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013e1a:	8a3b      	ldrh	r3, [r7, #16]
 8013e1c:	021b      	lsls	r3, r3, #8
 8013e1e:	b21a      	sxth	r2, r3
 8013e20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013e24:	4313      	orrs	r3, r2
 8013e26:	b21b      	sxth	r3, r3
 8013e28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013e2a:	89fb      	ldrh	r3, [r7, #14]
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	371c      	adds	r7, #28
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e42:	2300      	movs	r3, #0
 8013e44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013e4e:	2b40      	cmp	r3, #64	; 0x40
 8013e50:	d005      	beq.n	8013e5e <USBD_StdDevReq+0x26>
 8013e52:	2b40      	cmp	r3, #64	; 0x40
 8013e54:	d857      	bhi.n	8013f06 <USBD_StdDevReq+0xce>
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d00f      	beq.n	8013e7a <USBD_StdDevReq+0x42>
 8013e5a:	2b20      	cmp	r3, #32
 8013e5c:	d153      	bne.n	8013f06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	32ae      	adds	r2, #174	; 0xae
 8013e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e6c:	689b      	ldr	r3, [r3, #8]
 8013e6e:	6839      	ldr	r1, [r7, #0]
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	4798      	blx	r3
 8013e74:	4603      	mov	r3, r0
 8013e76:	73fb      	strb	r3, [r7, #15]
      break;
 8013e78:	e04a      	b.n	8013f10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	785b      	ldrb	r3, [r3, #1]
 8013e7e:	2b09      	cmp	r3, #9
 8013e80:	d83b      	bhi.n	8013efa <USBD_StdDevReq+0xc2>
 8013e82:	a201      	add	r2, pc, #4	; (adr r2, 8013e88 <USBD_StdDevReq+0x50>)
 8013e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e88:	08013edd 	.word	0x08013edd
 8013e8c:	08013ef1 	.word	0x08013ef1
 8013e90:	08013efb 	.word	0x08013efb
 8013e94:	08013ee7 	.word	0x08013ee7
 8013e98:	08013efb 	.word	0x08013efb
 8013e9c:	08013ebb 	.word	0x08013ebb
 8013ea0:	08013eb1 	.word	0x08013eb1
 8013ea4:	08013efb 	.word	0x08013efb
 8013ea8:	08013ed3 	.word	0x08013ed3
 8013eac:	08013ec5 	.word	0x08013ec5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013eb0:	6839      	ldr	r1, [r7, #0]
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f000 fa3c 	bl	8014330 <USBD_GetDescriptor>
          break;
 8013eb8:	e024      	b.n	8013f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013eba:	6839      	ldr	r1, [r7, #0]
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fba1 	bl	8014604 <USBD_SetAddress>
          break;
 8013ec2:	e01f      	b.n	8013f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013ec4:	6839      	ldr	r1, [r7, #0]
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 fbe0 	bl	801468c <USBD_SetConfig>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	73fb      	strb	r3, [r7, #15]
          break;
 8013ed0:	e018      	b.n	8013f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013ed2:	6839      	ldr	r1, [r7, #0]
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f000 fc83 	bl	80147e0 <USBD_GetConfig>
          break;
 8013eda:	e013      	b.n	8013f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013edc:	6839      	ldr	r1, [r7, #0]
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f000 fcb4 	bl	801484c <USBD_GetStatus>
          break;
 8013ee4:	e00e      	b.n	8013f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013ee6:	6839      	ldr	r1, [r7, #0]
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f000 fce3 	bl	80148b4 <USBD_SetFeature>
          break;
 8013eee:	e009      	b.n	8013f04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013ef0:	6839      	ldr	r1, [r7, #0]
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 fd07 	bl	8014906 <USBD_ClrFeature>
          break;
 8013ef8:	e004      	b.n	8013f04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013efa:	6839      	ldr	r1, [r7, #0]
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f000 fd5e 	bl	80149be <USBD_CtlError>
          break;
 8013f02:	bf00      	nop
      }
      break;
 8013f04:	e004      	b.n	8013f10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013f06:	6839      	ldr	r1, [r7, #0]
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f000 fd58 	bl	80149be <USBD_CtlError>
      break;
 8013f0e:	bf00      	nop
  }

  return ret;
 8013f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3710      	adds	r7, #16
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop

08013f1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f26:	2300      	movs	r3, #0
 8013f28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f32:	2b40      	cmp	r3, #64	; 0x40
 8013f34:	d005      	beq.n	8013f42 <USBD_StdItfReq+0x26>
 8013f36:	2b40      	cmp	r3, #64	; 0x40
 8013f38:	d852      	bhi.n	8013fe0 <USBD_StdItfReq+0xc4>
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d001      	beq.n	8013f42 <USBD_StdItfReq+0x26>
 8013f3e:	2b20      	cmp	r3, #32
 8013f40:	d14e      	bne.n	8013fe0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	2b02      	cmp	r3, #2
 8013f4e:	d840      	bhi.n	8013fd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	889b      	ldrh	r3, [r3, #4]
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d836      	bhi.n	8013fc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	889b      	ldrh	r3, [r3, #4]
 8013f5e:	b2db      	uxtb	r3, r3
 8013f60:	4619      	mov	r1, r3
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f7ff fed9 	bl	8013d1a <USBD_CoreFindIF>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f6c:	7bbb      	ldrb	r3, [r7, #14]
 8013f6e:	2bff      	cmp	r3, #255	; 0xff
 8013f70:	d01d      	beq.n	8013fae <USBD_StdItfReq+0x92>
 8013f72:	7bbb      	ldrb	r3, [r7, #14]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d11a      	bne.n	8013fae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013f78:	7bba      	ldrb	r2, [r7, #14]
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	32ae      	adds	r2, #174	; 0xae
 8013f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d00f      	beq.n	8013fa8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013f88:	7bba      	ldrb	r2, [r7, #14]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013f90:	7bba      	ldrb	r2, [r7, #14]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	32ae      	adds	r2, #174	; 0xae
 8013f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f9a:	689b      	ldr	r3, [r3, #8]
 8013f9c:	6839      	ldr	r1, [r7, #0]
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	4798      	blx	r3
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013fa6:	e004      	b.n	8013fb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013fa8:	2303      	movs	r3, #3
 8013faa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013fac:	e001      	b.n	8013fb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013fae:	2303      	movs	r3, #3
 8013fb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	88db      	ldrh	r3, [r3, #6]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d110      	bne.n	8013fdc <USBD_StdItfReq+0xc0>
 8013fba:	7bfb      	ldrb	r3, [r7, #15]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d10d      	bne.n	8013fdc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f000 fdc7 	bl	8014b54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013fc6:	e009      	b.n	8013fdc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013fc8:	6839      	ldr	r1, [r7, #0]
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f000 fcf7 	bl	80149be <USBD_CtlError>
          break;
 8013fd0:	e004      	b.n	8013fdc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013fd2:	6839      	ldr	r1, [r7, #0]
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f000 fcf2 	bl	80149be <USBD_CtlError>
          break;
 8013fda:	e000      	b.n	8013fde <USBD_StdItfReq+0xc2>
          break;
 8013fdc:	bf00      	nop
      }
      break;
 8013fde:	e004      	b.n	8013fea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013fe0:	6839      	ldr	r1, [r7, #0]
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f000 fceb 	bl	80149be <USBD_CtlError>
      break;
 8013fe8:	bf00      	nop
  }

  return ret;
 8013fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3710      	adds	r7, #16
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}

08013ff4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ffe:	2300      	movs	r3, #0
 8014000:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	889b      	ldrh	r3, [r3, #4]
 8014006:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014010:	2b40      	cmp	r3, #64	; 0x40
 8014012:	d007      	beq.n	8014024 <USBD_StdEPReq+0x30>
 8014014:	2b40      	cmp	r3, #64	; 0x40
 8014016:	f200 817f 	bhi.w	8014318 <USBD_StdEPReq+0x324>
 801401a:	2b00      	cmp	r3, #0
 801401c:	d02a      	beq.n	8014074 <USBD_StdEPReq+0x80>
 801401e:	2b20      	cmp	r3, #32
 8014020:	f040 817a 	bne.w	8014318 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014024:	7bbb      	ldrb	r3, [r7, #14]
 8014026:	4619      	mov	r1, r3
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f7ff fe83 	bl	8013d34 <USBD_CoreFindEP>
 801402e:	4603      	mov	r3, r0
 8014030:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014032:	7b7b      	ldrb	r3, [r7, #13]
 8014034:	2bff      	cmp	r3, #255	; 0xff
 8014036:	f000 8174 	beq.w	8014322 <USBD_StdEPReq+0x32e>
 801403a:	7b7b      	ldrb	r3, [r7, #13]
 801403c:	2b00      	cmp	r3, #0
 801403e:	f040 8170 	bne.w	8014322 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014042:	7b7a      	ldrb	r2, [r7, #13]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801404a:	7b7a      	ldrb	r2, [r7, #13]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	32ae      	adds	r2, #174	; 0xae
 8014050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014054:	689b      	ldr	r3, [r3, #8]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 8163 	beq.w	8014322 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801405c:	7b7a      	ldrb	r2, [r7, #13]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	32ae      	adds	r2, #174	; 0xae
 8014062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014066:	689b      	ldr	r3, [r3, #8]
 8014068:	6839      	ldr	r1, [r7, #0]
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	4798      	blx	r3
 801406e:	4603      	mov	r3, r0
 8014070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014072:	e156      	b.n	8014322 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	785b      	ldrb	r3, [r3, #1]
 8014078:	2b03      	cmp	r3, #3
 801407a:	d008      	beq.n	801408e <USBD_StdEPReq+0x9a>
 801407c:	2b03      	cmp	r3, #3
 801407e:	f300 8145 	bgt.w	801430c <USBD_StdEPReq+0x318>
 8014082:	2b00      	cmp	r3, #0
 8014084:	f000 809b 	beq.w	80141be <USBD_StdEPReq+0x1ca>
 8014088:	2b01      	cmp	r3, #1
 801408a:	d03c      	beq.n	8014106 <USBD_StdEPReq+0x112>
 801408c:	e13e      	b.n	801430c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014094:	b2db      	uxtb	r3, r3
 8014096:	2b02      	cmp	r3, #2
 8014098:	d002      	beq.n	80140a0 <USBD_StdEPReq+0xac>
 801409a:	2b03      	cmp	r3, #3
 801409c:	d016      	beq.n	80140cc <USBD_StdEPReq+0xd8>
 801409e:	e02c      	b.n	80140fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80140a0:	7bbb      	ldrb	r3, [r7, #14]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d00d      	beq.n	80140c2 <USBD_StdEPReq+0xce>
 80140a6:	7bbb      	ldrb	r3, [r7, #14]
 80140a8:	2b80      	cmp	r3, #128	; 0x80
 80140aa:	d00a      	beq.n	80140c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80140ac:	7bbb      	ldrb	r3, [r7, #14]
 80140ae:	4619      	mov	r1, r3
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f011 fb0f 	bl	80256d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80140b6:	2180      	movs	r1, #128	; 0x80
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f011 fb0b 	bl	80256d4 <USBD_LL_StallEP>
 80140be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80140c0:	e020      	b.n	8014104 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80140c2:	6839      	ldr	r1, [r7, #0]
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 fc7a 	bl	80149be <USBD_CtlError>
              break;
 80140ca:	e01b      	b.n	8014104 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	885b      	ldrh	r3, [r3, #2]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d10e      	bne.n	80140f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80140d4:	7bbb      	ldrb	r3, [r7, #14]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00b      	beq.n	80140f2 <USBD_StdEPReq+0xfe>
 80140da:	7bbb      	ldrb	r3, [r7, #14]
 80140dc:	2b80      	cmp	r3, #128	; 0x80
 80140de:	d008      	beq.n	80140f2 <USBD_StdEPReq+0xfe>
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	88db      	ldrh	r3, [r3, #6]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d104      	bne.n	80140f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80140e8:	7bbb      	ldrb	r3, [r7, #14]
 80140ea:	4619      	mov	r1, r3
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f011 faf1 	bl	80256d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 fd2e 	bl	8014b54 <USBD_CtlSendStatus>

              break;
 80140f8:	e004      	b.n	8014104 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80140fa:	6839      	ldr	r1, [r7, #0]
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f000 fc5e 	bl	80149be <USBD_CtlError>
              break;
 8014102:	bf00      	nop
          }
          break;
 8014104:	e107      	b.n	8014316 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801410c:	b2db      	uxtb	r3, r3
 801410e:	2b02      	cmp	r3, #2
 8014110:	d002      	beq.n	8014118 <USBD_StdEPReq+0x124>
 8014112:	2b03      	cmp	r3, #3
 8014114:	d016      	beq.n	8014144 <USBD_StdEPReq+0x150>
 8014116:	e04b      	b.n	80141b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014118:	7bbb      	ldrb	r3, [r7, #14]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d00d      	beq.n	801413a <USBD_StdEPReq+0x146>
 801411e:	7bbb      	ldrb	r3, [r7, #14]
 8014120:	2b80      	cmp	r3, #128	; 0x80
 8014122:	d00a      	beq.n	801413a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014124:	7bbb      	ldrb	r3, [r7, #14]
 8014126:	4619      	mov	r1, r3
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f011 fad3 	bl	80256d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801412e:	2180      	movs	r1, #128	; 0x80
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f011 facf 	bl	80256d4 <USBD_LL_StallEP>
 8014136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014138:	e040      	b.n	80141bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801413a:	6839      	ldr	r1, [r7, #0]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f000 fc3e 	bl	80149be <USBD_CtlError>
              break;
 8014142:	e03b      	b.n	80141bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	885b      	ldrh	r3, [r3, #2]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d136      	bne.n	80141ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801414c:	7bbb      	ldrb	r3, [r7, #14]
 801414e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014152:	2b00      	cmp	r3, #0
 8014154:	d004      	beq.n	8014160 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014156:	7bbb      	ldrb	r3, [r7, #14]
 8014158:	4619      	mov	r1, r3
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f011 fad9 	bl	8025712 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f000 fcf7 	bl	8014b54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014166:	7bbb      	ldrb	r3, [r7, #14]
 8014168:	4619      	mov	r1, r3
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7ff fde2 	bl	8013d34 <USBD_CoreFindEP>
 8014170:	4603      	mov	r3, r0
 8014172:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014174:	7b7b      	ldrb	r3, [r7, #13]
 8014176:	2bff      	cmp	r3, #255	; 0xff
 8014178:	d01f      	beq.n	80141ba <USBD_StdEPReq+0x1c6>
 801417a:	7b7b      	ldrb	r3, [r7, #13]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d11c      	bne.n	80141ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014180:	7b7a      	ldrb	r2, [r7, #13]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014188:	7b7a      	ldrb	r2, [r7, #13]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	32ae      	adds	r2, #174	; 0xae
 801418e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014192:	689b      	ldr	r3, [r3, #8]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d010      	beq.n	80141ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014198:	7b7a      	ldrb	r2, [r7, #13]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	32ae      	adds	r2, #174	; 0xae
 801419e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a2:	689b      	ldr	r3, [r3, #8]
 80141a4:	6839      	ldr	r1, [r7, #0]
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	4798      	blx	r3
 80141aa:	4603      	mov	r3, r0
 80141ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80141ae:	e004      	b.n	80141ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80141b0:	6839      	ldr	r1, [r7, #0]
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f000 fc03 	bl	80149be <USBD_CtlError>
              break;
 80141b8:	e000      	b.n	80141bc <USBD_StdEPReq+0x1c8>
              break;
 80141ba:	bf00      	nop
          }
          break;
 80141bc:	e0ab      	b.n	8014316 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141c4:	b2db      	uxtb	r3, r3
 80141c6:	2b02      	cmp	r3, #2
 80141c8:	d002      	beq.n	80141d0 <USBD_StdEPReq+0x1dc>
 80141ca:	2b03      	cmp	r3, #3
 80141cc:	d032      	beq.n	8014234 <USBD_StdEPReq+0x240>
 80141ce:	e097      	b.n	8014300 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141d0:	7bbb      	ldrb	r3, [r7, #14]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d007      	beq.n	80141e6 <USBD_StdEPReq+0x1f2>
 80141d6:	7bbb      	ldrb	r3, [r7, #14]
 80141d8:	2b80      	cmp	r3, #128	; 0x80
 80141da:	d004      	beq.n	80141e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80141dc:	6839      	ldr	r1, [r7, #0]
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 fbed 	bl	80149be <USBD_CtlError>
                break;
 80141e4:	e091      	b.n	801430a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	da0b      	bge.n	8014206 <USBD_StdEPReq+0x212>
 80141ee:	7bbb      	ldrb	r3, [r7, #14]
 80141f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80141f4:	4613      	mov	r3, r2
 80141f6:	009b      	lsls	r3, r3, #2
 80141f8:	4413      	add	r3, r2
 80141fa:	009b      	lsls	r3, r3, #2
 80141fc:	3310      	adds	r3, #16
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	4413      	add	r3, r2
 8014202:	3304      	adds	r3, #4
 8014204:	e00b      	b.n	801421e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014206:	7bbb      	ldrb	r3, [r7, #14]
 8014208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801420c:	4613      	mov	r3, r2
 801420e:	009b      	lsls	r3, r3, #2
 8014210:	4413      	add	r3, r2
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014218:	687a      	ldr	r2, [r7, #4]
 801421a:	4413      	add	r3, r2
 801421c:	3304      	adds	r3, #4
 801421e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	2200      	movs	r2, #0
 8014224:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	2202      	movs	r2, #2
 801422a:	4619      	mov	r1, r3
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f000 fc37 	bl	8014aa0 <USBD_CtlSendData>
              break;
 8014232:	e06a      	b.n	801430a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014238:	2b00      	cmp	r3, #0
 801423a:	da11      	bge.n	8014260 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801423c:	7bbb      	ldrb	r3, [r7, #14]
 801423e:	f003 020f 	and.w	r2, r3, #15
 8014242:	6879      	ldr	r1, [r7, #4]
 8014244:	4613      	mov	r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	4413      	add	r3, r2
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	440b      	add	r3, r1
 801424e:	3324      	adds	r3, #36	; 0x24
 8014250:	881b      	ldrh	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d117      	bne.n	8014286 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014256:	6839      	ldr	r1, [r7, #0]
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f000 fbb0 	bl	80149be <USBD_CtlError>
                  break;
 801425e:	e054      	b.n	801430a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014260:	7bbb      	ldrb	r3, [r7, #14]
 8014262:	f003 020f 	and.w	r2, r3, #15
 8014266:	6879      	ldr	r1, [r7, #4]
 8014268:	4613      	mov	r3, r2
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	4413      	add	r3, r2
 801426e:	009b      	lsls	r3, r3, #2
 8014270:	440b      	add	r3, r1
 8014272:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014276:	881b      	ldrh	r3, [r3, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d104      	bne.n	8014286 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801427c:	6839      	ldr	r1, [r7, #0]
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 fb9d 	bl	80149be <USBD_CtlError>
                  break;
 8014284:	e041      	b.n	801430a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801428a:	2b00      	cmp	r3, #0
 801428c:	da0b      	bge.n	80142a6 <USBD_StdEPReq+0x2b2>
 801428e:	7bbb      	ldrb	r3, [r7, #14]
 8014290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014294:	4613      	mov	r3, r2
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	4413      	add	r3, r2
 801429a:	009b      	lsls	r3, r3, #2
 801429c:	3310      	adds	r3, #16
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	4413      	add	r3, r2
 80142a2:	3304      	adds	r3, #4
 80142a4:	e00b      	b.n	80142be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80142a6:	7bbb      	ldrb	r3, [r7, #14]
 80142a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142ac:	4613      	mov	r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	4413      	add	r3, r2
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	4413      	add	r3, r2
 80142bc:	3304      	adds	r3, #4
 80142be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80142c0:	7bbb      	ldrb	r3, [r7, #14]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d002      	beq.n	80142cc <USBD_StdEPReq+0x2d8>
 80142c6:	7bbb      	ldrb	r3, [r7, #14]
 80142c8:	2b80      	cmp	r3, #128	; 0x80
 80142ca:	d103      	bne.n	80142d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	2200      	movs	r2, #0
 80142d0:	601a      	str	r2, [r3, #0]
 80142d2:	e00e      	b.n	80142f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80142d4:	7bbb      	ldrb	r3, [r7, #14]
 80142d6:	4619      	mov	r1, r3
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f011 fa39 	bl	8025750 <USBD_LL_IsStallEP>
 80142de:	4603      	mov	r3, r0
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d003      	beq.n	80142ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	2201      	movs	r2, #1
 80142e8:	601a      	str	r2, [r3, #0]
 80142ea:	e002      	b.n	80142f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	2200      	movs	r2, #0
 80142f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	2202      	movs	r2, #2
 80142f6:	4619      	mov	r1, r3
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f000 fbd1 	bl	8014aa0 <USBD_CtlSendData>
              break;
 80142fe:	e004      	b.n	801430a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014300:	6839      	ldr	r1, [r7, #0]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 fb5b 	bl	80149be <USBD_CtlError>
              break;
 8014308:	bf00      	nop
          }
          break;
 801430a:	e004      	b.n	8014316 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801430c:	6839      	ldr	r1, [r7, #0]
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f000 fb55 	bl	80149be <USBD_CtlError>
          break;
 8014314:	bf00      	nop
      }
      break;
 8014316:	e005      	b.n	8014324 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 fb4f 	bl	80149be <USBD_CtlError>
      break;
 8014320:	e000      	b.n	8014324 <USBD_StdEPReq+0x330>
      break;
 8014322:	bf00      	nop
  }

  return ret;
 8014324:	7bfb      	ldrb	r3, [r7, #15]
}
 8014326:	4618      	mov	r0, r3
 8014328:	3710      	adds	r7, #16
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
	...

08014330 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b084      	sub	sp, #16
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801433a:	2300      	movs	r3, #0
 801433c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801433e:	2300      	movs	r3, #0
 8014340:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014342:	2300      	movs	r3, #0
 8014344:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	885b      	ldrh	r3, [r3, #2]
 801434a:	0a1b      	lsrs	r3, r3, #8
 801434c:	b29b      	uxth	r3, r3
 801434e:	3b01      	subs	r3, #1
 8014350:	2b06      	cmp	r3, #6
 8014352:	f200 8128 	bhi.w	80145a6 <USBD_GetDescriptor+0x276>
 8014356:	a201      	add	r2, pc, #4	; (adr r2, 801435c <USBD_GetDescriptor+0x2c>)
 8014358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801435c:	08014379 	.word	0x08014379
 8014360:	08014391 	.word	0x08014391
 8014364:	080143d1 	.word	0x080143d1
 8014368:	080145a7 	.word	0x080145a7
 801436c:	080145a7 	.word	0x080145a7
 8014370:	08014547 	.word	0x08014547
 8014374:	08014573 	.word	0x08014573
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	7c12      	ldrb	r2, [r2, #16]
 8014384:	f107 0108 	add.w	r1, r7, #8
 8014388:	4610      	mov	r0, r2
 801438a:	4798      	blx	r3
 801438c:	60f8      	str	r0, [r7, #12]
      break;
 801438e:	e112      	b.n	80145b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	7c1b      	ldrb	r3, [r3, #16]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d10d      	bne.n	80143b4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143a0:	f107 0208 	add.w	r2, r7, #8
 80143a4:	4610      	mov	r0, r2
 80143a6:	4798      	blx	r3
 80143a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	3301      	adds	r3, #1
 80143ae:	2202      	movs	r2, #2
 80143b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80143b2:	e100      	b.n	80145b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143bc:	f107 0208 	add.w	r2, r7, #8
 80143c0:	4610      	mov	r0, r2
 80143c2:	4798      	blx	r3
 80143c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	3301      	adds	r3, #1
 80143ca:	2202      	movs	r2, #2
 80143cc:	701a      	strb	r2, [r3, #0]
      break;
 80143ce:	e0f2      	b.n	80145b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	885b      	ldrh	r3, [r3, #2]
 80143d4:	b2db      	uxtb	r3, r3
 80143d6:	2b05      	cmp	r3, #5
 80143d8:	f200 80ac 	bhi.w	8014534 <USBD_GetDescriptor+0x204>
 80143dc:	a201      	add	r2, pc, #4	; (adr r2, 80143e4 <USBD_GetDescriptor+0xb4>)
 80143de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e2:	bf00      	nop
 80143e4:	080143fd 	.word	0x080143fd
 80143e8:	08014431 	.word	0x08014431
 80143ec:	08014465 	.word	0x08014465
 80143f0:	08014499 	.word	0x08014499
 80143f4:	080144cd 	.word	0x080144cd
 80143f8:	08014501 	.word	0x08014501
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d00b      	beq.n	8014420 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	7c12      	ldrb	r2, [r2, #16]
 8014414:	f107 0108 	add.w	r1, r7, #8
 8014418:	4610      	mov	r0, r2
 801441a:	4798      	blx	r3
 801441c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801441e:	e091      	b.n	8014544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014420:	6839      	ldr	r1, [r7, #0]
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f000 facb 	bl	80149be <USBD_CtlError>
            err++;
 8014428:	7afb      	ldrb	r3, [r7, #11]
 801442a:	3301      	adds	r3, #1
 801442c:	72fb      	strb	r3, [r7, #11]
          break;
 801442e:	e089      	b.n	8014544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014436:	689b      	ldr	r3, [r3, #8]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d00b      	beq.n	8014454 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014442:	689b      	ldr	r3, [r3, #8]
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	7c12      	ldrb	r2, [r2, #16]
 8014448:	f107 0108 	add.w	r1, r7, #8
 801444c:	4610      	mov	r0, r2
 801444e:	4798      	blx	r3
 8014450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014452:	e077      	b.n	8014544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014454:	6839      	ldr	r1, [r7, #0]
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f000 fab1 	bl	80149be <USBD_CtlError>
            err++;
 801445c:	7afb      	ldrb	r3, [r7, #11]
 801445e:	3301      	adds	r3, #1
 8014460:	72fb      	strb	r3, [r7, #11]
          break;
 8014462:	e06f      	b.n	8014544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d00b      	beq.n	8014488 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	7c12      	ldrb	r2, [r2, #16]
 801447c:	f107 0108 	add.w	r1, r7, #8
 8014480:	4610      	mov	r0, r2
 8014482:	4798      	blx	r3
 8014484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014486:	e05d      	b.n	8014544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014488:	6839      	ldr	r1, [r7, #0]
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 fa97 	bl	80149be <USBD_CtlError>
            err++;
 8014490:	7afb      	ldrb	r3, [r7, #11]
 8014492:	3301      	adds	r3, #1
 8014494:	72fb      	strb	r3, [r7, #11]
          break;
 8014496:	e055      	b.n	8014544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d00b      	beq.n	80144bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144aa:	691b      	ldr	r3, [r3, #16]
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	7c12      	ldrb	r2, [r2, #16]
 80144b0:	f107 0108 	add.w	r1, r7, #8
 80144b4:	4610      	mov	r0, r2
 80144b6:	4798      	blx	r3
 80144b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144ba:	e043      	b.n	8014544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80144bc:	6839      	ldr	r1, [r7, #0]
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f000 fa7d 	bl	80149be <USBD_CtlError>
            err++;
 80144c4:	7afb      	ldrb	r3, [r7, #11]
 80144c6:	3301      	adds	r3, #1
 80144c8:	72fb      	strb	r3, [r7, #11]
          break;
 80144ca:	e03b      	b.n	8014544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144d2:	695b      	ldr	r3, [r3, #20]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00b      	beq.n	80144f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144de:	695b      	ldr	r3, [r3, #20]
 80144e0:	687a      	ldr	r2, [r7, #4]
 80144e2:	7c12      	ldrb	r2, [r2, #16]
 80144e4:	f107 0108 	add.w	r1, r7, #8
 80144e8:	4610      	mov	r0, r2
 80144ea:	4798      	blx	r3
 80144ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144ee:	e029      	b.n	8014544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80144f0:	6839      	ldr	r1, [r7, #0]
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f000 fa63 	bl	80149be <USBD_CtlError>
            err++;
 80144f8:	7afb      	ldrb	r3, [r7, #11]
 80144fa:	3301      	adds	r3, #1
 80144fc:	72fb      	strb	r3, [r7, #11]
          break;
 80144fe:	e021      	b.n	8014544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014506:	699b      	ldr	r3, [r3, #24]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d00b      	beq.n	8014524 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014512:	699b      	ldr	r3, [r3, #24]
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	7c12      	ldrb	r2, [r2, #16]
 8014518:	f107 0108 	add.w	r1, r7, #8
 801451c:	4610      	mov	r0, r2
 801451e:	4798      	blx	r3
 8014520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014522:	e00f      	b.n	8014544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014524:	6839      	ldr	r1, [r7, #0]
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f000 fa49 	bl	80149be <USBD_CtlError>
            err++;
 801452c:	7afb      	ldrb	r3, [r7, #11]
 801452e:	3301      	adds	r3, #1
 8014530:	72fb      	strb	r3, [r7, #11]
          break;
 8014532:	e007      	b.n	8014544 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 fa41 	bl	80149be <USBD_CtlError>
          err++;
 801453c:	7afb      	ldrb	r3, [r7, #11]
 801453e:	3301      	adds	r3, #1
 8014540:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014542:	bf00      	nop
      }
      break;
 8014544:	e037      	b.n	80145b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	7c1b      	ldrb	r3, [r3, #16]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d109      	bne.n	8014562 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014556:	f107 0208 	add.w	r2, r7, #8
 801455a:	4610      	mov	r0, r2
 801455c:	4798      	blx	r3
 801455e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014560:	e029      	b.n	80145b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014562:	6839      	ldr	r1, [r7, #0]
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f000 fa2a 	bl	80149be <USBD_CtlError>
        err++;
 801456a:	7afb      	ldrb	r3, [r7, #11]
 801456c:	3301      	adds	r3, #1
 801456e:	72fb      	strb	r3, [r7, #11]
      break;
 8014570:	e021      	b.n	80145b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	7c1b      	ldrb	r3, [r3, #16]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d10d      	bne.n	8014596 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014582:	f107 0208 	add.w	r2, r7, #8
 8014586:	4610      	mov	r0, r2
 8014588:	4798      	blx	r3
 801458a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	3301      	adds	r3, #1
 8014590:	2207      	movs	r2, #7
 8014592:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014594:	e00f      	b.n	80145b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014596:	6839      	ldr	r1, [r7, #0]
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f000 fa10 	bl	80149be <USBD_CtlError>
        err++;
 801459e:	7afb      	ldrb	r3, [r7, #11]
 80145a0:	3301      	adds	r3, #1
 80145a2:	72fb      	strb	r3, [r7, #11]
      break;
 80145a4:	e007      	b.n	80145b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80145a6:	6839      	ldr	r1, [r7, #0]
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f000 fa08 	bl	80149be <USBD_CtlError>
      err++;
 80145ae:	7afb      	ldrb	r3, [r7, #11]
 80145b0:	3301      	adds	r3, #1
 80145b2:	72fb      	strb	r3, [r7, #11]
      break;
 80145b4:	bf00      	nop
  }

  if (err != 0U)
 80145b6:	7afb      	ldrb	r3, [r7, #11]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d11e      	bne.n	80145fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	88db      	ldrh	r3, [r3, #6]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d016      	beq.n	80145f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80145c4:	893b      	ldrh	r3, [r7, #8]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d00e      	beq.n	80145e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	88da      	ldrh	r2, [r3, #6]
 80145ce:	893b      	ldrh	r3, [r7, #8]
 80145d0:	4293      	cmp	r3, r2
 80145d2:	bf28      	it	cs
 80145d4:	4613      	movcs	r3, r2
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80145da:	893b      	ldrh	r3, [r7, #8]
 80145dc:	461a      	mov	r2, r3
 80145de:	68f9      	ldr	r1, [r7, #12]
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f000 fa5d 	bl	8014aa0 <USBD_CtlSendData>
 80145e6:	e009      	b.n	80145fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80145e8:	6839      	ldr	r1, [r7, #0]
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 f9e7 	bl	80149be <USBD_CtlError>
 80145f0:	e004      	b.n	80145fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 faae 	bl	8014b54 <USBD_CtlSendStatus>
 80145f8:	e000      	b.n	80145fc <USBD_GetDescriptor+0x2cc>
    return;
 80145fa:	bf00      	nop
  }
}
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop

08014604 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b084      	sub	sp, #16
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	889b      	ldrh	r3, [r3, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d131      	bne.n	801467a <USBD_SetAddress+0x76>
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	88db      	ldrh	r3, [r3, #6]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d12d      	bne.n	801467a <USBD_SetAddress+0x76>
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	885b      	ldrh	r3, [r3, #2]
 8014622:	2b7f      	cmp	r3, #127	; 0x7f
 8014624:	d829      	bhi.n	801467a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	885b      	ldrh	r3, [r3, #2]
 801462a:	b2db      	uxtb	r3, r3
 801462c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014630:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014638:	b2db      	uxtb	r3, r3
 801463a:	2b03      	cmp	r3, #3
 801463c:	d104      	bne.n	8014648 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801463e:	6839      	ldr	r1, [r7, #0]
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f000 f9bc 	bl	80149be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014646:	e01d      	b.n	8014684 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	7bfa      	ldrb	r2, [r7, #15]
 801464c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014650:	7bfb      	ldrb	r3, [r7, #15]
 8014652:	4619      	mov	r1, r3
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f011 f8a7 	bl	80257a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f000 fa7a 	bl	8014b54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014660:	7bfb      	ldrb	r3, [r7, #15]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d004      	beq.n	8014670 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2202      	movs	r2, #2
 801466a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801466e:	e009      	b.n	8014684 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2201      	movs	r2, #1
 8014674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014678:	e004      	b.n	8014684 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801467a:	6839      	ldr	r1, [r7, #0]
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f000 f99e 	bl	80149be <USBD_CtlError>
  }
}
 8014682:	bf00      	nop
 8014684:	bf00      	nop
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014696:	2300      	movs	r3, #0
 8014698:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	885b      	ldrh	r3, [r3, #2]
 801469e:	b2da      	uxtb	r2, r3
 80146a0:	4b4e      	ldr	r3, [pc, #312]	; (80147dc <USBD_SetConfig+0x150>)
 80146a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80146a4:	4b4d      	ldr	r3, [pc, #308]	; (80147dc <USBD_SetConfig+0x150>)
 80146a6:	781b      	ldrb	r3, [r3, #0]
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d905      	bls.n	80146b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80146ac:	6839      	ldr	r1, [r7, #0]
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f000 f985 	bl	80149be <USBD_CtlError>
    return USBD_FAIL;
 80146b4:	2303      	movs	r3, #3
 80146b6:	e08c      	b.n	80147d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146be:	b2db      	uxtb	r3, r3
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d002      	beq.n	80146ca <USBD_SetConfig+0x3e>
 80146c4:	2b03      	cmp	r3, #3
 80146c6:	d029      	beq.n	801471c <USBD_SetConfig+0x90>
 80146c8:	e075      	b.n	80147b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80146ca:	4b44      	ldr	r3, [pc, #272]	; (80147dc <USBD_SetConfig+0x150>)
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d020      	beq.n	8014714 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80146d2:	4b42      	ldr	r3, [pc, #264]	; (80147dc <USBD_SetConfig+0x150>)
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	461a      	mov	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80146dc:	4b3f      	ldr	r3, [pc, #252]	; (80147dc <USBD_SetConfig+0x150>)
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	4619      	mov	r1, r3
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f7fe ffe1 	bl	80136aa <USBD_SetClassConfig>
 80146e8:	4603      	mov	r3, r0
 80146ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80146ec:	7bfb      	ldrb	r3, [r7, #15]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d008      	beq.n	8014704 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80146f2:	6839      	ldr	r1, [r7, #0]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f000 f962 	bl	80149be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2202      	movs	r2, #2
 80146fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014702:	e065      	b.n	80147d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f000 fa25 	bl	8014b54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2203      	movs	r2, #3
 801470e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014712:	e05d      	b.n	80147d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f000 fa1d 	bl	8014b54 <USBD_CtlSendStatus>
      break;
 801471a:	e059      	b.n	80147d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801471c:	4b2f      	ldr	r3, [pc, #188]	; (80147dc <USBD_SetConfig+0x150>)
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d112      	bne.n	801474a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2202      	movs	r2, #2
 8014728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801472c:	4b2b      	ldr	r3, [pc, #172]	; (80147dc <USBD_SetConfig+0x150>)
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	461a      	mov	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014736:	4b29      	ldr	r3, [pc, #164]	; (80147dc <USBD_SetConfig+0x150>)
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	4619      	mov	r1, r3
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f7fe ffd0 	bl	80136e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 fa06 	bl	8014b54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014748:	e042      	b.n	80147d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801474a:	4b24      	ldr	r3, [pc, #144]	; (80147dc <USBD_SetConfig+0x150>)
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	461a      	mov	r2, r3
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	429a      	cmp	r2, r3
 8014756:	d02a      	beq.n	80147ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	685b      	ldr	r3, [r3, #4]
 801475c:	b2db      	uxtb	r3, r3
 801475e:	4619      	mov	r1, r3
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7fe ffbe 	bl	80136e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014766:	4b1d      	ldr	r3, [pc, #116]	; (80147dc <USBD_SetConfig+0x150>)
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	461a      	mov	r2, r3
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014770:	4b1a      	ldr	r3, [pc, #104]	; (80147dc <USBD_SetConfig+0x150>)
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	4619      	mov	r1, r3
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f7fe ff97 	bl	80136aa <USBD_SetClassConfig>
 801477c:	4603      	mov	r3, r0
 801477e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014780:	7bfb      	ldrb	r3, [r7, #15]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d00f      	beq.n	80147a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014786:	6839      	ldr	r1, [r7, #0]
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f000 f918 	bl	80149be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	b2db      	uxtb	r3, r3
 8014794:	4619      	mov	r1, r3
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f7fe ffa3 	bl	80136e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2202      	movs	r2, #2
 80147a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80147a4:	e014      	b.n	80147d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f000 f9d4 	bl	8014b54 <USBD_CtlSendStatus>
      break;
 80147ac:	e010      	b.n	80147d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 f9d0 	bl	8014b54 <USBD_CtlSendStatus>
      break;
 80147b4:	e00c      	b.n	80147d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 f900 	bl	80149be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80147be:	4b07      	ldr	r3, [pc, #28]	; (80147dc <USBD_SetConfig+0x150>)
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	4619      	mov	r1, r3
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f7fe ff8c 	bl	80136e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80147ca:	2303      	movs	r3, #3
 80147cc:	73fb      	strb	r3, [r7, #15]
      break;
 80147ce:	bf00      	nop
  }

  return ret;
 80147d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3710      	adds	r7, #16
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	240054ac 	.word	0x240054ac

080147e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	88db      	ldrh	r3, [r3, #6]
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d004      	beq.n	80147fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80147f2:	6839      	ldr	r1, [r7, #0]
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f000 f8e2 	bl	80149be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80147fa:	e023      	b.n	8014844 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014802:	b2db      	uxtb	r3, r3
 8014804:	2b02      	cmp	r3, #2
 8014806:	dc02      	bgt.n	801480e <USBD_GetConfig+0x2e>
 8014808:	2b00      	cmp	r3, #0
 801480a:	dc03      	bgt.n	8014814 <USBD_GetConfig+0x34>
 801480c:	e015      	b.n	801483a <USBD_GetConfig+0x5a>
 801480e:	2b03      	cmp	r3, #3
 8014810:	d00b      	beq.n	801482a <USBD_GetConfig+0x4a>
 8014812:	e012      	b.n	801483a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2200      	movs	r2, #0
 8014818:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	3308      	adds	r3, #8
 801481e:	2201      	movs	r2, #1
 8014820:	4619      	mov	r1, r3
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 f93c 	bl	8014aa0 <USBD_CtlSendData>
        break;
 8014828:	e00c      	b.n	8014844 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	3304      	adds	r3, #4
 801482e:	2201      	movs	r2, #1
 8014830:	4619      	mov	r1, r3
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	f000 f934 	bl	8014aa0 <USBD_CtlSendData>
        break;
 8014838:	e004      	b.n	8014844 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801483a:	6839      	ldr	r1, [r7, #0]
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f000 f8be 	bl	80149be <USBD_CtlError>
        break;
 8014842:	bf00      	nop
}
 8014844:	bf00      	nop
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801485c:	b2db      	uxtb	r3, r3
 801485e:	3b01      	subs	r3, #1
 8014860:	2b02      	cmp	r3, #2
 8014862:	d81e      	bhi.n	80148a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	88db      	ldrh	r3, [r3, #6]
 8014868:	2b02      	cmp	r3, #2
 801486a:	d004      	beq.n	8014876 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801486c:	6839      	ldr	r1, [r7, #0]
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f000 f8a5 	bl	80149be <USBD_CtlError>
        break;
 8014874:	e01a      	b.n	80148ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2201      	movs	r2, #1
 801487a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014882:	2b00      	cmp	r3, #0
 8014884:	d005      	beq.n	8014892 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	68db      	ldr	r3, [r3, #12]
 801488a:	f043 0202 	orr.w	r2, r3, #2
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	330c      	adds	r3, #12
 8014896:	2202      	movs	r2, #2
 8014898:	4619      	mov	r1, r3
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 f900 	bl	8014aa0 <USBD_CtlSendData>
      break;
 80148a0:	e004      	b.n	80148ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80148a2:	6839      	ldr	r1, [r7, #0]
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f000 f88a 	bl	80149be <USBD_CtlError>
      break;
 80148aa:	bf00      	nop
  }
}
 80148ac:	bf00      	nop
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	885b      	ldrh	r3, [r3, #2]
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	d107      	bne.n	80148d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2201      	movs	r2, #1
 80148ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f000 f940 	bl	8014b54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80148d4:	e013      	b.n	80148fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	885b      	ldrh	r3, [r3, #2]
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d10b      	bne.n	80148f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	889b      	ldrh	r3, [r3, #4]
 80148e2:	0a1b      	lsrs	r3, r3, #8
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	b2da      	uxtb	r2, r3
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	f000 f930 	bl	8014b54 <USBD_CtlSendStatus>
}
 80148f4:	e003      	b.n	80148fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80148f6:	6839      	ldr	r1, [r7, #0]
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f000 f860 	bl	80149be <USBD_CtlError>
}
 80148fe:	bf00      	nop
 8014900:	3708      	adds	r7, #8
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}

08014906 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014906:	b580      	push	{r7, lr}
 8014908:	b082      	sub	sp, #8
 801490a:	af00      	add	r7, sp, #0
 801490c:	6078      	str	r0, [r7, #4]
 801490e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014916:	b2db      	uxtb	r3, r3
 8014918:	3b01      	subs	r3, #1
 801491a:	2b02      	cmp	r3, #2
 801491c:	d80b      	bhi.n	8014936 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	885b      	ldrh	r3, [r3, #2]
 8014922:	2b01      	cmp	r3, #1
 8014924:	d10c      	bne.n	8014940 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2200      	movs	r2, #0
 801492a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 f910 	bl	8014b54 <USBD_CtlSendStatus>
      }
      break;
 8014934:	e004      	b.n	8014940 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014936:	6839      	ldr	r1, [r7, #0]
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f000 f840 	bl	80149be <USBD_CtlError>
      break;
 801493e:	e000      	b.n	8014942 <USBD_ClrFeature+0x3c>
      break;
 8014940:	bf00      	nop
  }
}
 8014942:	bf00      	nop
 8014944:	3708      	adds	r7, #8
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}

0801494a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801494a:	b580      	push	{r7, lr}
 801494c:	b084      	sub	sp, #16
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
 8014952:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	781a      	ldrb	r2, [r3, #0]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	3301      	adds	r3, #1
 8014964:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	781a      	ldrb	r2, [r3, #0]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	3301      	adds	r3, #1
 8014972:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014974:	68f8      	ldr	r0, [r7, #12]
 8014976:	f7ff fa41 	bl	8013dfc <SWAPBYTE>
 801497a:	4603      	mov	r3, r0
 801497c:	461a      	mov	r2, r3
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	3301      	adds	r3, #1
 8014986:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	3301      	adds	r3, #1
 801498c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801498e:	68f8      	ldr	r0, [r7, #12]
 8014990:	f7ff fa34 	bl	8013dfc <SWAPBYTE>
 8014994:	4603      	mov	r3, r0
 8014996:	461a      	mov	r2, r3
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	3301      	adds	r3, #1
 80149a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	3301      	adds	r3, #1
 80149a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f7ff fa27 	bl	8013dfc <SWAPBYTE>
 80149ae:	4603      	mov	r3, r0
 80149b0:	461a      	mov	r2, r3
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	80da      	strh	r2, [r3, #6]
}
 80149b6:	bf00      	nop
 80149b8:	3710      	adds	r7, #16
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}

080149be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149be:	b580      	push	{r7, lr}
 80149c0:	b082      	sub	sp, #8
 80149c2:	af00      	add	r7, sp, #0
 80149c4:	6078      	str	r0, [r7, #4]
 80149c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80149c8:	2180      	movs	r1, #128	; 0x80
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f010 fe82 	bl	80256d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80149d0:	2100      	movs	r1, #0
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f010 fe7e 	bl	80256d4 <USBD_LL_StallEP>
}
 80149d8:	bf00      	nop
 80149da:	3708      	adds	r7, #8
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}

080149e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b086      	sub	sp, #24
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80149ec:	2300      	movs	r3, #0
 80149ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d036      	beq.n	8014a64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80149fa:	6938      	ldr	r0, [r7, #16]
 80149fc:	f000 f836 	bl	8014a6c <USBD_GetLen>
 8014a00:	4603      	mov	r3, r0
 8014a02:	3301      	adds	r3, #1
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014a0e:	7dfb      	ldrb	r3, [r7, #23]
 8014a10:	68ba      	ldr	r2, [r7, #8]
 8014a12:	4413      	add	r3, r2
 8014a14:	687a      	ldr	r2, [r7, #4]
 8014a16:	7812      	ldrb	r2, [r2, #0]
 8014a18:	701a      	strb	r2, [r3, #0]
  idx++;
 8014a1a:	7dfb      	ldrb	r3, [r7, #23]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014a20:	7dfb      	ldrb	r3, [r7, #23]
 8014a22:	68ba      	ldr	r2, [r7, #8]
 8014a24:	4413      	add	r3, r2
 8014a26:	2203      	movs	r2, #3
 8014a28:	701a      	strb	r2, [r3, #0]
  idx++;
 8014a2a:	7dfb      	ldrb	r3, [r7, #23]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014a30:	e013      	b.n	8014a5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014a32:	7dfb      	ldrb	r3, [r7, #23]
 8014a34:	68ba      	ldr	r2, [r7, #8]
 8014a36:	4413      	add	r3, r2
 8014a38:	693a      	ldr	r2, [r7, #16]
 8014a3a:	7812      	ldrb	r2, [r2, #0]
 8014a3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014a3e:	693b      	ldr	r3, [r7, #16]
 8014a40:	3301      	adds	r3, #1
 8014a42:	613b      	str	r3, [r7, #16]
    idx++;
 8014a44:	7dfb      	ldrb	r3, [r7, #23]
 8014a46:	3301      	adds	r3, #1
 8014a48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014a4a:	7dfb      	ldrb	r3, [r7, #23]
 8014a4c:	68ba      	ldr	r2, [r7, #8]
 8014a4e:	4413      	add	r3, r2
 8014a50:	2200      	movs	r2, #0
 8014a52:	701a      	strb	r2, [r3, #0]
    idx++;
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
 8014a56:	3301      	adds	r3, #1
 8014a58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1e7      	bne.n	8014a32 <USBD_GetString+0x52>
 8014a62:	e000      	b.n	8014a66 <USBD_GetString+0x86>
    return;
 8014a64:	bf00      	nop
  }
}
 8014a66:	3718      	adds	r7, #24
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014a74:	2300      	movs	r3, #0
 8014a76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014a7c:	e005      	b.n	8014a8a <USBD_GetLen+0x1e>
  {
    len++;
 8014a7e:	7bfb      	ldrb	r3, [r7, #15]
 8014a80:	3301      	adds	r3, #1
 8014a82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	3301      	adds	r3, #1
 8014a88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d1f5      	bne.n	8014a7e <USBD_GetLen+0x12>
  }

  return len;
 8014a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3714      	adds	r7, #20
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr

08014aa0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	60f8      	str	r0, [r7, #12]
 8014aa8:	60b9      	str	r1, [r7, #8]
 8014aaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2202      	movs	r2, #2
 8014ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	68ba      	ldr	r2, [r7, #8]
 8014ac4:	2100      	movs	r1, #0
 8014ac6:	68f8      	ldr	r0, [r7, #12]
 8014ac8:	f010 fe8d 	bl	80257e6 <USBD_LL_Transmit>

  return USBD_OK;
 8014acc:	2300      	movs	r3, #0
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3710      	adds	r7, #16
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}

08014ad6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014ad6:	b580      	push	{r7, lr}
 8014ad8:	b084      	sub	sp, #16
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	60f8      	str	r0, [r7, #12]
 8014ade:	60b9      	str	r1, [r7, #8]
 8014ae0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	68ba      	ldr	r2, [r7, #8]
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	68f8      	ldr	r0, [r7, #12]
 8014aea:	f010 fe7c 	bl	80257e6 <USBD_LL_Transmit>

  return USBD_OK;
 8014aee:	2300      	movs	r3, #0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3710      	adds	r7, #16
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	60b9      	str	r1, [r7, #8]
 8014b02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	2203      	movs	r2, #3
 8014b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	687a      	ldr	r2, [r7, #4]
 8014b10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	2100      	movs	r1, #0
 8014b22:	68f8      	ldr	r0, [r7, #12]
 8014b24:	f010 fe80 	bl	8025828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b28:	2300      	movs	r3, #0
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b084      	sub	sp, #16
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	60f8      	str	r0, [r7, #12]
 8014b3a:	60b9      	str	r1, [r7, #8]
 8014b3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	68ba      	ldr	r2, [r7, #8]
 8014b42:	2100      	movs	r1, #0
 8014b44:	68f8      	ldr	r0, [r7, #12]
 8014b46:	f010 fe6f 	bl	8025828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b4a:	2300      	movs	r3, #0
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3710      	adds	r7, #16
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}

08014b54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2204      	movs	r2, #4
 8014b60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014b64:	2300      	movs	r3, #0
 8014b66:	2200      	movs	r2, #0
 8014b68:	2100      	movs	r1, #0
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f010 fe3b 	bl	80257e6 <USBD_LL_Transmit>

  return USBD_OK;
 8014b70:	2300      	movs	r3, #0
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3708      	adds	r7, #8
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}

08014b7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014b7a:	b580      	push	{r7, lr}
 8014b7c:	b082      	sub	sp, #8
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2205      	movs	r2, #5
 8014b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	2100      	movs	r1, #0
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f010 fe49 	bl	8025828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b96:	2300      	movs	r3, #0
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b087      	sub	sp, #28
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	4613      	mov	r3, r2
 8014bac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014bae:	2301      	movs	r3, #1
 8014bb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014bb6:	4b1f      	ldr	r3, [pc, #124]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014bb8:	7a5b      	ldrb	r3, [r3, #9]
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d131      	bne.n	8014c24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014bc0:	4b1c      	ldr	r3, [pc, #112]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014bc2:	7a5b      	ldrb	r3, [r3, #9]
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	4b1a      	ldr	r3, [pc, #104]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014bca:	2100      	movs	r1, #0
 8014bcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014bce:	4b19      	ldr	r3, [pc, #100]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014bd0:	7a5b      	ldrb	r3, [r3, #9]
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	4a17      	ldr	r2, [pc, #92]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014bd6:	009b      	lsls	r3, r3, #2
 8014bd8:	4413      	add	r3, r2
 8014bda:	68fa      	ldr	r2, [r7, #12]
 8014bdc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014bde:	4b15      	ldr	r3, [pc, #84]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014be0:	7a5b      	ldrb	r3, [r3, #9]
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	461a      	mov	r2, r3
 8014be6:	4b13      	ldr	r3, [pc, #76]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014be8:	4413      	add	r3, r2
 8014bea:	79fa      	ldrb	r2, [r7, #7]
 8014bec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014bee:	4b11      	ldr	r3, [pc, #68]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014bf0:	7a5b      	ldrb	r3, [r3, #9]
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	1c5a      	adds	r2, r3, #1
 8014bf6:	b2d1      	uxtb	r1, r2
 8014bf8:	4a0e      	ldr	r2, [pc, #56]	; (8014c34 <FATFS_LinkDriverEx+0x94>)
 8014bfa:	7251      	strb	r1, [r2, #9]
 8014bfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014bfe:	7dbb      	ldrb	r3, [r7, #22]
 8014c00:	3330      	adds	r3, #48	; 0x30
 8014c02:	b2da      	uxtb	r2, r3
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	223a      	movs	r2, #58	; 0x3a
 8014c0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	3302      	adds	r3, #2
 8014c14:	222f      	movs	r2, #47	; 0x2f
 8014c16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	3303      	adds	r3, #3
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014c20:	2300      	movs	r3, #0
 8014c22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	371c      	adds	r7, #28
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	240054b0 	.word	0x240054b0

08014c38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014c42:	2200      	movs	r2, #0
 8014c44:	6839      	ldr	r1, [r7, #0]
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f7ff ffaa 	bl	8014ba0 <FATFS_LinkDriverEx>
 8014c4c:	4603      	mov	r3, r0
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3708      	adds	r7, #8
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
	...

08014c58 <__NVIC_SetPriority>:
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b083      	sub	sp, #12
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	4603      	mov	r3, r0
 8014c60:	6039      	str	r1, [r7, #0]
 8014c62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	db0a      	blt.n	8014c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	b2da      	uxtb	r2, r3
 8014c70:	490c      	ldr	r1, [pc, #48]	; (8014ca4 <__NVIC_SetPriority+0x4c>)
 8014c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c76:	0112      	lsls	r2, r2, #4
 8014c78:	b2d2      	uxtb	r2, r2
 8014c7a:	440b      	add	r3, r1
 8014c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014c80:	e00a      	b.n	8014c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	b2da      	uxtb	r2, r3
 8014c86:	4908      	ldr	r1, [pc, #32]	; (8014ca8 <__NVIC_SetPriority+0x50>)
 8014c88:	88fb      	ldrh	r3, [r7, #6]
 8014c8a:	f003 030f 	and.w	r3, r3, #15
 8014c8e:	3b04      	subs	r3, #4
 8014c90:	0112      	lsls	r2, r2, #4
 8014c92:	b2d2      	uxtb	r2, r2
 8014c94:	440b      	add	r3, r1
 8014c96:	761a      	strb	r2, [r3, #24]
}
 8014c98:	bf00      	nop
 8014c9a:	370c      	adds	r7, #12
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr
 8014ca4:	e000e100 	.word	0xe000e100
 8014ca8:	e000ed00 	.word	0xe000ed00

08014cac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014cac:	b580      	push	{r7, lr}
 8014cae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014cb0:	4b05      	ldr	r3, [pc, #20]	; (8014cc8 <SysTick_Handler+0x1c>)
 8014cb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014cb4:	f002 fcb8 	bl	8017628 <xTaskGetSchedulerState>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	2b01      	cmp	r3, #1
 8014cbc:	d001      	beq.n	8014cc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014cbe:	f003 fb9b 	bl	80183f8 <xPortSysTickHandler>
  }
}
 8014cc2:	bf00      	nop
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop
 8014cc8:	e000e010 	.word	0xe000e010

08014ccc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	f06f 0004 	mvn.w	r0, #4
 8014cd6:	f7ff ffbf 	bl	8014c58 <__NVIC_SetPriority>
#endif
}
 8014cda:	bf00      	nop
 8014cdc:	bd80      	pop	{r7, pc}
	...

08014ce0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014ce0:	b480      	push	{r7}
 8014ce2:	b083      	sub	sp, #12
 8014ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ce6:	f3ef 8305 	mrs	r3, IPSR
 8014cea:	603b      	str	r3, [r7, #0]
  return(result);
 8014cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d003      	beq.n	8014cfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014cf2:	f06f 0305 	mvn.w	r3, #5
 8014cf6:	607b      	str	r3, [r7, #4]
 8014cf8:	e00c      	b.n	8014d14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014cfa:	4b0a      	ldr	r3, [pc, #40]	; (8014d24 <osKernelInitialize+0x44>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d105      	bne.n	8014d0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014d02:	4b08      	ldr	r3, [pc, #32]	; (8014d24 <osKernelInitialize+0x44>)
 8014d04:	2201      	movs	r2, #1
 8014d06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	607b      	str	r3, [r7, #4]
 8014d0c:	e002      	b.n	8014d14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014d14:	687b      	ldr	r3, [r7, #4]
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr
 8014d22:	bf00      	nop
 8014d24:	240054bc 	.word	0x240054bc

08014d28 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8014d2e:	f002 fc7b 	bl	8017628 <xTaskGetSchedulerState>
 8014d32:	4603      	mov	r3, r0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d004      	beq.n	8014d42 <osKernelGetState+0x1a>
 8014d38:	2b02      	cmp	r3, #2
 8014d3a:	d105      	bne.n	8014d48 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8014d3c:	2302      	movs	r3, #2
 8014d3e:	607b      	str	r3, [r7, #4]
      break;
 8014d40:	e00c      	b.n	8014d5c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8014d42:	2303      	movs	r3, #3
 8014d44:	607b      	str	r3, [r7, #4]
      break;
 8014d46:	e009      	b.n	8014d5c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8014d48:	4b07      	ldr	r3, [pc, #28]	; (8014d68 <osKernelGetState+0x40>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d102      	bne.n	8014d56 <osKernelGetState+0x2e>
        state = osKernelReady;
 8014d50:	2301      	movs	r3, #1
 8014d52:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8014d54:	e001      	b.n	8014d5a <osKernelGetState+0x32>
        state = osKernelInactive;
 8014d56:	2300      	movs	r3, #0
 8014d58:	607b      	str	r3, [r7, #4]
      break;
 8014d5a:	bf00      	nop
  }

  return (state);
 8014d5c:	687b      	ldr	r3, [r7, #4]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3708      	adds	r7, #8
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	240054bc 	.word	0x240054bc

08014d6c <osKernelStart>:

osStatus_t osKernelStart (void) {
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d72:	f3ef 8305 	mrs	r3, IPSR
 8014d76:	603b      	str	r3, [r7, #0]
  return(result);
 8014d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d003      	beq.n	8014d86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8014d7e:	f06f 0305 	mvn.w	r3, #5
 8014d82:	607b      	str	r3, [r7, #4]
 8014d84:	e010      	b.n	8014da8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014d86:	4b0b      	ldr	r3, [pc, #44]	; (8014db4 <osKernelStart+0x48>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	d109      	bne.n	8014da2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014d8e:	f7ff ff9d 	bl	8014ccc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014d92:	4b08      	ldr	r3, [pc, #32]	; (8014db4 <osKernelStart+0x48>)
 8014d94:	2202      	movs	r2, #2
 8014d96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014d98:	f001 ffc8 	bl	8016d2c <vTaskStartScheduler>
      stat = osOK;
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	607b      	str	r3, [r7, #4]
 8014da0:	e002      	b.n	8014da8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014da2:	f04f 33ff 	mov.w	r3, #4294967295
 8014da6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014da8:	687b      	ldr	r3, [r7, #4]
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3708      	adds	r7, #8
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	240054bc 	.word	0x240054bc

08014db8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014dbe:	f3ef 8305 	mrs	r3, IPSR
 8014dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8014dc4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d003      	beq.n	8014dd2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8014dca:	f002 f8db 	bl	8016f84 <xTaskGetTickCountFromISR>
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	e002      	b.n	8014dd8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8014dd2:	f002 f8c7 	bl	8016f64 <xTaskGetTickCount>
 8014dd6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8014dd8:	687b      	ldr	r3, [r7, #4]
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3708      	adds	r7, #8
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014de2:	b580      	push	{r7, lr}
 8014de4:	b08e      	sub	sp, #56	; 0x38
 8014de6:	af04      	add	r7, sp, #16
 8014de8:	60f8      	str	r0, [r7, #12]
 8014dea:	60b9      	str	r1, [r7, #8]
 8014dec:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014dee:	2300      	movs	r3, #0
 8014df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014df2:	f3ef 8305 	mrs	r3, IPSR
 8014df6:	617b      	str	r3, [r7, #20]
  return(result);
 8014df8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d17e      	bne.n	8014efc <osThreadNew+0x11a>
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d07b      	beq.n	8014efc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014e04:	2380      	movs	r3, #128	; 0x80
 8014e06:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014e08:	2318      	movs	r3, #24
 8014e0a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014e10:	f04f 33ff 	mov.w	r3, #4294967295
 8014e14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d045      	beq.n	8014ea8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d002      	beq.n	8014e2a <osThreadNew+0x48>
        name = attr->name;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	699b      	ldr	r3, [r3, #24]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d002      	beq.n	8014e38 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	699b      	ldr	r3, [r3, #24]
 8014e36:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014e38:	69fb      	ldr	r3, [r7, #28]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d008      	beq.n	8014e50 <osThreadNew+0x6e>
 8014e3e:	69fb      	ldr	r3, [r7, #28]
 8014e40:	2b38      	cmp	r3, #56	; 0x38
 8014e42:	d805      	bhi.n	8014e50 <osThreadNew+0x6e>
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	685b      	ldr	r3, [r3, #4]
 8014e48:	f003 0301 	and.w	r3, r3, #1
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d001      	beq.n	8014e54 <osThreadNew+0x72>
        return (NULL);
 8014e50:	2300      	movs	r3, #0
 8014e52:	e054      	b.n	8014efe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	695b      	ldr	r3, [r3, #20]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d003      	beq.n	8014e64 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	695b      	ldr	r3, [r3, #20]
 8014e60:	089b      	lsrs	r3, r3, #2
 8014e62:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	689b      	ldr	r3, [r3, #8]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00e      	beq.n	8014e8a <osThreadNew+0xa8>
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	68db      	ldr	r3, [r3, #12]
 8014e70:	2bbb      	cmp	r3, #187	; 0xbb
 8014e72:	d90a      	bls.n	8014e8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d006      	beq.n	8014e8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	695b      	ldr	r3, [r3, #20]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d002      	beq.n	8014e8a <osThreadNew+0xa8>
        mem = 1;
 8014e84:	2301      	movs	r3, #1
 8014e86:	61bb      	str	r3, [r7, #24]
 8014e88:	e010      	b.n	8014eac <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	689b      	ldr	r3, [r3, #8]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d10c      	bne.n	8014eac <osThreadNew+0xca>
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	68db      	ldr	r3, [r3, #12]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d108      	bne.n	8014eac <osThreadNew+0xca>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	691b      	ldr	r3, [r3, #16]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d104      	bne.n	8014eac <osThreadNew+0xca>
          mem = 0;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	61bb      	str	r3, [r7, #24]
 8014ea6:	e001      	b.n	8014eac <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014eac:	69bb      	ldr	r3, [r7, #24]
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d110      	bne.n	8014ed4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014eb6:	687a      	ldr	r2, [r7, #4]
 8014eb8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014eba:	9202      	str	r2, [sp, #8]
 8014ebc:	9301      	str	r3, [sp, #4]
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	6a3a      	ldr	r2, [r7, #32]
 8014ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f001 fd43 	bl	8016954 <xTaskCreateStatic>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	613b      	str	r3, [r7, #16]
 8014ed2:	e013      	b.n	8014efc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d110      	bne.n	8014efc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014eda:	6a3b      	ldr	r3, [r7, #32]
 8014edc:	b29a      	uxth	r2, r3
 8014ede:	f107 0310 	add.w	r3, r7, #16
 8014ee2:	9301      	str	r3, [sp, #4]
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	9300      	str	r3, [sp, #0]
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f001 fd8e 	bl	8016a0e <xTaskCreate>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d001      	beq.n	8014efc <osThreadNew+0x11a>
            hTask = NULL;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014efc:	693b      	ldr	r3, [r7, #16]
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3728      	adds	r7, #40	; 0x28
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b084      	sub	sp, #16
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f0e:	f3ef 8305 	mrs	r3, IPSR
 8014f12:	60bb      	str	r3, [r7, #8]
  return(result);
 8014f14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d003      	beq.n	8014f22 <osDelay+0x1c>
    stat = osErrorISR;
 8014f1a:	f06f 0305 	mvn.w	r3, #5
 8014f1e:	60fb      	str	r3, [r7, #12]
 8014f20:	e007      	b.n	8014f32 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014f22:	2300      	movs	r3, #0
 8014f24:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d002      	beq.n	8014f32 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f001 fec9 	bl	8016cc4 <vTaskDelay>
    }
  }

  return (stat);
 8014f32:	68fb      	ldr	r3, [r7, #12]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3710      	adds	r7, #16
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b088      	sub	sp, #32
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8014f44:	2300      	movs	r3, #0
 8014f46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f48:	f3ef 8305 	mrs	r3, IPSR
 8014f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8014f4e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d174      	bne.n	801503e <osMutexNew+0x102>
    if (attr != NULL) {
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d003      	beq.n	8014f62 <osMutexNew+0x26>
      type = attr->attr_bits;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	61bb      	str	r3, [r7, #24]
 8014f60:	e001      	b.n	8014f66 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8014f62:	2300      	movs	r3, #0
 8014f64:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8014f66:	69bb      	ldr	r3, [r7, #24]
 8014f68:	f003 0301 	and.w	r3, r3, #1
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d002      	beq.n	8014f76 <osMutexNew+0x3a>
      rmtx = 1U;
 8014f70:	2301      	movs	r3, #1
 8014f72:	617b      	str	r3, [r7, #20]
 8014f74:	e001      	b.n	8014f7a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8014f76:	2300      	movs	r3, #0
 8014f78:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014f7a:	69bb      	ldr	r3, [r7, #24]
 8014f7c:	f003 0308 	and.w	r3, r3, #8
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d15c      	bne.n	801503e <osMutexNew+0x102>
      mem = -1;
 8014f84:	f04f 33ff 	mov.w	r3, #4294967295
 8014f88:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d015      	beq.n	8014fbc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	689b      	ldr	r3, [r3, #8]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d006      	beq.n	8014fa6 <osMutexNew+0x6a>
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	68db      	ldr	r3, [r3, #12]
 8014f9c:	2b4f      	cmp	r3, #79	; 0x4f
 8014f9e:	d902      	bls.n	8014fa6 <osMutexNew+0x6a>
          mem = 1;
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	613b      	str	r3, [r7, #16]
 8014fa4:	e00c      	b.n	8014fc0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d108      	bne.n	8014fc0 <osMutexNew+0x84>
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d104      	bne.n	8014fc0 <osMutexNew+0x84>
            mem = 0;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	613b      	str	r3, [r7, #16]
 8014fba:	e001      	b.n	8014fc0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	d112      	bne.n	8014fec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d007      	beq.n	8014fdc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	689b      	ldr	r3, [r3, #8]
 8014fd0:	4619      	mov	r1, r3
 8014fd2:	2004      	movs	r0, #4
 8014fd4:	f000 fd69 	bl	8015aaa <xQueueCreateMutexStatic>
 8014fd8:	61f8      	str	r0, [r7, #28]
 8014fda:	e016      	b.n	801500a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	689b      	ldr	r3, [r3, #8]
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	2001      	movs	r0, #1
 8014fe4:	f000 fd61 	bl	8015aaa <xQueueCreateMutexStatic>
 8014fe8:	61f8      	str	r0, [r7, #28]
 8014fea:	e00e      	b.n	801500a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d10b      	bne.n	801500a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8014ff2:	697b      	ldr	r3, [r7, #20]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d004      	beq.n	8015002 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8014ff8:	2004      	movs	r0, #4
 8014ffa:	f000 fd3e 	bl	8015a7a <xQueueCreateMutex>
 8014ffe:	61f8      	str	r0, [r7, #28]
 8015000:	e003      	b.n	801500a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8015002:	2001      	movs	r0, #1
 8015004:	f000 fd39 	bl	8015a7a <xQueueCreateMutex>
 8015008:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801500a:	69fb      	ldr	r3, [r7, #28]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d00c      	beq.n	801502a <osMutexNew+0xee>
        if (attr != NULL) {
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d003      	beq.n	801501e <osMutexNew+0xe2>
          name = attr->name;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	60fb      	str	r3, [r7, #12]
 801501c:	e001      	b.n	8015022 <osMutexNew+0xe6>
        } else {
          name = NULL;
 801501e:	2300      	movs	r3, #0
 8015020:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8015022:	68f9      	ldr	r1, [r7, #12]
 8015024:	69f8      	ldr	r0, [r7, #28]
 8015026:	f001 fc0d 	bl	8016844 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d006      	beq.n	801503e <osMutexNew+0x102>
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d003      	beq.n	801503e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	f043 0301 	orr.w	r3, r3, #1
 801503c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801503e:	69fb      	ldr	r3, [r7, #28]
}
 8015040:	4618      	mov	r0, r3
 8015042:	3720      	adds	r7, #32
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015048:	b580      	push	{r7, lr}
 801504a:	b086      	sub	sp, #24
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
 8015050:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f023 0301 	bic.w	r3, r3, #1
 8015058:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f003 0301 	and.w	r3, r3, #1
 8015060:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015062:	2300      	movs	r3, #0
 8015064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015066:	f3ef 8305 	mrs	r3, IPSR
 801506a:	60bb      	str	r3, [r7, #8]
  return(result);
 801506c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801506e:	2b00      	cmp	r3, #0
 8015070:	d003      	beq.n	801507a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8015072:	f06f 0305 	mvn.w	r3, #5
 8015076:	617b      	str	r3, [r7, #20]
 8015078:	e02c      	b.n	80150d4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d103      	bne.n	8015088 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8015080:	f06f 0303 	mvn.w	r3, #3
 8015084:	617b      	str	r3, [r7, #20]
 8015086:	e025      	b.n	80150d4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d011      	beq.n	80150b2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801508e:	6839      	ldr	r1, [r7, #0]
 8015090:	6938      	ldr	r0, [r7, #16]
 8015092:	f000 fd59 	bl	8015b48 <xQueueTakeMutexRecursive>
 8015096:	4603      	mov	r3, r0
 8015098:	2b01      	cmp	r3, #1
 801509a:	d01b      	beq.n	80150d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d003      	beq.n	80150aa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80150a2:	f06f 0301 	mvn.w	r3, #1
 80150a6:	617b      	str	r3, [r7, #20]
 80150a8:	e014      	b.n	80150d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80150aa:	f06f 0302 	mvn.w	r3, #2
 80150ae:	617b      	str	r3, [r7, #20]
 80150b0:	e010      	b.n	80150d4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80150b2:	6839      	ldr	r1, [r7, #0]
 80150b4:	6938      	ldr	r0, [r7, #16]
 80150b6:	f001 f8ed 	bl	8016294 <xQueueSemaphoreTake>
 80150ba:	4603      	mov	r3, r0
 80150bc:	2b01      	cmp	r3, #1
 80150be:	d009      	beq.n	80150d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d003      	beq.n	80150ce <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80150c6:	f06f 0301 	mvn.w	r3, #1
 80150ca:	617b      	str	r3, [r7, #20]
 80150cc:	e002      	b.n	80150d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80150ce:	f06f 0302 	mvn.w	r3, #2
 80150d2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80150d4:	697b      	ldr	r3, [r7, #20]
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3718      	adds	r7, #24
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80150de:	b580      	push	{r7, lr}
 80150e0:	b086      	sub	sp, #24
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f023 0301 	bic.w	r3, r3, #1
 80150ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f003 0301 	and.w	r3, r3, #1
 80150f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80150f6:	2300      	movs	r3, #0
 80150f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80150fa:	f3ef 8305 	mrs	r3, IPSR
 80150fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8015100:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015102:	2b00      	cmp	r3, #0
 8015104:	d003      	beq.n	801510e <osMutexRelease+0x30>
    stat = osErrorISR;
 8015106:	f06f 0305 	mvn.w	r3, #5
 801510a:	617b      	str	r3, [r7, #20]
 801510c:	e01f      	b.n	801514e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d103      	bne.n	801511c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8015114:	f06f 0303 	mvn.w	r3, #3
 8015118:	617b      	str	r3, [r7, #20]
 801511a:	e018      	b.n	801514e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d009      	beq.n	8015136 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8015122:	6938      	ldr	r0, [r7, #16]
 8015124:	f000 fcdc 	bl	8015ae0 <xQueueGiveMutexRecursive>
 8015128:	4603      	mov	r3, r0
 801512a:	2b01      	cmp	r3, #1
 801512c:	d00f      	beq.n	801514e <osMutexRelease+0x70>
        stat = osErrorResource;
 801512e:	f06f 0302 	mvn.w	r3, #2
 8015132:	617b      	str	r3, [r7, #20]
 8015134:	e00b      	b.n	801514e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015136:	2300      	movs	r3, #0
 8015138:	2200      	movs	r2, #0
 801513a:	2100      	movs	r1, #0
 801513c:	6938      	ldr	r0, [r7, #16]
 801513e:	f000 fda3 	bl	8015c88 <xQueueGenericSend>
 8015142:	4603      	mov	r3, r0
 8015144:	2b01      	cmp	r3, #1
 8015146:	d002      	beq.n	801514e <osMutexRelease+0x70>
        stat = osErrorResource;
 8015148:	f06f 0302 	mvn.w	r3, #2
 801514c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801514e:	697b      	ldr	r3, [r7, #20]
}
 8015150:	4618      	mov	r0, r3
 8015152:	3718      	adds	r7, #24
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015158:	b580      	push	{r7, lr}
 801515a:	b08a      	sub	sp, #40	; 0x28
 801515c:	af02      	add	r7, sp, #8
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015164:	2300      	movs	r3, #0
 8015166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015168:	f3ef 8305 	mrs	r3, IPSR
 801516c:	613b      	str	r3, [r7, #16]
  return(result);
 801516e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015170:	2b00      	cmp	r3, #0
 8015172:	d175      	bne.n	8015260 <osSemaphoreNew+0x108>
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d072      	beq.n	8015260 <osSemaphoreNew+0x108>
 801517a:	68ba      	ldr	r2, [r7, #8]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	429a      	cmp	r2, r3
 8015180:	d86e      	bhi.n	8015260 <osSemaphoreNew+0x108>
    mem = -1;
 8015182:	f04f 33ff 	mov.w	r3, #4294967295
 8015186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d015      	beq.n	80151ba <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	689b      	ldr	r3, [r3, #8]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d006      	beq.n	80151a4 <osSemaphoreNew+0x4c>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	2b4f      	cmp	r3, #79	; 0x4f
 801519c:	d902      	bls.n	80151a4 <osSemaphoreNew+0x4c>
        mem = 1;
 801519e:	2301      	movs	r3, #1
 80151a0:	61bb      	str	r3, [r7, #24]
 80151a2:	e00c      	b.n	80151be <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	689b      	ldr	r3, [r3, #8]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d108      	bne.n	80151be <osSemaphoreNew+0x66>
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	68db      	ldr	r3, [r3, #12]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d104      	bne.n	80151be <osSemaphoreNew+0x66>
          mem = 0;
 80151b4:	2300      	movs	r3, #0
 80151b6:	61bb      	str	r3, [r7, #24]
 80151b8:	e001      	b.n	80151be <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151c4:	d04c      	beq.n	8015260 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	2b01      	cmp	r3, #1
 80151ca:	d128      	bne.n	801521e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	d10a      	bne.n	80151e8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	689b      	ldr	r3, [r3, #8]
 80151d6:	2203      	movs	r2, #3
 80151d8:	9200      	str	r2, [sp, #0]
 80151da:	2200      	movs	r2, #0
 80151dc:	2100      	movs	r1, #0
 80151de:	2001      	movs	r0, #1
 80151e0:	f000 fb5c 	bl	801589c <xQueueGenericCreateStatic>
 80151e4:	61f8      	str	r0, [r7, #28]
 80151e6:	e005      	b.n	80151f4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80151e8:	2203      	movs	r2, #3
 80151ea:	2100      	movs	r1, #0
 80151ec:	2001      	movs	r0, #1
 80151ee:	f000 fbcd 	bl	801598c <xQueueGenericCreate>
 80151f2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80151f4:	69fb      	ldr	r3, [r7, #28]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d022      	beq.n	8015240 <osSemaphoreNew+0xe8>
 80151fa:	68bb      	ldr	r3, [r7, #8]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d01f      	beq.n	8015240 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015200:	2300      	movs	r3, #0
 8015202:	2200      	movs	r2, #0
 8015204:	2100      	movs	r1, #0
 8015206:	69f8      	ldr	r0, [r7, #28]
 8015208:	f000 fd3e 	bl	8015c88 <xQueueGenericSend>
 801520c:	4603      	mov	r3, r0
 801520e:	2b01      	cmp	r3, #1
 8015210:	d016      	beq.n	8015240 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015212:	69f8      	ldr	r0, [r7, #28]
 8015214:	f001 f9ca 	bl	80165ac <vQueueDelete>
            hSemaphore = NULL;
 8015218:	2300      	movs	r3, #0
 801521a:	61fb      	str	r3, [r7, #28]
 801521c:	e010      	b.n	8015240 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801521e:	69bb      	ldr	r3, [r7, #24]
 8015220:	2b01      	cmp	r3, #1
 8015222:	d108      	bne.n	8015236 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	461a      	mov	r2, r3
 801522a:	68b9      	ldr	r1, [r7, #8]
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f000 fcc1 	bl	8015bb4 <xQueueCreateCountingSemaphoreStatic>
 8015232:	61f8      	str	r0, [r7, #28]
 8015234:	e004      	b.n	8015240 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015236:	68b9      	ldr	r1, [r7, #8]
 8015238:	68f8      	ldr	r0, [r7, #12]
 801523a:	f000 fcf2 	bl	8015c22 <xQueueCreateCountingSemaphore>
 801523e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015240:	69fb      	ldr	r3, [r7, #28]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d00c      	beq.n	8015260 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d003      	beq.n	8015254 <osSemaphoreNew+0xfc>
          name = attr->name;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	617b      	str	r3, [r7, #20]
 8015252:	e001      	b.n	8015258 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015254:	2300      	movs	r3, #0
 8015256:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015258:	6979      	ldr	r1, [r7, #20]
 801525a:	69f8      	ldr	r0, [r7, #28]
 801525c:	f001 faf2 	bl	8016844 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015260:	69fb      	ldr	r3, [r7, #28]
}
 8015262:	4618      	mov	r0, r3
 8015264:	3720      	adds	r7, #32
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
	...

0801526c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801527a:	2300      	movs	r3, #0
 801527c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d103      	bne.n	801528c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015284:	f06f 0303 	mvn.w	r3, #3
 8015288:	617b      	str	r3, [r7, #20]
 801528a:	e039      	b.n	8015300 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801528c:	f3ef 8305 	mrs	r3, IPSR
 8015290:	60fb      	str	r3, [r7, #12]
  return(result);
 8015292:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015294:	2b00      	cmp	r3, #0
 8015296:	d022      	beq.n	80152de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d003      	beq.n	80152a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801529e:	f06f 0303 	mvn.w	r3, #3
 80152a2:	617b      	str	r3, [r7, #20]
 80152a4:	e02c      	b.n	8015300 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80152a6:	2300      	movs	r3, #0
 80152a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80152aa:	f107 0308 	add.w	r3, r7, #8
 80152ae:	461a      	mov	r2, r3
 80152b0:	2100      	movs	r1, #0
 80152b2:	6938      	ldr	r0, [r7, #16]
 80152b4:	f001 f8fa 	bl	80164ac <xQueueReceiveFromISR>
 80152b8:	4603      	mov	r3, r0
 80152ba:	2b01      	cmp	r3, #1
 80152bc:	d003      	beq.n	80152c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80152be:	f06f 0302 	mvn.w	r3, #2
 80152c2:	617b      	str	r3, [r7, #20]
 80152c4:	e01c      	b.n	8015300 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d019      	beq.n	8015300 <osSemaphoreAcquire+0x94>
 80152cc:	4b0f      	ldr	r3, [pc, #60]	; (801530c <osSemaphoreAcquire+0xa0>)
 80152ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152d2:	601a      	str	r2, [r3, #0]
 80152d4:	f3bf 8f4f 	dsb	sy
 80152d8:	f3bf 8f6f 	isb	sy
 80152dc:	e010      	b.n	8015300 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80152de:	6839      	ldr	r1, [r7, #0]
 80152e0:	6938      	ldr	r0, [r7, #16]
 80152e2:	f000 ffd7 	bl	8016294 <xQueueSemaphoreTake>
 80152e6:	4603      	mov	r3, r0
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d009      	beq.n	8015300 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d003      	beq.n	80152fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80152f2:	f06f 0301 	mvn.w	r3, #1
 80152f6:	617b      	str	r3, [r7, #20]
 80152f8:	e002      	b.n	8015300 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80152fa:	f06f 0302 	mvn.w	r3, #2
 80152fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015300:	697b      	ldr	r3, [r7, #20]
}
 8015302:	4618      	mov	r0, r3
 8015304:	3718      	adds	r7, #24
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	e000ed04 	.word	0xe000ed04

08015310 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015310:	b580      	push	{r7, lr}
 8015312:	b086      	sub	sp, #24
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801531c:	2300      	movs	r3, #0
 801531e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d103      	bne.n	801532e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015326:	f06f 0303 	mvn.w	r3, #3
 801532a:	617b      	str	r3, [r7, #20]
 801532c:	e02c      	b.n	8015388 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801532e:	f3ef 8305 	mrs	r3, IPSR
 8015332:	60fb      	str	r3, [r7, #12]
  return(result);
 8015334:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015336:	2b00      	cmp	r3, #0
 8015338:	d01a      	beq.n	8015370 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801533a:	2300      	movs	r3, #0
 801533c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801533e:	f107 0308 	add.w	r3, r7, #8
 8015342:	4619      	mov	r1, r3
 8015344:	6938      	ldr	r0, [r7, #16]
 8015346:	f000 fe38 	bl	8015fba <xQueueGiveFromISR>
 801534a:	4603      	mov	r3, r0
 801534c:	2b01      	cmp	r3, #1
 801534e:	d003      	beq.n	8015358 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015350:	f06f 0302 	mvn.w	r3, #2
 8015354:	617b      	str	r3, [r7, #20]
 8015356:	e017      	b.n	8015388 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d014      	beq.n	8015388 <osSemaphoreRelease+0x78>
 801535e:	4b0d      	ldr	r3, [pc, #52]	; (8015394 <osSemaphoreRelease+0x84>)
 8015360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015364:	601a      	str	r2, [r3, #0]
 8015366:	f3bf 8f4f 	dsb	sy
 801536a:	f3bf 8f6f 	isb	sy
 801536e:	e00b      	b.n	8015388 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015370:	2300      	movs	r3, #0
 8015372:	2200      	movs	r2, #0
 8015374:	2100      	movs	r1, #0
 8015376:	6938      	ldr	r0, [r7, #16]
 8015378:	f000 fc86 	bl	8015c88 <xQueueGenericSend>
 801537c:	4603      	mov	r3, r0
 801537e:	2b01      	cmp	r3, #1
 8015380:	d002      	beq.n	8015388 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015382:	f06f 0302 	mvn.w	r3, #2
 8015386:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015388:	697b      	ldr	r3, [r7, #20]
}
 801538a:	4618      	mov	r0, r3
 801538c:	3718      	adds	r7, #24
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	e000ed04 	.word	0xe000ed04

08015398 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015398:	b580      	push	{r7, lr}
 801539a:	b08a      	sub	sp, #40	; 0x28
 801539c:	af02      	add	r7, sp, #8
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80153a4:	2300      	movs	r3, #0
 80153a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80153a8:	f3ef 8305 	mrs	r3, IPSR
 80153ac:	613b      	str	r3, [r7, #16]
  return(result);
 80153ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d15f      	bne.n	8015474 <osMessageQueueNew+0xdc>
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d05c      	beq.n	8015474 <osMessageQueueNew+0xdc>
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d059      	beq.n	8015474 <osMessageQueueNew+0xdc>
    mem = -1;
 80153c0:	f04f 33ff 	mov.w	r3, #4294967295
 80153c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d029      	beq.n	8015420 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	689b      	ldr	r3, [r3, #8]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d012      	beq.n	80153fa <osMessageQueueNew+0x62>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	68db      	ldr	r3, [r3, #12]
 80153d8:	2b4f      	cmp	r3, #79	; 0x4f
 80153da:	d90e      	bls.n	80153fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d00a      	beq.n	80153fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	695a      	ldr	r2, [r3, #20]
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	68b9      	ldr	r1, [r7, #8]
 80153ec:	fb01 f303 	mul.w	r3, r1, r3
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d302      	bcc.n	80153fa <osMessageQueueNew+0x62>
        mem = 1;
 80153f4:	2301      	movs	r3, #1
 80153f6:	61bb      	str	r3, [r7, #24]
 80153f8:	e014      	b.n	8015424 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	689b      	ldr	r3, [r3, #8]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d110      	bne.n	8015424 <osMessageQueueNew+0x8c>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	68db      	ldr	r3, [r3, #12]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d10c      	bne.n	8015424 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801540e:	2b00      	cmp	r3, #0
 8015410:	d108      	bne.n	8015424 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	695b      	ldr	r3, [r3, #20]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d104      	bne.n	8015424 <osMessageQueueNew+0x8c>
          mem = 0;
 801541a:	2300      	movs	r3, #0
 801541c:	61bb      	str	r3, [r7, #24]
 801541e:	e001      	b.n	8015424 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015420:	2300      	movs	r3, #0
 8015422:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	2b01      	cmp	r3, #1
 8015428:	d10b      	bne.n	8015442 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	691a      	ldr	r2, [r3, #16]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	689b      	ldr	r3, [r3, #8]
 8015432:	2100      	movs	r1, #0
 8015434:	9100      	str	r1, [sp, #0]
 8015436:	68b9      	ldr	r1, [r7, #8]
 8015438:	68f8      	ldr	r0, [r7, #12]
 801543a:	f000 fa2f 	bl	801589c <xQueueGenericCreateStatic>
 801543e:	61f8      	str	r0, [r7, #28]
 8015440:	e008      	b.n	8015454 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015442:	69bb      	ldr	r3, [r7, #24]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d105      	bne.n	8015454 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015448:	2200      	movs	r2, #0
 801544a:	68b9      	ldr	r1, [r7, #8]
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	f000 fa9d 	bl	801598c <xQueueGenericCreate>
 8015452:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d00c      	beq.n	8015474 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d003      	beq.n	8015468 <osMessageQueueNew+0xd0>
        name = attr->name;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	617b      	str	r3, [r7, #20]
 8015466:	e001      	b.n	801546c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015468:	2300      	movs	r3, #0
 801546a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801546c:	6979      	ldr	r1, [r7, #20]
 801546e:	69f8      	ldr	r0, [r7, #28]
 8015470:	f001 f9e8 	bl	8016844 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015474:	69fb      	ldr	r3, [r7, #28]
}
 8015476:	4618      	mov	r0, r3
 8015478:	3720      	adds	r7, #32
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
	...

08015480 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015480:	b580      	push	{r7, lr}
 8015482:	b088      	sub	sp, #32
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	603b      	str	r3, [r7, #0]
 801548c:	4613      	mov	r3, r2
 801548e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015494:	2300      	movs	r3, #0
 8015496:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015498:	f3ef 8305 	mrs	r3, IPSR
 801549c:	617b      	str	r3, [r7, #20]
  return(result);
 801549e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d028      	beq.n	80154f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80154a4:	69bb      	ldr	r3, [r7, #24]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d005      	beq.n	80154b6 <osMessageQueuePut+0x36>
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d002      	beq.n	80154b6 <osMessageQueuePut+0x36>
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d003      	beq.n	80154be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80154b6:	f06f 0303 	mvn.w	r3, #3
 80154ba:	61fb      	str	r3, [r7, #28]
 80154bc:	e038      	b.n	8015530 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80154be:	2300      	movs	r3, #0
 80154c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80154c2:	f107 0210 	add.w	r2, r7, #16
 80154c6:	2300      	movs	r3, #0
 80154c8:	68b9      	ldr	r1, [r7, #8]
 80154ca:	69b8      	ldr	r0, [r7, #24]
 80154cc:	f000 fcda 	bl	8015e84 <xQueueGenericSendFromISR>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b01      	cmp	r3, #1
 80154d4:	d003      	beq.n	80154de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80154d6:	f06f 0302 	mvn.w	r3, #2
 80154da:	61fb      	str	r3, [r7, #28]
 80154dc:	e028      	b.n	8015530 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d025      	beq.n	8015530 <osMessageQueuePut+0xb0>
 80154e4:	4b15      	ldr	r3, [pc, #84]	; (801553c <osMessageQueuePut+0xbc>)
 80154e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154ea:	601a      	str	r2, [r3, #0]
 80154ec:	f3bf 8f4f 	dsb	sy
 80154f0:	f3bf 8f6f 	isb	sy
 80154f4:	e01c      	b.n	8015530 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d002      	beq.n	8015502 <osMessageQueuePut+0x82>
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d103      	bne.n	801550a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015502:	f06f 0303 	mvn.w	r3, #3
 8015506:	61fb      	str	r3, [r7, #28]
 8015508:	e012      	b.n	8015530 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801550a:	2300      	movs	r3, #0
 801550c:	683a      	ldr	r2, [r7, #0]
 801550e:	68b9      	ldr	r1, [r7, #8]
 8015510:	69b8      	ldr	r0, [r7, #24]
 8015512:	f000 fbb9 	bl	8015c88 <xQueueGenericSend>
 8015516:	4603      	mov	r3, r0
 8015518:	2b01      	cmp	r3, #1
 801551a:	d009      	beq.n	8015530 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d003      	beq.n	801552a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015522:	f06f 0301 	mvn.w	r3, #1
 8015526:	61fb      	str	r3, [r7, #28]
 8015528:	e002      	b.n	8015530 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801552a:	f06f 0302 	mvn.w	r3, #2
 801552e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015530:	69fb      	ldr	r3, [r7, #28]
}
 8015532:	4618      	mov	r0, r3
 8015534:	3720      	adds	r7, #32
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop
 801553c:	e000ed04 	.word	0xe000ed04

08015540 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015540:	b580      	push	{r7, lr}
 8015542:	b088      	sub	sp, #32
 8015544:	af00      	add	r7, sp, #0
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	60b9      	str	r1, [r7, #8]
 801554a:	607a      	str	r2, [r7, #4]
 801554c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015552:	2300      	movs	r3, #0
 8015554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015556:	f3ef 8305 	mrs	r3, IPSR
 801555a:	617b      	str	r3, [r7, #20]
  return(result);
 801555c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801555e:	2b00      	cmp	r3, #0
 8015560:	d028      	beq.n	80155b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015562:	69bb      	ldr	r3, [r7, #24]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d005      	beq.n	8015574 <osMessageQueueGet+0x34>
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d002      	beq.n	8015574 <osMessageQueueGet+0x34>
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d003      	beq.n	801557c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015574:	f06f 0303 	mvn.w	r3, #3
 8015578:	61fb      	str	r3, [r7, #28]
 801557a:	e037      	b.n	80155ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801557c:	2300      	movs	r3, #0
 801557e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015580:	f107 0310 	add.w	r3, r7, #16
 8015584:	461a      	mov	r2, r3
 8015586:	68b9      	ldr	r1, [r7, #8]
 8015588:	69b8      	ldr	r0, [r7, #24]
 801558a:	f000 ff8f 	bl	80164ac <xQueueReceiveFromISR>
 801558e:	4603      	mov	r3, r0
 8015590:	2b01      	cmp	r3, #1
 8015592:	d003      	beq.n	801559c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015594:	f06f 0302 	mvn.w	r3, #2
 8015598:	61fb      	str	r3, [r7, #28]
 801559a:	e027      	b.n	80155ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d024      	beq.n	80155ec <osMessageQueueGet+0xac>
 80155a2:	4b15      	ldr	r3, [pc, #84]	; (80155f8 <osMessageQueueGet+0xb8>)
 80155a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155a8:	601a      	str	r2, [r3, #0]
 80155aa:	f3bf 8f4f 	dsb	sy
 80155ae:	f3bf 8f6f 	isb	sy
 80155b2:	e01b      	b.n	80155ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80155b4:	69bb      	ldr	r3, [r7, #24]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d002      	beq.n	80155c0 <osMessageQueueGet+0x80>
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d103      	bne.n	80155c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80155c0:	f06f 0303 	mvn.w	r3, #3
 80155c4:	61fb      	str	r3, [r7, #28]
 80155c6:	e011      	b.n	80155ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80155c8:	683a      	ldr	r2, [r7, #0]
 80155ca:	68b9      	ldr	r1, [r7, #8]
 80155cc:	69b8      	ldr	r0, [r7, #24]
 80155ce:	f000 fd81 	bl	80160d4 <xQueueReceive>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d009      	beq.n	80155ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d003      	beq.n	80155e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80155de:	f06f 0301 	mvn.w	r3, #1
 80155e2:	61fb      	str	r3, [r7, #28]
 80155e4:	e002      	b.n	80155ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80155e6:	f06f 0302 	mvn.w	r3, #2
 80155ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80155ec:	69fb      	ldr	r3, [r7, #28]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3720      	adds	r7, #32
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	e000ed04 	.word	0xe000ed04

080155fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80155fc:	b480      	push	{r7}
 80155fe:	b085      	sub	sp, #20
 8015600:	af00      	add	r7, sp, #0
 8015602:	60f8      	str	r0, [r7, #12]
 8015604:	60b9      	str	r1, [r7, #8]
 8015606:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	4a07      	ldr	r2, [pc, #28]	; (8015628 <vApplicationGetIdleTaskMemory+0x2c>)
 801560c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	4a06      	ldr	r2, [pc, #24]	; (801562c <vApplicationGetIdleTaskMemory+0x30>)
 8015612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2280      	movs	r2, #128	; 0x80
 8015618:	601a      	str	r2, [r3, #0]
}
 801561a:	bf00      	nop
 801561c:	3714      	adds	r7, #20
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr
 8015626:	bf00      	nop
 8015628:	240054c0 	.word	0x240054c0
 801562c:	2400557c 	.word	0x2400557c

08015630 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015630:	b480      	push	{r7}
 8015632:	b085      	sub	sp, #20
 8015634:	af00      	add	r7, sp, #0
 8015636:	60f8      	str	r0, [r7, #12]
 8015638:	60b9      	str	r1, [r7, #8]
 801563a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	4a07      	ldr	r2, [pc, #28]	; (801565c <vApplicationGetTimerTaskMemory+0x2c>)
 8015640:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	4a06      	ldr	r2, [pc, #24]	; (8015660 <vApplicationGetTimerTaskMemory+0x30>)
 8015646:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801564e:	601a      	str	r2, [r3, #0]
}
 8015650:	bf00      	nop
 8015652:	3714      	adds	r7, #20
 8015654:	46bd      	mov	sp, r7
 8015656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565a:	4770      	bx	lr
 801565c:	2400577c 	.word	0x2400577c
 8015660:	24005838 	.word	0x24005838

08015664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015664:	b480      	push	{r7}
 8015666:	b083      	sub	sp, #12
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f103 0208 	add.w	r2, r3, #8
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f04f 32ff 	mov.w	r2, #4294967295
 801567c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	f103 0208 	add.w	r2, r3, #8
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f103 0208 	add.w	r2, r3, #8
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2200      	movs	r2, #0
 8015696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015698:	bf00      	nop
 801569a:	370c      	adds	r7, #12
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr

080156a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80156a4:	b480      	push	{r7}
 80156a6:	b083      	sub	sp, #12
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2200      	movs	r2, #0
 80156b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80156b2:	bf00      	nop
 80156b4:	370c      	adds	r7, #12
 80156b6:	46bd      	mov	sp, r7
 80156b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156bc:	4770      	bx	lr

080156be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80156be:	b480      	push	{r7}
 80156c0:	b085      	sub	sp, #20
 80156c2:	af00      	add	r7, sp, #0
 80156c4:	6078      	str	r0, [r7, #4]
 80156c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	68fa      	ldr	r2, [r7, #12]
 80156d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	689a      	ldr	r2, [r3, #8]
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	683a      	ldr	r2, [r7, #0]
 80156e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	683a      	ldr	r2, [r7, #0]
 80156e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	687a      	ldr	r2, [r7, #4]
 80156ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	1c5a      	adds	r2, r3, #1
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	601a      	str	r2, [r3, #0]
}
 80156fa:	bf00      	nop
 80156fc:	3714      	adds	r7, #20
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr

08015706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015706:	b480      	push	{r7}
 8015708:	b085      	sub	sp, #20
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
 801570e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801571c:	d103      	bne.n	8015726 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	691b      	ldr	r3, [r3, #16]
 8015722:	60fb      	str	r3, [r7, #12]
 8015724:	e00c      	b.n	8015740 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	3308      	adds	r3, #8
 801572a:	60fb      	str	r3, [r7, #12]
 801572c:	e002      	b.n	8015734 <vListInsert+0x2e>
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	60fb      	str	r3, [r7, #12]
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	68ba      	ldr	r2, [r7, #8]
 801573c:	429a      	cmp	r2, r3
 801573e:	d2f6      	bcs.n	801572e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	685a      	ldr	r2, [r3, #4]
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	683a      	ldr	r2, [r7, #0]
 801574e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	68fa      	ldr	r2, [r7, #12]
 8015754:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	683a      	ldr	r2, [r7, #0]
 801575a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	1c5a      	adds	r2, r3, #1
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	601a      	str	r2, [r3, #0]
}
 801576c:	bf00      	nop
 801576e:	3714      	adds	r7, #20
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr

08015778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015778:	b480      	push	{r7}
 801577a:	b085      	sub	sp, #20
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	691b      	ldr	r3, [r3, #16]
 8015784:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	687a      	ldr	r2, [r7, #4]
 801578c:	6892      	ldr	r2, [r2, #8]
 801578e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	689b      	ldr	r3, [r3, #8]
 8015794:	687a      	ldr	r2, [r7, #4]
 8015796:	6852      	ldr	r2, [r2, #4]
 8015798:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	685b      	ldr	r3, [r3, #4]
 801579e:	687a      	ldr	r2, [r7, #4]
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d103      	bne.n	80157ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	689a      	ldr	r2, [r3, #8]
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2200      	movs	r2, #0
 80157b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	1e5a      	subs	r2, r3, #1
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3714      	adds	r7, #20
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr

080157cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d10a      	bne.n	80157f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80157e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157e4:	f383 8811 	msr	BASEPRI, r3
 80157e8:	f3bf 8f6f 	isb	sy
 80157ec:	f3bf 8f4f 	dsb	sy
 80157f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80157f2:	bf00      	nop
 80157f4:	e7fe      	b.n	80157f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80157f6:	f002 fd6d 	bl	80182d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015802:	68f9      	ldr	r1, [r7, #12]
 8015804:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015806:	fb01 f303 	mul.w	r3, r1, r3
 801580a:	441a      	add	r2, r3
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	2200      	movs	r2, #0
 8015814:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015826:	3b01      	subs	r3, #1
 8015828:	68f9      	ldr	r1, [r7, #12]
 801582a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801582c:	fb01 f303 	mul.w	r3, r1, r3
 8015830:	441a      	add	r2, r3
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	22ff      	movs	r2, #255	; 0xff
 801583a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	22ff      	movs	r2, #255	; 0xff
 8015842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d114      	bne.n	8015876 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	691b      	ldr	r3, [r3, #16]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d01a      	beq.n	801588a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	3310      	adds	r3, #16
 8015858:	4618      	mov	r0, r3
 801585a:	f001 fd13 	bl	8017284 <xTaskRemoveFromEventList>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d012      	beq.n	801588a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015864:	4b0c      	ldr	r3, [pc, #48]	; (8015898 <xQueueGenericReset+0xcc>)
 8015866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801586a:	601a      	str	r2, [r3, #0]
 801586c:	f3bf 8f4f 	dsb	sy
 8015870:	f3bf 8f6f 	isb	sy
 8015874:	e009      	b.n	801588a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	3310      	adds	r3, #16
 801587a:	4618      	mov	r0, r3
 801587c:	f7ff fef2 	bl	8015664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	3324      	adds	r3, #36	; 0x24
 8015884:	4618      	mov	r0, r3
 8015886:	f7ff feed 	bl	8015664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801588a:	f002 fd53 	bl	8018334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801588e:	2301      	movs	r3, #1
}
 8015890:	4618      	mov	r0, r3
 8015892:	3710      	adds	r7, #16
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}
 8015898:	e000ed04 	.word	0xe000ed04

0801589c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801589c:	b580      	push	{r7, lr}
 801589e:	b08e      	sub	sp, #56	; 0x38
 80158a0:	af02      	add	r7, sp, #8
 80158a2:	60f8      	str	r0, [r7, #12]
 80158a4:	60b9      	str	r1, [r7, #8]
 80158a6:	607a      	str	r2, [r7, #4]
 80158a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d10a      	bne.n	80158c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80158b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b4:	f383 8811 	msr	BASEPRI, r3
 80158b8:	f3bf 8f6f 	isb	sy
 80158bc:	f3bf 8f4f 	dsb	sy
 80158c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80158c2:	bf00      	nop
 80158c4:	e7fe      	b.n	80158c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d10a      	bne.n	80158e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80158cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d0:	f383 8811 	msr	BASEPRI, r3
 80158d4:	f3bf 8f6f 	isb	sy
 80158d8:	f3bf 8f4f 	dsb	sy
 80158dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80158de:	bf00      	nop
 80158e0:	e7fe      	b.n	80158e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d002      	beq.n	80158ee <xQueueGenericCreateStatic+0x52>
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d001      	beq.n	80158f2 <xQueueGenericCreateStatic+0x56>
 80158ee:	2301      	movs	r3, #1
 80158f0:	e000      	b.n	80158f4 <xQueueGenericCreateStatic+0x58>
 80158f2:	2300      	movs	r3, #0
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d10a      	bne.n	801590e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80158f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158fc:	f383 8811 	msr	BASEPRI, r3
 8015900:	f3bf 8f6f 	isb	sy
 8015904:	f3bf 8f4f 	dsb	sy
 8015908:	623b      	str	r3, [r7, #32]
}
 801590a:	bf00      	nop
 801590c:	e7fe      	b.n	801590c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d102      	bne.n	801591a <xQueueGenericCreateStatic+0x7e>
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d101      	bne.n	801591e <xQueueGenericCreateStatic+0x82>
 801591a:	2301      	movs	r3, #1
 801591c:	e000      	b.n	8015920 <xQueueGenericCreateStatic+0x84>
 801591e:	2300      	movs	r3, #0
 8015920:	2b00      	cmp	r3, #0
 8015922:	d10a      	bne.n	801593a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015928:	f383 8811 	msr	BASEPRI, r3
 801592c:	f3bf 8f6f 	isb	sy
 8015930:	f3bf 8f4f 	dsb	sy
 8015934:	61fb      	str	r3, [r7, #28]
}
 8015936:	bf00      	nop
 8015938:	e7fe      	b.n	8015938 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801593a:	2350      	movs	r3, #80	; 0x50
 801593c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	2b50      	cmp	r3, #80	; 0x50
 8015942:	d00a      	beq.n	801595a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015948:	f383 8811 	msr	BASEPRI, r3
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	f3bf 8f4f 	dsb	sy
 8015954:	61bb      	str	r3, [r7, #24]
}
 8015956:	bf00      	nop
 8015958:	e7fe      	b.n	8015958 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801595a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015962:	2b00      	cmp	r3, #0
 8015964:	d00d      	beq.n	8015982 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015968:	2201      	movs	r2, #1
 801596a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801596e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015974:	9300      	str	r3, [sp, #0]
 8015976:	4613      	mov	r3, r2
 8015978:	687a      	ldr	r2, [r7, #4]
 801597a:	68b9      	ldr	r1, [r7, #8]
 801597c:	68f8      	ldr	r0, [r7, #12]
 801597e:	f000 f83f 	bl	8015a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015984:	4618      	mov	r0, r3
 8015986:	3730      	adds	r7, #48	; 0x30
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801598c:	b580      	push	{r7, lr}
 801598e:	b08a      	sub	sp, #40	; 0x28
 8015990:	af02      	add	r7, sp, #8
 8015992:	60f8      	str	r0, [r7, #12]
 8015994:	60b9      	str	r1, [r7, #8]
 8015996:	4613      	mov	r3, r2
 8015998:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d10a      	bne.n	80159b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80159a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a4:	f383 8811 	msr	BASEPRI, r3
 80159a8:	f3bf 8f6f 	isb	sy
 80159ac:	f3bf 8f4f 	dsb	sy
 80159b0:	613b      	str	r3, [r7, #16]
}
 80159b2:	bf00      	nop
 80159b4:	e7fe      	b.n	80159b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	68ba      	ldr	r2, [r7, #8]
 80159ba:	fb02 f303 	mul.w	r3, r2, r3
 80159be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	3350      	adds	r3, #80	; 0x50
 80159c4:	4618      	mov	r0, r3
 80159c6:	f002 fda7 	bl	8018518 <pvPortMalloc>
 80159ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d011      	beq.n	80159f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80159d2:	69bb      	ldr	r3, [r7, #24]
 80159d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	3350      	adds	r3, #80	; 0x50
 80159da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80159dc:	69bb      	ldr	r3, [r7, #24]
 80159de:	2200      	movs	r2, #0
 80159e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80159e4:	79fa      	ldrb	r2, [r7, #7]
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	9300      	str	r3, [sp, #0]
 80159ea:	4613      	mov	r3, r2
 80159ec:	697a      	ldr	r2, [r7, #20]
 80159ee:	68b9      	ldr	r1, [r7, #8]
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	f000 f805 	bl	8015a00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80159f6:	69bb      	ldr	r3, [r7, #24]
	}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3720      	adds	r7, #32
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b084      	sub	sp, #16
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	60f8      	str	r0, [r7, #12]
 8015a08:	60b9      	str	r1, [r7, #8]
 8015a0a:	607a      	str	r2, [r7, #4]
 8015a0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d103      	bne.n	8015a1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a14:	69bb      	ldr	r3, [r7, #24]
 8015a16:	69ba      	ldr	r2, [r7, #24]
 8015a18:	601a      	str	r2, [r3, #0]
 8015a1a:	e002      	b.n	8015a22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015a1c:	69bb      	ldr	r3, [r7, #24]
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	68fa      	ldr	r2, [r7, #12]
 8015a26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	68ba      	ldr	r2, [r7, #8]
 8015a2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a2e:	2101      	movs	r1, #1
 8015a30:	69b8      	ldr	r0, [r7, #24]
 8015a32:	f7ff fecb 	bl	80157cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	78fa      	ldrb	r2, [r7, #3]
 8015a3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015a3e:	bf00      	nop
 8015a40:	3710      	adds	r7, #16
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}

08015a46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015a46:	b580      	push	{r7, lr}
 8015a48:	b082      	sub	sp, #8
 8015a4a:	af00      	add	r7, sp, #0
 8015a4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d00e      	beq.n	8015a72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2200      	movs	r2, #0
 8015a58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2200      	movs	r2, #0
 8015a64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015a66:	2300      	movs	r3, #0
 8015a68:	2200      	movs	r2, #0
 8015a6a:	2100      	movs	r1, #0
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f000 f90b 	bl	8015c88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015a72:	bf00      	nop
 8015a74:	3708      	adds	r7, #8
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}

08015a7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015a7a:	b580      	push	{r7, lr}
 8015a7c:	b086      	sub	sp, #24
 8015a7e:	af00      	add	r7, sp, #0
 8015a80:	4603      	mov	r3, r0
 8015a82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015a84:	2301      	movs	r3, #1
 8015a86:	617b      	str	r3, [r7, #20]
 8015a88:	2300      	movs	r3, #0
 8015a8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015a8c:	79fb      	ldrb	r3, [r7, #7]
 8015a8e:	461a      	mov	r2, r3
 8015a90:	6939      	ldr	r1, [r7, #16]
 8015a92:	6978      	ldr	r0, [r7, #20]
 8015a94:	f7ff ff7a 	bl	801598c <xQueueGenericCreate>
 8015a98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015a9a:	68f8      	ldr	r0, [r7, #12]
 8015a9c:	f7ff ffd3 	bl	8015a46 <prvInitialiseMutex>

		return xNewQueue;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
	}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3718      	adds	r7, #24
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}

08015aaa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015aaa:	b580      	push	{r7, lr}
 8015aac:	b088      	sub	sp, #32
 8015aae:	af02      	add	r7, sp, #8
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	6039      	str	r1, [r7, #0]
 8015ab4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	617b      	str	r3, [r7, #20]
 8015aba:	2300      	movs	r3, #0
 8015abc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015abe:	79fb      	ldrb	r3, [r7, #7]
 8015ac0:	9300      	str	r3, [sp, #0]
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	6939      	ldr	r1, [r7, #16]
 8015ac8:	6978      	ldr	r0, [r7, #20]
 8015aca:	f7ff fee7 	bl	801589c <xQueueGenericCreateStatic>
 8015ace:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015ad0:	68f8      	ldr	r0, [r7, #12]
 8015ad2:	f7ff ffb8 	bl	8015a46 <prvInitialiseMutex>

		return xNewQueue;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
	}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3718      	adds	r7, #24
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015ae0:	b590      	push	{r4, r7, lr}
 8015ae2:	b087      	sub	sp, #28
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d10a      	bne.n	8015b08 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8015af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af6:	f383 8811 	msr	BASEPRI, r3
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	f3bf 8f4f 	dsb	sy
 8015b02:	60fb      	str	r3, [r7, #12]
}
 8015b04:	bf00      	nop
 8015b06:	e7fe      	b.n	8015b06 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015b08:	693b      	ldr	r3, [r7, #16]
 8015b0a:	689c      	ldr	r4, [r3, #8]
 8015b0c:	f001 fd7c 	bl	8017608 <xTaskGetCurrentTaskHandle>
 8015b10:	4603      	mov	r3, r0
 8015b12:	429c      	cmp	r4, r3
 8015b14:	d111      	bne.n	8015b3a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	68db      	ldr	r3, [r3, #12]
 8015b1a:	1e5a      	subs	r2, r3, #1
 8015b1c:	693b      	ldr	r3, [r7, #16]
 8015b1e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8015b20:	693b      	ldr	r3, [r7, #16]
 8015b22:	68db      	ldr	r3, [r3, #12]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d105      	bne.n	8015b34 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8015b28:	2300      	movs	r3, #0
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	2100      	movs	r1, #0
 8015b2e:	6938      	ldr	r0, [r7, #16]
 8015b30:	f000 f8aa 	bl	8015c88 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8015b34:	2301      	movs	r3, #1
 8015b36:	617b      	str	r3, [r7, #20]
 8015b38:	e001      	b.n	8015b3e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8015b3e:	697b      	ldr	r3, [r7, #20]
	}
 8015b40:	4618      	mov	r0, r3
 8015b42:	371c      	adds	r7, #28
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd90      	pop	{r4, r7, pc}

08015b48 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8015b48:	b590      	push	{r4, r7, lr}
 8015b4a:	b087      	sub	sp, #28
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d10a      	bne.n	8015b72 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8015b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b60:	f383 8811 	msr	BASEPRI, r3
 8015b64:	f3bf 8f6f 	isb	sy
 8015b68:	f3bf 8f4f 	dsb	sy
 8015b6c:	60fb      	str	r3, [r7, #12]
}
 8015b6e:	bf00      	nop
 8015b70:	e7fe      	b.n	8015b70 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	689c      	ldr	r4, [r3, #8]
 8015b76:	f001 fd47 	bl	8017608 <xTaskGetCurrentTaskHandle>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	429c      	cmp	r4, r3
 8015b7e:	d107      	bne.n	8015b90 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	68db      	ldr	r3, [r3, #12]
 8015b84:	1c5a      	adds	r2, r3, #1
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	617b      	str	r3, [r7, #20]
 8015b8e:	e00c      	b.n	8015baa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015b90:	6839      	ldr	r1, [r7, #0]
 8015b92:	6938      	ldr	r0, [r7, #16]
 8015b94:	f000 fb7e 	bl	8016294 <xQueueSemaphoreTake>
 8015b98:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d004      	beq.n	8015baa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	68db      	ldr	r3, [r3, #12]
 8015ba4:	1c5a      	adds	r2, r3, #1
 8015ba6:	693b      	ldr	r3, [r7, #16]
 8015ba8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8015baa:	697b      	ldr	r3, [r7, #20]
	}
 8015bac:	4618      	mov	r0, r3
 8015bae:	371c      	adds	r7, #28
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd90      	pop	{r4, r7, pc}

08015bb4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b08a      	sub	sp, #40	; 0x28
 8015bb8:	af02      	add	r7, sp, #8
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d10a      	bne.n	8015bdc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bca:	f383 8811 	msr	BASEPRI, r3
 8015bce:	f3bf 8f6f 	isb	sy
 8015bd2:	f3bf 8f4f 	dsb	sy
 8015bd6:	61bb      	str	r3, [r7, #24]
}
 8015bd8:	bf00      	nop
 8015bda:	e7fe      	b.n	8015bda <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015bdc:	68ba      	ldr	r2, [r7, #8]
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	429a      	cmp	r2, r3
 8015be2:	d90a      	bls.n	8015bfa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be8:	f383 8811 	msr	BASEPRI, r3
 8015bec:	f3bf 8f6f 	isb	sy
 8015bf0:	f3bf 8f4f 	dsb	sy
 8015bf4:	617b      	str	r3, [r7, #20]
}
 8015bf6:	bf00      	nop
 8015bf8:	e7fe      	b.n	8015bf8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015bfa:	2302      	movs	r3, #2
 8015bfc:	9300      	str	r3, [sp, #0]
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	2200      	movs	r2, #0
 8015c02:	2100      	movs	r1, #0
 8015c04:	68f8      	ldr	r0, [r7, #12]
 8015c06:	f7ff fe49 	bl	801589c <xQueueGenericCreateStatic>
 8015c0a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015c0c:	69fb      	ldr	r3, [r7, #28]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d002      	beq.n	8015c18 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015c18:	69fb      	ldr	r3, [r7, #28]
	}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3720      	adds	r7, #32
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}

08015c22 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b086      	sub	sp, #24
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	6078      	str	r0, [r7, #4]
 8015c2a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d10a      	bne.n	8015c48 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c36:	f383 8811 	msr	BASEPRI, r3
 8015c3a:	f3bf 8f6f 	isb	sy
 8015c3e:	f3bf 8f4f 	dsb	sy
 8015c42:	613b      	str	r3, [r7, #16]
}
 8015c44:	bf00      	nop
 8015c46:	e7fe      	b.n	8015c46 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015c48:	683a      	ldr	r2, [r7, #0]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d90a      	bls.n	8015c66 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c54:	f383 8811 	msr	BASEPRI, r3
 8015c58:	f3bf 8f6f 	isb	sy
 8015c5c:	f3bf 8f4f 	dsb	sy
 8015c60:	60fb      	str	r3, [r7, #12]
}
 8015c62:	bf00      	nop
 8015c64:	e7fe      	b.n	8015c64 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015c66:	2202      	movs	r2, #2
 8015c68:	2100      	movs	r1, #0
 8015c6a:	6878      	ldr	r0, [r7, #4]
 8015c6c:	f7ff fe8e 	bl	801598c <xQueueGenericCreate>
 8015c70:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d002      	beq.n	8015c7e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015c78:	697b      	ldr	r3, [r7, #20]
 8015c7a:	683a      	ldr	r2, [r7, #0]
 8015c7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015c7e:	697b      	ldr	r3, [r7, #20]
	}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3718      	adds	r7, #24
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b08e      	sub	sp, #56	; 0x38
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
 8015c94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015c96:	2300      	movs	r3, #0
 8015c98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10a      	bne.n	8015cba <xQueueGenericSend+0x32>
	__asm volatile
 8015ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca8:	f383 8811 	msr	BASEPRI, r3
 8015cac:	f3bf 8f6f 	isb	sy
 8015cb0:	f3bf 8f4f 	dsb	sy
 8015cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015cb6:	bf00      	nop
 8015cb8:	e7fe      	b.n	8015cb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d103      	bne.n	8015cc8 <xQueueGenericSend+0x40>
 8015cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d101      	bne.n	8015ccc <xQueueGenericSend+0x44>
 8015cc8:	2301      	movs	r3, #1
 8015cca:	e000      	b.n	8015cce <xQueueGenericSend+0x46>
 8015ccc:	2300      	movs	r3, #0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d10a      	bne.n	8015ce8 <xQueueGenericSend+0x60>
	__asm volatile
 8015cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015ce4:	bf00      	nop
 8015ce6:	e7fe      	b.n	8015ce6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	2b02      	cmp	r3, #2
 8015cec:	d103      	bne.n	8015cf6 <xQueueGenericSend+0x6e>
 8015cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d101      	bne.n	8015cfa <xQueueGenericSend+0x72>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	e000      	b.n	8015cfc <xQueueGenericSend+0x74>
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10a      	bne.n	8015d16 <xQueueGenericSend+0x8e>
	__asm volatile
 8015d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d04:	f383 8811 	msr	BASEPRI, r3
 8015d08:	f3bf 8f6f 	isb	sy
 8015d0c:	f3bf 8f4f 	dsb	sy
 8015d10:	623b      	str	r3, [r7, #32]
}
 8015d12:	bf00      	nop
 8015d14:	e7fe      	b.n	8015d14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d16:	f001 fc87 	bl	8017628 <xTaskGetSchedulerState>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d102      	bne.n	8015d26 <xQueueGenericSend+0x9e>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d101      	bne.n	8015d2a <xQueueGenericSend+0xa2>
 8015d26:	2301      	movs	r3, #1
 8015d28:	e000      	b.n	8015d2c <xQueueGenericSend+0xa4>
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d10a      	bne.n	8015d46 <xQueueGenericSend+0xbe>
	__asm volatile
 8015d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d34:	f383 8811 	msr	BASEPRI, r3
 8015d38:	f3bf 8f6f 	isb	sy
 8015d3c:	f3bf 8f4f 	dsb	sy
 8015d40:	61fb      	str	r3, [r7, #28]
}
 8015d42:	bf00      	nop
 8015d44:	e7fe      	b.n	8015d44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015d46:	f002 fac5 	bl	80182d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d302      	bcc.n	8015d5c <xQueueGenericSend+0xd4>
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	2b02      	cmp	r3, #2
 8015d5a:	d129      	bne.n	8015db0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d5c:	683a      	ldr	r2, [r7, #0]
 8015d5e:	68b9      	ldr	r1, [r7, #8]
 8015d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d62:	f000 fc5e 	bl	8016622 <prvCopyDataToQueue>
 8015d66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d010      	beq.n	8015d92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d72:	3324      	adds	r3, #36	; 0x24
 8015d74:	4618      	mov	r0, r3
 8015d76:	f001 fa85 	bl	8017284 <xTaskRemoveFromEventList>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d013      	beq.n	8015da8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015d80:	4b3f      	ldr	r3, [pc, #252]	; (8015e80 <xQueueGenericSend+0x1f8>)
 8015d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d86:	601a      	str	r2, [r3, #0]
 8015d88:	f3bf 8f4f 	dsb	sy
 8015d8c:	f3bf 8f6f 	isb	sy
 8015d90:	e00a      	b.n	8015da8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d007      	beq.n	8015da8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015d98:	4b39      	ldr	r3, [pc, #228]	; (8015e80 <xQueueGenericSend+0x1f8>)
 8015d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d9e:	601a      	str	r2, [r3, #0]
 8015da0:	f3bf 8f4f 	dsb	sy
 8015da4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015da8:	f002 fac4 	bl	8018334 <vPortExitCritical>
				return pdPASS;
 8015dac:	2301      	movs	r3, #1
 8015dae:	e063      	b.n	8015e78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d103      	bne.n	8015dbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015db6:	f002 fabd 	bl	8018334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	e05c      	b.n	8015e78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d106      	bne.n	8015dd2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015dc4:	f107 0314 	add.w	r3, r7, #20
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f001 fabf 	bl	801734c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015dce:	2301      	movs	r3, #1
 8015dd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015dd2:	f002 faaf 	bl	8018334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015dd6:	f001 f819 	bl	8016e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015dda:	f002 fa7b 	bl	80182d4 <vPortEnterCritical>
 8015dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015de4:	b25b      	sxtb	r3, r3
 8015de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dea:	d103      	bne.n	8015df4 <xQueueGenericSend+0x16c>
 8015dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dee:	2200      	movs	r2, #0
 8015df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015dfa:	b25b      	sxtb	r3, r3
 8015dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e00:	d103      	bne.n	8015e0a <xQueueGenericSend+0x182>
 8015e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e04:	2200      	movs	r2, #0
 8015e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015e0a:	f002 fa93 	bl	8018334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e0e:	1d3a      	adds	r2, r7, #4
 8015e10:	f107 0314 	add.w	r3, r7, #20
 8015e14:	4611      	mov	r1, r2
 8015e16:	4618      	mov	r0, r3
 8015e18:	f001 faae 	bl	8017378 <xTaskCheckForTimeOut>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d124      	bne.n	8015e6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e24:	f000 fcf5 	bl	8016812 <prvIsQueueFull>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d018      	beq.n	8015e60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e30:	3310      	adds	r3, #16
 8015e32:	687a      	ldr	r2, [r7, #4]
 8015e34:	4611      	mov	r1, r2
 8015e36:	4618      	mov	r0, r3
 8015e38:	f001 f9d4 	bl	80171e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e3e:	f000 fc80 	bl	8016742 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015e42:	f000 fff1 	bl	8016e28 <xTaskResumeAll>
 8015e46:	4603      	mov	r3, r0
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	f47f af7c 	bne.w	8015d46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015e4e:	4b0c      	ldr	r3, [pc, #48]	; (8015e80 <xQueueGenericSend+0x1f8>)
 8015e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e54:	601a      	str	r2, [r3, #0]
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	f3bf 8f6f 	isb	sy
 8015e5e:	e772      	b.n	8015d46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e62:	f000 fc6e 	bl	8016742 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e66:	f000 ffdf 	bl	8016e28 <xTaskResumeAll>
 8015e6a:	e76c      	b.n	8015d46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e6e:	f000 fc68 	bl	8016742 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e72:	f000 ffd9 	bl	8016e28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015e76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015e78:	4618      	mov	r0, r3
 8015e7a:	3738      	adds	r7, #56	; 0x38
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	bd80      	pop	{r7, pc}
 8015e80:	e000ed04 	.word	0xe000ed04

08015e84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b090      	sub	sp, #64	; 0x40
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
 8015e90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d10a      	bne.n	8015eb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ea0:	f383 8811 	msr	BASEPRI, r3
 8015ea4:	f3bf 8f6f 	isb	sy
 8015ea8:	f3bf 8f4f 	dsb	sy
 8015eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015eae:	bf00      	nop
 8015eb0:	e7fe      	b.n	8015eb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d103      	bne.n	8015ec0 <xQueueGenericSendFromISR+0x3c>
 8015eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d101      	bne.n	8015ec4 <xQueueGenericSendFromISR+0x40>
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	e000      	b.n	8015ec6 <xQueueGenericSendFromISR+0x42>
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d10a      	bne.n	8015ee0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ece:	f383 8811 	msr	BASEPRI, r3
 8015ed2:	f3bf 8f6f 	isb	sy
 8015ed6:	f3bf 8f4f 	dsb	sy
 8015eda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015edc:	bf00      	nop
 8015ede:	e7fe      	b.n	8015ede <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	2b02      	cmp	r3, #2
 8015ee4:	d103      	bne.n	8015eee <xQueueGenericSendFromISR+0x6a>
 8015ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d101      	bne.n	8015ef2 <xQueueGenericSendFromISR+0x6e>
 8015eee:	2301      	movs	r3, #1
 8015ef0:	e000      	b.n	8015ef4 <xQueueGenericSendFromISR+0x70>
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d10a      	bne.n	8015f0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015efc:	f383 8811 	msr	BASEPRI, r3
 8015f00:	f3bf 8f6f 	isb	sy
 8015f04:	f3bf 8f4f 	dsb	sy
 8015f08:	623b      	str	r3, [r7, #32]
}
 8015f0a:	bf00      	nop
 8015f0c:	e7fe      	b.n	8015f0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015f0e:	f002 fac3 	bl	8018498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015f12:	f3ef 8211 	mrs	r2, BASEPRI
 8015f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f1a:	f383 8811 	msr	BASEPRI, r3
 8015f1e:	f3bf 8f6f 	isb	sy
 8015f22:	f3bf 8f4f 	dsb	sy
 8015f26:	61fa      	str	r2, [r7, #28]
 8015f28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015f2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015f2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d302      	bcc.n	8015f40 <xQueueGenericSendFromISR+0xbc>
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	2b02      	cmp	r3, #2
 8015f3e:	d12f      	bne.n	8015fa0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015f50:	683a      	ldr	r2, [r7, #0]
 8015f52:	68b9      	ldr	r1, [r7, #8]
 8015f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f56:	f000 fb64 	bl	8016622 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015f5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f62:	d112      	bne.n	8015f8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d016      	beq.n	8015f9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f6e:	3324      	adds	r3, #36	; 0x24
 8015f70:	4618      	mov	r0, r3
 8015f72:	f001 f987 	bl	8017284 <xTaskRemoveFromEventList>
 8015f76:	4603      	mov	r3, r0
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d00e      	beq.n	8015f9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d00b      	beq.n	8015f9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	2201      	movs	r2, #1
 8015f86:	601a      	str	r2, [r3, #0]
 8015f88:	e007      	b.n	8015f9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f8e:	3301      	adds	r3, #1
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	b25a      	sxtb	r2, r3
 8015f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015f9e:	e001      	b.n	8015fa4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fa6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015fae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3740      	adds	r7, #64	; 0x40
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b08e      	sub	sp, #56	; 0x38
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	6078      	str	r0, [r7, #4]
 8015fc2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d10a      	bne.n	8015fe4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd2:	f383 8811 	msr	BASEPRI, r3
 8015fd6:	f3bf 8f6f 	isb	sy
 8015fda:	f3bf 8f4f 	dsb	sy
 8015fde:	623b      	str	r3, [r7, #32]
}
 8015fe0:	bf00      	nop
 8015fe2:	e7fe      	b.n	8015fe2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d00a      	beq.n	8016002 <xQueueGiveFromISR+0x48>
	__asm volatile
 8015fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff0:	f383 8811 	msr	BASEPRI, r3
 8015ff4:	f3bf 8f6f 	isb	sy
 8015ff8:	f3bf 8f4f 	dsb	sy
 8015ffc:	61fb      	str	r3, [r7, #28]
}
 8015ffe:	bf00      	nop
 8016000:	e7fe      	b.n	8016000 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d103      	bne.n	8016012 <xQueueGiveFromISR+0x58>
 801600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600c:	689b      	ldr	r3, [r3, #8]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d101      	bne.n	8016016 <xQueueGiveFromISR+0x5c>
 8016012:	2301      	movs	r3, #1
 8016014:	e000      	b.n	8016018 <xQueueGiveFromISR+0x5e>
 8016016:	2300      	movs	r3, #0
 8016018:	2b00      	cmp	r3, #0
 801601a:	d10a      	bne.n	8016032 <xQueueGiveFromISR+0x78>
	__asm volatile
 801601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016020:	f383 8811 	msr	BASEPRI, r3
 8016024:	f3bf 8f6f 	isb	sy
 8016028:	f3bf 8f4f 	dsb	sy
 801602c:	61bb      	str	r3, [r7, #24]
}
 801602e:	bf00      	nop
 8016030:	e7fe      	b.n	8016030 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016032:	f002 fa31 	bl	8018498 <vPortValidateInterruptPriority>
	__asm volatile
 8016036:	f3ef 8211 	mrs	r2, BASEPRI
 801603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801603e:	f383 8811 	msr	BASEPRI, r3
 8016042:	f3bf 8f6f 	isb	sy
 8016046:	f3bf 8f4f 	dsb	sy
 801604a:	617a      	str	r2, [r7, #20]
 801604c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801604e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016050:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016056:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801605c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801605e:	429a      	cmp	r2, r3
 8016060:	d22b      	bcs.n	80160ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801606e:	1c5a      	adds	r2, r3, #1
 8016070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016072:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801607c:	d112      	bne.n	80160a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016082:	2b00      	cmp	r3, #0
 8016084:	d016      	beq.n	80160b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016088:	3324      	adds	r3, #36	; 0x24
 801608a:	4618      	mov	r0, r3
 801608c:	f001 f8fa 	bl	8017284 <xTaskRemoveFromEventList>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d00e      	beq.n	80160b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016096:	683b      	ldr	r3, [r7, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d00b      	beq.n	80160b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	2201      	movs	r2, #1
 80160a0:	601a      	str	r2, [r3, #0]
 80160a2:	e007      	b.n	80160b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80160a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160a8:	3301      	adds	r3, #1
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	b25a      	sxtb	r2, r3
 80160ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80160b4:	2301      	movs	r3, #1
 80160b6:	637b      	str	r3, [r7, #52]	; 0x34
 80160b8:	e001      	b.n	80160be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80160ba:	2300      	movs	r3, #0
 80160bc:	637b      	str	r3, [r7, #52]	; 0x34
 80160be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	f383 8811 	msr	BASEPRI, r3
}
 80160c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80160ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3738      	adds	r7, #56	; 0x38
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b08c      	sub	sp, #48	; 0x30
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80160e0:	2300      	movs	r3, #0
 80160e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80160e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d10a      	bne.n	8016104 <xQueueReceive+0x30>
	__asm volatile
 80160ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f2:	f383 8811 	msr	BASEPRI, r3
 80160f6:	f3bf 8f6f 	isb	sy
 80160fa:	f3bf 8f4f 	dsb	sy
 80160fe:	623b      	str	r3, [r7, #32]
}
 8016100:	bf00      	nop
 8016102:	e7fe      	b.n	8016102 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d103      	bne.n	8016112 <xQueueReceive+0x3e>
 801610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801610e:	2b00      	cmp	r3, #0
 8016110:	d101      	bne.n	8016116 <xQueueReceive+0x42>
 8016112:	2301      	movs	r3, #1
 8016114:	e000      	b.n	8016118 <xQueueReceive+0x44>
 8016116:	2300      	movs	r3, #0
 8016118:	2b00      	cmp	r3, #0
 801611a:	d10a      	bne.n	8016132 <xQueueReceive+0x5e>
	__asm volatile
 801611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016120:	f383 8811 	msr	BASEPRI, r3
 8016124:	f3bf 8f6f 	isb	sy
 8016128:	f3bf 8f4f 	dsb	sy
 801612c:	61fb      	str	r3, [r7, #28]
}
 801612e:	bf00      	nop
 8016130:	e7fe      	b.n	8016130 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016132:	f001 fa79 	bl	8017628 <xTaskGetSchedulerState>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	d102      	bne.n	8016142 <xQueueReceive+0x6e>
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d101      	bne.n	8016146 <xQueueReceive+0x72>
 8016142:	2301      	movs	r3, #1
 8016144:	e000      	b.n	8016148 <xQueueReceive+0x74>
 8016146:	2300      	movs	r3, #0
 8016148:	2b00      	cmp	r3, #0
 801614a:	d10a      	bne.n	8016162 <xQueueReceive+0x8e>
	__asm volatile
 801614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016150:	f383 8811 	msr	BASEPRI, r3
 8016154:	f3bf 8f6f 	isb	sy
 8016158:	f3bf 8f4f 	dsb	sy
 801615c:	61bb      	str	r3, [r7, #24]
}
 801615e:	bf00      	nop
 8016160:	e7fe      	b.n	8016160 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016162:	f002 f8b7 	bl	80182d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801616a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801616e:	2b00      	cmp	r3, #0
 8016170:	d01f      	beq.n	80161b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016172:	68b9      	ldr	r1, [r7, #8]
 8016174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016176:	f000 fabe 	bl	80166f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617c:	1e5a      	subs	r2, r3, #1
 801617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016180:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016184:	691b      	ldr	r3, [r3, #16]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d00f      	beq.n	80161aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801618c:	3310      	adds	r3, #16
 801618e:	4618      	mov	r0, r3
 8016190:	f001 f878 	bl	8017284 <xTaskRemoveFromEventList>
 8016194:	4603      	mov	r3, r0
 8016196:	2b00      	cmp	r3, #0
 8016198:	d007      	beq.n	80161aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801619a:	4b3d      	ldr	r3, [pc, #244]	; (8016290 <xQueueReceive+0x1bc>)
 801619c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161a0:	601a      	str	r2, [r3, #0]
 80161a2:	f3bf 8f4f 	dsb	sy
 80161a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80161aa:	f002 f8c3 	bl	8018334 <vPortExitCritical>
				return pdPASS;
 80161ae:	2301      	movs	r3, #1
 80161b0:	e069      	b.n	8016286 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d103      	bne.n	80161c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80161b8:	f002 f8bc 	bl	8018334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80161bc:	2300      	movs	r3, #0
 80161be:	e062      	b.n	8016286 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80161c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d106      	bne.n	80161d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80161c6:	f107 0310 	add.w	r3, r7, #16
 80161ca:	4618      	mov	r0, r3
 80161cc:	f001 f8be 	bl	801734c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80161d0:	2301      	movs	r3, #1
 80161d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80161d4:	f002 f8ae 	bl	8018334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80161d8:	f000 fe18 	bl	8016e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80161dc:	f002 f87a 	bl	80182d4 <vPortEnterCritical>
 80161e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161e6:	b25b      	sxtb	r3, r3
 80161e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ec:	d103      	bne.n	80161f6 <xQueueReceive+0x122>
 80161ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f0:	2200      	movs	r2, #0
 80161f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80161f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161fc:	b25b      	sxtb	r3, r3
 80161fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016202:	d103      	bne.n	801620c <xQueueReceive+0x138>
 8016204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016206:	2200      	movs	r2, #0
 8016208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801620c:	f002 f892 	bl	8018334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016210:	1d3a      	adds	r2, r7, #4
 8016212:	f107 0310 	add.w	r3, r7, #16
 8016216:	4611      	mov	r1, r2
 8016218:	4618      	mov	r0, r3
 801621a:	f001 f8ad 	bl	8017378 <xTaskCheckForTimeOut>
 801621e:	4603      	mov	r3, r0
 8016220:	2b00      	cmp	r3, #0
 8016222:	d123      	bne.n	801626c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016226:	f000 fade 	bl	80167e6 <prvIsQueueEmpty>
 801622a:	4603      	mov	r3, r0
 801622c:	2b00      	cmp	r3, #0
 801622e:	d017      	beq.n	8016260 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016232:	3324      	adds	r3, #36	; 0x24
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	4611      	mov	r1, r2
 8016238:	4618      	mov	r0, r3
 801623a:	f000 ffd3 	bl	80171e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801623e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016240:	f000 fa7f 	bl	8016742 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016244:	f000 fdf0 	bl	8016e28 <xTaskResumeAll>
 8016248:	4603      	mov	r3, r0
 801624a:	2b00      	cmp	r3, #0
 801624c:	d189      	bne.n	8016162 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801624e:	4b10      	ldr	r3, [pc, #64]	; (8016290 <xQueueReceive+0x1bc>)
 8016250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016254:	601a      	str	r2, [r3, #0]
 8016256:	f3bf 8f4f 	dsb	sy
 801625a:	f3bf 8f6f 	isb	sy
 801625e:	e780      	b.n	8016162 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016262:	f000 fa6e 	bl	8016742 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016266:	f000 fddf 	bl	8016e28 <xTaskResumeAll>
 801626a:	e77a      	b.n	8016162 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801626e:	f000 fa68 	bl	8016742 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016272:	f000 fdd9 	bl	8016e28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016278:	f000 fab5 	bl	80167e6 <prvIsQueueEmpty>
 801627c:	4603      	mov	r3, r0
 801627e:	2b00      	cmp	r3, #0
 8016280:	f43f af6f 	beq.w	8016162 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016286:	4618      	mov	r0, r3
 8016288:	3730      	adds	r7, #48	; 0x30
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	e000ed04 	.word	0xe000ed04

08016294 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b08e      	sub	sp, #56	; 0x38
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801629e:	2300      	movs	r3, #0
 80162a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80162a6:	2300      	movs	r3, #0
 80162a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80162aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d10a      	bne.n	80162c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80162b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b4:	f383 8811 	msr	BASEPRI, r3
 80162b8:	f3bf 8f6f 	isb	sy
 80162bc:	f3bf 8f4f 	dsb	sy
 80162c0:	623b      	str	r3, [r7, #32]
}
 80162c2:	bf00      	nop
 80162c4:	e7fe      	b.n	80162c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80162c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d00a      	beq.n	80162e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80162ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d2:	f383 8811 	msr	BASEPRI, r3
 80162d6:	f3bf 8f6f 	isb	sy
 80162da:	f3bf 8f4f 	dsb	sy
 80162de:	61fb      	str	r3, [r7, #28]
}
 80162e0:	bf00      	nop
 80162e2:	e7fe      	b.n	80162e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80162e4:	f001 f9a0 	bl	8017628 <xTaskGetSchedulerState>
 80162e8:	4603      	mov	r3, r0
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d102      	bne.n	80162f4 <xQueueSemaphoreTake+0x60>
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d101      	bne.n	80162f8 <xQueueSemaphoreTake+0x64>
 80162f4:	2301      	movs	r3, #1
 80162f6:	e000      	b.n	80162fa <xQueueSemaphoreTake+0x66>
 80162f8:	2300      	movs	r3, #0
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d10a      	bne.n	8016314 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80162fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016302:	f383 8811 	msr	BASEPRI, r3
 8016306:	f3bf 8f6f 	isb	sy
 801630a:	f3bf 8f4f 	dsb	sy
 801630e:	61bb      	str	r3, [r7, #24]
}
 8016310:	bf00      	nop
 8016312:	e7fe      	b.n	8016312 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016314:	f001 ffde 	bl	80182d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801631c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016320:	2b00      	cmp	r3, #0
 8016322:	d024      	beq.n	801636e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016326:	1e5a      	subs	r2, r3, #1
 8016328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d104      	bne.n	801633e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016334:	f001 faee 	bl	8017914 <pvTaskIncrementMutexHeldCount>
 8016338:	4602      	mov	r2, r0
 801633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016340:	691b      	ldr	r3, [r3, #16]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d00f      	beq.n	8016366 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016348:	3310      	adds	r3, #16
 801634a:	4618      	mov	r0, r3
 801634c:	f000 ff9a 	bl	8017284 <xTaskRemoveFromEventList>
 8016350:	4603      	mov	r3, r0
 8016352:	2b00      	cmp	r3, #0
 8016354:	d007      	beq.n	8016366 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016356:	4b54      	ldr	r3, [pc, #336]	; (80164a8 <xQueueSemaphoreTake+0x214>)
 8016358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801635c:	601a      	str	r2, [r3, #0]
 801635e:	f3bf 8f4f 	dsb	sy
 8016362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016366:	f001 ffe5 	bl	8018334 <vPortExitCritical>
				return pdPASS;
 801636a:	2301      	movs	r3, #1
 801636c:	e097      	b.n	801649e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d111      	bne.n	8016398 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016376:	2b00      	cmp	r3, #0
 8016378:	d00a      	beq.n	8016390 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801637e:	f383 8811 	msr	BASEPRI, r3
 8016382:	f3bf 8f6f 	isb	sy
 8016386:	f3bf 8f4f 	dsb	sy
 801638a:	617b      	str	r3, [r7, #20]
}
 801638c:	bf00      	nop
 801638e:	e7fe      	b.n	801638e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016390:	f001 ffd0 	bl	8018334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016394:	2300      	movs	r3, #0
 8016396:	e082      	b.n	801649e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801639a:	2b00      	cmp	r3, #0
 801639c:	d106      	bne.n	80163ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801639e:	f107 030c 	add.w	r3, r7, #12
 80163a2:	4618      	mov	r0, r3
 80163a4:	f000 ffd2 	bl	801734c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80163a8:	2301      	movs	r3, #1
 80163aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80163ac:	f001 ffc2 	bl	8018334 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80163b0:	f000 fd2c 	bl	8016e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80163b4:	f001 ff8e 	bl	80182d4 <vPortEnterCritical>
 80163b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163be:	b25b      	sxtb	r3, r3
 80163c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163c4:	d103      	bne.n	80163ce <xQueueSemaphoreTake+0x13a>
 80163c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c8:	2200      	movs	r2, #0
 80163ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80163ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80163d4:	b25b      	sxtb	r3, r3
 80163d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163da:	d103      	bne.n	80163e4 <xQueueSemaphoreTake+0x150>
 80163dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163de:	2200      	movs	r2, #0
 80163e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80163e4:	f001 ffa6 	bl	8018334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80163e8:	463a      	mov	r2, r7
 80163ea:	f107 030c 	add.w	r3, r7, #12
 80163ee:	4611      	mov	r1, r2
 80163f0:	4618      	mov	r0, r3
 80163f2:	f000 ffc1 	bl	8017378 <xTaskCheckForTimeOut>
 80163f6:	4603      	mov	r3, r0
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d132      	bne.n	8016462 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80163fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80163fe:	f000 f9f2 	bl	80167e6 <prvIsQueueEmpty>
 8016402:	4603      	mov	r3, r0
 8016404:	2b00      	cmp	r3, #0
 8016406:	d026      	beq.n	8016456 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d109      	bne.n	8016424 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016410:	f001 ff60 	bl	80182d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016416:	689b      	ldr	r3, [r3, #8]
 8016418:	4618      	mov	r0, r3
 801641a:	f001 f923 	bl	8017664 <xTaskPriorityInherit>
 801641e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016420:	f001 ff88 	bl	8018334 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016426:	3324      	adds	r3, #36	; 0x24
 8016428:	683a      	ldr	r2, [r7, #0]
 801642a:	4611      	mov	r1, r2
 801642c:	4618      	mov	r0, r3
 801642e:	f000 fed9 	bl	80171e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016434:	f000 f985 	bl	8016742 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016438:	f000 fcf6 	bl	8016e28 <xTaskResumeAll>
 801643c:	4603      	mov	r3, r0
 801643e:	2b00      	cmp	r3, #0
 8016440:	f47f af68 	bne.w	8016314 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016444:	4b18      	ldr	r3, [pc, #96]	; (80164a8 <xQueueSemaphoreTake+0x214>)
 8016446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801644a:	601a      	str	r2, [r3, #0]
 801644c:	f3bf 8f4f 	dsb	sy
 8016450:	f3bf 8f6f 	isb	sy
 8016454:	e75e      	b.n	8016314 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016458:	f000 f973 	bl	8016742 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801645c:	f000 fce4 	bl	8016e28 <xTaskResumeAll>
 8016460:	e758      	b.n	8016314 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016464:	f000 f96d 	bl	8016742 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016468:	f000 fcde 	bl	8016e28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801646c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801646e:	f000 f9ba 	bl	80167e6 <prvIsQueueEmpty>
 8016472:	4603      	mov	r3, r0
 8016474:	2b00      	cmp	r3, #0
 8016476:	f43f af4d 	beq.w	8016314 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801647c:	2b00      	cmp	r3, #0
 801647e:	d00d      	beq.n	801649c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016480:	f001 ff28 	bl	80182d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016486:	f000 f8b4 	bl	80165f2 <prvGetDisinheritPriorityAfterTimeout>
 801648a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648e:	689b      	ldr	r3, [r3, #8]
 8016490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016492:	4618      	mov	r0, r3
 8016494:	f001 f9bc 	bl	8017810 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016498:	f001 ff4c 	bl	8018334 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801649c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3738      	adds	r7, #56	; 0x38
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	e000ed04 	.word	0xe000ed04

080164ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b08e      	sub	sp, #56	; 0x38
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	60b9      	str	r1, [r7, #8]
 80164b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80164bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d10a      	bne.n	80164d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80164c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c6:	f383 8811 	msr	BASEPRI, r3
 80164ca:	f3bf 8f6f 	isb	sy
 80164ce:	f3bf 8f4f 	dsb	sy
 80164d2:	623b      	str	r3, [r7, #32]
}
 80164d4:	bf00      	nop
 80164d6:	e7fe      	b.n	80164d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d103      	bne.n	80164e6 <xQueueReceiveFromISR+0x3a>
 80164de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d101      	bne.n	80164ea <xQueueReceiveFromISR+0x3e>
 80164e6:	2301      	movs	r3, #1
 80164e8:	e000      	b.n	80164ec <xQueueReceiveFromISR+0x40>
 80164ea:	2300      	movs	r3, #0
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d10a      	bne.n	8016506 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80164f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f4:	f383 8811 	msr	BASEPRI, r3
 80164f8:	f3bf 8f6f 	isb	sy
 80164fc:	f3bf 8f4f 	dsb	sy
 8016500:	61fb      	str	r3, [r7, #28]
}
 8016502:	bf00      	nop
 8016504:	e7fe      	b.n	8016504 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016506:	f001 ffc7 	bl	8018498 <vPortValidateInterruptPriority>
	__asm volatile
 801650a:	f3ef 8211 	mrs	r2, BASEPRI
 801650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016512:	f383 8811 	msr	BASEPRI, r3
 8016516:	f3bf 8f6f 	isb	sy
 801651a:	f3bf 8f4f 	dsb	sy
 801651e:	61ba      	str	r2, [r7, #24]
 8016520:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016522:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016524:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801652a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652e:	2b00      	cmp	r3, #0
 8016530:	d02f      	beq.n	8016592 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801653c:	68b9      	ldr	r1, [r7, #8]
 801653e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016540:	f000 f8d9 	bl	80166f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016546:	1e5a      	subs	r2, r3, #1
 8016548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801654c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016554:	d112      	bne.n	801657c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016558:	691b      	ldr	r3, [r3, #16]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d016      	beq.n	801658c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016560:	3310      	adds	r3, #16
 8016562:	4618      	mov	r0, r3
 8016564:	f000 fe8e 	bl	8017284 <xTaskRemoveFromEventList>
 8016568:	4603      	mov	r3, r0
 801656a:	2b00      	cmp	r3, #0
 801656c:	d00e      	beq.n	801658c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d00b      	beq.n	801658c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2201      	movs	r2, #1
 8016578:	601a      	str	r2, [r3, #0]
 801657a:	e007      	b.n	801658c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801657c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016580:	3301      	adds	r3, #1
 8016582:	b2db      	uxtb	r3, r3
 8016584:	b25a      	sxtb	r2, r3
 8016586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801658c:	2301      	movs	r3, #1
 801658e:	637b      	str	r3, [r7, #52]	; 0x34
 8016590:	e001      	b.n	8016596 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016592:	2300      	movs	r3, #0
 8016594:	637b      	str	r3, [r7, #52]	; 0x34
 8016596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016598:	613b      	str	r3, [r7, #16]
	__asm volatile
 801659a:	693b      	ldr	r3, [r7, #16]
 801659c:	f383 8811 	msr	BASEPRI, r3
}
 80165a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	3738      	adds	r7, #56	; 0x38
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}

080165ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b084      	sub	sp, #16
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d10a      	bne.n	80165d4 <vQueueDelete+0x28>
	__asm volatile
 80165be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165c2:	f383 8811 	msr	BASEPRI, r3
 80165c6:	f3bf 8f6f 	isb	sy
 80165ca:	f3bf 8f4f 	dsb	sy
 80165ce:	60bb      	str	r3, [r7, #8]
}
 80165d0:	bf00      	nop
 80165d2:	e7fe      	b.n	80165d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80165d4:	68f8      	ldr	r0, [r7, #12]
 80165d6:	f000 f95f 	bl	8016898 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d102      	bne.n	80165ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f002 f863 	bl	80186b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80165ea:	bf00      	nop
 80165ec:	3710      	adds	r7, #16
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80165f2:	b480      	push	{r7}
 80165f4:	b085      	sub	sp, #20
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d006      	beq.n	8016610 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801660c:	60fb      	str	r3, [r7, #12]
 801660e:	e001      	b.n	8016614 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016610:	2300      	movs	r3, #0
 8016612:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016614:	68fb      	ldr	r3, [r7, #12]
	}
 8016616:	4618      	mov	r0, r3
 8016618:	3714      	adds	r7, #20
 801661a:	46bd      	mov	sp, r7
 801661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016620:	4770      	bx	lr

08016622 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016622:	b580      	push	{r7, lr}
 8016624:	b086      	sub	sp, #24
 8016626:	af00      	add	r7, sp, #0
 8016628:	60f8      	str	r0, [r7, #12]
 801662a:	60b9      	str	r1, [r7, #8]
 801662c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801662e:	2300      	movs	r3, #0
 8016630:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016636:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801663c:	2b00      	cmp	r3, #0
 801663e:	d10d      	bne.n	801665c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d14d      	bne.n	80166e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	689b      	ldr	r3, [r3, #8]
 801664c:	4618      	mov	r0, r3
 801664e:	f001 f871 	bl	8017734 <xTaskPriorityDisinherit>
 8016652:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	2200      	movs	r2, #0
 8016658:	609a      	str	r2, [r3, #8]
 801665a:	e043      	b.n	80166e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d119      	bne.n	8016696 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	6858      	ldr	r0, [r3, #4]
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801666a:	461a      	mov	r2, r3
 801666c:	68b9      	ldr	r1, [r7, #8]
 801666e:	f00f fb6d 	bl	8025d4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	685a      	ldr	r2, [r3, #4]
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801667a:	441a      	add	r2, r3
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	685a      	ldr	r2, [r3, #4]
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	689b      	ldr	r3, [r3, #8]
 8016688:	429a      	cmp	r2, r3
 801668a:	d32b      	bcc.n	80166e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	681a      	ldr	r2, [r3, #0]
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	605a      	str	r2, [r3, #4]
 8016694:	e026      	b.n	80166e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	68d8      	ldr	r0, [r3, #12]
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801669e:	461a      	mov	r2, r3
 80166a0:	68b9      	ldr	r1, [r7, #8]
 80166a2:	f00f fb53 	bl	8025d4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	68da      	ldr	r2, [r3, #12]
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166ae:	425b      	negs	r3, r3
 80166b0:	441a      	add	r2, r3
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	68da      	ldr	r2, [r3, #12]
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	429a      	cmp	r2, r3
 80166c0:	d207      	bcs.n	80166d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	689a      	ldr	r2, [r3, #8]
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166ca:	425b      	negs	r3, r3
 80166cc:	441a      	add	r2, r3
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2b02      	cmp	r3, #2
 80166d6:	d105      	bne.n	80166e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80166d8:	693b      	ldr	r3, [r7, #16]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d002      	beq.n	80166e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	3b01      	subs	r3, #1
 80166e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	1c5a      	adds	r2, r3, #1
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80166ec:	697b      	ldr	r3, [r7, #20]
}
 80166ee:	4618      	mov	r0, r3
 80166f0:	3718      	adds	r7, #24
 80166f2:	46bd      	mov	sp, r7
 80166f4:	bd80      	pop	{r7, pc}

080166f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b082      	sub	sp, #8
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
 80166fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016704:	2b00      	cmp	r3, #0
 8016706:	d018      	beq.n	801673a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	68da      	ldr	r2, [r3, #12]
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016710:	441a      	add	r2, r3
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	68da      	ldr	r2, [r3, #12]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	689b      	ldr	r3, [r3, #8]
 801671e:	429a      	cmp	r2, r3
 8016720:	d303      	bcc.n	801672a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681a      	ldr	r2, [r3, #0]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	68d9      	ldr	r1, [r3, #12]
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016732:	461a      	mov	r2, r3
 8016734:	6838      	ldr	r0, [r7, #0]
 8016736:	f00f fb09 	bl	8025d4c <memcpy>
	}
}
 801673a:	bf00      	nop
 801673c:	3708      	adds	r7, #8
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}

08016742 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016742:	b580      	push	{r7, lr}
 8016744:	b084      	sub	sp, #16
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801674a:	f001 fdc3 	bl	80182d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016754:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016756:	e011      	b.n	801677c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801675c:	2b00      	cmp	r3, #0
 801675e:	d012      	beq.n	8016786 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	3324      	adds	r3, #36	; 0x24
 8016764:	4618      	mov	r0, r3
 8016766:	f000 fd8d 	bl	8017284 <xTaskRemoveFromEventList>
 801676a:	4603      	mov	r3, r0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d001      	beq.n	8016774 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016770:	f000 fe64 	bl	801743c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016774:	7bfb      	ldrb	r3, [r7, #15]
 8016776:	3b01      	subs	r3, #1
 8016778:	b2db      	uxtb	r3, r3
 801677a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801677c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016780:	2b00      	cmp	r3, #0
 8016782:	dce9      	bgt.n	8016758 <prvUnlockQueue+0x16>
 8016784:	e000      	b.n	8016788 <prvUnlockQueue+0x46>
					break;
 8016786:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	22ff      	movs	r2, #255	; 0xff
 801678c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016790:	f001 fdd0 	bl	8018334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016794:	f001 fd9e 	bl	80182d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801679e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80167a0:	e011      	b.n	80167c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	691b      	ldr	r3, [r3, #16]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d012      	beq.n	80167d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	3310      	adds	r3, #16
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 fd68 	bl	8017284 <xTaskRemoveFromEventList>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d001      	beq.n	80167be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80167ba:	f000 fe3f 	bl	801743c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80167be:	7bbb      	ldrb	r3, [r7, #14]
 80167c0:	3b01      	subs	r3, #1
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80167c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	dce9      	bgt.n	80167a2 <prvUnlockQueue+0x60>
 80167ce:	e000      	b.n	80167d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80167d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	22ff      	movs	r2, #255	; 0xff
 80167d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80167da:	f001 fdab 	bl	8018334 <vPortExitCritical>
}
 80167de:	bf00      	nop
 80167e0:	3710      	adds	r7, #16
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80167e6:	b580      	push	{r7, lr}
 80167e8:	b084      	sub	sp, #16
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80167ee:	f001 fd71 	bl	80182d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d102      	bne.n	8016800 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80167fa:	2301      	movs	r3, #1
 80167fc:	60fb      	str	r3, [r7, #12]
 80167fe:	e001      	b.n	8016804 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016800:	2300      	movs	r3, #0
 8016802:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016804:	f001 fd96 	bl	8018334 <vPortExitCritical>

	return xReturn;
 8016808:	68fb      	ldr	r3, [r7, #12]
}
 801680a:	4618      	mov	r0, r3
 801680c:	3710      	adds	r7, #16
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}

08016812 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016812:	b580      	push	{r7, lr}
 8016814:	b084      	sub	sp, #16
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801681a:	f001 fd5b 	bl	80182d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016826:	429a      	cmp	r2, r3
 8016828:	d102      	bne.n	8016830 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801682a:	2301      	movs	r3, #1
 801682c:	60fb      	str	r3, [r7, #12]
 801682e:	e001      	b.n	8016834 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016830:	2300      	movs	r3, #0
 8016832:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016834:	f001 fd7e 	bl	8018334 <vPortExitCritical>

	return xReturn;
 8016838:	68fb      	ldr	r3, [r7, #12]
}
 801683a:	4618      	mov	r0, r3
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
	...

08016844 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016844:	b480      	push	{r7}
 8016846:	b085      	sub	sp, #20
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801684e:	2300      	movs	r3, #0
 8016850:	60fb      	str	r3, [r7, #12]
 8016852:	e014      	b.n	801687e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016854:	4a0f      	ldr	r2, [pc, #60]	; (8016894 <vQueueAddToRegistry+0x50>)
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d10b      	bne.n	8016878 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016860:	490c      	ldr	r1, [pc, #48]	; (8016894 <vQueueAddToRegistry+0x50>)
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	683a      	ldr	r2, [r7, #0]
 8016866:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801686a:	4a0a      	ldr	r2, [pc, #40]	; (8016894 <vQueueAddToRegistry+0x50>)
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	00db      	lsls	r3, r3, #3
 8016870:	4413      	add	r3, r2
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016876:	e006      	b.n	8016886 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	3301      	adds	r3, #1
 801687c:	60fb      	str	r3, [r7, #12]
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2b07      	cmp	r3, #7
 8016882:	d9e7      	bls.n	8016854 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016884:	bf00      	nop
 8016886:	bf00      	nop
 8016888:	3714      	adds	r7, #20
 801688a:	46bd      	mov	sp, r7
 801688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016890:	4770      	bx	lr
 8016892:	bf00      	nop
 8016894:	24005c38 	.word	0x24005c38

08016898 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016898:	b480      	push	{r7}
 801689a:	b085      	sub	sp, #20
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80168a0:	2300      	movs	r3, #0
 80168a2:	60fb      	str	r3, [r7, #12]
 80168a4:	e016      	b.n	80168d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80168a6:	4a10      	ldr	r2, [pc, #64]	; (80168e8 <vQueueUnregisterQueue+0x50>)
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	00db      	lsls	r3, r3, #3
 80168ac:	4413      	add	r3, r2
 80168ae:	685b      	ldr	r3, [r3, #4]
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	429a      	cmp	r2, r3
 80168b4:	d10b      	bne.n	80168ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80168b6:	4a0c      	ldr	r2, [pc, #48]	; (80168e8 <vQueueUnregisterQueue+0x50>)
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2100      	movs	r1, #0
 80168bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80168c0:	4a09      	ldr	r2, [pc, #36]	; (80168e8 <vQueueUnregisterQueue+0x50>)
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	00db      	lsls	r3, r3, #3
 80168c6:	4413      	add	r3, r2
 80168c8:	2200      	movs	r2, #0
 80168ca:	605a      	str	r2, [r3, #4]
				break;
 80168cc:	e006      	b.n	80168dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	3301      	adds	r3, #1
 80168d2:	60fb      	str	r3, [r7, #12]
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	2b07      	cmp	r3, #7
 80168d8:	d9e5      	bls.n	80168a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80168da:	bf00      	nop
 80168dc:	bf00      	nop
 80168de:	3714      	adds	r7, #20
 80168e0:	46bd      	mov	sp, r7
 80168e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e6:	4770      	bx	lr
 80168e8:	24005c38 	.word	0x24005c38

080168ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b086      	sub	sp, #24
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	60f8      	str	r0, [r7, #12]
 80168f4:	60b9      	str	r1, [r7, #8]
 80168f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80168fc:	f001 fcea 	bl	80182d4 <vPortEnterCritical>
 8016900:	697b      	ldr	r3, [r7, #20]
 8016902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016906:	b25b      	sxtb	r3, r3
 8016908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801690c:	d103      	bne.n	8016916 <vQueueWaitForMessageRestricted+0x2a>
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	2200      	movs	r2, #0
 8016912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016916:	697b      	ldr	r3, [r7, #20]
 8016918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801691c:	b25b      	sxtb	r3, r3
 801691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016922:	d103      	bne.n	801692c <vQueueWaitForMessageRestricted+0x40>
 8016924:	697b      	ldr	r3, [r7, #20]
 8016926:	2200      	movs	r2, #0
 8016928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801692c:	f001 fd02 	bl	8018334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016930:	697b      	ldr	r3, [r7, #20]
 8016932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016934:	2b00      	cmp	r3, #0
 8016936:	d106      	bne.n	8016946 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	3324      	adds	r3, #36	; 0x24
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	68b9      	ldr	r1, [r7, #8]
 8016940:	4618      	mov	r0, r3
 8016942:	f000 fc73 	bl	801722c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016946:	6978      	ldr	r0, [r7, #20]
 8016948:	f7ff fefb 	bl	8016742 <prvUnlockQueue>
	}
 801694c:	bf00      	nop
 801694e:	3718      	adds	r7, #24
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016954:	b580      	push	{r7, lr}
 8016956:	b08e      	sub	sp, #56	; 0x38
 8016958:	af04      	add	r7, sp, #16
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	607a      	str	r2, [r7, #4]
 8016960:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016964:	2b00      	cmp	r3, #0
 8016966:	d10a      	bne.n	801697e <xTaskCreateStatic+0x2a>
	__asm volatile
 8016968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801696c:	f383 8811 	msr	BASEPRI, r3
 8016970:	f3bf 8f6f 	isb	sy
 8016974:	f3bf 8f4f 	dsb	sy
 8016978:	623b      	str	r3, [r7, #32]
}
 801697a:	bf00      	nop
 801697c:	e7fe      	b.n	801697c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016980:	2b00      	cmp	r3, #0
 8016982:	d10a      	bne.n	801699a <xTaskCreateStatic+0x46>
	__asm volatile
 8016984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016988:	f383 8811 	msr	BASEPRI, r3
 801698c:	f3bf 8f6f 	isb	sy
 8016990:	f3bf 8f4f 	dsb	sy
 8016994:	61fb      	str	r3, [r7, #28]
}
 8016996:	bf00      	nop
 8016998:	e7fe      	b.n	8016998 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801699a:	23bc      	movs	r3, #188	; 0xbc
 801699c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	2bbc      	cmp	r3, #188	; 0xbc
 80169a2:	d00a      	beq.n	80169ba <xTaskCreateStatic+0x66>
	__asm volatile
 80169a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a8:	f383 8811 	msr	BASEPRI, r3
 80169ac:	f3bf 8f6f 	isb	sy
 80169b0:	f3bf 8f4f 	dsb	sy
 80169b4:	61bb      	str	r3, [r7, #24]
}
 80169b6:	bf00      	nop
 80169b8:	e7fe      	b.n	80169b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80169ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80169bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d01e      	beq.n	8016a00 <xTaskCreateStatic+0xac>
 80169c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d01b      	beq.n	8016a00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80169c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80169cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80169d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d4:	2202      	movs	r2, #2
 80169d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80169da:	2300      	movs	r3, #0
 80169dc:	9303      	str	r3, [sp, #12]
 80169de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e0:	9302      	str	r3, [sp, #8]
 80169e2:	f107 0314 	add.w	r3, r7, #20
 80169e6:	9301      	str	r3, [sp, #4]
 80169e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	68b9      	ldr	r1, [r7, #8]
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f000 f850 	bl	8016a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80169f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169fa:	f000 f8f3 	bl	8016be4 <prvAddNewTaskToReadyList>
 80169fe:	e001      	b.n	8016a04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016a00:	2300      	movs	r3, #0
 8016a02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016a04:	697b      	ldr	r3, [r7, #20]
	}
 8016a06:	4618      	mov	r0, r3
 8016a08:	3728      	adds	r7, #40	; 0x28
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}

08016a0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016a0e:	b580      	push	{r7, lr}
 8016a10:	b08c      	sub	sp, #48	; 0x30
 8016a12:	af04      	add	r7, sp, #16
 8016a14:	60f8      	str	r0, [r7, #12]
 8016a16:	60b9      	str	r1, [r7, #8]
 8016a18:	603b      	str	r3, [r7, #0]
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016a1e:	88fb      	ldrh	r3, [r7, #6]
 8016a20:	009b      	lsls	r3, r3, #2
 8016a22:	4618      	mov	r0, r3
 8016a24:	f001 fd78 	bl	8018518 <pvPortMalloc>
 8016a28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d00e      	beq.n	8016a4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016a30:	20bc      	movs	r0, #188	; 0xbc
 8016a32:	f001 fd71 	bl	8018518 <pvPortMalloc>
 8016a36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d003      	beq.n	8016a46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016a3e:	69fb      	ldr	r3, [r7, #28]
 8016a40:	697a      	ldr	r2, [r7, #20]
 8016a42:	631a      	str	r2, [r3, #48]	; 0x30
 8016a44:	e005      	b.n	8016a52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016a46:	6978      	ldr	r0, [r7, #20]
 8016a48:	f001 fe32 	bl	80186b0 <vPortFree>
 8016a4c:	e001      	b.n	8016a52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016a52:	69fb      	ldr	r3, [r7, #28]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d017      	beq.n	8016a88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016a60:	88fa      	ldrh	r2, [r7, #6]
 8016a62:	2300      	movs	r3, #0
 8016a64:	9303      	str	r3, [sp, #12]
 8016a66:	69fb      	ldr	r3, [r7, #28]
 8016a68:	9302      	str	r3, [sp, #8]
 8016a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a6c:	9301      	str	r3, [sp, #4]
 8016a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a70:	9300      	str	r3, [sp, #0]
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	68b9      	ldr	r1, [r7, #8]
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f000 f80e 	bl	8016a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016a7c:	69f8      	ldr	r0, [r7, #28]
 8016a7e:	f000 f8b1 	bl	8016be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016a82:	2301      	movs	r3, #1
 8016a84:	61bb      	str	r3, [r7, #24]
 8016a86:	e002      	b.n	8016a8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016a88:	f04f 33ff 	mov.w	r3, #4294967295
 8016a8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016a8e:	69bb      	ldr	r3, [r7, #24]
	}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3720      	adds	r7, #32
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}

08016a98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b088      	sub	sp, #32
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	60f8      	str	r0, [r7, #12]
 8016aa0:	60b9      	str	r1, [r7, #8]
 8016aa2:	607a      	str	r2, [r7, #4]
 8016aa4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	009b      	lsls	r3, r3, #2
 8016aae:	461a      	mov	r2, r3
 8016ab0:	21a5      	movs	r1, #165	; 0xa5
 8016ab2:	f00f f959 	bl	8025d68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016aba:	6879      	ldr	r1, [r7, #4]
 8016abc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8016ac0:	440b      	add	r3, r1
 8016ac2:	009b      	lsls	r3, r3, #2
 8016ac4:	4413      	add	r3, r2
 8016ac6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	f023 0307 	bic.w	r3, r3, #7
 8016ace:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016ad0:	69bb      	ldr	r3, [r7, #24]
 8016ad2:	f003 0307 	and.w	r3, r3, #7
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d00a      	beq.n	8016af0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ade:	f383 8811 	msr	BASEPRI, r3
 8016ae2:	f3bf 8f6f 	isb	sy
 8016ae6:	f3bf 8f4f 	dsb	sy
 8016aea:	617b      	str	r3, [r7, #20]
}
 8016aec:	bf00      	nop
 8016aee:	e7fe      	b.n	8016aee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016af0:	68bb      	ldr	r3, [r7, #8]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d01f      	beq.n	8016b36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016af6:	2300      	movs	r3, #0
 8016af8:	61fb      	str	r3, [r7, #28]
 8016afa:	e012      	b.n	8016b22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016afc:	68ba      	ldr	r2, [r7, #8]
 8016afe:	69fb      	ldr	r3, [r7, #28]
 8016b00:	4413      	add	r3, r2
 8016b02:	7819      	ldrb	r1, [r3, #0]
 8016b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b06:	69fb      	ldr	r3, [r7, #28]
 8016b08:	4413      	add	r3, r2
 8016b0a:	3334      	adds	r3, #52	; 0x34
 8016b0c:	460a      	mov	r2, r1
 8016b0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016b10:	68ba      	ldr	r2, [r7, #8]
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	4413      	add	r3, r2
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d006      	beq.n	8016b2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016b1c:	69fb      	ldr	r3, [r7, #28]
 8016b1e:	3301      	adds	r3, #1
 8016b20:	61fb      	str	r3, [r7, #28]
 8016b22:	69fb      	ldr	r3, [r7, #28]
 8016b24:	2b0f      	cmp	r3, #15
 8016b26:	d9e9      	bls.n	8016afc <prvInitialiseNewTask+0x64>
 8016b28:	e000      	b.n	8016b2c <prvInitialiseNewTask+0x94>
			{
				break;
 8016b2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b2e:	2200      	movs	r2, #0
 8016b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016b34:	e003      	b.n	8016b3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b38:	2200      	movs	r2, #0
 8016b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b40:	2b37      	cmp	r3, #55	; 0x37
 8016b42:	d901      	bls.n	8016b48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016b44:	2337      	movs	r3, #55	; 0x37
 8016b46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b56:	2200      	movs	r2, #0
 8016b58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7fe fda0 	bl	80156a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b66:	3318      	adds	r3, #24
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7fe fd9b 	bl	80156a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b86:	2200      	movs	r2, #0
 8016b88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8e:	2200      	movs	r2, #0
 8016b90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b96:	3354      	adds	r3, #84	; 0x54
 8016b98:	2260      	movs	r2, #96	; 0x60
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f00f f8e3 	bl	8025d68 <memset>
 8016ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba4:	4a0c      	ldr	r2, [pc, #48]	; (8016bd8 <prvInitialiseNewTask+0x140>)
 8016ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8016ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016baa:	4a0c      	ldr	r2, [pc, #48]	; (8016bdc <prvInitialiseNewTask+0x144>)
 8016bac:	65da      	str	r2, [r3, #92]	; 0x5c
 8016bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb0:	4a0b      	ldr	r2, [pc, #44]	; (8016be0 <prvInitialiseNewTask+0x148>)
 8016bb2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016bb4:	683a      	ldr	r2, [r7, #0]
 8016bb6:	68f9      	ldr	r1, [r7, #12]
 8016bb8:	69b8      	ldr	r0, [r7, #24]
 8016bba:	f001 fa61 	bl	8018080 <pxPortInitialiseStack>
 8016bbe:	4602      	mov	r2, r0
 8016bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d002      	beq.n	8016bd0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016bd0:	bf00      	nop
 8016bd2:	3720      	adds	r7, #32
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	0802a5e4 	.word	0x0802a5e4
 8016bdc:	0802a604 	.word	0x0802a604
 8016be0:	0802a5c4 	.word	0x0802a5c4

08016be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016bec:	f001 fb72 	bl	80182d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016bf0:	4b2d      	ldr	r3, [pc, #180]	; (8016ca8 <prvAddNewTaskToReadyList+0xc4>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	4a2c      	ldr	r2, [pc, #176]	; (8016ca8 <prvAddNewTaskToReadyList+0xc4>)
 8016bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016bfa:	4b2c      	ldr	r3, [pc, #176]	; (8016cac <prvAddNewTaskToReadyList+0xc8>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d109      	bne.n	8016c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016c02:	4a2a      	ldr	r2, [pc, #168]	; (8016cac <prvAddNewTaskToReadyList+0xc8>)
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016c08:	4b27      	ldr	r3, [pc, #156]	; (8016ca8 <prvAddNewTaskToReadyList+0xc4>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b01      	cmp	r3, #1
 8016c0e:	d110      	bne.n	8016c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016c10:	f000 fc38 	bl	8017484 <prvInitialiseTaskLists>
 8016c14:	e00d      	b.n	8016c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016c16:	4b26      	ldr	r3, [pc, #152]	; (8016cb0 <prvAddNewTaskToReadyList+0xcc>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d109      	bne.n	8016c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016c1e:	4b23      	ldr	r3, [pc, #140]	; (8016cac <prvAddNewTaskToReadyList+0xc8>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d802      	bhi.n	8016c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016c2c:	4a1f      	ldr	r2, [pc, #124]	; (8016cac <prvAddNewTaskToReadyList+0xc8>)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016c32:	4b20      	ldr	r3, [pc, #128]	; (8016cb4 <prvAddNewTaskToReadyList+0xd0>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	3301      	adds	r3, #1
 8016c38:	4a1e      	ldr	r2, [pc, #120]	; (8016cb4 <prvAddNewTaskToReadyList+0xd0>)
 8016c3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016c3c:	4b1d      	ldr	r3, [pc, #116]	; (8016cb4 <prvAddNewTaskToReadyList+0xd0>)
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c48:	4b1b      	ldr	r3, [pc, #108]	; (8016cb8 <prvAddNewTaskToReadyList+0xd4>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d903      	bls.n	8016c58 <prvAddNewTaskToReadyList+0x74>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c54:	4a18      	ldr	r2, [pc, #96]	; (8016cb8 <prvAddNewTaskToReadyList+0xd4>)
 8016c56:	6013      	str	r3, [r2, #0]
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c5c:	4613      	mov	r3, r2
 8016c5e:	009b      	lsls	r3, r3, #2
 8016c60:	4413      	add	r3, r2
 8016c62:	009b      	lsls	r3, r3, #2
 8016c64:	4a15      	ldr	r2, [pc, #84]	; (8016cbc <prvAddNewTaskToReadyList+0xd8>)
 8016c66:	441a      	add	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	4619      	mov	r1, r3
 8016c6e:	4610      	mov	r0, r2
 8016c70:	f7fe fd25 	bl	80156be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016c74:	f001 fb5e 	bl	8018334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016c78:	4b0d      	ldr	r3, [pc, #52]	; (8016cb0 <prvAddNewTaskToReadyList+0xcc>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d00e      	beq.n	8016c9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016c80:	4b0a      	ldr	r3, [pc, #40]	; (8016cac <prvAddNewTaskToReadyList+0xc8>)
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d207      	bcs.n	8016c9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016c8e:	4b0c      	ldr	r3, [pc, #48]	; (8016cc0 <prvAddNewTaskToReadyList+0xdc>)
 8016c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c94:	601a      	str	r2, [r3, #0]
 8016c96:	f3bf 8f4f 	dsb	sy
 8016c9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c9e:	bf00      	nop
 8016ca0:	3708      	adds	r7, #8
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}
 8016ca6:	bf00      	nop
 8016ca8:	2400614c 	.word	0x2400614c
 8016cac:	24005c78 	.word	0x24005c78
 8016cb0:	24006158 	.word	0x24006158
 8016cb4:	24006168 	.word	0x24006168
 8016cb8:	24006154 	.word	0x24006154
 8016cbc:	24005c7c 	.word	0x24005c7c
 8016cc0:	e000ed04 	.word	0xe000ed04

08016cc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b084      	sub	sp, #16
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d017      	beq.n	8016d06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016cd6:	4b13      	ldr	r3, [pc, #76]	; (8016d24 <vTaskDelay+0x60>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d00a      	beq.n	8016cf4 <vTaskDelay+0x30>
	__asm volatile
 8016cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce2:	f383 8811 	msr	BASEPRI, r3
 8016ce6:	f3bf 8f6f 	isb	sy
 8016cea:	f3bf 8f4f 	dsb	sy
 8016cee:	60bb      	str	r3, [r7, #8]
}
 8016cf0:	bf00      	nop
 8016cf2:	e7fe      	b.n	8016cf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016cf4:	f000 f88a 	bl	8016e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016cf8:	2100      	movs	r1, #0
 8016cfa:	6878      	ldr	r0, [r7, #4]
 8016cfc:	f000 fe1e 	bl	801793c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016d00:	f000 f892 	bl	8016e28 <xTaskResumeAll>
 8016d04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d107      	bne.n	8016d1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016d0c:	4b06      	ldr	r3, [pc, #24]	; (8016d28 <vTaskDelay+0x64>)
 8016d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d12:	601a      	str	r2, [r3, #0]
 8016d14:	f3bf 8f4f 	dsb	sy
 8016d18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016d1c:	bf00      	nop
 8016d1e:	3710      	adds	r7, #16
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}
 8016d24:	24006174 	.word	0x24006174
 8016d28:	e000ed04 	.word	0xe000ed04

08016d2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b08a      	sub	sp, #40	; 0x28
 8016d30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016d32:	2300      	movs	r3, #0
 8016d34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016d36:	2300      	movs	r3, #0
 8016d38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016d3a:	463a      	mov	r2, r7
 8016d3c:	1d39      	adds	r1, r7, #4
 8016d3e:	f107 0308 	add.w	r3, r7, #8
 8016d42:	4618      	mov	r0, r3
 8016d44:	f7fe fc5a 	bl	80155fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016d48:	6839      	ldr	r1, [r7, #0]
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	68ba      	ldr	r2, [r7, #8]
 8016d4e:	9202      	str	r2, [sp, #8]
 8016d50:	9301      	str	r3, [sp, #4]
 8016d52:	2300      	movs	r3, #0
 8016d54:	9300      	str	r3, [sp, #0]
 8016d56:	2300      	movs	r3, #0
 8016d58:	460a      	mov	r2, r1
 8016d5a:	4924      	ldr	r1, [pc, #144]	; (8016dec <vTaskStartScheduler+0xc0>)
 8016d5c:	4824      	ldr	r0, [pc, #144]	; (8016df0 <vTaskStartScheduler+0xc4>)
 8016d5e:	f7ff fdf9 	bl	8016954 <xTaskCreateStatic>
 8016d62:	4603      	mov	r3, r0
 8016d64:	4a23      	ldr	r2, [pc, #140]	; (8016df4 <vTaskStartScheduler+0xc8>)
 8016d66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016d68:	4b22      	ldr	r3, [pc, #136]	; (8016df4 <vTaskStartScheduler+0xc8>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d002      	beq.n	8016d76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016d70:	2301      	movs	r3, #1
 8016d72:	617b      	str	r3, [r7, #20]
 8016d74:	e001      	b.n	8016d7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016d76:	2300      	movs	r3, #0
 8016d78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	d102      	bne.n	8016d86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016d80:	f000 fe30 	bl	80179e4 <xTimerCreateTimerTask>
 8016d84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016d86:	697b      	ldr	r3, [r7, #20]
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d11b      	bne.n	8016dc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8016d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d90:	f383 8811 	msr	BASEPRI, r3
 8016d94:	f3bf 8f6f 	isb	sy
 8016d98:	f3bf 8f4f 	dsb	sy
 8016d9c:	613b      	str	r3, [r7, #16]
}
 8016d9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016da0:	4b15      	ldr	r3, [pc, #84]	; (8016df8 <vTaskStartScheduler+0xcc>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	3354      	adds	r3, #84	; 0x54
 8016da6:	4a15      	ldr	r2, [pc, #84]	; (8016dfc <vTaskStartScheduler+0xd0>)
 8016da8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016daa:	4b15      	ldr	r3, [pc, #84]	; (8016e00 <vTaskStartScheduler+0xd4>)
 8016dac:	f04f 32ff 	mov.w	r2, #4294967295
 8016db0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016db2:	4b14      	ldr	r3, [pc, #80]	; (8016e04 <vTaskStartScheduler+0xd8>)
 8016db4:	2201      	movs	r2, #1
 8016db6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016db8:	4b13      	ldr	r3, [pc, #76]	; (8016e08 <vTaskStartScheduler+0xdc>)
 8016dba:	2200      	movs	r2, #0
 8016dbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016dbe:	f001 f9e7 	bl	8018190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016dc2:	e00e      	b.n	8016de2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dca:	d10a      	bne.n	8016de2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8016dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dd0:	f383 8811 	msr	BASEPRI, r3
 8016dd4:	f3bf 8f6f 	isb	sy
 8016dd8:	f3bf 8f4f 	dsb	sy
 8016ddc:	60fb      	str	r3, [r7, #12]
}
 8016dde:	bf00      	nop
 8016de0:	e7fe      	b.n	8016de0 <vTaskStartScheduler+0xb4>
}
 8016de2:	bf00      	nop
 8016de4:	3718      	adds	r7, #24
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop
 8016dec:	08026f2c 	.word	0x08026f2c
 8016df0:	08017455 	.word	0x08017455
 8016df4:	24006170 	.word	0x24006170
 8016df8:	24005c78 	.word	0x24005c78
 8016dfc:	240004cc 	.word	0x240004cc
 8016e00:	2400616c 	.word	0x2400616c
 8016e04:	24006158 	.word	0x24006158
 8016e08:	24006150 	.word	0x24006150

08016e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016e0c:	b480      	push	{r7}
 8016e0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016e10:	4b04      	ldr	r3, [pc, #16]	; (8016e24 <vTaskSuspendAll+0x18>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	3301      	adds	r3, #1
 8016e16:	4a03      	ldr	r2, [pc, #12]	; (8016e24 <vTaskSuspendAll+0x18>)
 8016e18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016e1a:	bf00      	nop
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e22:	4770      	bx	lr
 8016e24:	24006174 	.word	0x24006174

08016e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016e32:	2300      	movs	r3, #0
 8016e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016e36:	4b42      	ldr	r3, [pc, #264]	; (8016f40 <xTaskResumeAll+0x118>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d10a      	bne.n	8016e54 <xTaskResumeAll+0x2c>
	__asm volatile
 8016e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e42:	f383 8811 	msr	BASEPRI, r3
 8016e46:	f3bf 8f6f 	isb	sy
 8016e4a:	f3bf 8f4f 	dsb	sy
 8016e4e:	603b      	str	r3, [r7, #0]
}
 8016e50:	bf00      	nop
 8016e52:	e7fe      	b.n	8016e52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016e54:	f001 fa3e 	bl	80182d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016e58:	4b39      	ldr	r3, [pc, #228]	; (8016f40 <xTaskResumeAll+0x118>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	3b01      	subs	r3, #1
 8016e5e:	4a38      	ldr	r2, [pc, #224]	; (8016f40 <xTaskResumeAll+0x118>)
 8016e60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e62:	4b37      	ldr	r3, [pc, #220]	; (8016f40 <xTaskResumeAll+0x118>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d162      	bne.n	8016f30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016e6a:	4b36      	ldr	r3, [pc, #216]	; (8016f44 <xTaskResumeAll+0x11c>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d05e      	beq.n	8016f30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016e72:	e02f      	b.n	8016ed4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e74:	4b34      	ldr	r3, [pc, #208]	; (8016f48 <xTaskResumeAll+0x120>)
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	68db      	ldr	r3, [r3, #12]
 8016e7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	3318      	adds	r3, #24
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7fe fc79 	bl	8015778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	3304      	adds	r3, #4
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7fe fc74 	bl	8015778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e94:	4b2d      	ldr	r3, [pc, #180]	; (8016f4c <xTaskResumeAll+0x124>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d903      	bls.n	8016ea4 <xTaskResumeAll+0x7c>
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ea0:	4a2a      	ldr	r2, [pc, #168]	; (8016f4c <xTaskResumeAll+0x124>)
 8016ea2:	6013      	str	r3, [r2, #0]
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ea8:	4613      	mov	r3, r2
 8016eaa:	009b      	lsls	r3, r3, #2
 8016eac:	4413      	add	r3, r2
 8016eae:	009b      	lsls	r3, r3, #2
 8016eb0:	4a27      	ldr	r2, [pc, #156]	; (8016f50 <xTaskResumeAll+0x128>)
 8016eb2:	441a      	add	r2, r3
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	3304      	adds	r3, #4
 8016eb8:	4619      	mov	r1, r3
 8016eba:	4610      	mov	r0, r2
 8016ebc:	f7fe fbff 	bl	80156be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ec4:	4b23      	ldr	r3, [pc, #140]	; (8016f54 <xTaskResumeAll+0x12c>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d302      	bcc.n	8016ed4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016ece:	4b22      	ldr	r3, [pc, #136]	; (8016f58 <xTaskResumeAll+0x130>)
 8016ed0:	2201      	movs	r2, #1
 8016ed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016ed4:	4b1c      	ldr	r3, [pc, #112]	; (8016f48 <xTaskResumeAll+0x120>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d1cb      	bne.n	8016e74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d001      	beq.n	8016ee6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016ee2:	f000 fb71 	bl	80175c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016ee6:	4b1d      	ldr	r3, [pc, #116]	; (8016f5c <xTaskResumeAll+0x134>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d010      	beq.n	8016f14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016ef2:	f000 f859 	bl	8016fa8 <xTaskIncrementTick>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d002      	beq.n	8016f02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016efc:	4b16      	ldr	r3, [pc, #88]	; (8016f58 <xTaskResumeAll+0x130>)
 8016efe:	2201      	movs	r2, #1
 8016f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	3b01      	subs	r3, #1
 8016f06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d1f1      	bne.n	8016ef2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016f0e:	4b13      	ldr	r3, [pc, #76]	; (8016f5c <xTaskResumeAll+0x134>)
 8016f10:	2200      	movs	r2, #0
 8016f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016f14:	4b10      	ldr	r3, [pc, #64]	; (8016f58 <xTaskResumeAll+0x130>)
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d009      	beq.n	8016f30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016f20:	4b0f      	ldr	r3, [pc, #60]	; (8016f60 <xTaskResumeAll+0x138>)
 8016f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f26:	601a      	str	r2, [r3, #0]
 8016f28:	f3bf 8f4f 	dsb	sy
 8016f2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016f30:	f001 fa00 	bl	8018334 <vPortExitCritical>

	return xAlreadyYielded;
 8016f34:	68bb      	ldr	r3, [r7, #8]
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3710      	adds	r7, #16
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
 8016f3e:	bf00      	nop
 8016f40:	24006174 	.word	0x24006174
 8016f44:	2400614c 	.word	0x2400614c
 8016f48:	2400610c 	.word	0x2400610c
 8016f4c:	24006154 	.word	0x24006154
 8016f50:	24005c7c 	.word	0x24005c7c
 8016f54:	24005c78 	.word	0x24005c78
 8016f58:	24006160 	.word	0x24006160
 8016f5c:	2400615c 	.word	0x2400615c
 8016f60:	e000ed04 	.word	0xe000ed04

08016f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016f64:	b480      	push	{r7}
 8016f66:	b083      	sub	sp, #12
 8016f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016f6a:	4b05      	ldr	r3, [pc, #20]	; (8016f80 <xTaskGetTickCount+0x1c>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016f70:	687b      	ldr	r3, [r7, #4]
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	370c      	adds	r7, #12
 8016f76:	46bd      	mov	sp, r7
 8016f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7c:	4770      	bx	lr
 8016f7e:	bf00      	nop
 8016f80:	24006150 	.word	0x24006150

08016f84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b082      	sub	sp, #8
 8016f88:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f8a:	f001 fa85 	bl	8018498 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016f8e:	2300      	movs	r3, #0
 8016f90:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016f92:	4b04      	ldr	r3, [pc, #16]	; (8016fa4 <xTaskGetTickCountFromISR+0x20>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016f98:	683b      	ldr	r3, [r7, #0]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3708      	adds	r7, #8
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}
 8016fa2:	bf00      	nop
 8016fa4:	24006150 	.word	0x24006150

08016fa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b086      	sub	sp, #24
 8016fac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016fb2:	4b4f      	ldr	r3, [pc, #316]	; (80170f0 <xTaskIncrementTick+0x148>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	f040 808f 	bne.w	80170da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016fbc:	4b4d      	ldr	r3, [pc, #308]	; (80170f4 <xTaskIncrementTick+0x14c>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016fc4:	4a4b      	ldr	r2, [pc, #300]	; (80170f4 <xTaskIncrementTick+0x14c>)
 8016fc6:	693b      	ldr	r3, [r7, #16]
 8016fc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016fca:	693b      	ldr	r3, [r7, #16]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d120      	bne.n	8017012 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016fd0:	4b49      	ldr	r3, [pc, #292]	; (80170f8 <xTaskIncrementTick+0x150>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d00a      	beq.n	8016ff0 <xTaskIncrementTick+0x48>
	__asm volatile
 8016fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fde:	f383 8811 	msr	BASEPRI, r3
 8016fe2:	f3bf 8f6f 	isb	sy
 8016fe6:	f3bf 8f4f 	dsb	sy
 8016fea:	603b      	str	r3, [r7, #0]
}
 8016fec:	bf00      	nop
 8016fee:	e7fe      	b.n	8016fee <xTaskIncrementTick+0x46>
 8016ff0:	4b41      	ldr	r3, [pc, #260]	; (80170f8 <xTaskIncrementTick+0x150>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	60fb      	str	r3, [r7, #12]
 8016ff6:	4b41      	ldr	r3, [pc, #260]	; (80170fc <xTaskIncrementTick+0x154>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	4a3f      	ldr	r2, [pc, #252]	; (80170f8 <xTaskIncrementTick+0x150>)
 8016ffc:	6013      	str	r3, [r2, #0]
 8016ffe:	4a3f      	ldr	r2, [pc, #252]	; (80170fc <xTaskIncrementTick+0x154>)
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	6013      	str	r3, [r2, #0]
 8017004:	4b3e      	ldr	r3, [pc, #248]	; (8017100 <xTaskIncrementTick+0x158>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	3301      	adds	r3, #1
 801700a:	4a3d      	ldr	r2, [pc, #244]	; (8017100 <xTaskIncrementTick+0x158>)
 801700c:	6013      	str	r3, [r2, #0]
 801700e:	f000 fadb 	bl	80175c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017012:	4b3c      	ldr	r3, [pc, #240]	; (8017104 <xTaskIncrementTick+0x15c>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	693a      	ldr	r2, [r7, #16]
 8017018:	429a      	cmp	r2, r3
 801701a:	d349      	bcc.n	80170b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801701c:	4b36      	ldr	r3, [pc, #216]	; (80170f8 <xTaskIncrementTick+0x150>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d104      	bne.n	8017030 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017026:	4b37      	ldr	r3, [pc, #220]	; (8017104 <xTaskIncrementTick+0x15c>)
 8017028:	f04f 32ff 	mov.w	r2, #4294967295
 801702c:	601a      	str	r2, [r3, #0]
					break;
 801702e:	e03f      	b.n	80170b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017030:	4b31      	ldr	r3, [pc, #196]	; (80170f8 <xTaskIncrementTick+0x150>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	68db      	ldr	r3, [r3, #12]
 8017036:	68db      	ldr	r3, [r3, #12]
 8017038:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017040:	693a      	ldr	r2, [r7, #16]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	429a      	cmp	r2, r3
 8017046:	d203      	bcs.n	8017050 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017048:	4a2e      	ldr	r2, [pc, #184]	; (8017104 <xTaskIncrementTick+0x15c>)
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801704e:	e02f      	b.n	80170b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017050:	68bb      	ldr	r3, [r7, #8]
 8017052:	3304      	adds	r3, #4
 8017054:	4618      	mov	r0, r3
 8017056:	f7fe fb8f 	bl	8015778 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801705e:	2b00      	cmp	r3, #0
 8017060:	d004      	beq.n	801706c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	3318      	adds	r3, #24
 8017066:	4618      	mov	r0, r3
 8017068:	f7fe fb86 	bl	8015778 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017070:	4b25      	ldr	r3, [pc, #148]	; (8017108 <xTaskIncrementTick+0x160>)
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	429a      	cmp	r2, r3
 8017076:	d903      	bls.n	8017080 <xTaskIncrementTick+0xd8>
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801707c:	4a22      	ldr	r2, [pc, #136]	; (8017108 <xTaskIncrementTick+0x160>)
 801707e:	6013      	str	r3, [r2, #0]
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017084:	4613      	mov	r3, r2
 8017086:	009b      	lsls	r3, r3, #2
 8017088:	4413      	add	r3, r2
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	4a1f      	ldr	r2, [pc, #124]	; (801710c <xTaskIncrementTick+0x164>)
 801708e:	441a      	add	r2, r3
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	3304      	adds	r3, #4
 8017094:	4619      	mov	r1, r3
 8017096:	4610      	mov	r0, r2
 8017098:	f7fe fb11 	bl	80156be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170a0:	4b1b      	ldr	r3, [pc, #108]	; (8017110 <xTaskIncrementTick+0x168>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d3b8      	bcc.n	801701c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80170aa:	2301      	movs	r3, #1
 80170ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80170ae:	e7b5      	b.n	801701c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80170b0:	4b17      	ldr	r3, [pc, #92]	; (8017110 <xTaskIncrementTick+0x168>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170b6:	4915      	ldr	r1, [pc, #84]	; (801710c <xTaskIncrementTick+0x164>)
 80170b8:	4613      	mov	r3, r2
 80170ba:	009b      	lsls	r3, r3, #2
 80170bc:	4413      	add	r3, r2
 80170be:	009b      	lsls	r3, r3, #2
 80170c0:	440b      	add	r3, r1
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2b01      	cmp	r3, #1
 80170c6:	d901      	bls.n	80170cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80170c8:	2301      	movs	r3, #1
 80170ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80170cc:	4b11      	ldr	r3, [pc, #68]	; (8017114 <xTaskIncrementTick+0x16c>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d007      	beq.n	80170e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80170d4:	2301      	movs	r3, #1
 80170d6:	617b      	str	r3, [r7, #20]
 80170d8:	e004      	b.n	80170e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80170da:	4b0f      	ldr	r3, [pc, #60]	; (8017118 <xTaskIncrementTick+0x170>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	3301      	adds	r3, #1
 80170e0:	4a0d      	ldr	r2, [pc, #52]	; (8017118 <xTaskIncrementTick+0x170>)
 80170e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80170e4:	697b      	ldr	r3, [r7, #20]
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3718      	adds	r7, #24
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	24006174 	.word	0x24006174
 80170f4:	24006150 	.word	0x24006150
 80170f8:	24006104 	.word	0x24006104
 80170fc:	24006108 	.word	0x24006108
 8017100:	24006164 	.word	0x24006164
 8017104:	2400616c 	.word	0x2400616c
 8017108:	24006154 	.word	0x24006154
 801710c:	24005c7c 	.word	0x24005c7c
 8017110:	24005c78 	.word	0x24005c78
 8017114:	24006160 	.word	0x24006160
 8017118:	2400615c 	.word	0x2400615c

0801711c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801711c:	b480      	push	{r7}
 801711e:	b085      	sub	sp, #20
 8017120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017122:	4b2a      	ldr	r3, [pc, #168]	; (80171cc <vTaskSwitchContext+0xb0>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d003      	beq.n	8017132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801712a:	4b29      	ldr	r3, [pc, #164]	; (80171d0 <vTaskSwitchContext+0xb4>)
 801712c:	2201      	movs	r2, #1
 801712e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017130:	e046      	b.n	80171c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8017132:	4b27      	ldr	r3, [pc, #156]	; (80171d0 <vTaskSwitchContext+0xb4>)
 8017134:	2200      	movs	r2, #0
 8017136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017138:	4b26      	ldr	r3, [pc, #152]	; (80171d4 <vTaskSwitchContext+0xb8>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	60fb      	str	r3, [r7, #12]
 801713e:	e010      	b.n	8017162 <vTaskSwitchContext+0x46>
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d10a      	bne.n	801715c <vTaskSwitchContext+0x40>
	__asm volatile
 8017146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801714a:	f383 8811 	msr	BASEPRI, r3
 801714e:	f3bf 8f6f 	isb	sy
 8017152:	f3bf 8f4f 	dsb	sy
 8017156:	607b      	str	r3, [r7, #4]
}
 8017158:	bf00      	nop
 801715a:	e7fe      	b.n	801715a <vTaskSwitchContext+0x3e>
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	3b01      	subs	r3, #1
 8017160:	60fb      	str	r3, [r7, #12]
 8017162:	491d      	ldr	r1, [pc, #116]	; (80171d8 <vTaskSwitchContext+0xbc>)
 8017164:	68fa      	ldr	r2, [r7, #12]
 8017166:	4613      	mov	r3, r2
 8017168:	009b      	lsls	r3, r3, #2
 801716a:	4413      	add	r3, r2
 801716c:	009b      	lsls	r3, r3, #2
 801716e:	440b      	add	r3, r1
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d0e4      	beq.n	8017140 <vTaskSwitchContext+0x24>
 8017176:	68fa      	ldr	r2, [r7, #12]
 8017178:	4613      	mov	r3, r2
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	4413      	add	r3, r2
 801717e:	009b      	lsls	r3, r3, #2
 8017180:	4a15      	ldr	r2, [pc, #84]	; (80171d8 <vTaskSwitchContext+0xbc>)
 8017182:	4413      	add	r3, r2
 8017184:	60bb      	str	r3, [r7, #8]
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	685a      	ldr	r2, [r3, #4]
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	605a      	str	r2, [r3, #4]
 8017190:	68bb      	ldr	r3, [r7, #8]
 8017192:	685a      	ldr	r2, [r3, #4]
 8017194:	68bb      	ldr	r3, [r7, #8]
 8017196:	3308      	adds	r3, #8
 8017198:	429a      	cmp	r2, r3
 801719a:	d104      	bne.n	80171a6 <vTaskSwitchContext+0x8a>
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	685b      	ldr	r3, [r3, #4]
 80171a0:	685a      	ldr	r2, [r3, #4]
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	605a      	str	r2, [r3, #4]
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	68db      	ldr	r3, [r3, #12]
 80171ac:	4a0b      	ldr	r2, [pc, #44]	; (80171dc <vTaskSwitchContext+0xc0>)
 80171ae:	6013      	str	r3, [r2, #0]
 80171b0:	4a08      	ldr	r2, [pc, #32]	; (80171d4 <vTaskSwitchContext+0xb8>)
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80171b6:	4b09      	ldr	r3, [pc, #36]	; (80171dc <vTaskSwitchContext+0xc0>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	3354      	adds	r3, #84	; 0x54
 80171bc:	4a08      	ldr	r2, [pc, #32]	; (80171e0 <vTaskSwitchContext+0xc4>)
 80171be:	6013      	str	r3, [r2, #0]
}
 80171c0:	bf00      	nop
 80171c2:	3714      	adds	r7, #20
 80171c4:	46bd      	mov	sp, r7
 80171c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ca:	4770      	bx	lr
 80171cc:	24006174 	.word	0x24006174
 80171d0:	24006160 	.word	0x24006160
 80171d4:	24006154 	.word	0x24006154
 80171d8:	24005c7c 	.word	0x24005c7c
 80171dc:	24005c78 	.word	0x24005c78
 80171e0:	240004cc 	.word	0x240004cc

080171e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
 80171ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d10a      	bne.n	801720a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80171f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171f8:	f383 8811 	msr	BASEPRI, r3
 80171fc:	f3bf 8f6f 	isb	sy
 8017200:	f3bf 8f4f 	dsb	sy
 8017204:	60fb      	str	r3, [r7, #12]
}
 8017206:	bf00      	nop
 8017208:	e7fe      	b.n	8017208 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801720a:	4b07      	ldr	r3, [pc, #28]	; (8017228 <vTaskPlaceOnEventList+0x44>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	3318      	adds	r3, #24
 8017210:	4619      	mov	r1, r3
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f7fe fa77 	bl	8015706 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017218:	2101      	movs	r1, #1
 801721a:	6838      	ldr	r0, [r7, #0]
 801721c:	f000 fb8e 	bl	801793c <prvAddCurrentTaskToDelayedList>
}
 8017220:	bf00      	nop
 8017222:	3710      	adds	r7, #16
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}
 8017228:	24005c78 	.word	0x24005c78

0801722c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801722c:	b580      	push	{r7, lr}
 801722e:	b086      	sub	sp, #24
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d10a      	bne.n	8017254 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017242:	f383 8811 	msr	BASEPRI, r3
 8017246:	f3bf 8f6f 	isb	sy
 801724a:	f3bf 8f4f 	dsb	sy
 801724e:	617b      	str	r3, [r7, #20]
}
 8017250:	bf00      	nop
 8017252:	e7fe      	b.n	8017252 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017254:	4b0a      	ldr	r3, [pc, #40]	; (8017280 <vTaskPlaceOnEventListRestricted+0x54>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	3318      	adds	r3, #24
 801725a:	4619      	mov	r1, r3
 801725c:	68f8      	ldr	r0, [r7, #12]
 801725e:	f7fe fa2e 	bl	80156be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d002      	beq.n	801726e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017268:	f04f 33ff 	mov.w	r3, #4294967295
 801726c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801726e:	6879      	ldr	r1, [r7, #4]
 8017270:	68b8      	ldr	r0, [r7, #8]
 8017272:	f000 fb63 	bl	801793c <prvAddCurrentTaskToDelayedList>
	}
 8017276:	bf00      	nop
 8017278:	3718      	adds	r7, #24
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}
 801727e:	bf00      	nop
 8017280:	24005c78 	.word	0x24005c78

08017284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b086      	sub	sp, #24
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	68db      	ldr	r3, [r3, #12]
 8017290:	68db      	ldr	r3, [r3, #12]
 8017292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017294:	693b      	ldr	r3, [r7, #16]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d10a      	bne.n	80172b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801729e:	f383 8811 	msr	BASEPRI, r3
 80172a2:	f3bf 8f6f 	isb	sy
 80172a6:	f3bf 8f4f 	dsb	sy
 80172aa:	60fb      	str	r3, [r7, #12]
}
 80172ac:	bf00      	nop
 80172ae:	e7fe      	b.n	80172ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80172b0:	693b      	ldr	r3, [r7, #16]
 80172b2:	3318      	adds	r3, #24
 80172b4:	4618      	mov	r0, r3
 80172b6:	f7fe fa5f 	bl	8015778 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80172ba:	4b1e      	ldr	r3, [pc, #120]	; (8017334 <xTaskRemoveFromEventList+0xb0>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d11d      	bne.n	80172fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	3304      	adds	r3, #4
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7fe fa56 	bl	8015778 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172d0:	4b19      	ldr	r3, [pc, #100]	; (8017338 <xTaskRemoveFromEventList+0xb4>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d903      	bls.n	80172e0 <xTaskRemoveFromEventList+0x5c>
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172dc:	4a16      	ldr	r2, [pc, #88]	; (8017338 <xTaskRemoveFromEventList+0xb4>)
 80172de:	6013      	str	r3, [r2, #0]
 80172e0:	693b      	ldr	r3, [r7, #16]
 80172e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172e4:	4613      	mov	r3, r2
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	4413      	add	r3, r2
 80172ea:	009b      	lsls	r3, r3, #2
 80172ec:	4a13      	ldr	r2, [pc, #76]	; (801733c <xTaskRemoveFromEventList+0xb8>)
 80172ee:	441a      	add	r2, r3
 80172f0:	693b      	ldr	r3, [r7, #16]
 80172f2:	3304      	adds	r3, #4
 80172f4:	4619      	mov	r1, r3
 80172f6:	4610      	mov	r0, r2
 80172f8:	f7fe f9e1 	bl	80156be <vListInsertEnd>
 80172fc:	e005      	b.n	801730a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	3318      	adds	r3, #24
 8017302:	4619      	mov	r1, r3
 8017304:	480e      	ldr	r0, [pc, #56]	; (8017340 <xTaskRemoveFromEventList+0xbc>)
 8017306:	f7fe f9da 	bl	80156be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801730a:	693b      	ldr	r3, [r7, #16]
 801730c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801730e:	4b0d      	ldr	r3, [pc, #52]	; (8017344 <xTaskRemoveFromEventList+0xc0>)
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017314:	429a      	cmp	r2, r3
 8017316:	d905      	bls.n	8017324 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017318:	2301      	movs	r3, #1
 801731a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801731c:	4b0a      	ldr	r3, [pc, #40]	; (8017348 <xTaskRemoveFromEventList+0xc4>)
 801731e:	2201      	movs	r2, #1
 8017320:	601a      	str	r2, [r3, #0]
 8017322:	e001      	b.n	8017328 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017324:	2300      	movs	r3, #0
 8017326:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017328:	697b      	ldr	r3, [r7, #20]
}
 801732a:	4618      	mov	r0, r3
 801732c:	3718      	adds	r7, #24
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
 8017332:	bf00      	nop
 8017334:	24006174 	.word	0x24006174
 8017338:	24006154 	.word	0x24006154
 801733c:	24005c7c 	.word	0x24005c7c
 8017340:	2400610c 	.word	0x2400610c
 8017344:	24005c78 	.word	0x24005c78
 8017348:	24006160 	.word	0x24006160

0801734c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017354:	4b06      	ldr	r3, [pc, #24]	; (8017370 <vTaskInternalSetTimeOutState+0x24>)
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801735c:	4b05      	ldr	r3, [pc, #20]	; (8017374 <vTaskInternalSetTimeOutState+0x28>)
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	605a      	str	r2, [r3, #4]
}
 8017364:	bf00      	nop
 8017366:	370c      	adds	r7, #12
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr
 8017370:	24006164 	.word	0x24006164
 8017374:	24006150 	.word	0x24006150

08017378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b088      	sub	sp, #32
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d10a      	bne.n	801739e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801738c:	f383 8811 	msr	BASEPRI, r3
 8017390:	f3bf 8f6f 	isb	sy
 8017394:	f3bf 8f4f 	dsb	sy
 8017398:	613b      	str	r3, [r7, #16]
}
 801739a:	bf00      	nop
 801739c:	e7fe      	b.n	801739c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d10a      	bne.n	80173ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80173a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a8:	f383 8811 	msr	BASEPRI, r3
 80173ac:	f3bf 8f6f 	isb	sy
 80173b0:	f3bf 8f4f 	dsb	sy
 80173b4:	60fb      	str	r3, [r7, #12]
}
 80173b6:	bf00      	nop
 80173b8:	e7fe      	b.n	80173b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80173ba:	f000 ff8b 	bl	80182d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80173be:	4b1d      	ldr	r3, [pc, #116]	; (8017434 <xTaskCheckForTimeOut+0xbc>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	69ba      	ldr	r2, [r7, #24]
 80173ca:	1ad3      	subs	r3, r2, r3
 80173cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173d6:	d102      	bne.n	80173de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80173d8:	2300      	movs	r3, #0
 80173da:	61fb      	str	r3, [r7, #28]
 80173dc:	e023      	b.n	8017426 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681a      	ldr	r2, [r3, #0]
 80173e2:	4b15      	ldr	r3, [pc, #84]	; (8017438 <xTaskCheckForTimeOut+0xc0>)
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d007      	beq.n	80173fa <xTaskCheckForTimeOut+0x82>
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	685b      	ldr	r3, [r3, #4]
 80173ee:	69ba      	ldr	r2, [r7, #24]
 80173f0:	429a      	cmp	r2, r3
 80173f2:	d302      	bcc.n	80173fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80173f4:	2301      	movs	r3, #1
 80173f6:	61fb      	str	r3, [r7, #28]
 80173f8:	e015      	b.n	8017426 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	697a      	ldr	r2, [r7, #20]
 8017400:	429a      	cmp	r2, r3
 8017402:	d20b      	bcs.n	801741c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017404:	683b      	ldr	r3, [r7, #0]
 8017406:	681a      	ldr	r2, [r3, #0]
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	1ad2      	subs	r2, r2, r3
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	f7ff ff9b 	bl	801734c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017416:	2300      	movs	r3, #0
 8017418:	61fb      	str	r3, [r7, #28]
 801741a:	e004      	b.n	8017426 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	2200      	movs	r2, #0
 8017420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017422:	2301      	movs	r3, #1
 8017424:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017426:	f000 ff85 	bl	8018334 <vPortExitCritical>

	return xReturn;
 801742a:	69fb      	ldr	r3, [r7, #28]
}
 801742c:	4618      	mov	r0, r3
 801742e:	3720      	adds	r7, #32
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}
 8017434:	24006150 	.word	0x24006150
 8017438:	24006164 	.word	0x24006164

0801743c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801743c:	b480      	push	{r7}
 801743e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017440:	4b03      	ldr	r3, [pc, #12]	; (8017450 <vTaskMissedYield+0x14>)
 8017442:	2201      	movs	r2, #1
 8017444:	601a      	str	r2, [r3, #0]
}
 8017446:	bf00      	nop
 8017448:	46bd      	mov	sp, r7
 801744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744e:	4770      	bx	lr
 8017450:	24006160 	.word	0x24006160

08017454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801745c:	f000 f852 	bl	8017504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017460:	4b06      	ldr	r3, [pc, #24]	; (801747c <prvIdleTask+0x28>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	2b01      	cmp	r3, #1
 8017466:	d9f9      	bls.n	801745c <prvIdleTask+0x8>
			{
				taskYIELD();
 8017468:	4b05      	ldr	r3, [pc, #20]	; (8017480 <prvIdleTask+0x2c>)
 801746a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801746e:	601a      	str	r2, [r3, #0]
 8017470:	f3bf 8f4f 	dsb	sy
 8017474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017478:	e7f0      	b.n	801745c <prvIdleTask+0x8>
 801747a:	bf00      	nop
 801747c:	24005c7c 	.word	0x24005c7c
 8017480:	e000ed04 	.word	0xe000ed04

08017484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801748a:	2300      	movs	r3, #0
 801748c:	607b      	str	r3, [r7, #4]
 801748e:	e00c      	b.n	80174aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017490:	687a      	ldr	r2, [r7, #4]
 8017492:	4613      	mov	r3, r2
 8017494:	009b      	lsls	r3, r3, #2
 8017496:	4413      	add	r3, r2
 8017498:	009b      	lsls	r3, r3, #2
 801749a:	4a12      	ldr	r2, [pc, #72]	; (80174e4 <prvInitialiseTaskLists+0x60>)
 801749c:	4413      	add	r3, r2
 801749e:	4618      	mov	r0, r3
 80174a0:	f7fe f8e0 	bl	8015664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	3301      	adds	r3, #1
 80174a8:	607b      	str	r3, [r7, #4]
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	2b37      	cmp	r3, #55	; 0x37
 80174ae:	d9ef      	bls.n	8017490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80174b0:	480d      	ldr	r0, [pc, #52]	; (80174e8 <prvInitialiseTaskLists+0x64>)
 80174b2:	f7fe f8d7 	bl	8015664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80174b6:	480d      	ldr	r0, [pc, #52]	; (80174ec <prvInitialiseTaskLists+0x68>)
 80174b8:	f7fe f8d4 	bl	8015664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80174bc:	480c      	ldr	r0, [pc, #48]	; (80174f0 <prvInitialiseTaskLists+0x6c>)
 80174be:	f7fe f8d1 	bl	8015664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80174c2:	480c      	ldr	r0, [pc, #48]	; (80174f4 <prvInitialiseTaskLists+0x70>)
 80174c4:	f7fe f8ce 	bl	8015664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80174c8:	480b      	ldr	r0, [pc, #44]	; (80174f8 <prvInitialiseTaskLists+0x74>)
 80174ca:	f7fe f8cb 	bl	8015664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80174ce:	4b0b      	ldr	r3, [pc, #44]	; (80174fc <prvInitialiseTaskLists+0x78>)
 80174d0:	4a05      	ldr	r2, [pc, #20]	; (80174e8 <prvInitialiseTaskLists+0x64>)
 80174d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80174d4:	4b0a      	ldr	r3, [pc, #40]	; (8017500 <prvInitialiseTaskLists+0x7c>)
 80174d6:	4a05      	ldr	r2, [pc, #20]	; (80174ec <prvInitialiseTaskLists+0x68>)
 80174d8:	601a      	str	r2, [r3, #0]
}
 80174da:	bf00      	nop
 80174dc:	3708      	adds	r7, #8
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd80      	pop	{r7, pc}
 80174e2:	bf00      	nop
 80174e4:	24005c7c 	.word	0x24005c7c
 80174e8:	240060dc 	.word	0x240060dc
 80174ec:	240060f0 	.word	0x240060f0
 80174f0:	2400610c 	.word	0x2400610c
 80174f4:	24006120 	.word	0x24006120
 80174f8:	24006138 	.word	0x24006138
 80174fc:	24006104 	.word	0x24006104
 8017500:	24006108 	.word	0x24006108

08017504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b082      	sub	sp, #8
 8017508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801750a:	e019      	b.n	8017540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801750c:	f000 fee2 	bl	80182d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017510:	4b10      	ldr	r3, [pc, #64]	; (8017554 <prvCheckTasksWaitingTermination+0x50>)
 8017512:	68db      	ldr	r3, [r3, #12]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	3304      	adds	r3, #4
 801751c:	4618      	mov	r0, r3
 801751e:	f7fe f92b 	bl	8015778 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017522:	4b0d      	ldr	r3, [pc, #52]	; (8017558 <prvCheckTasksWaitingTermination+0x54>)
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	3b01      	subs	r3, #1
 8017528:	4a0b      	ldr	r2, [pc, #44]	; (8017558 <prvCheckTasksWaitingTermination+0x54>)
 801752a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801752c:	4b0b      	ldr	r3, [pc, #44]	; (801755c <prvCheckTasksWaitingTermination+0x58>)
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	3b01      	subs	r3, #1
 8017532:	4a0a      	ldr	r2, [pc, #40]	; (801755c <prvCheckTasksWaitingTermination+0x58>)
 8017534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017536:	f000 fefd 	bl	8018334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f000 f810 	bl	8017560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017540:	4b06      	ldr	r3, [pc, #24]	; (801755c <prvCheckTasksWaitingTermination+0x58>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d1e1      	bne.n	801750c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017548:	bf00      	nop
 801754a:	bf00      	nop
 801754c:	3708      	adds	r7, #8
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}
 8017552:	bf00      	nop
 8017554:	24006120 	.word	0x24006120
 8017558:	2400614c 	.word	0x2400614c
 801755c:	24006134 	.word	0x24006134

08017560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017560:	b580      	push	{r7, lr}
 8017562:	b084      	sub	sp, #16
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	3354      	adds	r3, #84	; 0x54
 801756c:	4618      	mov	r0, r3
 801756e:	f00e fdd3 	bl	8026118 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017578:	2b00      	cmp	r3, #0
 801757a:	d108      	bne.n	801758e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017580:	4618      	mov	r0, r3
 8017582:	f001 f895 	bl	80186b0 <vPortFree>
				vPortFree( pxTCB );
 8017586:	6878      	ldr	r0, [r7, #4]
 8017588:	f001 f892 	bl	80186b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801758c:	e018      	b.n	80175c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017594:	2b01      	cmp	r3, #1
 8017596:	d103      	bne.n	80175a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017598:	6878      	ldr	r0, [r7, #4]
 801759a:	f001 f889 	bl	80186b0 <vPortFree>
	}
 801759e:	e00f      	b.n	80175c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80175a6:	2b02      	cmp	r3, #2
 80175a8:	d00a      	beq.n	80175c0 <prvDeleteTCB+0x60>
	__asm volatile
 80175aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ae:	f383 8811 	msr	BASEPRI, r3
 80175b2:	f3bf 8f6f 	isb	sy
 80175b6:	f3bf 8f4f 	dsb	sy
 80175ba:	60fb      	str	r3, [r7, #12]
}
 80175bc:	bf00      	nop
 80175be:	e7fe      	b.n	80175be <prvDeleteTCB+0x5e>
	}
 80175c0:	bf00      	nop
 80175c2:	3710      	adds	r7, #16
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}

080175c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80175c8:	b480      	push	{r7}
 80175ca:	b083      	sub	sp, #12
 80175cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80175ce:	4b0c      	ldr	r3, [pc, #48]	; (8017600 <prvResetNextTaskUnblockTime+0x38>)
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d104      	bne.n	80175e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80175d8:	4b0a      	ldr	r3, [pc, #40]	; (8017604 <prvResetNextTaskUnblockTime+0x3c>)
 80175da:	f04f 32ff 	mov.w	r2, #4294967295
 80175de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80175e0:	e008      	b.n	80175f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175e2:	4b07      	ldr	r3, [pc, #28]	; (8017600 <prvResetNextTaskUnblockTime+0x38>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	68db      	ldr	r3, [r3, #12]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	685b      	ldr	r3, [r3, #4]
 80175f0:	4a04      	ldr	r2, [pc, #16]	; (8017604 <prvResetNextTaskUnblockTime+0x3c>)
 80175f2:	6013      	str	r3, [r2, #0]
}
 80175f4:	bf00      	nop
 80175f6:	370c      	adds	r7, #12
 80175f8:	46bd      	mov	sp, r7
 80175fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fe:	4770      	bx	lr
 8017600:	24006104 	.word	0x24006104
 8017604:	2400616c 	.word	0x2400616c

08017608 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017608:	b480      	push	{r7}
 801760a:	b083      	sub	sp, #12
 801760c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801760e:	4b05      	ldr	r3, [pc, #20]	; (8017624 <xTaskGetCurrentTaskHandle+0x1c>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017614:	687b      	ldr	r3, [r7, #4]
	}
 8017616:	4618      	mov	r0, r3
 8017618:	370c      	adds	r7, #12
 801761a:	46bd      	mov	sp, r7
 801761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017620:	4770      	bx	lr
 8017622:	bf00      	nop
 8017624:	24005c78 	.word	0x24005c78

08017628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017628:	b480      	push	{r7}
 801762a:	b083      	sub	sp, #12
 801762c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801762e:	4b0b      	ldr	r3, [pc, #44]	; (801765c <xTaskGetSchedulerState+0x34>)
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d102      	bne.n	801763c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017636:	2301      	movs	r3, #1
 8017638:	607b      	str	r3, [r7, #4]
 801763a:	e008      	b.n	801764e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801763c:	4b08      	ldr	r3, [pc, #32]	; (8017660 <xTaskGetSchedulerState+0x38>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d102      	bne.n	801764a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017644:	2302      	movs	r3, #2
 8017646:	607b      	str	r3, [r7, #4]
 8017648:	e001      	b.n	801764e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801764a:	2300      	movs	r3, #0
 801764c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801764e:	687b      	ldr	r3, [r7, #4]
	}
 8017650:	4618      	mov	r0, r3
 8017652:	370c      	adds	r7, #12
 8017654:	46bd      	mov	sp, r7
 8017656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765a:	4770      	bx	lr
 801765c:	24006158 	.word	0x24006158
 8017660:	24006174 	.word	0x24006174

08017664 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017664:	b580      	push	{r7, lr}
 8017666:	b084      	sub	sp, #16
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017670:	2300      	movs	r3, #0
 8017672:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d051      	beq.n	801771e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801767e:	4b2a      	ldr	r3, [pc, #168]	; (8017728 <xTaskPriorityInherit+0xc4>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017684:	429a      	cmp	r2, r3
 8017686:	d241      	bcs.n	801770c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	699b      	ldr	r3, [r3, #24]
 801768c:	2b00      	cmp	r3, #0
 801768e:	db06      	blt.n	801769e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017690:	4b25      	ldr	r3, [pc, #148]	; (8017728 <xTaskPriorityInherit+0xc4>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	6959      	ldr	r1, [r3, #20]
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176a6:	4613      	mov	r3, r2
 80176a8:	009b      	lsls	r3, r3, #2
 80176aa:	4413      	add	r3, r2
 80176ac:	009b      	lsls	r3, r3, #2
 80176ae:	4a1f      	ldr	r2, [pc, #124]	; (801772c <xTaskPriorityInherit+0xc8>)
 80176b0:	4413      	add	r3, r2
 80176b2:	4299      	cmp	r1, r3
 80176b4:	d122      	bne.n	80176fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	3304      	adds	r3, #4
 80176ba:	4618      	mov	r0, r3
 80176bc:	f7fe f85c 	bl	8015778 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80176c0:	4b19      	ldr	r3, [pc, #100]	; (8017728 <xTaskPriorityInherit+0xc4>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176ce:	4b18      	ldr	r3, [pc, #96]	; (8017730 <xTaskPriorityInherit+0xcc>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d903      	bls.n	80176de <xTaskPriorityInherit+0x7a>
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176da:	4a15      	ldr	r2, [pc, #84]	; (8017730 <xTaskPriorityInherit+0xcc>)
 80176dc:	6013      	str	r3, [r2, #0]
 80176de:	68bb      	ldr	r3, [r7, #8]
 80176e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176e2:	4613      	mov	r3, r2
 80176e4:	009b      	lsls	r3, r3, #2
 80176e6:	4413      	add	r3, r2
 80176e8:	009b      	lsls	r3, r3, #2
 80176ea:	4a10      	ldr	r2, [pc, #64]	; (801772c <xTaskPriorityInherit+0xc8>)
 80176ec:	441a      	add	r2, r3
 80176ee:	68bb      	ldr	r3, [r7, #8]
 80176f0:	3304      	adds	r3, #4
 80176f2:	4619      	mov	r1, r3
 80176f4:	4610      	mov	r0, r2
 80176f6:	f7fd ffe2 	bl	80156be <vListInsertEnd>
 80176fa:	e004      	b.n	8017706 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80176fc:	4b0a      	ldr	r3, [pc, #40]	; (8017728 <xTaskPriorityInherit+0xc4>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017702:	68bb      	ldr	r3, [r7, #8]
 8017704:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017706:	2301      	movs	r3, #1
 8017708:	60fb      	str	r3, [r7, #12]
 801770a:	e008      	b.n	801771e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017710:	4b05      	ldr	r3, [pc, #20]	; (8017728 <xTaskPriorityInherit+0xc4>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017716:	429a      	cmp	r2, r3
 8017718:	d201      	bcs.n	801771e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801771a:	2301      	movs	r3, #1
 801771c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801771e:	68fb      	ldr	r3, [r7, #12]
	}
 8017720:	4618      	mov	r0, r3
 8017722:	3710      	adds	r7, #16
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	24005c78 	.word	0x24005c78
 801772c:	24005c7c 	.word	0x24005c7c
 8017730:	24006154 	.word	0x24006154

08017734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017734:	b580      	push	{r7, lr}
 8017736:	b086      	sub	sp, #24
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017740:	2300      	movs	r3, #0
 8017742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d056      	beq.n	80177f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801774a:	4b2e      	ldr	r3, [pc, #184]	; (8017804 <xTaskPriorityDisinherit+0xd0>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	693a      	ldr	r2, [r7, #16]
 8017750:	429a      	cmp	r2, r3
 8017752:	d00a      	beq.n	801776a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017758:	f383 8811 	msr	BASEPRI, r3
 801775c:	f3bf 8f6f 	isb	sy
 8017760:	f3bf 8f4f 	dsb	sy
 8017764:	60fb      	str	r3, [r7, #12]
}
 8017766:	bf00      	nop
 8017768:	e7fe      	b.n	8017768 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801776a:	693b      	ldr	r3, [r7, #16]
 801776c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801776e:	2b00      	cmp	r3, #0
 8017770:	d10a      	bne.n	8017788 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017776:	f383 8811 	msr	BASEPRI, r3
 801777a:	f3bf 8f6f 	isb	sy
 801777e:	f3bf 8f4f 	dsb	sy
 8017782:	60bb      	str	r3, [r7, #8]
}
 8017784:	bf00      	nop
 8017786:	e7fe      	b.n	8017786 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017788:	693b      	ldr	r3, [r7, #16]
 801778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801778c:	1e5a      	subs	r2, r3, #1
 801778e:	693b      	ldr	r3, [r7, #16]
 8017790:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017792:	693b      	ldr	r3, [r7, #16]
 8017794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017796:	693b      	ldr	r3, [r7, #16]
 8017798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801779a:	429a      	cmp	r2, r3
 801779c:	d02c      	beq.n	80177f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801779e:	693b      	ldr	r3, [r7, #16]
 80177a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d128      	bne.n	80177f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80177a6:	693b      	ldr	r3, [r7, #16]
 80177a8:	3304      	adds	r3, #4
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7fd ffe4 	bl	8015778 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80177b0:	693b      	ldr	r3, [r7, #16]
 80177b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80177b4:	693b      	ldr	r3, [r7, #16]
 80177b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177b8:	693b      	ldr	r3, [r7, #16]
 80177ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80177c0:	693b      	ldr	r3, [r7, #16]
 80177c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80177c4:	693b      	ldr	r3, [r7, #16]
 80177c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177c8:	4b0f      	ldr	r3, [pc, #60]	; (8017808 <xTaskPriorityDisinherit+0xd4>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d903      	bls.n	80177d8 <xTaskPriorityDisinherit+0xa4>
 80177d0:	693b      	ldr	r3, [r7, #16]
 80177d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177d4:	4a0c      	ldr	r2, [pc, #48]	; (8017808 <xTaskPriorityDisinherit+0xd4>)
 80177d6:	6013      	str	r3, [r2, #0]
 80177d8:	693b      	ldr	r3, [r7, #16]
 80177da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177dc:	4613      	mov	r3, r2
 80177de:	009b      	lsls	r3, r3, #2
 80177e0:	4413      	add	r3, r2
 80177e2:	009b      	lsls	r3, r3, #2
 80177e4:	4a09      	ldr	r2, [pc, #36]	; (801780c <xTaskPriorityDisinherit+0xd8>)
 80177e6:	441a      	add	r2, r3
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	3304      	adds	r3, #4
 80177ec:	4619      	mov	r1, r3
 80177ee:	4610      	mov	r0, r2
 80177f0:	f7fd ff65 	bl	80156be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80177f4:	2301      	movs	r3, #1
 80177f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80177f8:	697b      	ldr	r3, [r7, #20]
	}
 80177fa:	4618      	mov	r0, r3
 80177fc:	3718      	adds	r7, #24
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}
 8017802:	bf00      	nop
 8017804:	24005c78 	.word	0x24005c78
 8017808:	24006154 	.word	0x24006154
 801780c:	24005c7c 	.word	0x24005c7c

08017810 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017810:	b580      	push	{r7, lr}
 8017812:	b088      	sub	sp, #32
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
 8017818:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801781e:	2301      	movs	r3, #1
 8017820:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d06a      	beq.n	80178fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017828:	69bb      	ldr	r3, [r7, #24]
 801782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801782c:	2b00      	cmp	r3, #0
 801782e:	d10a      	bne.n	8017846 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017834:	f383 8811 	msr	BASEPRI, r3
 8017838:	f3bf 8f6f 	isb	sy
 801783c:	f3bf 8f4f 	dsb	sy
 8017840:	60fb      	str	r3, [r7, #12]
}
 8017842:	bf00      	nop
 8017844:	e7fe      	b.n	8017844 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017846:	69bb      	ldr	r3, [r7, #24]
 8017848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801784a:	683a      	ldr	r2, [r7, #0]
 801784c:	429a      	cmp	r2, r3
 801784e:	d902      	bls.n	8017856 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	61fb      	str	r3, [r7, #28]
 8017854:	e002      	b.n	801785c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017856:	69bb      	ldr	r3, [r7, #24]
 8017858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801785a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801785c:	69bb      	ldr	r3, [r7, #24]
 801785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017860:	69fa      	ldr	r2, [r7, #28]
 8017862:	429a      	cmp	r2, r3
 8017864:	d04b      	beq.n	80178fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017866:	69bb      	ldr	r3, [r7, #24]
 8017868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801786a:	697a      	ldr	r2, [r7, #20]
 801786c:	429a      	cmp	r2, r3
 801786e:	d146      	bne.n	80178fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017870:	4b25      	ldr	r3, [pc, #148]	; (8017908 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	69ba      	ldr	r2, [r7, #24]
 8017876:	429a      	cmp	r2, r3
 8017878:	d10a      	bne.n	8017890 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801787e:	f383 8811 	msr	BASEPRI, r3
 8017882:	f3bf 8f6f 	isb	sy
 8017886:	f3bf 8f4f 	dsb	sy
 801788a:	60bb      	str	r3, [r7, #8]
}
 801788c:	bf00      	nop
 801788e:	e7fe      	b.n	801788e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017894:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017896:	69bb      	ldr	r3, [r7, #24]
 8017898:	69fa      	ldr	r2, [r7, #28]
 801789a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801789c:	69bb      	ldr	r3, [r7, #24]
 801789e:	699b      	ldr	r3, [r3, #24]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	db04      	blt.n	80178ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178a4:	69fb      	ldr	r3, [r7, #28]
 80178a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80178aa:	69bb      	ldr	r3, [r7, #24]
 80178ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	6959      	ldr	r1, [r3, #20]
 80178b2:	693a      	ldr	r2, [r7, #16]
 80178b4:	4613      	mov	r3, r2
 80178b6:	009b      	lsls	r3, r3, #2
 80178b8:	4413      	add	r3, r2
 80178ba:	009b      	lsls	r3, r3, #2
 80178bc:	4a13      	ldr	r2, [pc, #76]	; (801790c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80178be:	4413      	add	r3, r2
 80178c0:	4299      	cmp	r1, r3
 80178c2:	d11c      	bne.n	80178fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80178c4:	69bb      	ldr	r3, [r7, #24]
 80178c6:	3304      	adds	r3, #4
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7fd ff55 	bl	8015778 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80178ce:	69bb      	ldr	r3, [r7, #24]
 80178d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178d2:	4b0f      	ldr	r3, [pc, #60]	; (8017910 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	429a      	cmp	r2, r3
 80178d8:	d903      	bls.n	80178e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178de:	4a0c      	ldr	r2, [pc, #48]	; (8017910 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80178e0:	6013      	str	r3, [r2, #0]
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e6:	4613      	mov	r3, r2
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	4413      	add	r3, r2
 80178ec:	009b      	lsls	r3, r3, #2
 80178ee:	4a07      	ldr	r2, [pc, #28]	; (801790c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80178f0:	441a      	add	r2, r3
 80178f2:	69bb      	ldr	r3, [r7, #24]
 80178f4:	3304      	adds	r3, #4
 80178f6:	4619      	mov	r1, r3
 80178f8:	4610      	mov	r0, r2
 80178fa:	f7fd fee0 	bl	80156be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80178fe:	bf00      	nop
 8017900:	3720      	adds	r7, #32
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}
 8017906:	bf00      	nop
 8017908:	24005c78 	.word	0x24005c78
 801790c:	24005c7c 	.word	0x24005c7c
 8017910:	24006154 	.word	0x24006154

08017914 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017914:	b480      	push	{r7}
 8017916:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017918:	4b07      	ldr	r3, [pc, #28]	; (8017938 <pvTaskIncrementMutexHeldCount+0x24>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d004      	beq.n	801792a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017920:	4b05      	ldr	r3, [pc, #20]	; (8017938 <pvTaskIncrementMutexHeldCount+0x24>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017926:	3201      	adds	r2, #1
 8017928:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801792a:	4b03      	ldr	r3, [pc, #12]	; (8017938 <pvTaskIncrementMutexHeldCount+0x24>)
 801792c:	681b      	ldr	r3, [r3, #0]
	}
 801792e:	4618      	mov	r0, r3
 8017930:	46bd      	mov	sp, r7
 8017932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017936:	4770      	bx	lr
 8017938:	24005c78 	.word	0x24005c78

0801793c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b084      	sub	sp, #16
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
 8017944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017946:	4b21      	ldr	r3, [pc, #132]	; (80179cc <prvAddCurrentTaskToDelayedList+0x90>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801794c:	4b20      	ldr	r3, [pc, #128]	; (80179d0 <prvAddCurrentTaskToDelayedList+0x94>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	3304      	adds	r3, #4
 8017952:	4618      	mov	r0, r3
 8017954:	f7fd ff10 	bl	8015778 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801795e:	d10a      	bne.n	8017976 <prvAddCurrentTaskToDelayedList+0x3a>
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d007      	beq.n	8017976 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017966:	4b1a      	ldr	r3, [pc, #104]	; (80179d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	3304      	adds	r3, #4
 801796c:	4619      	mov	r1, r3
 801796e:	4819      	ldr	r0, [pc, #100]	; (80179d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8017970:	f7fd fea5 	bl	80156be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017974:	e026      	b.n	80179c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017976:	68fa      	ldr	r2, [r7, #12]
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	4413      	add	r3, r2
 801797c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801797e:	4b14      	ldr	r3, [pc, #80]	; (80179d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	68ba      	ldr	r2, [r7, #8]
 8017984:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017986:	68ba      	ldr	r2, [r7, #8]
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	429a      	cmp	r2, r3
 801798c:	d209      	bcs.n	80179a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801798e:	4b12      	ldr	r3, [pc, #72]	; (80179d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	4b0f      	ldr	r3, [pc, #60]	; (80179d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	3304      	adds	r3, #4
 8017998:	4619      	mov	r1, r3
 801799a:	4610      	mov	r0, r2
 801799c:	f7fd feb3 	bl	8015706 <vListInsert>
}
 80179a0:	e010      	b.n	80179c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80179a2:	4b0e      	ldr	r3, [pc, #56]	; (80179dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80179a4:	681a      	ldr	r2, [r3, #0]
 80179a6:	4b0a      	ldr	r3, [pc, #40]	; (80179d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	3304      	adds	r3, #4
 80179ac:	4619      	mov	r1, r3
 80179ae:	4610      	mov	r0, r2
 80179b0:	f7fd fea9 	bl	8015706 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80179b4:	4b0a      	ldr	r3, [pc, #40]	; (80179e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	68ba      	ldr	r2, [r7, #8]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d202      	bcs.n	80179c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80179be:	4a08      	ldr	r2, [pc, #32]	; (80179e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80179c0:	68bb      	ldr	r3, [r7, #8]
 80179c2:	6013      	str	r3, [r2, #0]
}
 80179c4:	bf00      	nop
 80179c6:	3710      	adds	r7, #16
 80179c8:	46bd      	mov	sp, r7
 80179ca:	bd80      	pop	{r7, pc}
 80179cc:	24006150 	.word	0x24006150
 80179d0:	24005c78 	.word	0x24005c78
 80179d4:	24006138 	.word	0x24006138
 80179d8:	24006108 	.word	0x24006108
 80179dc:	24006104 	.word	0x24006104
 80179e0:	2400616c 	.word	0x2400616c

080179e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b08a      	sub	sp, #40	; 0x28
 80179e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80179ea:	2300      	movs	r3, #0
 80179ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80179ee:	f000 fb07 	bl	8018000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80179f2:	4b1c      	ldr	r3, [pc, #112]	; (8017a64 <xTimerCreateTimerTask+0x80>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d021      	beq.n	8017a3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80179fa:	2300      	movs	r3, #0
 80179fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80179fe:	2300      	movs	r3, #0
 8017a00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017a02:	1d3a      	adds	r2, r7, #4
 8017a04:	f107 0108 	add.w	r1, r7, #8
 8017a08:	f107 030c 	add.w	r3, r7, #12
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7fd fe0f 	bl	8015630 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017a12:	6879      	ldr	r1, [r7, #4]
 8017a14:	68bb      	ldr	r3, [r7, #8]
 8017a16:	68fa      	ldr	r2, [r7, #12]
 8017a18:	9202      	str	r2, [sp, #8]
 8017a1a:	9301      	str	r3, [sp, #4]
 8017a1c:	2302      	movs	r3, #2
 8017a1e:	9300      	str	r3, [sp, #0]
 8017a20:	2300      	movs	r3, #0
 8017a22:	460a      	mov	r2, r1
 8017a24:	4910      	ldr	r1, [pc, #64]	; (8017a68 <xTimerCreateTimerTask+0x84>)
 8017a26:	4811      	ldr	r0, [pc, #68]	; (8017a6c <xTimerCreateTimerTask+0x88>)
 8017a28:	f7fe ff94 	bl	8016954 <xTaskCreateStatic>
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	4a10      	ldr	r2, [pc, #64]	; (8017a70 <xTimerCreateTimerTask+0x8c>)
 8017a30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017a32:	4b0f      	ldr	r3, [pc, #60]	; (8017a70 <xTimerCreateTimerTask+0x8c>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d001      	beq.n	8017a3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017a3a:	2301      	movs	r3, #1
 8017a3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d10a      	bne.n	8017a5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a48:	f383 8811 	msr	BASEPRI, r3
 8017a4c:	f3bf 8f6f 	isb	sy
 8017a50:	f3bf 8f4f 	dsb	sy
 8017a54:	613b      	str	r3, [r7, #16]
}
 8017a56:	bf00      	nop
 8017a58:	e7fe      	b.n	8017a58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017a5a:	697b      	ldr	r3, [r7, #20]
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	3718      	adds	r7, #24
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}
 8017a64:	240061a8 	.word	0x240061a8
 8017a68:	08026f34 	.word	0x08026f34
 8017a6c:	08017ba9 	.word	0x08017ba9
 8017a70:	240061ac 	.word	0x240061ac

08017a74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b08a      	sub	sp, #40	; 0x28
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	60f8      	str	r0, [r7, #12]
 8017a7c:	60b9      	str	r1, [r7, #8]
 8017a7e:	607a      	str	r2, [r7, #4]
 8017a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017a82:	2300      	movs	r3, #0
 8017a84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d10a      	bne.n	8017aa2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8017a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a90:	f383 8811 	msr	BASEPRI, r3
 8017a94:	f3bf 8f6f 	isb	sy
 8017a98:	f3bf 8f4f 	dsb	sy
 8017a9c:	623b      	str	r3, [r7, #32]
}
 8017a9e:	bf00      	nop
 8017aa0:	e7fe      	b.n	8017aa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017aa2:	4b1a      	ldr	r3, [pc, #104]	; (8017b0c <xTimerGenericCommand+0x98>)
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d02a      	beq.n	8017b00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017ab6:	68bb      	ldr	r3, [r7, #8]
 8017ab8:	2b05      	cmp	r3, #5
 8017aba:	dc18      	bgt.n	8017aee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017abc:	f7ff fdb4 	bl	8017628 <xTaskGetSchedulerState>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	2b02      	cmp	r3, #2
 8017ac4:	d109      	bne.n	8017ada <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017ac6:	4b11      	ldr	r3, [pc, #68]	; (8017b0c <xTimerGenericCommand+0x98>)
 8017ac8:	6818      	ldr	r0, [r3, #0]
 8017aca:	f107 0110 	add.w	r1, r7, #16
 8017ace:	2300      	movs	r3, #0
 8017ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ad2:	f7fe f8d9 	bl	8015c88 <xQueueGenericSend>
 8017ad6:	6278      	str	r0, [r7, #36]	; 0x24
 8017ad8:	e012      	b.n	8017b00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017ada:	4b0c      	ldr	r3, [pc, #48]	; (8017b0c <xTimerGenericCommand+0x98>)
 8017adc:	6818      	ldr	r0, [r3, #0]
 8017ade:	f107 0110 	add.w	r1, r7, #16
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	f7fe f8cf 	bl	8015c88 <xQueueGenericSend>
 8017aea:	6278      	str	r0, [r7, #36]	; 0x24
 8017aec:	e008      	b.n	8017b00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017aee:	4b07      	ldr	r3, [pc, #28]	; (8017b0c <xTimerGenericCommand+0x98>)
 8017af0:	6818      	ldr	r0, [r3, #0]
 8017af2:	f107 0110 	add.w	r1, r7, #16
 8017af6:	2300      	movs	r3, #0
 8017af8:	683a      	ldr	r2, [r7, #0]
 8017afa:	f7fe f9c3 	bl	8015e84 <xQueueGenericSendFromISR>
 8017afe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017b02:	4618      	mov	r0, r3
 8017b04:	3728      	adds	r7, #40	; 0x28
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	240061a8 	.word	0x240061a8

08017b10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b088      	sub	sp, #32
 8017b14:	af02      	add	r7, sp, #8
 8017b16:	6078      	str	r0, [r7, #4]
 8017b18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b1a:	4b22      	ldr	r3, [pc, #136]	; (8017ba4 <prvProcessExpiredTimer+0x94>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	68db      	ldr	r3, [r3, #12]
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017b24:	697b      	ldr	r3, [r7, #20]
 8017b26:	3304      	adds	r3, #4
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7fd fe25 	bl	8015778 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b34:	f003 0304 	and.w	r3, r3, #4
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d022      	beq.n	8017b82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	699a      	ldr	r2, [r3, #24]
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	18d1      	adds	r1, r2, r3
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	683a      	ldr	r2, [r7, #0]
 8017b48:	6978      	ldr	r0, [r7, #20]
 8017b4a:	f000 f8d1 	bl	8017cf0 <prvInsertTimerInActiveList>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d01f      	beq.n	8017b94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017b54:	2300      	movs	r3, #0
 8017b56:	9300      	str	r3, [sp, #0]
 8017b58:	2300      	movs	r3, #0
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	2100      	movs	r1, #0
 8017b5e:	6978      	ldr	r0, [r7, #20]
 8017b60:	f7ff ff88 	bl	8017a74 <xTimerGenericCommand>
 8017b64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017b66:	693b      	ldr	r3, [r7, #16]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d113      	bne.n	8017b94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b70:	f383 8811 	msr	BASEPRI, r3
 8017b74:	f3bf 8f6f 	isb	sy
 8017b78:	f3bf 8f4f 	dsb	sy
 8017b7c:	60fb      	str	r3, [r7, #12]
}
 8017b7e:	bf00      	nop
 8017b80:	e7fe      	b.n	8017b80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b88:	f023 0301 	bic.w	r3, r3, #1
 8017b8c:	b2da      	uxtb	r2, r3
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	6a1b      	ldr	r3, [r3, #32]
 8017b98:	6978      	ldr	r0, [r7, #20]
 8017b9a:	4798      	blx	r3
}
 8017b9c:	bf00      	nop
 8017b9e:	3718      	adds	r7, #24
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}
 8017ba4:	240061a0 	.word	0x240061a0

08017ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b084      	sub	sp, #16
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017bb0:	f107 0308 	add.w	r3, r7, #8
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f000 f857 	bl	8017c68 <prvGetNextExpireTime>
 8017bba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017bbc:	68bb      	ldr	r3, [r7, #8]
 8017bbe:	4619      	mov	r1, r3
 8017bc0:	68f8      	ldr	r0, [r7, #12]
 8017bc2:	f000 f803 	bl	8017bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017bc6:	f000 f8d5 	bl	8017d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017bca:	e7f1      	b.n	8017bb0 <prvTimerTask+0x8>

08017bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b084      	sub	sp, #16
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017bd6:	f7ff f919 	bl	8016e0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017bda:	f107 0308 	add.w	r3, r7, #8
 8017bde:	4618      	mov	r0, r3
 8017be0:	f000 f866 	bl	8017cb0 <prvSampleTimeNow>
 8017be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d130      	bne.n	8017c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d10a      	bne.n	8017c08 <prvProcessTimerOrBlockTask+0x3c>
 8017bf2:	687a      	ldr	r2, [r7, #4]
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d806      	bhi.n	8017c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017bfa:	f7ff f915 	bl	8016e28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017bfe:	68f9      	ldr	r1, [r7, #12]
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f7ff ff85 	bl	8017b10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017c06:	e024      	b.n	8017c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d008      	beq.n	8017c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017c0e:	4b13      	ldr	r3, [pc, #76]	; (8017c5c <prvProcessTimerOrBlockTask+0x90>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d101      	bne.n	8017c1c <prvProcessTimerOrBlockTask+0x50>
 8017c18:	2301      	movs	r3, #1
 8017c1a:	e000      	b.n	8017c1e <prvProcessTimerOrBlockTask+0x52>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017c20:	4b0f      	ldr	r3, [pc, #60]	; (8017c60 <prvProcessTimerOrBlockTask+0x94>)
 8017c22:	6818      	ldr	r0, [r3, #0]
 8017c24:	687a      	ldr	r2, [r7, #4]
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	1ad3      	subs	r3, r2, r3
 8017c2a:	683a      	ldr	r2, [r7, #0]
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	f7fe fe5d 	bl	80168ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017c32:	f7ff f8f9 	bl	8016e28 <xTaskResumeAll>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d10a      	bne.n	8017c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017c3c:	4b09      	ldr	r3, [pc, #36]	; (8017c64 <prvProcessTimerOrBlockTask+0x98>)
 8017c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c42:	601a      	str	r2, [r3, #0]
 8017c44:	f3bf 8f4f 	dsb	sy
 8017c48:	f3bf 8f6f 	isb	sy
}
 8017c4c:	e001      	b.n	8017c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017c4e:	f7ff f8eb 	bl	8016e28 <xTaskResumeAll>
}
 8017c52:	bf00      	nop
 8017c54:	3710      	adds	r7, #16
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}
 8017c5a:	bf00      	nop
 8017c5c:	240061a4 	.word	0x240061a4
 8017c60:	240061a8 	.word	0x240061a8
 8017c64:	e000ed04 	.word	0xe000ed04

08017c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017c68:	b480      	push	{r7}
 8017c6a:	b085      	sub	sp, #20
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017c70:	4b0e      	ldr	r3, [pc, #56]	; (8017cac <prvGetNextExpireTime+0x44>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d101      	bne.n	8017c7e <prvGetNextExpireTime+0x16>
 8017c7a:	2201      	movs	r2, #1
 8017c7c:	e000      	b.n	8017c80 <prvGetNextExpireTime+0x18>
 8017c7e:	2200      	movs	r2, #0
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d105      	bne.n	8017c98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017c8c:	4b07      	ldr	r3, [pc, #28]	; (8017cac <prvGetNextExpireTime+0x44>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	68db      	ldr	r3, [r3, #12]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	60fb      	str	r3, [r7, #12]
 8017c96:	e001      	b.n	8017c9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017c9c:	68fb      	ldr	r3, [r7, #12]
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	3714      	adds	r7, #20
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca8:	4770      	bx	lr
 8017caa:	bf00      	nop
 8017cac:	240061a0 	.word	0x240061a0

08017cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b084      	sub	sp, #16
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017cb8:	f7ff f954 	bl	8016f64 <xTaskGetTickCount>
 8017cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017cbe:	4b0b      	ldr	r3, [pc, #44]	; (8017cec <prvSampleTimeNow+0x3c>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	68fa      	ldr	r2, [r7, #12]
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	d205      	bcs.n	8017cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017cc8:	f000 f936 	bl	8017f38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2201      	movs	r2, #1
 8017cd0:	601a      	str	r2, [r3, #0]
 8017cd2:	e002      	b.n	8017cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017cda:	4a04      	ldr	r2, [pc, #16]	; (8017cec <prvSampleTimeNow+0x3c>)
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017ce0:	68fb      	ldr	r3, [r7, #12]
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3710      	adds	r7, #16
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}
 8017cea:	bf00      	nop
 8017cec:	240061b0 	.word	0x240061b0

08017cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b086      	sub	sp, #24
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	60b9      	str	r1, [r7, #8]
 8017cfa:	607a      	str	r2, [r7, #4]
 8017cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	68ba      	ldr	r2, [r7, #8]
 8017d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	68fa      	ldr	r2, [r7, #12]
 8017d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017d0e:	68ba      	ldr	r2, [r7, #8]
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d812      	bhi.n	8017d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d16:	687a      	ldr	r2, [r7, #4]
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	1ad2      	subs	r2, r2, r3
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	699b      	ldr	r3, [r3, #24]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d302      	bcc.n	8017d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017d24:	2301      	movs	r3, #1
 8017d26:	617b      	str	r3, [r7, #20]
 8017d28:	e01b      	b.n	8017d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017d2a:	4b10      	ldr	r3, [pc, #64]	; (8017d6c <prvInsertTimerInActiveList+0x7c>)
 8017d2c:	681a      	ldr	r2, [r3, #0]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	3304      	adds	r3, #4
 8017d32:	4619      	mov	r1, r3
 8017d34:	4610      	mov	r0, r2
 8017d36:	f7fd fce6 	bl	8015706 <vListInsert>
 8017d3a:	e012      	b.n	8017d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017d3c:	687a      	ldr	r2, [r7, #4]
 8017d3e:	683b      	ldr	r3, [r7, #0]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d206      	bcs.n	8017d52 <prvInsertTimerInActiveList+0x62>
 8017d44:	68ba      	ldr	r2, [r7, #8]
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	d302      	bcc.n	8017d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	617b      	str	r3, [r7, #20]
 8017d50:	e007      	b.n	8017d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017d52:	4b07      	ldr	r3, [pc, #28]	; (8017d70 <prvInsertTimerInActiveList+0x80>)
 8017d54:	681a      	ldr	r2, [r3, #0]
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	3304      	adds	r3, #4
 8017d5a:	4619      	mov	r1, r3
 8017d5c:	4610      	mov	r0, r2
 8017d5e:	f7fd fcd2 	bl	8015706 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017d62:	697b      	ldr	r3, [r7, #20]
}
 8017d64:	4618      	mov	r0, r3
 8017d66:	3718      	adds	r7, #24
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	240061a4 	.word	0x240061a4
 8017d70:	240061a0 	.word	0x240061a0

08017d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b08e      	sub	sp, #56	; 0x38
 8017d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017d7a:	e0ca      	b.n	8017f12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	da18      	bge.n	8017db4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017d82:	1d3b      	adds	r3, r7, #4
 8017d84:	3304      	adds	r3, #4
 8017d86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d10a      	bne.n	8017da4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d92:	f383 8811 	msr	BASEPRI, r3
 8017d96:	f3bf 8f6f 	isb	sy
 8017d9a:	f3bf 8f4f 	dsb	sy
 8017d9e:	61fb      	str	r3, [r7, #28]
}
 8017da0:	bf00      	nop
 8017da2:	e7fe      	b.n	8017da2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017daa:	6850      	ldr	r0, [r2, #4]
 8017dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017dae:	6892      	ldr	r2, [r2, #8]
 8017db0:	4611      	mov	r1, r2
 8017db2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	f2c0 80aa 	blt.w	8017f10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc2:	695b      	ldr	r3, [r3, #20]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d004      	beq.n	8017dd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dca:	3304      	adds	r3, #4
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f7fd fcd3 	bl	8015778 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017dd2:	463b      	mov	r3, r7
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7ff ff6b 	bl	8017cb0 <prvSampleTimeNow>
 8017dda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2b09      	cmp	r3, #9
 8017de0:	f200 8097 	bhi.w	8017f12 <prvProcessReceivedCommands+0x19e>
 8017de4:	a201      	add	r2, pc, #4	; (adr r2, 8017dec <prvProcessReceivedCommands+0x78>)
 8017de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dea:	bf00      	nop
 8017dec:	08017e15 	.word	0x08017e15
 8017df0:	08017e15 	.word	0x08017e15
 8017df4:	08017e15 	.word	0x08017e15
 8017df8:	08017e89 	.word	0x08017e89
 8017dfc:	08017e9d 	.word	0x08017e9d
 8017e00:	08017ee7 	.word	0x08017ee7
 8017e04:	08017e15 	.word	0x08017e15
 8017e08:	08017e15 	.word	0x08017e15
 8017e0c:	08017e89 	.word	0x08017e89
 8017e10:	08017e9d 	.word	0x08017e9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e1a:	f043 0301 	orr.w	r3, r3, #1
 8017e1e:	b2da      	uxtb	r2, r3
 8017e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017e26:	68ba      	ldr	r2, [r7, #8]
 8017e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2a:	699b      	ldr	r3, [r3, #24]
 8017e2c:	18d1      	adds	r1, r2, r3
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e34:	f7ff ff5c 	bl	8017cf0 <prvInsertTimerInActiveList>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d069      	beq.n	8017f12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e40:	6a1b      	ldr	r3, [r3, #32]
 8017e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e4c:	f003 0304 	and.w	r3, r3, #4
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d05e      	beq.n	8017f12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017e54:	68ba      	ldr	r2, [r7, #8]
 8017e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e58:	699b      	ldr	r3, [r3, #24]
 8017e5a:	441a      	add	r2, r3
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	9300      	str	r3, [sp, #0]
 8017e60:	2300      	movs	r3, #0
 8017e62:	2100      	movs	r1, #0
 8017e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e66:	f7ff fe05 	bl	8017a74 <xTimerGenericCommand>
 8017e6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017e6c:	6a3b      	ldr	r3, [r7, #32]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d14f      	bne.n	8017f12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e76:	f383 8811 	msr	BASEPRI, r3
 8017e7a:	f3bf 8f6f 	isb	sy
 8017e7e:	f3bf 8f4f 	dsb	sy
 8017e82:	61bb      	str	r3, [r7, #24]
}
 8017e84:	bf00      	nop
 8017e86:	e7fe      	b.n	8017e86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e8e:	f023 0301 	bic.w	r3, r3, #1
 8017e92:	b2da      	uxtb	r2, r3
 8017e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017e9a:	e03a      	b.n	8017f12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ea2:	f043 0301 	orr.w	r3, r3, #1
 8017ea6:	b2da      	uxtb	r2, r3
 8017ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017eae:	68ba      	ldr	r2, [r7, #8]
 8017eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb6:	699b      	ldr	r3, [r3, #24]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d10a      	bne.n	8017ed2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ec0:	f383 8811 	msr	BASEPRI, r3
 8017ec4:	f3bf 8f6f 	isb	sy
 8017ec8:	f3bf 8f4f 	dsb	sy
 8017ecc:	617b      	str	r3, [r7, #20]
}
 8017ece:	bf00      	nop
 8017ed0:	e7fe      	b.n	8017ed0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed4:	699a      	ldr	r2, [r3, #24]
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed8:	18d1      	adds	r1, r2, r3
 8017eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ee0:	f7ff ff06 	bl	8017cf0 <prvInsertTimerInActiveList>
					break;
 8017ee4:	e015      	b.n	8017f12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017eec:	f003 0302 	and.w	r3, r3, #2
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d103      	bne.n	8017efc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ef6:	f000 fbdb 	bl	80186b0 <vPortFree>
 8017efa:	e00a      	b.n	8017f12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f02:	f023 0301 	bic.w	r3, r3, #1
 8017f06:	b2da      	uxtb	r2, r3
 8017f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017f0e:	e000      	b.n	8017f12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017f10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017f12:	4b08      	ldr	r3, [pc, #32]	; (8017f34 <prvProcessReceivedCommands+0x1c0>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	1d39      	adds	r1, r7, #4
 8017f18:	2200      	movs	r2, #0
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f7fe f8da 	bl	80160d4 <xQueueReceive>
 8017f20:	4603      	mov	r3, r0
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	f47f af2a 	bne.w	8017d7c <prvProcessReceivedCommands+0x8>
	}
}
 8017f28:	bf00      	nop
 8017f2a:	bf00      	nop
 8017f2c:	3730      	adds	r7, #48	; 0x30
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}
 8017f32:	bf00      	nop
 8017f34:	240061a8 	.word	0x240061a8

08017f38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b088      	sub	sp, #32
 8017f3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017f3e:	e048      	b.n	8017fd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017f40:	4b2d      	ldr	r3, [pc, #180]	; (8017ff8 <prvSwitchTimerLists+0xc0>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	68db      	ldr	r3, [r3, #12]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f4a:	4b2b      	ldr	r3, [pc, #172]	; (8017ff8 <prvSwitchTimerLists+0xc0>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	68db      	ldr	r3, [r3, #12]
 8017f50:	68db      	ldr	r3, [r3, #12]
 8017f52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	3304      	adds	r3, #4
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f7fd fc0d 	bl	8015778 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	6a1b      	ldr	r3, [r3, #32]
 8017f62:	68f8      	ldr	r0, [r7, #12]
 8017f64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f6c:	f003 0304 	and.w	r3, r3, #4
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d02e      	beq.n	8017fd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	699b      	ldr	r3, [r3, #24]
 8017f78:	693a      	ldr	r2, [r7, #16]
 8017f7a:	4413      	add	r3, r2
 8017f7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017f7e:	68ba      	ldr	r2, [r7, #8]
 8017f80:	693b      	ldr	r3, [r7, #16]
 8017f82:	429a      	cmp	r2, r3
 8017f84:	d90e      	bls.n	8017fa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	68ba      	ldr	r2, [r7, #8]
 8017f8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	68fa      	ldr	r2, [r7, #12]
 8017f90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017f92:	4b19      	ldr	r3, [pc, #100]	; (8017ff8 <prvSwitchTimerLists+0xc0>)
 8017f94:	681a      	ldr	r2, [r3, #0]
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	3304      	adds	r3, #4
 8017f9a:	4619      	mov	r1, r3
 8017f9c:	4610      	mov	r0, r2
 8017f9e:	f7fd fbb2 	bl	8015706 <vListInsert>
 8017fa2:	e016      	b.n	8017fd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	9300      	str	r3, [sp, #0]
 8017fa8:	2300      	movs	r3, #0
 8017faa:	693a      	ldr	r2, [r7, #16]
 8017fac:	2100      	movs	r1, #0
 8017fae:	68f8      	ldr	r0, [r7, #12]
 8017fb0:	f7ff fd60 	bl	8017a74 <xTimerGenericCommand>
 8017fb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d10a      	bne.n	8017fd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fc0:	f383 8811 	msr	BASEPRI, r3
 8017fc4:	f3bf 8f6f 	isb	sy
 8017fc8:	f3bf 8f4f 	dsb	sy
 8017fcc:	603b      	str	r3, [r7, #0]
}
 8017fce:	bf00      	nop
 8017fd0:	e7fe      	b.n	8017fd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017fd2:	4b09      	ldr	r3, [pc, #36]	; (8017ff8 <prvSwitchTimerLists+0xc0>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d1b1      	bne.n	8017f40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017fdc:	4b06      	ldr	r3, [pc, #24]	; (8017ff8 <prvSwitchTimerLists+0xc0>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017fe2:	4b06      	ldr	r3, [pc, #24]	; (8017ffc <prvSwitchTimerLists+0xc4>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	4a04      	ldr	r2, [pc, #16]	; (8017ff8 <prvSwitchTimerLists+0xc0>)
 8017fe8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017fea:	4a04      	ldr	r2, [pc, #16]	; (8017ffc <prvSwitchTimerLists+0xc4>)
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	6013      	str	r3, [r2, #0]
}
 8017ff0:	bf00      	nop
 8017ff2:	3718      	adds	r7, #24
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	bd80      	pop	{r7, pc}
 8017ff8:	240061a0 	.word	0x240061a0
 8017ffc:	240061a4 	.word	0x240061a4

08018000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018006:	f000 f965 	bl	80182d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801800a:	4b15      	ldr	r3, [pc, #84]	; (8018060 <prvCheckForValidListAndQueue+0x60>)
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d120      	bne.n	8018054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018012:	4814      	ldr	r0, [pc, #80]	; (8018064 <prvCheckForValidListAndQueue+0x64>)
 8018014:	f7fd fb26 	bl	8015664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018018:	4813      	ldr	r0, [pc, #76]	; (8018068 <prvCheckForValidListAndQueue+0x68>)
 801801a:	f7fd fb23 	bl	8015664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801801e:	4b13      	ldr	r3, [pc, #76]	; (801806c <prvCheckForValidListAndQueue+0x6c>)
 8018020:	4a10      	ldr	r2, [pc, #64]	; (8018064 <prvCheckForValidListAndQueue+0x64>)
 8018022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018024:	4b12      	ldr	r3, [pc, #72]	; (8018070 <prvCheckForValidListAndQueue+0x70>)
 8018026:	4a10      	ldr	r2, [pc, #64]	; (8018068 <prvCheckForValidListAndQueue+0x68>)
 8018028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801802a:	2300      	movs	r3, #0
 801802c:	9300      	str	r3, [sp, #0]
 801802e:	4b11      	ldr	r3, [pc, #68]	; (8018074 <prvCheckForValidListAndQueue+0x74>)
 8018030:	4a11      	ldr	r2, [pc, #68]	; (8018078 <prvCheckForValidListAndQueue+0x78>)
 8018032:	2110      	movs	r1, #16
 8018034:	200a      	movs	r0, #10
 8018036:	f7fd fc31 	bl	801589c <xQueueGenericCreateStatic>
 801803a:	4603      	mov	r3, r0
 801803c:	4a08      	ldr	r2, [pc, #32]	; (8018060 <prvCheckForValidListAndQueue+0x60>)
 801803e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018040:	4b07      	ldr	r3, [pc, #28]	; (8018060 <prvCheckForValidListAndQueue+0x60>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d005      	beq.n	8018054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018048:	4b05      	ldr	r3, [pc, #20]	; (8018060 <prvCheckForValidListAndQueue+0x60>)
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	490b      	ldr	r1, [pc, #44]	; (801807c <prvCheckForValidListAndQueue+0x7c>)
 801804e:	4618      	mov	r0, r3
 8018050:	f7fe fbf8 	bl	8016844 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018054:	f000 f96e 	bl	8018334 <vPortExitCritical>
}
 8018058:	bf00      	nop
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}
 801805e:	bf00      	nop
 8018060:	240061a8 	.word	0x240061a8
 8018064:	24006178 	.word	0x24006178
 8018068:	2400618c 	.word	0x2400618c
 801806c:	240061a0 	.word	0x240061a0
 8018070:	240061a4 	.word	0x240061a4
 8018074:	24006254 	.word	0x24006254
 8018078:	240061b4 	.word	0x240061b4
 801807c:	08026f3c 	.word	0x08026f3c

08018080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018080:	b480      	push	{r7}
 8018082:	b085      	sub	sp, #20
 8018084:	af00      	add	r7, sp, #0
 8018086:	60f8      	str	r0, [r7, #12]
 8018088:	60b9      	str	r1, [r7, #8]
 801808a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	3b04      	subs	r3, #4
 8018090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	3b04      	subs	r3, #4
 801809e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	f023 0201 	bic.w	r2, r3, #1
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	3b04      	subs	r3, #4
 80180ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80180b0:	4a0c      	ldr	r2, [pc, #48]	; (80180e4 <pxPortInitialiseStack+0x64>)
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	3b14      	subs	r3, #20
 80180ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80180bc:	687a      	ldr	r2, [r7, #4]
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	3b04      	subs	r3, #4
 80180c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	f06f 0202 	mvn.w	r2, #2
 80180ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	3b20      	subs	r3, #32
 80180d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80180d6:	68fb      	ldr	r3, [r7, #12]
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3714      	adds	r7, #20
 80180dc:	46bd      	mov	sp, r7
 80180de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e2:	4770      	bx	lr
 80180e4:	080180e9 	.word	0x080180e9

080180e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80180e8:	b480      	push	{r7}
 80180ea:	b085      	sub	sp, #20
 80180ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80180ee:	2300      	movs	r3, #0
 80180f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80180f2:	4b12      	ldr	r3, [pc, #72]	; (801813c <prvTaskExitError+0x54>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180fa:	d00a      	beq.n	8018112 <prvTaskExitError+0x2a>
	__asm volatile
 80180fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018100:	f383 8811 	msr	BASEPRI, r3
 8018104:	f3bf 8f6f 	isb	sy
 8018108:	f3bf 8f4f 	dsb	sy
 801810c:	60fb      	str	r3, [r7, #12]
}
 801810e:	bf00      	nop
 8018110:	e7fe      	b.n	8018110 <prvTaskExitError+0x28>
	__asm volatile
 8018112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018116:	f383 8811 	msr	BASEPRI, r3
 801811a:	f3bf 8f6f 	isb	sy
 801811e:	f3bf 8f4f 	dsb	sy
 8018122:	60bb      	str	r3, [r7, #8]
}
 8018124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018126:	bf00      	nop
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d0fc      	beq.n	8018128 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801812e:	bf00      	nop
 8018130:	bf00      	nop
 8018132:	3714      	adds	r7, #20
 8018134:	46bd      	mov	sp, r7
 8018136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813a:	4770      	bx	lr
 801813c:	24000454 	.word	0x24000454

08018140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018140:	4b07      	ldr	r3, [pc, #28]	; (8018160 <pxCurrentTCBConst2>)
 8018142:	6819      	ldr	r1, [r3, #0]
 8018144:	6808      	ldr	r0, [r1, #0]
 8018146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801814a:	f380 8809 	msr	PSP, r0
 801814e:	f3bf 8f6f 	isb	sy
 8018152:	f04f 0000 	mov.w	r0, #0
 8018156:	f380 8811 	msr	BASEPRI, r0
 801815a:	4770      	bx	lr
 801815c:	f3af 8000 	nop.w

08018160 <pxCurrentTCBConst2>:
 8018160:	24005c78 	.word	0x24005c78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018164:	bf00      	nop
 8018166:	bf00      	nop

08018168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018168:	4808      	ldr	r0, [pc, #32]	; (801818c <prvPortStartFirstTask+0x24>)
 801816a:	6800      	ldr	r0, [r0, #0]
 801816c:	6800      	ldr	r0, [r0, #0]
 801816e:	f380 8808 	msr	MSP, r0
 8018172:	f04f 0000 	mov.w	r0, #0
 8018176:	f380 8814 	msr	CONTROL, r0
 801817a:	b662      	cpsie	i
 801817c:	b661      	cpsie	f
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	f3bf 8f6f 	isb	sy
 8018186:	df00      	svc	0
 8018188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801818a:	bf00      	nop
 801818c:	e000ed08 	.word	0xe000ed08

08018190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b086      	sub	sp, #24
 8018194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018196:	4b46      	ldr	r3, [pc, #280]	; (80182b0 <xPortStartScheduler+0x120>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	4a46      	ldr	r2, [pc, #280]	; (80182b4 <xPortStartScheduler+0x124>)
 801819c:	4293      	cmp	r3, r2
 801819e:	d10a      	bne.n	80181b6 <xPortStartScheduler+0x26>
	__asm volatile
 80181a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a4:	f383 8811 	msr	BASEPRI, r3
 80181a8:	f3bf 8f6f 	isb	sy
 80181ac:	f3bf 8f4f 	dsb	sy
 80181b0:	613b      	str	r3, [r7, #16]
}
 80181b2:	bf00      	nop
 80181b4:	e7fe      	b.n	80181b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80181b6:	4b3e      	ldr	r3, [pc, #248]	; (80182b0 <xPortStartScheduler+0x120>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	4a3f      	ldr	r2, [pc, #252]	; (80182b8 <xPortStartScheduler+0x128>)
 80181bc:	4293      	cmp	r3, r2
 80181be:	d10a      	bne.n	80181d6 <xPortStartScheduler+0x46>
	__asm volatile
 80181c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181c4:	f383 8811 	msr	BASEPRI, r3
 80181c8:	f3bf 8f6f 	isb	sy
 80181cc:	f3bf 8f4f 	dsb	sy
 80181d0:	60fb      	str	r3, [r7, #12]
}
 80181d2:	bf00      	nop
 80181d4:	e7fe      	b.n	80181d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80181d6:	4b39      	ldr	r3, [pc, #228]	; (80182bc <xPortStartScheduler+0x12c>)
 80181d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80181da:	697b      	ldr	r3, [r7, #20]
 80181dc:	781b      	ldrb	r3, [r3, #0]
 80181de:	b2db      	uxtb	r3, r3
 80181e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80181e2:	697b      	ldr	r3, [r7, #20]
 80181e4:	22ff      	movs	r2, #255	; 0xff
 80181e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80181e8:	697b      	ldr	r3, [r7, #20]
 80181ea:	781b      	ldrb	r3, [r3, #0]
 80181ec:	b2db      	uxtb	r3, r3
 80181ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80181f0:	78fb      	ldrb	r3, [r7, #3]
 80181f2:	b2db      	uxtb	r3, r3
 80181f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80181f8:	b2da      	uxtb	r2, r3
 80181fa:	4b31      	ldr	r3, [pc, #196]	; (80182c0 <xPortStartScheduler+0x130>)
 80181fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80181fe:	4b31      	ldr	r3, [pc, #196]	; (80182c4 <xPortStartScheduler+0x134>)
 8018200:	2207      	movs	r2, #7
 8018202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018204:	e009      	b.n	801821a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018206:	4b2f      	ldr	r3, [pc, #188]	; (80182c4 <xPortStartScheduler+0x134>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	3b01      	subs	r3, #1
 801820c:	4a2d      	ldr	r2, [pc, #180]	; (80182c4 <xPortStartScheduler+0x134>)
 801820e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018210:	78fb      	ldrb	r3, [r7, #3]
 8018212:	b2db      	uxtb	r3, r3
 8018214:	005b      	lsls	r3, r3, #1
 8018216:	b2db      	uxtb	r3, r3
 8018218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801821a:	78fb      	ldrb	r3, [r7, #3]
 801821c:	b2db      	uxtb	r3, r3
 801821e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018222:	2b80      	cmp	r3, #128	; 0x80
 8018224:	d0ef      	beq.n	8018206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018226:	4b27      	ldr	r3, [pc, #156]	; (80182c4 <xPortStartScheduler+0x134>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	f1c3 0307 	rsb	r3, r3, #7
 801822e:	2b04      	cmp	r3, #4
 8018230:	d00a      	beq.n	8018248 <xPortStartScheduler+0xb8>
	__asm volatile
 8018232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018236:	f383 8811 	msr	BASEPRI, r3
 801823a:	f3bf 8f6f 	isb	sy
 801823e:	f3bf 8f4f 	dsb	sy
 8018242:	60bb      	str	r3, [r7, #8]
}
 8018244:	bf00      	nop
 8018246:	e7fe      	b.n	8018246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018248:	4b1e      	ldr	r3, [pc, #120]	; (80182c4 <xPortStartScheduler+0x134>)
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	021b      	lsls	r3, r3, #8
 801824e:	4a1d      	ldr	r2, [pc, #116]	; (80182c4 <xPortStartScheduler+0x134>)
 8018250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018252:	4b1c      	ldr	r3, [pc, #112]	; (80182c4 <xPortStartScheduler+0x134>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801825a:	4a1a      	ldr	r2, [pc, #104]	; (80182c4 <xPortStartScheduler+0x134>)
 801825c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	b2da      	uxtb	r2, r3
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018266:	4b18      	ldr	r3, [pc, #96]	; (80182c8 <xPortStartScheduler+0x138>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4a17      	ldr	r2, [pc, #92]	; (80182c8 <xPortStartScheduler+0x138>)
 801826c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018272:	4b15      	ldr	r3, [pc, #84]	; (80182c8 <xPortStartScheduler+0x138>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	4a14      	ldr	r2, [pc, #80]	; (80182c8 <xPortStartScheduler+0x138>)
 8018278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801827c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801827e:	f000 f8dd 	bl	801843c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018282:	4b12      	ldr	r3, [pc, #72]	; (80182cc <xPortStartScheduler+0x13c>)
 8018284:	2200      	movs	r2, #0
 8018286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018288:	f000 f8fc 	bl	8018484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801828c:	4b10      	ldr	r3, [pc, #64]	; (80182d0 <xPortStartScheduler+0x140>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	4a0f      	ldr	r2, [pc, #60]	; (80182d0 <xPortStartScheduler+0x140>)
 8018292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018298:	f7ff ff66 	bl	8018168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801829c:	f7fe ff3e 	bl	801711c <vTaskSwitchContext>
	prvTaskExitError();
 80182a0:	f7ff ff22 	bl	80180e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80182a4:	2300      	movs	r3, #0
}
 80182a6:	4618      	mov	r0, r3
 80182a8:	3718      	adds	r7, #24
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}
 80182ae:	bf00      	nop
 80182b0:	e000ed00 	.word	0xe000ed00
 80182b4:	410fc271 	.word	0x410fc271
 80182b8:	410fc270 	.word	0x410fc270
 80182bc:	e000e400 	.word	0xe000e400
 80182c0:	240062a4 	.word	0x240062a4
 80182c4:	240062a8 	.word	0x240062a8
 80182c8:	e000ed20 	.word	0xe000ed20
 80182cc:	24000454 	.word	0x24000454
 80182d0:	e000ef34 	.word	0xe000ef34

080182d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80182d4:	b480      	push	{r7}
 80182d6:	b083      	sub	sp, #12
 80182d8:	af00      	add	r7, sp, #0
	__asm volatile
 80182da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182de:	f383 8811 	msr	BASEPRI, r3
 80182e2:	f3bf 8f6f 	isb	sy
 80182e6:	f3bf 8f4f 	dsb	sy
 80182ea:	607b      	str	r3, [r7, #4]
}
 80182ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80182ee:	4b0f      	ldr	r3, [pc, #60]	; (801832c <vPortEnterCritical+0x58>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	3301      	adds	r3, #1
 80182f4:	4a0d      	ldr	r2, [pc, #52]	; (801832c <vPortEnterCritical+0x58>)
 80182f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80182f8:	4b0c      	ldr	r3, [pc, #48]	; (801832c <vPortEnterCritical+0x58>)
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d10f      	bne.n	8018320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018300:	4b0b      	ldr	r3, [pc, #44]	; (8018330 <vPortEnterCritical+0x5c>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	b2db      	uxtb	r3, r3
 8018306:	2b00      	cmp	r3, #0
 8018308:	d00a      	beq.n	8018320 <vPortEnterCritical+0x4c>
	__asm volatile
 801830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801830e:	f383 8811 	msr	BASEPRI, r3
 8018312:	f3bf 8f6f 	isb	sy
 8018316:	f3bf 8f4f 	dsb	sy
 801831a:	603b      	str	r3, [r7, #0]
}
 801831c:	bf00      	nop
 801831e:	e7fe      	b.n	801831e <vPortEnterCritical+0x4a>
	}
}
 8018320:	bf00      	nop
 8018322:	370c      	adds	r7, #12
 8018324:	46bd      	mov	sp, r7
 8018326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832a:	4770      	bx	lr
 801832c:	24000454 	.word	0x24000454
 8018330:	e000ed04 	.word	0xe000ed04

08018334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018334:	b480      	push	{r7}
 8018336:	b083      	sub	sp, #12
 8018338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801833a:	4b12      	ldr	r3, [pc, #72]	; (8018384 <vPortExitCritical+0x50>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d10a      	bne.n	8018358 <vPortExitCritical+0x24>
	__asm volatile
 8018342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018346:	f383 8811 	msr	BASEPRI, r3
 801834a:	f3bf 8f6f 	isb	sy
 801834e:	f3bf 8f4f 	dsb	sy
 8018352:	607b      	str	r3, [r7, #4]
}
 8018354:	bf00      	nop
 8018356:	e7fe      	b.n	8018356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018358:	4b0a      	ldr	r3, [pc, #40]	; (8018384 <vPortExitCritical+0x50>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	3b01      	subs	r3, #1
 801835e:	4a09      	ldr	r2, [pc, #36]	; (8018384 <vPortExitCritical+0x50>)
 8018360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018362:	4b08      	ldr	r3, [pc, #32]	; (8018384 <vPortExitCritical+0x50>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d105      	bne.n	8018376 <vPortExitCritical+0x42>
 801836a:	2300      	movs	r3, #0
 801836c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	f383 8811 	msr	BASEPRI, r3
}
 8018374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018376:	bf00      	nop
 8018378:	370c      	adds	r7, #12
 801837a:	46bd      	mov	sp, r7
 801837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018380:	4770      	bx	lr
 8018382:	bf00      	nop
 8018384:	24000454 	.word	0x24000454
	...

08018390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018390:	f3ef 8009 	mrs	r0, PSP
 8018394:	f3bf 8f6f 	isb	sy
 8018398:	4b15      	ldr	r3, [pc, #84]	; (80183f0 <pxCurrentTCBConst>)
 801839a:	681a      	ldr	r2, [r3, #0]
 801839c:	f01e 0f10 	tst.w	lr, #16
 80183a0:	bf08      	it	eq
 80183a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80183a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183aa:	6010      	str	r0, [r2, #0]
 80183ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80183b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80183b4:	f380 8811 	msr	BASEPRI, r0
 80183b8:	f3bf 8f4f 	dsb	sy
 80183bc:	f3bf 8f6f 	isb	sy
 80183c0:	f7fe feac 	bl	801711c <vTaskSwitchContext>
 80183c4:	f04f 0000 	mov.w	r0, #0
 80183c8:	f380 8811 	msr	BASEPRI, r0
 80183cc:	bc09      	pop	{r0, r3}
 80183ce:	6819      	ldr	r1, [r3, #0]
 80183d0:	6808      	ldr	r0, [r1, #0]
 80183d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d6:	f01e 0f10 	tst.w	lr, #16
 80183da:	bf08      	it	eq
 80183dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80183e0:	f380 8809 	msr	PSP, r0
 80183e4:	f3bf 8f6f 	isb	sy
 80183e8:	4770      	bx	lr
 80183ea:	bf00      	nop
 80183ec:	f3af 8000 	nop.w

080183f0 <pxCurrentTCBConst>:
 80183f0:	24005c78 	.word	0x24005c78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80183f4:	bf00      	nop
 80183f6:	bf00      	nop

080183f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b082      	sub	sp, #8
 80183fc:	af00      	add	r7, sp, #0
	__asm volatile
 80183fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018402:	f383 8811 	msr	BASEPRI, r3
 8018406:	f3bf 8f6f 	isb	sy
 801840a:	f3bf 8f4f 	dsb	sy
 801840e:	607b      	str	r3, [r7, #4]
}
 8018410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018412:	f7fe fdc9 	bl	8016fa8 <xTaskIncrementTick>
 8018416:	4603      	mov	r3, r0
 8018418:	2b00      	cmp	r3, #0
 801841a:	d003      	beq.n	8018424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801841c:	4b06      	ldr	r3, [pc, #24]	; (8018438 <xPortSysTickHandler+0x40>)
 801841e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018422:	601a      	str	r2, [r3, #0]
 8018424:	2300      	movs	r3, #0
 8018426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	f383 8811 	msr	BASEPRI, r3
}
 801842e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018430:	bf00      	nop
 8018432:	3708      	adds	r7, #8
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}
 8018438:	e000ed04 	.word	0xe000ed04

0801843c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801843c:	b480      	push	{r7}
 801843e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018440:	4b0b      	ldr	r3, [pc, #44]	; (8018470 <vPortSetupTimerInterrupt+0x34>)
 8018442:	2200      	movs	r2, #0
 8018444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018446:	4b0b      	ldr	r3, [pc, #44]	; (8018474 <vPortSetupTimerInterrupt+0x38>)
 8018448:	2200      	movs	r2, #0
 801844a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801844c:	4b0a      	ldr	r3, [pc, #40]	; (8018478 <vPortSetupTimerInterrupt+0x3c>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	4a0a      	ldr	r2, [pc, #40]	; (801847c <vPortSetupTimerInterrupt+0x40>)
 8018452:	fba2 2303 	umull	r2, r3, r2, r3
 8018456:	099b      	lsrs	r3, r3, #6
 8018458:	4a09      	ldr	r2, [pc, #36]	; (8018480 <vPortSetupTimerInterrupt+0x44>)
 801845a:	3b01      	subs	r3, #1
 801845c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801845e:	4b04      	ldr	r3, [pc, #16]	; (8018470 <vPortSetupTimerInterrupt+0x34>)
 8018460:	2207      	movs	r2, #7
 8018462:	601a      	str	r2, [r3, #0]
}
 8018464:	bf00      	nop
 8018466:	46bd      	mov	sp, r7
 8018468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846c:	4770      	bx	lr
 801846e:	bf00      	nop
 8018470:	e000e010 	.word	0xe000e010
 8018474:	e000e018 	.word	0xe000e018
 8018478:	240003a4 	.word	0x240003a4
 801847c:	10624dd3 	.word	0x10624dd3
 8018480:	e000e014 	.word	0xe000e014

08018484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018494 <vPortEnableVFP+0x10>
 8018488:	6801      	ldr	r1, [r0, #0]
 801848a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801848e:	6001      	str	r1, [r0, #0]
 8018490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018492:	bf00      	nop
 8018494:	e000ed88 	.word	0xe000ed88

08018498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018498:	b480      	push	{r7}
 801849a:	b085      	sub	sp, #20
 801849c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801849e:	f3ef 8305 	mrs	r3, IPSR
 80184a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	2b0f      	cmp	r3, #15
 80184a8:	d914      	bls.n	80184d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80184aa:	4a17      	ldr	r2, [pc, #92]	; (8018508 <vPortValidateInterruptPriority+0x70>)
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	4413      	add	r3, r2
 80184b0:	781b      	ldrb	r3, [r3, #0]
 80184b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80184b4:	4b15      	ldr	r3, [pc, #84]	; (801850c <vPortValidateInterruptPriority+0x74>)
 80184b6:	781b      	ldrb	r3, [r3, #0]
 80184b8:	7afa      	ldrb	r2, [r7, #11]
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d20a      	bcs.n	80184d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80184be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184c2:	f383 8811 	msr	BASEPRI, r3
 80184c6:	f3bf 8f6f 	isb	sy
 80184ca:	f3bf 8f4f 	dsb	sy
 80184ce:	607b      	str	r3, [r7, #4]
}
 80184d0:	bf00      	nop
 80184d2:	e7fe      	b.n	80184d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80184d4:	4b0e      	ldr	r3, [pc, #56]	; (8018510 <vPortValidateInterruptPriority+0x78>)
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80184dc:	4b0d      	ldr	r3, [pc, #52]	; (8018514 <vPortValidateInterruptPriority+0x7c>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d90a      	bls.n	80184fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80184e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184e8:	f383 8811 	msr	BASEPRI, r3
 80184ec:	f3bf 8f6f 	isb	sy
 80184f0:	f3bf 8f4f 	dsb	sy
 80184f4:	603b      	str	r3, [r7, #0]
}
 80184f6:	bf00      	nop
 80184f8:	e7fe      	b.n	80184f8 <vPortValidateInterruptPriority+0x60>
	}
 80184fa:	bf00      	nop
 80184fc:	3714      	adds	r7, #20
 80184fe:	46bd      	mov	sp, r7
 8018500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018504:	4770      	bx	lr
 8018506:	bf00      	nop
 8018508:	e000e3f0 	.word	0xe000e3f0
 801850c:	240062a4 	.word	0x240062a4
 8018510:	e000ed0c 	.word	0xe000ed0c
 8018514:	240062a8 	.word	0x240062a8

08018518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b08a      	sub	sp, #40	; 0x28
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018520:	2300      	movs	r3, #0
 8018522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018524:	f7fe fc72 	bl	8016e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018528:	4b5b      	ldr	r3, [pc, #364]	; (8018698 <pvPortMalloc+0x180>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d101      	bne.n	8018534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018530:	f000 f920 	bl	8018774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018534:	4b59      	ldr	r3, [pc, #356]	; (801869c <pvPortMalloc+0x184>)
 8018536:	681a      	ldr	r2, [r3, #0]
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	4013      	ands	r3, r2
 801853c:	2b00      	cmp	r3, #0
 801853e:	f040 8093 	bne.w	8018668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d01d      	beq.n	8018584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018548:	2208      	movs	r2, #8
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	4413      	add	r3, r2
 801854e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f003 0307 	and.w	r3, r3, #7
 8018556:	2b00      	cmp	r3, #0
 8018558:	d014      	beq.n	8018584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	f023 0307 	bic.w	r3, r3, #7
 8018560:	3308      	adds	r3, #8
 8018562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f003 0307 	and.w	r3, r3, #7
 801856a:	2b00      	cmp	r3, #0
 801856c:	d00a      	beq.n	8018584 <pvPortMalloc+0x6c>
	__asm volatile
 801856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018572:	f383 8811 	msr	BASEPRI, r3
 8018576:	f3bf 8f6f 	isb	sy
 801857a:	f3bf 8f4f 	dsb	sy
 801857e:	617b      	str	r3, [r7, #20]
}
 8018580:	bf00      	nop
 8018582:	e7fe      	b.n	8018582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d06e      	beq.n	8018668 <pvPortMalloc+0x150>
 801858a:	4b45      	ldr	r3, [pc, #276]	; (80186a0 <pvPortMalloc+0x188>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	687a      	ldr	r2, [r7, #4]
 8018590:	429a      	cmp	r2, r3
 8018592:	d869      	bhi.n	8018668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018594:	4b43      	ldr	r3, [pc, #268]	; (80186a4 <pvPortMalloc+0x18c>)
 8018596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018598:	4b42      	ldr	r3, [pc, #264]	; (80186a4 <pvPortMalloc+0x18c>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801859e:	e004      	b.n	80185aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80185a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80185a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80185aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ac:	685b      	ldr	r3, [r3, #4]
 80185ae:	687a      	ldr	r2, [r7, #4]
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d903      	bls.n	80185bc <pvPortMalloc+0xa4>
 80185b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d1f1      	bne.n	80185a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80185bc:	4b36      	ldr	r3, [pc, #216]	; (8018698 <pvPortMalloc+0x180>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d050      	beq.n	8018668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80185c6:	6a3b      	ldr	r3, [r7, #32]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	2208      	movs	r2, #8
 80185cc:	4413      	add	r3, r2
 80185ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80185d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185d2:	681a      	ldr	r2, [r3, #0]
 80185d4:	6a3b      	ldr	r3, [r7, #32]
 80185d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80185d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185da:	685a      	ldr	r2, [r3, #4]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	1ad2      	subs	r2, r2, r3
 80185e0:	2308      	movs	r3, #8
 80185e2:	005b      	lsls	r3, r3, #1
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d91f      	bls.n	8018628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80185e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	4413      	add	r3, r2
 80185ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80185f0:	69bb      	ldr	r3, [r7, #24]
 80185f2:	f003 0307 	and.w	r3, r3, #7
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d00a      	beq.n	8018610 <pvPortMalloc+0xf8>
	__asm volatile
 80185fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185fe:	f383 8811 	msr	BASEPRI, r3
 8018602:	f3bf 8f6f 	isb	sy
 8018606:	f3bf 8f4f 	dsb	sy
 801860a:	613b      	str	r3, [r7, #16]
}
 801860c:	bf00      	nop
 801860e:	e7fe      	b.n	801860e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018612:	685a      	ldr	r2, [r3, #4]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	1ad2      	subs	r2, r2, r3
 8018618:	69bb      	ldr	r3, [r7, #24]
 801861a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801861e:	687a      	ldr	r2, [r7, #4]
 8018620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018622:	69b8      	ldr	r0, [r7, #24]
 8018624:	f000 f908 	bl	8018838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018628:	4b1d      	ldr	r3, [pc, #116]	; (80186a0 <pvPortMalloc+0x188>)
 801862a:	681a      	ldr	r2, [r3, #0]
 801862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862e:	685b      	ldr	r3, [r3, #4]
 8018630:	1ad3      	subs	r3, r2, r3
 8018632:	4a1b      	ldr	r2, [pc, #108]	; (80186a0 <pvPortMalloc+0x188>)
 8018634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018636:	4b1a      	ldr	r3, [pc, #104]	; (80186a0 <pvPortMalloc+0x188>)
 8018638:	681a      	ldr	r2, [r3, #0]
 801863a:	4b1b      	ldr	r3, [pc, #108]	; (80186a8 <pvPortMalloc+0x190>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	429a      	cmp	r2, r3
 8018640:	d203      	bcs.n	801864a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018642:	4b17      	ldr	r3, [pc, #92]	; (80186a0 <pvPortMalloc+0x188>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	4a18      	ldr	r2, [pc, #96]	; (80186a8 <pvPortMalloc+0x190>)
 8018648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801864c:	685a      	ldr	r2, [r3, #4]
 801864e:	4b13      	ldr	r3, [pc, #76]	; (801869c <pvPortMalloc+0x184>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	431a      	orrs	r2, r3
 8018654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801865a:	2200      	movs	r2, #0
 801865c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801865e:	4b13      	ldr	r3, [pc, #76]	; (80186ac <pvPortMalloc+0x194>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	3301      	adds	r3, #1
 8018664:	4a11      	ldr	r2, [pc, #68]	; (80186ac <pvPortMalloc+0x194>)
 8018666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018668:	f7fe fbde 	bl	8016e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801866c:	69fb      	ldr	r3, [r7, #28]
 801866e:	f003 0307 	and.w	r3, r3, #7
 8018672:	2b00      	cmp	r3, #0
 8018674:	d00a      	beq.n	801868c <pvPortMalloc+0x174>
	__asm volatile
 8018676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801867a:	f383 8811 	msr	BASEPRI, r3
 801867e:	f3bf 8f6f 	isb	sy
 8018682:	f3bf 8f4f 	dsb	sy
 8018686:	60fb      	str	r3, [r7, #12]
}
 8018688:	bf00      	nop
 801868a:	e7fe      	b.n	801868a <pvPortMalloc+0x172>
	return pvReturn;
 801868c:	69fb      	ldr	r3, [r7, #28]
}
 801868e:	4618      	mov	r0, r3
 8018690:	3728      	adds	r7, #40	; 0x28
 8018692:	46bd      	mov	sp, r7
 8018694:	bd80      	pop	{r7, pc}
 8018696:	bf00      	nop
 8018698:	24009eb4 	.word	0x24009eb4
 801869c:	24009ec8 	.word	0x24009ec8
 80186a0:	24009eb8 	.word	0x24009eb8
 80186a4:	24009eac 	.word	0x24009eac
 80186a8:	24009ebc 	.word	0x24009ebc
 80186ac:	24009ec0 	.word	0x24009ec0

080186b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b086      	sub	sp, #24
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d04d      	beq.n	801875e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80186c2:	2308      	movs	r3, #8
 80186c4:	425b      	negs	r3, r3
 80186c6:	697a      	ldr	r2, [r7, #20]
 80186c8:	4413      	add	r3, r2
 80186ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80186cc:	697b      	ldr	r3, [r7, #20]
 80186ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	685a      	ldr	r2, [r3, #4]
 80186d4:	4b24      	ldr	r3, [pc, #144]	; (8018768 <vPortFree+0xb8>)
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	4013      	ands	r3, r2
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d10a      	bne.n	80186f4 <vPortFree+0x44>
	__asm volatile
 80186de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e2:	f383 8811 	msr	BASEPRI, r3
 80186e6:	f3bf 8f6f 	isb	sy
 80186ea:	f3bf 8f4f 	dsb	sy
 80186ee:	60fb      	str	r3, [r7, #12]
}
 80186f0:	bf00      	nop
 80186f2:	e7fe      	b.n	80186f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80186f4:	693b      	ldr	r3, [r7, #16]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d00a      	beq.n	8018712 <vPortFree+0x62>
	__asm volatile
 80186fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018700:	f383 8811 	msr	BASEPRI, r3
 8018704:	f3bf 8f6f 	isb	sy
 8018708:	f3bf 8f4f 	dsb	sy
 801870c:	60bb      	str	r3, [r7, #8]
}
 801870e:	bf00      	nop
 8018710:	e7fe      	b.n	8018710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018712:	693b      	ldr	r3, [r7, #16]
 8018714:	685a      	ldr	r2, [r3, #4]
 8018716:	4b14      	ldr	r3, [pc, #80]	; (8018768 <vPortFree+0xb8>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	4013      	ands	r3, r2
 801871c:	2b00      	cmp	r3, #0
 801871e:	d01e      	beq.n	801875e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018720:	693b      	ldr	r3, [r7, #16]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d11a      	bne.n	801875e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	685a      	ldr	r2, [r3, #4]
 801872c:	4b0e      	ldr	r3, [pc, #56]	; (8018768 <vPortFree+0xb8>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	43db      	mvns	r3, r3
 8018732:	401a      	ands	r2, r3
 8018734:	693b      	ldr	r3, [r7, #16]
 8018736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018738:	f7fe fb68 	bl	8016e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801873c:	693b      	ldr	r3, [r7, #16]
 801873e:	685a      	ldr	r2, [r3, #4]
 8018740:	4b0a      	ldr	r3, [pc, #40]	; (801876c <vPortFree+0xbc>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	4413      	add	r3, r2
 8018746:	4a09      	ldr	r2, [pc, #36]	; (801876c <vPortFree+0xbc>)
 8018748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801874a:	6938      	ldr	r0, [r7, #16]
 801874c:	f000 f874 	bl	8018838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018750:	4b07      	ldr	r3, [pc, #28]	; (8018770 <vPortFree+0xc0>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	3301      	adds	r3, #1
 8018756:	4a06      	ldr	r2, [pc, #24]	; (8018770 <vPortFree+0xc0>)
 8018758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801875a:	f7fe fb65 	bl	8016e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801875e:	bf00      	nop
 8018760:	3718      	adds	r7, #24
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	24009ec8 	.word	0x24009ec8
 801876c:	24009eb8 	.word	0x24009eb8
 8018770:	24009ec4 	.word	0x24009ec4

08018774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018774:	b480      	push	{r7}
 8018776:	b085      	sub	sp, #20
 8018778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801877a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801877e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018780:	4b27      	ldr	r3, [pc, #156]	; (8018820 <prvHeapInit+0xac>)
 8018782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	f003 0307 	and.w	r3, r3, #7
 801878a:	2b00      	cmp	r3, #0
 801878c:	d00c      	beq.n	80187a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	3307      	adds	r3, #7
 8018792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	f023 0307 	bic.w	r3, r3, #7
 801879a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801879c:	68ba      	ldr	r2, [r7, #8]
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	1ad3      	subs	r3, r2, r3
 80187a2:	4a1f      	ldr	r2, [pc, #124]	; (8018820 <prvHeapInit+0xac>)
 80187a4:	4413      	add	r3, r2
 80187a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80187ac:	4a1d      	ldr	r2, [pc, #116]	; (8018824 <prvHeapInit+0xb0>)
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80187b2:	4b1c      	ldr	r3, [pc, #112]	; (8018824 <prvHeapInit+0xb0>)
 80187b4:	2200      	movs	r2, #0
 80187b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	68ba      	ldr	r2, [r7, #8]
 80187bc:	4413      	add	r3, r2
 80187be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80187c0:	2208      	movs	r2, #8
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	1a9b      	subs	r3, r3, r2
 80187c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	f023 0307 	bic.w	r3, r3, #7
 80187ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	4a15      	ldr	r2, [pc, #84]	; (8018828 <prvHeapInit+0xb4>)
 80187d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80187d6:	4b14      	ldr	r3, [pc, #80]	; (8018828 <prvHeapInit+0xb4>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	2200      	movs	r2, #0
 80187dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80187de:	4b12      	ldr	r3, [pc, #72]	; (8018828 <prvHeapInit+0xb4>)
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	2200      	movs	r2, #0
 80187e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80187ea:	683b      	ldr	r3, [r7, #0]
 80187ec:	68fa      	ldr	r2, [r7, #12]
 80187ee:	1ad2      	subs	r2, r2, r3
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80187f4:	4b0c      	ldr	r3, [pc, #48]	; (8018828 <prvHeapInit+0xb4>)
 80187f6:	681a      	ldr	r2, [r3, #0]
 80187f8:	683b      	ldr	r3, [r7, #0]
 80187fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	685b      	ldr	r3, [r3, #4]
 8018800:	4a0a      	ldr	r2, [pc, #40]	; (801882c <prvHeapInit+0xb8>)
 8018802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	4a09      	ldr	r2, [pc, #36]	; (8018830 <prvHeapInit+0xbc>)
 801880a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801880c:	4b09      	ldr	r3, [pc, #36]	; (8018834 <prvHeapInit+0xc0>)
 801880e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018812:	601a      	str	r2, [r3, #0]
}
 8018814:	bf00      	nop
 8018816:	3714      	adds	r7, #20
 8018818:	46bd      	mov	sp, r7
 801881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881e:	4770      	bx	lr
 8018820:	240062ac 	.word	0x240062ac
 8018824:	24009eac 	.word	0x24009eac
 8018828:	24009eb4 	.word	0x24009eb4
 801882c:	24009ebc 	.word	0x24009ebc
 8018830:	24009eb8 	.word	0x24009eb8
 8018834:	24009ec8 	.word	0x24009ec8

08018838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018838:	b480      	push	{r7}
 801883a:	b085      	sub	sp, #20
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018840:	4b28      	ldr	r3, [pc, #160]	; (80188e4 <prvInsertBlockIntoFreeList+0xac>)
 8018842:	60fb      	str	r3, [r7, #12]
 8018844:	e002      	b.n	801884c <prvInsertBlockIntoFreeList+0x14>
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	60fb      	str	r3, [r7, #12]
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	687a      	ldr	r2, [r7, #4]
 8018852:	429a      	cmp	r2, r3
 8018854:	d8f7      	bhi.n	8018846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	685b      	ldr	r3, [r3, #4]
 801885e:	68ba      	ldr	r2, [r7, #8]
 8018860:	4413      	add	r3, r2
 8018862:	687a      	ldr	r2, [r7, #4]
 8018864:	429a      	cmp	r2, r3
 8018866:	d108      	bne.n	801887a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	685a      	ldr	r2, [r3, #4]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	441a      	add	r2, r3
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	68ba      	ldr	r2, [r7, #8]
 8018884:	441a      	add	r2, r3
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	429a      	cmp	r2, r3
 801888c:	d118      	bne.n	80188c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	681a      	ldr	r2, [r3, #0]
 8018892:	4b15      	ldr	r3, [pc, #84]	; (80188e8 <prvInsertBlockIntoFreeList+0xb0>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	429a      	cmp	r2, r3
 8018898:	d00d      	beq.n	80188b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	685a      	ldr	r2, [r3, #4]
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	685b      	ldr	r3, [r3, #4]
 80188a4:	441a      	add	r2, r3
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	681a      	ldr	r2, [r3, #0]
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	601a      	str	r2, [r3, #0]
 80188b4:	e008      	b.n	80188c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80188b6:	4b0c      	ldr	r3, [pc, #48]	; (80188e8 <prvInsertBlockIntoFreeList+0xb0>)
 80188b8:	681a      	ldr	r2, [r3, #0]
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	601a      	str	r2, [r3, #0]
 80188be:	e003      	b.n	80188c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	681a      	ldr	r2, [r3, #0]
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80188c8:	68fa      	ldr	r2, [r7, #12]
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d002      	beq.n	80188d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	687a      	ldr	r2, [r7, #4]
 80188d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188d6:	bf00      	nop
 80188d8:	3714      	adds	r7, #20
 80188da:	46bd      	mov	sp, r7
 80188dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e0:	4770      	bx	lr
 80188e2:	bf00      	nop
 80188e4:	24009eac 	.word	0x24009eac
 80188e8:	24009eb4 	.word	0x24009eb4

080188ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b084      	sub	sp, #16
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80188f6:	f007 fb99 	bl	802002c <sys_timeouts_sleeptime>
 80188fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018902:	d10b      	bne.n	801891c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8018904:	4813      	ldr	r0, [pc, #76]	; (8018954 <tcpip_timeouts_mbox_fetch+0x68>)
 8018906:	f00c face 	bl	8024ea6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801890a:	2200      	movs	r2, #0
 801890c:	6839      	ldr	r1, [r7, #0]
 801890e:	6878      	ldr	r0, [r7, #4]
 8018910:	f00c fa56 	bl	8024dc0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018914:	480f      	ldr	r0, [pc, #60]	; (8018954 <tcpip_timeouts_mbox_fetch+0x68>)
 8018916:	f00c fab7 	bl	8024e88 <sys_mutex_lock>
    return;
 801891a:	e018      	b.n	801894e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d102      	bne.n	8018928 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8018922:	f007 fb49 	bl	801ffb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018926:	e7e6      	b.n	80188f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8018928:	480a      	ldr	r0, [pc, #40]	; (8018954 <tcpip_timeouts_mbox_fetch+0x68>)
 801892a:	f00c fabc 	bl	8024ea6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801892e:	68fa      	ldr	r2, [r7, #12]
 8018930:	6839      	ldr	r1, [r7, #0]
 8018932:	6878      	ldr	r0, [r7, #4]
 8018934:	f00c fa44 	bl	8024dc0 <sys_arch_mbox_fetch>
 8018938:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801893a:	4806      	ldr	r0, [pc, #24]	; (8018954 <tcpip_timeouts_mbox_fetch+0x68>)
 801893c:	f00c faa4 	bl	8024e88 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018946:	d102      	bne.n	801894e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8018948:	f007 fb36 	bl	801ffb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801894c:	e7d3      	b.n	80188f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801894e:	3710      	adds	r7, #16
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	24009ed8 	.word	0x24009ed8

08018958 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8018960:	4810      	ldr	r0, [pc, #64]	; (80189a4 <tcpip_thread+0x4c>)
 8018962:	f00c fa91 	bl	8024e88 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8018966:	4b10      	ldr	r3, [pc, #64]	; (80189a8 <tcpip_thread+0x50>)
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d005      	beq.n	801897a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801896e:	4b0e      	ldr	r3, [pc, #56]	; (80189a8 <tcpip_thread+0x50>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	4a0e      	ldr	r2, [pc, #56]	; (80189ac <tcpip_thread+0x54>)
 8018974:	6812      	ldr	r2, [r2, #0]
 8018976:	4610      	mov	r0, r2
 8018978:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801897a:	f107 030c 	add.w	r3, r7, #12
 801897e:	4619      	mov	r1, r3
 8018980:	480b      	ldr	r0, [pc, #44]	; (80189b0 <tcpip_thread+0x58>)
 8018982:	f7ff ffb3 	bl	80188ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d106      	bne.n	801899a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801898c:	4b09      	ldr	r3, [pc, #36]	; (80189b4 <tcpip_thread+0x5c>)
 801898e:	2291      	movs	r2, #145	; 0x91
 8018990:	4909      	ldr	r1, [pc, #36]	; (80189b8 <tcpip_thread+0x60>)
 8018992:	480a      	ldr	r0, [pc, #40]	; (80189bc <tcpip_thread+0x64>)
 8018994:	f00d fae6 	bl	8025f64 <iprintf>
      continue;
 8018998:	e003      	b.n	80189a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	4618      	mov	r0, r3
 801899e:	f000 f80f 	bl	80189c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80189a2:	e7ea      	b.n	801897a <tcpip_thread+0x22>
 80189a4:	24009ed8 	.word	0x24009ed8
 80189a8:	24009ecc 	.word	0x24009ecc
 80189ac:	24009ed0 	.word	0x24009ed0
 80189b0:	24009ed4 	.word	0x24009ed4
 80189b4:	08026f44 	.word	0x08026f44
 80189b8:	08026f74 	.word	0x08026f74
 80189bc:	08026f94 	.word	0x08026f94

080189c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80189c0:	b580      	push	{r7, lr}
 80189c2:	b082      	sub	sp, #8
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	781b      	ldrb	r3, [r3, #0]
 80189cc:	2b02      	cmp	r3, #2
 80189ce:	d026      	beq.n	8018a1e <tcpip_thread_handle_msg+0x5e>
 80189d0:	2b02      	cmp	r3, #2
 80189d2:	dc2b      	bgt.n	8018a2c <tcpip_thread_handle_msg+0x6c>
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d002      	beq.n	80189de <tcpip_thread_handle_msg+0x1e>
 80189d8:	2b01      	cmp	r3, #1
 80189da:	d015      	beq.n	8018a08 <tcpip_thread_handle_msg+0x48>
 80189dc:	e026      	b.n	8018a2c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	68db      	ldr	r3, [r3, #12]
 80189e2:	687a      	ldr	r2, [r7, #4]
 80189e4:	6850      	ldr	r0, [r2, #4]
 80189e6:	687a      	ldr	r2, [r7, #4]
 80189e8:	6892      	ldr	r2, [r2, #8]
 80189ea:	4611      	mov	r1, r2
 80189ec:	4798      	blx	r3
 80189ee:	4603      	mov	r3, r0
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d004      	beq.n	80189fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	685b      	ldr	r3, [r3, #4]
 80189f8:	4618      	mov	r0, r3
 80189fa:	f001 fdcf 	bl	801a59c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80189fe:	6879      	ldr	r1, [r7, #4]
 8018a00:	2009      	movs	r0, #9
 8018a02:	f000 ff1b 	bl	801983c <memp_free>
      break;
 8018a06:	e018      	b.n	8018a3a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	687a      	ldr	r2, [r7, #4]
 8018a0e:	6892      	ldr	r2, [r2, #8]
 8018a10:	4610      	mov	r0, r2
 8018a12:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018a14:	6879      	ldr	r1, [r7, #4]
 8018a16:	2008      	movs	r0, #8
 8018a18:	f000 ff10 	bl	801983c <memp_free>
      break;
 8018a1c:	e00d      	b.n	8018a3a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	685b      	ldr	r3, [r3, #4]
 8018a22:	687a      	ldr	r2, [r7, #4]
 8018a24:	6892      	ldr	r2, [r2, #8]
 8018a26:	4610      	mov	r0, r2
 8018a28:	4798      	blx	r3
      break;
 8018a2a:	e006      	b.n	8018a3a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018a2c:	4b05      	ldr	r3, [pc, #20]	; (8018a44 <tcpip_thread_handle_msg+0x84>)
 8018a2e:	22cf      	movs	r2, #207	; 0xcf
 8018a30:	4905      	ldr	r1, [pc, #20]	; (8018a48 <tcpip_thread_handle_msg+0x88>)
 8018a32:	4806      	ldr	r0, [pc, #24]	; (8018a4c <tcpip_thread_handle_msg+0x8c>)
 8018a34:	f00d fa96 	bl	8025f64 <iprintf>
      break;
 8018a38:	bf00      	nop
  }
}
 8018a3a:	bf00      	nop
 8018a3c:	3708      	adds	r7, #8
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
 8018a42:	bf00      	nop
 8018a44:	08026f44 	.word	0x08026f44
 8018a48:	08026f74 	.word	0x08026f74
 8018a4c:	08026f94 	.word	0x08026f94

08018a50 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b086      	sub	sp, #24
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	60b9      	str	r1, [r7, #8]
 8018a5a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018a5c:	481a      	ldr	r0, [pc, #104]	; (8018ac8 <tcpip_inpkt+0x78>)
 8018a5e:	f00c f9e0 	bl	8024e22 <sys_mbox_valid>
 8018a62:	4603      	mov	r3, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d105      	bne.n	8018a74 <tcpip_inpkt+0x24>
 8018a68:	4b18      	ldr	r3, [pc, #96]	; (8018acc <tcpip_inpkt+0x7c>)
 8018a6a:	22fc      	movs	r2, #252	; 0xfc
 8018a6c:	4918      	ldr	r1, [pc, #96]	; (8018ad0 <tcpip_inpkt+0x80>)
 8018a6e:	4819      	ldr	r0, [pc, #100]	; (8018ad4 <tcpip_inpkt+0x84>)
 8018a70:	f00d fa78 	bl	8025f64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8018a74:	2009      	movs	r0, #9
 8018a76:	f000 fe6b 	bl	8019750 <memp_malloc>
 8018a7a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d102      	bne.n	8018a88 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8018a82:	f04f 33ff 	mov.w	r3, #4294967295
 8018a86:	e01a      	b.n	8018abe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	68fa      	ldr	r2, [r7, #12]
 8018a92:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	68ba      	ldr	r2, [r7, #8]
 8018a98:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8018a9a:	697b      	ldr	r3, [r7, #20]
 8018a9c:	687a      	ldr	r2, [r7, #4]
 8018a9e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018aa0:	6979      	ldr	r1, [r7, #20]
 8018aa2:	4809      	ldr	r0, [pc, #36]	; (8018ac8 <tcpip_inpkt+0x78>)
 8018aa4:	f00c f972 	bl	8024d8c <sys_mbox_trypost>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d006      	beq.n	8018abc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018aae:	6979      	ldr	r1, [r7, #20]
 8018ab0:	2009      	movs	r0, #9
 8018ab2:	f000 fec3 	bl	801983c <memp_free>
    return ERR_MEM;
 8018ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8018aba:	e000      	b.n	8018abe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8018abc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8018abe:	4618      	mov	r0, r3
 8018ac0:	3718      	adds	r7, #24
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	bd80      	pop	{r7, pc}
 8018ac6:	bf00      	nop
 8018ac8:	24009ed4 	.word	0x24009ed4
 8018acc:	08026f44 	.word	0x08026f44
 8018ad0:	08026fbc 	.word	0x08026fbc
 8018ad4:	08026f94 	.word	0x08026f94

08018ad8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b082      	sub	sp, #8
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
 8018ae0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018ae8:	f003 0318 	and.w	r3, r3, #24
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d006      	beq.n	8018afe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8018af0:	4a08      	ldr	r2, [pc, #32]	; (8018b14 <tcpip_input+0x3c>)
 8018af2:	6839      	ldr	r1, [r7, #0]
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f7ff ffab 	bl	8018a50 <tcpip_inpkt>
 8018afa:	4603      	mov	r3, r0
 8018afc:	e005      	b.n	8018b0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8018afe:	4a06      	ldr	r2, [pc, #24]	; (8018b18 <tcpip_input+0x40>)
 8018b00:	6839      	ldr	r1, [r7, #0]
 8018b02:	6878      	ldr	r0, [r7, #4]
 8018b04:	f7ff ffa4 	bl	8018a50 <tcpip_inpkt>
 8018b08:	4603      	mov	r3, r0
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3708      	adds	r7, #8
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
 8018b12:	bf00      	nop
 8018b14:	08024bad 	.word	0x08024bad
 8018b18:	08023a79 	.word	0x08023a79

08018b1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b084      	sub	sp, #16
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
 8018b24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018b26:	4819      	ldr	r0, [pc, #100]	; (8018b8c <tcpip_try_callback+0x70>)
 8018b28:	f00c f97b 	bl	8024e22 <sys_mbox_valid>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d106      	bne.n	8018b40 <tcpip_try_callback+0x24>
 8018b32:	4b17      	ldr	r3, [pc, #92]	; (8018b90 <tcpip_try_callback+0x74>)
 8018b34:	f240 125d 	movw	r2, #349	; 0x15d
 8018b38:	4916      	ldr	r1, [pc, #88]	; (8018b94 <tcpip_try_callback+0x78>)
 8018b3a:	4817      	ldr	r0, [pc, #92]	; (8018b98 <tcpip_try_callback+0x7c>)
 8018b3c:	f00d fa12 	bl	8025f64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8018b40:	2008      	movs	r0, #8
 8018b42:	f000 fe05 	bl	8019750 <memp_malloc>
 8018b46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d102      	bne.n	8018b54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8018b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b52:	e017      	b.n	8018b84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	2201      	movs	r2, #1
 8018b58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	687a      	ldr	r2, [r7, #4]
 8018b5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	683a      	ldr	r2, [r7, #0]
 8018b64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018b66:	68f9      	ldr	r1, [r7, #12]
 8018b68:	4808      	ldr	r0, [pc, #32]	; (8018b8c <tcpip_try_callback+0x70>)
 8018b6a:	f00c f90f 	bl	8024d8c <sys_mbox_trypost>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d006      	beq.n	8018b82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8018b74:	68f9      	ldr	r1, [r7, #12]
 8018b76:	2008      	movs	r0, #8
 8018b78:	f000 fe60 	bl	801983c <memp_free>
    return ERR_MEM;
 8018b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b80:	e000      	b.n	8018b84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8018b82:	2300      	movs	r3, #0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3710      	adds	r7, #16
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	24009ed4 	.word	0x24009ed4
 8018b90:	08026f44 	.word	0x08026f44
 8018b94:	08026fbc 	.word	0x08026fbc
 8018b98:	08026f94 	.word	0x08026f94

08018b9c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b084      	sub	sp, #16
 8018ba0:	af02      	add	r7, sp, #8
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8018ba6:	f000 f92d 	bl	8018e04 <lwip_init>

  tcpip_init_done = initfunc;
 8018baa:	4a17      	ldr	r2, [pc, #92]	; (8018c08 <tcpip_init+0x6c>)
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8018bb0:	4a16      	ldr	r2, [pc, #88]	; (8018c0c <tcpip_init+0x70>)
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018bb6:	2106      	movs	r1, #6
 8018bb8:	4815      	ldr	r0, [pc, #84]	; (8018c10 <tcpip_init+0x74>)
 8018bba:	f00c f8cd 	bl	8024d58 <sys_mbox_new>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d006      	beq.n	8018bd2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8018bc4:	4b13      	ldr	r3, [pc, #76]	; (8018c14 <tcpip_init+0x78>)
 8018bc6:	f240 2261 	movw	r2, #609	; 0x261
 8018bca:	4913      	ldr	r1, [pc, #76]	; (8018c18 <tcpip_init+0x7c>)
 8018bcc:	4813      	ldr	r0, [pc, #76]	; (8018c1c <tcpip_init+0x80>)
 8018bce:	f00d f9c9 	bl	8025f64 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8018bd2:	4813      	ldr	r0, [pc, #76]	; (8018c20 <tcpip_init+0x84>)
 8018bd4:	f00c f942 	bl	8024e5c <sys_mutex_new>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d006      	beq.n	8018bec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8018bde:	4b0d      	ldr	r3, [pc, #52]	; (8018c14 <tcpip_init+0x78>)
 8018be0:	f240 2265 	movw	r2, #613	; 0x265
 8018be4:	490f      	ldr	r1, [pc, #60]	; (8018c24 <tcpip_init+0x88>)
 8018be6:	480d      	ldr	r0, [pc, #52]	; (8018c1c <tcpip_init+0x80>)
 8018be8:	f00d f9bc 	bl	8025f64 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8018bec:	2318      	movs	r3, #24
 8018bee:	9300      	str	r3, [sp, #0]
 8018bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	490c      	ldr	r1, [pc, #48]	; (8018c28 <tcpip_init+0x8c>)
 8018bf8:	480c      	ldr	r0, [pc, #48]	; (8018c2c <tcpip_init+0x90>)
 8018bfa:	f00c f961 	bl	8024ec0 <sys_thread_new>
}
 8018bfe:	bf00      	nop
 8018c00:	3708      	adds	r7, #8
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	24009ecc 	.word	0x24009ecc
 8018c0c:	24009ed0 	.word	0x24009ed0
 8018c10:	24009ed4 	.word	0x24009ed4
 8018c14:	08026f44 	.word	0x08026f44
 8018c18:	08026fcc 	.word	0x08026fcc
 8018c1c:	08026f94 	.word	0x08026f94
 8018c20:	24009ed8 	.word	0x24009ed8
 8018c24:	08026ff0 	.word	0x08026ff0
 8018c28:	08018959 	.word	0x08018959
 8018c2c:	08027014 	.word	0x08027014

08018c30 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8018c30:	b480      	push	{r7}
 8018c32:	b083      	sub	sp, #12
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	4603      	mov	r3, r0
 8018c38:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8018c3a:	88fb      	ldrh	r3, [r7, #6]
 8018c3c:	021b      	lsls	r3, r3, #8
 8018c3e:	b21a      	sxth	r2, r3
 8018c40:	88fb      	ldrh	r3, [r7, #6]
 8018c42:	0a1b      	lsrs	r3, r3, #8
 8018c44:	b29b      	uxth	r3, r3
 8018c46:	b21b      	sxth	r3, r3
 8018c48:	4313      	orrs	r3, r2
 8018c4a:	b21b      	sxth	r3, r3
 8018c4c:	b29b      	uxth	r3, r3
}
 8018c4e:	4618      	mov	r0, r3
 8018c50:	370c      	adds	r7, #12
 8018c52:	46bd      	mov	sp, r7
 8018c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c58:	4770      	bx	lr

08018c5a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8018c5a:	b480      	push	{r7}
 8018c5c:	b083      	sub	sp, #12
 8018c5e:	af00      	add	r7, sp, #0
 8018c60:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	061a      	lsls	r2, r3, #24
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	021b      	lsls	r3, r3, #8
 8018c6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8018c6e:	431a      	orrs	r2, r3
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	0a1b      	lsrs	r3, r3, #8
 8018c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018c78:	431a      	orrs	r2, r3
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	0e1b      	lsrs	r3, r3, #24
 8018c7e:	4313      	orrs	r3, r2
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	370c      	adds	r7, #12
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr

08018c8c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8018c8c:	b480      	push	{r7}
 8018c8e:	b089      	sub	sp, #36	; 0x24
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
 8018c94:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8018ca2:	69fb      	ldr	r3, [r7, #28]
 8018ca4:	f003 0301 	and.w	r3, r3, #1
 8018ca8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8018caa:	693b      	ldr	r3, [r7, #16]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d00d      	beq.n	8018ccc <lwip_standard_chksum+0x40>
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	dd0a      	ble.n	8018ccc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8018cb6:	69fa      	ldr	r2, [r7, #28]
 8018cb8:	1c53      	adds	r3, r2, #1
 8018cba:	61fb      	str	r3, [r7, #28]
 8018cbc:	f107 030e 	add.w	r3, r7, #14
 8018cc0:	3301      	adds	r3, #1
 8018cc2:	7812      	ldrb	r2, [r2, #0]
 8018cc4:	701a      	strb	r2, [r3, #0]
    len--;
 8018cc6:	683b      	ldr	r3, [r7, #0]
 8018cc8:	3b01      	subs	r3, #1
 8018cca:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8018ccc:	69fb      	ldr	r3, [r7, #28]
 8018cce:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8018cd0:	e00a      	b.n	8018ce8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8018cd2:	69bb      	ldr	r3, [r7, #24]
 8018cd4:	1c9a      	adds	r2, r3, #2
 8018cd6:	61ba      	str	r2, [r7, #24]
 8018cd8:	881b      	ldrh	r3, [r3, #0]
 8018cda:	461a      	mov	r2, r3
 8018cdc:	697b      	ldr	r3, [r7, #20]
 8018cde:	4413      	add	r3, r2
 8018ce0:	617b      	str	r3, [r7, #20]
    len -= 2;
 8018ce2:	683b      	ldr	r3, [r7, #0]
 8018ce4:	3b02      	subs	r3, #2
 8018ce6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	2b01      	cmp	r3, #1
 8018cec:	dcf1      	bgt.n	8018cd2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	dd04      	ble.n	8018cfe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8018cf4:	f107 030e 	add.w	r3, r7, #14
 8018cf8:	69ba      	ldr	r2, [r7, #24]
 8018cfa:	7812      	ldrb	r2, [r2, #0]
 8018cfc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8018cfe:	89fb      	ldrh	r3, [r7, #14]
 8018d00:	461a      	mov	r2, r3
 8018d02:	697b      	ldr	r3, [r7, #20]
 8018d04:	4413      	add	r3, r2
 8018d06:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	0c1a      	lsrs	r2, r3, #16
 8018d0c:	697b      	ldr	r3, [r7, #20]
 8018d0e:	b29b      	uxth	r3, r3
 8018d10:	4413      	add	r3, r2
 8018d12:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8018d14:	697b      	ldr	r3, [r7, #20]
 8018d16:	0c1a      	lsrs	r2, r3, #16
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	b29b      	uxth	r3, r3
 8018d1c:	4413      	add	r3, r2
 8018d1e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8018d20:	693b      	ldr	r3, [r7, #16]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d007      	beq.n	8018d36 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	021b      	lsls	r3, r3, #8
 8018d2a:	b29a      	uxth	r2, r3
 8018d2c:	697b      	ldr	r3, [r7, #20]
 8018d2e:	0a1b      	lsrs	r3, r3, #8
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	4313      	orrs	r3, r2
 8018d34:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	b29b      	uxth	r3, r3
}
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	3724      	adds	r7, #36	; 0x24
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d44:	4770      	bx	lr

08018d46 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8018d46:	b580      	push	{r7, lr}
 8018d48:	b082      	sub	sp, #8
 8018d4a:	af00      	add	r7, sp, #0
 8018d4c:	6078      	str	r0, [r7, #4]
 8018d4e:	460b      	mov	r3, r1
 8018d50:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8018d52:	887b      	ldrh	r3, [r7, #2]
 8018d54:	4619      	mov	r1, r3
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7ff ff98 	bl	8018c8c <lwip_standard_chksum>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	43db      	mvns	r3, r3
 8018d60:	b29b      	uxth	r3, r3
}
 8018d62:	4618      	mov	r0, r3
 8018d64:	3708      	adds	r7, #8
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}

08018d6a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8018d6a:	b580      	push	{r7, lr}
 8018d6c:	b086      	sub	sp, #24
 8018d6e:	af00      	add	r7, sp, #0
 8018d70:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8018d72:	2300      	movs	r3, #0
 8018d74:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8018d76:	2300      	movs	r3, #0
 8018d78:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	613b      	str	r3, [r7, #16]
 8018d7e:	e02b      	b.n	8018dd8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8018d80:	693b      	ldr	r3, [r7, #16]
 8018d82:	685a      	ldr	r2, [r3, #4]
 8018d84:	693b      	ldr	r3, [r7, #16]
 8018d86:	895b      	ldrh	r3, [r3, #10]
 8018d88:	4619      	mov	r1, r3
 8018d8a:	4610      	mov	r0, r2
 8018d8c:	f7ff ff7e 	bl	8018c8c <lwip_standard_chksum>
 8018d90:	4603      	mov	r3, r0
 8018d92:	461a      	mov	r2, r3
 8018d94:	697b      	ldr	r3, [r7, #20]
 8018d96:	4413      	add	r3, r2
 8018d98:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	0c1a      	lsrs	r2, r3, #16
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	4413      	add	r3, r2
 8018da4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	895b      	ldrh	r3, [r3, #10]
 8018daa:	f003 0301 	and.w	r3, r3, #1
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d00e      	beq.n	8018dd2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	bf0c      	ite	eq
 8018dba:	2301      	moveq	r3, #1
 8018dbc:	2300      	movne	r3, #0
 8018dbe:	b2db      	uxtb	r3, r3
 8018dc0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8018dc2:	697b      	ldr	r3, [r7, #20]
 8018dc4:	021b      	lsls	r3, r3, #8
 8018dc6:	b29a      	uxth	r2, r3
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	0a1b      	lsrs	r3, r3, #8
 8018dcc:	b2db      	uxtb	r3, r3
 8018dce:	4313      	orrs	r3, r2
 8018dd0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	613b      	str	r3, [r7, #16]
 8018dd8:	693b      	ldr	r3, [r7, #16]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d1d0      	bne.n	8018d80 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d007      	beq.n	8018df4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8018de4:	697b      	ldr	r3, [r7, #20]
 8018de6:	021b      	lsls	r3, r3, #8
 8018de8:	b29a      	uxth	r2, r3
 8018dea:	697b      	ldr	r3, [r7, #20]
 8018dec:	0a1b      	lsrs	r3, r3, #8
 8018dee:	b2db      	uxtb	r3, r3
 8018df0:	4313      	orrs	r3, r2
 8018df2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8018df4:	697b      	ldr	r3, [r7, #20]
 8018df6:	b29b      	uxth	r3, r3
 8018df8:	43db      	mvns	r3, r3
 8018dfa:	b29b      	uxth	r3, r3
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3718      	adds	r7, #24
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd80      	pop	{r7, pc}

08018e04 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b082      	sub	sp, #8
 8018e08:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8018e0e:	f00c f819 	bl	8024e44 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8018e12:	f000 f8d5 	bl	8018fc0 <mem_init>
  memp_init();
 8018e16:	f000 fc2d 	bl	8019674 <memp_init>
  pbuf_init();
  netif_init();
 8018e1a:	f000 fd39 	bl	8019890 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8018e1e:	f007 f93d 	bl	802009c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8018e22:	f001 fe65 	bl	801aaf0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8018e26:	f007 f87f 	bl	801ff28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8018e2a:	bf00      	nop
 8018e2c:	3708      	adds	r7, #8
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}
	...

08018e34 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8018e34:	b480      	push	{r7}
 8018e36:	b083      	sub	sp, #12
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8018e3e:	4b05      	ldr	r3, [pc, #20]	; (8018e54 <ptr_to_mem+0x20>)
 8018e40:	681a      	ldr	r2, [r3, #0]
 8018e42:	88fb      	ldrh	r3, [r7, #6]
 8018e44:	4413      	add	r3, r2
}
 8018e46:	4618      	mov	r0, r3
 8018e48:	370c      	adds	r7, #12
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e50:	4770      	bx	lr
 8018e52:	bf00      	nop
 8018e54:	24009ef4 	.word	0x24009ef4

08018e58 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8018e58:	b480      	push	{r7}
 8018e5a:	b083      	sub	sp, #12
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8018e60:	4b05      	ldr	r3, [pc, #20]	; (8018e78 <mem_to_ptr+0x20>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	687a      	ldr	r2, [r7, #4]
 8018e66:	1ad3      	subs	r3, r2, r3
 8018e68:	b29b      	uxth	r3, r3
}
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	370c      	adds	r7, #12
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e74:	4770      	bx	lr
 8018e76:	bf00      	nop
 8018e78:	24009ef4 	.word	0x24009ef4

08018e7c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8018e7c:	b590      	push	{r4, r7, lr}
 8018e7e:	b085      	sub	sp, #20
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018e84:	4b45      	ldr	r3, [pc, #276]	; (8018f9c <plug_holes+0x120>)
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	687a      	ldr	r2, [r7, #4]
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d206      	bcs.n	8018e9c <plug_holes+0x20>
 8018e8e:	4b44      	ldr	r3, [pc, #272]	; (8018fa0 <plug_holes+0x124>)
 8018e90:	f240 12df 	movw	r2, #479	; 0x1df
 8018e94:	4943      	ldr	r1, [pc, #268]	; (8018fa4 <plug_holes+0x128>)
 8018e96:	4844      	ldr	r0, [pc, #272]	; (8018fa8 <plug_holes+0x12c>)
 8018e98:	f00d f864 	bl	8025f64 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8018e9c:	4b43      	ldr	r3, [pc, #268]	; (8018fac <plug_holes+0x130>)
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	687a      	ldr	r2, [r7, #4]
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d306      	bcc.n	8018eb4 <plug_holes+0x38>
 8018ea6:	4b3e      	ldr	r3, [pc, #248]	; (8018fa0 <plug_holes+0x124>)
 8018ea8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018eac:	4940      	ldr	r1, [pc, #256]	; (8018fb0 <plug_holes+0x134>)
 8018eae:	483e      	ldr	r0, [pc, #248]	; (8018fa8 <plug_holes+0x12c>)
 8018eb0:	f00d f858 	bl	8025f64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	791b      	ldrb	r3, [r3, #4]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d006      	beq.n	8018eca <plug_holes+0x4e>
 8018ebc:	4b38      	ldr	r3, [pc, #224]	; (8018fa0 <plug_holes+0x124>)
 8018ebe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8018ec2:	493c      	ldr	r1, [pc, #240]	; (8018fb4 <plug_holes+0x138>)
 8018ec4:	4838      	ldr	r0, [pc, #224]	; (8018fa8 <plug_holes+0x12c>)
 8018ec6:	f00d f84d 	bl	8025f64 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	881b      	ldrh	r3, [r3, #0]
 8018ece:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018ed2:	d906      	bls.n	8018ee2 <plug_holes+0x66>
 8018ed4:	4b32      	ldr	r3, [pc, #200]	; (8018fa0 <plug_holes+0x124>)
 8018ed6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8018eda:	4937      	ldr	r1, [pc, #220]	; (8018fb8 <plug_holes+0x13c>)
 8018edc:	4832      	ldr	r0, [pc, #200]	; (8018fa8 <plug_holes+0x12c>)
 8018ede:	f00d f841 	bl	8025f64 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	881b      	ldrh	r3, [r3, #0]
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f7ff ffa4 	bl	8018e34 <ptr_to_mem>
 8018eec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8018eee:	687a      	ldr	r2, [r7, #4]
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d024      	beq.n	8018f40 <plug_holes+0xc4>
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	791b      	ldrb	r3, [r3, #4]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d120      	bne.n	8018f40 <plug_holes+0xc4>
 8018efe:	4b2b      	ldr	r3, [pc, #172]	; (8018fac <plug_holes+0x130>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	68fa      	ldr	r2, [r7, #12]
 8018f04:	429a      	cmp	r2, r3
 8018f06:	d01b      	beq.n	8018f40 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8018f08:	4b2c      	ldr	r3, [pc, #176]	; (8018fbc <plug_holes+0x140>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	68fa      	ldr	r2, [r7, #12]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	d102      	bne.n	8018f18 <plug_holes+0x9c>
      lfree = mem;
 8018f12:	4a2a      	ldr	r2, [pc, #168]	; (8018fbc <plug_holes+0x140>)
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	881a      	ldrh	r2, [r3, #0]
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	881b      	ldrh	r3, [r3, #0]
 8018f24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018f28:	d00a      	beq.n	8018f40 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	881b      	ldrh	r3, [r3, #0]
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7ff ff80 	bl	8018e34 <ptr_to_mem>
 8018f34:	4604      	mov	r4, r0
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	f7ff ff8e 	bl	8018e58 <mem_to_ptr>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	885b      	ldrh	r3, [r3, #2]
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7ff ff75 	bl	8018e34 <ptr_to_mem>
 8018f4a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8018f4c:	68ba      	ldr	r2, [r7, #8]
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	429a      	cmp	r2, r3
 8018f52:	d01f      	beq.n	8018f94 <plug_holes+0x118>
 8018f54:	68bb      	ldr	r3, [r7, #8]
 8018f56:	791b      	ldrb	r3, [r3, #4]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d11b      	bne.n	8018f94 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8018f5c:	4b17      	ldr	r3, [pc, #92]	; (8018fbc <plug_holes+0x140>)
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	687a      	ldr	r2, [r7, #4]
 8018f62:	429a      	cmp	r2, r3
 8018f64:	d102      	bne.n	8018f6c <plug_holes+0xf0>
      lfree = pmem;
 8018f66:	4a15      	ldr	r2, [pc, #84]	; (8018fbc <plug_holes+0x140>)
 8018f68:	68bb      	ldr	r3, [r7, #8]
 8018f6a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	881a      	ldrh	r2, [r3, #0]
 8018f70:	68bb      	ldr	r3, [r7, #8]
 8018f72:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	881b      	ldrh	r3, [r3, #0]
 8018f78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018f7c:	d00a      	beq.n	8018f94 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	881b      	ldrh	r3, [r3, #0]
 8018f82:	4618      	mov	r0, r3
 8018f84:	f7ff ff56 	bl	8018e34 <ptr_to_mem>
 8018f88:	4604      	mov	r4, r0
 8018f8a:	68b8      	ldr	r0, [r7, #8]
 8018f8c:	f7ff ff64 	bl	8018e58 <mem_to_ptr>
 8018f90:	4603      	mov	r3, r0
 8018f92:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8018f94:	bf00      	nop
 8018f96:	3714      	adds	r7, #20
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd90      	pop	{r4, r7, pc}
 8018f9c:	24009ef4 	.word	0x24009ef4
 8018fa0:	08027024 	.word	0x08027024
 8018fa4:	08027054 	.word	0x08027054
 8018fa8:	0802706c 	.word	0x0802706c
 8018fac:	24009ef8 	.word	0x24009ef8
 8018fb0:	08027094 	.word	0x08027094
 8018fb4:	080270b0 	.word	0x080270b0
 8018fb8:	080270cc 	.word	0x080270cc
 8018fbc:	24009f00 	.word	0x24009f00

08018fc0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b082      	sub	sp, #8
 8018fc4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018fc6:	4b1d      	ldr	r3, [pc, #116]	; (801903c <mem_init+0x7c>)
 8018fc8:	4a1d      	ldr	r2, [pc, #116]	; (8019040 <mem_init+0x80>)
 8018fca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8018fcc:	4b1b      	ldr	r3, [pc, #108]	; (801903c <mem_init+0x7c>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8018fd8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	2200      	movs	r2, #0
 8018fde:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018fe6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8018fea:	f7ff ff23 	bl	8018e34 <ptr_to_mem>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	4a14      	ldr	r2, [pc, #80]	; (8019044 <mem_init+0x84>)
 8018ff2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8018ff4:	4b13      	ldr	r3, [pc, #76]	; (8019044 <mem_init+0x84>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	2201      	movs	r2, #1
 8018ffa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8018ffc:	4b11      	ldr	r3, [pc, #68]	; (8019044 <mem_init+0x84>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8019004:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8019006:	4b0f      	ldr	r3, [pc, #60]	; (8019044 <mem_init+0x84>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801900e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8019010:	4b0a      	ldr	r3, [pc, #40]	; (801903c <mem_init+0x7c>)
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	4a0c      	ldr	r2, [pc, #48]	; (8019048 <mem_init+0x88>)
 8019016:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019018:	480c      	ldr	r0, [pc, #48]	; (801904c <mem_init+0x8c>)
 801901a:	f00b ff1f 	bl	8024e5c <sys_mutex_new>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	d006      	beq.n	8019032 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019024:	4b0a      	ldr	r3, [pc, #40]	; (8019050 <mem_init+0x90>)
 8019026:	f240 221f 	movw	r2, #543	; 0x21f
 801902a:	490a      	ldr	r1, [pc, #40]	; (8019054 <mem_init+0x94>)
 801902c:	480a      	ldr	r0, [pc, #40]	; (8019058 <mem_init+0x98>)
 801902e:	f00c ff99 	bl	8025f64 <iprintf>
  }
}
 8019032:	bf00      	nop
 8019034:	3708      	adds	r7, #8
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}
 801903a:	bf00      	nop
 801903c:	24009ef4 	.word	0x24009ef4
 8019040:	30044000 	.word	0x30044000
 8019044:	24009ef8 	.word	0x24009ef8
 8019048:	24009f00 	.word	0x24009f00
 801904c:	24009efc 	.word	0x24009efc
 8019050:	08027024 	.word	0x08027024
 8019054:	080270f8 	.word	0x080270f8
 8019058:	0802706c 	.word	0x0802706c

0801905c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b086      	sub	sp, #24
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8019064:	6878      	ldr	r0, [r7, #4]
 8019066:	f7ff fef7 	bl	8018e58 <mem_to_ptr>
 801906a:	4603      	mov	r3, r0
 801906c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	881b      	ldrh	r3, [r3, #0]
 8019072:	4618      	mov	r0, r3
 8019074:	f7ff fede 	bl	8018e34 <ptr_to_mem>
 8019078:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	885b      	ldrh	r3, [r3, #2]
 801907e:	4618      	mov	r0, r3
 8019080:	f7ff fed8 	bl	8018e34 <ptr_to_mem>
 8019084:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	881b      	ldrh	r3, [r3, #0]
 801908a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801908e:	d818      	bhi.n	80190c2 <mem_link_valid+0x66>
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	885b      	ldrh	r3, [r3, #2]
 8019094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8019098:	d813      	bhi.n	80190c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801909e:	8afa      	ldrh	r2, [r7, #22]
 80190a0:	429a      	cmp	r2, r3
 80190a2:	d004      	beq.n	80190ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	881b      	ldrh	r3, [r3, #0]
 80190a8:	8afa      	ldrh	r2, [r7, #22]
 80190aa:	429a      	cmp	r2, r3
 80190ac:	d109      	bne.n	80190c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80190ae:	4b08      	ldr	r3, [pc, #32]	; (80190d0 <mem_link_valid+0x74>)
 80190b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80190b2:	693a      	ldr	r2, [r7, #16]
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d006      	beq.n	80190c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80190b8:	693b      	ldr	r3, [r7, #16]
 80190ba:	885b      	ldrh	r3, [r3, #2]
 80190bc:	8afa      	ldrh	r2, [r7, #22]
 80190be:	429a      	cmp	r2, r3
 80190c0:	d001      	beq.n	80190c6 <mem_link_valid+0x6a>
    return 0;
 80190c2:	2300      	movs	r3, #0
 80190c4:	e000      	b.n	80190c8 <mem_link_valid+0x6c>
  }
  return 1;
 80190c6:	2301      	movs	r3, #1
}
 80190c8:	4618      	mov	r0, r3
 80190ca:	3718      	adds	r7, #24
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd80      	pop	{r7, pc}
 80190d0:	24009ef8 	.word	0x24009ef8

080190d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b088      	sub	sp, #32
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d070      	beq.n	80191c4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	f003 0303 	and.w	r3, r3, #3
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d00d      	beq.n	8019108 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80190ec:	4b37      	ldr	r3, [pc, #220]	; (80191cc <mem_free+0xf8>)
 80190ee:	f240 2273 	movw	r2, #627	; 0x273
 80190f2:	4937      	ldr	r1, [pc, #220]	; (80191d0 <mem_free+0xfc>)
 80190f4:	4837      	ldr	r0, [pc, #220]	; (80191d4 <mem_free+0x100>)
 80190f6:	f00c ff35 	bl	8025f64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80190fa:	f00b ff01 	bl	8024f00 <sys_arch_protect>
 80190fe:	60f8      	str	r0, [r7, #12]
 8019100:	68f8      	ldr	r0, [r7, #12]
 8019102:	f00b ff0b 	bl	8024f1c <sys_arch_unprotect>
    return;
 8019106:	e05e      	b.n	80191c6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	3b08      	subs	r3, #8
 801910c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801910e:	4b32      	ldr	r3, [pc, #200]	; (80191d8 <mem_free+0x104>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	69fa      	ldr	r2, [r7, #28]
 8019114:	429a      	cmp	r2, r3
 8019116:	d306      	bcc.n	8019126 <mem_free+0x52>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	f103 020c 	add.w	r2, r3, #12
 801911e:	4b2f      	ldr	r3, [pc, #188]	; (80191dc <mem_free+0x108>)
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	429a      	cmp	r2, r3
 8019124:	d90d      	bls.n	8019142 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019126:	4b29      	ldr	r3, [pc, #164]	; (80191cc <mem_free+0xf8>)
 8019128:	f240 227f 	movw	r2, #639	; 0x27f
 801912c:	492c      	ldr	r1, [pc, #176]	; (80191e0 <mem_free+0x10c>)
 801912e:	4829      	ldr	r0, [pc, #164]	; (80191d4 <mem_free+0x100>)
 8019130:	f00c ff18 	bl	8025f64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019134:	f00b fee4 	bl	8024f00 <sys_arch_protect>
 8019138:	6138      	str	r0, [r7, #16]
 801913a:	6938      	ldr	r0, [r7, #16]
 801913c:	f00b feee 	bl	8024f1c <sys_arch_unprotect>
    return;
 8019140:	e041      	b.n	80191c6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8019142:	4828      	ldr	r0, [pc, #160]	; (80191e4 <mem_free+0x110>)
 8019144:	f00b fea0 	bl	8024e88 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8019148:	69fb      	ldr	r3, [r7, #28]
 801914a:	791b      	ldrb	r3, [r3, #4]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d110      	bne.n	8019172 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019150:	4b1e      	ldr	r3, [pc, #120]	; (80191cc <mem_free+0xf8>)
 8019152:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8019156:	4924      	ldr	r1, [pc, #144]	; (80191e8 <mem_free+0x114>)
 8019158:	481e      	ldr	r0, [pc, #120]	; (80191d4 <mem_free+0x100>)
 801915a:	f00c ff03 	bl	8025f64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801915e:	4821      	ldr	r0, [pc, #132]	; (80191e4 <mem_free+0x110>)
 8019160:	f00b fea1 	bl	8024ea6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019164:	f00b fecc 	bl	8024f00 <sys_arch_protect>
 8019168:	6178      	str	r0, [r7, #20]
 801916a:	6978      	ldr	r0, [r7, #20]
 801916c:	f00b fed6 	bl	8024f1c <sys_arch_unprotect>
    return;
 8019170:	e029      	b.n	80191c6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8019172:	69f8      	ldr	r0, [r7, #28]
 8019174:	f7ff ff72 	bl	801905c <mem_link_valid>
 8019178:	4603      	mov	r3, r0
 801917a:	2b00      	cmp	r3, #0
 801917c:	d110      	bne.n	80191a0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801917e:	4b13      	ldr	r3, [pc, #76]	; (80191cc <mem_free+0xf8>)
 8019180:	f240 2295 	movw	r2, #661	; 0x295
 8019184:	4919      	ldr	r1, [pc, #100]	; (80191ec <mem_free+0x118>)
 8019186:	4813      	ldr	r0, [pc, #76]	; (80191d4 <mem_free+0x100>)
 8019188:	f00c feec 	bl	8025f64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801918c:	4815      	ldr	r0, [pc, #84]	; (80191e4 <mem_free+0x110>)
 801918e:	f00b fe8a 	bl	8024ea6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019192:	f00b feb5 	bl	8024f00 <sys_arch_protect>
 8019196:	61b8      	str	r0, [r7, #24]
 8019198:	69b8      	ldr	r0, [r7, #24]
 801919a:	f00b febf 	bl	8024f1c <sys_arch_unprotect>
    return;
 801919e:	e012      	b.n	80191c6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80191a0:	69fb      	ldr	r3, [r7, #28]
 80191a2:	2200      	movs	r2, #0
 80191a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80191a6:	4b12      	ldr	r3, [pc, #72]	; (80191f0 <mem_free+0x11c>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	69fa      	ldr	r2, [r7, #28]
 80191ac:	429a      	cmp	r2, r3
 80191ae:	d202      	bcs.n	80191b6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80191b0:	4a0f      	ldr	r2, [pc, #60]	; (80191f0 <mem_free+0x11c>)
 80191b2:	69fb      	ldr	r3, [r7, #28]
 80191b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80191b6:	69f8      	ldr	r0, [r7, #28]
 80191b8:	f7ff fe60 	bl	8018e7c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80191bc:	4809      	ldr	r0, [pc, #36]	; (80191e4 <mem_free+0x110>)
 80191be:	f00b fe72 	bl	8024ea6 <sys_mutex_unlock>
 80191c2:	e000      	b.n	80191c6 <mem_free+0xf2>
    return;
 80191c4:	bf00      	nop
}
 80191c6:	3720      	adds	r7, #32
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}
 80191cc:	08027024 	.word	0x08027024
 80191d0:	08027114 	.word	0x08027114
 80191d4:	0802706c 	.word	0x0802706c
 80191d8:	24009ef4 	.word	0x24009ef4
 80191dc:	24009ef8 	.word	0x24009ef8
 80191e0:	08027138 	.word	0x08027138
 80191e4:	24009efc 	.word	0x24009efc
 80191e8:	08027154 	.word	0x08027154
 80191ec:	0802717c 	.word	0x0802717c
 80191f0:	24009f00 	.word	0x24009f00

080191f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b088      	sub	sp, #32
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
 80191fc:	460b      	mov	r3, r1
 80191fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019200:	887b      	ldrh	r3, [r7, #2]
 8019202:	3303      	adds	r3, #3
 8019204:	b29b      	uxth	r3, r3
 8019206:	f023 0303 	bic.w	r3, r3, #3
 801920a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801920c:	8bfb      	ldrh	r3, [r7, #30]
 801920e:	2b0b      	cmp	r3, #11
 8019210:	d801      	bhi.n	8019216 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8019212:	230c      	movs	r3, #12
 8019214:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019216:	8bfb      	ldrh	r3, [r7, #30]
 8019218:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801921c:	d803      	bhi.n	8019226 <mem_trim+0x32>
 801921e:	8bfa      	ldrh	r2, [r7, #30]
 8019220:	887b      	ldrh	r3, [r7, #2]
 8019222:	429a      	cmp	r2, r3
 8019224:	d201      	bcs.n	801922a <mem_trim+0x36>
    return NULL;
 8019226:	2300      	movs	r3, #0
 8019228:	e0d8      	b.n	80193dc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801922a:	4b6e      	ldr	r3, [pc, #440]	; (80193e4 <mem_trim+0x1f0>)
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	687a      	ldr	r2, [r7, #4]
 8019230:	429a      	cmp	r2, r3
 8019232:	d304      	bcc.n	801923e <mem_trim+0x4a>
 8019234:	4b6c      	ldr	r3, [pc, #432]	; (80193e8 <mem_trim+0x1f4>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	687a      	ldr	r2, [r7, #4]
 801923a:	429a      	cmp	r2, r3
 801923c:	d306      	bcc.n	801924c <mem_trim+0x58>
 801923e:	4b6b      	ldr	r3, [pc, #428]	; (80193ec <mem_trim+0x1f8>)
 8019240:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019244:	496a      	ldr	r1, [pc, #424]	; (80193f0 <mem_trim+0x1fc>)
 8019246:	486b      	ldr	r0, [pc, #428]	; (80193f4 <mem_trim+0x200>)
 8019248:	f00c fe8c 	bl	8025f64 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801924c:	4b65      	ldr	r3, [pc, #404]	; (80193e4 <mem_trim+0x1f0>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	429a      	cmp	r2, r3
 8019254:	d304      	bcc.n	8019260 <mem_trim+0x6c>
 8019256:	4b64      	ldr	r3, [pc, #400]	; (80193e8 <mem_trim+0x1f4>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	687a      	ldr	r2, [r7, #4]
 801925c:	429a      	cmp	r2, r3
 801925e:	d307      	bcc.n	8019270 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019260:	f00b fe4e 	bl	8024f00 <sys_arch_protect>
 8019264:	60b8      	str	r0, [r7, #8]
 8019266:	68b8      	ldr	r0, [r7, #8]
 8019268:	f00b fe58 	bl	8024f1c <sys_arch_unprotect>
    return rmem;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	e0b5      	b.n	80193dc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	3b08      	subs	r3, #8
 8019274:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8019276:	69b8      	ldr	r0, [r7, #24]
 8019278:	f7ff fdee 	bl	8018e58 <mem_to_ptr>
 801927c:	4603      	mov	r3, r0
 801927e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019280:	69bb      	ldr	r3, [r7, #24]
 8019282:	881a      	ldrh	r2, [r3, #0]
 8019284:	8afb      	ldrh	r3, [r7, #22]
 8019286:	1ad3      	subs	r3, r2, r3
 8019288:	b29b      	uxth	r3, r3
 801928a:	3b08      	subs	r3, #8
 801928c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801928e:	8bfa      	ldrh	r2, [r7, #30]
 8019290:	8abb      	ldrh	r3, [r7, #20]
 8019292:	429a      	cmp	r2, r3
 8019294:	d906      	bls.n	80192a4 <mem_trim+0xb0>
 8019296:	4b55      	ldr	r3, [pc, #340]	; (80193ec <mem_trim+0x1f8>)
 8019298:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801929c:	4956      	ldr	r1, [pc, #344]	; (80193f8 <mem_trim+0x204>)
 801929e:	4855      	ldr	r0, [pc, #340]	; (80193f4 <mem_trim+0x200>)
 80192a0:	f00c fe60 	bl	8025f64 <iprintf>
  if (newsize > size) {
 80192a4:	8bfa      	ldrh	r2, [r7, #30]
 80192a6:	8abb      	ldrh	r3, [r7, #20]
 80192a8:	429a      	cmp	r2, r3
 80192aa:	d901      	bls.n	80192b0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80192ac:	2300      	movs	r3, #0
 80192ae:	e095      	b.n	80193dc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80192b0:	8bfa      	ldrh	r2, [r7, #30]
 80192b2:	8abb      	ldrh	r3, [r7, #20]
 80192b4:	429a      	cmp	r2, r3
 80192b6:	d101      	bne.n	80192bc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	e08f      	b.n	80193dc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80192bc:	484f      	ldr	r0, [pc, #316]	; (80193fc <mem_trim+0x208>)
 80192be:	f00b fde3 	bl	8024e88 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80192c2:	69bb      	ldr	r3, [r7, #24]
 80192c4:	881b      	ldrh	r3, [r3, #0]
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7ff fdb4 	bl	8018e34 <ptr_to_mem>
 80192cc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80192ce:	693b      	ldr	r3, [r7, #16]
 80192d0:	791b      	ldrb	r3, [r3, #4]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d13f      	bne.n	8019356 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80192d6:	69bb      	ldr	r3, [r7, #24]
 80192d8:	881b      	ldrh	r3, [r3, #0]
 80192da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80192de:	d106      	bne.n	80192ee <mem_trim+0xfa>
 80192e0:	4b42      	ldr	r3, [pc, #264]	; (80193ec <mem_trim+0x1f8>)
 80192e2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80192e6:	4946      	ldr	r1, [pc, #280]	; (8019400 <mem_trim+0x20c>)
 80192e8:	4842      	ldr	r0, [pc, #264]	; (80193f4 <mem_trim+0x200>)
 80192ea:	f00c fe3b 	bl	8025f64 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	881b      	ldrh	r3, [r3, #0]
 80192f2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80192f4:	8afa      	ldrh	r2, [r7, #22]
 80192f6:	8bfb      	ldrh	r3, [r7, #30]
 80192f8:	4413      	add	r3, r2
 80192fa:	b29b      	uxth	r3, r3
 80192fc:	3308      	adds	r3, #8
 80192fe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8019300:	4b40      	ldr	r3, [pc, #256]	; (8019404 <mem_trim+0x210>)
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	693a      	ldr	r2, [r7, #16]
 8019306:	429a      	cmp	r2, r3
 8019308:	d106      	bne.n	8019318 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801930a:	89fb      	ldrh	r3, [r7, #14]
 801930c:	4618      	mov	r0, r3
 801930e:	f7ff fd91 	bl	8018e34 <ptr_to_mem>
 8019312:	4603      	mov	r3, r0
 8019314:	4a3b      	ldr	r2, [pc, #236]	; (8019404 <mem_trim+0x210>)
 8019316:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8019318:	89fb      	ldrh	r3, [r7, #14]
 801931a:	4618      	mov	r0, r3
 801931c:	f7ff fd8a 	bl	8018e34 <ptr_to_mem>
 8019320:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8019322:	693b      	ldr	r3, [r7, #16]
 8019324:	2200      	movs	r2, #0
 8019326:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8019328:	693b      	ldr	r3, [r7, #16]
 801932a:	89ba      	ldrh	r2, [r7, #12]
 801932c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	8afa      	ldrh	r2, [r7, #22]
 8019332:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8019334:	69bb      	ldr	r3, [r7, #24]
 8019336:	89fa      	ldrh	r2, [r7, #14]
 8019338:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801933a:	693b      	ldr	r3, [r7, #16]
 801933c:	881b      	ldrh	r3, [r3, #0]
 801933e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8019342:	d047      	beq.n	80193d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019344:	693b      	ldr	r3, [r7, #16]
 8019346:	881b      	ldrh	r3, [r3, #0]
 8019348:	4618      	mov	r0, r3
 801934a:	f7ff fd73 	bl	8018e34 <ptr_to_mem>
 801934e:	4602      	mov	r2, r0
 8019350:	89fb      	ldrh	r3, [r7, #14]
 8019352:	8053      	strh	r3, [r2, #2]
 8019354:	e03e      	b.n	80193d4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8019356:	8bfb      	ldrh	r3, [r7, #30]
 8019358:	f103 0214 	add.w	r2, r3, #20
 801935c:	8abb      	ldrh	r3, [r7, #20]
 801935e:	429a      	cmp	r2, r3
 8019360:	d838      	bhi.n	80193d4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019362:	8afa      	ldrh	r2, [r7, #22]
 8019364:	8bfb      	ldrh	r3, [r7, #30]
 8019366:	4413      	add	r3, r2
 8019368:	b29b      	uxth	r3, r3
 801936a:	3308      	adds	r3, #8
 801936c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801936e:	69bb      	ldr	r3, [r7, #24]
 8019370:	881b      	ldrh	r3, [r3, #0]
 8019372:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8019376:	d106      	bne.n	8019386 <mem_trim+0x192>
 8019378:	4b1c      	ldr	r3, [pc, #112]	; (80193ec <mem_trim+0x1f8>)
 801937a:	f240 3216 	movw	r2, #790	; 0x316
 801937e:	4920      	ldr	r1, [pc, #128]	; (8019400 <mem_trim+0x20c>)
 8019380:	481c      	ldr	r0, [pc, #112]	; (80193f4 <mem_trim+0x200>)
 8019382:	f00c fdef 	bl	8025f64 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8019386:	89fb      	ldrh	r3, [r7, #14]
 8019388:	4618      	mov	r0, r3
 801938a:	f7ff fd53 	bl	8018e34 <ptr_to_mem>
 801938e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8019390:	4b1c      	ldr	r3, [pc, #112]	; (8019404 <mem_trim+0x210>)
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	693a      	ldr	r2, [r7, #16]
 8019396:	429a      	cmp	r2, r3
 8019398:	d202      	bcs.n	80193a0 <mem_trim+0x1ac>
      lfree = mem2;
 801939a:	4a1a      	ldr	r2, [pc, #104]	; (8019404 <mem_trim+0x210>)
 801939c:	693b      	ldr	r3, [r7, #16]
 801939e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	2200      	movs	r2, #0
 80193a4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80193a6:	69bb      	ldr	r3, [r7, #24]
 80193a8:	881a      	ldrh	r2, [r3, #0]
 80193aa:	693b      	ldr	r3, [r7, #16]
 80193ac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80193ae:	693b      	ldr	r3, [r7, #16]
 80193b0:	8afa      	ldrh	r2, [r7, #22]
 80193b2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80193b4:	69bb      	ldr	r3, [r7, #24]
 80193b6:	89fa      	ldrh	r2, [r7, #14]
 80193b8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80193ba:	693b      	ldr	r3, [r7, #16]
 80193bc:	881b      	ldrh	r3, [r3, #0]
 80193be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80193c2:	d007      	beq.n	80193d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80193c4:	693b      	ldr	r3, [r7, #16]
 80193c6:	881b      	ldrh	r3, [r3, #0]
 80193c8:	4618      	mov	r0, r3
 80193ca:	f7ff fd33 	bl	8018e34 <ptr_to_mem>
 80193ce:	4602      	mov	r2, r0
 80193d0:	89fb      	ldrh	r3, [r7, #14]
 80193d2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80193d4:	4809      	ldr	r0, [pc, #36]	; (80193fc <mem_trim+0x208>)
 80193d6:	f00b fd66 	bl	8024ea6 <sys_mutex_unlock>
  return rmem;
 80193da:	687b      	ldr	r3, [r7, #4]
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3720      	adds	r7, #32
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	24009ef4 	.word	0x24009ef4
 80193e8:	24009ef8 	.word	0x24009ef8
 80193ec:	08027024 	.word	0x08027024
 80193f0:	080271b0 	.word	0x080271b0
 80193f4:	0802706c 	.word	0x0802706c
 80193f8:	080271c8 	.word	0x080271c8
 80193fc:	24009efc 	.word	0x24009efc
 8019400:	080271e8 	.word	0x080271e8
 8019404:	24009f00 	.word	0x24009f00

08019408 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b088      	sub	sp, #32
 801940c:	af00      	add	r7, sp, #0
 801940e:	4603      	mov	r3, r0
 8019410:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8019412:	88fb      	ldrh	r3, [r7, #6]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d101      	bne.n	801941c <mem_malloc+0x14>
    return NULL;
 8019418:	2300      	movs	r3, #0
 801941a:	e0e2      	b.n	80195e2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801941c:	88fb      	ldrh	r3, [r7, #6]
 801941e:	3303      	adds	r3, #3
 8019420:	b29b      	uxth	r3, r3
 8019422:	f023 0303 	bic.w	r3, r3, #3
 8019426:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8019428:	8bbb      	ldrh	r3, [r7, #28]
 801942a:	2b0b      	cmp	r3, #11
 801942c:	d801      	bhi.n	8019432 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801942e:	230c      	movs	r3, #12
 8019430:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019432:	8bbb      	ldrh	r3, [r7, #28]
 8019434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8019438:	d803      	bhi.n	8019442 <mem_malloc+0x3a>
 801943a:	8bba      	ldrh	r2, [r7, #28]
 801943c:	88fb      	ldrh	r3, [r7, #6]
 801943e:	429a      	cmp	r2, r3
 8019440:	d201      	bcs.n	8019446 <mem_malloc+0x3e>
    return NULL;
 8019442:	2300      	movs	r3, #0
 8019444:	e0cd      	b.n	80195e2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8019446:	4869      	ldr	r0, [pc, #420]	; (80195ec <mem_malloc+0x1e4>)
 8019448:	f00b fd1e 	bl	8024e88 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801944c:	4b68      	ldr	r3, [pc, #416]	; (80195f0 <mem_malloc+0x1e8>)
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	4618      	mov	r0, r3
 8019452:	f7ff fd01 	bl	8018e58 <mem_to_ptr>
 8019456:	4603      	mov	r3, r0
 8019458:	83fb      	strh	r3, [r7, #30]
 801945a:	e0b7      	b.n	80195cc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801945c:	8bfb      	ldrh	r3, [r7, #30]
 801945e:	4618      	mov	r0, r3
 8019460:	f7ff fce8 	bl	8018e34 <ptr_to_mem>
 8019464:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8019466:	697b      	ldr	r3, [r7, #20]
 8019468:	791b      	ldrb	r3, [r3, #4]
 801946a:	2b00      	cmp	r3, #0
 801946c:	f040 80a7 	bne.w	80195be <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019470:	697b      	ldr	r3, [r7, #20]
 8019472:	881b      	ldrh	r3, [r3, #0]
 8019474:	461a      	mov	r2, r3
 8019476:	8bfb      	ldrh	r3, [r7, #30]
 8019478:	1ad3      	subs	r3, r2, r3
 801947a:	f1a3 0208 	sub.w	r2, r3, #8
 801947e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8019480:	429a      	cmp	r2, r3
 8019482:	f0c0 809c 	bcc.w	80195be <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8019486:	697b      	ldr	r3, [r7, #20]
 8019488:	881b      	ldrh	r3, [r3, #0]
 801948a:	461a      	mov	r2, r3
 801948c:	8bfb      	ldrh	r3, [r7, #30]
 801948e:	1ad3      	subs	r3, r2, r3
 8019490:	f1a3 0208 	sub.w	r2, r3, #8
 8019494:	8bbb      	ldrh	r3, [r7, #28]
 8019496:	3314      	adds	r3, #20
 8019498:	429a      	cmp	r2, r3
 801949a:	d333      	bcc.n	8019504 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801949c:	8bfa      	ldrh	r2, [r7, #30]
 801949e:	8bbb      	ldrh	r3, [r7, #28]
 80194a0:	4413      	add	r3, r2
 80194a2:	b29b      	uxth	r3, r3
 80194a4:	3308      	adds	r3, #8
 80194a6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80194a8:	8a7b      	ldrh	r3, [r7, #18]
 80194aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80194ae:	d106      	bne.n	80194be <mem_malloc+0xb6>
 80194b0:	4b50      	ldr	r3, [pc, #320]	; (80195f4 <mem_malloc+0x1ec>)
 80194b2:	f240 3287 	movw	r2, #903	; 0x387
 80194b6:	4950      	ldr	r1, [pc, #320]	; (80195f8 <mem_malloc+0x1f0>)
 80194b8:	4850      	ldr	r0, [pc, #320]	; (80195fc <mem_malloc+0x1f4>)
 80194ba:	f00c fd53 	bl	8025f64 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80194be:	8a7b      	ldrh	r3, [r7, #18]
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7ff fcb7 	bl	8018e34 <ptr_to_mem>
 80194c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	2200      	movs	r2, #0
 80194cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80194ce:	697b      	ldr	r3, [r7, #20]
 80194d0:	881a      	ldrh	r2, [r3, #0]
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	8bfa      	ldrh	r2, [r7, #30]
 80194da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80194dc:	697b      	ldr	r3, [r7, #20]
 80194de:	8a7a      	ldrh	r2, [r7, #18]
 80194e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	2201      	movs	r2, #1
 80194e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	881b      	ldrh	r3, [r3, #0]
 80194ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80194f0:	d00b      	beq.n	801950a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	881b      	ldrh	r3, [r3, #0]
 80194f6:	4618      	mov	r0, r3
 80194f8:	f7ff fc9c 	bl	8018e34 <ptr_to_mem>
 80194fc:	4602      	mov	r2, r0
 80194fe:	8a7b      	ldrh	r3, [r7, #18]
 8019500:	8053      	strh	r3, [r2, #2]
 8019502:	e002      	b.n	801950a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	2201      	movs	r2, #1
 8019508:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801950a:	4b39      	ldr	r3, [pc, #228]	; (80195f0 <mem_malloc+0x1e8>)
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	697a      	ldr	r2, [r7, #20]
 8019510:	429a      	cmp	r2, r3
 8019512:	d127      	bne.n	8019564 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8019514:	4b36      	ldr	r3, [pc, #216]	; (80195f0 <mem_malloc+0x1e8>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801951a:	e005      	b.n	8019528 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801951c:	69bb      	ldr	r3, [r7, #24]
 801951e:	881b      	ldrh	r3, [r3, #0]
 8019520:	4618      	mov	r0, r3
 8019522:	f7ff fc87 	bl	8018e34 <ptr_to_mem>
 8019526:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8019528:	69bb      	ldr	r3, [r7, #24]
 801952a:	791b      	ldrb	r3, [r3, #4]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d004      	beq.n	801953a <mem_malloc+0x132>
 8019530:	4b33      	ldr	r3, [pc, #204]	; (8019600 <mem_malloc+0x1f8>)
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	69ba      	ldr	r2, [r7, #24]
 8019536:	429a      	cmp	r2, r3
 8019538:	d1f0      	bne.n	801951c <mem_malloc+0x114>
          }
          lfree = cur;
 801953a:	4a2d      	ldr	r2, [pc, #180]	; (80195f0 <mem_malloc+0x1e8>)
 801953c:	69bb      	ldr	r3, [r7, #24]
 801953e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019540:	4b2b      	ldr	r3, [pc, #172]	; (80195f0 <mem_malloc+0x1e8>)
 8019542:	681a      	ldr	r2, [r3, #0]
 8019544:	4b2e      	ldr	r3, [pc, #184]	; (8019600 <mem_malloc+0x1f8>)
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	429a      	cmp	r2, r3
 801954a:	d00b      	beq.n	8019564 <mem_malloc+0x15c>
 801954c:	4b28      	ldr	r3, [pc, #160]	; (80195f0 <mem_malloc+0x1e8>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	791b      	ldrb	r3, [r3, #4]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d006      	beq.n	8019564 <mem_malloc+0x15c>
 8019556:	4b27      	ldr	r3, [pc, #156]	; (80195f4 <mem_malloc+0x1ec>)
 8019558:	f240 32b5 	movw	r2, #949	; 0x3b5
 801955c:	4929      	ldr	r1, [pc, #164]	; (8019604 <mem_malloc+0x1fc>)
 801955e:	4827      	ldr	r0, [pc, #156]	; (80195fc <mem_malloc+0x1f4>)
 8019560:	f00c fd00 	bl	8025f64 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8019564:	4821      	ldr	r0, [pc, #132]	; (80195ec <mem_malloc+0x1e4>)
 8019566:	f00b fc9e 	bl	8024ea6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801956a:	8bba      	ldrh	r2, [r7, #28]
 801956c:	697b      	ldr	r3, [r7, #20]
 801956e:	4413      	add	r3, r2
 8019570:	3308      	adds	r3, #8
 8019572:	4a23      	ldr	r2, [pc, #140]	; (8019600 <mem_malloc+0x1f8>)
 8019574:	6812      	ldr	r2, [r2, #0]
 8019576:	4293      	cmp	r3, r2
 8019578:	d906      	bls.n	8019588 <mem_malloc+0x180>
 801957a:	4b1e      	ldr	r3, [pc, #120]	; (80195f4 <mem_malloc+0x1ec>)
 801957c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8019580:	4921      	ldr	r1, [pc, #132]	; (8019608 <mem_malloc+0x200>)
 8019582:	481e      	ldr	r0, [pc, #120]	; (80195fc <mem_malloc+0x1f4>)
 8019584:	f00c fcee 	bl	8025f64 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	f003 0303 	and.w	r3, r3, #3
 801958e:	2b00      	cmp	r3, #0
 8019590:	d006      	beq.n	80195a0 <mem_malloc+0x198>
 8019592:	4b18      	ldr	r3, [pc, #96]	; (80195f4 <mem_malloc+0x1ec>)
 8019594:	f240 32bb 	movw	r2, #955	; 0x3bb
 8019598:	491c      	ldr	r1, [pc, #112]	; (801960c <mem_malloc+0x204>)
 801959a:	4818      	ldr	r0, [pc, #96]	; (80195fc <mem_malloc+0x1f4>)
 801959c:	f00c fce2 	bl	8025f64 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80195a0:	697b      	ldr	r3, [r7, #20]
 80195a2:	f003 0303 	and.w	r3, r3, #3
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d006      	beq.n	80195b8 <mem_malloc+0x1b0>
 80195aa:	4b12      	ldr	r3, [pc, #72]	; (80195f4 <mem_malloc+0x1ec>)
 80195ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 80195b0:	4917      	ldr	r1, [pc, #92]	; (8019610 <mem_malloc+0x208>)
 80195b2:	4812      	ldr	r0, [pc, #72]	; (80195fc <mem_malloc+0x1f4>)
 80195b4:	f00c fcd6 	bl	8025f64 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	3308      	adds	r3, #8
 80195bc:	e011      	b.n	80195e2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80195be:	8bfb      	ldrh	r3, [r7, #30]
 80195c0:	4618      	mov	r0, r3
 80195c2:	f7ff fc37 	bl	8018e34 <ptr_to_mem>
 80195c6:	4603      	mov	r3, r0
 80195c8:	881b      	ldrh	r3, [r3, #0]
 80195ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80195cc:	8bfa      	ldrh	r2, [r7, #30]
 80195ce:	8bbb      	ldrh	r3, [r7, #28]
 80195d0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80195d4:	429a      	cmp	r2, r3
 80195d6:	f4ff af41 	bcc.w	801945c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80195da:	4804      	ldr	r0, [pc, #16]	; (80195ec <mem_malloc+0x1e4>)
 80195dc:	f00b fc63 	bl	8024ea6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80195e0:	2300      	movs	r3, #0
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3720      	adds	r7, #32
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
 80195ea:	bf00      	nop
 80195ec:	24009efc 	.word	0x24009efc
 80195f0:	24009f00 	.word	0x24009f00
 80195f4:	08027024 	.word	0x08027024
 80195f8:	080271e8 	.word	0x080271e8
 80195fc:	0802706c 	.word	0x0802706c
 8019600:	24009ef8 	.word	0x24009ef8
 8019604:	080271fc 	.word	0x080271fc
 8019608:	08027218 	.word	0x08027218
 801960c:	08027248 	.word	0x08027248
 8019610:	08027278 	.word	0x08027278

08019614 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8019614:	b480      	push	{r7}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	689b      	ldr	r3, [r3, #8]
 8019620:	2200      	movs	r2, #0
 8019622:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	685b      	ldr	r3, [r3, #4]
 8019628:	3303      	adds	r3, #3
 801962a:	f023 0303 	bic.w	r3, r3, #3
 801962e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8019630:	2300      	movs	r3, #0
 8019632:	60fb      	str	r3, [r7, #12]
 8019634:	e011      	b.n	801965a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	689b      	ldr	r3, [r3, #8]
 801963a:	681a      	ldr	r2, [r3, #0]
 801963c:	68bb      	ldr	r3, [r7, #8]
 801963e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	689b      	ldr	r3, [r3, #8]
 8019644:	68ba      	ldr	r2, [r7, #8]
 8019646:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	881b      	ldrh	r3, [r3, #0]
 801964c:	461a      	mov	r2, r3
 801964e:	68bb      	ldr	r3, [r7, #8]
 8019650:	4413      	add	r3, r2
 8019652:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	3301      	adds	r3, #1
 8019658:	60fb      	str	r3, [r7, #12]
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	885b      	ldrh	r3, [r3, #2]
 801965e:	461a      	mov	r2, r3
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	4293      	cmp	r3, r2
 8019664:	dbe7      	blt.n	8019636 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8019666:	bf00      	nop
 8019668:	bf00      	nop
 801966a:	3714      	adds	r7, #20
 801966c:	46bd      	mov	sp, r7
 801966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019672:	4770      	bx	lr

08019674 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b082      	sub	sp, #8
 8019678:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801967a:	2300      	movs	r3, #0
 801967c:	80fb      	strh	r3, [r7, #6]
 801967e:	e009      	b.n	8019694 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8019680:	88fb      	ldrh	r3, [r7, #6]
 8019682:	4a08      	ldr	r2, [pc, #32]	; (80196a4 <memp_init+0x30>)
 8019684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019688:	4618      	mov	r0, r3
 801968a:	f7ff ffc3 	bl	8019614 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801968e:	88fb      	ldrh	r3, [r7, #6]
 8019690:	3301      	adds	r3, #1
 8019692:	80fb      	strh	r3, [r7, #6]
 8019694:	88fb      	ldrh	r3, [r7, #6]
 8019696:	2b0c      	cmp	r3, #12
 8019698:	d9f2      	bls.n	8019680 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801969a:	bf00      	nop
 801969c:	bf00      	nop
 801969e:	3708      	adds	r7, #8
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd80      	pop	{r7, pc}
 80196a4:	0802a528 	.word	0x0802a528

080196a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b084      	sub	sp, #16
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80196b0:	f00b fc26 	bl	8024f00 <sys_arch_protect>
 80196b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	689b      	ldr	r3, [r3, #8]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80196be:	68bb      	ldr	r3, [r7, #8]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d015      	beq.n	80196f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	689b      	ldr	r3, [r3, #8]
 80196c8:	68ba      	ldr	r2, [r7, #8]
 80196ca:	6812      	ldr	r2, [r2, #0]
 80196cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	f003 0303 	and.w	r3, r3, #3
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d006      	beq.n	80196e6 <do_memp_malloc_pool+0x3e>
 80196d8:	4b09      	ldr	r3, [pc, #36]	; (8019700 <do_memp_malloc_pool+0x58>)
 80196da:	f44f 728c 	mov.w	r2, #280	; 0x118
 80196de:	4909      	ldr	r1, [pc, #36]	; (8019704 <do_memp_malloc_pool+0x5c>)
 80196e0:	4809      	ldr	r0, [pc, #36]	; (8019708 <do_memp_malloc_pool+0x60>)
 80196e2:	f00c fc3f 	bl	8025f64 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80196e6:	68f8      	ldr	r0, [r7, #12]
 80196e8:	f00b fc18 	bl	8024f1c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	e003      	b.n	80196f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80196f0:	68f8      	ldr	r0, [r7, #12]
 80196f2:	f00b fc13 	bl	8024f1c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80196f6:	2300      	movs	r3, #0
}
 80196f8:	4618      	mov	r0, r3
 80196fa:	3710      	adds	r7, #16
 80196fc:	46bd      	mov	sp, r7
 80196fe:	bd80      	pop	{r7, pc}
 8019700:	0802729c 	.word	0x0802729c
 8019704:	080272cc 	.word	0x080272cc
 8019708:	080272f0 	.word	0x080272f0

0801970c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b082      	sub	sp, #8
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d106      	bne.n	8019728 <memp_malloc_pool+0x1c>
 801971a:	4b0a      	ldr	r3, [pc, #40]	; (8019744 <memp_malloc_pool+0x38>)
 801971c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8019720:	4909      	ldr	r1, [pc, #36]	; (8019748 <memp_malloc_pool+0x3c>)
 8019722:	480a      	ldr	r0, [pc, #40]	; (801974c <memp_malloc_pool+0x40>)
 8019724:	f00c fc1e 	bl	8025f64 <iprintf>
  if (desc == NULL) {
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d101      	bne.n	8019732 <memp_malloc_pool+0x26>
    return NULL;
 801972e:	2300      	movs	r3, #0
 8019730:	e003      	b.n	801973a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8019732:	6878      	ldr	r0, [r7, #4]
 8019734:	f7ff ffb8 	bl	80196a8 <do_memp_malloc_pool>
 8019738:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801973a:	4618      	mov	r0, r3
 801973c:	3708      	adds	r7, #8
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}
 8019742:	bf00      	nop
 8019744:	0802729c 	.word	0x0802729c
 8019748:	08027318 	.word	0x08027318
 801974c:	080272f0 	.word	0x080272f0

08019750 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b084      	sub	sp, #16
 8019754:	af00      	add	r7, sp, #0
 8019756:	4603      	mov	r3, r0
 8019758:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801975a:	79fb      	ldrb	r3, [r7, #7]
 801975c:	2b0c      	cmp	r3, #12
 801975e:	d908      	bls.n	8019772 <memp_malloc+0x22>
 8019760:	4b0a      	ldr	r3, [pc, #40]	; (801978c <memp_malloc+0x3c>)
 8019762:	f240 1257 	movw	r2, #343	; 0x157
 8019766:	490a      	ldr	r1, [pc, #40]	; (8019790 <memp_malloc+0x40>)
 8019768:	480a      	ldr	r0, [pc, #40]	; (8019794 <memp_malloc+0x44>)
 801976a:	f00c fbfb 	bl	8025f64 <iprintf>
 801976e:	2300      	movs	r3, #0
 8019770:	e008      	b.n	8019784 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8019772:	79fb      	ldrb	r3, [r7, #7]
 8019774:	4a08      	ldr	r2, [pc, #32]	; (8019798 <memp_malloc+0x48>)
 8019776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801977a:	4618      	mov	r0, r3
 801977c:	f7ff ff94 	bl	80196a8 <do_memp_malloc_pool>
 8019780:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8019782:	68fb      	ldr	r3, [r7, #12]
}
 8019784:	4618      	mov	r0, r3
 8019786:	3710      	adds	r7, #16
 8019788:	46bd      	mov	sp, r7
 801978a:	bd80      	pop	{r7, pc}
 801978c:	0802729c 	.word	0x0802729c
 8019790:	0802732c 	.word	0x0802732c
 8019794:	080272f0 	.word	0x080272f0
 8019798:	0802a528 	.word	0x0802a528

0801979c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b084      	sub	sp, #16
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80197a6:	683b      	ldr	r3, [r7, #0]
 80197a8:	f003 0303 	and.w	r3, r3, #3
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d006      	beq.n	80197be <do_memp_free_pool+0x22>
 80197b0:	4b0d      	ldr	r3, [pc, #52]	; (80197e8 <do_memp_free_pool+0x4c>)
 80197b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80197b6:	490d      	ldr	r1, [pc, #52]	; (80197ec <do_memp_free_pool+0x50>)
 80197b8:	480d      	ldr	r0, [pc, #52]	; (80197f0 <do_memp_free_pool+0x54>)
 80197ba:	f00c fbd3 	bl	8025f64 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80197c2:	f00b fb9d 	bl	8024f00 <sys_arch_protect>
 80197c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	689b      	ldr	r3, [r3, #8]
 80197cc:	681a      	ldr	r2, [r3, #0]
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	689b      	ldr	r3, [r3, #8]
 80197d6:	68fa      	ldr	r2, [r7, #12]
 80197d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80197da:	68b8      	ldr	r0, [r7, #8]
 80197dc:	f00b fb9e 	bl	8024f1c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80197e0:	bf00      	nop
 80197e2:	3710      	adds	r7, #16
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}
 80197e8:	0802729c 	.word	0x0802729c
 80197ec:	0802734c 	.word	0x0802734c
 80197f0:	080272f0 	.word	0x080272f0

080197f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b082      	sub	sp, #8
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d106      	bne.n	8019812 <memp_free_pool+0x1e>
 8019804:	4b0a      	ldr	r3, [pc, #40]	; (8019830 <memp_free_pool+0x3c>)
 8019806:	f240 1295 	movw	r2, #405	; 0x195
 801980a:	490a      	ldr	r1, [pc, #40]	; (8019834 <memp_free_pool+0x40>)
 801980c:	480a      	ldr	r0, [pc, #40]	; (8019838 <memp_free_pool+0x44>)
 801980e:	f00c fba9 	bl	8025f64 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d007      	beq.n	8019828 <memp_free_pool+0x34>
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d004      	beq.n	8019828 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801981e:	6839      	ldr	r1, [r7, #0]
 8019820:	6878      	ldr	r0, [r7, #4]
 8019822:	f7ff ffbb 	bl	801979c <do_memp_free_pool>
 8019826:	e000      	b.n	801982a <memp_free_pool+0x36>
    return;
 8019828:	bf00      	nop
}
 801982a:	3708      	adds	r7, #8
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}
 8019830:	0802729c 	.word	0x0802729c
 8019834:	08027318 	.word	0x08027318
 8019838:	080272f0 	.word	0x080272f0

0801983c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
 8019842:	4603      	mov	r3, r0
 8019844:	6039      	str	r1, [r7, #0]
 8019846:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019848:	79fb      	ldrb	r3, [r7, #7]
 801984a:	2b0c      	cmp	r3, #12
 801984c:	d907      	bls.n	801985e <memp_free+0x22>
 801984e:	4b0c      	ldr	r3, [pc, #48]	; (8019880 <memp_free+0x44>)
 8019850:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8019854:	490b      	ldr	r1, [pc, #44]	; (8019884 <memp_free+0x48>)
 8019856:	480c      	ldr	r0, [pc, #48]	; (8019888 <memp_free+0x4c>)
 8019858:	f00c fb84 	bl	8025f64 <iprintf>
 801985c:	e00c      	b.n	8019878 <memp_free+0x3c>

  if (mem == NULL) {
 801985e:	683b      	ldr	r3, [r7, #0]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d008      	beq.n	8019876 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019864:	79fb      	ldrb	r3, [r7, #7]
 8019866:	4a09      	ldr	r2, [pc, #36]	; (801988c <memp_free+0x50>)
 8019868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801986c:	6839      	ldr	r1, [r7, #0]
 801986e:	4618      	mov	r0, r3
 8019870:	f7ff ff94 	bl	801979c <do_memp_free_pool>
 8019874:	e000      	b.n	8019878 <memp_free+0x3c>
    return;
 8019876:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019878:	3708      	adds	r7, #8
 801987a:	46bd      	mov	sp, r7
 801987c:	bd80      	pop	{r7, pc}
 801987e:	bf00      	nop
 8019880:	0802729c 	.word	0x0802729c
 8019884:	0802736c 	.word	0x0802736c
 8019888:	080272f0 	.word	0x080272f0
 801988c:	0802a528 	.word	0x0802a528

08019890 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8019890:	b480      	push	{r7}
 8019892:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8019894:	bf00      	nop
 8019896:	46bd      	mov	sp, r7
 8019898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801989c:	4770      	bx	lr
	...

080198a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b086      	sub	sp, #24
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	60f8      	str	r0, [r7, #12]
 80198a8:	60b9      	str	r1, [r7, #8]
 80198aa:	607a      	str	r2, [r7, #4]
 80198ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d108      	bne.n	80198c6 <netif_add+0x26>
 80198b4:	4b5b      	ldr	r3, [pc, #364]	; (8019a24 <netif_add+0x184>)
 80198b6:	f240 1227 	movw	r2, #295	; 0x127
 80198ba:	495b      	ldr	r1, [pc, #364]	; (8019a28 <netif_add+0x188>)
 80198bc:	485b      	ldr	r0, [pc, #364]	; (8019a2c <netif_add+0x18c>)
 80198be:	f00c fb51 	bl	8025f64 <iprintf>
 80198c2:	2300      	movs	r3, #0
 80198c4:	e0a9      	b.n	8019a1a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80198c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d108      	bne.n	80198de <netif_add+0x3e>
 80198cc:	4b55      	ldr	r3, [pc, #340]	; (8019a24 <netif_add+0x184>)
 80198ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80198d2:	4957      	ldr	r1, [pc, #348]	; (8019a30 <netif_add+0x190>)
 80198d4:	4855      	ldr	r0, [pc, #340]	; (8019a2c <netif_add+0x18c>)
 80198d6:	f00c fb45 	bl	8025f64 <iprintf>
 80198da:	2300      	movs	r3, #0
 80198dc:	e09d      	b.n	8019a1a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80198de:	68bb      	ldr	r3, [r7, #8]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d101      	bne.n	80198e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80198e4:	4b53      	ldr	r3, [pc, #332]	; (8019a34 <netif_add+0x194>)
 80198e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d101      	bne.n	80198f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80198ee:	4b51      	ldr	r3, [pc, #324]	; (8019a34 <netif_add+0x194>)
 80198f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d101      	bne.n	80198fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80198f8:	4b4e      	ldr	r3, [pc, #312]	; (8019a34 <netif_add+0x194>)
 80198fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	2200      	movs	r2, #0
 8019900:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	2200      	movs	r2, #0
 8019906:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	2200      	movs	r2, #0
 801990c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	4a49      	ldr	r2, [pc, #292]	; (8019a38 <netif_add+0x198>)
 8019912:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	2200      	movs	r2, #0
 8019918:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	2200      	movs	r2, #0
 801991e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	3324      	adds	r3, #36	; 0x24
 8019926:	2204      	movs	r2, #4
 8019928:	2100      	movs	r1, #0
 801992a:	4618      	mov	r0, r3
 801992c:	f00c fa1c 	bl	8025d68 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	2200      	movs	r2, #0
 8019934:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	6a3a      	ldr	r2, [r7, #32]
 801993a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801993c:	4b3f      	ldr	r3, [pc, #252]	; (8019a3c <netif_add+0x19c>)
 801993e:	781a      	ldrb	r2, [r3, #0]
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801994a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801994c:	683b      	ldr	r3, [r7, #0]
 801994e:	687a      	ldr	r2, [r7, #4]
 8019950:	68b9      	ldr	r1, [r7, #8]
 8019952:	68f8      	ldr	r0, [r7, #12]
 8019954:	f000 f914 	bl	8019b80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8019958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995a:	68f8      	ldr	r0, [r7, #12]
 801995c:	4798      	blx	r3
 801995e:	4603      	mov	r3, r0
 8019960:	2b00      	cmp	r3, #0
 8019962:	d001      	beq.n	8019968 <netif_add+0xc8>
    return NULL;
 8019964:	2300      	movs	r3, #0
 8019966:	e058      	b.n	8019a1a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801996e:	2bff      	cmp	r3, #255	; 0xff
 8019970:	d103      	bne.n	801997a <netif_add+0xda>
        netif->num = 0;
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	2200      	movs	r2, #0
 8019976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801997a:	2300      	movs	r3, #0
 801997c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801997e:	4b30      	ldr	r3, [pc, #192]	; (8019a40 <netif_add+0x1a0>)
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	617b      	str	r3, [r7, #20]
 8019984:	e02b      	b.n	80199de <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019986:	697a      	ldr	r2, [r7, #20]
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	429a      	cmp	r2, r3
 801998c:	d106      	bne.n	801999c <netif_add+0xfc>
 801998e:	4b25      	ldr	r3, [pc, #148]	; (8019a24 <netif_add+0x184>)
 8019990:	f240 128b 	movw	r2, #395	; 0x18b
 8019994:	492b      	ldr	r1, [pc, #172]	; (8019a44 <netif_add+0x1a4>)
 8019996:	4825      	ldr	r0, [pc, #148]	; (8019a2c <netif_add+0x18c>)
 8019998:	f00c fae4 	bl	8025f64 <iprintf>
        num_netifs++;
 801999c:	693b      	ldr	r3, [r7, #16]
 801999e:	3301      	adds	r3, #1
 80199a0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80199a2:	693b      	ldr	r3, [r7, #16]
 80199a4:	2bff      	cmp	r3, #255	; 0xff
 80199a6:	dd06      	ble.n	80199b6 <netif_add+0x116>
 80199a8:	4b1e      	ldr	r3, [pc, #120]	; (8019a24 <netif_add+0x184>)
 80199aa:	f240 128d 	movw	r2, #397	; 0x18d
 80199ae:	4926      	ldr	r1, [pc, #152]	; (8019a48 <netif_add+0x1a8>)
 80199b0:	481e      	ldr	r0, [pc, #120]	; (8019a2c <netif_add+0x18c>)
 80199b2:	f00c fad7 	bl	8025f64 <iprintf>
        if (netif2->num == netif->num) {
 80199b6:	697b      	ldr	r3, [r7, #20]
 80199b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80199c2:	429a      	cmp	r2, r3
 80199c4:	d108      	bne.n	80199d8 <netif_add+0x138>
          netif->num++;
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80199cc:	3301      	adds	r3, #1
 80199ce:	b2da      	uxtb	r2, r3
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80199d6:	e005      	b.n	80199e4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80199d8:	697b      	ldr	r3, [r7, #20]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	617b      	str	r3, [r7, #20]
 80199de:	697b      	ldr	r3, [r7, #20]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d1d0      	bne.n	8019986 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d1be      	bne.n	8019968 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80199f0:	2bfe      	cmp	r3, #254	; 0xfe
 80199f2:	d103      	bne.n	80199fc <netif_add+0x15c>
    netif_num = 0;
 80199f4:	4b11      	ldr	r3, [pc, #68]	; (8019a3c <netif_add+0x19c>)
 80199f6:	2200      	movs	r2, #0
 80199f8:	701a      	strb	r2, [r3, #0]
 80199fa:	e006      	b.n	8019a0a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019a02:	3301      	adds	r3, #1
 8019a04:	b2da      	uxtb	r2, r3
 8019a06:	4b0d      	ldr	r3, [pc, #52]	; (8019a3c <netif_add+0x19c>)
 8019a08:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8019a0a:	4b0d      	ldr	r3, [pc, #52]	; (8019a40 <netif_add+0x1a0>)
 8019a0c:	681a      	ldr	r2, [r3, #0]
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8019a12:	4a0b      	ldr	r2, [pc, #44]	; (8019a40 <netif_add+0x1a0>)
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8019a18:	68fb      	ldr	r3, [r7, #12]
}
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	3718      	adds	r7, #24
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	bd80      	pop	{r7, pc}
 8019a22:	bf00      	nop
 8019a24:	08027388 	.word	0x08027388
 8019a28:	0802741c 	.word	0x0802741c
 8019a2c:	080273d8 	.word	0x080273d8
 8019a30:	08027438 	.word	0x08027438
 8019a34:	0802a5ac 	.word	0x0802a5ac
 8019a38:	08019e63 	.word	0x08019e63
 8019a3c:	2400cff8 	.word	0x2400cff8
 8019a40:	2400cff0 	.word	0x2400cff0
 8019a44:	0802745c 	.word	0x0802745c
 8019a48:	08027470 	.word	0x08027470

08019a4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b082      	sub	sp, #8
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	6078      	str	r0, [r7, #4]
 8019a54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019a56:	6839      	ldr	r1, [r7, #0]
 8019a58:	6878      	ldr	r0, [r7, #4]
 8019a5a:	f002 fb91 	bl	801c180 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8019a5e:	6839      	ldr	r1, [r7, #0]
 8019a60:	6878      	ldr	r0, [r7, #4]
 8019a62:	f006 ffa7 	bl	80209b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8019a66:	bf00      	nop
 8019a68:	3708      	adds	r7, #8
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	bd80      	pop	{r7, pc}
	...

08019a70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b086      	sub	sp, #24
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	60f8      	str	r0, [r7, #12]
 8019a78:	60b9      	str	r1, [r7, #8]
 8019a7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8019a7c:	68bb      	ldr	r3, [r7, #8]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d106      	bne.n	8019a90 <netif_do_set_ipaddr+0x20>
 8019a82:	4b1d      	ldr	r3, [pc, #116]	; (8019af8 <netif_do_set_ipaddr+0x88>)
 8019a84:	f240 12cb 	movw	r2, #459	; 0x1cb
 8019a88:	491c      	ldr	r1, [pc, #112]	; (8019afc <netif_do_set_ipaddr+0x8c>)
 8019a8a:	481d      	ldr	r0, [pc, #116]	; (8019b00 <netif_do_set_ipaddr+0x90>)
 8019a8c:	f00c fa6a 	bl	8025f64 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d106      	bne.n	8019aa4 <netif_do_set_ipaddr+0x34>
 8019a96:	4b18      	ldr	r3, [pc, #96]	; (8019af8 <netif_do_set_ipaddr+0x88>)
 8019a98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8019a9c:	4917      	ldr	r1, [pc, #92]	; (8019afc <netif_do_set_ipaddr+0x8c>)
 8019a9e:	4818      	ldr	r0, [pc, #96]	; (8019b00 <netif_do_set_ipaddr+0x90>)
 8019aa0:	f00c fa60 	bl	8025f64 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8019aa4:	68bb      	ldr	r3, [r7, #8]
 8019aa6:	681a      	ldr	r2, [r3, #0]
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	3304      	adds	r3, #4
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d01c      	beq.n	8019aec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8019ab2:	68bb      	ldr	r3, [r7, #8]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	3304      	adds	r3, #4
 8019abc:	681a      	ldr	r2, [r3, #0]
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8019ac2:	f107 0314 	add.w	r3, r7, #20
 8019ac6:	4619      	mov	r1, r3
 8019ac8:	6878      	ldr	r0, [r7, #4]
 8019aca:	f7ff ffbf 	bl	8019a4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d002      	beq.n	8019ada <netif_do_set_ipaddr+0x6a>
 8019ad4:	68bb      	ldr	r3, [r7, #8]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	e000      	b.n	8019adc <netif_do_set_ipaddr+0x6c>
 8019ada:	2300      	movs	r3, #0
 8019adc:	68fa      	ldr	r2, [r7, #12]
 8019ade:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8019ae0:	2101      	movs	r1, #1
 8019ae2:	68f8      	ldr	r0, [r7, #12]
 8019ae4:	f000 f8d2 	bl	8019c8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8019ae8:	2301      	movs	r3, #1
 8019aea:	e000      	b.n	8019aee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8019aec:	2300      	movs	r3, #0
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	3718      	adds	r7, #24
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	bf00      	nop
 8019af8:	08027388 	.word	0x08027388
 8019afc:	080274a0 	.word	0x080274a0
 8019b00:	080273d8 	.word	0x080273d8

08019b04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8019b04:	b480      	push	{r7}
 8019b06:	b085      	sub	sp, #20
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	60f8      	str	r0, [r7, #12]
 8019b0c:	60b9      	str	r1, [r7, #8]
 8019b0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8019b10:	68bb      	ldr	r3, [r7, #8]
 8019b12:	681a      	ldr	r2, [r3, #0]
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	3308      	adds	r3, #8
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	429a      	cmp	r2, r3
 8019b1c:	d00a      	beq.n	8019b34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d002      	beq.n	8019b2a <netif_do_set_netmask+0x26>
 8019b24:	68bb      	ldr	r3, [r7, #8]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	e000      	b.n	8019b2c <netif_do_set_netmask+0x28>
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	68fa      	ldr	r2, [r7, #12]
 8019b2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8019b30:	2301      	movs	r3, #1
 8019b32:	e000      	b.n	8019b36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8019b34:	2300      	movs	r3, #0
}
 8019b36:	4618      	mov	r0, r3
 8019b38:	3714      	adds	r7, #20
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b40:	4770      	bx	lr

08019b42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8019b42:	b480      	push	{r7}
 8019b44:	b085      	sub	sp, #20
 8019b46:	af00      	add	r7, sp, #0
 8019b48:	60f8      	str	r0, [r7, #12]
 8019b4a:	60b9      	str	r1, [r7, #8]
 8019b4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	681a      	ldr	r2, [r3, #0]
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	330c      	adds	r3, #12
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	429a      	cmp	r2, r3
 8019b5a:	d00a      	beq.n	8019b72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8019b5c:	68bb      	ldr	r3, [r7, #8]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d002      	beq.n	8019b68 <netif_do_set_gw+0x26>
 8019b62:	68bb      	ldr	r3, [r7, #8]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	e000      	b.n	8019b6a <netif_do_set_gw+0x28>
 8019b68:	2300      	movs	r3, #0
 8019b6a:	68fa      	ldr	r2, [r7, #12]
 8019b6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8019b6e:	2301      	movs	r3, #1
 8019b70:	e000      	b.n	8019b74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8019b72:	2300      	movs	r3, #0
}
 8019b74:	4618      	mov	r0, r3
 8019b76:	3714      	adds	r7, #20
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7e:	4770      	bx	lr

08019b80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b088      	sub	sp, #32
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	60f8      	str	r0, [r7, #12]
 8019b88:	60b9      	str	r1, [r7, #8]
 8019b8a:	607a      	str	r2, [r7, #4]
 8019b8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8019b8e:	2300      	movs	r3, #0
 8019b90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8019b92:	2300      	movs	r3, #0
 8019b94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d101      	bne.n	8019ba0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8019b9c:	4b1c      	ldr	r3, [pc, #112]	; (8019c10 <netif_set_addr+0x90>)
 8019b9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d101      	bne.n	8019baa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8019ba6:	4b1a      	ldr	r3, [pc, #104]	; (8019c10 <netif_set_addr+0x90>)
 8019ba8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8019baa:	683b      	ldr	r3, [r7, #0]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d101      	bne.n	8019bb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8019bb0:	4b17      	ldr	r3, [pc, #92]	; (8019c10 <netif_set_addr+0x90>)
 8019bb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d003      	beq.n	8019bc2 <netif_set_addr+0x42>
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d101      	bne.n	8019bc6 <netif_set_addr+0x46>
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	e000      	b.n	8019bc8 <netif_set_addr+0x48>
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8019bca:	697b      	ldr	r3, [r7, #20]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d006      	beq.n	8019bde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019bd0:	f107 0310 	add.w	r3, r7, #16
 8019bd4:	461a      	mov	r2, r3
 8019bd6:	68b9      	ldr	r1, [r7, #8]
 8019bd8:	68f8      	ldr	r0, [r7, #12]
 8019bda:	f7ff ff49 	bl	8019a70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8019bde:	69fa      	ldr	r2, [r7, #28]
 8019be0:	6879      	ldr	r1, [r7, #4]
 8019be2:	68f8      	ldr	r0, [r7, #12]
 8019be4:	f7ff ff8e 	bl	8019b04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8019be8:	69ba      	ldr	r2, [r7, #24]
 8019bea:	6839      	ldr	r1, [r7, #0]
 8019bec:	68f8      	ldr	r0, [r7, #12]
 8019bee:	f7ff ffa8 	bl	8019b42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8019bf2:	697b      	ldr	r3, [r7, #20]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d106      	bne.n	8019c06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019bf8:	f107 0310 	add.w	r3, r7, #16
 8019bfc:	461a      	mov	r2, r3
 8019bfe:	68b9      	ldr	r1, [r7, #8]
 8019c00:	68f8      	ldr	r0, [r7, #12]
 8019c02:	f7ff ff35 	bl	8019a70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8019c06:	bf00      	nop
 8019c08:	3720      	adds	r7, #32
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bd80      	pop	{r7, pc}
 8019c0e:	bf00      	nop
 8019c10:	0802a5ac 	.word	0x0802a5ac

08019c14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8019c14:	b480      	push	{r7}
 8019c16:	b083      	sub	sp, #12
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8019c1c:	4a04      	ldr	r2, [pc, #16]	; (8019c30 <netif_set_default+0x1c>)
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8019c22:	bf00      	nop
 8019c24:	370c      	adds	r7, #12
 8019c26:	46bd      	mov	sp, r7
 8019c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c2c:	4770      	bx	lr
 8019c2e:	bf00      	nop
 8019c30:	2400cff4 	.word	0x2400cff4

08019c34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b082      	sub	sp, #8
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d107      	bne.n	8019c52 <netif_set_up+0x1e>
 8019c42:	4b0f      	ldr	r3, [pc, #60]	; (8019c80 <netif_set_up+0x4c>)
 8019c44:	f44f 7254 	mov.w	r2, #848	; 0x350
 8019c48:	490e      	ldr	r1, [pc, #56]	; (8019c84 <netif_set_up+0x50>)
 8019c4a:	480f      	ldr	r0, [pc, #60]	; (8019c88 <netif_set_up+0x54>)
 8019c4c:	f00c f98a 	bl	8025f64 <iprintf>
 8019c50:	e013      	b.n	8019c7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019c58:	f003 0301 	and.w	r3, r3, #1
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d10c      	bne.n	8019c7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019c66:	f043 0301 	orr.w	r3, r3, #1
 8019c6a:	b2da      	uxtb	r2, r3
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019c72:	2103      	movs	r1, #3
 8019c74:	6878      	ldr	r0, [r7, #4]
 8019c76:	f000 f809 	bl	8019c8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8019c7a:	3708      	adds	r7, #8
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}
 8019c80:	08027388 	.word	0x08027388
 8019c84:	08027510 	.word	0x08027510
 8019c88:	080273d8 	.word	0x080273d8

08019c8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b082      	sub	sp, #8
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	460b      	mov	r3, r1
 8019c96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d106      	bne.n	8019cac <netif_issue_reports+0x20>
 8019c9e:	4b18      	ldr	r3, [pc, #96]	; (8019d00 <netif_issue_reports+0x74>)
 8019ca0:	f240 326d 	movw	r2, #877	; 0x36d
 8019ca4:	4917      	ldr	r1, [pc, #92]	; (8019d04 <netif_issue_reports+0x78>)
 8019ca6:	4818      	ldr	r0, [pc, #96]	; (8019d08 <netif_issue_reports+0x7c>)
 8019ca8:	f00c f95c 	bl	8025f64 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019cb2:	f003 0304 	and.w	r3, r3, #4
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d01e      	beq.n	8019cf8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019cc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d017      	beq.n	8019cf8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019cc8:	78fb      	ldrb	r3, [r7, #3]
 8019cca:	f003 0301 	and.w	r3, r3, #1
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d013      	beq.n	8019cfa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	3304      	adds	r3, #4
 8019cd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d00e      	beq.n	8019cfa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019ce2:	f003 0308 	and.w	r3, r3, #8
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d007      	beq.n	8019cfa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	3304      	adds	r3, #4
 8019cee:	4619      	mov	r1, r3
 8019cf0:	6878      	ldr	r0, [r7, #4]
 8019cf2:	f009 fc61 	bl	80235b8 <etharp_request>
 8019cf6:	e000      	b.n	8019cfa <netif_issue_reports+0x6e>
    return;
 8019cf8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8019cfa:	3708      	adds	r7, #8
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	bd80      	pop	{r7, pc}
 8019d00:	08027388 	.word	0x08027388
 8019d04:	0802752c 	.word	0x0802752c
 8019d08:	080273d8 	.word	0x080273d8

08019d0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b082      	sub	sp, #8
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d107      	bne.n	8019d2a <netif_set_down+0x1e>
 8019d1a:	4b12      	ldr	r3, [pc, #72]	; (8019d64 <netif_set_down+0x58>)
 8019d1c:	f240 329b 	movw	r2, #923	; 0x39b
 8019d20:	4911      	ldr	r1, [pc, #68]	; (8019d68 <netif_set_down+0x5c>)
 8019d22:	4812      	ldr	r0, [pc, #72]	; (8019d6c <netif_set_down+0x60>)
 8019d24:	f00c f91e 	bl	8025f64 <iprintf>
 8019d28:	e019      	b.n	8019d5e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d30:	f003 0301 	and.w	r3, r3, #1
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d012      	beq.n	8019d5e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d3e:	f023 0301 	bic.w	r3, r3, #1
 8019d42:	b2da      	uxtb	r2, r3
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d50:	f003 0308 	and.w	r3, r3, #8
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d002      	beq.n	8019d5e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f008 ffe7 	bl	8022d2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8019d5e:	3708      	adds	r7, #8
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bd80      	pop	{r7, pc}
 8019d64:	08027388 	.word	0x08027388
 8019d68:	08027550 	.word	0x08027550
 8019d6c:	080273d8 	.word	0x080273d8

08019d70 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b082      	sub	sp, #8
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d107      	bne.n	8019d8e <netif_set_link_up+0x1e>
 8019d7e:	4b15      	ldr	r3, [pc, #84]	; (8019dd4 <netif_set_link_up+0x64>)
 8019d80:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8019d84:	4914      	ldr	r1, [pc, #80]	; (8019dd8 <netif_set_link_up+0x68>)
 8019d86:	4815      	ldr	r0, [pc, #84]	; (8019ddc <netif_set_link_up+0x6c>)
 8019d88:	f00c f8ec 	bl	8025f64 <iprintf>
 8019d8c:	e01e      	b.n	8019dcc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d94:	f003 0304 	and.w	r3, r3, #4
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d117      	bne.n	8019dcc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019da2:	f043 0304 	orr.w	r3, r3, #4
 8019da6:	b2da      	uxtb	r2, r3
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8019dae:	6878      	ldr	r0, [r7, #4]
 8019db0:	f007 fa2c 	bl	802120c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019db4:	2103      	movs	r1, #3
 8019db6:	6878      	ldr	r0, [r7, #4]
 8019db8:	f7ff ff68 	bl	8019c8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	69db      	ldr	r3, [r3, #28]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d003      	beq.n	8019dcc <netif_set_link_up+0x5c>
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	69db      	ldr	r3, [r3, #28]
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019dcc:	3708      	adds	r7, #8
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	bd80      	pop	{r7, pc}
 8019dd2:	bf00      	nop
 8019dd4:	08027388 	.word	0x08027388
 8019dd8:	08027570 	.word	0x08027570
 8019ddc:	080273d8 	.word	0x080273d8

08019de0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b082      	sub	sp, #8
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d107      	bne.n	8019dfe <netif_set_link_down+0x1e>
 8019dee:	4b11      	ldr	r3, [pc, #68]	; (8019e34 <netif_set_link_down+0x54>)
 8019df0:	f240 4206 	movw	r2, #1030	; 0x406
 8019df4:	4910      	ldr	r1, [pc, #64]	; (8019e38 <netif_set_link_down+0x58>)
 8019df6:	4811      	ldr	r0, [pc, #68]	; (8019e3c <netif_set_link_down+0x5c>)
 8019df8:	f00c f8b4 	bl	8025f64 <iprintf>
 8019dfc:	e017      	b.n	8019e2e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019e04:	f003 0304 	and.w	r3, r3, #4
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d010      	beq.n	8019e2e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019e12:	f023 0304 	bic.w	r3, r3, #4
 8019e16:	b2da      	uxtb	r2, r3
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	69db      	ldr	r3, [r3, #28]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d003      	beq.n	8019e2e <netif_set_link_down+0x4e>
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	69db      	ldr	r3, [r3, #28]
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019e2e:	3708      	adds	r7, #8
 8019e30:	46bd      	mov	sp, r7
 8019e32:	bd80      	pop	{r7, pc}
 8019e34:	08027388 	.word	0x08027388
 8019e38:	08027594 	.word	0x08027594
 8019e3c:	080273d8 	.word	0x080273d8

08019e40 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8019e40:	b480      	push	{r7}
 8019e42:	b083      	sub	sp, #12
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
 8019e48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d002      	beq.n	8019e56 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	683a      	ldr	r2, [r7, #0]
 8019e54:	61da      	str	r2, [r3, #28]
  }
}
 8019e56:	bf00      	nop
 8019e58:	370c      	adds	r7, #12
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e60:	4770      	bx	lr

08019e62 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8019e62:	b480      	push	{r7}
 8019e64:	b085      	sub	sp, #20
 8019e66:	af00      	add	r7, sp, #0
 8019e68:	60f8      	str	r0, [r7, #12]
 8019e6a:	60b9      	str	r1, [r7, #8]
 8019e6c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8019e6e:	f06f 030b 	mvn.w	r3, #11
}
 8019e72:	4618      	mov	r0, r3
 8019e74:	3714      	adds	r7, #20
 8019e76:	46bd      	mov	sp, r7
 8019e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7c:	4770      	bx	lr
	...

08019e80 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8019e80:	b480      	push	{r7}
 8019e82:	b085      	sub	sp, #20
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	4603      	mov	r3, r0
 8019e88:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8019e8a:	79fb      	ldrb	r3, [r7, #7]
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d013      	beq.n	8019eb8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8019e90:	4b0d      	ldr	r3, [pc, #52]	; (8019ec8 <netif_get_by_index+0x48>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	60fb      	str	r3, [r7, #12]
 8019e96:	e00c      	b.n	8019eb2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019e9e:	3301      	adds	r3, #1
 8019ea0:	b2db      	uxtb	r3, r3
 8019ea2:	79fa      	ldrb	r2, [r7, #7]
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	d101      	bne.n	8019eac <netif_get_by_index+0x2c>
        return netif; /* found! */
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	e006      	b.n	8019eba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	60fb      	str	r3, [r7, #12]
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d1ef      	bne.n	8019e98 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8019eb8:	2300      	movs	r3, #0
}
 8019eba:	4618      	mov	r0, r3
 8019ebc:	3714      	adds	r7, #20
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec4:	4770      	bx	lr
 8019ec6:	bf00      	nop
 8019ec8:	2400cff0 	.word	0x2400cff0

08019ecc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b082      	sub	sp, #8
 8019ed0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8019ed2:	f00b f815 	bl	8024f00 <sys_arch_protect>
 8019ed6:	6038      	str	r0, [r7, #0]
 8019ed8:	4b0d      	ldr	r3, [pc, #52]	; (8019f10 <pbuf_free_ooseq+0x44>)
 8019eda:	2200      	movs	r2, #0
 8019edc:	701a      	strb	r2, [r3, #0]
 8019ede:	6838      	ldr	r0, [r7, #0]
 8019ee0:	f00b f81c 	bl	8024f1c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019ee4:	4b0b      	ldr	r3, [pc, #44]	; (8019f14 <pbuf_free_ooseq+0x48>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	607b      	str	r3, [r7, #4]
 8019eea:	e00a      	b.n	8019f02 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d003      	beq.n	8019efc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8019ef4:	6878      	ldr	r0, [r7, #4]
 8019ef6:	f002 f981 	bl	801c1fc <tcp_free_ooseq>
      return;
 8019efa:	e005      	b.n	8019f08 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	68db      	ldr	r3, [r3, #12]
 8019f00:	607b      	str	r3, [r7, #4]
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d1f1      	bne.n	8019eec <pbuf_free_ooseq+0x20>
    }
  }
}
 8019f08:	3708      	adds	r7, #8
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bd80      	pop	{r7, pc}
 8019f0e:	bf00      	nop
 8019f10:	2400cff9 	.word	0x2400cff9
 8019f14:	2400d008 	.word	0x2400d008

08019f18 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b082      	sub	sp, #8
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8019f20:	f7ff ffd4 	bl	8019ecc <pbuf_free_ooseq>
}
 8019f24:	bf00      	nop
 8019f26:	3708      	adds	r7, #8
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bd80      	pop	{r7, pc}

08019f2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b082      	sub	sp, #8
 8019f30:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8019f32:	f00a ffe5 	bl	8024f00 <sys_arch_protect>
 8019f36:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019f38:	4b0f      	ldr	r3, [pc, #60]	; (8019f78 <pbuf_pool_is_empty+0x4c>)
 8019f3a:	781b      	ldrb	r3, [r3, #0]
 8019f3c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8019f3e:	4b0e      	ldr	r3, [pc, #56]	; (8019f78 <pbuf_pool_is_empty+0x4c>)
 8019f40:	2201      	movs	r2, #1
 8019f42:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8019f44:	6878      	ldr	r0, [r7, #4]
 8019f46:	f00a ffe9 	bl	8024f1c <sys_arch_unprotect>

  if (!queued) {
 8019f4a:	78fb      	ldrb	r3, [r7, #3]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d10f      	bne.n	8019f70 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019f50:	2100      	movs	r1, #0
 8019f52:	480a      	ldr	r0, [pc, #40]	; (8019f7c <pbuf_pool_is_empty+0x50>)
 8019f54:	f7fe fde2 	bl	8018b1c <tcpip_try_callback>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d008      	beq.n	8019f70 <pbuf_pool_is_empty+0x44>
 8019f5e:	f00a ffcf 	bl	8024f00 <sys_arch_protect>
 8019f62:	6078      	str	r0, [r7, #4]
 8019f64:	4b04      	ldr	r3, [pc, #16]	; (8019f78 <pbuf_pool_is_empty+0x4c>)
 8019f66:	2200      	movs	r2, #0
 8019f68:	701a      	strb	r2, [r3, #0]
 8019f6a:	6878      	ldr	r0, [r7, #4]
 8019f6c:	f00a ffd6 	bl	8024f1c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8019f70:	bf00      	nop
 8019f72:	3708      	adds	r7, #8
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bd80      	pop	{r7, pc}
 8019f78:	2400cff9 	.word	0x2400cff9
 8019f7c:	08019f19 	.word	0x08019f19

08019f80 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8019f80:	b480      	push	{r7}
 8019f82:	b085      	sub	sp, #20
 8019f84:	af00      	add	r7, sp, #0
 8019f86:	60f8      	str	r0, [r7, #12]
 8019f88:	60b9      	str	r1, [r7, #8]
 8019f8a:	4611      	mov	r1, r2
 8019f8c:	461a      	mov	r2, r3
 8019f8e:	460b      	mov	r3, r1
 8019f90:	80fb      	strh	r3, [r7, #6]
 8019f92:	4613      	mov	r3, r2
 8019f94:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	2200      	movs	r2, #0
 8019f9a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	68ba      	ldr	r2, [r7, #8]
 8019fa0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	88fa      	ldrh	r2, [r7, #6]
 8019fa6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	88ba      	ldrh	r2, [r7, #4]
 8019fac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8019fae:	8b3b      	ldrh	r3, [r7, #24]
 8019fb0:	b2da      	uxtb	r2, r3
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	7f3a      	ldrb	r2, [r7, #28]
 8019fba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	2201      	movs	r2, #1
 8019fc0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	2200      	movs	r2, #0
 8019fc6:	73da      	strb	r2, [r3, #15]
}
 8019fc8:	bf00      	nop
 8019fca:	3714      	adds	r7, #20
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd2:	4770      	bx	lr

08019fd4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b08c      	sub	sp, #48	; 0x30
 8019fd8:	af02      	add	r7, sp, #8
 8019fda:	4603      	mov	r3, r0
 8019fdc:	71fb      	strb	r3, [r7, #7]
 8019fde:	460b      	mov	r3, r1
 8019fe0:	80bb      	strh	r3, [r7, #4]
 8019fe2:	4613      	mov	r3, r2
 8019fe4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8019fe6:	79fb      	ldrb	r3, [r7, #7]
 8019fe8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8019fea:	887b      	ldrh	r3, [r7, #2]
 8019fec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8019ff0:	d07f      	beq.n	801a0f2 <pbuf_alloc+0x11e>
 8019ff2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8019ff6:	f300 80c8 	bgt.w	801a18a <pbuf_alloc+0x1b6>
 8019ffa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8019ffe:	d010      	beq.n	801a022 <pbuf_alloc+0x4e>
 801a000:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801a004:	f300 80c1 	bgt.w	801a18a <pbuf_alloc+0x1b6>
 801a008:	2b01      	cmp	r3, #1
 801a00a:	d002      	beq.n	801a012 <pbuf_alloc+0x3e>
 801a00c:	2b41      	cmp	r3, #65	; 0x41
 801a00e:	f040 80bc 	bne.w	801a18a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801a012:	887a      	ldrh	r2, [r7, #2]
 801a014:	88bb      	ldrh	r3, [r7, #4]
 801a016:	4619      	mov	r1, r3
 801a018:	2000      	movs	r0, #0
 801a01a:	f000 f8d1 	bl	801a1c0 <pbuf_alloc_reference>
 801a01e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801a020:	e0bd      	b.n	801a19e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801a022:	2300      	movs	r3, #0
 801a024:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801a026:	2300      	movs	r3, #0
 801a028:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801a02a:	88bb      	ldrh	r3, [r7, #4]
 801a02c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a02e:	200c      	movs	r0, #12
 801a030:	f7ff fb8e 	bl	8019750 <memp_malloc>
 801a034:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801a036:	693b      	ldr	r3, [r7, #16]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d109      	bne.n	801a050 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801a03c:	f7ff ff76 	bl	8019f2c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a042:	2b00      	cmp	r3, #0
 801a044:	d002      	beq.n	801a04c <pbuf_alloc+0x78>
            pbuf_free(p);
 801a046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a048:	f000 faa8 	bl	801a59c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801a04c:	2300      	movs	r3, #0
 801a04e:	e0a7      	b.n	801a1a0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a052:	3303      	adds	r3, #3
 801a054:	b29b      	uxth	r3, r3
 801a056:	f023 0303 	bic.w	r3, r3, #3
 801a05a:	b29b      	uxth	r3, r3
 801a05c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801a060:	b29b      	uxth	r3, r3
 801a062:	8b7a      	ldrh	r2, [r7, #26]
 801a064:	4293      	cmp	r3, r2
 801a066:	bf28      	it	cs
 801a068:	4613      	movcs	r3, r2
 801a06a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a06c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a06e:	3310      	adds	r3, #16
 801a070:	693a      	ldr	r2, [r7, #16]
 801a072:	4413      	add	r3, r2
 801a074:	3303      	adds	r3, #3
 801a076:	f023 0303 	bic.w	r3, r3, #3
 801a07a:	4618      	mov	r0, r3
 801a07c:	89f9      	ldrh	r1, [r7, #14]
 801a07e:	8b7a      	ldrh	r2, [r7, #26]
 801a080:	2300      	movs	r3, #0
 801a082:	9301      	str	r3, [sp, #4]
 801a084:	887b      	ldrh	r3, [r7, #2]
 801a086:	9300      	str	r3, [sp, #0]
 801a088:	460b      	mov	r3, r1
 801a08a:	4601      	mov	r1, r0
 801a08c:	6938      	ldr	r0, [r7, #16]
 801a08e:	f7ff ff77 	bl	8019f80 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801a092:	693b      	ldr	r3, [r7, #16]
 801a094:	685b      	ldr	r3, [r3, #4]
 801a096:	f003 0303 	and.w	r3, r3, #3
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d006      	beq.n	801a0ac <pbuf_alloc+0xd8>
 801a09e:	4b42      	ldr	r3, [pc, #264]	; (801a1a8 <pbuf_alloc+0x1d4>)
 801a0a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a0a4:	4941      	ldr	r1, [pc, #260]	; (801a1ac <pbuf_alloc+0x1d8>)
 801a0a6:	4842      	ldr	r0, [pc, #264]	; (801a1b0 <pbuf_alloc+0x1dc>)
 801a0a8:	f00b ff5c 	bl	8025f64 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801a0ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a0ae:	3303      	adds	r3, #3
 801a0b0:	f023 0303 	bic.w	r3, r3, #3
 801a0b4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801a0b8:	d106      	bne.n	801a0c8 <pbuf_alloc+0xf4>
 801a0ba:	4b3b      	ldr	r3, [pc, #236]	; (801a1a8 <pbuf_alloc+0x1d4>)
 801a0bc:	f44f 7281 	mov.w	r2, #258	; 0x102
 801a0c0:	493c      	ldr	r1, [pc, #240]	; (801a1b4 <pbuf_alloc+0x1e0>)
 801a0c2:	483b      	ldr	r0, [pc, #236]	; (801a1b0 <pbuf_alloc+0x1dc>)
 801a0c4:	f00b ff4e 	bl	8025f64 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d102      	bne.n	801a0d4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801a0ce:	693b      	ldr	r3, [r7, #16]
 801a0d0:	627b      	str	r3, [r7, #36]	; 0x24
 801a0d2:	e002      	b.n	801a0da <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801a0d4:	69fb      	ldr	r3, [r7, #28]
 801a0d6:	693a      	ldr	r2, [r7, #16]
 801a0d8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801a0da:	693b      	ldr	r3, [r7, #16]
 801a0dc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801a0de:	8b7a      	ldrh	r2, [r7, #26]
 801a0e0:	89fb      	ldrh	r3, [r7, #14]
 801a0e2:	1ad3      	subs	r3, r2, r3
 801a0e4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801a0ea:	8b7b      	ldrh	r3, [r7, #26]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d19e      	bne.n	801a02e <pbuf_alloc+0x5a>
      break;
 801a0f0:	e055      	b.n	801a19e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801a0f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a0f4:	3303      	adds	r3, #3
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	f023 0303 	bic.w	r3, r3, #3
 801a0fc:	b29a      	uxth	r2, r3
 801a0fe:	88bb      	ldrh	r3, [r7, #4]
 801a100:	3303      	adds	r3, #3
 801a102:	b29b      	uxth	r3, r3
 801a104:	f023 0303 	bic.w	r3, r3, #3
 801a108:	b29b      	uxth	r3, r3
 801a10a:	4413      	add	r3, r2
 801a10c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a10e:	8b3b      	ldrh	r3, [r7, #24]
 801a110:	3310      	adds	r3, #16
 801a112:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a114:	8b3a      	ldrh	r2, [r7, #24]
 801a116:	88bb      	ldrh	r3, [r7, #4]
 801a118:	3303      	adds	r3, #3
 801a11a:	f023 0303 	bic.w	r3, r3, #3
 801a11e:	429a      	cmp	r2, r3
 801a120:	d306      	bcc.n	801a130 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801a122:	8afa      	ldrh	r2, [r7, #22]
 801a124:	88bb      	ldrh	r3, [r7, #4]
 801a126:	3303      	adds	r3, #3
 801a128:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a12c:	429a      	cmp	r2, r3
 801a12e:	d201      	bcs.n	801a134 <pbuf_alloc+0x160>
        return NULL;
 801a130:	2300      	movs	r3, #0
 801a132:	e035      	b.n	801a1a0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801a134:	8afb      	ldrh	r3, [r7, #22]
 801a136:	4618      	mov	r0, r3
 801a138:	f7ff f966 	bl	8019408 <mem_malloc>
 801a13c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a140:	2b00      	cmp	r3, #0
 801a142:	d101      	bne.n	801a148 <pbuf_alloc+0x174>
        return NULL;
 801a144:	2300      	movs	r3, #0
 801a146:	e02b      	b.n	801a1a0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a14a:	3310      	adds	r3, #16
 801a14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a14e:	4413      	add	r3, r2
 801a150:	3303      	adds	r3, #3
 801a152:	f023 0303 	bic.w	r3, r3, #3
 801a156:	4618      	mov	r0, r3
 801a158:	88b9      	ldrh	r1, [r7, #4]
 801a15a:	88ba      	ldrh	r2, [r7, #4]
 801a15c:	2300      	movs	r3, #0
 801a15e:	9301      	str	r3, [sp, #4]
 801a160:	887b      	ldrh	r3, [r7, #2]
 801a162:	9300      	str	r3, [sp, #0]
 801a164:	460b      	mov	r3, r1
 801a166:	4601      	mov	r1, r0
 801a168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a16a:	f7ff ff09 	bl	8019f80 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a170:	685b      	ldr	r3, [r3, #4]
 801a172:	f003 0303 	and.w	r3, r3, #3
 801a176:	2b00      	cmp	r3, #0
 801a178:	d010      	beq.n	801a19c <pbuf_alloc+0x1c8>
 801a17a:	4b0b      	ldr	r3, [pc, #44]	; (801a1a8 <pbuf_alloc+0x1d4>)
 801a17c:	f44f 7291 	mov.w	r2, #290	; 0x122
 801a180:	490d      	ldr	r1, [pc, #52]	; (801a1b8 <pbuf_alloc+0x1e4>)
 801a182:	480b      	ldr	r0, [pc, #44]	; (801a1b0 <pbuf_alloc+0x1dc>)
 801a184:	f00b feee 	bl	8025f64 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801a188:	e008      	b.n	801a19c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a18a:	4b07      	ldr	r3, [pc, #28]	; (801a1a8 <pbuf_alloc+0x1d4>)
 801a18c:	f240 1227 	movw	r2, #295	; 0x127
 801a190:	490a      	ldr	r1, [pc, #40]	; (801a1bc <pbuf_alloc+0x1e8>)
 801a192:	4807      	ldr	r0, [pc, #28]	; (801a1b0 <pbuf_alloc+0x1dc>)
 801a194:	f00b fee6 	bl	8025f64 <iprintf>
      return NULL;
 801a198:	2300      	movs	r3, #0
 801a19a:	e001      	b.n	801a1a0 <pbuf_alloc+0x1cc>
      break;
 801a19c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	3728      	adds	r7, #40	; 0x28
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	080275b8 	.word	0x080275b8
 801a1ac:	080275e8 	.word	0x080275e8
 801a1b0:	08027618 	.word	0x08027618
 801a1b4:	08027640 	.word	0x08027640
 801a1b8:	08027674 	.word	0x08027674
 801a1bc:	080276a0 	.word	0x080276a0

0801a1c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b086      	sub	sp, #24
 801a1c4:	af02      	add	r7, sp, #8
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	460b      	mov	r3, r1
 801a1ca:	807b      	strh	r3, [r7, #2]
 801a1cc:	4613      	mov	r3, r2
 801a1ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a1d0:	883b      	ldrh	r3, [r7, #0]
 801a1d2:	2b41      	cmp	r3, #65	; 0x41
 801a1d4:	d009      	beq.n	801a1ea <pbuf_alloc_reference+0x2a>
 801a1d6:	883b      	ldrh	r3, [r7, #0]
 801a1d8:	2b01      	cmp	r3, #1
 801a1da:	d006      	beq.n	801a1ea <pbuf_alloc_reference+0x2a>
 801a1dc:	4b0f      	ldr	r3, [pc, #60]	; (801a21c <pbuf_alloc_reference+0x5c>)
 801a1de:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801a1e2:	490f      	ldr	r1, [pc, #60]	; (801a220 <pbuf_alloc_reference+0x60>)
 801a1e4:	480f      	ldr	r0, [pc, #60]	; (801a224 <pbuf_alloc_reference+0x64>)
 801a1e6:	f00b febd 	bl	8025f64 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801a1ea:	200b      	movs	r0, #11
 801a1ec:	f7ff fab0 	bl	8019750 <memp_malloc>
 801a1f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d101      	bne.n	801a1fc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	e00b      	b.n	801a214 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801a1fc:	8879      	ldrh	r1, [r7, #2]
 801a1fe:	887a      	ldrh	r2, [r7, #2]
 801a200:	2300      	movs	r3, #0
 801a202:	9301      	str	r3, [sp, #4]
 801a204:	883b      	ldrh	r3, [r7, #0]
 801a206:	9300      	str	r3, [sp, #0]
 801a208:	460b      	mov	r3, r1
 801a20a:	6879      	ldr	r1, [r7, #4]
 801a20c:	68f8      	ldr	r0, [r7, #12]
 801a20e:	f7ff feb7 	bl	8019f80 <pbuf_init_alloced_pbuf>
  return p;
 801a212:	68fb      	ldr	r3, [r7, #12]
}
 801a214:	4618      	mov	r0, r3
 801a216:	3710      	adds	r7, #16
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	080275b8 	.word	0x080275b8
 801a220:	080276bc 	.word	0x080276bc
 801a224:	08027618 	.word	0x08027618

0801a228 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	b088      	sub	sp, #32
 801a22c:	af02      	add	r7, sp, #8
 801a22e:	607b      	str	r3, [r7, #4]
 801a230:	4603      	mov	r3, r0
 801a232:	73fb      	strb	r3, [r7, #15]
 801a234:	460b      	mov	r3, r1
 801a236:	81bb      	strh	r3, [r7, #12]
 801a238:	4613      	mov	r3, r2
 801a23a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801a23c:	7bfb      	ldrb	r3, [r7, #15]
 801a23e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a240:	8a7b      	ldrh	r3, [r7, #18]
 801a242:	3303      	adds	r3, #3
 801a244:	f023 0203 	bic.w	r2, r3, #3
 801a248:	89bb      	ldrh	r3, [r7, #12]
 801a24a:	441a      	add	r2, r3
 801a24c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a24e:	429a      	cmp	r2, r3
 801a250:	d901      	bls.n	801a256 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801a252:	2300      	movs	r3, #0
 801a254:	e018      	b.n	801a288 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801a256:	6a3b      	ldr	r3, [r7, #32]
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d007      	beq.n	801a26c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801a25c:	8a7b      	ldrh	r3, [r7, #18]
 801a25e:	3303      	adds	r3, #3
 801a260:	f023 0303 	bic.w	r3, r3, #3
 801a264:	6a3a      	ldr	r2, [r7, #32]
 801a266:	4413      	add	r3, r2
 801a268:	617b      	str	r3, [r7, #20]
 801a26a:	e001      	b.n	801a270 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801a26c:	2300      	movs	r3, #0
 801a26e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801a270:	6878      	ldr	r0, [r7, #4]
 801a272:	89b9      	ldrh	r1, [r7, #12]
 801a274:	89ba      	ldrh	r2, [r7, #12]
 801a276:	2302      	movs	r3, #2
 801a278:	9301      	str	r3, [sp, #4]
 801a27a:	897b      	ldrh	r3, [r7, #10]
 801a27c:	9300      	str	r3, [sp, #0]
 801a27e:	460b      	mov	r3, r1
 801a280:	6979      	ldr	r1, [r7, #20]
 801a282:	f7ff fe7d 	bl	8019f80 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801a286:	687b      	ldr	r3, [r7, #4]
}
 801a288:	4618      	mov	r0, r3
 801a28a:	3718      	adds	r7, #24
 801a28c:	46bd      	mov	sp, r7
 801a28e:	bd80      	pop	{r7, pc}

0801a290 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b084      	sub	sp, #16
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
 801a298:	460b      	mov	r3, r1
 801a29a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d106      	bne.n	801a2b0 <pbuf_realloc+0x20>
 801a2a2:	4b3a      	ldr	r3, [pc, #232]	; (801a38c <pbuf_realloc+0xfc>)
 801a2a4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801a2a8:	4939      	ldr	r1, [pc, #228]	; (801a390 <pbuf_realloc+0x100>)
 801a2aa:	483a      	ldr	r0, [pc, #232]	; (801a394 <pbuf_realloc+0x104>)
 801a2ac:	f00b fe5a 	bl	8025f64 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	891b      	ldrh	r3, [r3, #8]
 801a2b4:	887a      	ldrh	r2, [r7, #2]
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d263      	bcs.n	801a382 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	891a      	ldrh	r2, [r3, #8]
 801a2be:	887b      	ldrh	r3, [r7, #2]
 801a2c0:	1ad3      	subs	r3, r2, r3
 801a2c2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801a2c4:	887b      	ldrh	r3, [r7, #2]
 801a2c6:	817b      	strh	r3, [r7, #10]
  q = p;
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801a2cc:	e018      	b.n	801a300 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	895b      	ldrh	r3, [r3, #10]
 801a2d2:	897a      	ldrh	r2, [r7, #10]
 801a2d4:	1ad3      	subs	r3, r2, r3
 801a2d6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	891a      	ldrh	r2, [r3, #8]
 801a2dc:	893b      	ldrh	r3, [r7, #8]
 801a2de:	1ad3      	subs	r3, r2, r3
 801a2e0:	b29a      	uxth	r2, r3
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d106      	bne.n	801a300 <pbuf_realloc+0x70>
 801a2f2:	4b26      	ldr	r3, [pc, #152]	; (801a38c <pbuf_realloc+0xfc>)
 801a2f4:	f240 12af 	movw	r2, #431	; 0x1af
 801a2f8:	4927      	ldr	r1, [pc, #156]	; (801a398 <pbuf_realloc+0x108>)
 801a2fa:	4826      	ldr	r0, [pc, #152]	; (801a394 <pbuf_realloc+0x104>)
 801a2fc:	f00b fe32 	bl	8025f64 <iprintf>
  while (rem_len > q->len) {
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	895b      	ldrh	r3, [r3, #10]
 801a304:	897a      	ldrh	r2, [r7, #10]
 801a306:	429a      	cmp	r2, r3
 801a308:	d8e1      	bhi.n	801a2ce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	7b1b      	ldrb	r3, [r3, #12]
 801a30e:	f003 030f 	and.w	r3, r3, #15
 801a312:	2b00      	cmp	r3, #0
 801a314:	d121      	bne.n	801a35a <pbuf_realloc+0xca>
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	895b      	ldrh	r3, [r3, #10]
 801a31a:	897a      	ldrh	r2, [r7, #10]
 801a31c:	429a      	cmp	r2, r3
 801a31e:	d01c      	beq.n	801a35a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	7b5b      	ldrb	r3, [r3, #13]
 801a324:	f003 0302 	and.w	r3, r3, #2
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d116      	bne.n	801a35a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	685a      	ldr	r2, [r3, #4]
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	1ad3      	subs	r3, r2, r3
 801a334:	b29a      	uxth	r2, r3
 801a336:	897b      	ldrh	r3, [r7, #10]
 801a338:	4413      	add	r3, r2
 801a33a:	b29b      	uxth	r3, r3
 801a33c:	4619      	mov	r1, r3
 801a33e:	68f8      	ldr	r0, [r7, #12]
 801a340:	f7fe ff58 	bl	80191f4 <mem_trim>
 801a344:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d106      	bne.n	801a35a <pbuf_realloc+0xca>
 801a34c:	4b0f      	ldr	r3, [pc, #60]	; (801a38c <pbuf_realloc+0xfc>)
 801a34e:	f240 12bd 	movw	r2, #445	; 0x1bd
 801a352:	4912      	ldr	r1, [pc, #72]	; (801a39c <pbuf_realloc+0x10c>)
 801a354:	480f      	ldr	r0, [pc, #60]	; (801a394 <pbuf_realloc+0x104>)
 801a356:	f00b fe05 	bl	8025f64 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	897a      	ldrh	r2, [r7, #10]
 801a35e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	895a      	ldrh	r2, [r3, #10]
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d004      	beq.n	801a37a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	4618      	mov	r0, r3
 801a376:	f000 f911 	bl	801a59c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	2200      	movs	r2, #0
 801a37e:	601a      	str	r2, [r3, #0]
 801a380:	e000      	b.n	801a384 <pbuf_realloc+0xf4>
    return;
 801a382:	bf00      	nop

}
 801a384:	3710      	adds	r7, #16
 801a386:	46bd      	mov	sp, r7
 801a388:	bd80      	pop	{r7, pc}
 801a38a:	bf00      	nop
 801a38c:	080275b8 	.word	0x080275b8
 801a390:	080276d0 	.word	0x080276d0
 801a394:	08027618 	.word	0x08027618
 801a398:	080276e8 	.word	0x080276e8
 801a39c:	08027700 	.word	0x08027700

0801a3a0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b086      	sub	sp, #24
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	60f8      	str	r0, [r7, #12]
 801a3a8:	60b9      	str	r1, [r7, #8]
 801a3aa:	4613      	mov	r3, r2
 801a3ac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d106      	bne.n	801a3c2 <pbuf_add_header_impl+0x22>
 801a3b4:	4b2b      	ldr	r3, [pc, #172]	; (801a464 <pbuf_add_header_impl+0xc4>)
 801a3b6:	f240 12df 	movw	r2, #479	; 0x1df
 801a3ba:	492b      	ldr	r1, [pc, #172]	; (801a468 <pbuf_add_header_impl+0xc8>)
 801a3bc:	482b      	ldr	r0, [pc, #172]	; (801a46c <pbuf_add_header_impl+0xcc>)
 801a3be:	f00b fdd1 	bl	8025f64 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d003      	beq.n	801a3d0 <pbuf_add_header_impl+0x30>
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a3ce:	d301      	bcc.n	801a3d4 <pbuf_add_header_impl+0x34>
    return 1;
 801a3d0:	2301      	movs	r3, #1
 801a3d2:	e043      	b.n	801a45c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d101      	bne.n	801a3de <pbuf_add_header_impl+0x3e>
    return 0;
 801a3da:	2300      	movs	r3, #0
 801a3dc:	e03e      	b.n	801a45c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	891a      	ldrh	r2, [r3, #8]
 801a3e6:	8a7b      	ldrh	r3, [r7, #18]
 801a3e8:	4413      	add	r3, r2
 801a3ea:	b29b      	uxth	r3, r3
 801a3ec:	8a7a      	ldrh	r2, [r7, #18]
 801a3ee:	429a      	cmp	r2, r3
 801a3f0:	d901      	bls.n	801a3f6 <pbuf_add_header_impl+0x56>
    return 1;
 801a3f2:	2301      	movs	r3, #1
 801a3f4:	e032      	b.n	801a45c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	7b1b      	ldrb	r3, [r3, #12]
 801a3fa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a3fc:	8a3b      	ldrh	r3, [r7, #16]
 801a3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a402:	2b00      	cmp	r3, #0
 801a404:	d00c      	beq.n	801a420 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	685a      	ldr	r2, [r3, #4]
 801a40a:	68bb      	ldr	r3, [r7, #8]
 801a40c:	425b      	negs	r3, r3
 801a40e:	4413      	add	r3, r2
 801a410:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	3310      	adds	r3, #16
 801a416:	697a      	ldr	r2, [r7, #20]
 801a418:	429a      	cmp	r2, r3
 801a41a:	d20d      	bcs.n	801a438 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801a41c:	2301      	movs	r3, #1
 801a41e:	e01d      	b.n	801a45c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801a420:	79fb      	ldrb	r3, [r7, #7]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d006      	beq.n	801a434 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	685a      	ldr	r2, [r3, #4]
 801a42a:	68bb      	ldr	r3, [r7, #8]
 801a42c:	425b      	negs	r3, r3
 801a42e:	4413      	add	r3, r2
 801a430:	617b      	str	r3, [r7, #20]
 801a432:	e001      	b.n	801a438 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801a434:	2301      	movs	r3, #1
 801a436:	e011      	b.n	801a45c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	697a      	ldr	r2, [r7, #20]
 801a43c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	895a      	ldrh	r2, [r3, #10]
 801a442:	8a7b      	ldrh	r3, [r7, #18]
 801a444:	4413      	add	r3, r2
 801a446:	b29a      	uxth	r2, r3
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	891a      	ldrh	r2, [r3, #8]
 801a450:	8a7b      	ldrh	r3, [r7, #18]
 801a452:	4413      	add	r3, r2
 801a454:	b29a      	uxth	r2, r3
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	811a      	strh	r2, [r3, #8]


  return 0;
 801a45a:	2300      	movs	r3, #0
}
 801a45c:	4618      	mov	r0, r3
 801a45e:	3718      	adds	r7, #24
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}
 801a464:	080275b8 	.word	0x080275b8
 801a468:	0802771c 	.word	0x0802771c
 801a46c:	08027618 	.word	0x08027618

0801a470 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801a470:	b580      	push	{r7, lr}
 801a472:	b082      	sub	sp, #8
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
 801a478:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801a47a:	2200      	movs	r2, #0
 801a47c:	6839      	ldr	r1, [r7, #0]
 801a47e:	6878      	ldr	r0, [r7, #4]
 801a480:	f7ff ff8e 	bl	801a3a0 <pbuf_add_header_impl>
 801a484:	4603      	mov	r3, r0
}
 801a486:	4618      	mov	r0, r3
 801a488:	3708      	adds	r7, #8
 801a48a:	46bd      	mov	sp, r7
 801a48c:	bd80      	pop	{r7, pc}
	...

0801a490 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801a490:	b580      	push	{r7, lr}
 801a492:	b084      	sub	sp, #16
 801a494:	af00      	add	r7, sp, #0
 801a496:	6078      	str	r0, [r7, #4]
 801a498:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d106      	bne.n	801a4ae <pbuf_remove_header+0x1e>
 801a4a0:	4b20      	ldr	r3, [pc, #128]	; (801a524 <pbuf_remove_header+0x94>)
 801a4a2:	f240 224b 	movw	r2, #587	; 0x24b
 801a4a6:	4920      	ldr	r1, [pc, #128]	; (801a528 <pbuf_remove_header+0x98>)
 801a4a8:	4820      	ldr	r0, [pc, #128]	; (801a52c <pbuf_remove_header+0x9c>)
 801a4aa:	f00b fd5b 	bl	8025f64 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d003      	beq.n	801a4bc <pbuf_remove_header+0x2c>
 801a4b4:	683b      	ldr	r3, [r7, #0]
 801a4b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4ba:	d301      	bcc.n	801a4c0 <pbuf_remove_header+0x30>
    return 1;
 801a4bc:	2301      	movs	r3, #1
 801a4be:	e02c      	b.n	801a51a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801a4c0:	683b      	ldr	r3, [r7, #0]
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d101      	bne.n	801a4ca <pbuf_remove_header+0x3a>
    return 0;
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	e027      	b.n	801a51a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801a4ca:	683b      	ldr	r3, [r7, #0]
 801a4cc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	895b      	ldrh	r3, [r3, #10]
 801a4d2:	89fa      	ldrh	r2, [r7, #14]
 801a4d4:	429a      	cmp	r2, r3
 801a4d6:	d908      	bls.n	801a4ea <pbuf_remove_header+0x5a>
 801a4d8:	4b12      	ldr	r3, [pc, #72]	; (801a524 <pbuf_remove_header+0x94>)
 801a4da:	f240 2255 	movw	r2, #597	; 0x255
 801a4de:	4914      	ldr	r1, [pc, #80]	; (801a530 <pbuf_remove_header+0xa0>)
 801a4e0:	4812      	ldr	r0, [pc, #72]	; (801a52c <pbuf_remove_header+0x9c>)
 801a4e2:	f00b fd3f 	bl	8025f64 <iprintf>
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	e017      	b.n	801a51a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	685b      	ldr	r3, [r3, #4]
 801a4ee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	685a      	ldr	r2, [r3, #4]
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	441a      	add	r2, r3
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	895a      	ldrh	r2, [r3, #10]
 801a500:	89fb      	ldrh	r3, [r7, #14]
 801a502:	1ad3      	subs	r3, r2, r3
 801a504:	b29a      	uxth	r2, r3
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	891a      	ldrh	r2, [r3, #8]
 801a50e:	89fb      	ldrh	r3, [r7, #14]
 801a510:	1ad3      	subs	r3, r2, r3
 801a512:	b29a      	uxth	r2, r3
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801a518:	2300      	movs	r3, #0
}
 801a51a:	4618      	mov	r0, r3
 801a51c:	3710      	adds	r7, #16
 801a51e:	46bd      	mov	sp, r7
 801a520:	bd80      	pop	{r7, pc}
 801a522:	bf00      	nop
 801a524:	080275b8 	.word	0x080275b8
 801a528:	0802771c 	.word	0x0802771c
 801a52c:	08027618 	.word	0x08027618
 801a530:	08027728 	.word	0x08027728

0801a534 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b082      	sub	sp, #8
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	460b      	mov	r3, r1
 801a53e:	807b      	strh	r3, [r7, #2]
 801a540:	4613      	mov	r3, r2
 801a542:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801a544:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	da08      	bge.n	801a55e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801a54c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a550:	425b      	negs	r3, r3
 801a552:	4619      	mov	r1, r3
 801a554:	6878      	ldr	r0, [r7, #4]
 801a556:	f7ff ff9b 	bl	801a490 <pbuf_remove_header>
 801a55a:	4603      	mov	r3, r0
 801a55c:	e007      	b.n	801a56e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801a55e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a562:	787a      	ldrb	r2, [r7, #1]
 801a564:	4619      	mov	r1, r3
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	f7ff ff1a 	bl	801a3a0 <pbuf_add_header_impl>
 801a56c:	4603      	mov	r3, r0
  }
}
 801a56e:	4618      	mov	r0, r3
 801a570:	3708      	adds	r7, #8
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}

0801a576 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801a576:	b580      	push	{r7, lr}
 801a578:	b082      	sub	sp, #8
 801a57a:	af00      	add	r7, sp, #0
 801a57c:	6078      	str	r0, [r7, #4]
 801a57e:	460b      	mov	r3, r1
 801a580:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801a582:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a586:	2201      	movs	r2, #1
 801a588:	4619      	mov	r1, r3
 801a58a:	6878      	ldr	r0, [r7, #4]
 801a58c:	f7ff ffd2 	bl	801a534 <pbuf_header_impl>
 801a590:	4603      	mov	r3, r0
}
 801a592:	4618      	mov	r0, r3
 801a594:	3708      	adds	r7, #8
 801a596:	46bd      	mov	sp, r7
 801a598:	bd80      	pop	{r7, pc}
	...

0801a59c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b088      	sub	sp, #32
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d10b      	bne.n	801a5c2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d106      	bne.n	801a5be <pbuf_free+0x22>
 801a5b0:	4b3b      	ldr	r3, [pc, #236]	; (801a6a0 <pbuf_free+0x104>)
 801a5b2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801a5b6:	493b      	ldr	r1, [pc, #236]	; (801a6a4 <pbuf_free+0x108>)
 801a5b8:	483b      	ldr	r0, [pc, #236]	; (801a6a8 <pbuf_free+0x10c>)
 801a5ba:	f00b fcd3 	bl	8025f64 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	e069      	b.n	801a696 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801a5c6:	e062      	b.n	801a68e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801a5c8:	f00a fc9a 	bl	8024f00 <sys_arch_protect>
 801a5cc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	7b9b      	ldrb	r3, [r3, #14]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d106      	bne.n	801a5e4 <pbuf_free+0x48>
 801a5d6:	4b32      	ldr	r3, [pc, #200]	; (801a6a0 <pbuf_free+0x104>)
 801a5d8:	f240 22f1 	movw	r2, #753	; 0x2f1
 801a5dc:	4933      	ldr	r1, [pc, #204]	; (801a6ac <pbuf_free+0x110>)
 801a5de:	4832      	ldr	r0, [pc, #200]	; (801a6a8 <pbuf_free+0x10c>)
 801a5e0:	f00b fcc0 	bl	8025f64 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	7b9b      	ldrb	r3, [r3, #14]
 801a5e8:	3b01      	subs	r3, #1
 801a5ea:	b2da      	uxtb	r2, r3
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	739a      	strb	r2, [r3, #14]
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	7b9b      	ldrb	r3, [r3, #14]
 801a5f4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801a5f6:	69b8      	ldr	r0, [r7, #24]
 801a5f8:	f00a fc90 	bl	8024f1c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801a5fc:	7dfb      	ldrb	r3, [r7, #23]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d143      	bne.n	801a68a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	7b1b      	ldrb	r3, [r3, #12]
 801a60c:	f003 030f 	and.w	r3, r3, #15
 801a610:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	7b5b      	ldrb	r3, [r3, #13]
 801a616:	f003 0302 	and.w	r3, r3, #2
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d011      	beq.n	801a642 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	691b      	ldr	r3, [r3, #16]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d106      	bne.n	801a638 <pbuf_free+0x9c>
 801a62a:	4b1d      	ldr	r3, [pc, #116]	; (801a6a0 <pbuf_free+0x104>)
 801a62c:	f240 22ff 	movw	r2, #767	; 0x2ff
 801a630:	491f      	ldr	r1, [pc, #124]	; (801a6b0 <pbuf_free+0x114>)
 801a632:	481d      	ldr	r0, [pc, #116]	; (801a6a8 <pbuf_free+0x10c>)
 801a634:	f00b fc96 	bl	8025f64 <iprintf>
        pc->custom_free_function(p);
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	691b      	ldr	r3, [r3, #16]
 801a63c:	6878      	ldr	r0, [r7, #4]
 801a63e:	4798      	blx	r3
 801a640:	e01d      	b.n	801a67e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a642:	7bfb      	ldrb	r3, [r7, #15]
 801a644:	2b02      	cmp	r3, #2
 801a646:	d104      	bne.n	801a652 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801a648:	6879      	ldr	r1, [r7, #4]
 801a64a:	200c      	movs	r0, #12
 801a64c:	f7ff f8f6 	bl	801983c <memp_free>
 801a650:	e015      	b.n	801a67e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a652:	7bfb      	ldrb	r3, [r7, #15]
 801a654:	2b01      	cmp	r3, #1
 801a656:	d104      	bne.n	801a662 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801a658:	6879      	ldr	r1, [r7, #4]
 801a65a:	200b      	movs	r0, #11
 801a65c:	f7ff f8ee 	bl	801983c <memp_free>
 801a660:	e00d      	b.n	801a67e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a662:	7bfb      	ldrb	r3, [r7, #15]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d103      	bne.n	801a670 <pbuf_free+0xd4>
          mem_free(p);
 801a668:	6878      	ldr	r0, [r7, #4]
 801a66a:	f7fe fd33 	bl	80190d4 <mem_free>
 801a66e:	e006      	b.n	801a67e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801a670:	4b0b      	ldr	r3, [pc, #44]	; (801a6a0 <pbuf_free+0x104>)
 801a672:	f240 320f 	movw	r2, #783	; 0x30f
 801a676:	490f      	ldr	r1, [pc, #60]	; (801a6b4 <pbuf_free+0x118>)
 801a678:	480b      	ldr	r0, [pc, #44]	; (801a6a8 <pbuf_free+0x10c>)
 801a67a:	f00b fc73 	bl	8025f64 <iprintf>
        }
      }
      count++;
 801a67e:	7ffb      	ldrb	r3, [r7, #31]
 801a680:	3301      	adds	r3, #1
 801a682:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801a684:	693b      	ldr	r3, [r7, #16]
 801a686:	607b      	str	r3, [r7, #4]
 801a688:	e001      	b.n	801a68e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801a68a:	2300      	movs	r3, #0
 801a68c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d199      	bne.n	801a5c8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801a694:	7ffb      	ldrb	r3, [r7, #31]
}
 801a696:	4618      	mov	r0, r3
 801a698:	3720      	adds	r7, #32
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}
 801a69e:	bf00      	nop
 801a6a0:	080275b8 	.word	0x080275b8
 801a6a4:	0802771c 	.word	0x0802771c
 801a6a8:	08027618 	.word	0x08027618
 801a6ac:	08027748 	.word	0x08027748
 801a6b0:	08027760 	.word	0x08027760
 801a6b4:	08027784 	.word	0x08027784

0801a6b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801a6b8:	b480      	push	{r7}
 801a6ba:	b085      	sub	sp, #20
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801a6c4:	e005      	b.n	801a6d2 <pbuf_clen+0x1a>
    ++len;
 801a6c6:	89fb      	ldrh	r3, [r7, #14]
 801a6c8:	3301      	adds	r3, #1
 801a6ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d1f6      	bne.n	801a6c6 <pbuf_clen+0xe>
  }
  return len;
 801a6d8:	89fb      	ldrh	r3, [r7, #14]
}
 801a6da:	4618      	mov	r0, r3
 801a6dc:	3714      	adds	r7, #20
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e4:	4770      	bx	lr
	...

0801a6e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b084      	sub	sp, #16
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d016      	beq.n	801a724 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a6f6:	f00a fc03 	bl	8024f00 <sys_arch_protect>
 801a6fa:	60f8      	str	r0, [r7, #12]
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	7b9b      	ldrb	r3, [r3, #14]
 801a700:	3301      	adds	r3, #1
 801a702:	b2da      	uxtb	r2, r3
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	739a      	strb	r2, [r3, #14]
 801a708:	68f8      	ldr	r0, [r7, #12]
 801a70a:	f00a fc07 	bl	8024f1c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	7b9b      	ldrb	r3, [r3, #14]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d106      	bne.n	801a724 <pbuf_ref+0x3c>
 801a716:	4b05      	ldr	r3, [pc, #20]	; (801a72c <pbuf_ref+0x44>)
 801a718:	f240 3242 	movw	r2, #834	; 0x342
 801a71c:	4904      	ldr	r1, [pc, #16]	; (801a730 <pbuf_ref+0x48>)
 801a71e:	4805      	ldr	r0, [pc, #20]	; (801a734 <pbuf_ref+0x4c>)
 801a720:	f00b fc20 	bl	8025f64 <iprintf>
  }
}
 801a724:	bf00      	nop
 801a726:	3710      	adds	r7, #16
 801a728:	46bd      	mov	sp, r7
 801a72a:	bd80      	pop	{r7, pc}
 801a72c:	080275b8 	.word	0x080275b8
 801a730:	08027798 	.word	0x08027798
 801a734:	08027618 	.word	0x08027618

0801a738 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801a738:	b580      	push	{r7, lr}
 801a73a:	b084      	sub	sp, #16
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	6078      	str	r0, [r7, #4]
 801a740:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d002      	beq.n	801a74e <pbuf_cat+0x16>
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d107      	bne.n	801a75e <pbuf_cat+0x26>
 801a74e:	4b20      	ldr	r3, [pc, #128]	; (801a7d0 <pbuf_cat+0x98>)
 801a750:	f240 3259 	movw	r2, #857	; 0x359
 801a754:	491f      	ldr	r1, [pc, #124]	; (801a7d4 <pbuf_cat+0x9c>)
 801a756:	4820      	ldr	r0, [pc, #128]	; (801a7d8 <pbuf_cat+0xa0>)
 801a758:	f00b fc04 	bl	8025f64 <iprintf>
 801a75c:	e034      	b.n	801a7c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	60fb      	str	r3, [r7, #12]
 801a762:	e00a      	b.n	801a77a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	891a      	ldrh	r2, [r3, #8]
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	891b      	ldrh	r3, [r3, #8]
 801a76c:	4413      	add	r3, r2
 801a76e:	b29a      	uxth	r2, r3
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	60fb      	str	r3, [r7, #12]
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d1f0      	bne.n	801a764 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	891a      	ldrh	r2, [r3, #8]
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	895b      	ldrh	r3, [r3, #10]
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d006      	beq.n	801a79c <pbuf_cat+0x64>
 801a78e:	4b10      	ldr	r3, [pc, #64]	; (801a7d0 <pbuf_cat+0x98>)
 801a790:	f240 3262 	movw	r2, #866	; 0x362
 801a794:	4911      	ldr	r1, [pc, #68]	; (801a7dc <pbuf_cat+0xa4>)
 801a796:	4810      	ldr	r0, [pc, #64]	; (801a7d8 <pbuf_cat+0xa0>)
 801a798:	f00b fbe4 	bl	8025f64 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d006      	beq.n	801a7b2 <pbuf_cat+0x7a>
 801a7a4:	4b0a      	ldr	r3, [pc, #40]	; (801a7d0 <pbuf_cat+0x98>)
 801a7a6:	f240 3263 	movw	r2, #867	; 0x363
 801a7aa:	490d      	ldr	r1, [pc, #52]	; (801a7e0 <pbuf_cat+0xa8>)
 801a7ac:	480a      	ldr	r0, [pc, #40]	; (801a7d8 <pbuf_cat+0xa0>)
 801a7ae:	f00b fbd9 	bl	8025f64 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	891a      	ldrh	r2, [r3, #8]
 801a7b6:	683b      	ldr	r3, [r7, #0]
 801a7b8:	891b      	ldrh	r3, [r3, #8]
 801a7ba:	4413      	add	r3, r2
 801a7bc:	b29a      	uxth	r2, r3
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	683a      	ldr	r2, [r7, #0]
 801a7c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801a7c8:	3710      	adds	r7, #16
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd80      	pop	{r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	080275b8 	.word	0x080275b8
 801a7d4:	080277ac 	.word	0x080277ac
 801a7d8:	08027618 	.word	0x08027618
 801a7dc:	080277e4 	.word	0x080277e4
 801a7e0:	08027814 	.word	0x08027814

0801a7e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
 801a7ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801a7ee:	6839      	ldr	r1, [r7, #0]
 801a7f0:	6878      	ldr	r0, [r7, #4]
 801a7f2:	f7ff ffa1 	bl	801a738 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801a7f6:	6838      	ldr	r0, [r7, #0]
 801a7f8:	f7ff ff76 	bl	801a6e8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801a7fc:	bf00      	nop
 801a7fe:	3708      	adds	r7, #8
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}

0801a804 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801a804:	b580      	push	{r7, lr}
 801a806:	b086      	sub	sp, #24
 801a808:	af00      	add	r7, sp, #0
 801a80a:	6078      	str	r0, [r7, #4]
 801a80c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801a80e:	2300      	movs	r3, #0
 801a810:	617b      	str	r3, [r7, #20]
 801a812:	2300      	movs	r3, #0
 801a814:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d008      	beq.n	801a82e <pbuf_copy+0x2a>
 801a81c:	683b      	ldr	r3, [r7, #0]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d005      	beq.n	801a82e <pbuf_copy+0x2a>
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	891a      	ldrh	r2, [r3, #8]
 801a826:	683b      	ldr	r3, [r7, #0]
 801a828:	891b      	ldrh	r3, [r3, #8]
 801a82a:	429a      	cmp	r2, r3
 801a82c:	d209      	bcs.n	801a842 <pbuf_copy+0x3e>
 801a82e:	4b57      	ldr	r3, [pc, #348]	; (801a98c <pbuf_copy+0x188>)
 801a830:	f240 32c9 	movw	r2, #969	; 0x3c9
 801a834:	4956      	ldr	r1, [pc, #344]	; (801a990 <pbuf_copy+0x18c>)
 801a836:	4857      	ldr	r0, [pc, #348]	; (801a994 <pbuf_copy+0x190>)
 801a838:	f00b fb94 	bl	8025f64 <iprintf>
 801a83c:	f06f 030f 	mvn.w	r3, #15
 801a840:	e09f      	b.n	801a982 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	895b      	ldrh	r3, [r3, #10]
 801a846:	461a      	mov	r2, r3
 801a848:	697b      	ldr	r3, [r7, #20]
 801a84a:	1ad2      	subs	r2, r2, r3
 801a84c:	683b      	ldr	r3, [r7, #0]
 801a84e:	895b      	ldrh	r3, [r3, #10]
 801a850:	4619      	mov	r1, r3
 801a852:	693b      	ldr	r3, [r7, #16]
 801a854:	1acb      	subs	r3, r1, r3
 801a856:	429a      	cmp	r2, r3
 801a858:	d306      	bcc.n	801a868 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801a85a:	683b      	ldr	r3, [r7, #0]
 801a85c:	895b      	ldrh	r3, [r3, #10]
 801a85e:	461a      	mov	r2, r3
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	1ad3      	subs	r3, r2, r3
 801a864:	60fb      	str	r3, [r7, #12]
 801a866:	e005      	b.n	801a874 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	895b      	ldrh	r3, [r3, #10]
 801a86c:	461a      	mov	r2, r3
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	1ad3      	subs	r3, r2, r3
 801a872:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	685a      	ldr	r2, [r3, #4]
 801a878:	697b      	ldr	r3, [r7, #20]
 801a87a:	18d0      	adds	r0, r2, r3
 801a87c:	683b      	ldr	r3, [r7, #0]
 801a87e:	685a      	ldr	r2, [r3, #4]
 801a880:	693b      	ldr	r3, [r7, #16]
 801a882:	4413      	add	r3, r2
 801a884:	68fa      	ldr	r2, [r7, #12]
 801a886:	4619      	mov	r1, r3
 801a888:	f00b fa60 	bl	8025d4c <memcpy>
    offset_to += len;
 801a88c:	697a      	ldr	r2, [r7, #20]
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	4413      	add	r3, r2
 801a892:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801a894:	693a      	ldr	r2, [r7, #16]
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	4413      	add	r3, r2
 801a89a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	895b      	ldrh	r3, [r3, #10]
 801a8a0:	461a      	mov	r2, r3
 801a8a2:	697b      	ldr	r3, [r7, #20]
 801a8a4:	4293      	cmp	r3, r2
 801a8a6:	d906      	bls.n	801a8b6 <pbuf_copy+0xb2>
 801a8a8:	4b38      	ldr	r3, [pc, #224]	; (801a98c <pbuf_copy+0x188>)
 801a8aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 801a8ae:	493a      	ldr	r1, [pc, #232]	; (801a998 <pbuf_copy+0x194>)
 801a8b0:	4838      	ldr	r0, [pc, #224]	; (801a994 <pbuf_copy+0x190>)
 801a8b2:	f00b fb57 	bl	8025f64 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	895b      	ldrh	r3, [r3, #10]
 801a8ba:	461a      	mov	r2, r3
 801a8bc:	693b      	ldr	r3, [r7, #16]
 801a8be:	4293      	cmp	r3, r2
 801a8c0:	d906      	bls.n	801a8d0 <pbuf_copy+0xcc>
 801a8c2:	4b32      	ldr	r3, [pc, #200]	; (801a98c <pbuf_copy+0x188>)
 801a8c4:	f240 32da 	movw	r2, #986	; 0x3da
 801a8c8:	4934      	ldr	r1, [pc, #208]	; (801a99c <pbuf_copy+0x198>)
 801a8ca:	4832      	ldr	r0, [pc, #200]	; (801a994 <pbuf_copy+0x190>)
 801a8cc:	f00b fb4a 	bl	8025f64 <iprintf>
    if (offset_from >= p_from->len) {
 801a8d0:	683b      	ldr	r3, [r7, #0]
 801a8d2:	895b      	ldrh	r3, [r3, #10]
 801a8d4:	461a      	mov	r2, r3
 801a8d6:	693b      	ldr	r3, [r7, #16]
 801a8d8:	4293      	cmp	r3, r2
 801a8da:	d304      	bcc.n	801a8e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801a8dc:	2300      	movs	r3, #0
 801a8de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801a8e0:	683b      	ldr	r3, [r7, #0]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	895b      	ldrh	r3, [r3, #10]
 801a8ea:	461a      	mov	r2, r3
 801a8ec:	697b      	ldr	r3, [r7, #20]
 801a8ee:	4293      	cmp	r3, r2
 801a8f0:	d114      	bne.n	801a91c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d10c      	bne.n	801a91c <pbuf_copy+0x118>
 801a902:	683b      	ldr	r3, [r7, #0]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d009      	beq.n	801a91c <pbuf_copy+0x118>
 801a908:	4b20      	ldr	r3, [pc, #128]	; (801a98c <pbuf_copy+0x188>)
 801a90a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801a90e:	4924      	ldr	r1, [pc, #144]	; (801a9a0 <pbuf_copy+0x19c>)
 801a910:	4820      	ldr	r0, [pc, #128]	; (801a994 <pbuf_copy+0x190>)
 801a912:	f00b fb27 	bl	8025f64 <iprintf>
 801a916:	f06f 030f 	mvn.w	r3, #15
 801a91a:	e032      	b.n	801a982 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d013      	beq.n	801a94a <pbuf_copy+0x146>
 801a922:	683b      	ldr	r3, [r7, #0]
 801a924:	895a      	ldrh	r2, [r3, #10]
 801a926:	683b      	ldr	r3, [r7, #0]
 801a928:	891b      	ldrh	r3, [r3, #8]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d10d      	bne.n	801a94a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a92e:	683b      	ldr	r3, [r7, #0]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d009      	beq.n	801a94a <pbuf_copy+0x146>
 801a936:	4b15      	ldr	r3, [pc, #84]	; (801a98c <pbuf_copy+0x188>)
 801a938:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801a93c:	4919      	ldr	r1, [pc, #100]	; (801a9a4 <pbuf_copy+0x1a0>)
 801a93e:	4815      	ldr	r0, [pc, #84]	; (801a994 <pbuf_copy+0x190>)
 801a940:	f00b fb10 	bl	8025f64 <iprintf>
 801a944:	f06f 0305 	mvn.w	r3, #5
 801a948:	e01b      	b.n	801a982 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d013      	beq.n	801a978 <pbuf_copy+0x174>
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	895a      	ldrh	r2, [r3, #10]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	891b      	ldrh	r3, [r3, #8]
 801a958:	429a      	cmp	r2, r3
 801a95a:	d10d      	bne.n	801a978 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d009      	beq.n	801a978 <pbuf_copy+0x174>
 801a964:	4b09      	ldr	r3, [pc, #36]	; (801a98c <pbuf_copy+0x188>)
 801a966:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801a96a:	490e      	ldr	r1, [pc, #56]	; (801a9a4 <pbuf_copy+0x1a0>)
 801a96c:	4809      	ldr	r0, [pc, #36]	; (801a994 <pbuf_copy+0x190>)
 801a96e:	f00b faf9 	bl	8025f64 <iprintf>
 801a972:	f06f 0305 	mvn.w	r3, #5
 801a976:	e004      	b.n	801a982 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801a978:	683b      	ldr	r3, [r7, #0]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	f47f af61 	bne.w	801a842 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801a980:	2300      	movs	r3, #0
}
 801a982:	4618      	mov	r0, r3
 801a984:	3718      	adds	r7, #24
 801a986:	46bd      	mov	sp, r7
 801a988:	bd80      	pop	{r7, pc}
 801a98a:	bf00      	nop
 801a98c:	080275b8 	.word	0x080275b8
 801a990:	08027860 	.word	0x08027860
 801a994:	08027618 	.word	0x08027618
 801a998:	08027890 	.word	0x08027890
 801a99c:	080278a8 	.word	0x080278a8
 801a9a0:	080278c4 	.word	0x080278c4
 801a9a4:	080278d4 	.word	0x080278d4

0801a9a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b088      	sub	sp, #32
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	60f8      	str	r0, [r7, #12]
 801a9b0:	60b9      	str	r1, [r7, #8]
 801a9b2:	4611      	mov	r1, r2
 801a9b4:	461a      	mov	r2, r3
 801a9b6:	460b      	mov	r3, r1
 801a9b8:	80fb      	strh	r3, [r7, #6]
 801a9ba:	4613      	mov	r3, r2
 801a9bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801a9be:	2300      	movs	r3, #0
 801a9c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d108      	bne.n	801a9de <pbuf_copy_partial+0x36>
 801a9cc:	4b2b      	ldr	r3, [pc, #172]	; (801aa7c <pbuf_copy_partial+0xd4>)
 801a9ce:	f240 420a 	movw	r2, #1034	; 0x40a
 801a9d2:	492b      	ldr	r1, [pc, #172]	; (801aa80 <pbuf_copy_partial+0xd8>)
 801a9d4:	482b      	ldr	r0, [pc, #172]	; (801aa84 <pbuf_copy_partial+0xdc>)
 801a9d6:	f00b fac5 	bl	8025f64 <iprintf>
 801a9da:	2300      	movs	r3, #0
 801a9dc:	e04a      	b.n	801aa74 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d108      	bne.n	801a9f6 <pbuf_copy_partial+0x4e>
 801a9e4:	4b25      	ldr	r3, [pc, #148]	; (801aa7c <pbuf_copy_partial+0xd4>)
 801a9e6:	f240 420b 	movw	r2, #1035	; 0x40b
 801a9ea:	4927      	ldr	r1, [pc, #156]	; (801aa88 <pbuf_copy_partial+0xe0>)
 801a9ec:	4825      	ldr	r0, [pc, #148]	; (801aa84 <pbuf_copy_partial+0xdc>)
 801a9ee:	f00b fab9 	bl	8025f64 <iprintf>
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	e03e      	b.n	801aa74 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	61fb      	str	r3, [r7, #28]
 801a9fa:	e034      	b.n	801aa66 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801a9fc:	88bb      	ldrh	r3, [r7, #4]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d00a      	beq.n	801aa18 <pbuf_copy_partial+0x70>
 801aa02:	69fb      	ldr	r3, [r7, #28]
 801aa04:	895b      	ldrh	r3, [r3, #10]
 801aa06:	88ba      	ldrh	r2, [r7, #4]
 801aa08:	429a      	cmp	r2, r3
 801aa0a:	d305      	bcc.n	801aa18 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801aa0c:	69fb      	ldr	r3, [r7, #28]
 801aa0e:	895b      	ldrh	r3, [r3, #10]
 801aa10:	88ba      	ldrh	r2, [r7, #4]
 801aa12:	1ad3      	subs	r3, r2, r3
 801aa14:	80bb      	strh	r3, [r7, #4]
 801aa16:	e023      	b.n	801aa60 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801aa18:	69fb      	ldr	r3, [r7, #28]
 801aa1a:	895a      	ldrh	r2, [r3, #10]
 801aa1c:	88bb      	ldrh	r3, [r7, #4]
 801aa1e:	1ad3      	subs	r3, r2, r3
 801aa20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801aa22:	8b3a      	ldrh	r2, [r7, #24]
 801aa24:	88fb      	ldrh	r3, [r7, #6]
 801aa26:	429a      	cmp	r2, r3
 801aa28:	d901      	bls.n	801aa2e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801aa2a:	88fb      	ldrh	r3, [r7, #6]
 801aa2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801aa2e:	8b7b      	ldrh	r3, [r7, #26]
 801aa30:	68ba      	ldr	r2, [r7, #8]
 801aa32:	18d0      	adds	r0, r2, r3
 801aa34:	69fb      	ldr	r3, [r7, #28]
 801aa36:	685a      	ldr	r2, [r3, #4]
 801aa38:	88bb      	ldrh	r3, [r7, #4]
 801aa3a:	4413      	add	r3, r2
 801aa3c:	8b3a      	ldrh	r2, [r7, #24]
 801aa3e:	4619      	mov	r1, r3
 801aa40:	f00b f984 	bl	8025d4c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801aa44:	8afa      	ldrh	r2, [r7, #22]
 801aa46:	8b3b      	ldrh	r3, [r7, #24]
 801aa48:	4413      	add	r3, r2
 801aa4a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801aa4c:	8b7a      	ldrh	r2, [r7, #26]
 801aa4e:	8b3b      	ldrh	r3, [r7, #24]
 801aa50:	4413      	add	r3, r2
 801aa52:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801aa54:	88fa      	ldrh	r2, [r7, #6]
 801aa56:	8b3b      	ldrh	r3, [r7, #24]
 801aa58:	1ad3      	subs	r3, r2, r3
 801aa5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801aa60:	69fb      	ldr	r3, [r7, #28]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	61fb      	str	r3, [r7, #28]
 801aa66:	88fb      	ldrh	r3, [r7, #6]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d002      	beq.n	801aa72 <pbuf_copy_partial+0xca>
 801aa6c:	69fb      	ldr	r3, [r7, #28]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d1c4      	bne.n	801a9fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801aa72:	8afb      	ldrh	r3, [r7, #22]
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	3720      	adds	r7, #32
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd80      	pop	{r7, pc}
 801aa7c:	080275b8 	.word	0x080275b8
 801aa80:	08027900 	.word	0x08027900
 801aa84:	08027618 	.word	0x08027618
 801aa88:	08027920 	.word	0x08027920

0801aa8c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b084      	sub	sp, #16
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	4603      	mov	r3, r0
 801aa94:	603a      	str	r2, [r7, #0]
 801aa96:	71fb      	strb	r3, [r7, #7]
 801aa98:	460b      	mov	r3, r1
 801aa9a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	8919      	ldrh	r1, [r3, #8]
 801aaa0:	88ba      	ldrh	r2, [r7, #4]
 801aaa2:	79fb      	ldrb	r3, [r7, #7]
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f7ff fa95 	bl	8019fd4 <pbuf_alloc>
 801aaaa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d101      	bne.n	801aab6 <pbuf_clone+0x2a>
    return NULL;
 801aab2:	2300      	movs	r3, #0
 801aab4:	e011      	b.n	801aada <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801aab6:	6839      	ldr	r1, [r7, #0]
 801aab8:	68f8      	ldr	r0, [r7, #12]
 801aaba:	f7ff fea3 	bl	801a804 <pbuf_copy>
 801aabe:	4603      	mov	r3, r0
 801aac0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801aac2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d006      	beq.n	801aad8 <pbuf_clone+0x4c>
 801aaca:	4b06      	ldr	r3, [pc, #24]	; (801aae4 <pbuf_clone+0x58>)
 801aacc:	f240 5224 	movw	r2, #1316	; 0x524
 801aad0:	4905      	ldr	r1, [pc, #20]	; (801aae8 <pbuf_clone+0x5c>)
 801aad2:	4806      	ldr	r0, [pc, #24]	; (801aaec <pbuf_clone+0x60>)
 801aad4:	f00b fa46 	bl	8025f64 <iprintf>
  return q;
 801aad8:	68fb      	ldr	r3, [r7, #12]
}
 801aada:	4618      	mov	r0, r3
 801aadc:	3710      	adds	r7, #16
 801aade:	46bd      	mov	sp, r7
 801aae0:	bd80      	pop	{r7, pc}
 801aae2:	bf00      	nop
 801aae4:	080275b8 	.word	0x080275b8
 801aae8:	08027a2c 	.word	0x08027a2c
 801aaec:	08027618 	.word	0x08027618

0801aaf0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801aaf4:	f00b fac4 	bl	8026080 <rand>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	b29b      	uxth	r3, r3
 801aafc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ab00:	b29b      	uxth	r3, r3
 801ab02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ab06:	b29a      	uxth	r2, r3
 801ab08:	4b01      	ldr	r3, [pc, #4]	; (801ab10 <tcp_init+0x20>)
 801ab0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ab0c:	bf00      	nop
 801ab0e:	bd80      	pop	{r7, pc}
 801ab10:	24000458 	.word	0x24000458

0801ab14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801ab14:	b580      	push	{r7, lr}
 801ab16:	b082      	sub	sp, #8
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	7d1b      	ldrb	r3, [r3, #20]
 801ab20:	2b01      	cmp	r3, #1
 801ab22:	d105      	bne.n	801ab30 <tcp_free+0x1c>
 801ab24:	4b06      	ldr	r3, [pc, #24]	; (801ab40 <tcp_free+0x2c>)
 801ab26:	22d4      	movs	r2, #212	; 0xd4
 801ab28:	4906      	ldr	r1, [pc, #24]	; (801ab44 <tcp_free+0x30>)
 801ab2a:	4807      	ldr	r0, [pc, #28]	; (801ab48 <tcp_free+0x34>)
 801ab2c:	f00b fa1a 	bl	8025f64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801ab30:	6879      	ldr	r1, [r7, #4]
 801ab32:	2001      	movs	r0, #1
 801ab34:	f7fe fe82 	bl	801983c <memp_free>
}
 801ab38:	bf00      	nop
 801ab3a:	3708      	adds	r7, #8
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	bd80      	pop	{r7, pc}
 801ab40:	08027ab8 	.word	0x08027ab8
 801ab44:	08027ae8 	.word	0x08027ae8
 801ab48:	08027afc 	.word	0x08027afc

0801ab4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	b082      	sub	sp, #8
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	7d1b      	ldrb	r3, [r3, #20]
 801ab58:	2b01      	cmp	r3, #1
 801ab5a:	d105      	bne.n	801ab68 <tcp_free_listen+0x1c>
 801ab5c:	4b06      	ldr	r3, [pc, #24]	; (801ab78 <tcp_free_listen+0x2c>)
 801ab5e:	22df      	movs	r2, #223	; 0xdf
 801ab60:	4906      	ldr	r1, [pc, #24]	; (801ab7c <tcp_free_listen+0x30>)
 801ab62:	4807      	ldr	r0, [pc, #28]	; (801ab80 <tcp_free_listen+0x34>)
 801ab64:	f00b f9fe 	bl	8025f64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801ab68:	6879      	ldr	r1, [r7, #4]
 801ab6a:	2002      	movs	r0, #2
 801ab6c:	f7fe fe66 	bl	801983c <memp_free>
}
 801ab70:	bf00      	nop
 801ab72:	3708      	adds	r7, #8
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bd80      	pop	{r7, pc}
 801ab78:	08027ab8 	.word	0x08027ab8
 801ab7c:	08027b24 	.word	0x08027b24
 801ab80:	08027afc 	.word	0x08027afc

0801ab84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801ab88:	f000 fea2 	bl	801b8d0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801ab8c:	4b07      	ldr	r3, [pc, #28]	; (801abac <tcp_tmr+0x28>)
 801ab8e:	781b      	ldrb	r3, [r3, #0]
 801ab90:	3301      	adds	r3, #1
 801ab92:	b2da      	uxtb	r2, r3
 801ab94:	4b05      	ldr	r3, [pc, #20]	; (801abac <tcp_tmr+0x28>)
 801ab96:	701a      	strb	r2, [r3, #0]
 801ab98:	4b04      	ldr	r3, [pc, #16]	; (801abac <tcp_tmr+0x28>)
 801ab9a:	781b      	ldrb	r3, [r3, #0]
 801ab9c:	f003 0301 	and.w	r3, r3, #1
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d001      	beq.n	801aba8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801aba4:	f000 fb54 	bl	801b250 <tcp_slowtmr>
  }
}
 801aba8:	bf00      	nop
 801abaa:	bd80      	pop	{r7, pc}
 801abac:	2400d011 	.word	0x2400d011

0801abb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
 801abb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d105      	bne.n	801abcc <tcp_remove_listener+0x1c>
 801abc0:	4b0d      	ldr	r3, [pc, #52]	; (801abf8 <tcp_remove_listener+0x48>)
 801abc2:	22ff      	movs	r2, #255	; 0xff
 801abc4:	490d      	ldr	r1, [pc, #52]	; (801abfc <tcp_remove_listener+0x4c>)
 801abc6:	480e      	ldr	r0, [pc, #56]	; (801ac00 <tcp_remove_listener+0x50>)
 801abc8:	f00b f9cc 	bl	8025f64 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	60fb      	str	r3, [r7, #12]
 801abd0:	e00a      	b.n	801abe8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801abd6:	683a      	ldr	r2, [r7, #0]
 801abd8:	429a      	cmp	r2, r3
 801abda:	d102      	bne.n	801abe2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2200      	movs	r2, #0
 801abe0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	68db      	ldr	r3, [r3, #12]
 801abe6:	60fb      	str	r3, [r7, #12]
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d1f1      	bne.n	801abd2 <tcp_remove_listener+0x22>
    }
  }
}
 801abee:	bf00      	nop
 801abf0:	bf00      	nop
 801abf2:	3710      	adds	r7, #16
 801abf4:	46bd      	mov	sp, r7
 801abf6:	bd80      	pop	{r7, pc}
 801abf8:	08027ab8 	.word	0x08027ab8
 801abfc:	08027b40 	.word	0x08027b40
 801ac00:	08027afc 	.word	0x08027afc

0801ac04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b084      	sub	sp, #16
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d106      	bne.n	801ac20 <tcp_listen_closed+0x1c>
 801ac12:	4b14      	ldr	r3, [pc, #80]	; (801ac64 <tcp_listen_closed+0x60>)
 801ac14:	f240 1211 	movw	r2, #273	; 0x111
 801ac18:	4913      	ldr	r1, [pc, #76]	; (801ac68 <tcp_listen_closed+0x64>)
 801ac1a:	4814      	ldr	r0, [pc, #80]	; (801ac6c <tcp_listen_closed+0x68>)
 801ac1c:	f00b f9a2 	bl	8025f64 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	7d1b      	ldrb	r3, [r3, #20]
 801ac24:	2b01      	cmp	r3, #1
 801ac26:	d006      	beq.n	801ac36 <tcp_listen_closed+0x32>
 801ac28:	4b0e      	ldr	r3, [pc, #56]	; (801ac64 <tcp_listen_closed+0x60>)
 801ac2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801ac2e:	4910      	ldr	r1, [pc, #64]	; (801ac70 <tcp_listen_closed+0x6c>)
 801ac30:	480e      	ldr	r0, [pc, #56]	; (801ac6c <tcp_listen_closed+0x68>)
 801ac32:	f00b f997 	bl	8025f64 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ac36:	2301      	movs	r3, #1
 801ac38:	60fb      	str	r3, [r7, #12]
 801ac3a:	e00b      	b.n	801ac54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ac3c:	4a0d      	ldr	r2, [pc, #52]	; (801ac74 <tcp_listen_closed+0x70>)
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	6879      	ldr	r1, [r7, #4]
 801ac48:	4618      	mov	r0, r3
 801ac4a:	f7ff ffb1 	bl	801abb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	3301      	adds	r3, #1
 801ac52:	60fb      	str	r3, [r7, #12]
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	2b03      	cmp	r3, #3
 801ac58:	d9f0      	bls.n	801ac3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801ac5a:	bf00      	nop
 801ac5c:	bf00      	nop
 801ac5e:	3710      	adds	r7, #16
 801ac60:	46bd      	mov	sp, r7
 801ac62:	bd80      	pop	{r7, pc}
 801ac64:	08027ab8 	.word	0x08027ab8
 801ac68:	08027b68 	.word	0x08027b68
 801ac6c:	08027afc 	.word	0x08027afc
 801ac70:	08027b74 	.word	0x08027b74
 801ac74:	0802a574 	.word	0x0802a574

0801ac78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801ac78:	b5b0      	push	{r4, r5, r7, lr}
 801ac7a:	b088      	sub	sp, #32
 801ac7c:	af04      	add	r7, sp, #16
 801ac7e:	6078      	str	r0, [r7, #4]
 801ac80:	460b      	mov	r3, r1
 801ac82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d106      	bne.n	801ac98 <tcp_close_shutdown+0x20>
 801ac8a:	4b63      	ldr	r3, [pc, #396]	; (801ae18 <tcp_close_shutdown+0x1a0>)
 801ac8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801ac90:	4962      	ldr	r1, [pc, #392]	; (801ae1c <tcp_close_shutdown+0x1a4>)
 801ac92:	4863      	ldr	r0, [pc, #396]	; (801ae20 <tcp_close_shutdown+0x1a8>)
 801ac94:	f00b f966 	bl	8025f64 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801ac98:	78fb      	ldrb	r3, [r7, #3]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d066      	beq.n	801ad6c <tcp_close_shutdown+0xf4>
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	7d1b      	ldrb	r3, [r3, #20]
 801aca2:	2b04      	cmp	r3, #4
 801aca4:	d003      	beq.n	801acae <tcp_close_shutdown+0x36>
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	7d1b      	ldrb	r3, [r3, #20]
 801acaa:	2b07      	cmp	r3, #7
 801acac:	d15e      	bne.n	801ad6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d104      	bne.n	801acc0 <tcp_close_shutdown+0x48>
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801acbe:	d055      	beq.n	801ad6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	8b5b      	ldrh	r3, [r3, #26]
 801acc4:	f003 0310 	and.w	r3, r3, #16
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d106      	bne.n	801acda <tcp_close_shutdown+0x62>
 801accc:	4b52      	ldr	r3, [pc, #328]	; (801ae18 <tcp_close_shutdown+0x1a0>)
 801acce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801acd2:	4954      	ldr	r1, [pc, #336]	; (801ae24 <tcp_close_shutdown+0x1ac>)
 801acd4:	4852      	ldr	r0, [pc, #328]	; (801ae20 <tcp_close_shutdown+0x1a8>)
 801acd6:	f00b f945 	bl	8025f64 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801ace2:	687d      	ldr	r5, [r7, #4]
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	3304      	adds	r3, #4
 801ace8:	687a      	ldr	r2, [r7, #4]
 801acea:	8ad2      	ldrh	r2, [r2, #22]
 801acec:	6879      	ldr	r1, [r7, #4]
 801acee:	8b09      	ldrh	r1, [r1, #24]
 801acf0:	9102      	str	r1, [sp, #8]
 801acf2:	9201      	str	r2, [sp, #4]
 801acf4:	9300      	str	r3, [sp, #0]
 801acf6:	462b      	mov	r3, r5
 801acf8:	4622      	mov	r2, r4
 801acfa:	4601      	mov	r1, r0
 801acfc:	6878      	ldr	r0, [r7, #4]
 801acfe:	f004 fe91 	bl	801fa24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801ad02:	6878      	ldr	r0, [r7, #4]
 801ad04:	f001 f8c6 	bl	801be94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801ad08:	4b47      	ldr	r3, [pc, #284]	; (801ae28 <tcp_close_shutdown+0x1b0>)
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	687a      	ldr	r2, [r7, #4]
 801ad0e:	429a      	cmp	r2, r3
 801ad10:	d105      	bne.n	801ad1e <tcp_close_shutdown+0xa6>
 801ad12:	4b45      	ldr	r3, [pc, #276]	; (801ae28 <tcp_close_shutdown+0x1b0>)
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	68db      	ldr	r3, [r3, #12]
 801ad18:	4a43      	ldr	r2, [pc, #268]	; (801ae28 <tcp_close_shutdown+0x1b0>)
 801ad1a:	6013      	str	r3, [r2, #0]
 801ad1c:	e013      	b.n	801ad46 <tcp_close_shutdown+0xce>
 801ad1e:	4b42      	ldr	r3, [pc, #264]	; (801ae28 <tcp_close_shutdown+0x1b0>)
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	60fb      	str	r3, [r7, #12]
 801ad24:	e00c      	b.n	801ad40 <tcp_close_shutdown+0xc8>
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	68db      	ldr	r3, [r3, #12]
 801ad2a:	687a      	ldr	r2, [r7, #4]
 801ad2c:	429a      	cmp	r2, r3
 801ad2e:	d104      	bne.n	801ad3a <tcp_close_shutdown+0xc2>
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	68da      	ldr	r2, [r3, #12]
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	60da      	str	r2, [r3, #12]
 801ad38:	e005      	b.n	801ad46 <tcp_close_shutdown+0xce>
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	68db      	ldr	r3, [r3, #12]
 801ad3e:	60fb      	str	r3, [r7, #12]
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d1ef      	bne.n	801ad26 <tcp_close_shutdown+0xae>
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	2200      	movs	r2, #0
 801ad4a:	60da      	str	r2, [r3, #12]
 801ad4c:	4b37      	ldr	r3, [pc, #220]	; (801ae2c <tcp_close_shutdown+0x1b4>)
 801ad4e:	2201      	movs	r2, #1
 801ad50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801ad52:	4b37      	ldr	r3, [pc, #220]	; (801ae30 <tcp_close_shutdown+0x1b8>)
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	687a      	ldr	r2, [r7, #4]
 801ad58:	429a      	cmp	r2, r3
 801ad5a:	d102      	bne.n	801ad62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801ad5c:	f003 fd5e 	bl	801e81c <tcp_trigger_input_pcb_close>
 801ad60:	e002      	b.n	801ad68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801ad62:	6878      	ldr	r0, [r7, #4]
 801ad64:	f7ff fed6 	bl	801ab14 <tcp_free>
      }
      return ERR_OK;
 801ad68:	2300      	movs	r3, #0
 801ad6a:	e050      	b.n	801ae0e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	7d1b      	ldrb	r3, [r3, #20]
 801ad70:	2b02      	cmp	r3, #2
 801ad72:	d03b      	beq.n	801adec <tcp_close_shutdown+0x174>
 801ad74:	2b02      	cmp	r3, #2
 801ad76:	dc44      	bgt.n	801ae02 <tcp_close_shutdown+0x18a>
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d002      	beq.n	801ad82 <tcp_close_shutdown+0x10a>
 801ad7c:	2b01      	cmp	r3, #1
 801ad7e:	d02a      	beq.n	801add6 <tcp_close_shutdown+0x15e>
 801ad80:	e03f      	b.n	801ae02 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	8adb      	ldrh	r3, [r3, #22]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d021      	beq.n	801adce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ad8a:	4b2a      	ldr	r3, [pc, #168]	; (801ae34 <tcp_close_shutdown+0x1bc>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	687a      	ldr	r2, [r7, #4]
 801ad90:	429a      	cmp	r2, r3
 801ad92:	d105      	bne.n	801ada0 <tcp_close_shutdown+0x128>
 801ad94:	4b27      	ldr	r3, [pc, #156]	; (801ae34 <tcp_close_shutdown+0x1bc>)
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	68db      	ldr	r3, [r3, #12]
 801ad9a:	4a26      	ldr	r2, [pc, #152]	; (801ae34 <tcp_close_shutdown+0x1bc>)
 801ad9c:	6013      	str	r3, [r2, #0]
 801ad9e:	e013      	b.n	801adc8 <tcp_close_shutdown+0x150>
 801ada0:	4b24      	ldr	r3, [pc, #144]	; (801ae34 <tcp_close_shutdown+0x1bc>)
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	60bb      	str	r3, [r7, #8]
 801ada6:	e00c      	b.n	801adc2 <tcp_close_shutdown+0x14a>
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	68db      	ldr	r3, [r3, #12]
 801adac:	687a      	ldr	r2, [r7, #4]
 801adae:	429a      	cmp	r2, r3
 801adb0:	d104      	bne.n	801adbc <tcp_close_shutdown+0x144>
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	68da      	ldr	r2, [r3, #12]
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	60da      	str	r2, [r3, #12]
 801adba:	e005      	b.n	801adc8 <tcp_close_shutdown+0x150>
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	68db      	ldr	r3, [r3, #12]
 801adc0:	60bb      	str	r3, [r7, #8]
 801adc2:	68bb      	ldr	r3, [r7, #8]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d1ef      	bne.n	801ada8 <tcp_close_shutdown+0x130>
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	2200      	movs	r2, #0
 801adcc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801adce:	6878      	ldr	r0, [r7, #4]
 801add0:	f7ff fea0 	bl	801ab14 <tcp_free>
      break;
 801add4:	e01a      	b.n	801ae0c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801add6:	6878      	ldr	r0, [r7, #4]
 801add8:	f7ff ff14 	bl	801ac04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801addc:	6879      	ldr	r1, [r7, #4]
 801adde:	4816      	ldr	r0, [pc, #88]	; (801ae38 <tcp_close_shutdown+0x1c0>)
 801ade0:	f001 f8a8 	bl	801bf34 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801ade4:	6878      	ldr	r0, [r7, #4]
 801ade6:	f7ff feb1 	bl	801ab4c <tcp_free_listen>
      break;
 801adea:	e00f      	b.n	801ae0c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801adec:	6879      	ldr	r1, [r7, #4]
 801adee:	480e      	ldr	r0, [pc, #56]	; (801ae28 <tcp_close_shutdown+0x1b0>)
 801adf0:	f001 f8a0 	bl	801bf34 <tcp_pcb_remove>
 801adf4:	4b0d      	ldr	r3, [pc, #52]	; (801ae2c <tcp_close_shutdown+0x1b4>)
 801adf6:	2201      	movs	r2, #1
 801adf8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801adfa:	6878      	ldr	r0, [r7, #4]
 801adfc:	f7ff fe8a 	bl	801ab14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801ae00:	e004      	b.n	801ae0c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f000 f81a 	bl	801ae3c <tcp_close_shutdown_fin>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	e000      	b.n	801ae0e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801ae0c:	2300      	movs	r3, #0
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	3710      	adds	r7, #16
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bdb0      	pop	{r4, r5, r7, pc}
 801ae16:	bf00      	nop
 801ae18:	08027ab8 	.word	0x08027ab8
 801ae1c:	08027b8c 	.word	0x08027b8c
 801ae20:	08027afc 	.word	0x08027afc
 801ae24:	08027bac 	.word	0x08027bac
 801ae28:	2400d008 	.word	0x2400d008
 801ae2c:	2400d010 	.word	0x2400d010
 801ae30:	2400d048 	.word	0x2400d048
 801ae34:	2400d000 	.word	0x2400d000
 801ae38:	2400d004 	.word	0x2400d004

0801ae3c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b084      	sub	sp, #16
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d106      	bne.n	801ae58 <tcp_close_shutdown_fin+0x1c>
 801ae4a:	4b2e      	ldr	r3, [pc, #184]	; (801af04 <tcp_close_shutdown_fin+0xc8>)
 801ae4c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801ae50:	492d      	ldr	r1, [pc, #180]	; (801af08 <tcp_close_shutdown_fin+0xcc>)
 801ae52:	482e      	ldr	r0, [pc, #184]	; (801af0c <tcp_close_shutdown_fin+0xd0>)
 801ae54:	f00b f886 	bl	8025f64 <iprintf>

  switch (pcb->state) {
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	7d1b      	ldrb	r3, [r3, #20]
 801ae5c:	2b07      	cmp	r3, #7
 801ae5e:	d020      	beq.n	801aea2 <tcp_close_shutdown_fin+0x66>
 801ae60:	2b07      	cmp	r3, #7
 801ae62:	dc2b      	bgt.n	801aebc <tcp_close_shutdown_fin+0x80>
 801ae64:	2b03      	cmp	r3, #3
 801ae66:	d002      	beq.n	801ae6e <tcp_close_shutdown_fin+0x32>
 801ae68:	2b04      	cmp	r3, #4
 801ae6a:	d00d      	beq.n	801ae88 <tcp_close_shutdown_fin+0x4c>
 801ae6c:	e026      	b.n	801aebc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801ae6e:	6878      	ldr	r0, [r7, #4]
 801ae70:	f003 fee6 	bl	801ec40 <tcp_send_fin>
 801ae74:	4603      	mov	r3, r0
 801ae76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801ae78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d11f      	bne.n	801aec0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	2205      	movs	r2, #5
 801ae84:	751a      	strb	r2, [r3, #20]
      }
      break;
 801ae86:	e01b      	b.n	801aec0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801ae88:	6878      	ldr	r0, [r7, #4]
 801ae8a:	f003 fed9 	bl	801ec40 <tcp_send_fin>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801ae92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d114      	bne.n	801aec4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	2205      	movs	r2, #5
 801ae9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801aea0:	e010      	b.n	801aec4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801aea2:	6878      	ldr	r0, [r7, #4]
 801aea4:	f003 fecc 	bl	801ec40 <tcp_send_fin>
 801aea8:	4603      	mov	r3, r0
 801aeaa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801aeac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d109      	bne.n	801aec8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	2209      	movs	r2, #9
 801aeb8:	751a      	strb	r2, [r3, #20]
      }
      break;
 801aeba:	e005      	b.n	801aec8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801aebc:	2300      	movs	r3, #0
 801aebe:	e01c      	b.n	801aefa <tcp_close_shutdown_fin+0xbe>
      break;
 801aec0:	bf00      	nop
 801aec2:	e002      	b.n	801aeca <tcp_close_shutdown_fin+0x8e>
      break;
 801aec4:	bf00      	nop
 801aec6:	e000      	b.n	801aeca <tcp_close_shutdown_fin+0x8e>
      break;
 801aec8:	bf00      	nop
  }

  if (err == ERR_OK) {
 801aeca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d103      	bne.n	801aeda <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801aed2:	6878      	ldr	r0, [r7, #4]
 801aed4:	f003 fff2 	bl	801eebc <tcp_output>
 801aed8:	e00d      	b.n	801aef6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801aeda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aede:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aee2:	d108      	bne.n	801aef6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	8b5b      	ldrh	r3, [r3, #26]
 801aee8:	f043 0308 	orr.w	r3, r3, #8
 801aeec:	b29a      	uxth	r2, r3
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801aef2:	2300      	movs	r3, #0
 801aef4:	e001      	b.n	801aefa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801aef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	3710      	adds	r7, #16
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}
 801af02:	bf00      	nop
 801af04:	08027ab8 	.word	0x08027ab8
 801af08:	08027b68 	.word	0x08027b68
 801af0c:	08027afc 	.word	0x08027afc

0801af10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b082      	sub	sp, #8
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d109      	bne.n	801af32 <tcp_close+0x22>
 801af1e:	4b0f      	ldr	r3, [pc, #60]	; (801af5c <tcp_close+0x4c>)
 801af20:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801af24:	490e      	ldr	r1, [pc, #56]	; (801af60 <tcp_close+0x50>)
 801af26:	480f      	ldr	r0, [pc, #60]	; (801af64 <tcp_close+0x54>)
 801af28:	f00b f81c 	bl	8025f64 <iprintf>
 801af2c:	f06f 030f 	mvn.w	r3, #15
 801af30:	e00f      	b.n	801af52 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	7d1b      	ldrb	r3, [r3, #20]
 801af36:	2b01      	cmp	r3, #1
 801af38:	d006      	beq.n	801af48 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	8b5b      	ldrh	r3, [r3, #26]
 801af3e:	f043 0310 	orr.w	r3, r3, #16
 801af42:	b29a      	uxth	r2, r3
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801af48:	2101      	movs	r1, #1
 801af4a:	6878      	ldr	r0, [r7, #4]
 801af4c:	f7ff fe94 	bl	801ac78 <tcp_close_shutdown>
 801af50:	4603      	mov	r3, r0
}
 801af52:	4618      	mov	r0, r3
 801af54:	3708      	adds	r7, #8
 801af56:	46bd      	mov	sp, r7
 801af58:	bd80      	pop	{r7, pc}
 801af5a:	bf00      	nop
 801af5c:	08027ab8 	.word	0x08027ab8
 801af60:	08027bc8 	.word	0x08027bc8
 801af64:	08027afc 	.word	0x08027afc

0801af68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b08e      	sub	sp, #56	; 0x38
 801af6c:	af04      	add	r7, sp, #16
 801af6e:	6078      	str	r0, [r7, #4]
 801af70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d107      	bne.n	801af88 <tcp_abandon+0x20>
 801af78:	4b52      	ldr	r3, [pc, #328]	; (801b0c4 <tcp_abandon+0x15c>)
 801af7a:	f240 223d 	movw	r2, #573	; 0x23d
 801af7e:	4952      	ldr	r1, [pc, #328]	; (801b0c8 <tcp_abandon+0x160>)
 801af80:	4852      	ldr	r0, [pc, #328]	; (801b0cc <tcp_abandon+0x164>)
 801af82:	f00a ffef 	bl	8025f64 <iprintf>
 801af86:	e099      	b.n	801b0bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	7d1b      	ldrb	r3, [r3, #20]
 801af8c:	2b01      	cmp	r3, #1
 801af8e:	d106      	bne.n	801af9e <tcp_abandon+0x36>
 801af90:	4b4c      	ldr	r3, [pc, #304]	; (801b0c4 <tcp_abandon+0x15c>)
 801af92:	f44f 7210 	mov.w	r2, #576	; 0x240
 801af96:	494e      	ldr	r1, [pc, #312]	; (801b0d0 <tcp_abandon+0x168>)
 801af98:	484c      	ldr	r0, [pc, #304]	; (801b0cc <tcp_abandon+0x164>)
 801af9a:	f00a ffe3 	bl	8025f64 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	7d1b      	ldrb	r3, [r3, #20]
 801afa2:	2b0a      	cmp	r3, #10
 801afa4:	d107      	bne.n	801afb6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801afa6:	6879      	ldr	r1, [r7, #4]
 801afa8:	484a      	ldr	r0, [pc, #296]	; (801b0d4 <tcp_abandon+0x16c>)
 801afaa:	f000 ffc3 	bl	801bf34 <tcp_pcb_remove>
    tcp_free(pcb);
 801afae:	6878      	ldr	r0, [r7, #4]
 801afb0:	f7ff fdb0 	bl	801ab14 <tcp_free>
 801afb4:	e082      	b.n	801b0bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801afb6:	2300      	movs	r3, #0
 801afb8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801afba:	2300      	movs	r3, #0
 801afbc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801afc2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afc8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801afd0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	691b      	ldr	r3, [r3, #16]
 801afd6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	7d1b      	ldrb	r3, [r3, #20]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d126      	bne.n	801b02e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	8adb      	ldrh	r3, [r3, #22]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d02e      	beq.n	801b046 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801afe8:	4b3b      	ldr	r3, [pc, #236]	; (801b0d8 <tcp_abandon+0x170>)
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	687a      	ldr	r2, [r7, #4]
 801afee:	429a      	cmp	r2, r3
 801aff0:	d105      	bne.n	801affe <tcp_abandon+0x96>
 801aff2:	4b39      	ldr	r3, [pc, #228]	; (801b0d8 <tcp_abandon+0x170>)
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	68db      	ldr	r3, [r3, #12]
 801aff8:	4a37      	ldr	r2, [pc, #220]	; (801b0d8 <tcp_abandon+0x170>)
 801affa:	6013      	str	r3, [r2, #0]
 801affc:	e013      	b.n	801b026 <tcp_abandon+0xbe>
 801affe:	4b36      	ldr	r3, [pc, #216]	; (801b0d8 <tcp_abandon+0x170>)
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	61fb      	str	r3, [r7, #28]
 801b004:	e00c      	b.n	801b020 <tcp_abandon+0xb8>
 801b006:	69fb      	ldr	r3, [r7, #28]
 801b008:	68db      	ldr	r3, [r3, #12]
 801b00a:	687a      	ldr	r2, [r7, #4]
 801b00c:	429a      	cmp	r2, r3
 801b00e:	d104      	bne.n	801b01a <tcp_abandon+0xb2>
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	68da      	ldr	r2, [r3, #12]
 801b014:	69fb      	ldr	r3, [r7, #28]
 801b016:	60da      	str	r2, [r3, #12]
 801b018:	e005      	b.n	801b026 <tcp_abandon+0xbe>
 801b01a:	69fb      	ldr	r3, [r7, #28]
 801b01c:	68db      	ldr	r3, [r3, #12]
 801b01e:	61fb      	str	r3, [r7, #28]
 801b020:	69fb      	ldr	r3, [r7, #28]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d1ef      	bne.n	801b006 <tcp_abandon+0x9e>
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	2200      	movs	r2, #0
 801b02a:	60da      	str	r2, [r3, #12]
 801b02c:	e00b      	b.n	801b046 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801b02e:	683b      	ldr	r3, [r7, #0]
 801b030:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	8adb      	ldrh	r3, [r3, #22]
 801b036:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b038:	6879      	ldr	r1, [r7, #4]
 801b03a:	4828      	ldr	r0, [pc, #160]	; (801b0dc <tcp_abandon+0x174>)
 801b03c:	f000 ff7a 	bl	801bf34 <tcp_pcb_remove>
 801b040:	4b27      	ldr	r3, [pc, #156]	; (801b0e0 <tcp_abandon+0x178>)
 801b042:	2201      	movs	r2, #1
 801b044:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d004      	beq.n	801b058 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b052:	4618      	mov	r0, r3
 801b054:	f000 fd1c 	bl	801ba90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d004      	beq.n	801b06a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b064:	4618      	mov	r0, r3
 801b066:	f000 fd13 	bl	801ba90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d004      	beq.n	801b07c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b076:	4618      	mov	r0, r3
 801b078:	f000 fd0a 	bl	801ba90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d00e      	beq.n	801b0a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801b082:	6879      	ldr	r1, [r7, #4]
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	3304      	adds	r3, #4
 801b088:	687a      	ldr	r2, [r7, #4]
 801b08a:	8b12      	ldrh	r2, [r2, #24]
 801b08c:	9202      	str	r2, [sp, #8]
 801b08e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b090:	9201      	str	r2, [sp, #4]
 801b092:	9300      	str	r3, [sp, #0]
 801b094:	460b      	mov	r3, r1
 801b096:	697a      	ldr	r2, [r7, #20]
 801b098:	69b9      	ldr	r1, [r7, #24]
 801b09a:	6878      	ldr	r0, [r7, #4]
 801b09c:	f004 fcc2 	bl	801fa24 <tcp_rst>
    }
    last_state = pcb->state;
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	7d1b      	ldrb	r3, [r3, #20]
 801b0a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801b0a6:	6878      	ldr	r0, [r7, #4]
 801b0a8:	f7ff fd34 	bl	801ab14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b0ac:	693b      	ldr	r3, [r7, #16]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d004      	beq.n	801b0bc <tcp_abandon+0x154>
 801b0b2:	693b      	ldr	r3, [r7, #16]
 801b0b4:	f06f 010c 	mvn.w	r1, #12
 801b0b8:	68f8      	ldr	r0, [r7, #12]
 801b0ba:	4798      	blx	r3
  }
}
 801b0bc:	3728      	adds	r7, #40	; 0x28
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	bd80      	pop	{r7, pc}
 801b0c2:	bf00      	nop
 801b0c4:	08027ab8 	.word	0x08027ab8
 801b0c8:	08027bfc 	.word	0x08027bfc
 801b0cc:	08027afc 	.word	0x08027afc
 801b0d0:	08027c18 	.word	0x08027c18
 801b0d4:	2400d00c 	.word	0x2400d00c
 801b0d8:	2400d000 	.word	0x2400d000
 801b0dc:	2400d008 	.word	0x2400d008
 801b0e0:	2400d010 	.word	0x2400d010

0801b0e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b082      	sub	sp, #8
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801b0ec:	2101      	movs	r1, #1
 801b0ee:	6878      	ldr	r0, [r7, #4]
 801b0f0:	f7ff ff3a 	bl	801af68 <tcp_abandon>
}
 801b0f4:	bf00      	nop
 801b0f6:	3708      	adds	r7, #8
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	bd80      	pop	{r7, pc}

0801b0fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	b084      	sub	sp, #16
 801b100:	af00      	add	r7, sp, #0
 801b102:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	2b00      	cmp	r3, #0
 801b108:	d106      	bne.n	801b118 <tcp_update_rcv_ann_wnd+0x1c>
 801b10a:	4b25      	ldr	r3, [pc, #148]	; (801b1a0 <tcp_update_rcv_ann_wnd+0xa4>)
 801b10c:	f240 32a6 	movw	r2, #934	; 0x3a6
 801b110:	4924      	ldr	r1, [pc, #144]	; (801b1a4 <tcp_update_rcv_ann_wnd+0xa8>)
 801b112:	4825      	ldr	r0, [pc, #148]	; (801b1a8 <tcp_update_rcv_ann_wnd+0xac>)
 801b114:	f00a ff26 	bl	8025f64 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b11c:	687a      	ldr	r2, [r7, #4]
 801b11e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801b120:	4413      	add	r3, r2
 801b122:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b128:	687a      	ldr	r2, [r7, #4]
 801b12a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801b12c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801b130:	bf28      	it	cs
 801b132:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801b136:	b292      	uxth	r2, r2
 801b138:	4413      	add	r3, r2
 801b13a:	68fa      	ldr	r2, [r7, #12]
 801b13c:	1ad3      	subs	r3, r2, r3
 801b13e:	2b00      	cmp	r3, #0
 801b140:	db08      	blt.n	801b154 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b14e:	68fa      	ldr	r2, [r7, #12]
 801b150:	1ad3      	subs	r3, r2, r3
 801b152:	e020      	b.n	801b196 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b15c:	1ad3      	subs	r3, r2, r3
 801b15e:	2b00      	cmp	r3, #0
 801b160:	dd03      	ble.n	801b16a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	2200      	movs	r2, #0
 801b166:	855a      	strh	r2, [r3, #42]	; 0x2a
 801b168:	e014      	b.n	801b194 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b172:	1ad3      	subs	r3, r2, r3
 801b174:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b176:	68bb      	ldr	r3, [r7, #8]
 801b178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b17c:	d306      	bcc.n	801b18c <tcp_update_rcv_ann_wnd+0x90>
 801b17e:	4b08      	ldr	r3, [pc, #32]	; (801b1a0 <tcp_update_rcv_ann_wnd+0xa4>)
 801b180:	f240 32b6 	movw	r2, #950	; 0x3b6
 801b184:	4909      	ldr	r1, [pc, #36]	; (801b1ac <tcp_update_rcv_ann_wnd+0xb0>)
 801b186:	4808      	ldr	r0, [pc, #32]	; (801b1a8 <tcp_update_rcv_ann_wnd+0xac>)
 801b188:	f00a feec 	bl	8025f64 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b18c:	68bb      	ldr	r3, [r7, #8]
 801b18e:	b29a      	uxth	r2, r3
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801b194:	2300      	movs	r3, #0
  }
}
 801b196:	4618      	mov	r0, r3
 801b198:	3710      	adds	r7, #16
 801b19a:	46bd      	mov	sp, r7
 801b19c:	bd80      	pop	{r7, pc}
 801b19e:	bf00      	nop
 801b1a0:	08027ab8 	.word	0x08027ab8
 801b1a4:	08027d14 	.word	0x08027d14
 801b1a8:	08027afc 	.word	0x08027afc
 801b1ac:	08027d38 	.word	0x08027d38

0801b1b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b084      	sub	sp, #16
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	6078      	str	r0, [r7, #4]
 801b1b8:	460b      	mov	r3, r1
 801b1ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d107      	bne.n	801b1d2 <tcp_recved+0x22>
 801b1c2:	4b1f      	ldr	r3, [pc, #124]	; (801b240 <tcp_recved+0x90>)
 801b1c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 801b1c8:	491e      	ldr	r1, [pc, #120]	; (801b244 <tcp_recved+0x94>)
 801b1ca:	481f      	ldr	r0, [pc, #124]	; (801b248 <tcp_recved+0x98>)
 801b1cc:	f00a feca 	bl	8025f64 <iprintf>
 801b1d0:	e032      	b.n	801b238 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	7d1b      	ldrb	r3, [r3, #20]
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	d106      	bne.n	801b1e8 <tcp_recved+0x38>
 801b1da:	4b19      	ldr	r3, [pc, #100]	; (801b240 <tcp_recved+0x90>)
 801b1dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 801b1e0:	491a      	ldr	r1, [pc, #104]	; (801b24c <tcp_recved+0x9c>)
 801b1e2:	4819      	ldr	r0, [pc, #100]	; (801b248 <tcp_recved+0x98>)
 801b1e4:	f00a febe 	bl	8025f64 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b1ec:	887b      	ldrh	r3, [r7, #2]
 801b1ee:	4413      	add	r3, r2
 801b1f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b1f2:	89fb      	ldrh	r3, [r7, #14]
 801b1f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b1f8:	d804      	bhi.n	801b204 <tcp_recved+0x54>
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b1fe:	89fa      	ldrh	r2, [r7, #14]
 801b200:	429a      	cmp	r2, r3
 801b202:	d204      	bcs.n	801b20e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801b20a:	851a      	strh	r2, [r3, #40]	; 0x28
 801b20c:	e002      	b.n	801b214 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	89fa      	ldrh	r2, [r7, #14]
 801b212:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f7ff ff71 	bl	801b0fc <tcp_update_rcv_ann_wnd>
 801b21a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801b222:	d309      	bcc.n	801b238 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	8b5b      	ldrh	r3, [r3, #26]
 801b228:	f043 0302 	orr.w	r3, r3, #2
 801b22c:	b29a      	uxth	r2, r3
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b232:	6878      	ldr	r0, [r7, #4]
 801b234:	f003 fe42 	bl	801eebc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801b238:	3710      	adds	r7, #16
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd80      	pop	{r7, pc}
 801b23e:	bf00      	nop
 801b240:	08027ab8 	.word	0x08027ab8
 801b244:	08027d54 	.word	0x08027d54
 801b248:	08027afc 	.word	0x08027afc
 801b24c:	08027d6c 	.word	0x08027d6c

0801b250 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801b250:	b5b0      	push	{r4, r5, r7, lr}
 801b252:	b090      	sub	sp, #64	; 0x40
 801b254:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801b256:	2300      	movs	r3, #0
 801b258:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801b25c:	4b94      	ldr	r3, [pc, #592]	; (801b4b0 <tcp_slowtmr+0x260>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	3301      	adds	r3, #1
 801b262:	4a93      	ldr	r2, [pc, #588]	; (801b4b0 <tcp_slowtmr+0x260>)
 801b264:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801b266:	4b93      	ldr	r3, [pc, #588]	; (801b4b4 <tcp_slowtmr+0x264>)
 801b268:	781b      	ldrb	r3, [r3, #0]
 801b26a:	3301      	adds	r3, #1
 801b26c:	b2da      	uxtb	r2, r3
 801b26e:	4b91      	ldr	r3, [pc, #580]	; (801b4b4 <tcp_slowtmr+0x264>)
 801b270:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801b272:	2300      	movs	r3, #0
 801b274:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801b276:	4b90      	ldr	r3, [pc, #576]	; (801b4b8 <tcp_slowtmr+0x268>)
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801b27c:	e29d      	b.n	801b7ba <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b280:	7d1b      	ldrb	r3, [r3, #20]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d106      	bne.n	801b294 <tcp_slowtmr+0x44>
 801b286:	4b8d      	ldr	r3, [pc, #564]	; (801b4bc <tcp_slowtmr+0x26c>)
 801b288:	f240 42be 	movw	r2, #1214	; 0x4be
 801b28c:	498c      	ldr	r1, [pc, #560]	; (801b4c0 <tcp_slowtmr+0x270>)
 801b28e:	488d      	ldr	r0, [pc, #564]	; (801b4c4 <tcp_slowtmr+0x274>)
 801b290:	f00a fe68 	bl	8025f64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b296:	7d1b      	ldrb	r3, [r3, #20]
 801b298:	2b01      	cmp	r3, #1
 801b29a:	d106      	bne.n	801b2aa <tcp_slowtmr+0x5a>
 801b29c:	4b87      	ldr	r3, [pc, #540]	; (801b4bc <tcp_slowtmr+0x26c>)
 801b29e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801b2a2:	4989      	ldr	r1, [pc, #548]	; (801b4c8 <tcp_slowtmr+0x278>)
 801b2a4:	4887      	ldr	r0, [pc, #540]	; (801b4c4 <tcp_slowtmr+0x274>)
 801b2a6:	f00a fe5d 	bl	8025f64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ac:	7d1b      	ldrb	r3, [r3, #20]
 801b2ae:	2b0a      	cmp	r3, #10
 801b2b0:	d106      	bne.n	801b2c0 <tcp_slowtmr+0x70>
 801b2b2:	4b82      	ldr	r3, [pc, #520]	; (801b4bc <tcp_slowtmr+0x26c>)
 801b2b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801b2b8:	4984      	ldr	r1, [pc, #528]	; (801b4cc <tcp_slowtmr+0x27c>)
 801b2ba:	4882      	ldr	r0, [pc, #520]	; (801b4c4 <tcp_slowtmr+0x274>)
 801b2bc:	f00a fe52 	bl	8025f64 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2c2:	7f9a      	ldrb	r2, [r3, #30]
 801b2c4:	4b7b      	ldr	r3, [pc, #492]	; (801b4b4 <tcp_slowtmr+0x264>)
 801b2c6:	781b      	ldrb	r3, [r3, #0]
 801b2c8:	429a      	cmp	r2, r3
 801b2ca:	d105      	bne.n	801b2d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801b2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2d2:	68db      	ldr	r3, [r3, #12]
 801b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801b2d6:	e270      	b.n	801b7ba <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801b2d8:	4b76      	ldr	r3, [pc, #472]	; (801b4b4 <tcp_slowtmr+0x264>)
 801b2da:	781a      	ldrb	r2, [r3, #0]
 801b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ee:	7d1b      	ldrb	r3, [r3, #20]
 801b2f0:	2b02      	cmp	r3, #2
 801b2f2:	d10a      	bne.n	801b30a <tcp_slowtmr+0xba>
 801b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b2fa:	2b05      	cmp	r3, #5
 801b2fc:	d905      	bls.n	801b30a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801b2fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b302:	3301      	adds	r3, #1
 801b304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b308:	e11e      	b.n	801b548 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b30c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b310:	2b0b      	cmp	r3, #11
 801b312:	d905      	bls.n	801b320 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801b314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b318:	3301      	adds	r3, #1
 801b31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b31e:	e113      	b.n	801b548 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b322:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b326:	2b00      	cmp	r3, #0
 801b328:	d075      	beq.n	801b416 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d006      	beq.n	801b340 <tcp_slowtmr+0xf0>
 801b332:	4b62      	ldr	r3, [pc, #392]	; (801b4bc <tcp_slowtmr+0x26c>)
 801b334:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801b338:	4965      	ldr	r1, [pc, #404]	; (801b4d0 <tcp_slowtmr+0x280>)
 801b33a:	4862      	ldr	r0, [pc, #392]	; (801b4c4 <tcp_slowtmr+0x274>)
 801b33c:	f00a fe12 	bl	8025f64 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b344:	2b00      	cmp	r3, #0
 801b346:	d106      	bne.n	801b356 <tcp_slowtmr+0x106>
 801b348:	4b5c      	ldr	r3, [pc, #368]	; (801b4bc <tcp_slowtmr+0x26c>)
 801b34a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801b34e:	4961      	ldr	r1, [pc, #388]	; (801b4d4 <tcp_slowtmr+0x284>)
 801b350:	485c      	ldr	r0, [pc, #368]	; (801b4c4 <tcp_slowtmr+0x274>)
 801b352:	f00a fe07 	bl	8025f64 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b358:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b35c:	2b0b      	cmp	r3, #11
 801b35e:	d905      	bls.n	801b36c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801b360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b364:	3301      	adds	r3, #1
 801b366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b36a:	e0ed      	b.n	801b548 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b36e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b372:	3b01      	subs	r3, #1
 801b374:	4a58      	ldr	r2, [pc, #352]	; (801b4d8 <tcp_slowtmr+0x288>)
 801b376:	5cd3      	ldrb	r3, [r2, r3]
 801b378:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801b37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b37c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b380:	7c7a      	ldrb	r2, [r7, #17]
 801b382:	429a      	cmp	r2, r3
 801b384:	d907      	bls.n	801b396 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b388:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b38c:	3301      	adds	r3, #1
 801b38e:	b2da      	uxtb	r2, r3
 801b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b392:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b398:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b39c:	7c7a      	ldrb	r2, [r7, #17]
 801b39e:	429a      	cmp	r2, r3
 801b3a0:	f200 80d2 	bhi.w	801b548 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801b3a4:	2301      	movs	r3, #1
 801b3a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d108      	bne.n	801b3c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b3b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b3b4:	f004 fc2a 	bl	801fc0c <tcp_zero_window_probe>
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d014      	beq.n	801b3e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801b3be:	2300      	movs	r3, #0
 801b3c0:	623b      	str	r3, [r7, #32]
 801b3c2:	e011      	b.n	801b3e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b3ca:	4619      	mov	r1, r3
 801b3cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b3ce:	f003 faef 	bl	801e9b0 <tcp_split_unsent_seg>
 801b3d2:	4603      	mov	r3, r0
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d107      	bne.n	801b3e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801b3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b3da:	f003 fd6f 	bl	801eebc <tcp_output>
 801b3de:	4603      	mov	r3, r0
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d101      	bne.n	801b3e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801b3e8:	6a3b      	ldr	r3, [r7, #32]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	f000 80ac 	beq.w	801b548 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b3fe:	2b06      	cmp	r3, #6
 801b400:	f200 80a2 	bhi.w	801b548 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801b404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b406:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b40a:	3301      	adds	r3, #1
 801b40c:	b2da      	uxtb	r2, r3
 801b40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b410:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801b414:	e098      	b.n	801b548 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b418:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	db0f      	blt.n	801b440 <tcp_slowtmr+0x1f0>
 801b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b422:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b426:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b42a:	4293      	cmp	r3, r2
 801b42c:	d008      	beq.n	801b440 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801b42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b430:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b434:	b29b      	uxth	r3, r3
 801b436:	3301      	adds	r3, #1
 801b438:	b29b      	uxth	r3, r3
 801b43a:	b21a      	sxth	r2, r3
 801b43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b43e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b442:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801b446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b448:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801b44c:	429a      	cmp	r2, r3
 801b44e:	db7b      	blt.n	801b548 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b452:	f004 f825 	bl	801f4a0 <tcp_rexmit_rto_prepare>
 801b456:	4603      	mov	r3, r0
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d007      	beq.n	801b46c <tcp_slowtmr+0x21c>
 801b45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b460:	2b00      	cmp	r3, #0
 801b462:	d171      	bne.n	801b548 <tcp_slowtmr+0x2f8>
 801b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d06d      	beq.n	801b548 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b46e:	7d1b      	ldrb	r3, [r3, #20]
 801b470:	2b02      	cmp	r3, #2
 801b472:	d03a      	beq.n	801b4ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b47a:	2b0c      	cmp	r3, #12
 801b47c:	bf28      	it	cs
 801b47e:	230c      	movcs	r3, #12
 801b480:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b484:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b488:	10db      	asrs	r3, r3, #3
 801b48a:	b21b      	sxth	r3, r3
 801b48c:	461a      	mov	r2, r3
 801b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b490:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b494:	4413      	add	r3, r2
 801b496:	7efa      	ldrb	r2, [r7, #27]
 801b498:	4910      	ldr	r1, [pc, #64]	; (801b4dc <tcp_slowtmr+0x28c>)
 801b49a:	5c8a      	ldrb	r2, [r1, r2]
 801b49c:	4093      	lsls	r3, r2
 801b49e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b4a0:	697b      	ldr	r3, [r7, #20]
 801b4a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801b4a6:	4293      	cmp	r3, r2
 801b4a8:	dc1a      	bgt.n	801b4e0 <tcp_slowtmr+0x290>
 801b4aa:	697b      	ldr	r3, [r7, #20]
 801b4ac:	b21a      	sxth	r2, r3
 801b4ae:	e019      	b.n	801b4e4 <tcp_slowtmr+0x294>
 801b4b0:	2400cffc 	.word	0x2400cffc
 801b4b4:	2400d012 	.word	0x2400d012
 801b4b8:	2400d008 	.word	0x2400d008
 801b4bc:	08027ab8 	.word	0x08027ab8
 801b4c0:	08027dfc 	.word	0x08027dfc
 801b4c4:	08027afc 	.word	0x08027afc
 801b4c8:	08027e28 	.word	0x08027e28
 801b4cc:	08027e54 	.word	0x08027e54
 801b4d0:	08027e84 	.word	0x08027e84
 801b4d4:	08027eb8 	.word	0x08027eb8
 801b4d8:	0802a56c 	.word	0x0802a56c
 801b4dc:	0802a55c 	.word	0x0802a55c
 801b4e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ec:	2200      	movs	r2, #0
 801b4ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b4fc:	4293      	cmp	r3, r2
 801b4fe:	bf28      	it	cs
 801b500:	4613      	movcs	r3, r2
 801b502:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801b504:	8a7b      	ldrh	r3, [r7, #18]
 801b506:	085b      	lsrs	r3, r3, #1
 801b508:	b29a      	uxth	r2, r3
 801b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b50c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b512:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b51a:	005b      	lsls	r3, r3, #1
 801b51c:	b29b      	uxth	r3, r3
 801b51e:	429a      	cmp	r2, r3
 801b520:	d206      	bcs.n	801b530 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b526:	005b      	lsls	r3, r3, #1
 801b528:	b29a      	uxth	r2, r3
 801b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b52c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b532:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801b534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b536:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b53c:	2200      	movs	r2, #0
 801b53e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801b542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b544:	f004 f81c 	bl	801f580 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b54a:	7d1b      	ldrb	r3, [r3, #20]
 801b54c:	2b06      	cmp	r3, #6
 801b54e:	d111      	bne.n	801b574 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b552:	8b5b      	ldrh	r3, [r3, #26]
 801b554:	f003 0310 	and.w	r3, r3, #16
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d00b      	beq.n	801b574 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b55c:	4b9c      	ldr	r3, [pc, #624]	; (801b7d0 <tcp_slowtmr+0x580>)
 801b55e:	681a      	ldr	r2, [r3, #0]
 801b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b562:	6a1b      	ldr	r3, [r3, #32]
 801b564:	1ad3      	subs	r3, r2, r3
 801b566:	2b28      	cmp	r3, #40	; 0x28
 801b568:	d904      	bls.n	801b574 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801b56a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b56e:	3301      	adds	r3, #1
 801b570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b576:	7a5b      	ldrb	r3, [r3, #9]
 801b578:	f003 0308 	and.w	r3, r3, #8
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d04a      	beq.n	801b616 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b582:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b584:	2b04      	cmp	r3, #4
 801b586:	d003      	beq.n	801b590 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b58a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801b58c:	2b07      	cmp	r3, #7
 801b58e:	d142      	bne.n	801b616 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b590:	4b8f      	ldr	r3, [pc, #572]	; (801b7d0 <tcp_slowtmr+0x580>)
 801b592:	681a      	ldr	r2, [r3, #0]
 801b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b596:	6a1b      	ldr	r3, [r3, #32]
 801b598:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b59c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801b5a0:	4b8c      	ldr	r3, [pc, #560]	; (801b7d4 <tcp_slowtmr+0x584>)
 801b5a2:	440b      	add	r3, r1
 801b5a4:	498c      	ldr	r1, [pc, #560]	; (801b7d8 <tcp_slowtmr+0x588>)
 801b5a6:	fba1 1303 	umull	r1, r3, r1, r3
 801b5aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	d90a      	bls.n	801b5c6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801b5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b5b4:	3301      	adds	r3, #1
 801b5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801b5ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b5be:	3301      	adds	r3, #1
 801b5c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b5c4:	e027      	b.n	801b616 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b5c6:	4b82      	ldr	r3, [pc, #520]	; (801b7d0 <tcp_slowtmr+0x580>)
 801b5c8:	681a      	ldr	r2, [r3, #0]
 801b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5cc:	6a1b      	ldr	r3, [r3, #32]
 801b5ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801b5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801b5dc:	4618      	mov	r0, r3
 801b5de:	4b7f      	ldr	r3, [pc, #508]	; (801b7dc <tcp_slowtmr+0x58c>)
 801b5e0:	fb00 f303 	mul.w	r3, r0, r3
 801b5e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b5e6:	497c      	ldr	r1, [pc, #496]	; (801b7d8 <tcp_slowtmr+0x588>)
 801b5e8:	fba1 1303 	umull	r1, r3, r1, r3
 801b5ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b5ee:	429a      	cmp	r2, r3
 801b5f0:	d911      	bls.n	801b616 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801b5f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b5f4:	f004 faca 	bl	801fb8c <tcp_keepalive>
 801b5f8:	4603      	mov	r3, r0
 801b5fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801b5fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801b602:	2b00      	cmp	r3, #0
 801b604:	d107      	bne.n	801b616 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b608:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801b60c:	3301      	adds	r3, #1
 801b60e:	b2da      	uxtb	r2, r3
 801b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b612:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d011      	beq.n	801b642 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b61e:	4b6c      	ldr	r3, [pc, #432]	; (801b7d0 <tcp_slowtmr+0x580>)
 801b620:	681a      	ldr	r2, [r3, #0]
 801b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b624:	6a1b      	ldr	r3, [r3, #32]
 801b626:	1ad2      	subs	r2, r2, r3
 801b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b62a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801b62e:	4619      	mov	r1, r3
 801b630:	460b      	mov	r3, r1
 801b632:	005b      	lsls	r3, r3, #1
 801b634:	440b      	add	r3, r1
 801b636:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801b638:	429a      	cmp	r2, r3
 801b63a:	d302      	bcc.n	801b642 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801b63c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b63e:	f000 fddd 	bl	801c1fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b644:	7d1b      	ldrb	r3, [r3, #20]
 801b646:	2b03      	cmp	r3, #3
 801b648:	d10b      	bne.n	801b662 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b64a:	4b61      	ldr	r3, [pc, #388]	; (801b7d0 <tcp_slowtmr+0x580>)
 801b64c:	681a      	ldr	r2, [r3, #0]
 801b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b650:	6a1b      	ldr	r3, [r3, #32]
 801b652:	1ad3      	subs	r3, r2, r3
 801b654:	2b28      	cmp	r3, #40	; 0x28
 801b656:	d904      	bls.n	801b662 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801b658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b65c:	3301      	adds	r3, #1
 801b65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b664:	7d1b      	ldrb	r3, [r3, #20]
 801b666:	2b09      	cmp	r3, #9
 801b668:	d10b      	bne.n	801b682 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b66a:	4b59      	ldr	r3, [pc, #356]	; (801b7d0 <tcp_slowtmr+0x580>)
 801b66c:	681a      	ldr	r2, [r3, #0]
 801b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b670:	6a1b      	ldr	r3, [r3, #32]
 801b672:	1ad3      	subs	r3, r2, r3
 801b674:	2bf0      	cmp	r3, #240	; 0xf0
 801b676:	d904      	bls.n	801b682 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801b678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b67c:	3301      	adds	r3, #1
 801b67e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801b682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b686:	2b00      	cmp	r3, #0
 801b688:	d060      	beq.n	801b74c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b690:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801b692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b694:	f000 fbfe 	bl	801be94 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d010      	beq.n	801b6c0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b69e:	4b50      	ldr	r3, [pc, #320]	; (801b7e0 <tcp_slowtmr+0x590>)
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6a4:	429a      	cmp	r2, r3
 801b6a6:	d106      	bne.n	801b6b6 <tcp_slowtmr+0x466>
 801b6a8:	4b4e      	ldr	r3, [pc, #312]	; (801b7e4 <tcp_slowtmr+0x594>)
 801b6aa:	f240 526d 	movw	r2, #1389	; 0x56d
 801b6ae:	494e      	ldr	r1, [pc, #312]	; (801b7e8 <tcp_slowtmr+0x598>)
 801b6b0:	484e      	ldr	r0, [pc, #312]	; (801b7ec <tcp_slowtmr+0x59c>)
 801b6b2:	f00a fc57 	bl	8025f64 <iprintf>
        prev->next = pcb->next;
 801b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6b8:	68da      	ldr	r2, [r3, #12]
 801b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6bc:	60da      	str	r2, [r3, #12]
 801b6be:	e00f      	b.n	801b6e0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b6c0:	4b47      	ldr	r3, [pc, #284]	; (801b7e0 <tcp_slowtmr+0x590>)
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6c6:	429a      	cmp	r2, r3
 801b6c8:	d006      	beq.n	801b6d8 <tcp_slowtmr+0x488>
 801b6ca:	4b46      	ldr	r3, [pc, #280]	; (801b7e4 <tcp_slowtmr+0x594>)
 801b6cc:	f240 5271 	movw	r2, #1393	; 0x571
 801b6d0:	4947      	ldr	r1, [pc, #284]	; (801b7f0 <tcp_slowtmr+0x5a0>)
 801b6d2:	4846      	ldr	r0, [pc, #280]	; (801b7ec <tcp_slowtmr+0x59c>)
 801b6d4:	f00a fc46 	bl	8025f64 <iprintf>
        tcp_active_pcbs = pcb->next;
 801b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6da:	68db      	ldr	r3, [r3, #12]
 801b6dc:	4a40      	ldr	r2, [pc, #256]	; (801b7e0 <tcp_slowtmr+0x590>)
 801b6de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801b6e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d013      	beq.n	801b710 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801b6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b6f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6f4:	3304      	adds	r3, #4
 801b6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6f8:	8ad2      	ldrh	r2, [r2, #22]
 801b6fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b6fc:	8b09      	ldrh	r1, [r1, #24]
 801b6fe:	9102      	str	r1, [sp, #8]
 801b700:	9201      	str	r2, [sp, #4]
 801b702:	9300      	str	r3, [sp, #0]
 801b704:	462b      	mov	r3, r5
 801b706:	4622      	mov	r2, r4
 801b708:	4601      	mov	r1, r0
 801b70a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b70c:	f004 f98a 	bl	801fa24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b712:	691b      	ldr	r3, [r3, #16]
 801b714:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b718:	7d1b      	ldrb	r3, [r3, #20]
 801b71a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b71e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b722:	68db      	ldr	r3, [r3, #12]
 801b724:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801b726:	6838      	ldr	r0, [r7, #0]
 801b728:	f7ff f9f4 	bl	801ab14 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801b72c:	4b31      	ldr	r3, [pc, #196]	; (801b7f4 <tcp_slowtmr+0x5a4>)
 801b72e:	2200      	movs	r2, #0
 801b730:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d004      	beq.n	801b742 <tcp_slowtmr+0x4f2>
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	f06f 010c 	mvn.w	r1, #12
 801b73e:	68b8      	ldr	r0, [r7, #8]
 801b740:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801b742:	4b2c      	ldr	r3, [pc, #176]	; (801b7f4 <tcp_slowtmr+0x5a4>)
 801b744:	781b      	ldrb	r3, [r3, #0]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d037      	beq.n	801b7ba <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801b74a:	e592      	b.n	801b272 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801b74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b74e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b752:	68db      	ldr	r3, [r3, #12]
 801b754:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801b756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b758:	7f1b      	ldrb	r3, [r3, #28]
 801b75a:	3301      	adds	r3, #1
 801b75c:	b2da      	uxtb	r2, r3
 801b75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b760:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b764:	7f1a      	ldrb	r2, [r3, #28]
 801b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b768:	7f5b      	ldrb	r3, [r3, #29]
 801b76a:	429a      	cmp	r2, r3
 801b76c:	d325      	bcc.n	801b7ba <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b770:	2200      	movs	r2, #0
 801b772:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801b774:	4b1f      	ldr	r3, [pc, #124]	; (801b7f4 <tcp_slowtmr+0x5a4>)
 801b776:	2200      	movs	r2, #0
 801b778:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b780:	2b00      	cmp	r3, #0
 801b782:	d00b      	beq.n	801b79c <tcp_slowtmr+0x54c>
 801b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b78c:	6912      	ldr	r2, [r2, #16]
 801b78e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b790:	4610      	mov	r0, r2
 801b792:	4798      	blx	r3
 801b794:	4603      	mov	r3, r0
 801b796:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801b79a:	e002      	b.n	801b7a2 <tcp_slowtmr+0x552>
 801b79c:	2300      	movs	r3, #0
 801b79e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801b7a2:	4b14      	ldr	r3, [pc, #80]	; (801b7f4 <tcp_slowtmr+0x5a4>)
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d000      	beq.n	801b7ac <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801b7aa:	e562      	b.n	801b272 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801b7ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d102      	bne.n	801b7ba <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801b7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b7b6:	f003 fb81 	bl	801eebc <tcp_output>
  while (pcb != NULL) {
 801b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	f47f ad5e 	bne.w	801b27e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801b7c6:	4b0c      	ldr	r3, [pc, #48]	; (801b7f8 <tcp_slowtmr+0x5a8>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801b7cc:	e069      	b.n	801b8a2 <tcp_slowtmr+0x652>
 801b7ce:	bf00      	nop
 801b7d0:	2400cffc 	.word	0x2400cffc
 801b7d4:	000a4cb8 	.word	0x000a4cb8
 801b7d8:	10624dd3 	.word	0x10624dd3
 801b7dc:	000124f8 	.word	0x000124f8
 801b7e0:	2400d008 	.word	0x2400d008
 801b7e4:	08027ab8 	.word	0x08027ab8
 801b7e8:	08027ef0 	.word	0x08027ef0
 801b7ec:	08027afc 	.word	0x08027afc
 801b7f0:	08027f1c 	.word	0x08027f1c
 801b7f4:	2400d010 	.word	0x2400d010
 801b7f8:	2400d00c 	.word	0x2400d00c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7fe:	7d1b      	ldrb	r3, [r3, #20]
 801b800:	2b0a      	cmp	r3, #10
 801b802:	d006      	beq.n	801b812 <tcp_slowtmr+0x5c2>
 801b804:	4b2b      	ldr	r3, [pc, #172]	; (801b8b4 <tcp_slowtmr+0x664>)
 801b806:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801b80a:	492b      	ldr	r1, [pc, #172]	; (801b8b8 <tcp_slowtmr+0x668>)
 801b80c:	482b      	ldr	r0, [pc, #172]	; (801b8bc <tcp_slowtmr+0x66c>)
 801b80e:	f00a fba9 	bl	8025f64 <iprintf>
    pcb_remove = 0;
 801b812:	2300      	movs	r3, #0
 801b814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b818:	4b29      	ldr	r3, [pc, #164]	; (801b8c0 <tcp_slowtmr+0x670>)
 801b81a:	681a      	ldr	r2, [r3, #0]
 801b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b81e:	6a1b      	ldr	r3, [r3, #32]
 801b820:	1ad3      	subs	r3, r2, r3
 801b822:	2bf0      	cmp	r3, #240	; 0xf0
 801b824:	d904      	bls.n	801b830 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801b826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b82a:	3301      	adds	r3, #1
 801b82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801b830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b834:	2b00      	cmp	r3, #0
 801b836:	d02f      	beq.n	801b898 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801b838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b83a:	f000 fb2b 	bl	801be94 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b840:	2b00      	cmp	r3, #0
 801b842:	d010      	beq.n	801b866 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b844:	4b1f      	ldr	r3, [pc, #124]	; (801b8c4 <tcp_slowtmr+0x674>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b84a:	429a      	cmp	r2, r3
 801b84c:	d106      	bne.n	801b85c <tcp_slowtmr+0x60c>
 801b84e:	4b19      	ldr	r3, [pc, #100]	; (801b8b4 <tcp_slowtmr+0x664>)
 801b850:	f240 52af 	movw	r2, #1455	; 0x5af
 801b854:	491c      	ldr	r1, [pc, #112]	; (801b8c8 <tcp_slowtmr+0x678>)
 801b856:	4819      	ldr	r0, [pc, #100]	; (801b8bc <tcp_slowtmr+0x66c>)
 801b858:	f00a fb84 	bl	8025f64 <iprintf>
        prev->next = pcb->next;
 801b85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b85e:	68da      	ldr	r2, [r3, #12]
 801b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b862:	60da      	str	r2, [r3, #12]
 801b864:	e00f      	b.n	801b886 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801b866:	4b17      	ldr	r3, [pc, #92]	; (801b8c4 <tcp_slowtmr+0x674>)
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b86c:	429a      	cmp	r2, r3
 801b86e:	d006      	beq.n	801b87e <tcp_slowtmr+0x62e>
 801b870:	4b10      	ldr	r3, [pc, #64]	; (801b8b4 <tcp_slowtmr+0x664>)
 801b872:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801b876:	4915      	ldr	r1, [pc, #84]	; (801b8cc <tcp_slowtmr+0x67c>)
 801b878:	4810      	ldr	r0, [pc, #64]	; (801b8bc <tcp_slowtmr+0x66c>)
 801b87a:	f00a fb73 	bl	8025f64 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b880:	68db      	ldr	r3, [r3, #12]
 801b882:	4a10      	ldr	r2, [pc, #64]	; (801b8c4 <tcp_slowtmr+0x674>)
 801b884:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b888:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b88c:	68db      	ldr	r3, [r3, #12]
 801b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801b890:	69f8      	ldr	r0, [r7, #28]
 801b892:	f7ff f93f 	bl	801ab14 <tcp_free>
 801b896:	e004      	b.n	801b8a2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801b898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b89a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b89e:	68db      	ldr	r3, [r3, #12]
 801b8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d1a9      	bne.n	801b7fc <tcp_slowtmr+0x5ac>
    }
  }
}
 801b8a8:	bf00      	nop
 801b8aa:	bf00      	nop
 801b8ac:	3730      	adds	r7, #48	; 0x30
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	bdb0      	pop	{r4, r5, r7, pc}
 801b8b2:	bf00      	nop
 801b8b4:	08027ab8 	.word	0x08027ab8
 801b8b8:	08027f48 	.word	0x08027f48
 801b8bc:	08027afc 	.word	0x08027afc
 801b8c0:	2400cffc 	.word	0x2400cffc
 801b8c4:	2400d00c 	.word	0x2400d00c
 801b8c8:	08027f78 	.word	0x08027f78
 801b8cc:	08027fa0 	.word	0x08027fa0

0801b8d0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801b8d0:	b580      	push	{r7, lr}
 801b8d2:	b082      	sub	sp, #8
 801b8d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801b8d6:	4b2d      	ldr	r3, [pc, #180]	; (801b98c <tcp_fasttmr+0xbc>)
 801b8d8:	781b      	ldrb	r3, [r3, #0]
 801b8da:	3301      	adds	r3, #1
 801b8dc:	b2da      	uxtb	r2, r3
 801b8de:	4b2b      	ldr	r3, [pc, #172]	; (801b98c <tcp_fasttmr+0xbc>)
 801b8e0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801b8e2:	4b2b      	ldr	r3, [pc, #172]	; (801b990 <tcp_fasttmr+0xc0>)
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801b8e8:	e048      	b.n	801b97c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	7f9a      	ldrb	r2, [r3, #30]
 801b8ee:	4b27      	ldr	r3, [pc, #156]	; (801b98c <tcp_fasttmr+0xbc>)
 801b8f0:	781b      	ldrb	r3, [r3, #0]
 801b8f2:	429a      	cmp	r2, r3
 801b8f4:	d03f      	beq.n	801b976 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801b8f6:	4b25      	ldr	r3, [pc, #148]	; (801b98c <tcp_fasttmr+0xbc>)
 801b8f8:	781a      	ldrb	r2, [r3, #0]
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	8b5b      	ldrh	r3, [r3, #26]
 801b902:	f003 0301 	and.w	r3, r3, #1
 801b906:	2b00      	cmp	r3, #0
 801b908:	d010      	beq.n	801b92c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	8b5b      	ldrh	r3, [r3, #26]
 801b90e:	f043 0302 	orr.w	r3, r3, #2
 801b912:	b29a      	uxth	r2, r3
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801b918:	6878      	ldr	r0, [r7, #4]
 801b91a:	f003 facf 	bl	801eebc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	8b5b      	ldrh	r3, [r3, #26]
 801b922:	f023 0303 	bic.w	r3, r3, #3
 801b926:	b29a      	uxth	r2, r3
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	8b5b      	ldrh	r3, [r3, #26]
 801b930:	f003 0308 	and.w	r3, r3, #8
 801b934:	2b00      	cmp	r3, #0
 801b936:	d009      	beq.n	801b94c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	8b5b      	ldrh	r3, [r3, #26]
 801b93c:	f023 0308 	bic.w	r3, r3, #8
 801b940:	b29a      	uxth	r2, r3
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801b946:	6878      	ldr	r0, [r7, #4]
 801b948:	f7ff fa78 	bl	801ae3c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	68db      	ldr	r3, [r3, #12]
 801b950:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b956:	2b00      	cmp	r3, #0
 801b958:	d00a      	beq.n	801b970 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801b95a:	4b0e      	ldr	r3, [pc, #56]	; (801b994 <tcp_fasttmr+0xc4>)
 801b95c:	2200      	movs	r2, #0
 801b95e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801b960:	6878      	ldr	r0, [r7, #4]
 801b962:	f000 f819 	bl	801b998 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801b966:	4b0b      	ldr	r3, [pc, #44]	; (801b994 <tcp_fasttmr+0xc4>)
 801b968:	781b      	ldrb	r3, [r3, #0]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d000      	beq.n	801b970 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801b96e:	e7b8      	b.n	801b8e2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801b970:	683b      	ldr	r3, [r7, #0]
 801b972:	607b      	str	r3, [r7, #4]
 801b974:	e002      	b.n	801b97c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	68db      	ldr	r3, [r3, #12]
 801b97a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d1b3      	bne.n	801b8ea <tcp_fasttmr+0x1a>
    }
  }
}
 801b982:	bf00      	nop
 801b984:	bf00      	nop
 801b986:	3708      	adds	r7, #8
 801b988:	46bd      	mov	sp, r7
 801b98a:	bd80      	pop	{r7, pc}
 801b98c:	2400d012 	.word	0x2400d012
 801b990:	2400d008 	.word	0x2400d008
 801b994:	2400d010 	.word	0x2400d010

0801b998 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801b998:	b590      	push	{r4, r7, lr}
 801b99a:	b085      	sub	sp, #20
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d109      	bne.n	801b9ba <tcp_process_refused_data+0x22>
 801b9a6:	4b37      	ldr	r3, [pc, #220]	; (801ba84 <tcp_process_refused_data+0xec>)
 801b9a8:	f240 6209 	movw	r2, #1545	; 0x609
 801b9ac:	4936      	ldr	r1, [pc, #216]	; (801ba88 <tcp_process_refused_data+0xf0>)
 801b9ae:	4837      	ldr	r0, [pc, #220]	; (801ba8c <tcp_process_refused_data+0xf4>)
 801b9b0:	f00a fad8 	bl	8025f64 <iprintf>
 801b9b4:	f06f 030f 	mvn.w	r3, #15
 801b9b8:	e060      	b.n	801ba7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b9be:	7b5b      	ldrb	r3, [r3, #13]
 801b9c0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b9c6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	2200      	movs	r2, #0
 801b9cc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d00b      	beq.n	801b9f0 <tcp_process_refused_data+0x58>
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	6918      	ldr	r0, [r3, #16]
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	68ba      	ldr	r2, [r7, #8]
 801b9e6:	6879      	ldr	r1, [r7, #4]
 801b9e8:	47a0      	blx	r4
 801b9ea:	4603      	mov	r3, r0
 801b9ec:	73fb      	strb	r3, [r7, #15]
 801b9ee:	e007      	b.n	801ba00 <tcp_process_refused_data+0x68>
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	68ba      	ldr	r2, [r7, #8]
 801b9f4:	6879      	ldr	r1, [r7, #4]
 801b9f6:	2000      	movs	r0, #0
 801b9f8:	f000 f8a4 	bl	801bb44 <tcp_recv_null>
 801b9fc:	4603      	mov	r3, r0
 801b9fe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801ba00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d12a      	bne.n	801ba5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801ba08:	7bbb      	ldrb	r3, [r7, #14]
 801ba0a:	f003 0320 	and.w	r3, r3, #32
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d033      	beq.n	801ba7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ba16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801ba1a:	d005      	beq.n	801ba28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ba20:	3301      	adds	r3, #1
 801ba22:	b29a      	uxth	r2, r3
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d00b      	beq.n	801ba4a <tcp_process_refused_data+0xb2>
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	6918      	ldr	r0, [r3, #16]
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	2200      	movs	r2, #0
 801ba40:	6879      	ldr	r1, [r7, #4]
 801ba42:	47a0      	blx	r4
 801ba44:	4603      	mov	r3, r0
 801ba46:	73fb      	strb	r3, [r7, #15]
 801ba48:	e001      	b.n	801ba4e <tcp_process_refused_data+0xb6>
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801ba4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ba52:	f113 0f0d 	cmn.w	r3, #13
 801ba56:	d110      	bne.n	801ba7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801ba58:	f06f 030c 	mvn.w	r3, #12
 801ba5c:	e00e      	b.n	801ba7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801ba5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ba62:	f113 0f0d 	cmn.w	r3, #13
 801ba66:	d102      	bne.n	801ba6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801ba68:	f06f 030c 	mvn.w	r3, #12
 801ba6c:	e006      	b.n	801ba7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	68ba      	ldr	r2, [r7, #8]
 801ba72:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801ba74:	f06f 0304 	mvn.w	r3, #4
 801ba78:	e000      	b.n	801ba7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801ba7a:	2300      	movs	r3, #0
}
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	3714      	adds	r7, #20
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd90      	pop	{r4, r7, pc}
 801ba84:	08027ab8 	.word	0x08027ab8
 801ba88:	08027fc8 	.word	0x08027fc8
 801ba8c:	08027afc 	.word	0x08027afc

0801ba90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b084      	sub	sp, #16
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801ba98:	e007      	b.n	801baaa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801baa0:	6878      	ldr	r0, [r7, #4]
 801baa2:	f000 f80a 	bl	801baba <tcp_seg_free>
    seg = next;
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d1f4      	bne.n	801ba9a <tcp_segs_free+0xa>
  }
}
 801bab0:	bf00      	nop
 801bab2:	bf00      	nop
 801bab4:	3710      	adds	r7, #16
 801bab6:	46bd      	mov	sp, r7
 801bab8:	bd80      	pop	{r7, pc}

0801baba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801baba:	b580      	push	{r7, lr}
 801babc:	b082      	sub	sp, #8
 801babe:	af00      	add	r7, sp, #0
 801bac0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d00c      	beq.n	801bae2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	685b      	ldr	r3, [r3, #4]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d004      	beq.n	801bada <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	685b      	ldr	r3, [r3, #4]
 801bad4:	4618      	mov	r0, r3
 801bad6:	f7fe fd61 	bl	801a59c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801bada:	6879      	ldr	r1, [r7, #4]
 801badc:	2003      	movs	r0, #3
 801bade:	f7fd fead 	bl	801983c <memp_free>
  }
}
 801bae2:	bf00      	nop
 801bae4:	3708      	adds	r7, #8
 801bae6:	46bd      	mov	sp, r7
 801bae8:	bd80      	pop	{r7, pc}
	...

0801baec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b084      	sub	sp, #16
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d106      	bne.n	801bb08 <tcp_seg_copy+0x1c>
 801bafa:	4b0f      	ldr	r3, [pc, #60]	; (801bb38 <tcp_seg_copy+0x4c>)
 801bafc:	f240 6282 	movw	r2, #1666	; 0x682
 801bb00:	490e      	ldr	r1, [pc, #56]	; (801bb3c <tcp_seg_copy+0x50>)
 801bb02:	480f      	ldr	r0, [pc, #60]	; (801bb40 <tcp_seg_copy+0x54>)
 801bb04:	f00a fa2e 	bl	8025f64 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801bb08:	2003      	movs	r0, #3
 801bb0a:	f7fd fe21 	bl	8019750 <memp_malloc>
 801bb0e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d101      	bne.n	801bb1a <tcp_seg_copy+0x2e>
    return NULL;
 801bb16:	2300      	movs	r3, #0
 801bb18:	e00a      	b.n	801bb30 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bb1a:	2210      	movs	r2, #16
 801bb1c:	6879      	ldr	r1, [r7, #4]
 801bb1e:	68f8      	ldr	r0, [r7, #12]
 801bb20:	f00a f914 	bl	8025d4c <memcpy>
  pbuf_ref(cseg->p);
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	685b      	ldr	r3, [r3, #4]
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f7fe fddd 	bl	801a6e8 <pbuf_ref>
  return cseg;
 801bb2e:	68fb      	ldr	r3, [r7, #12]
}
 801bb30:	4618      	mov	r0, r3
 801bb32:	3710      	adds	r7, #16
 801bb34:	46bd      	mov	sp, r7
 801bb36:	bd80      	pop	{r7, pc}
 801bb38:	08027ab8 	.word	0x08027ab8
 801bb3c:	0802800c 	.word	0x0802800c
 801bb40:	08027afc 	.word	0x08027afc

0801bb44 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b084      	sub	sp, #16
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	60f8      	str	r0, [r7, #12]
 801bb4c:	60b9      	str	r1, [r7, #8]
 801bb4e:	607a      	str	r2, [r7, #4]
 801bb50:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb52:	68bb      	ldr	r3, [r7, #8]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d109      	bne.n	801bb6c <tcp_recv_null+0x28>
 801bb58:	4b12      	ldr	r3, [pc, #72]	; (801bba4 <tcp_recv_null+0x60>)
 801bb5a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bb5e:	4912      	ldr	r1, [pc, #72]	; (801bba8 <tcp_recv_null+0x64>)
 801bb60:	4812      	ldr	r0, [pc, #72]	; (801bbac <tcp_recv_null+0x68>)
 801bb62:	f00a f9ff 	bl	8025f64 <iprintf>
 801bb66:	f06f 030f 	mvn.w	r3, #15
 801bb6a:	e016      	b.n	801bb9a <tcp_recv_null+0x56>

  if (p != NULL) {
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d009      	beq.n	801bb86 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	891b      	ldrh	r3, [r3, #8]
 801bb76:	4619      	mov	r1, r3
 801bb78:	68b8      	ldr	r0, [r7, #8]
 801bb7a:	f7ff fb19 	bl	801b1b0 <tcp_recved>
    pbuf_free(p);
 801bb7e:	6878      	ldr	r0, [r7, #4]
 801bb80:	f7fe fd0c 	bl	801a59c <pbuf_free>
 801bb84:	e008      	b.n	801bb98 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801bb86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d104      	bne.n	801bb98 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801bb8e:	68b8      	ldr	r0, [r7, #8]
 801bb90:	f7ff f9be 	bl	801af10 <tcp_close>
 801bb94:	4603      	mov	r3, r0
 801bb96:	e000      	b.n	801bb9a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801bb98:	2300      	movs	r3, #0
}
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	3710      	adds	r7, #16
 801bb9e:	46bd      	mov	sp, r7
 801bba0:	bd80      	pop	{r7, pc}
 801bba2:	bf00      	nop
 801bba4:	08027ab8 	.word	0x08027ab8
 801bba8:	08028028 	.word	0x08028028
 801bbac:	08027afc 	.word	0x08027afc

0801bbb0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801bbb0:	b580      	push	{r7, lr}
 801bbb2:	b086      	sub	sp, #24
 801bbb4:	af00      	add	r7, sp, #0
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801bbba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	db01      	blt.n	801bbc6 <tcp_kill_prio+0x16>
 801bbc2:	79fb      	ldrb	r3, [r7, #7]
 801bbc4:	e000      	b.n	801bbc8 <tcp_kill_prio+0x18>
 801bbc6:	237f      	movs	r3, #127	; 0x7f
 801bbc8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801bbca:	7afb      	ldrb	r3, [r7, #11]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d034      	beq.n	801bc3a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801bbd0:	7afb      	ldrb	r3, [r7, #11]
 801bbd2:	3b01      	subs	r3, #1
 801bbd4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bbde:	4b19      	ldr	r3, [pc, #100]	; (801bc44 <tcp_kill_prio+0x94>)
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	617b      	str	r3, [r7, #20]
 801bbe4:	e01f      	b.n	801bc26 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	7d5b      	ldrb	r3, [r3, #21]
 801bbea:	7afa      	ldrb	r2, [r7, #11]
 801bbec:	429a      	cmp	r2, r3
 801bbee:	d80c      	bhi.n	801bc0a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bbf0:	697b      	ldr	r3, [r7, #20]
 801bbf2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801bbf4:	7afa      	ldrb	r2, [r7, #11]
 801bbf6:	429a      	cmp	r2, r3
 801bbf8:	d112      	bne.n	801bc20 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bbfa:	4b13      	ldr	r3, [pc, #76]	; (801bc48 <tcp_kill_prio+0x98>)
 801bbfc:	681a      	ldr	r2, [r3, #0]
 801bbfe:	697b      	ldr	r3, [r7, #20]
 801bc00:	6a1b      	ldr	r3, [r3, #32]
 801bc02:	1ad3      	subs	r3, r2, r3
 801bc04:	68fa      	ldr	r2, [r7, #12]
 801bc06:	429a      	cmp	r2, r3
 801bc08:	d80a      	bhi.n	801bc20 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801bc0a:	4b0f      	ldr	r3, [pc, #60]	; (801bc48 <tcp_kill_prio+0x98>)
 801bc0c:	681a      	ldr	r2, [r3, #0]
 801bc0e:	697b      	ldr	r3, [r7, #20]
 801bc10:	6a1b      	ldr	r3, [r3, #32]
 801bc12:	1ad3      	subs	r3, r2, r3
 801bc14:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801bc16:	697b      	ldr	r3, [r7, #20]
 801bc18:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801bc1a:	697b      	ldr	r3, [r7, #20]
 801bc1c:	7d5b      	ldrb	r3, [r3, #21]
 801bc1e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc20:	697b      	ldr	r3, [r7, #20]
 801bc22:	68db      	ldr	r3, [r3, #12]
 801bc24:	617b      	str	r3, [r7, #20]
 801bc26:	697b      	ldr	r3, [r7, #20]
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d1dc      	bne.n	801bbe6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801bc2c:	693b      	ldr	r3, [r7, #16]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d004      	beq.n	801bc3c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bc32:	6938      	ldr	r0, [r7, #16]
 801bc34:	f7ff fa56 	bl	801b0e4 <tcp_abort>
 801bc38:	e000      	b.n	801bc3c <tcp_kill_prio+0x8c>
    return;
 801bc3a:	bf00      	nop
  }
}
 801bc3c:	3718      	adds	r7, #24
 801bc3e:	46bd      	mov	sp, r7
 801bc40:	bd80      	pop	{r7, pc}
 801bc42:	bf00      	nop
 801bc44:	2400d008 	.word	0x2400d008
 801bc48:	2400cffc 	.word	0x2400cffc

0801bc4c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b086      	sub	sp, #24
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	4603      	mov	r3, r0
 801bc54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801bc56:	79fb      	ldrb	r3, [r7, #7]
 801bc58:	2b08      	cmp	r3, #8
 801bc5a:	d009      	beq.n	801bc70 <tcp_kill_state+0x24>
 801bc5c:	79fb      	ldrb	r3, [r7, #7]
 801bc5e:	2b09      	cmp	r3, #9
 801bc60:	d006      	beq.n	801bc70 <tcp_kill_state+0x24>
 801bc62:	4b1a      	ldr	r3, [pc, #104]	; (801bccc <tcp_kill_state+0x80>)
 801bc64:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801bc68:	4919      	ldr	r1, [pc, #100]	; (801bcd0 <tcp_kill_state+0x84>)
 801bc6a:	481a      	ldr	r0, [pc, #104]	; (801bcd4 <tcp_kill_state+0x88>)
 801bc6c:	f00a f97a 	bl	8025f64 <iprintf>

  inactivity = 0;
 801bc70:	2300      	movs	r3, #0
 801bc72:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bc74:	2300      	movs	r3, #0
 801bc76:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc78:	4b17      	ldr	r3, [pc, #92]	; (801bcd8 <tcp_kill_state+0x8c>)
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	617b      	str	r3, [r7, #20]
 801bc7e:	e017      	b.n	801bcb0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	7d1b      	ldrb	r3, [r3, #20]
 801bc84:	79fa      	ldrb	r2, [r7, #7]
 801bc86:	429a      	cmp	r2, r3
 801bc88:	d10f      	bne.n	801bcaa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bc8a:	4b14      	ldr	r3, [pc, #80]	; (801bcdc <tcp_kill_state+0x90>)
 801bc8c:	681a      	ldr	r2, [r3, #0]
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	6a1b      	ldr	r3, [r3, #32]
 801bc92:	1ad3      	subs	r3, r2, r3
 801bc94:	68fa      	ldr	r2, [r7, #12]
 801bc96:	429a      	cmp	r2, r3
 801bc98:	d807      	bhi.n	801bcaa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801bc9a:	4b10      	ldr	r3, [pc, #64]	; (801bcdc <tcp_kill_state+0x90>)
 801bc9c:	681a      	ldr	r2, [r3, #0]
 801bc9e:	697b      	ldr	r3, [r7, #20]
 801bca0:	6a1b      	ldr	r3, [r3, #32]
 801bca2:	1ad3      	subs	r3, r2, r3
 801bca4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801bca6:	697b      	ldr	r3, [r7, #20]
 801bca8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bcaa:	697b      	ldr	r3, [r7, #20]
 801bcac:	68db      	ldr	r3, [r3, #12]
 801bcae:	617b      	str	r3, [r7, #20]
 801bcb0:	697b      	ldr	r3, [r7, #20]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d1e4      	bne.n	801bc80 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801bcb6:	693b      	ldr	r3, [r7, #16]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d003      	beq.n	801bcc4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801bcbc:	2100      	movs	r1, #0
 801bcbe:	6938      	ldr	r0, [r7, #16]
 801bcc0:	f7ff f952 	bl	801af68 <tcp_abandon>
  }
}
 801bcc4:	bf00      	nop
 801bcc6:	3718      	adds	r7, #24
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	bd80      	pop	{r7, pc}
 801bccc:	08027ab8 	.word	0x08027ab8
 801bcd0:	08028044 	.word	0x08028044
 801bcd4:	08027afc 	.word	0x08027afc
 801bcd8:	2400d008 	.word	0x2400d008
 801bcdc:	2400cffc 	.word	0x2400cffc

0801bce0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b084      	sub	sp, #16
 801bce4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801bce6:	2300      	movs	r3, #0
 801bce8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801bcea:	2300      	movs	r3, #0
 801bcec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bcee:	4b12      	ldr	r3, [pc, #72]	; (801bd38 <tcp_kill_timewait+0x58>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	60fb      	str	r3, [r7, #12]
 801bcf4:	e012      	b.n	801bd1c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bcf6:	4b11      	ldr	r3, [pc, #68]	; (801bd3c <tcp_kill_timewait+0x5c>)
 801bcf8:	681a      	ldr	r2, [r3, #0]
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	6a1b      	ldr	r3, [r3, #32]
 801bcfe:	1ad3      	subs	r3, r2, r3
 801bd00:	687a      	ldr	r2, [r7, #4]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d807      	bhi.n	801bd16 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801bd06:	4b0d      	ldr	r3, [pc, #52]	; (801bd3c <tcp_kill_timewait+0x5c>)
 801bd08:	681a      	ldr	r2, [r3, #0]
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	6a1b      	ldr	r3, [r3, #32]
 801bd0e:	1ad3      	subs	r3, r2, r3
 801bd10:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	68db      	ldr	r3, [r3, #12]
 801bd1a:	60fb      	str	r3, [r7, #12]
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d1e9      	bne.n	801bcf6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801bd22:	68bb      	ldr	r3, [r7, #8]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d002      	beq.n	801bd2e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bd28:	68b8      	ldr	r0, [r7, #8]
 801bd2a:	f7ff f9db 	bl	801b0e4 <tcp_abort>
  }
}
 801bd2e:	bf00      	nop
 801bd30:	3710      	adds	r7, #16
 801bd32:	46bd      	mov	sp, r7
 801bd34:	bd80      	pop	{r7, pc}
 801bd36:	bf00      	nop
 801bd38:	2400d00c 	.word	0x2400d00c
 801bd3c:	2400cffc 	.word	0x2400cffc

0801bd40 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801bd40:	b580      	push	{r7, lr}
 801bd42:	b082      	sub	sp, #8
 801bd44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801bd46:	4b10      	ldr	r3, [pc, #64]	; (801bd88 <tcp_handle_closepend+0x48>)
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801bd4c:	e014      	b.n	801bd78 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	68db      	ldr	r3, [r3, #12]
 801bd52:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	8b5b      	ldrh	r3, [r3, #26]
 801bd58:	f003 0308 	and.w	r3, r3, #8
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d009      	beq.n	801bd74 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	8b5b      	ldrh	r3, [r3, #26]
 801bd64:	f023 0308 	bic.w	r3, r3, #8
 801bd68:	b29a      	uxth	r2, r3
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801bd6e:	6878      	ldr	r0, [r7, #4]
 801bd70:	f7ff f864 	bl	801ae3c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d1e7      	bne.n	801bd4e <tcp_handle_closepend+0xe>
  }
}
 801bd7e:	bf00      	nop
 801bd80:	bf00      	nop
 801bd82:	3708      	adds	r7, #8
 801bd84:	46bd      	mov	sp, r7
 801bd86:	bd80      	pop	{r7, pc}
 801bd88:	2400d008 	.word	0x2400d008

0801bd8c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b084      	sub	sp, #16
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	4603      	mov	r3, r0
 801bd94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bd96:	2001      	movs	r0, #1
 801bd98:	f7fd fcda 	bl	8019750 <memp_malloc>
 801bd9c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d126      	bne.n	801bdf2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801bda4:	f7ff ffcc 	bl	801bd40 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801bda8:	f7ff ff9a 	bl	801bce0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bdac:	2001      	movs	r0, #1
 801bdae:	f7fd fccf 	bl	8019750 <memp_malloc>
 801bdb2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d11b      	bne.n	801bdf2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801bdba:	2009      	movs	r0, #9
 801bdbc:	f7ff ff46 	bl	801bc4c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bdc0:	2001      	movs	r0, #1
 801bdc2:	f7fd fcc5 	bl	8019750 <memp_malloc>
 801bdc6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d111      	bne.n	801bdf2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801bdce:	2008      	movs	r0, #8
 801bdd0:	f7ff ff3c 	bl	801bc4c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bdd4:	2001      	movs	r0, #1
 801bdd6:	f7fd fcbb 	bl	8019750 <memp_malloc>
 801bdda:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d107      	bne.n	801bdf2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801bde2:	79fb      	ldrb	r3, [r7, #7]
 801bde4:	4618      	mov	r0, r3
 801bde6:	f7ff fee3 	bl	801bbb0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801bdea:	2001      	movs	r0, #1
 801bdec:	f7fd fcb0 	bl	8019750 <memp_malloc>
 801bdf0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d03f      	beq.n	801be78 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801bdf8:	229c      	movs	r2, #156	; 0x9c
 801bdfa:	2100      	movs	r1, #0
 801bdfc:	68f8      	ldr	r0, [r7, #12]
 801bdfe:	f009 ffb3 	bl	8025d68 <memset>
    pcb->prio = prio;
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	79fa      	ldrb	r2, [r7, #7]
 801be06:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801be0e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801be18:	855a      	strh	r2, [r3, #42]	; 0x2a
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	22ff      	movs	r2, #255	; 0xff
 801be26:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801be2e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	2206      	movs	r2, #6
 801be34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	2206      	movs	r2, #6
 801be3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801be3e:	68fb      	ldr	r3, [r7, #12]
 801be40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be44:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	2201      	movs	r2, #1
 801be4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801be4e:	4b0d      	ldr	r3, [pc, #52]	; (801be84 <tcp_alloc+0xf8>)
 801be50:	681a      	ldr	r2, [r3, #0]
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801be56:	4b0c      	ldr	r3, [pc, #48]	; (801be88 <tcp_alloc+0xfc>)
 801be58:	781a      	ldrb	r2, [r3, #0]
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801be64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	4a08      	ldr	r2, [pc, #32]	; (801be8c <tcp_alloc+0x100>)
 801be6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	4a07      	ldr	r2, [pc, #28]	; (801be90 <tcp_alloc+0x104>)
 801be74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801be78:	68fb      	ldr	r3, [r7, #12]
}
 801be7a:	4618      	mov	r0, r3
 801be7c:	3710      	adds	r7, #16
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}
 801be82:	bf00      	nop
 801be84:	2400cffc 	.word	0x2400cffc
 801be88:	2400d012 	.word	0x2400d012
 801be8c:	0801bb45 	.word	0x0801bb45
 801be90:	006ddd00 	.word	0x006ddd00

0801be94 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b082      	sub	sp, #8
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d107      	bne.n	801beb2 <tcp_pcb_purge+0x1e>
 801bea2:	4b21      	ldr	r3, [pc, #132]	; (801bf28 <tcp_pcb_purge+0x94>)
 801bea4:	f640 0251 	movw	r2, #2129	; 0x851
 801bea8:	4920      	ldr	r1, [pc, #128]	; (801bf2c <tcp_pcb_purge+0x98>)
 801beaa:	4821      	ldr	r0, [pc, #132]	; (801bf30 <tcp_pcb_purge+0x9c>)
 801beac:	f00a f85a 	bl	8025f64 <iprintf>
 801beb0:	e037      	b.n	801bf22 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	7d1b      	ldrb	r3, [r3, #20]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d033      	beq.n	801bf22 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801bebe:	2b0a      	cmp	r3, #10
 801bec0:	d02f      	beq.n	801bf22 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801bec6:	2b01      	cmp	r3, #1
 801bec8:	d02b      	beq.n	801bf22 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d007      	beq.n	801bee2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bed6:	4618      	mov	r0, r3
 801bed8:	f7fe fb60 	bl	801a59c <pbuf_free>
      pcb->refused_data = NULL;
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	2200      	movs	r2, #0
 801bee0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d002      	beq.n	801bef0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801beea:	6878      	ldr	r0, [r7, #4]
 801beec:	f000 f986 	bl	801c1fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bef6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801befc:	4618      	mov	r0, r3
 801befe:	f7ff fdc7 	bl	801ba90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf06:	4618      	mov	r0, r3
 801bf08:	f7ff fdc2 	bl	801ba90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	66da      	str	r2, [r3, #108]	; 0x6c
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	2200      	movs	r2, #0
 801bf1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801bf22:	3708      	adds	r7, #8
 801bf24:	46bd      	mov	sp, r7
 801bf26:	bd80      	pop	{r7, pc}
 801bf28:	08027ab8 	.word	0x08027ab8
 801bf2c:	08028104 	.word	0x08028104
 801bf30:	08027afc 	.word	0x08027afc

0801bf34 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801bf34:	b580      	push	{r7, lr}
 801bf36:	b084      	sub	sp, #16
 801bf38:	af00      	add	r7, sp, #0
 801bf3a:	6078      	str	r0, [r7, #4]
 801bf3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801bf3e:	683b      	ldr	r3, [r7, #0]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d106      	bne.n	801bf52 <tcp_pcb_remove+0x1e>
 801bf44:	4b3e      	ldr	r3, [pc, #248]	; (801c040 <tcp_pcb_remove+0x10c>)
 801bf46:	f640 0283 	movw	r2, #2179	; 0x883
 801bf4a:	493e      	ldr	r1, [pc, #248]	; (801c044 <tcp_pcb_remove+0x110>)
 801bf4c:	483e      	ldr	r0, [pc, #248]	; (801c048 <tcp_pcb_remove+0x114>)
 801bf4e:	f00a f809 	bl	8025f64 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d106      	bne.n	801bf66 <tcp_pcb_remove+0x32>
 801bf58:	4b39      	ldr	r3, [pc, #228]	; (801c040 <tcp_pcb_remove+0x10c>)
 801bf5a:	f640 0284 	movw	r2, #2180	; 0x884
 801bf5e:	493b      	ldr	r1, [pc, #236]	; (801c04c <tcp_pcb_remove+0x118>)
 801bf60:	4839      	ldr	r0, [pc, #228]	; (801c048 <tcp_pcb_remove+0x114>)
 801bf62:	f009 ffff 	bl	8025f64 <iprintf>

  TCP_RMV(pcblist, pcb);
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	683a      	ldr	r2, [r7, #0]
 801bf6c:	429a      	cmp	r2, r3
 801bf6e:	d105      	bne.n	801bf7c <tcp_pcb_remove+0x48>
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	68da      	ldr	r2, [r3, #12]
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	601a      	str	r2, [r3, #0]
 801bf7a:	e013      	b.n	801bfa4 <tcp_pcb_remove+0x70>
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	60fb      	str	r3, [r7, #12]
 801bf82:	e00c      	b.n	801bf9e <tcp_pcb_remove+0x6a>
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	68db      	ldr	r3, [r3, #12]
 801bf88:	683a      	ldr	r2, [r7, #0]
 801bf8a:	429a      	cmp	r2, r3
 801bf8c:	d104      	bne.n	801bf98 <tcp_pcb_remove+0x64>
 801bf8e:	683b      	ldr	r3, [r7, #0]
 801bf90:	68da      	ldr	r2, [r3, #12]
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	60da      	str	r2, [r3, #12]
 801bf96:	e005      	b.n	801bfa4 <tcp_pcb_remove+0x70>
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	68db      	ldr	r3, [r3, #12]
 801bf9c:	60fb      	str	r3, [r7, #12]
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d1ef      	bne.n	801bf84 <tcp_pcb_remove+0x50>
 801bfa4:	683b      	ldr	r3, [r7, #0]
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801bfaa:	6838      	ldr	r0, [r7, #0]
 801bfac:	f7ff ff72 	bl	801be94 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	7d1b      	ldrb	r3, [r3, #20]
 801bfb4:	2b0a      	cmp	r3, #10
 801bfb6:	d013      	beq.n	801bfe0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801bfbc:	2b01      	cmp	r3, #1
 801bfbe:	d00f      	beq.n	801bfe0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801bfc0:	683b      	ldr	r3, [r7, #0]
 801bfc2:	8b5b      	ldrh	r3, [r3, #26]
 801bfc4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d009      	beq.n	801bfe0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801bfcc:	683b      	ldr	r3, [r7, #0]
 801bfce:	8b5b      	ldrh	r3, [r3, #26]
 801bfd0:	f043 0302 	orr.w	r3, r3, #2
 801bfd4:	b29a      	uxth	r2, r3
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bfda:	6838      	ldr	r0, [r7, #0]
 801bfdc:	f002 ff6e 	bl	801eebc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801bfe0:	683b      	ldr	r3, [r7, #0]
 801bfe2:	7d1b      	ldrb	r3, [r3, #20]
 801bfe4:	2b01      	cmp	r3, #1
 801bfe6:	d020      	beq.n	801c02a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801bfe8:	683b      	ldr	r3, [r7, #0]
 801bfea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d006      	beq.n	801bffe <tcp_pcb_remove+0xca>
 801bff0:	4b13      	ldr	r3, [pc, #76]	; (801c040 <tcp_pcb_remove+0x10c>)
 801bff2:	f640 0293 	movw	r2, #2195	; 0x893
 801bff6:	4916      	ldr	r1, [pc, #88]	; (801c050 <tcp_pcb_remove+0x11c>)
 801bff8:	4813      	ldr	r0, [pc, #76]	; (801c048 <tcp_pcb_remove+0x114>)
 801bffa:	f009 ffb3 	bl	8025f64 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801bffe:	683b      	ldr	r3, [r7, #0]
 801c000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c002:	2b00      	cmp	r3, #0
 801c004:	d006      	beq.n	801c014 <tcp_pcb_remove+0xe0>
 801c006:	4b0e      	ldr	r3, [pc, #56]	; (801c040 <tcp_pcb_remove+0x10c>)
 801c008:	f640 0294 	movw	r2, #2196	; 0x894
 801c00c:	4911      	ldr	r1, [pc, #68]	; (801c054 <tcp_pcb_remove+0x120>)
 801c00e:	480e      	ldr	r0, [pc, #56]	; (801c048 <tcp_pcb_remove+0x114>)
 801c010:	f009 ffa8 	bl	8025f64 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c014:	683b      	ldr	r3, [r7, #0]
 801c016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d006      	beq.n	801c02a <tcp_pcb_remove+0xf6>
 801c01c:	4b08      	ldr	r3, [pc, #32]	; (801c040 <tcp_pcb_remove+0x10c>)
 801c01e:	f640 0296 	movw	r2, #2198	; 0x896
 801c022:	490d      	ldr	r1, [pc, #52]	; (801c058 <tcp_pcb_remove+0x124>)
 801c024:	4808      	ldr	r0, [pc, #32]	; (801c048 <tcp_pcb_remove+0x114>)
 801c026:	f009 ff9d 	bl	8025f64 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801c02a:	683b      	ldr	r3, [r7, #0]
 801c02c:	2200      	movs	r2, #0
 801c02e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801c030:	683b      	ldr	r3, [r7, #0]
 801c032:	2200      	movs	r2, #0
 801c034:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801c036:	bf00      	nop
 801c038:	3710      	adds	r7, #16
 801c03a:	46bd      	mov	sp, r7
 801c03c:	bd80      	pop	{r7, pc}
 801c03e:	bf00      	nop
 801c040:	08027ab8 	.word	0x08027ab8
 801c044:	08028120 	.word	0x08028120
 801c048:	08027afc 	.word	0x08027afc
 801c04c:	0802813c 	.word	0x0802813c
 801c050:	0802815c 	.word	0x0802815c
 801c054:	08028174 	.word	0x08028174
 801c058:	08028190 	.word	0x08028190

0801c05c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b082      	sub	sp, #8
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d106      	bne.n	801c078 <tcp_next_iss+0x1c>
 801c06a:	4b0a      	ldr	r3, [pc, #40]	; (801c094 <tcp_next_iss+0x38>)
 801c06c:	f640 02af 	movw	r2, #2223	; 0x8af
 801c070:	4909      	ldr	r1, [pc, #36]	; (801c098 <tcp_next_iss+0x3c>)
 801c072:	480a      	ldr	r0, [pc, #40]	; (801c09c <tcp_next_iss+0x40>)
 801c074:	f009 ff76 	bl	8025f64 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801c078:	4b09      	ldr	r3, [pc, #36]	; (801c0a0 <tcp_next_iss+0x44>)
 801c07a:	681a      	ldr	r2, [r3, #0]
 801c07c:	4b09      	ldr	r3, [pc, #36]	; (801c0a4 <tcp_next_iss+0x48>)
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	4413      	add	r3, r2
 801c082:	4a07      	ldr	r2, [pc, #28]	; (801c0a0 <tcp_next_iss+0x44>)
 801c084:	6013      	str	r3, [r2, #0]
  return iss;
 801c086:	4b06      	ldr	r3, [pc, #24]	; (801c0a0 <tcp_next_iss+0x44>)
 801c088:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801c08a:	4618      	mov	r0, r3
 801c08c:	3708      	adds	r7, #8
 801c08e:	46bd      	mov	sp, r7
 801c090:	bd80      	pop	{r7, pc}
 801c092:	bf00      	nop
 801c094:	08027ab8 	.word	0x08027ab8
 801c098:	080281a8 	.word	0x080281a8
 801c09c:	08027afc 	.word	0x08027afc
 801c0a0:	2400045c 	.word	0x2400045c
 801c0a4:	2400cffc 	.word	0x2400cffc

0801c0a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b086      	sub	sp, #24
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	4603      	mov	r3, r0
 801c0b0:	60b9      	str	r1, [r7, #8]
 801c0b2:	607a      	str	r2, [r7, #4]
 801c0b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d106      	bne.n	801c0ca <tcp_eff_send_mss_netif+0x22>
 801c0bc:	4b14      	ldr	r3, [pc, #80]	; (801c110 <tcp_eff_send_mss_netif+0x68>)
 801c0be:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801c0c2:	4914      	ldr	r1, [pc, #80]	; (801c114 <tcp_eff_send_mss_netif+0x6c>)
 801c0c4:	4814      	ldr	r0, [pc, #80]	; (801c118 <tcp_eff_send_mss_netif+0x70>)
 801c0c6:	f009 ff4d 	bl	8025f64 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801c0ca:	68bb      	ldr	r3, [r7, #8]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d101      	bne.n	801c0d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801c0d0:	89fb      	ldrh	r3, [r7, #14]
 801c0d2:	e019      	b.n	801c108 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c0d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801c0da:	8afb      	ldrh	r3, [r7, #22]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d012      	beq.n	801c106 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801c0e0:	2328      	movs	r3, #40	; 0x28
 801c0e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c0e4:	8afa      	ldrh	r2, [r7, #22]
 801c0e6:	8abb      	ldrh	r3, [r7, #20]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d904      	bls.n	801c0f6 <tcp_eff_send_mss_netif+0x4e>
 801c0ec:	8afa      	ldrh	r2, [r7, #22]
 801c0ee:	8abb      	ldrh	r3, [r7, #20]
 801c0f0:	1ad3      	subs	r3, r2, r3
 801c0f2:	b29b      	uxth	r3, r3
 801c0f4:	e000      	b.n	801c0f8 <tcp_eff_send_mss_netif+0x50>
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c0fa:	8a7a      	ldrh	r2, [r7, #18]
 801c0fc:	89fb      	ldrh	r3, [r7, #14]
 801c0fe:	4293      	cmp	r3, r2
 801c100:	bf28      	it	cs
 801c102:	4613      	movcs	r3, r2
 801c104:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801c106:	89fb      	ldrh	r3, [r7, #14]
}
 801c108:	4618      	mov	r0, r3
 801c10a:	3718      	adds	r7, #24
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}
 801c110:	08027ab8 	.word	0x08027ab8
 801c114:	080281c4 	.word	0x080281c4
 801c118:	08027afc 	.word	0x08027afc

0801c11c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b084      	sub	sp, #16
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
 801c124:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801c126:	683b      	ldr	r3, [r7, #0]
 801c128:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d119      	bne.n	801c164 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801c130:	4b10      	ldr	r3, [pc, #64]	; (801c174 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801c132:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801c136:	4910      	ldr	r1, [pc, #64]	; (801c178 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801c138:	4810      	ldr	r0, [pc, #64]	; (801c17c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801c13a:	f009 ff13 	bl	8025f64 <iprintf>

  while (pcb != NULL) {
 801c13e:	e011      	b.n	801c164 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	681a      	ldr	r2, [r3, #0]
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	429a      	cmp	r2, r3
 801c14a:	d108      	bne.n	801c15e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	68db      	ldr	r3, [r3, #12]
 801c150:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801c152:	68f8      	ldr	r0, [r7, #12]
 801c154:	f7fe ffc6 	bl	801b0e4 <tcp_abort>
      pcb = next;
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	60fb      	str	r3, [r7, #12]
 801c15c:	e002      	b.n	801c164 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	68db      	ldr	r3, [r3, #12]
 801c162:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d1ea      	bne.n	801c140 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801c16a:	bf00      	nop
 801c16c:	bf00      	nop
 801c16e:	3710      	adds	r7, #16
 801c170:	46bd      	mov	sp, r7
 801c172:	bd80      	pop	{r7, pc}
 801c174:	08027ab8 	.word	0x08027ab8
 801c178:	080281ec 	.word	0x080281ec
 801c17c:	08027afc 	.word	0x08027afc

0801c180 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b084      	sub	sp, #16
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
 801c188:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d02a      	beq.n	801c1e6 <tcp_netif_ip_addr_changed+0x66>
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d026      	beq.n	801c1e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c198:	4b15      	ldr	r3, [pc, #84]	; (801c1f0 <tcp_netif_ip_addr_changed+0x70>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	4619      	mov	r1, r3
 801c19e:	6878      	ldr	r0, [r7, #4]
 801c1a0:	f7ff ffbc 	bl	801c11c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c1a4:	4b13      	ldr	r3, [pc, #76]	; (801c1f4 <tcp_netif_ip_addr_changed+0x74>)
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	4619      	mov	r1, r3
 801c1aa:	6878      	ldr	r0, [r7, #4]
 801c1ac:	f7ff ffb6 	bl	801c11c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801c1b0:	683b      	ldr	r3, [r7, #0]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d017      	beq.n	801c1e6 <tcp_netif_ip_addr_changed+0x66>
 801c1b6:	683b      	ldr	r3, [r7, #0]
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d013      	beq.n	801c1e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c1be:	4b0e      	ldr	r3, [pc, #56]	; (801c1f8 <tcp_netif_ip_addr_changed+0x78>)
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	60fb      	str	r3, [r7, #12]
 801c1c4:	e00c      	b.n	801c1e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	681a      	ldr	r2, [r3, #0]
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	d103      	bne.n	801c1da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c1d2:	683b      	ldr	r3, [r7, #0]
 801c1d4:	681a      	ldr	r2, [r3, #0]
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	68db      	ldr	r3, [r3, #12]
 801c1de:	60fb      	str	r3, [r7, #12]
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d1ef      	bne.n	801c1c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801c1e6:	bf00      	nop
 801c1e8:	3710      	adds	r7, #16
 801c1ea:	46bd      	mov	sp, r7
 801c1ec:	bd80      	pop	{r7, pc}
 801c1ee:	bf00      	nop
 801c1f0:	2400d008 	.word	0x2400d008
 801c1f4:	2400d000 	.word	0x2400d000
 801c1f8:	2400d004 	.word	0x2400d004

0801c1fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b082      	sub	sp, #8
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d007      	beq.n	801c21c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c210:	4618      	mov	r0, r3
 801c212:	f7ff fc3d 	bl	801ba90 <tcp_segs_free>
    pcb->ooseq = NULL;
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	2200      	movs	r2, #0
 801c21a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c21c:	bf00      	nop
 801c21e:	3708      	adds	r7, #8
 801c220:	46bd      	mov	sp, r7
 801c222:	bd80      	pop	{r7, pc}

0801c224 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801c224:	b590      	push	{r4, r7, lr}
 801c226:	b08d      	sub	sp, #52	; 0x34
 801c228:	af04      	add	r7, sp, #16
 801c22a:	6078      	str	r0, [r7, #4]
 801c22c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d105      	bne.n	801c240 <tcp_input+0x1c>
 801c234:	4b9b      	ldr	r3, [pc, #620]	; (801c4a4 <tcp_input+0x280>)
 801c236:	2283      	movs	r2, #131	; 0x83
 801c238:	499b      	ldr	r1, [pc, #620]	; (801c4a8 <tcp_input+0x284>)
 801c23a:	489c      	ldr	r0, [pc, #624]	; (801c4ac <tcp_input+0x288>)
 801c23c:	f009 fe92 	bl	8025f64 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	685b      	ldr	r3, [r3, #4]
 801c244:	4a9a      	ldr	r2, [pc, #616]	; (801c4b0 <tcp_input+0x28c>)
 801c246:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	895b      	ldrh	r3, [r3, #10]
 801c24c:	2b13      	cmp	r3, #19
 801c24e:	f240 83d1 	bls.w	801c9f4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c252:	4b98      	ldr	r3, [pc, #608]	; (801c4b4 <tcp_input+0x290>)
 801c254:	695b      	ldr	r3, [r3, #20]
 801c256:	4a97      	ldr	r2, [pc, #604]	; (801c4b4 <tcp_input+0x290>)
 801c258:	6812      	ldr	r2, [r2, #0]
 801c25a:	4611      	mov	r1, r2
 801c25c:	4618      	mov	r0, r3
 801c25e:	f007 fe25 	bl	8023eac <ip4_addr_isbroadcast_u32>
 801c262:	4603      	mov	r3, r0
 801c264:	2b00      	cmp	r3, #0
 801c266:	f040 83c7 	bne.w	801c9f8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c26a:	4b92      	ldr	r3, [pc, #584]	; (801c4b4 <tcp_input+0x290>)
 801c26c:	695b      	ldr	r3, [r3, #20]
 801c26e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c272:	2be0      	cmp	r3, #224	; 0xe0
 801c274:	f000 83c0 	beq.w	801c9f8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c278:	4b8d      	ldr	r3, [pc, #564]	; (801c4b0 <tcp_input+0x28c>)
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	899b      	ldrh	r3, [r3, #12]
 801c27e:	b29b      	uxth	r3, r3
 801c280:	4618      	mov	r0, r3
 801c282:	f7fc fcd5 	bl	8018c30 <lwip_htons>
 801c286:	4603      	mov	r3, r0
 801c288:	0b1b      	lsrs	r3, r3, #12
 801c28a:	b29b      	uxth	r3, r3
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	009b      	lsls	r3, r3, #2
 801c290:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c292:	7cbb      	ldrb	r3, [r7, #18]
 801c294:	2b13      	cmp	r3, #19
 801c296:	f240 83b1 	bls.w	801c9fc <tcp_input+0x7d8>
 801c29a:	7cbb      	ldrb	r3, [r7, #18]
 801c29c:	b29a      	uxth	r2, r3
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	891b      	ldrh	r3, [r3, #8]
 801c2a2:	429a      	cmp	r2, r3
 801c2a4:	f200 83aa 	bhi.w	801c9fc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c2a8:	7cbb      	ldrb	r3, [r7, #18]
 801c2aa:	b29b      	uxth	r3, r3
 801c2ac:	3b14      	subs	r3, #20
 801c2ae:	b29a      	uxth	r2, r3
 801c2b0:	4b81      	ldr	r3, [pc, #516]	; (801c4b8 <tcp_input+0x294>)
 801c2b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801c2b4:	4b81      	ldr	r3, [pc, #516]	; (801c4bc <tcp_input+0x298>)
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	895a      	ldrh	r2, [r3, #10]
 801c2be:	7cbb      	ldrb	r3, [r7, #18]
 801c2c0:	b29b      	uxth	r3, r3
 801c2c2:	429a      	cmp	r2, r3
 801c2c4:	d309      	bcc.n	801c2da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801c2c6:	4b7c      	ldr	r3, [pc, #496]	; (801c4b8 <tcp_input+0x294>)
 801c2c8:	881a      	ldrh	r2, [r3, #0]
 801c2ca:	4b7d      	ldr	r3, [pc, #500]	; (801c4c0 <tcp_input+0x29c>)
 801c2cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801c2ce:	7cbb      	ldrb	r3, [r7, #18]
 801c2d0:	4619      	mov	r1, r3
 801c2d2:	6878      	ldr	r0, [r7, #4]
 801c2d4:	f7fe f8dc 	bl	801a490 <pbuf_remove_header>
 801c2d8:	e04e      	b.n	801c378 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d105      	bne.n	801c2ee <tcp_input+0xca>
 801c2e2:	4b70      	ldr	r3, [pc, #448]	; (801c4a4 <tcp_input+0x280>)
 801c2e4:	22c2      	movs	r2, #194	; 0xc2
 801c2e6:	4977      	ldr	r1, [pc, #476]	; (801c4c4 <tcp_input+0x2a0>)
 801c2e8:	4870      	ldr	r0, [pc, #448]	; (801c4ac <tcp_input+0x288>)
 801c2ea:	f009 fe3b 	bl	8025f64 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801c2ee:	2114      	movs	r1, #20
 801c2f0:	6878      	ldr	r0, [r7, #4]
 801c2f2:	f7fe f8cd 	bl	801a490 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	895a      	ldrh	r2, [r3, #10]
 801c2fa:	4b71      	ldr	r3, [pc, #452]	; (801c4c0 <tcp_input+0x29c>)
 801c2fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c2fe:	4b6e      	ldr	r3, [pc, #440]	; (801c4b8 <tcp_input+0x294>)
 801c300:	881a      	ldrh	r2, [r3, #0]
 801c302:	4b6f      	ldr	r3, [pc, #444]	; (801c4c0 <tcp_input+0x29c>)
 801c304:	881b      	ldrh	r3, [r3, #0]
 801c306:	1ad3      	subs	r3, r2, r3
 801c308:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801c30a:	4b6d      	ldr	r3, [pc, #436]	; (801c4c0 <tcp_input+0x29c>)
 801c30c:	881b      	ldrh	r3, [r3, #0]
 801c30e:	4619      	mov	r1, r3
 801c310:	6878      	ldr	r0, [r7, #4]
 801c312:	f7fe f8bd 	bl	801a490 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	895b      	ldrh	r3, [r3, #10]
 801c31c:	8a3a      	ldrh	r2, [r7, #16]
 801c31e:	429a      	cmp	r2, r3
 801c320:	f200 836e 	bhi.w	801ca00 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	685b      	ldr	r3, [r3, #4]
 801c32a:	4a64      	ldr	r2, [pc, #400]	; (801c4bc <tcp_input+0x298>)
 801c32c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	8a3a      	ldrh	r2, [r7, #16]
 801c334:	4611      	mov	r1, r2
 801c336:	4618      	mov	r0, r3
 801c338:	f7fe f8aa 	bl	801a490 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	891a      	ldrh	r2, [r3, #8]
 801c340:	8a3b      	ldrh	r3, [r7, #16]
 801c342:	1ad3      	subs	r3, r2, r3
 801c344:	b29a      	uxth	r2, r3
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	895b      	ldrh	r3, [r3, #10]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d005      	beq.n	801c35e <tcp_input+0x13a>
 801c352:	4b54      	ldr	r3, [pc, #336]	; (801c4a4 <tcp_input+0x280>)
 801c354:	22df      	movs	r2, #223	; 0xdf
 801c356:	495c      	ldr	r1, [pc, #368]	; (801c4c8 <tcp_input+0x2a4>)
 801c358:	4854      	ldr	r0, [pc, #336]	; (801c4ac <tcp_input+0x288>)
 801c35a:	f009 fe03 	bl	8025f64 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	891a      	ldrh	r2, [r3, #8]
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	891b      	ldrh	r3, [r3, #8]
 801c368:	429a      	cmp	r2, r3
 801c36a:	d005      	beq.n	801c378 <tcp_input+0x154>
 801c36c:	4b4d      	ldr	r3, [pc, #308]	; (801c4a4 <tcp_input+0x280>)
 801c36e:	22e0      	movs	r2, #224	; 0xe0
 801c370:	4956      	ldr	r1, [pc, #344]	; (801c4cc <tcp_input+0x2a8>)
 801c372:	484e      	ldr	r0, [pc, #312]	; (801c4ac <tcp_input+0x288>)
 801c374:	f009 fdf6 	bl	8025f64 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801c378:	4b4d      	ldr	r3, [pc, #308]	; (801c4b0 <tcp_input+0x28c>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	881b      	ldrh	r3, [r3, #0]
 801c37e:	b29b      	uxth	r3, r3
 801c380:	4a4b      	ldr	r2, [pc, #300]	; (801c4b0 <tcp_input+0x28c>)
 801c382:	6814      	ldr	r4, [r2, #0]
 801c384:	4618      	mov	r0, r3
 801c386:	f7fc fc53 	bl	8018c30 <lwip_htons>
 801c38a:	4603      	mov	r3, r0
 801c38c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801c38e:	4b48      	ldr	r3, [pc, #288]	; (801c4b0 <tcp_input+0x28c>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	885b      	ldrh	r3, [r3, #2]
 801c394:	b29b      	uxth	r3, r3
 801c396:	4a46      	ldr	r2, [pc, #280]	; (801c4b0 <tcp_input+0x28c>)
 801c398:	6814      	ldr	r4, [r2, #0]
 801c39a:	4618      	mov	r0, r3
 801c39c:	f7fc fc48 	bl	8018c30 <lwip_htons>
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c3a4:	4b42      	ldr	r3, [pc, #264]	; (801c4b0 <tcp_input+0x28c>)
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	685b      	ldr	r3, [r3, #4]
 801c3aa:	4a41      	ldr	r2, [pc, #260]	; (801c4b0 <tcp_input+0x28c>)
 801c3ac:	6814      	ldr	r4, [r2, #0]
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	f7fc fc53 	bl	8018c5a <lwip_htonl>
 801c3b4:	4603      	mov	r3, r0
 801c3b6:	6063      	str	r3, [r4, #4]
 801c3b8:	6863      	ldr	r3, [r4, #4]
 801c3ba:	4a45      	ldr	r2, [pc, #276]	; (801c4d0 <tcp_input+0x2ac>)
 801c3bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c3be:	4b3c      	ldr	r3, [pc, #240]	; (801c4b0 <tcp_input+0x28c>)
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	689b      	ldr	r3, [r3, #8]
 801c3c4:	4a3a      	ldr	r2, [pc, #232]	; (801c4b0 <tcp_input+0x28c>)
 801c3c6:	6814      	ldr	r4, [r2, #0]
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	f7fc fc46 	bl	8018c5a <lwip_htonl>
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	60a3      	str	r3, [r4, #8]
 801c3d2:	68a3      	ldr	r3, [r4, #8]
 801c3d4:	4a3f      	ldr	r2, [pc, #252]	; (801c4d4 <tcp_input+0x2b0>)
 801c3d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c3d8:	4b35      	ldr	r3, [pc, #212]	; (801c4b0 <tcp_input+0x28c>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	89db      	ldrh	r3, [r3, #14]
 801c3de:	b29b      	uxth	r3, r3
 801c3e0:	4a33      	ldr	r2, [pc, #204]	; (801c4b0 <tcp_input+0x28c>)
 801c3e2:	6814      	ldr	r4, [r2, #0]
 801c3e4:	4618      	mov	r0, r3
 801c3e6:	f7fc fc23 	bl	8018c30 <lwip_htons>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801c3ee:	4b30      	ldr	r3, [pc, #192]	; (801c4b0 <tcp_input+0x28c>)
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	899b      	ldrh	r3, [r3, #12]
 801c3f4:	b29b      	uxth	r3, r3
 801c3f6:	4618      	mov	r0, r3
 801c3f8:	f7fc fc1a 	bl	8018c30 <lwip_htons>
 801c3fc:	4603      	mov	r3, r0
 801c3fe:	b2db      	uxtb	r3, r3
 801c400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c404:	b2da      	uxtb	r2, r3
 801c406:	4b34      	ldr	r3, [pc, #208]	; (801c4d8 <tcp_input+0x2b4>)
 801c408:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	891a      	ldrh	r2, [r3, #8]
 801c40e:	4b33      	ldr	r3, [pc, #204]	; (801c4dc <tcp_input+0x2b8>)
 801c410:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c412:	4b31      	ldr	r3, [pc, #196]	; (801c4d8 <tcp_input+0x2b4>)
 801c414:	781b      	ldrb	r3, [r3, #0]
 801c416:	f003 0303 	and.w	r3, r3, #3
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d00c      	beq.n	801c438 <tcp_input+0x214>
    tcplen++;
 801c41e:	4b2f      	ldr	r3, [pc, #188]	; (801c4dc <tcp_input+0x2b8>)
 801c420:	881b      	ldrh	r3, [r3, #0]
 801c422:	3301      	adds	r3, #1
 801c424:	b29a      	uxth	r2, r3
 801c426:	4b2d      	ldr	r3, [pc, #180]	; (801c4dc <tcp_input+0x2b8>)
 801c428:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	891a      	ldrh	r2, [r3, #8]
 801c42e:	4b2b      	ldr	r3, [pc, #172]	; (801c4dc <tcp_input+0x2b8>)
 801c430:	881b      	ldrh	r3, [r3, #0]
 801c432:	429a      	cmp	r2, r3
 801c434:	f200 82e6 	bhi.w	801ca04 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801c438:	2300      	movs	r3, #0
 801c43a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c43c:	4b28      	ldr	r3, [pc, #160]	; (801c4e0 <tcp_input+0x2bc>)
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	61fb      	str	r3, [r7, #28]
 801c442:	e09d      	b.n	801c580 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c444:	69fb      	ldr	r3, [r7, #28]
 801c446:	7d1b      	ldrb	r3, [r3, #20]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d105      	bne.n	801c458 <tcp_input+0x234>
 801c44c:	4b15      	ldr	r3, [pc, #84]	; (801c4a4 <tcp_input+0x280>)
 801c44e:	22fb      	movs	r2, #251	; 0xfb
 801c450:	4924      	ldr	r1, [pc, #144]	; (801c4e4 <tcp_input+0x2c0>)
 801c452:	4816      	ldr	r0, [pc, #88]	; (801c4ac <tcp_input+0x288>)
 801c454:	f009 fd86 	bl	8025f64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c458:	69fb      	ldr	r3, [r7, #28]
 801c45a:	7d1b      	ldrb	r3, [r3, #20]
 801c45c:	2b0a      	cmp	r3, #10
 801c45e:	d105      	bne.n	801c46c <tcp_input+0x248>
 801c460:	4b10      	ldr	r3, [pc, #64]	; (801c4a4 <tcp_input+0x280>)
 801c462:	22fc      	movs	r2, #252	; 0xfc
 801c464:	4920      	ldr	r1, [pc, #128]	; (801c4e8 <tcp_input+0x2c4>)
 801c466:	4811      	ldr	r0, [pc, #68]	; (801c4ac <tcp_input+0x288>)
 801c468:	f009 fd7c 	bl	8025f64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c46c:	69fb      	ldr	r3, [r7, #28]
 801c46e:	7d1b      	ldrb	r3, [r3, #20]
 801c470:	2b01      	cmp	r3, #1
 801c472:	d105      	bne.n	801c480 <tcp_input+0x25c>
 801c474:	4b0b      	ldr	r3, [pc, #44]	; (801c4a4 <tcp_input+0x280>)
 801c476:	22fd      	movs	r2, #253	; 0xfd
 801c478:	491c      	ldr	r1, [pc, #112]	; (801c4ec <tcp_input+0x2c8>)
 801c47a:	480c      	ldr	r0, [pc, #48]	; (801c4ac <tcp_input+0x288>)
 801c47c:	f009 fd72 	bl	8025f64 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c480:	69fb      	ldr	r3, [r7, #28]
 801c482:	7a1b      	ldrb	r3, [r3, #8]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d033      	beq.n	801c4f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c488:	69fb      	ldr	r3, [r7, #28]
 801c48a:	7a1a      	ldrb	r2, [r3, #8]
 801c48c:	4b09      	ldr	r3, [pc, #36]	; (801c4b4 <tcp_input+0x290>)
 801c48e:	685b      	ldr	r3, [r3, #4]
 801c490:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c494:	3301      	adds	r3, #1
 801c496:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c498:	429a      	cmp	r2, r3
 801c49a:	d029      	beq.n	801c4f0 <tcp_input+0x2cc>
      prev = pcb;
 801c49c:	69fb      	ldr	r3, [r7, #28]
 801c49e:	61bb      	str	r3, [r7, #24]
      continue;
 801c4a0:	e06b      	b.n	801c57a <tcp_input+0x356>
 801c4a2:	bf00      	nop
 801c4a4:	08028220 	.word	0x08028220
 801c4a8:	08028254 	.word	0x08028254
 801c4ac:	0802826c 	.word	0x0802826c
 801c4b0:	2400d024 	.word	0x2400d024
 801c4b4:	24009edc 	.word	0x24009edc
 801c4b8:	2400d028 	.word	0x2400d028
 801c4bc:	2400d02c 	.word	0x2400d02c
 801c4c0:	2400d02a 	.word	0x2400d02a
 801c4c4:	08028294 	.word	0x08028294
 801c4c8:	080282a4 	.word	0x080282a4
 801c4cc:	080282b0 	.word	0x080282b0
 801c4d0:	2400d034 	.word	0x2400d034
 801c4d4:	2400d038 	.word	0x2400d038
 801c4d8:	2400d040 	.word	0x2400d040
 801c4dc:	2400d03e 	.word	0x2400d03e
 801c4e0:	2400d008 	.word	0x2400d008
 801c4e4:	080282d0 	.word	0x080282d0
 801c4e8:	080282f8 	.word	0x080282f8
 801c4ec:	08028324 	.word	0x08028324
    }

    if (pcb->remote_port == tcphdr->src &&
 801c4f0:	69fb      	ldr	r3, [r7, #28]
 801c4f2:	8b1a      	ldrh	r2, [r3, #24]
 801c4f4:	4b72      	ldr	r3, [pc, #456]	; (801c6c0 <tcp_input+0x49c>)
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	881b      	ldrh	r3, [r3, #0]
 801c4fa:	b29b      	uxth	r3, r3
 801c4fc:	429a      	cmp	r2, r3
 801c4fe:	d13a      	bne.n	801c576 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801c500:	69fb      	ldr	r3, [r7, #28]
 801c502:	8ada      	ldrh	r2, [r3, #22]
 801c504:	4b6e      	ldr	r3, [pc, #440]	; (801c6c0 <tcp_input+0x49c>)
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	885b      	ldrh	r3, [r3, #2]
 801c50a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801c50c:	429a      	cmp	r2, r3
 801c50e:	d132      	bne.n	801c576 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c510:	69fb      	ldr	r3, [r7, #28]
 801c512:	685a      	ldr	r2, [r3, #4]
 801c514:	4b6b      	ldr	r3, [pc, #428]	; (801c6c4 <tcp_input+0x4a0>)
 801c516:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801c518:	429a      	cmp	r2, r3
 801c51a:	d12c      	bne.n	801c576 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c51c:	69fb      	ldr	r3, [r7, #28]
 801c51e:	681a      	ldr	r2, [r3, #0]
 801c520:	4b68      	ldr	r3, [pc, #416]	; (801c6c4 <tcp_input+0x4a0>)
 801c522:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c524:	429a      	cmp	r2, r3
 801c526:	d126      	bne.n	801c576 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801c528:	69fb      	ldr	r3, [r7, #28]
 801c52a:	68db      	ldr	r3, [r3, #12]
 801c52c:	69fa      	ldr	r2, [r7, #28]
 801c52e:	429a      	cmp	r2, r3
 801c530:	d106      	bne.n	801c540 <tcp_input+0x31c>
 801c532:	4b65      	ldr	r3, [pc, #404]	; (801c6c8 <tcp_input+0x4a4>)
 801c534:	f240 120d 	movw	r2, #269	; 0x10d
 801c538:	4964      	ldr	r1, [pc, #400]	; (801c6cc <tcp_input+0x4a8>)
 801c53a:	4865      	ldr	r0, [pc, #404]	; (801c6d0 <tcp_input+0x4ac>)
 801c53c:	f009 fd12 	bl	8025f64 <iprintf>
      if (prev != NULL) {
 801c540:	69bb      	ldr	r3, [r7, #24]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d00a      	beq.n	801c55c <tcp_input+0x338>
        prev->next = pcb->next;
 801c546:	69fb      	ldr	r3, [r7, #28]
 801c548:	68da      	ldr	r2, [r3, #12]
 801c54a:	69bb      	ldr	r3, [r7, #24]
 801c54c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801c54e:	4b61      	ldr	r3, [pc, #388]	; (801c6d4 <tcp_input+0x4b0>)
 801c550:	681a      	ldr	r2, [r3, #0]
 801c552:	69fb      	ldr	r3, [r7, #28]
 801c554:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801c556:	4a5f      	ldr	r2, [pc, #380]	; (801c6d4 <tcp_input+0x4b0>)
 801c558:	69fb      	ldr	r3, [r7, #28]
 801c55a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801c55c:	69fb      	ldr	r3, [r7, #28]
 801c55e:	68db      	ldr	r3, [r3, #12]
 801c560:	69fa      	ldr	r2, [r7, #28]
 801c562:	429a      	cmp	r2, r3
 801c564:	d111      	bne.n	801c58a <tcp_input+0x366>
 801c566:	4b58      	ldr	r3, [pc, #352]	; (801c6c8 <tcp_input+0x4a4>)
 801c568:	f240 1215 	movw	r2, #277	; 0x115
 801c56c:	495a      	ldr	r1, [pc, #360]	; (801c6d8 <tcp_input+0x4b4>)
 801c56e:	4858      	ldr	r0, [pc, #352]	; (801c6d0 <tcp_input+0x4ac>)
 801c570:	f009 fcf8 	bl	8025f64 <iprintf>
      break;
 801c574:	e009      	b.n	801c58a <tcp_input+0x366>
    }
    prev = pcb;
 801c576:	69fb      	ldr	r3, [r7, #28]
 801c578:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c57a:	69fb      	ldr	r3, [r7, #28]
 801c57c:	68db      	ldr	r3, [r3, #12]
 801c57e:	61fb      	str	r3, [r7, #28]
 801c580:	69fb      	ldr	r3, [r7, #28]
 801c582:	2b00      	cmp	r3, #0
 801c584:	f47f af5e 	bne.w	801c444 <tcp_input+0x220>
 801c588:	e000      	b.n	801c58c <tcp_input+0x368>
      break;
 801c58a:	bf00      	nop
  }

  if (pcb == NULL) {
 801c58c:	69fb      	ldr	r3, [r7, #28]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	f040 80aa 	bne.w	801c6e8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c594:	4b51      	ldr	r3, [pc, #324]	; (801c6dc <tcp_input+0x4b8>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	61fb      	str	r3, [r7, #28]
 801c59a:	e03f      	b.n	801c61c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c59c:	69fb      	ldr	r3, [r7, #28]
 801c59e:	7d1b      	ldrb	r3, [r3, #20]
 801c5a0:	2b0a      	cmp	r3, #10
 801c5a2:	d006      	beq.n	801c5b2 <tcp_input+0x38e>
 801c5a4:	4b48      	ldr	r3, [pc, #288]	; (801c6c8 <tcp_input+0x4a4>)
 801c5a6:	f240 121f 	movw	r2, #287	; 0x11f
 801c5aa:	494d      	ldr	r1, [pc, #308]	; (801c6e0 <tcp_input+0x4bc>)
 801c5ac:	4848      	ldr	r0, [pc, #288]	; (801c6d0 <tcp_input+0x4ac>)
 801c5ae:	f009 fcd9 	bl	8025f64 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c5b2:	69fb      	ldr	r3, [r7, #28]
 801c5b4:	7a1b      	ldrb	r3, [r3, #8]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d009      	beq.n	801c5ce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c5ba:	69fb      	ldr	r3, [r7, #28]
 801c5bc:	7a1a      	ldrb	r2, [r3, #8]
 801c5be:	4b41      	ldr	r3, [pc, #260]	; (801c6c4 <tcp_input+0x4a0>)
 801c5c0:	685b      	ldr	r3, [r3, #4]
 801c5c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c5c6:	3301      	adds	r3, #1
 801c5c8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	d122      	bne.n	801c614 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801c5ce:	69fb      	ldr	r3, [r7, #28]
 801c5d0:	8b1a      	ldrh	r2, [r3, #24]
 801c5d2:	4b3b      	ldr	r3, [pc, #236]	; (801c6c0 <tcp_input+0x49c>)
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	881b      	ldrh	r3, [r3, #0]
 801c5d8:	b29b      	uxth	r3, r3
 801c5da:	429a      	cmp	r2, r3
 801c5dc:	d11b      	bne.n	801c616 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801c5de:	69fb      	ldr	r3, [r7, #28]
 801c5e0:	8ada      	ldrh	r2, [r3, #22]
 801c5e2:	4b37      	ldr	r3, [pc, #220]	; (801c6c0 <tcp_input+0x49c>)
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	885b      	ldrh	r3, [r3, #2]
 801c5e8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801c5ea:	429a      	cmp	r2, r3
 801c5ec:	d113      	bne.n	801c616 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c5ee:	69fb      	ldr	r3, [r7, #28]
 801c5f0:	685a      	ldr	r2, [r3, #4]
 801c5f2:	4b34      	ldr	r3, [pc, #208]	; (801c6c4 <tcp_input+0x4a0>)
 801c5f4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801c5f6:	429a      	cmp	r2, r3
 801c5f8:	d10d      	bne.n	801c616 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c5fa:	69fb      	ldr	r3, [r7, #28]
 801c5fc:	681a      	ldr	r2, [r3, #0]
 801c5fe:	4b31      	ldr	r3, [pc, #196]	; (801c6c4 <tcp_input+0x4a0>)
 801c600:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c602:	429a      	cmp	r2, r3
 801c604:	d107      	bne.n	801c616 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801c606:	69f8      	ldr	r0, [r7, #28]
 801c608:	f000 fb56 	bl	801ccb8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801c60c:	6878      	ldr	r0, [r7, #4]
 801c60e:	f7fd ffc5 	bl	801a59c <pbuf_free>
        return;
 801c612:	e1fd      	b.n	801ca10 <tcp_input+0x7ec>
        continue;
 801c614:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c616:	69fb      	ldr	r3, [r7, #28]
 801c618:	68db      	ldr	r3, [r3, #12]
 801c61a:	61fb      	str	r3, [r7, #28]
 801c61c:	69fb      	ldr	r3, [r7, #28]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d1bc      	bne.n	801c59c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801c622:	2300      	movs	r3, #0
 801c624:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c626:	4b2f      	ldr	r3, [pc, #188]	; (801c6e4 <tcp_input+0x4c0>)
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	617b      	str	r3, [r7, #20]
 801c62c:	e02a      	b.n	801c684 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c62e:	697b      	ldr	r3, [r7, #20]
 801c630:	7a1b      	ldrb	r3, [r3, #8]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d00c      	beq.n	801c650 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c636:	697b      	ldr	r3, [r7, #20]
 801c638:	7a1a      	ldrb	r2, [r3, #8]
 801c63a:	4b22      	ldr	r3, [pc, #136]	; (801c6c4 <tcp_input+0x4a0>)
 801c63c:	685b      	ldr	r3, [r3, #4]
 801c63e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c642:	3301      	adds	r3, #1
 801c644:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801c646:	429a      	cmp	r2, r3
 801c648:	d002      	beq.n	801c650 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801c64a:	697b      	ldr	r3, [r7, #20]
 801c64c:	61bb      	str	r3, [r7, #24]
        continue;
 801c64e:	e016      	b.n	801c67e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801c650:	697b      	ldr	r3, [r7, #20]
 801c652:	8ada      	ldrh	r2, [r3, #22]
 801c654:	4b1a      	ldr	r3, [pc, #104]	; (801c6c0 <tcp_input+0x49c>)
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	885b      	ldrh	r3, [r3, #2]
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	429a      	cmp	r2, r3
 801c65e:	d10c      	bne.n	801c67a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801c660:	697b      	ldr	r3, [r7, #20]
 801c662:	681a      	ldr	r2, [r3, #0]
 801c664:	4b17      	ldr	r3, [pc, #92]	; (801c6c4 <tcp_input+0x4a0>)
 801c666:	695b      	ldr	r3, [r3, #20]
 801c668:	429a      	cmp	r2, r3
 801c66a:	d00f      	beq.n	801c68c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801c66c:	697b      	ldr	r3, [r7, #20]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d00d      	beq.n	801c68e <tcp_input+0x46a>
 801c672:	697b      	ldr	r3, [r7, #20]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d009      	beq.n	801c68e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801c67a:	697b      	ldr	r3, [r7, #20]
 801c67c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c67e:	697b      	ldr	r3, [r7, #20]
 801c680:	68db      	ldr	r3, [r3, #12]
 801c682:	617b      	str	r3, [r7, #20]
 801c684:	697b      	ldr	r3, [r7, #20]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d1d1      	bne.n	801c62e <tcp_input+0x40a>
 801c68a:	e000      	b.n	801c68e <tcp_input+0x46a>
            break;
 801c68c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801c68e:	697b      	ldr	r3, [r7, #20]
 801c690:	2b00      	cmp	r3, #0
 801c692:	d029      	beq.n	801c6e8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801c694:	69bb      	ldr	r3, [r7, #24]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d00a      	beq.n	801c6b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801c69a:	697b      	ldr	r3, [r7, #20]
 801c69c:	68da      	ldr	r2, [r3, #12]
 801c69e:	69bb      	ldr	r3, [r7, #24]
 801c6a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801c6a2:	4b10      	ldr	r3, [pc, #64]	; (801c6e4 <tcp_input+0x4c0>)
 801c6a4:	681a      	ldr	r2, [r3, #0]
 801c6a6:	697b      	ldr	r3, [r7, #20]
 801c6a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801c6aa:	4a0e      	ldr	r2, [pc, #56]	; (801c6e4 <tcp_input+0x4c0>)
 801c6ac:	697b      	ldr	r3, [r7, #20]
 801c6ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801c6b0:	6978      	ldr	r0, [r7, #20]
 801c6b2:	f000 fa03 	bl	801cabc <tcp_listen_input>
      }
      pbuf_free(p);
 801c6b6:	6878      	ldr	r0, [r7, #4]
 801c6b8:	f7fd ff70 	bl	801a59c <pbuf_free>
      return;
 801c6bc:	e1a8      	b.n	801ca10 <tcp_input+0x7ec>
 801c6be:	bf00      	nop
 801c6c0:	2400d024 	.word	0x2400d024
 801c6c4:	24009edc 	.word	0x24009edc
 801c6c8:	08028220 	.word	0x08028220
 801c6cc:	0802834c 	.word	0x0802834c
 801c6d0:	0802826c 	.word	0x0802826c
 801c6d4:	2400d008 	.word	0x2400d008
 801c6d8:	08028378 	.word	0x08028378
 801c6dc:	2400d00c 	.word	0x2400d00c
 801c6e0:	080283a4 	.word	0x080283a4
 801c6e4:	2400d004 	.word	0x2400d004
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801c6e8:	69fb      	ldr	r3, [r7, #28]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	f000 8158 	beq.w	801c9a0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801c6f0:	4b95      	ldr	r3, [pc, #596]	; (801c948 <tcp_input+0x724>)
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	891a      	ldrh	r2, [r3, #8]
 801c6fa:	4b93      	ldr	r3, [pc, #588]	; (801c948 <tcp_input+0x724>)
 801c6fc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801c6fe:	4a92      	ldr	r2, [pc, #584]	; (801c948 <tcp_input+0x724>)
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801c704:	4b91      	ldr	r3, [pc, #580]	; (801c94c <tcp_input+0x728>)
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	4a8f      	ldr	r2, [pc, #572]	; (801c948 <tcp_input+0x724>)
 801c70a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801c70c:	4b90      	ldr	r3, [pc, #576]	; (801c950 <tcp_input+0x72c>)
 801c70e:	2200      	movs	r2, #0
 801c710:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801c712:	4b90      	ldr	r3, [pc, #576]	; (801c954 <tcp_input+0x730>)
 801c714:	2200      	movs	r2, #0
 801c716:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801c718:	4b8f      	ldr	r3, [pc, #572]	; (801c958 <tcp_input+0x734>)
 801c71a:	2200      	movs	r2, #0
 801c71c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801c71e:	4b8f      	ldr	r3, [pc, #572]	; (801c95c <tcp_input+0x738>)
 801c720:	781b      	ldrb	r3, [r3, #0]
 801c722:	f003 0308 	and.w	r3, r3, #8
 801c726:	2b00      	cmp	r3, #0
 801c728:	d006      	beq.n	801c738 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	7b5b      	ldrb	r3, [r3, #13]
 801c72e:	f043 0301 	orr.w	r3, r3, #1
 801c732:	b2da      	uxtb	r2, r3
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801c738:	69fb      	ldr	r3, [r7, #28]
 801c73a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d017      	beq.n	801c770 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c740:	69f8      	ldr	r0, [r7, #28]
 801c742:	f7ff f929 	bl	801b998 <tcp_process_refused_data>
 801c746:	4603      	mov	r3, r0
 801c748:	f113 0f0d 	cmn.w	r3, #13
 801c74c:	d007      	beq.n	801c75e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c74e:	69fb      	ldr	r3, [r7, #28]
 801c750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801c752:	2b00      	cmp	r3, #0
 801c754:	d00c      	beq.n	801c770 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801c756:	4b82      	ldr	r3, [pc, #520]	; (801c960 <tcp_input+0x73c>)
 801c758:	881b      	ldrh	r3, [r3, #0]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d008      	beq.n	801c770 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801c75e:	69fb      	ldr	r3, [r7, #28]
 801c760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c762:	2b00      	cmp	r3, #0
 801c764:	f040 80e3 	bne.w	801c92e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801c768:	69f8      	ldr	r0, [r7, #28]
 801c76a:	f003 f9ad 	bl	801fac8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801c76e:	e0de      	b.n	801c92e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801c770:	4a7c      	ldr	r2, [pc, #496]	; (801c964 <tcp_input+0x740>)
 801c772:	69fb      	ldr	r3, [r7, #28]
 801c774:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801c776:	69f8      	ldr	r0, [r7, #28]
 801c778:	f000 fb18 	bl	801cdac <tcp_process>
 801c77c:	4603      	mov	r3, r0
 801c77e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801c780:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c784:	f113 0f0d 	cmn.w	r3, #13
 801c788:	f000 80d3 	beq.w	801c932 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801c78c:	4b71      	ldr	r3, [pc, #452]	; (801c954 <tcp_input+0x730>)
 801c78e:	781b      	ldrb	r3, [r3, #0]
 801c790:	f003 0308 	and.w	r3, r3, #8
 801c794:	2b00      	cmp	r3, #0
 801c796:	d015      	beq.n	801c7c4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801c798:	69fb      	ldr	r3, [r7, #28]
 801c79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d008      	beq.n	801c7b4 <tcp_input+0x590>
 801c7a2:	69fb      	ldr	r3, [r7, #28]
 801c7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c7a8:	69fa      	ldr	r2, [r7, #28]
 801c7aa:	6912      	ldr	r2, [r2, #16]
 801c7ac:	f06f 010d 	mvn.w	r1, #13
 801c7b0:	4610      	mov	r0, r2
 801c7b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801c7b4:	69f9      	ldr	r1, [r7, #28]
 801c7b6:	486c      	ldr	r0, [pc, #432]	; (801c968 <tcp_input+0x744>)
 801c7b8:	f7ff fbbc 	bl	801bf34 <tcp_pcb_remove>
        tcp_free(pcb);
 801c7bc:	69f8      	ldr	r0, [r7, #28]
 801c7be:	f7fe f9a9 	bl	801ab14 <tcp_free>
 801c7c2:	e0da      	b.n	801c97a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801c7c8:	4b63      	ldr	r3, [pc, #396]	; (801c958 <tcp_input+0x734>)
 801c7ca:	881b      	ldrh	r3, [r3, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d01d      	beq.n	801c80c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801c7d0:	4b61      	ldr	r3, [pc, #388]	; (801c958 <tcp_input+0x734>)
 801c7d2:	881b      	ldrh	r3, [r3, #0]
 801c7d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801c7d6:	69fb      	ldr	r3, [r7, #28]
 801c7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d00a      	beq.n	801c7f6 <tcp_input+0x5d2>
 801c7e0:	69fb      	ldr	r3, [r7, #28]
 801c7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c7e6:	69fa      	ldr	r2, [r7, #28]
 801c7e8:	6910      	ldr	r0, [r2, #16]
 801c7ea:	89fa      	ldrh	r2, [r7, #14]
 801c7ec:	69f9      	ldr	r1, [r7, #28]
 801c7ee:	4798      	blx	r3
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	74fb      	strb	r3, [r7, #19]
 801c7f4:	e001      	b.n	801c7fa <tcp_input+0x5d6>
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801c7fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c7fe:	f113 0f0d 	cmn.w	r3, #13
 801c802:	f000 8098 	beq.w	801c936 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801c806:	4b54      	ldr	r3, [pc, #336]	; (801c958 <tcp_input+0x734>)
 801c808:	2200      	movs	r2, #0
 801c80a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801c80c:	69f8      	ldr	r0, [r7, #28]
 801c80e:	f000 f915 	bl	801ca3c <tcp_input_delayed_close>
 801c812:	4603      	mov	r3, r0
 801c814:	2b00      	cmp	r3, #0
 801c816:	f040 8090 	bne.w	801c93a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801c81a:	4b4d      	ldr	r3, [pc, #308]	; (801c950 <tcp_input+0x72c>)
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d041      	beq.n	801c8a6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801c822:	69fb      	ldr	r3, [r7, #28]
 801c824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c826:	2b00      	cmp	r3, #0
 801c828:	d006      	beq.n	801c838 <tcp_input+0x614>
 801c82a:	4b50      	ldr	r3, [pc, #320]	; (801c96c <tcp_input+0x748>)
 801c82c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c830:	494f      	ldr	r1, [pc, #316]	; (801c970 <tcp_input+0x74c>)
 801c832:	4850      	ldr	r0, [pc, #320]	; (801c974 <tcp_input+0x750>)
 801c834:	f009 fb96 	bl	8025f64 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801c838:	69fb      	ldr	r3, [r7, #28]
 801c83a:	8b5b      	ldrh	r3, [r3, #26]
 801c83c:	f003 0310 	and.w	r3, r3, #16
 801c840:	2b00      	cmp	r3, #0
 801c842:	d008      	beq.n	801c856 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801c844:	4b42      	ldr	r3, [pc, #264]	; (801c950 <tcp_input+0x72c>)
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	4618      	mov	r0, r3
 801c84a:	f7fd fea7 	bl	801a59c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801c84e:	69f8      	ldr	r0, [r7, #28]
 801c850:	f7fe fc48 	bl	801b0e4 <tcp_abort>
            goto aborted;
 801c854:	e091      	b.n	801c97a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801c856:	69fb      	ldr	r3, [r7, #28]
 801c858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d00c      	beq.n	801c87a <tcp_input+0x656>
 801c860:	69fb      	ldr	r3, [r7, #28]
 801c862:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801c866:	69fb      	ldr	r3, [r7, #28]
 801c868:	6918      	ldr	r0, [r3, #16]
 801c86a:	4b39      	ldr	r3, [pc, #228]	; (801c950 <tcp_input+0x72c>)
 801c86c:	681a      	ldr	r2, [r3, #0]
 801c86e:	2300      	movs	r3, #0
 801c870:	69f9      	ldr	r1, [r7, #28]
 801c872:	47a0      	blx	r4
 801c874:	4603      	mov	r3, r0
 801c876:	74fb      	strb	r3, [r7, #19]
 801c878:	e008      	b.n	801c88c <tcp_input+0x668>
 801c87a:	4b35      	ldr	r3, [pc, #212]	; (801c950 <tcp_input+0x72c>)
 801c87c:	681a      	ldr	r2, [r3, #0]
 801c87e:	2300      	movs	r3, #0
 801c880:	69f9      	ldr	r1, [r7, #28]
 801c882:	2000      	movs	r0, #0
 801c884:	f7ff f95e 	bl	801bb44 <tcp_recv_null>
 801c888:	4603      	mov	r3, r0
 801c88a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801c88c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c890:	f113 0f0d 	cmn.w	r3, #13
 801c894:	d053      	beq.n	801c93e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801c896:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d003      	beq.n	801c8a6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801c89e:	4b2c      	ldr	r3, [pc, #176]	; (801c950 <tcp_input+0x72c>)
 801c8a0:	681a      	ldr	r2, [r3, #0]
 801c8a2:	69fb      	ldr	r3, [r7, #28]
 801c8a4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801c8a6:	4b2b      	ldr	r3, [pc, #172]	; (801c954 <tcp_input+0x730>)
 801c8a8:	781b      	ldrb	r3, [r3, #0]
 801c8aa:	f003 0320 	and.w	r3, r3, #32
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d030      	beq.n	801c914 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801c8b2:	69fb      	ldr	r3, [r7, #28]
 801c8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d009      	beq.n	801c8ce <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801c8ba:	69fb      	ldr	r3, [r7, #28]
 801c8bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c8be:	7b5a      	ldrb	r2, [r3, #13]
 801c8c0:	69fb      	ldr	r3, [r7, #28]
 801c8c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c8c4:	f042 0220 	orr.w	r2, r2, #32
 801c8c8:	b2d2      	uxtb	r2, r2
 801c8ca:	735a      	strb	r2, [r3, #13]
 801c8cc:	e022      	b.n	801c914 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c8ce:	69fb      	ldr	r3, [r7, #28]
 801c8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c8d6:	d005      	beq.n	801c8e4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801c8d8:	69fb      	ldr	r3, [r7, #28]
 801c8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8dc:	3301      	adds	r3, #1
 801c8de:	b29a      	uxth	r2, r3
 801c8e0:	69fb      	ldr	r3, [r7, #28]
 801c8e2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801c8e4:	69fb      	ldr	r3, [r7, #28]
 801c8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d00b      	beq.n	801c906 <tcp_input+0x6e2>
 801c8ee:	69fb      	ldr	r3, [r7, #28]
 801c8f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801c8f4:	69fb      	ldr	r3, [r7, #28]
 801c8f6:	6918      	ldr	r0, [r3, #16]
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	69f9      	ldr	r1, [r7, #28]
 801c8fe:	47a0      	blx	r4
 801c900:	4603      	mov	r3, r0
 801c902:	74fb      	strb	r3, [r7, #19]
 801c904:	e001      	b.n	801c90a <tcp_input+0x6e6>
 801c906:	2300      	movs	r3, #0
 801c908:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801c90a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c90e:	f113 0f0d 	cmn.w	r3, #13
 801c912:	d016      	beq.n	801c942 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801c914:	4b13      	ldr	r3, [pc, #76]	; (801c964 <tcp_input+0x740>)
 801c916:	2200      	movs	r2, #0
 801c918:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801c91a:	69f8      	ldr	r0, [r7, #28]
 801c91c:	f000 f88e 	bl	801ca3c <tcp_input_delayed_close>
 801c920:	4603      	mov	r3, r0
 801c922:	2b00      	cmp	r3, #0
 801c924:	d128      	bne.n	801c978 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801c926:	69f8      	ldr	r0, [r7, #28]
 801c928:	f002 fac8 	bl	801eebc <tcp_output>
 801c92c:	e025      	b.n	801c97a <tcp_input+0x756>
        goto aborted;
 801c92e:	bf00      	nop
 801c930:	e023      	b.n	801c97a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801c932:	bf00      	nop
 801c934:	e021      	b.n	801c97a <tcp_input+0x756>
              goto aborted;
 801c936:	bf00      	nop
 801c938:	e01f      	b.n	801c97a <tcp_input+0x756>
          goto aborted;
 801c93a:	bf00      	nop
 801c93c:	e01d      	b.n	801c97a <tcp_input+0x756>
            goto aborted;
 801c93e:	bf00      	nop
 801c940:	e01b      	b.n	801c97a <tcp_input+0x756>
              goto aborted;
 801c942:	bf00      	nop
 801c944:	e019      	b.n	801c97a <tcp_input+0x756>
 801c946:	bf00      	nop
 801c948:	2400d014 	.word	0x2400d014
 801c94c:	2400d024 	.word	0x2400d024
 801c950:	2400d044 	.word	0x2400d044
 801c954:	2400d041 	.word	0x2400d041
 801c958:	2400d03c 	.word	0x2400d03c
 801c95c:	2400d040 	.word	0x2400d040
 801c960:	2400d03e 	.word	0x2400d03e
 801c964:	2400d048 	.word	0x2400d048
 801c968:	2400d008 	.word	0x2400d008
 801c96c:	08028220 	.word	0x08028220
 801c970:	080283d4 	.word	0x080283d4
 801c974:	0802826c 	.word	0x0802826c
          goto aborted;
 801c978:	bf00      	nop
    tcp_input_pcb = NULL;
 801c97a:	4b27      	ldr	r3, [pc, #156]	; (801ca18 <tcp_input+0x7f4>)
 801c97c:	2200      	movs	r2, #0
 801c97e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801c980:	4b26      	ldr	r3, [pc, #152]	; (801ca1c <tcp_input+0x7f8>)
 801c982:	2200      	movs	r2, #0
 801c984:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801c986:	4b26      	ldr	r3, [pc, #152]	; (801ca20 <tcp_input+0x7fc>)
 801c988:	685b      	ldr	r3, [r3, #4]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d03f      	beq.n	801ca0e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801c98e:	4b24      	ldr	r3, [pc, #144]	; (801ca20 <tcp_input+0x7fc>)
 801c990:	685b      	ldr	r3, [r3, #4]
 801c992:	4618      	mov	r0, r3
 801c994:	f7fd fe02 	bl	801a59c <pbuf_free>
      inseg.p = NULL;
 801c998:	4b21      	ldr	r3, [pc, #132]	; (801ca20 <tcp_input+0x7fc>)
 801c99a:	2200      	movs	r2, #0
 801c99c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801c99e:	e036      	b.n	801ca0e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801c9a0:	4b20      	ldr	r3, [pc, #128]	; (801ca24 <tcp_input+0x800>)
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	899b      	ldrh	r3, [r3, #12]
 801c9a6:	b29b      	uxth	r3, r3
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	f7fc f941 	bl	8018c30 <lwip_htons>
 801c9ae:	4603      	mov	r3, r0
 801c9b0:	b2db      	uxtb	r3, r3
 801c9b2:	f003 0304 	and.w	r3, r3, #4
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d118      	bne.n	801c9ec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c9ba:	4b1b      	ldr	r3, [pc, #108]	; (801ca28 <tcp_input+0x804>)
 801c9bc:	6819      	ldr	r1, [r3, #0]
 801c9be:	4b1b      	ldr	r3, [pc, #108]	; (801ca2c <tcp_input+0x808>)
 801c9c0:	881b      	ldrh	r3, [r3, #0]
 801c9c2:	461a      	mov	r2, r3
 801c9c4:	4b1a      	ldr	r3, [pc, #104]	; (801ca30 <tcp_input+0x80c>)
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c9ca:	4b16      	ldr	r3, [pc, #88]	; (801ca24 <tcp_input+0x800>)
 801c9cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c9ce:	885b      	ldrh	r3, [r3, #2]
 801c9d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c9d2:	4a14      	ldr	r2, [pc, #80]	; (801ca24 <tcp_input+0x800>)
 801c9d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c9d6:	8812      	ldrh	r2, [r2, #0]
 801c9d8:	b292      	uxth	r2, r2
 801c9da:	9202      	str	r2, [sp, #8]
 801c9dc:	9301      	str	r3, [sp, #4]
 801c9de:	4b15      	ldr	r3, [pc, #84]	; (801ca34 <tcp_input+0x810>)
 801c9e0:	9300      	str	r3, [sp, #0]
 801c9e2:	4b15      	ldr	r3, [pc, #84]	; (801ca38 <tcp_input+0x814>)
 801c9e4:	4602      	mov	r2, r0
 801c9e6:	2000      	movs	r0, #0
 801c9e8:	f003 f81c 	bl	801fa24 <tcp_rst>
    pbuf_free(p);
 801c9ec:	6878      	ldr	r0, [r7, #4]
 801c9ee:	f7fd fdd5 	bl	801a59c <pbuf_free>
  return;
 801c9f2:	e00c      	b.n	801ca0e <tcp_input+0x7ea>
    goto dropped;
 801c9f4:	bf00      	nop
 801c9f6:	e006      	b.n	801ca06 <tcp_input+0x7e2>
    goto dropped;
 801c9f8:	bf00      	nop
 801c9fa:	e004      	b.n	801ca06 <tcp_input+0x7e2>
    goto dropped;
 801c9fc:	bf00      	nop
 801c9fe:	e002      	b.n	801ca06 <tcp_input+0x7e2>
      goto dropped;
 801ca00:	bf00      	nop
 801ca02:	e000      	b.n	801ca06 <tcp_input+0x7e2>
      goto dropped;
 801ca04:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ca06:	6878      	ldr	r0, [r7, #4]
 801ca08:	f7fd fdc8 	bl	801a59c <pbuf_free>
 801ca0c:	e000      	b.n	801ca10 <tcp_input+0x7ec>
  return;
 801ca0e:	bf00      	nop
}
 801ca10:	3724      	adds	r7, #36	; 0x24
 801ca12:	46bd      	mov	sp, r7
 801ca14:	bd90      	pop	{r4, r7, pc}
 801ca16:	bf00      	nop
 801ca18:	2400d048 	.word	0x2400d048
 801ca1c:	2400d044 	.word	0x2400d044
 801ca20:	2400d014 	.word	0x2400d014
 801ca24:	2400d024 	.word	0x2400d024
 801ca28:	2400d038 	.word	0x2400d038
 801ca2c:	2400d03e 	.word	0x2400d03e
 801ca30:	2400d034 	.word	0x2400d034
 801ca34:	24009eec 	.word	0x24009eec
 801ca38:	24009ef0 	.word	0x24009ef0

0801ca3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	b082      	sub	sp, #8
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d106      	bne.n	801ca58 <tcp_input_delayed_close+0x1c>
 801ca4a:	4b17      	ldr	r3, [pc, #92]	; (801caa8 <tcp_input_delayed_close+0x6c>)
 801ca4c:	f240 225a 	movw	r2, #602	; 0x25a
 801ca50:	4916      	ldr	r1, [pc, #88]	; (801caac <tcp_input_delayed_close+0x70>)
 801ca52:	4817      	ldr	r0, [pc, #92]	; (801cab0 <tcp_input_delayed_close+0x74>)
 801ca54:	f009 fa86 	bl	8025f64 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801ca58:	4b16      	ldr	r3, [pc, #88]	; (801cab4 <tcp_input_delayed_close+0x78>)
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	f003 0310 	and.w	r3, r3, #16
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d01c      	beq.n	801ca9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	8b5b      	ldrh	r3, [r3, #26]
 801ca68:	f003 0310 	and.w	r3, r3, #16
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d10d      	bne.n	801ca8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d008      	beq.n	801ca8c <tcp_input_delayed_close+0x50>
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ca80:	687a      	ldr	r2, [r7, #4]
 801ca82:	6912      	ldr	r2, [r2, #16]
 801ca84:	f06f 010e 	mvn.w	r1, #14
 801ca88:	4610      	mov	r0, r2
 801ca8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ca8c:	6879      	ldr	r1, [r7, #4]
 801ca8e:	480a      	ldr	r0, [pc, #40]	; (801cab8 <tcp_input_delayed_close+0x7c>)
 801ca90:	f7ff fa50 	bl	801bf34 <tcp_pcb_remove>
    tcp_free(pcb);
 801ca94:	6878      	ldr	r0, [r7, #4]
 801ca96:	f7fe f83d 	bl	801ab14 <tcp_free>
    return 1;
 801ca9a:	2301      	movs	r3, #1
 801ca9c:	e000      	b.n	801caa0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ca9e:	2300      	movs	r3, #0
}
 801caa0:	4618      	mov	r0, r3
 801caa2:	3708      	adds	r7, #8
 801caa4:	46bd      	mov	sp, r7
 801caa6:	bd80      	pop	{r7, pc}
 801caa8:	08028220 	.word	0x08028220
 801caac:	080283f0 	.word	0x080283f0
 801cab0:	0802826c 	.word	0x0802826c
 801cab4:	2400d041 	.word	0x2400d041
 801cab8:	2400d008 	.word	0x2400d008

0801cabc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801cabc:	b590      	push	{r4, r7, lr}
 801cabe:	b08b      	sub	sp, #44	; 0x2c
 801cac0:	af04      	add	r7, sp, #16
 801cac2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801cac4:	4b6f      	ldr	r3, [pc, #444]	; (801cc84 <tcp_listen_input+0x1c8>)
 801cac6:	781b      	ldrb	r3, [r3, #0]
 801cac8:	f003 0304 	and.w	r3, r3, #4
 801cacc:	2b00      	cmp	r3, #0
 801cace:	f040 80d2 	bne.w	801cc76 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d106      	bne.n	801cae6 <tcp_listen_input+0x2a>
 801cad8:	4b6b      	ldr	r3, [pc, #428]	; (801cc88 <tcp_listen_input+0x1cc>)
 801cada:	f240 2281 	movw	r2, #641	; 0x281
 801cade:	496b      	ldr	r1, [pc, #428]	; (801cc8c <tcp_listen_input+0x1d0>)
 801cae0:	486b      	ldr	r0, [pc, #428]	; (801cc90 <tcp_listen_input+0x1d4>)
 801cae2:	f009 fa3f 	bl	8025f64 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801cae6:	4b67      	ldr	r3, [pc, #412]	; (801cc84 <tcp_listen_input+0x1c8>)
 801cae8:	781b      	ldrb	r3, [r3, #0]
 801caea:	f003 0310 	and.w	r3, r3, #16
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d019      	beq.n	801cb26 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801caf2:	4b68      	ldr	r3, [pc, #416]	; (801cc94 <tcp_listen_input+0x1d8>)
 801caf4:	6819      	ldr	r1, [r3, #0]
 801caf6:	4b68      	ldr	r3, [pc, #416]	; (801cc98 <tcp_listen_input+0x1dc>)
 801caf8:	881b      	ldrh	r3, [r3, #0]
 801cafa:	461a      	mov	r2, r3
 801cafc:	4b67      	ldr	r3, [pc, #412]	; (801cc9c <tcp_listen_input+0x1e0>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cb02:	4b67      	ldr	r3, [pc, #412]	; (801cca0 <tcp_listen_input+0x1e4>)
 801cb04:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cb06:	885b      	ldrh	r3, [r3, #2]
 801cb08:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cb0a:	4a65      	ldr	r2, [pc, #404]	; (801cca0 <tcp_listen_input+0x1e4>)
 801cb0c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cb0e:	8812      	ldrh	r2, [r2, #0]
 801cb10:	b292      	uxth	r2, r2
 801cb12:	9202      	str	r2, [sp, #8]
 801cb14:	9301      	str	r3, [sp, #4]
 801cb16:	4b63      	ldr	r3, [pc, #396]	; (801cca4 <tcp_listen_input+0x1e8>)
 801cb18:	9300      	str	r3, [sp, #0]
 801cb1a:	4b63      	ldr	r3, [pc, #396]	; (801cca8 <tcp_listen_input+0x1ec>)
 801cb1c:	4602      	mov	r2, r0
 801cb1e:	6878      	ldr	r0, [r7, #4]
 801cb20:	f002 ff80 	bl	801fa24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801cb24:	e0a9      	b.n	801cc7a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801cb26:	4b57      	ldr	r3, [pc, #348]	; (801cc84 <tcp_listen_input+0x1c8>)
 801cb28:	781b      	ldrb	r3, [r3, #0]
 801cb2a:	f003 0302 	and.w	r3, r3, #2
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	f000 80a3 	beq.w	801cc7a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	7d5b      	ldrb	r3, [r3, #21]
 801cb38:	4618      	mov	r0, r3
 801cb3a:	f7ff f927 	bl	801bd8c <tcp_alloc>
 801cb3e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d111      	bne.n	801cb6a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	699b      	ldr	r3, [r3, #24]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d00a      	beq.n	801cb64 <tcp_listen_input+0xa8>
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	699b      	ldr	r3, [r3, #24]
 801cb52:	687a      	ldr	r2, [r7, #4]
 801cb54:	6910      	ldr	r0, [r2, #16]
 801cb56:	f04f 32ff 	mov.w	r2, #4294967295
 801cb5a:	2100      	movs	r1, #0
 801cb5c:	4798      	blx	r3
 801cb5e:	4603      	mov	r3, r0
 801cb60:	73bb      	strb	r3, [r7, #14]
      return;
 801cb62:	e08b      	b.n	801cc7c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cb64:	23f0      	movs	r3, #240	; 0xf0
 801cb66:	73bb      	strb	r3, [r7, #14]
      return;
 801cb68:	e088      	b.n	801cc7c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801cb6a:	4b50      	ldr	r3, [pc, #320]	; (801ccac <tcp_listen_input+0x1f0>)
 801cb6c:	695a      	ldr	r2, [r3, #20]
 801cb6e:	697b      	ldr	r3, [r7, #20]
 801cb70:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801cb72:	4b4e      	ldr	r3, [pc, #312]	; (801ccac <tcp_listen_input+0x1f0>)
 801cb74:	691a      	ldr	r2, [r3, #16]
 801cb76:	697b      	ldr	r3, [r7, #20]
 801cb78:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	8ada      	ldrh	r2, [r3, #22]
 801cb7e:	697b      	ldr	r3, [r7, #20]
 801cb80:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801cb82:	4b47      	ldr	r3, [pc, #284]	; (801cca0 <tcp_listen_input+0x1e4>)
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	881b      	ldrh	r3, [r3, #0]
 801cb88:	b29a      	uxth	r2, r3
 801cb8a:	697b      	ldr	r3, [r7, #20]
 801cb8c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801cb8e:	697b      	ldr	r3, [r7, #20]
 801cb90:	2203      	movs	r2, #3
 801cb92:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801cb94:	4b41      	ldr	r3, [pc, #260]	; (801cc9c <tcp_listen_input+0x1e0>)
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	1c5a      	adds	r2, r3, #1
 801cb9a:	697b      	ldr	r3, [r7, #20]
 801cb9c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801cb9e:	697b      	ldr	r3, [r7, #20]
 801cba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cba2:	697b      	ldr	r3, [r7, #20]
 801cba4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801cba6:	6978      	ldr	r0, [r7, #20]
 801cba8:	f7ff fa58 	bl	801c05c <tcp_next_iss>
 801cbac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801cbae:	697b      	ldr	r3, [r7, #20]
 801cbb0:	693a      	ldr	r2, [r7, #16]
 801cbb2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801cbb4:	697b      	ldr	r3, [r7, #20]
 801cbb6:	693a      	ldr	r2, [r7, #16]
 801cbb8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801cbba:	697b      	ldr	r3, [r7, #20]
 801cbbc:	693a      	ldr	r2, [r7, #16]
 801cbbe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801cbc0:	697b      	ldr	r3, [r7, #20]
 801cbc2:	693a      	ldr	r2, [r7, #16]
 801cbc4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801cbc6:	4b35      	ldr	r3, [pc, #212]	; (801cc9c <tcp_listen_input+0x1e0>)
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	1e5a      	subs	r2, r3, #1
 801cbcc:	697b      	ldr	r3, [r7, #20]
 801cbce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	691a      	ldr	r2, [r3, #16]
 801cbd4:	697b      	ldr	r3, [r7, #20]
 801cbd6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801cbd8:	697b      	ldr	r3, [r7, #20]
 801cbda:	687a      	ldr	r2, [r7, #4]
 801cbdc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	7a5b      	ldrb	r3, [r3, #9]
 801cbe2:	f003 030c 	and.w	r3, r3, #12
 801cbe6:	b2da      	uxtb	r2, r3
 801cbe8:	697b      	ldr	r3, [r7, #20]
 801cbea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	7a1a      	ldrb	r2, [r3, #8]
 801cbf0:	697b      	ldr	r3, [r7, #20]
 801cbf2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801cbf4:	4b2e      	ldr	r3, [pc, #184]	; (801ccb0 <tcp_listen_input+0x1f4>)
 801cbf6:	681a      	ldr	r2, [r3, #0]
 801cbf8:	697b      	ldr	r3, [r7, #20]
 801cbfa:	60da      	str	r2, [r3, #12]
 801cbfc:	4a2c      	ldr	r2, [pc, #176]	; (801ccb0 <tcp_listen_input+0x1f4>)
 801cbfe:	697b      	ldr	r3, [r7, #20]
 801cc00:	6013      	str	r3, [r2, #0]
 801cc02:	f003 f8d1 	bl	801fda8 <tcp_timer_needed>
 801cc06:	4b2b      	ldr	r3, [pc, #172]	; (801ccb4 <tcp_listen_input+0x1f8>)
 801cc08:	2201      	movs	r2, #1
 801cc0a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801cc0c:	6978      	ldr	r0, [r7, #20]
 801cc0e:	f001 fd8f 	bl	801e730 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801cc12:	4b23      	ldr	r3, [pc, #140]	; (801cca0 <tcp_listen_input+0x1e4>)
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	89db      	ldrh	r3, [r3, #14]
 801cc18:	b29a      	uxth	r2, r3
 801cc1a:	697b      	ldr	r3, [r7, #20]
 801cc1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801cc20:	697b      	ldr	r3, [r7, #20]
 801cc22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801cc26:	697b      	ldr	r3, [r7, #20]
 801cc28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801cc2c:	697b      	ldr	r3, [r7, #20]
 801cc2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801cc30:	697b      	ldr	r3, [r7, #20]
 801cc32:	3304      	adds	r3, #4
 801cc34:	4618      	mov	r0, r3
 801cc36:	f006 fe85 	bl	8023944 <ip4_route>
 801cc3a:	4601      	mov	r1, r0
 801cc3c:	697b      	ldr	r3, [r7, #20]
 801cc3e:	3304      	adds	r3, #4
 801cc40:	461a      	mov	r2, r3
 801cc42:	4620      	mov	r0, r4
 801cc44:	f7ff fa30 	bl	801c0a8 <tcp_eff_send_mss_netif>
 801cc48:	4603      	mov	r3, r0
 801cc4a:	461a      	mov	r2, r3
 801cc4c:	697b      	ldr	r3, [r7, #20]
 801cc4e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801cc50:	2112      	movs	r1, #18
 801cc52:	6978      	ldr	r0, [r7, #20]
 801cc54:	f002 f844 	bl	801ece0 <tcp_enqueue_flags>
 801cc58:	4603      	mov	r3, r0
 801cc5a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801cc5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d004      	beq.n	801cc6e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801cc64:	2100      	movs	r1, #0
 801cc66:	6978      	ldr	r0, [r7, #20]
 801cc68:	f7fe f97e 	bl	801af68 <tcp_abandon>
      return;
 801cc6c:	e006      	b.n	801cc7c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801cc6e:	6978      	ldr	r0, [r7, #20]
 801cc70:	f002 f924 	bl	801eebc <tcp_output>
  return;
 801cc74:	e001      	b.n	801cc7a <tcp_listen_input+0x1be>
    return;
 801cc76:	bf00      	nop
 801cc78:	e000      	b.n	801cc7c <tcp_listen_input+0x1c0>
  return;
 801cc7a:	bf00      	nop
}
 801cc7c:	371c      	adds	r7, #28
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	bd90      	pop	{r4, r7, pc}
 801cc82:	bf00      	nop
 801cc84:	2400d040 	.word	0x2400d040
 801cc88:	08028220 	.word	0x08028220
 801cc8c:	08028418 	.word	0x08028418
 801cc90:	0802826c 	.word	0x0802826c
 801cc94:	2400d038 	.word	0x2400d038
 801cc98:	2400d03e 	.word	0x2400d03e
 801cc9c:	2400d034 	.word	0x2400d034
 801cca0:	2400d024 	.word	0x2400d024
 801cca4:	24009eec 	.word	0x24009eec
 801cca8:	24009ef0 	.word	0x24009ef0
 801ccac:	24009edc 	.word	0x24009edc
 801ccb0:	2400d008 	.word	0x2400d008
 801ccb4:	2400d010 	.word	0x2400d010

0801ccb8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801ccb8:	b580      	push	{r7, lr}
 801ccba:	b086      	sub	sp, #24
 801ccbc:	af04      	add	r7, sp, #16
 801ccbe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801ccc0:	4b2f      	ldr	r3, [pc, #188]	; (801cd80 <tcp_timewait_input+0xc8>)
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	f003 0304 	and.w	r3, r3, #4
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d153      	bne.n	801cd74 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d106      	bne.n	801cce0 <tcp_timewait_input+0x28>
 801ccd2:	4b2c      	ldr	r3, [pc, #176]	; (801cd84 <tcp_timewait_input+0xcc>)
 801ccd4:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ccd8:	492b      	ldr	r1, [pc, #172]	; (801cd88 <tcp_timewait_input+0xd0>)
 801ccda:	482c      	ldr	r0, [pc, #176]	; (801cd8c <tcp_timewait_input+0xd4>)
 801ccdc:	f009 f942 	bl	8025f64 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801cce0:	4b27      	ldr	r3, [pc, #156]	; (801cd80 <tcp_timewait_input+0xc8>)
 801cce2:	781b      	ldrb	r3, [r3, #0]
 801cce4:	f003 0302 	and.w	r3, r3, #2
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d02a      	beq.n	801cd42 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801ccec:	4b28      	ldr	r3, [pc, #160]	; (801cd90 <tcp_timewait_input+0xd8>)
 801ccee:	681a      	ldr	r2, [r3, #0]
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccf4:	1ad3      	subs	r3, r2, r3
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	db2d      	blt.n	801cd56 <tcp_timewait_input+0x9e>
 801ccfa:	4b25      	ldr	r3, [pc, #148]	; (801cd90 <tcp_timewait_input+0xd8>)
 801ccfc:	681a      	ldr	r2, [r3, #0]
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd02:	6879      	ldr	r1, [r7, #4]
 801cd04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cd06:	440b      	add	r3, r1
 801cd08:	1ad3      	subs	r3, r2, r3
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	dc23      	bgt.n	801cd56 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd0e:	4b21      	ldr	r3, [pc, #132]	; (801cd94 <tcp_timewait_input+0xdc>)
 801cd10:	6819      	ldr	r1, [r3, #0]
 801cd12:	4b21      	ldr	r3, [pc, #132]	; (801cd98 <tcp_timewait_input+0xe0>)
 801cd14:	881b      	ldrh	r3, [r3, #0]
 801cd16:	461a      	mov	r2, r3
 801cd18:	4b1d      	ldr	r3, [pc, #116]	; (801cd90 <tcp_timewait_input+0xd8>)
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd1e:	4b1f      	ldr	r3, [pc, #124]	; (801cd9c <tcp_timewait_input+0xe4>)
 801cd20:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd22:	885b      	ldrh	r3, [r3, #2]
 801cd24:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cd26:	4a1d      	ldr	r2, [pc, #116]	; (801cd9c <tcp_timewait_input+0xe4>)
 801cd28:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cd2a:	8812      	ldrh	r2, [r2, #0]
 801cd2c:	b292      	uxth	r2, r2
 801cd2e:	9202      	str	r2, [sp, #8]
 801cd30:	9301      	str	r3, [sp, #4]
 801cd32:	4b1b      	ldr	r3, [pc, #108]	; (801cda0 <tcp_timewait_input+0xe8>)
 801cd34:	9300      	str	r3, [sp, #0]
 801cd36:	4b1b      	ldr	r3, [pc, #108]	; (801cda4 <tcp_timewait_input+0xec>)
 801cd38:	4602      	mov	r2, r0
 801cd3a:	6878      	ldr	r0, [r7, #4]
 801cd3c:	f002 fe72 	bl	801fa24 <tcp_rst>
      return;
 801cd40:	e01b      	b.n	801cd7a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801cd42:	4b0f      	ldr	r3, [pc, #60]	; (801cd80 <tcp_timewait_input+0xc8>)
 801cd44:	781b      	ldrb	r3, [r3, #0]
 801cd46:	f003 0301 	and.w	r3, r3, #1
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d003      	beq.n	801cd56 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801cd4e:	4b16      	ldr	r3, [pc, #88]	; (801cda8 <tcp_timewait_input+0xf0>)
 801cd50:	681a      	ldr	r2, [r3, #0]
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801cd56:	4b10      	ldr	r3, [pc, #64]	; (801cd98 <tcp_timewait_input+0xe0>)
 801cd58:	881b      	ldrh	r3, [r3, #0]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d00c      	beq.n	801cd78 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	8b5b      	ldrh	r3, [r3, #26]
 801cd62:	f043 0302 	orr.w	r3, r3, #2
 801cd66:	b29a      	uxth	r2, r3
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801cd6c:	6878      	ldr	r0, [r7, #4]
 801cd6e:	f002 f8a5 	bl	801eebc <tcp_output>
  }
  return;
 801cd72:	e001      	b.n	801cd78 <tcp_timewait_input+0xc0>
    return;
 801cd74:	bf00      	nop
 801cd76:	e000      	b.n	801cd7a <tcp_timewait_input+0xc2>
  return;
 801cd78:	bf00      	nop
}
 801cd7a:	3708      	adds	r7, #8
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd80      	pop	{r7, pc}
 801cd80:	2400d040 	.word	0x2400d040
 801cd84:	08028220 	.word	0x08028220
 801cd88:	08028438 	.word	0x08028438
 801cd8c:	0802826c 	.word	0x0802826c
 801cd90:	2400d034 	.word	0x2400d034
 801cd94:	2400d038 	.word	0x2400d038
 801cd98:	2400d03e 	.word	0x2400d03e
 801cd9c:	2400d024 	.word	0x2400d024
 801cda0:	24009eec 	.word	0x24009eec
 801cda4:	24009ef0 	.word	0x24009ef0
 801cda8:	2400cffc 	.word	0x2400cffc

0801cdac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801cdac:	b590      	push	{r4, r7, lr}
 801cdae:	b08d      	sub	sp, #52	; 0x34
 801cdb0:	af04      	add	r7, sp, #16
 801cdb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801cdb8:	2300      	movs	r3, #0
 801cdba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d106      	bne.n	801cdd0 <tcp_process+0x24>
 801cdc2:	4b9d      	ldr	r3, [pc, #628]	; (801d038 <tcp_process+0x28c>)
 801cdc4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801cdc8:	499c      	ldr	r1, [pc, #624]	; (801d03c <tcp_process+0x290>)
 801cdca:	489d      	ldr	r0, [pc, #628]	; (801d040 <tcp_process+0x294>)
 801cdcc:	f009 f8ca 	bl	8025f64 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801cdd0:	4b9c      	ldr	r3, [pc, #624]	; (801d044 <tcp_process+0x298>)
 801cdd2:	781b      	ldrb	r3, [r3, #0]
 801cdd4:	f003 0304 	and.w	r3, r3, #4
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d04e      	beq.n	801ce7a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	7d1b      	ldrb	r3, [r3, #20]
 801cde0:	2b02      	cmp	r3, #2
 801cde2:	d108      	bne.n	801cdf6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cde8:	4b97      	ldr	r3, [pc, #604]	; (801d048 <tcp_process+0x29c>)
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	429a      	cmp	r2, r3
 801cdee:	d123      	bne.n	801ce38 <tcp_process+0x8c>
        acceptable = 1;
 801cdf0:	2301      	movs	r3, #1
 801cdf2:	76fb      	strb	r3, [r7, #27]
 801cdf4:	e020      	b.n	801ce38 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cdfa:	4b94      	ldr	r3, [pc, #592]	; (801d04c <tcp_process+0x2a0>)
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	429a      	cmp	r2, r3
 801ce00:	d102      	bne.n	801ce08 <tcp_process+0x5c>
        acceptable = 1;
 801ce02:	2301      	movs	r3, #1
 801ce04:	76fb      	strb	r3, [r7, #27]
 801ce06:	e017      	b.n	801ce38 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ce08:	4b90      	ldr	r3, [pc, #576]	; (801d04c <tcp_process+0x2a0>)
 801ce0a:	681a      	ldr	r2, [r3, #0]
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce10:	1ad3      	subs	r3, r2, r3
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	db10      	blt.n	801ce38 <tcp_process+0x8c>
 801ce16:	4b8d      	ldr	r3, [pc, #564]	; (801d04c <tcp_process+0x2a0>)
 801ce18:	681a      	ldr	r2, [r3, #0]
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce1e:	6879      	ldr	r1, [r7, #4]
 801ce20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ce22:	440b      	add	r3, r1
 801ce24:	1ad3      	subs	r3, r2, r3
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	dc06      	bgt.n	801ce38 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	8b5b      	ldrh	r3, [r3, #26]
 801ce2e:	f043 0302 	orr.w	r3, r3, #2
 801ce32:	b29a      	uxth	r2, r3
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801ce38:	7efb      	ldrb	r3, [r7, #27]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d01b      	beq.n	801ce76 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	7d1b      	ldrb	r3, [r3, #20]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d106      	bne.n	801ce54 <tcp_process+0xa8>
 801ce46:	4b7c      	ldr	r3, [pc, #496]	; (801d038 <tcp_process+0x28c>)
 801ce48:	f44f 724e 	mov.w	r2, #824	; 0x338
 801ce4c:	4980      	ldr	r1, [pc, #512]	; (801d050 <tcp_process+0x2a4>)
 801ce4e:	487c      	ldr	r0, [pc, #496]	; (801d040 <tcp_process+0x294>)
 801ce50:	f009 f888 	bl	8025f64 <iprintf>
      recv_flags |= TF_RESET;
 801ce54:	4b7f      	ldr	r3, [pc, #508]	; (801d054 <tcp_process+0x2a8>)
 801ce56:	781b      	ldrb	r3, [r3, #0]
 801ce58:	f043 0308 	orr.w	r3, r3, #8
 801ce5c:	b2da      	uxtb	r2, r3
 801ce5e:	4b7d      	ldr	r3, [pc, #500]	; (801d054 <tcp_process+0x2a8>)
 801ce60:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	8b5b      	ldrh	r3, [r3, #26]
 801ce66:	f023 0301 	bic.w	r3, r3, #1
 801ce6a:	b29a      	uxth	r2, r3
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801ce70:	f06f 030d 	mvn.w	r3, #13
 801ce74:	e37a      	b.n	801d56c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801ce76:	2300      	movs	r3, #0
 801ce78:	e378      	b.n	801d56c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801ce7a:	4b72      	ldr	r3, [pc, #456]	; (801d044 <tcp_process+0x298>)
 801ce7c:	781b      	ldrb	r3, [r3, #0]
 801ce7e:	f003 0302 	and.w	r3, r3, #2
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d010      	beq.n	801cea8 <tcp_process+0xfc>
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	7d1b      	ldrb	r3, [r3, #20]
 801ce8a:	2b02      	cmp	r3, #2
 801ce8c:	d00c      	beq.n	801cea8 <tcp_process+0xfc>
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	7d1b      	ldrb	r3, [r3, #20]
 801ce92:	2b03      	cmp	r3, #3
 801ce94:	d008      	beq.n	801cea8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	8b5b      	ldrh	r3, [r3, #26]
 801ce9a:	f043 0302 	orr.w	r3, r3, #2
 801ce9e:	b29a      	uxth	r2, r3
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801cea4:	2300      	movs	r3, #0
 801cea6:	e361      	b.n	801d56c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	8b5b      	ldrh	r3, [r3, #26]
 801ceac:	f003 0310 	and.w	r3, r3, #16
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d103      	bne.n	801cebc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801ceb4:	4b68      	ldr	r3, [pc, #416]	; (801d058 <tcp_process+0x2ac>)
 801ceb6:	681a      	ldr	r2, [r3, #0]
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2200      	movs	r2, #0
 801cec0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	2200      	movs	r2, #0
 801cec8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801cecc:	6878      	ldr	r0, [r7, #4]
 801cece:	f001 fc2f 	bl	801e730 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	7d1b      	ldrb	r3, [r3, #20]
 801ced6:	3b02      	subs	r3, #2
 801ced8:	2b07      	cmp	r3, #7
 801ceda:	f200 8337 	bhi.w	801d54c <tcp_process+0x7a0>
 801cede:	a201      	add	r2, pc, #4	; (adr r2, 801cee4 <tcp_process+0x138>)
 801cee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cee4:	0801cf05 	.word	0x0801cf05
 801cee8:	0801d135 	.word	0x0801d135
 801ceec:	0801d2ad 	.word	0x0801d2ad
 801cef0:	0801d2d7 	.word	0x0801d2d7
 801cef4:	0801d3fb 	.word	0x0801d3fb
 801cef8:	0801d2ad 	.word	0x0801d2ad
 801cefc:	0801d487 	.word	0x0801d487
 801cf00:	0801d517 	.word	0x0801d517
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801cf04:	4b4f      	ldr	r3, [pc, #316]	; (801d044 <tcp_process+0x298>)
 801cf06:	781b      	ldrb	r3, [r3, #0]
 801cf08:	f003 0310 	and.w	r3, r3, #16
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	f000 80e4 	beq.w	801d0da <tcp_process+0x32e>
 801cf12:	4b4c      	ldr	r3, [pc, #304]	; (801d044 <tcp_process+0x298>)
 801cf14:	781b      	ldrb	r3, [r3, #0]
 801cf16:	f003 0302 	and.w	r3, r3, #2
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	f000 80dd 	beq.w	801d0da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf24:	1c5a      	adds	r2, r3, #1
 801cf26:	4b48      	ldr	r3, [pc, #288]	; (801d048 <tcp_process+0x29c>)
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	429a      	cmp	r2, r3
 801cf2c:	f040 80d5 	bne.w	801d0da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801cf30:	4b46      	ldr	r3, [pc, #280]	; (801d04c <tcp_process+0x2a0>)
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	1c5a      	adds	r2, r3, #1
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801cf42:	4b41      	ldr	r3, [pc, #260]	; (801d048 <tcp_process+0x29c>)
 801cf44:	681a      	ldr	r2, [r3, #0]
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801cf4a:	4b44      	ldr	r3, [pc, #272]	; (801d05c <tcp_process+0x2b0>)
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	89db      	ldrh	r3, [r3, #14]
 801cf50:	b29a      	uxth	r2, r3
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801cf64:	4b39      	ldr	r3, [pc, #228]	; (801d04c <tcp_process+0x2a0>)
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	1e5a      	subs	r2, r3, #1
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	2204      	movs	r2, #4
 801cf72:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	3304      	adds	r3, #4
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	f006 fce1 	bl	8023944 <ip4_route>
 801cf82:	4601      	mov	r1, r0
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	3304      	adds	r3, #4
 801cf88:	461a      	mov	r2, r3
 801cf8a:	4620      	mov	r0, r4
 801cf8c:	f7ff f88c 	bl	801c0a8 <tcp_eff_send_mss_netif>
 801cf90:	4603      	mov	r3, r0
 801cf92:	461a      	mov	r2, r3
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cf9c:	009a      	lsls	r2, r3, #2
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cfa2:	005b      	lsls	r3, r3, #1
 801cfa4:	f241 111c 	movw	r1, #4380	; 0x111c
 801cfa8:	428b      	cmp	r3, r1
 801cfaa:	bf38      	it	cc
 801cfac:	460b      	movcc	r3, r1
 801cfae:	429a      	cmp	r2, r3
 801cfb0:	d204      	bcs.n	801cfbc <tcp_process+0x210>
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cfb6:	009b      	lsls	r3, r3, #2
 801cfb8:	b29b      	uxth	r3, r3
 801cfba:	e00d      	b.n	801cfd8 <tcp_process+0x22c>
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cfc0:	005b      	lsls	r3, r3, #1
 801cfc2:	f241 121c 	movw	r2, #4380	; 0x111c
 801cfc6:	4293      	cmp	r3, r2
 801cfc8:	d904      	bls.n	801cfd4 <tcp_process+0x228>
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cfce:	005b      	lsls	r3, r3, #1
 801cfd0:	b29b      	uxth	r3, r3
 801cfd2:	e001      	b.n	801cfd8 <tcp_process+0x22c>
 801cfd4:	f241 131c 	movw	r3, #4380	; 0x111c
 801cfd8:	687a      	ldr	r2, [r7, #4]
 801cfda:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d106      	bne.n	801cff6 <tcp_process+0x24a>
 801cfe8:	4b13      	ldr	r3, [pc, #76]	; (801d038 <tcp_process+0x28c>)
 801cfea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801cfee:	491c      	ldr	r1, [pc, #112]	; (801d060 <tcp_process+0x2b4>)
 801cff0:	4813      	ldr	r0, [pc, #76]	; (801d040 <tcp_process+0x294>)
 801cff2:	f008 ffb7 	bl	8025f64 <iprintf>
        --pcb->snd_queuelen;
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cffc:	3b01      	subs	r3, #1
 801cffe:	b29a      	uxth	r2, r3
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d00a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801d00c:	69fb      	ldr	r3, [r7, #28]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d12a      	bne.n	801d068 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d016:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d018:	69fb      	ldr	r3, [r7, #28]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d106      	bne.n	801d02c <tcp_process+0x280>
 801d01e:	4b06      	ldr	r3, [pc, #24]	; (801d038 <tcp_process+0x28c>)
 801d020:	f44f 725d 	mov.w	r2, #884	; 0x374
 801d024:	490f      	ldr	r1, [pc, #60]	; (801d064 <tcp_process+0x2b8>)
 801d026:	4806      	ldr	r0, [pc, #24]	; (801d040 <tcp_process+0x294>)
 801d028:	f008 ff9c 	bl	8025f64 <iprintf>
          pcb->unsent = rseg->next;
 801d02c:	69fb      	ldr	r3, [r7, #28]
 801d02e:	681a      	ldr	r2, [r3, #0]
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	66da      	str	r2, [r3, #108]	; 0x6c
 801d034:	e01c      	b.n	801d070 <tcp_process+0x2c4>
 801d036:	bf00      	nop
 801d038:	08028220 	.word	0x08028220
 801d03c:	08028458 	.word	0x08028458
 801d040:	0802826c 	.word	0x0802826c
 801d044:	2400d040 	.word	0x2400d040
 801d048:	2400d038 	.word	0x2400d038
 801d04c:	2400d034 	.word	0x2400d034
 801d050:	08028474 	.word	0x08028474
 801d054:	2400d041 	.word	0x2400d041
 801d058:	2400cffc 	.word	0x2400cffc
 801d05c:	2400d024 	.word	0x2400d024
 801d060:	08028494 	.word	0x08028494
 801d064:	080284ac 	.word	0x080284ac
        } else {
          pcb->unacked = rseg->next;
 801d068:	69fb      	ldr	r3, [r7, #28]
 801d06a:	681a      	ldr	r2, [r3, #0]
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801d070:	69f8      	ldr	r0, [r7, #28]
 801d072:	f7fe fd22 	bl	801baba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d104      	bne.n	801d088 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d084:	861a      	strh	r2, [r3, #48]	; 0x30
 801d086:	e006      	b.n	801d096 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	2200      	movs	r2, #0
 801d08c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	2200      	movs	r2, #0
 801d092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d00a      	beq.n	801d0b6 <tcp_process+0x30a>
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d0a6:	687a      	ldr	r2, [r7, #4]
 801d0a8:	6910      	ldr	r0, [r2, #16]
 801d0aa:	2200      	movs	r2, #0
 801d0ac:	6879      	ldr	r1, [r7, #4]
 801d0ae:	4798      	blx	r3
 801d0b0:	4603      	mov	r3, r0
 801d0b2:	76bb      	strb	r3, [r7, #26]
 801d0b4:	e001      	b.n	801d0ba <tcp_process+0x30e>
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801d0ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d0be:	f113 0f0d 	cmn.w	r3, #13
 801d0c2:	d102      	bne.n	801d0ca <tcp_process+0x31e>
          return ERR_ABRT;
 801d0c4:	f06f 030c 	mvn.w	r3, #12
 801d0c8:	e250      	b.n	801d56c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	8b5b      	ldrh	r3, [r3, #26]
 801d0ce:	f043 0302 	orr.w	r3, r3, #2
 801d0d2:	b29a      	uxth	r2, r3
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801d0d8:	e23a      	b.n	801d550 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801d0da:	4b98      	ldr	r3, [pc, #608]	; (801d33c <tcp_process+0x590>)
 801d0dc:	781b      	ldrb	r3, [r3, #0]
 801d0de:	f003 0310 	and.w	r3, r3, #16
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	f000 8234 	beq.w	801d550 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d0e8:	4b95      	ldr	r3, [pc, #596]	; (801d340 <tcp_process+0x594>)
 801d0ea:	6819      	ldr	r1, [r3, #0]
 801d0ec:	4b95      	ldr	r3, [pc, #596]	; (801d344 <tcp_process+0x598>)
 801d0ee:	881b      	ldrh	r3, [r3, #0]
 801d0f0:	461a      	mov	r2, r3
 801d0f2:	4b95      	ldr	r3, [pc, #596]	; (801d348 <tcp_process+0x59c>)
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d0f8:	4b94      	ldr	r3, [pc, #592]	; (801d34c <tcp_process+0x5a0>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d0fc:	885b      	ldrh	r3, [r3, #2]
 801d0fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d100:	4a92      	ldr	r2, [pc, #584]	; (801d34c <tcp_process+0x5a0>)
 801d102:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d104:	8812      	ldrh	r2, [r2, #0]
 801d106:	b292      	uxth	r2, r2
 801d108:	9202      	str	r2, [sp, #8]
 801d10a:	9301      	str	r3, [sp, #4]
 801d10c:	4b90      	ldr	r3, [pc, #576]	; (801d350 <tcp_process+0x5a4>)
 801d10e:	9300      	str	r3, [sp, #0]
 801d110:	4b90      	ldr	r3, [pc, #576]	; (801d354 <tcp_process+0x5a8>)
 801d112:	4602      	mov	r2, r0
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f002 fc85 	bl	801fa24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d120:	2b05      	cmp	r3, #5
 801d122:	f200 8215 	bhi.w	801d550 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	2200      	movs	r2, #0
 801d12a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801d12c:	6878      	ldr	r0, [r7, #4]
 801d12e:	f002 fa4f 	bl	801f5d0 <tcp_rexmit_rto>
      break;
 801d132:	e20d      	b.n	801d550 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801d134:	4b81      	ldr	r3, [pc, #516]	; (801d33c <tcp_process+0x590>)
 801d136:	781b      	ldrb	r3, [r3, #0]
 801d138:	f003 0310 	and.w	r3, r3, #16
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	f000 80a1 	beq.w	801d284 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d142:	4b7f      	ldr	r3, [pc, #508]	; (801d340 <tcp_process+0x594>)
 801d144:	681a      	ldr	r2, [r3, #0]
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d14a:	1ad3      	subs	r3, r2, r3
 801d14c:	3b01      	subs	r3, #1
 801d14e:	2b00      	cmp	r3, #0
 801d150:	db7e      	blt.n	801d250 <tcp_process+0x4a4>
 801d152:	4b7b      	ldr	r3, [pc, #492]	; (801d340 <tcp_process+0x594>)
 801d154:	681a      	ldr	r2, [r3, #0]
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d15a:	1ad3      	subs	r3, r2, r3
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	dc77      	bgt.n	801d250 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	2204      	movs	r2, #4
 801d164:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d102      	bne.n	801d174 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801d16e:	23fa      	movs	r3, #250	; 0xfa
 801d170:	76bb      	strb	r3, [r7, #26]
 801d172:	e01d      	b.n	801d1b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d178:	699b      	ldr	r3, [r3, #24]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d106      	bne.n	801d18c <tcp_process+0x3e0>
 801d17e:	4b76      	ldr	r3, [pc, #472]	; (801d358 <tcp_process+0x5ac>)
 801d180:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801d184:	4975      	ldr	r1, [pc, #468]	; (801d35c <tcp_process+0x5b0>)
 801d186:	4876      	ldr	r0, [pc, #472]	; (801d360 <tcp_process+0x5b4>)
 801d188:	f008 feec 	bl	8025f64 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d190:	699b      	ldr	r3, [r3, #24]
 801d192:	2b00      	cmp	r3, #0
 801d194:	d00a      	beq.n	801d1ac <tcp_process+0x400>
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d19a:	699b      	ldr	r3, [r3, #24]
 801d19c:	687a      	ldr	r2, [r7, #4]
 801d19e:	6910      	ldr	r0, [r2, #16]
 801d1a0:	2200      	movs	r2, #0
 801d1a2:	6879      	ldr	r1, [r7, #4]
 801d1a4:	4798      	blx	r3
 801d1a6:	4603      	mov	r3, r0
 801d1a8:	76bb      	strb	r3, [r7, #26]
 801d1aa:	e001      	b.n	801d1b0 <tcp_process+0x404>
 801d1ac:	23f0      	movs	r3, #240	; 0xf0
 801d1ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801d1b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d00a      	beq.n	801d1ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801d1b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d1bc:	f113 0f0d 	cmn.w	r3, #13
 801d1c0:	d002      	beq.n	801d1c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 801d1c2:	6878      	ldr	r0, [r7, #4]
 801d1c4:	f7fd ff8e 	bl	801b0e4 <tcp_abort>
            }
            return ERR_ABRT;
 801d1c8:	f06f 030c 	mvn.w	r3, #12
 801d1cc:	e1ce      	b.n	801d56c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801d1ce:	6878      	ldr	r0, [r7, #4]
 801d1d0:	f000 fae0 	bl	801d794 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801d1d4:	4b63      	ldr	r3, [pc, #396]	; (801d364 <tcp_process+0x5b8>)
 801d1d6:	881b      	ldrh	r3, [r3, #0]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d005      	beq.n	801d1e8 <tcp_process+0x43c>
            recv_acked--;
 801d1dc:	4b61      	ldr	r3, [pc, #388]	; (801d364 <tcp_process+0x5b8>)
 801d1de:	881b      	ldrh	r3, [r3, #0]
 801d1e0:	3b01      	subs	r3, #1
 801d1e2:	b29a      	uxth	r2, r3
 801d1e4:	4b5f      	ldr	r3, [pc, #380]	; (801d364 <tcp_process+0x5b8>)
 801d1e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d1ec:	009a      	lsls	r2, r3, #2
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d1f2:	005b      	lsls	r3, r3, #1
 801d1f4:	f241 111c 	movw	r1, #4380	; 0x111c
 801d1f8:	428b      	cmp	r3, r1
 801d1fa:	bf38      	it	cc
 801d1fc:	460b      	movcc	r3, r1
 801d1fe:	429a      	cmp	r2, r3
 801d200:	d204      	bcs.n	801d20c <tcp_process+0x460>
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d206:	009b      	lsls	r3, r3, #2
 801d208:	b29b      	uxth	r3, r3
 801d20a:	e00d      	b.n	801d228 <tcp_process+0x47c>
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d210:	005b      	lsls	r3, r3, #1
 801d212:	f241 121c 	movw	r2, #4380	; 0x111c
 801d216:	4293      	cmp	r3, r2
 801d218:	d904      	bls.n	801d224 <tcp_process+0x478>
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d21e:	005b      	lsls	r3, r3, #1
 801d220:	b29b      	uxth	r3, r3
 801d222:	e001      	b.n	801d228 <tcp_process+0x47c>
 801d224:	f241 131c 	movw	r3, #4380	; 0x111c
 801d228:	687a      	ldr	r2, [r7, #4]
 801d22a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801d22e:	4b4e      	ldr	r3, [pc, #312]	; (801d368 <tcp_process+0x5bc>)
 801d230:	781b      	ldrb	r3, [r3, #0]
 801d232:	f003 0320 	and.w	r3, r3, #32
 801d236:	2b00      	cmp	r3, #0
 801d238:	d037      	beq.n	801d2aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	8b5b      	ldrh	r3, [r3, #26]
 801d23e:	f043 0302 	orr.w	r3, r3, #2
 801d242:	b29a      	uxth	r2, r3
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	2207      	movs	r2, #7
 801d24c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801d24e:	e02c      	b.n	801d2aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d250:	4b3b      	ldr	r3, [pc, #236]	; (801d340 <tcp_process+0x594>)
 801d252:	6819      	ldr	r1, [r3, #0]
 801d254:	4b3b      	ldr	r3, [pc, #236]	; (801d344 <tcp_process+0x598>)
 801d256:	881b      	ldrh	r3, [r3, #0]
 801d258:	461a      	mov	r2, r3
 801d25a:	4b3b      	ldr	r3, [pc, #236]	; (801d348 <tcp_process+0x59c>)
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d260:	4b3a      	ldr	r3, [pc, #232]	; (801d34c <tcp_process+0x5a0>)
 801d262:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d264:	885b      	ldrh	r3, [r3, #2]
 801d266:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d268:	4a38      	ldr	r2, [pc, #224]	; (801d34c <tcp_process+0x5a0>)
 801d26a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d26c:	8812      	ldrh	r2, [r2, #0]
 801d26e:	b292      	uxth	r2, r2
 801d270:	9202      	str	r2, [sp, #8]
 801d272:	9301      	str	r3, [sp, #4]
 801d274:	4b36      	ldr	r3, [pc, #216]	; (801d350 <tcp_process+0x5a4>)
 801d276:	9300      	str	r3, [sp, #0]
 801d278:	4b36      	ldr	r3, [pc, #216]	; (801d354 <tcp_process+0x5a8>)
 801d27a:	4602      	mov	r2, r0
 801d27c:	6878      	ldr	r0, [r7, #4]
 801d27e:	f002 fbd1 	bl	801fa24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801d282:	e167      	b.n	801d554 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d284:	4b2d      	ldr	r3, [pc, #180]	; (801d33c <tcp_process+0x590>)
 801d286:	781b      	ldrb	r3, [r3, #0]
 801d288:	f003 0302 	and.w	r3, r3, #2
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	f000 8161 	beq.w	801d554 <tcp_process+0x7a8>
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d296:	1e5a      	subs	r2, r3, #1
 801d298:	4b2b      	ldr	r3, [pc, #172]	; (801d348 <tcp_process+0x59c>)
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	429a      	cmp	r2, r3
 801d29e:	f040 8159 	bne.w	801d554 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f002 f9b6 	bl	801f614 <tcp_rexmit>
      break;
 801d2a8:	e154      	b.n	801d554 <tcp_process+0x7a8>
 801d2aa:	e153      	b.n	801d554 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801d2ac:	6878      	ldr	r0, [r7, #4]
 801d2ae:	f000 fa71 	bl	801d794 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801d2b2:	4b2d      	ldr	r3, [pc, #180]	; (801d368 <tcp_process+0x5bc>)
 801d2b4:	781b      	ldrb	r3, [r3, #0]
 801d2b6:	f003 0320 	and.w	r3, r3, #32
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	f000 814c 	beq.w	801d558 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	8b5b      	ldrh	r3, [r3, #26]
 801d2c4:	f043 0302 	orr.w	r3, r3, #2
 801d2c8:	b29a      	uxth	r2, r3
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	2207      	movs	r2, #7
 801d2d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d2d4:	e140      	b.n	801d558 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801d2d6:	6878      	ldr	r0, [r7, #4]
 801d2d8:	f000 fa5c 	bl	801d794 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d2dc:	4b22      	ldr	r3, [pc, #136]	; (801d368 <tcp_process+0x5bc>)
 801d2de:	781b      	ldrb	r3, [r3, #0]
 801d2e0:	f003 0320 	and.w	r3, r3, #32
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d071      	beq.n	801d3cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d2e8:	4b14      	ldr	r3, [pc, #80]	; (801d33c <tcp_process+0x590>)
 801d2ea:	781b      	ldrb	r3, [r3, #0]
 801d2ec:	f003 0310 	and.w	r3, r3, #16
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d060      	beq.n	801d3b6 <tcp_process+0x60a>
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d2f8:	4b11      	ldr	r3, [pc, #68]	; (801d340 <tcp_process+0x594>)
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	429a      	cmp	r2, r3
 801d2fe:	d15a      	bne.n	801d3b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d304:	2b00      	cmp	r3, #0
 801d306:	d156      	bne.n	801d3b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	8b5b      	ldrh	r3, [r3, #26]
 801d30c:	f043 0302 	orr.w	r3, r3, #2
 801d310:	b29a      	uxth	r2, r3
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801d316:	6878      	ldr	r0, [r7, #4]
 801d318:	f7fe fdbc 	bl	801be94 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d31c:	4b13      	ldr	r3, [pc, #76]	; (801d36c <tcp_process+0x5c0>)
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	687a      	ldr	r2, [r7, #4]
 801d322:	429a      	cmp	r2, r3
 801d324:	d105      	bne.n	801d332 <tcp_process+0x586>
 801d326:	4b11      	ldr	r3, [pc, #68]	; (801d36c <tcp_process+0x5c0>)
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	68db      	ldr	r3, [r3, #12]
 801d32c:	4a0f      	ldr	r2, [pc, #60]	; (801d36c <tcp_process+0x5c0>)
 801d32e:	6013      	str	r3, [r2, #0]
 801d330:	e02e      	b.n	801d390 <tcp_process+0x5e4>
 801d332:	4b0e      	ldr	r3, [pc, #56]	; (801d36c <tcp_process+0x5c0>)
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	617b      	str	r3, [r7, #20]
 801d338:	e027      	b.n	801d38a <tcp_process+0x5de>
 801d33a:	bf00      	nop
 801d33c:	2400d040 	.word	0x2400d040
 801d340:	2400d038 	.word	0x2400d038
 801d344:	2400d03e 	.word	0x2400d03e
 801d348:	2400d034 	.word	0x2400d034
 801d34c:	2400d024 	.word	0x2400d024
 801d350:	24009eec 	.word	0x24009eec
 801d354:	24009ef0 	.word	0x24009ef0
 801d358:	08028220 	.word	0x08028220
 801d35c:	080284c0 	.word	0x080284c0
 801d360:	0802826c 	.word	0x0802826c
 801d364:	2400d03c 	.word	0x2400d03c
 801d368:	2400d041 	.word	0x2400d041
 801d36c:	2400d008 	.word	0x2400d008
 801d370:	697b      	ldr	r3, [r7, #20]
 801d372:	68db      	ldr	r3, [r3, #12]
 801d374:	687a      	ldr	r2, [r7, #4]
 801d376:	429a      	cmp	r2, r3
 801d378:	d104      	bne.n	801d384 <tcp_process+0x5d8>
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	68da      	ldr	r2, [r3, #12]
 801d37e:	697b      	ldr	r3, [r7, #20]
 801d380:	60da      	str	r2, [r3, #12]
 801d382:	e005      	b.n	801d390 <tcp_process+0x5e4>
 801d384:	697b      	ldr	r3, [r7, #20]
 801d386:	68db      	ldr	r3, [r3, #12]
 801d388:	617b      	str	r3, [r7, #20]
 801d38a:	697b      	ldr	r3, [r7, #20]
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d1ef      	bne.n	801d370 <tcp_process+0x5c4>
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	2200      	movs	r2, #0
 801d394:	60da      	str	r2, [r3, #12]
 801d396:	4b77      	ldr	r3, [pc, #476]	; (801d574 <tcp_process+0x7c8>)
 801d398:	2201      	movs	r2, #1
 801d39a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	220a      	movs	r2, #10
 801d3a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801d3a2:	4b75      	ldr	r3, [pc, #468]	; (801d578 <tcp_process+0x7cc>)
 801d3a4:	681a      	ldr	r2, [r3, #0]
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	60da      	str	r2, [r3, #12]
 801d3aa:	4a73      	ldr	r2, [pc, #460]	; (801d578 <tcp_process+0x7cc>)
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	6013      	str	r3, [r2, #0]
 801d3b0:	f002 fcfa 	bl	801fda8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801d3b4:	e0d2      	b.n	801d55c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	8b5b      	ldrh	r3, [r3, #26]
 801d3ba:	f043 0302 	orr.w	r3, r3, #2
 801d3be:	b29a      	uxth	r2, r3
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	2208      	movs	r2, #8
 801d3c8:	751a      	strb	r2, [r3, #20]
      break;
 801d3ca:	e0c7      	b.n	801d55c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d3cc:	4b6b      	ldr	r3, [pc, #428]	; (801d57c <tcp_process+0x7d0>)
 801d3ce:	781b      	ldrb	r3, [r3, #0]
 801d3d0:	f003 0310 	and.w	r3, r3, #16
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	f000 80c1 	beq.w	801d55c <tcp_process+0x7b0>
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d3de:	4b68      	ldr	r3, [pc, #416]	; (801d580 <tcp_process+0x7d4>)
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	429a      	cmp	r2, r3
 801d3e4:	f040 80ba 	bne.w	801d55c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	f040 80b5 	bne.w	801d55c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	2206      	movs	r2, #6
 801d3f6:	751a      	strb	r2, [r3, #20]
      break;
 801d3f8:	e0b0      	b.n	801d55c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801d3fa:	6878      	ldr	r0, [r7, #4]
 801d3fc:	f000 f9ca 	bl	801d794 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d400:	4b60      	ldr	r3, [pc, #384]	; (801d584 <tcp_process+0x7d8>)
 801d402:	781b      	ldrb	r3, [r3, #0]
 801d404:	f003 0320 	and.w	r3, r3, #32
 801d408:	2b00      	cmp	r3, #0
 801d40a:	f000 80a9 	beq.w	801d560 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	8b5b      	ldrh	r3, [r3, #26]
 801d412:	f043 0302 	orr.w	r3, r3, #2
 801d416:	b29a      	uxth	r2, r3
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801d41c:	6878      	ldr	r0, [r7, #4]
 801d41e:	f7fe fd39 	bl	801be94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d422:	4b59      	ldr	r3, [pc, #356]	; (801d588 <tcp_process+0x7dc>)
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	687a      	ldr	r2, [r7, #4]
 801d428:	429a      	cmp	r2, r3
 801d42a:	d105      	bne.n	801d438 <tcp_process+0x68c>
 801d42c:	4b56      	ldr	r3, [pc, #344]	; (801d588 <tcp_process+0x7dc>)
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	68db      	ldr	r3, [r3, #12]
 801d432:	4a55      	ldr	r2, [pc, #340]	; (801d588 <tcp_process+0x7dc>)
 801d434:	6013      	str	r3, [r2, #0]
 801d436:	e013      	b.n	801d460 <tcp_process+0x6b4>
 801d438:	4b53      	ldr	r3, [pc, #332]	; (801d588 <tcp_process+0x7dc>)
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	613b      	str	r3, [r7, #16]
 801d43e:	e00c      	b.n	801d45a <tcp_process+0x6ae>
 801d440:	693b      	ldr	r3, [r7, #16]
 801d442:	68db      	ldr	r3, [r3, #12]
 801d444:	687a      	ldr	r2, [r7, #4]
 801d446:	429a      	cmp	r2, r3
 801d448:	d104      	bne.n	801d454 <tcp_process+0x6a8>
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	68da      	ldr	r2, [r3, #12]
 801d44e:	693b      	ldr	r3, [r7, #16]
 801d450:	60da      	str	r2, [r3, #12]
 801d452:	e005      	b.n	801d460 <tcp_process+0x6b4>
 801d454:	693b      	ldr	r3, [r7, #16]
 801d456:	68db      	ldr	r3, [r3, #12]
 801d458:	613b      	str	r3, [r7, #16]
 801d45a:	693b      	ldr	r3, [r7, #16]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d1ef      	bne.n	801d440 <tcp_process+0x694>
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	2200      	movs	r2, #0
 801d464:	60da      	str	r2, [r3, #12]
 801d466:	4b43      	ldr	r3, [pc, #268]	; (801d574 <tcp_process+0x7c8>)
 801d468:	2201      	movs	r2, #1
 801d46a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	220a      	movs	r2, #10
 801d470:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d472:	4b41      	ldr	r3, [pc, #260]	; (801d578 <tcp_process+0x7cc>)
 801d474:	681a      	ldr	r2, [r3, #0]
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	60da      	str	r2, [r3, #12]
 801d47a:	4a3f      	ldr	r2, [pc, #252]	; (801d578 <tcp_process+0x7cc>)
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	6013      	str	r3, [r2, #0]
 801d480:	f002 fc92 	bl	801fda8 <tcp_timer_needed>
      }
      break;
 801d484:	e06c      	b.n	801d560 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801d486:	6878      	ldr	r0, [r7, #4]
 801d488:	f000 f984 	bl	801d794 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d48c:	4b3b      	ldr	r3, [pc, #236]	; (801d57c <tcp_process+0x7d0>)
 801d48e:	781b      	ldrb	r3, [r3, #0]
 801d490:	f003 0310 	and.w	r3, r3, #16
 801d494:	2b00      	cmp	r3, #0
 801d496:	d065      	beq.n	801d564 <tcp_process+0x7b8>
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d49c:	4b38      	ldr	r3, [pc, #224]	; (801d580 <tcp_process+0x7d4>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	429a      	cmp	r2, r3
 801d4a2:	d15f      	bne.n	801d564 <tcp_process+0x7b8>
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d15b      	bne.n	801d564 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801d4ac:	6878      	ldr	r0, [r7, #4]
 801d4ae:	f7fe fcf1 	bl	801be94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d4b2:	4b35      	ldr	r3, [pc, #212]	; (801d588 <tcp_process+0x7dc>)
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	687a      	ldr	r2, [r7, #4]
 801d4b8:	429a      	cmp	r2, r3
 801d4ba:	d105      	bne.n	801d4c8 <tcp_process+0x71c>
 801d4bc:	4b32      	ldr	r3, [pc, #200]	; (801d588 <tcp_process+0x7dc>)
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	68db      	ldr	r3, [r3, #12]
 801d4c2:	4a31      	ldr	r2, [pc, #196]	; (801d588 <tcp_process+0x7dc>)
 801d4c4:	6013      	str	r3, [r2, #0]
 801d4c6:	e013      	b.n	801d4f0 <tcp_process+0x744>
 801d4c8:	4b2f      	ldr	r3, [pc, #188]	; (801d588 <tcp_process+0x7dc>)
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	60fb      	str	r3, [r7, #12]
 801d4ce:	e00c      	b.n	801d4ea <tcp_process+0x73e>
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	68db      	ldr	r3, [r3, #12]
 801d4d4:	687a      	ldr	r2, [r7, #4]
 801d4d6:	429a      	cmp	r2, r3
 801d4d8:	d104      	bne.n	801d4e4 <tcp_process+0x738>
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	68da      	ldr	r2, [r3, #12]
 801d4de:	68fb      	ldr	r3, [r7, #12]
 801d4e0:	60da      	str	r2, [r3, #12]
 801d4e2:	e005      	b.n	801d4f0 <tcp_process+0x744>
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	68db      	ldr	r3, [r3, #12]
 801d4e8:	60fb      	str	r3, [r7, #12]
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d1ef      	bne.n	801d4d0 <tcp_process+0x724>
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	2200      	movs	r2, #0
 801d4f4:	60da      	str	r2, [r3, #12]
 801d4f6:	4b1f      	ldr	r3, [pc, #124]	; (801d574 <tcp_process+0x7c8>)
 801d4f8:	2201      	movs	r2, #1
 801d4fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	220a      	movs	r2, #10
 801d500:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d502:	4b1d      	ldr	r3, [pc, #116]	; (801d578 <tcp_process+0x7cc>)
 801d504:	681a      	ldr	r2, [r3, #0]
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	60da      	str	r2, [r3, #12]
 801d50a:	4a1b      	ldr	r2, [pc, #108]	; (801d578 <tcp_process+0x7cc>)
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	6013      	str	r3, [r2, #0]
 801d510:	f002 fc4a 	bl	801fda8 <tcp_timer_needed>
      }
      break;
 801d514:	e026      	b.n	801d564 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801d516:	6878      	ldr	r0, [r7, #4]
 801d518:	f000 f93c 	bl	801d794 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d51c:	4b17      	ldr	r3, [pc, #92]	; (801d57c <tcp_process+0x7d0>)
 801d51e:	781b      	ldrb	r3, [r3, #0]
 801d520:	f003 0310 	and.w	r3, r3, #16
 801d524:	2b00      	cmp	r3, #0
 801d526:	d01f      	beq.n	801d568 <tcp_process+0x7bc>
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d52c:	4b14      	ldr	r3, [pc, #80]	; (801d580 <tcp_process+0x7d4>)
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	429a      	cmp	r2, r3
 801d532:	d119      	bne.n	801d568 <tcp_process+0x7bc>
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d115      	bne.n	801d568 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801d53c:	4b11      	ldr	r3, [pc, #68]	; (801d584 <tcp_process+0x7d8>)
 801d53e:	781b      	ldrb	r3, [r3, #0]
 801d540:	f043 0310 	orr.w	r3, r3, #16
 801d544:	b2da      	uxtb	r2, r3
 801d546:	4b0f      	ldr	r3, [pc, #60]	; (801d584 <tcp_process+0x7d8>)
 801d548:	701a      	strb	r2, [r3, #0]
      }
      break;
 801d54a:	e00d      	b.n	801d568 <tcp_process+0x7bc>
    default:
      break;
 801d54c:	bf00      	nop
 801d54e:	e00c      	b.n	801d56a <tcp_process+0x7be>
      break;
 801d550:	bf00      	nop
 801d552:	e00a      	b.n	801d56a <tcp_process+0x7be>
      break;
 801d554:	bf00      	nop
 801d556:	e008      	b.n	801d56a <tcp_process+0x7be>
      break;
 801d558:	bf00      	nop
 801d55a:	e006      	b.n	801d56a <tcp_process+0x7be>
      break;
 801d55c:	bf00      	nop
 801d55e:	e004      	b.n	801d56a <tcp_process+0x7be>
      break;
 801d560:	bf00      	nop
 801d562:	e002      	b.n	801d56a <tcp_process+0x7be>
      break;
 801d564:	bf00      	nop
 801d566:	e000      	b.n	801d56a <tcp_process+0x7be>
      break;
 801d568:	bf00      	nop
  }
  return ERR_OK;
 801d56a:	2300      	movs	r3, #0
}
 801d56c:	4618      	mov	r0, r3
 801d56e:	3724      	adds	r7, #36	; 0x24
 801d570:	46bd      	mov	sp, r7
 801d572:	bd90      	pop	{r4, r7, pc}
 801d574:	2400d010 	.word	0x2400d010
 801d578:	2400d00c 	.word	0x2400d00c
 801d57c:	2400d040 	.word	0x2400d040
 801d580:	2400d038 	.word	0x2400d038
 801d584:	2400d041 	.word	0x2400d041
 801d588:	2400d008 	.word	0x2400d008

0801d58c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801d58c:	b590      	push	{r4, r7, lr}
 801d58e:	b085      	sub	sp, #20
 801d590:	af00      	add	r7, sp, #0
 801d592:	6078      	str	r0, [r7, #4]
 801d594:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d106      	bne.n	801d5aa <tcp_oos_insert_segment+0x1e>
 801d59c:	4b3b      	ldr	r3, [pc, #236]	; (801d68c <tcp_oos_insert_segment+0x100>)
 801d59e:	f240 421f 	movw	r2, #1055	; 0x41f
 801d5a2:	493b      	ldr	r1, [pc, #236]	; (801d690 <tcp_oos_insert_segment+0x104>)
 801d5a4:	483b      	ldr	r0, [pc, #236]	; (801d694 <tcp_oos_insert_segment+0x108>)
 801d5a6:	f008 fcdd 	bl	8025f64 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	68db      	ldr	r3, [r3, #12]
 801d5ae:	899b      	ldrh	r3, [r3, #12]
 801d5b0:	b29b      	uxth	r3, r3
 801d5b2:	4618      	mov	r0, r3
 801d5b4:	f7fb fb3c 	bl	8018c30 <lwip_htons>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	b2db      	uxtb	r3, r3
 801d5bc:	f003 0301 	and.w	r3, r3, #1
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	d028      	beq.n	801d616 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801d5c4:	6838      	ldr	r0, [r7, #0]
 801d5c6:	f7fe fa63 	bl	801ba90 <tcp_segs_free>
    next = NULL;
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	603b      	str	r3, [r7, #0]
 801d5ce:	e056      	b.n	801d67e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d5d0:	683b      	ldr	r3, [r7, #0]
 801d5d2:	68db      	ldr	r3, [r3, #12]
 801d5d4:	899b      	ldrh	r3, [r3, #12]
 801d5d6:	b29b      	uxth	r3, r3
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f7fb fb29 	bl	8018c30 <lwip_htons>
 801d5de:	4603      	mov	r3, r0
 801d5e0:	b2db      	uxtb	r3, r3
 801d5e2:	f003 0301 	and.w	r3, r3, #1
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d00d      	beq.n	801d606 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	68db      	ldr	r3, [r3, #12]
 801d5ee:	899b      	ldrh	r3, [r3, #12]
 801d5f0:	b29c      	uxth	r4, r3
 801d5f2:	2001      	movs	r0, #1
 801d5f4:	f7fb fb1c 	bl	8018c30 <lwip_htons>
 801d5f8:	4603      	mov	r3, r0
 801d5fa:	461a      	mov	r2, r3
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	68db      	ldr	r3, [r3, #12]
 801d600:	4322      	orrs	r2, r4
 801d602:	b292      	uxth	r2, r2
 801d604:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801d606:	683b      	ldr	r3, [r7, #0]
 801d608:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801d60a:	683b      	ldr	r3, [r7, #0]
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801d610:	68f8      	ldr	r0, [r7, #12]
 801d612:	f7fe fa52 	bl	801baba <tcp_seg_free>
    while (next &&
 801d616:	683b      	ldr	r3, [r7, #0]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d00e      	beq.n	801d63a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	891b      	ldrh	r3, [r3, #8]
 801d620:	461a      	mov	r2, r3
 801d622:	4b1d      	ldr	r3, [pc, #116]	; (801d698 <tcp_oos_insert_segment+0x10c>)
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	441a      	add	r2, r3
 801d628:	683b      	ldr	r3, [r7, #0]
 801d62a:	68db      	ldr	r3, [r3, #12]
 801d62c:	685b      	ldr	r3, [r3, #4]
 801d62e:	6839      	ldr	r1, [r7, #0]
 801d630:	8909      	ldrh	r1, [r1, #8]
 801d632:	440b      	add	r3, r1
 801d634:	1ad3      	subs	r3, r2, r3
    while (next &&
 801d636:	2b00      	cmp	r3, #0
 801d638:	daca      	bge.n	801d5d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801d63a:	683b      	ldr	r3, [r7, #0]
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	d01e      	beq.n	801d67e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	891b      	ldrh	r3, [r3, #8]
 801d644:	461a      	mov	r2, r3
 801d646:	4b14      	ldr	r3, [pc, #80]	; (801d698 <tcp_oos_insert_segment+0x10c>)
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	441a      	add	r2, r3
 801d64c:	683b      	ldr	r3, [r7, #0]
 801d64e:	68db      	ldr	r3, [r3, #12]
 801d650:	685b      	ldr	r3, [r3, #4]
 801d652:	1ad3      	subs	r3, r2, r3
    if (next &&
 801d654:	2b00      	cmp	r3, #0
 801d656:	dd12      	ble.n	801d67e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801d658:	683b      	ldr	r3, [r7, #0]
 801d65a:	68db      	ldr	r3, [r3, #12]
 801d65c:	685b      	ldr	r3, [r3, #4]
 801d65e:	b29a      	uxth	r2, r3
 801d660:	4b0d      	ldr	r3, [pc, #52]	; (801d698 <tcp_oos_insert_segment+0x10c>)
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	b29b      	uxth	r3, r3
 801d666:	1ad3      	subs	r3, r2, r3
 801d668:	b29a      	uxth	r2, r3
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	685a      	ldr	r2, [r3, #4]
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	891b      	ldrh	r3, [r3, #8]
 801d676:	4619      	mov	r1, r3
 801d678:	4610      	mov	r0, r2
 801d67a:	f7fc fe09 	bl	801a290 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	683a      	ldr	r2, [r7, #0]
 801d682:	601a      	str	r2, [r3, #0]
}
 801d684:	bf00      	nop
 801d686:	3714      	adds	r7, #20
 801d688:	46bd      	mov	sp, r7
 801d68a:	bd90      	pop	{r4, r7, pc}
 801d68c:	08028220 	.word	0x08028220
 801d690:	080284e0 	.word	0x080284e0
 801d694:	0802826c 	.word	0x0802826c
 801d698:	2400d034 	.word	0x2400d034

0801d69c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801d69c:	b5b0      	push	{r4, r5, r7, lr}
 801d69e:	b086      	sub	sp, #24
 801d6a0:	af00      	add	r7, sp, #0
 801d6a2:	60f8      	str	r0, [r7, #12]
 801d6a4:	60b9      	str	r1, [r7, #8]
 801d6a6:	607a      	str	r2, [r7, #4]
 801d6a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801d6aa:	e03e      	b.n	801d72a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801d6ac:	68bb      	ldr	r3, [r7, #8]
 801d6ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801d6b0:	68bb      	ldr	r3, [r7, #8]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801d6b6:	697b      	ldr	r3, [r7, #20]
 801d6b8:	685b      	ldr	r3, [r3, #4]
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	f7fc fffc 	bl	801a6b8 <pbuf_clen>
 801d6c0:	4603      	mov	r3, r0
 801d6c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d6ca:	8a7a      	ldrh	r2, [r7, #18]
 801d6cc:	429a      	cmp	r2, r3
 801d6ce:	d906      	bls.n	801d6de <tcp_free_acked_segments+0x42>
 801d6d0:	4b2a      	ldr	r3, [pc, #168]	; (801d77c <tcp_free_acked_segments+0xe0>)
 801d6d2:	f240 4257 	movw	r2, #1111	; 0x457
 801d6d6:	492a      	ldr	r1, [pc, #168]	; (801d780 <tcp_free_acked_segments+0xe4>)
 801d6d8:	482a      	ldr	r0, [pc, #168]	; (801d784 <tcp_free_acked_segments+0xe8>)
 801d6da:	f008 fc43 	bl	8025f64 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801d6e4:	8a7b      	ldrh	r3, [r7, #18]
 801d6e6:	1ad3      	subs	r3, r2, r3
 801d6e8:	b29a      	uxth	r2, r3
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801d6f0:	697b      	ldr	r3, [r7, #20]
 801d6f2:	891a      	ldrh	r2, [r3, #8]
 801d6f4:	4b24      	ldr	r3, [pc, #144]	; (801d788 <tcp_free_acked_segments+0xec>)
 801d6f6:	881b      	ldrh	r3, [r3, #0]
 801d6f8:	4413      	add	r3, r2
 801d6fa:	b29a      	uxth	r2, r3
 801d6fc:	4b22      	ldr	r3, [pc, #136]	; (801d788 <tcp_free_acked_segments+0xec>)
 801d6fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801d700:	6978      	ldr	r0, [r7, #20]
 801d702:	f7fe f9da 	bl	801baba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d00c      	beq.n	801d72a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801d710:	68bb      	ldr	r3, [r7, #8]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d109      	bne.n	801d72a <tcp_free_acked_segments+0x8e>
 801d716:	683b      	ldr	r3, [r7, #0]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d106      	bne.n	801d72a <tcp_free_acked_segments+0x8e>
 801d71c:	4b17      	ldr	r3, [pc, #92]	; (801d77c <tcp_free_acked_segments+0xe0>)
 801d71e:	f240 4261 	movw	r2, #1121	; 0x461
 801d722:	491a      	ldr	r1, [pc, #104]	; (801d78c <tcp_free_acked_segments+0xf0>)
 801d724:	4817      	ldr	r0, [pc, #92]	; (801d784 <tcp_free_acked_segments+0xe8>)
 801d726:	f008 fc1d 	bl	8025f64 <iprintf>
  while (seg_list != NULL &&
 801d72a:	68bb      	ldr	r3, [r7, #8]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d020      	beq.n	801d772 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801d730:	68bb      	ldr	r3, [r7, #8]
 801d732:	68db      	ldr	r3, [r3, #12]
 801d734:	685b      	ldr	r3, [r3, #4]
 801d736:	4618      	mov	r0, r3
 801d738:	f7fb fa8f 	bl	8018c5a <lwip_htonl>
 801d73c:	4604      	mov	r4, r0
 801d73e:	68bb      	ldr	r3, [r7, #8]
 801d740:	891b      	ldrh	r3, [r3, #8]
 801d742:	461d      	mov	r5, r3
 801d744:	68bb      	ldr	r3, [r7, #8]
 801d746:	68db      	ldr	r3, [r3, #12]
 801d748:	899b      	ldrh	r3, [r3, #12]
 801d74a:	b29b      	uxth	r3, r3
 801d74c:	4618      	mov	r0, r3
 801d74e:	f7fb fa6f 	bl	8018c30 <lwip_htons>
 801d752:	4603      	mov	r3, r0
 801d754:	b2db      	uxtb	r3, r3
 801d756:	f003 0303 	and.w	r3, r3, #3
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d001      	beq.n	801d762 <tcp_free_acked_segments+0xc6>
 801d75e:	2301      	movs	r3, #1
 801d760:	e000      	b.n	801d764 <tcp_free_acked_segments+0xc8>
 801d762:	2300      	movs	r3, #0
 801d764:	442b      	add	r3, r5
 801d766:	18e2      	adds	r2, r4, r3
 801d768:	4b09      	ldr	r3, [pc, #36]	; (801d790 <tcp_free_acked_segments+0xf4>)
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801d76e:	2b00      	cmp	r3, #0
 801d770:	dd9c      	ble.n	801d6ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801d772:	68bb      	ldr	r3, [r7, #8]
}
 801d774:	4618      	mov	r0, r3
 801d776:	3718      	adds	r7, #24
 801d778:	46bd      	mov	sp, r7
 801d77a:	bdb0      	pop	{r4, r5, r7, pc}
 801d77c:	08028220 	.word	0x08028220
 801d780:	08028508 	.word	0x08028508
 801d784:	0802826c 	.word	0x0802826c
 801d788:	2400d03c 	.word	0x2400d03c
 801d78c:	08028530 	.word	0x08028530
 801d790:	2400d038 	.word	0x2400d038

0801d794 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801d794:	b5b0      	push	{r4, r5, r7, lr}
 801d796:	b094      	sub	sp, #80	; 0x50
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801d79c:	2300      	movs	r3, #0
 801d79e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d106      	bne.n	801d7b4 <tcp_receive+0x20>
 801d7a6:	4b91      	ldr	r3, [pc, #580]	; (801d9ec <tcp_receive+0x258>)
 801d7a8:	f240 427b 	movw	r2, #1147	; 0x47b
 801d7ac:	4990      	ldr	r1, [pc, #576]	; (801d9f0 <tcp_receive+0x25c>)
 801d7ae:	4891      	ldr	r0, [pc, #580]	; (801d9f4 <tcp_receive+0x260>)
 801d7b0:	f008 fbd8 	bl	8025f64 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	7d1b      	ldrb	r3, [r3, #20]
 801d7b8:	2b03      	cmp	r3, #3
 801d7ba:	d806      	bhi.n	801d7ca <tcp_receive+0x36>
 801d7bc:	4b8b      	ldr	r3, [pc, #556]	; (801d9ec <tcp_receive+0x258>)
 801d7be:	f240 427c 	movw	r2, #1148	; 0x47c
 801d7c2:	498d      	ldr	r1, [pc, #564]	; (801d9f8 <tcp_receive+0x264>)
 801d7c4:	488b      	ldr	r0, [pc, #556]	; (801d9f4 <tcp_receive+0x260>)
 801d7c6:	f008 fbcd 	bl	8025f64 <iprintf>

  if (flags & TCP_ACK) {
 801d7ca:	4b8c      	ldr	r3, [pc, #560]	; (801d9fc <tcp_receive+0x268>)
 801d7cc:	781b      	ldrb	r3, [r3, #0]
 801d7ce:	f003 0310 	and.w	r3, r3, #16
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	f000 8264 	beq.w	801dca0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d7de:	461a      	mov	r2, r3
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d7e4:	4413      	add	r3, r2
 801d7e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d7ec:	4b84      	ldr	r3, [pc, #528]	; (801da00 <tcp_receive+0x26c>)
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	1ad3      	subs	r3, r2, r3
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	db1b      	blt.n	801d82e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d7fa:	4b81      	ldr	r3, [pc, #516]	; (801da00 <tcp_receive+0x26c>)
 801d7fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d7fe:	429a      	cmp	r2, r3
 801d800:	d106      	bne.n	801d810 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801d806:	4b7f      	ldr	r3, [pc, #508]	; (801da04 <tcp_receive+0x270>)
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	1ad3      	subs	r3, r2, r3
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	db0e      	blt.n	801d82e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801d814:	4b7b      	ldr	r3, [pc, #492]	; (801da04 <tcp_receive+0x270>)
 801d816:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d818:	429a      	cmp	r2, r3
 801d81a:	d125      	bne.n	801d868 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d81c:	4b7a      	ldr	r3, [pc, #488]	; (801da08 <tcp_receive+0x274>)
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	89db      	ldrh	r3, [r3, #14]
 801d822:	b29a      	uxth	r2, r3
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d82a:	429a      	cmp	r2, r3
 801d82c:	d91c      	bls.n	801d868 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801d82e:	4b76      	ldr	r3, [pc, #472]	; (801da08 <tcp_receive+0x274>)
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	89db      	ldrh	r3, [r3, #14]
 801d834:	b29a      	uxth	r2, r3
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d848:	429a      	cmp	r2, r3
 801d84a:	d205      	bcs.n	801d858 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801d858:	4b69      	ldr	r3, [pc, #420]	; (801da00 <tcp_receive+0x26c>)
 801d85a:	681a      	ldr	r2, [r3, #0]
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801d860:	4b68      	ldr	r3, [pc, #416]	; (801da04 <tcp_receive+0x270>)
 801d862:	681a      	ldr	r2, [r3, #0]
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801d868:	4b66      	ldr	r3, [pc, #408]	; (801da04 <tcp_receive+0x270>)
 801d86a:	681a      	ldr	r2, [r3, #0]
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d870:	1ad3      	subs	r3, r2, r3
 801d872:	2b00      	cmp	r3, #0
 801d874:	dc58      	bgt.n	801d928 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801d876:	4b65      	ldr	r3, [pc, #404]	; (801da0c <tcp_receive+0x278>)
 801d878:	881b      	ldrh	r3, [r3, #0]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d14b      	bne.n	801d916 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d882:	687a      	ldr	r2, [r7, #4]
 801d884:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801d888:	4413      	add	r3, r2
 801d88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d88c:	429a      	cmp	r2, r3
 801d88e:	d142      	bne.n	801d916 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d896:	2b00      	cmp	r3, #0
 801d898:	db3d      	blt.n	801d916 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d89e:	4b59      	ldr	r3, [pc, #356]	; (801da04 <tcp_receive+0x270>)
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	429a      	cmp	r2, r3
 801d8a4:	d137      	bne.n	801d916 <tcp_receive+0x182>
              found_dupack = 1;
 801d8a6:	2301      	movs	r3, #1
 801d8a8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801d8b0:	2bff      	cmp	r3, #255	; 0xff
 801d8b2:	d007      	beq.n	801d8c4 <tcp_receive+0x130>
                ++pcb->dupacks;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801d8ba:	3301      	adds	r3, #1
 801d8bc:	b2da      	uxtb	r2, r3
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801d8ca:	2b03      	cmp	r3, #3
 801d8cc:	d91b      	bls.n	801d906 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d8d8:	4413      	add	r3, r2
 801d8da:	b29a      	uxth	r2, r3
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d8e2:	429a      	cmp	r2, r3
 801d8e4:	d30a      	bcc.n	801d8fc <tcp_receive+0x168>
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d8f0:	4413      	add	r3, r2
 801d8f2:	b29a      	uxth	r2, r3
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801d8fa:	e004      	b.n	801d906 <tcp_receive+0x172>
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d902:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801d90c:	2b02      	cmp	r3, #2
 801d90e:	d902      	bls.n	801d916 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801d910:	6878      	ldr	r0, [r7, #4]
 801d912:	f001 feeb 	bl	801f6ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801d916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d918:	2b00      	cmp	r3, #0
 801d91a:	f040 8161 	bne.w	801dbe0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	2200      	movs	r2, #0
 801d922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d926:	e15b      	b.n	801dbe0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d928:	4b36      	ldr	r3, [pc, #216]	; (801da04 <tcp_receive+0x270>)
 801d92a:	681a      	ldr	r2, [r3, #0]
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d930:	1ad3      	subs	r3, r2, r3
 801d932:	3b01      	subs	r3, #1
 801d934:	2b00      	cmp	r3, #0
 801d936:	f2c0 814e 	blt.w	801dbd6 <tcp_receive+0x442>
 801d93a:	4b32      	ldr	r3, [pc, #200]	; (801da04 <tcp_receive+0x270>)
 801d93c:	681a      	ldr	r2, [r3, #0]
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d942:	1ad3      	subs	r3, r2, r3
 801d944:	2b00      	cmp	r3, #0
 801d946:	f300 8146 	bgt.w	801dbd6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	8b5b      	ldrh	r3, [r3, #26]
 801d94e:	f003 0304 	and.w	r3, r3, #4
 801d952:	2b00      	cmp	r3, #0
 801d954:	d010      	beq.n	801d978 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	8b5b      	ldrh	r3, [r3, #26]
 801d95a:	f023 0304 	bic.w	r3, r3, #4
 801d95e:	b29a      	uxth	r2, r3
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	2200      	movs	r2, #0
 801d974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	2200      	movs	r2, #0
 801d97c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d986:	10db      	asrs	r3, r3, #3
 801d988:	b21b      	sxth	r3, r3
 801d98a:	b29a      	uxth	r2, r3
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d992:	b29b      	uxth	r3, r3
 801d994:	4413      	add	r3, r2
 801d996:	b29b      	uxth	r3, r3
 801d998:	b21a      	sxth	r2, r3
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801d9a0:	4b18      	ldr	r3, [pc, #96]	; (801da04 <tcp_receive+0x270>)
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	b29a      	uxth	r2, r3
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9aa:	b29b      	uxth	r3, r3
 801d9ac:	1ad3      	subs	r3, r2, r3
 801d9ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801d9b8:	4b12      	ldr	r3, [pc, #72]	; (801da04 <tcp_receive+0x270>)
 801d9ba:	681a      	ldr	r2, [r3, #0]
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	7d1b      	ldrb	r3, [r3, #20]
 801d9c4:	2b03      	cmp	r3, #3
 801d9c6:	f240 8097 	bls.w	801daf8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801d9d6:	429a      	cmp	r2, r3
 801d9d8:	d245      	bcs.n	801da66 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	8b5b      	ldrh	r3, [r3, #26]
 801d9de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d014      	beq.n	801da10 <tcp_receive+0x27c>
 801d9e6:	2301      	movs	r3, #1
 801d9e8:	e013      	b.n	801da12 <tcp_receive+0x27e>
 801d9ea:	bf00      	nop
 801d9ec:	08028220 	.word	0x08028220
 801d9f0:	08028550 	.word	0x08028550
 801d9f4:	0802826c 	.word	0x0802826c
 801d9f8:	0802856c 	.word	0x0802856c
 801d9fc:	2400d040 	.word	0x2400d040
 801da00:	2400d034 	.word	0x2400d034
 801da04:	2400d038 	.word	0x2400d038
 801da08:	2400d024 	.word	0x2400d024
 801da0c:	2400d03e 	.word	0x2400d03e
 801da10:	2302      	movs	r3, #2
 801da12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801da16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801da1a:	b29a      	uxth	r2, r3
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801da20:	fb12 f303 	smulbb	r3, r2, r3
 801da24:	b29b      	uxth	r3, r3
 801da26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801da28:	4293      	cmp	r3, r2
 801da2a:	bf28      	it	cs
 801da2c:	4613      	movcs	r3, r2
 801da2e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801da36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801da38:	4413      	add	r3, r2
 801da3a:	b29a      	uxth	r2, r3
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801da42:	429a      	cmp	r2, r3
 801da44:	d309      	bcc.n	801da5a <tcp_receive+0x2c6>
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801da4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801da4e:	4413      	add	r3, r2
 801da50:	b29a      	uxth	r2, r3
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801da58:	e04e      	b.n	801daf8 <tcp_receive+0x364>
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801da60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801da64:	e048      	b.n	801daf8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801da6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801da6e:	4413      	add	r3, r2
 801da70:	b29a      	uxth	r2, r3
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801da78:	429a      	cmp	r2, r3
 801da7a:	d309      	bcc.n	801da90 <tcp_receive+0x2fc>
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801da82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801da84:	4413      	add	r3, r2
 801da86:	b29a      	uxth	r2, r3
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801da8e:	e004      	b.n	801da9a <tcp_receive+0x306>
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801da96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801daa6:	429a      	cmp	r2, r3
 801daa8:	d326      	bcc.n	801daf8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dab6:	1ad3      	subs	r3, r2, r3
 801dab8:	b29a      	uxth	r2, r3
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801daca:	4413      	add	r3, r2
 801dacc:	b29a      	uxth	r2, r3
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dad4:	429a      	cmp	r2, r3
 801dad6:	d30a      	bcc.n	801daee <tcp_receive+0x35a>
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dae2:	4413      	add	r3, r2
 801dae4:	b29a      	uxth	r2, r3
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801daec:	e004      	b.n	801daf8 <tcp_receive+0x364>
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801daf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db00:	4a98      	ldr	r2, [pc, #608]	; (801dd64 <tcp_receive+0x5d0>)
 801db02:	6878      	ldr	r0, [r7, #4]
 801db04:	f7ff fdca 	bl	801d69c <tcp_free_acked_segments>
 801db08:	4602      	mov	r2, r0
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db16:	4a94      	ldr	r2, [pc, #592]	; (801dd68 <tcp_receive+0x5d4>)
 801db18:	6878      	ldr	r0, [r7, #4]
 801db1a:	f7ff fdbf 	bl	801d69c <tcp_free_acked_segments>
 801db1e:	4602      	mov	r2, r0
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d104      	bne.n	801db36 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db32:	861a      	strh	r2, [r3, #48]	; 0x30
 801db34:	e002      	b.n	801db3c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	2200      	movs	r2, #0
 801db3a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	2200      	movs	r2, #0
 801db40:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db46:	2b00      	cmp	r3, #0
 801db48:	d103      	bne.n	801db52 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	2200      	movs	r2, #0
 801db4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801db58:	4b84      	ldr	r3, [pc, #528]	; (801dd6c <tcp_receive+0x5d8>)
 801db5a:	881b      	ldrh	r3, [r3, #0]
 801db5c:	4413      	add	r3, r2
 801db5e:	b29a      	uxth	r2, r3
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	8b5b      	ldrh	r3, [r3, #26]
 801db6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d035      	beq.n	801dbde <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db76:	2b00      	cmp	r3, #0
 801db78:	d118      	bne.n	801dbac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d00c      	beq.n	801db9c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db8a:	68db      	ldr	r3, [r3, #12]
 801db8c:	685b      	ldr	r3, [r3, #4]
 801db8e:	4618      	mov	r0, r3
 801db90:	f7fb f863 	bl	8018c5a <lwip_htonl>
 801db94:	4603      	mov	r3, r0
 801db96:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801db98:	2b00      	cmp	r3, #0
 801db9a:	dc20      	bgt.n	801dbde <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	8b5b      	ldrh	r3, [r3, #26]
 801dba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dba4:	b29a      	uxth	r2, r3
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dbaa:	e018      	b.n	801dbde <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbb4:	68db      	ldr	r3, [r3, #12]
 801dbb6:	685b      	ldr	r3, [r3, #4]
 801dbb8:	4618      	mov	r0, r3
 801dbba:	f7fb f84e 	bl	8018c5a <lwip_htonl>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	1ae3      	subs	r3, r4, r3
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	dc0b      	bgt.n	801dbde <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	8b5b      	ldrh	r3, [r3, #26]
 801dbca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dbce:	b29a      	uxth	r2, r3
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dbd4:	e003      	b.n	801dbde <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801dbd6:	6878      	ldr	r0, [r7, #4]
 801dbd8:	f001 ff76 	bl	801fac8 <tcp_send_empty_ack>
 801dbdc:	e000      	b.n	801dbe0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dbde:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d05b      	beq.n	801dca0 <tcp_receive+0x50c>
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dbec:	4b60      	ldr	r3, [pc, #384]	; (801dd70 <tcp_receive+0x5dc>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	1ad3      	subs	r3, r2, r3
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	da54      	bge.n	801dca0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801dbf6:	4b5f      	ldr	r3, [pc, #380]	; (801dd74 <tcp_receive+0x5e0>)
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	b29a      	uxth	r2, r3
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc00:	b29b      	uxth	r3, r3
 801dc02:	1ad3      	subs	r3, r2, r3
 801dc04:	b29b      	uxth	r3, r3
 801dc06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801dc0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801dc14:	10db      	asrs	r3, r3, #3
 801dc16:	b21b      	sxth	r3, r3
 801dc18:	b29b      	uxth	r3, r3
 801dc1a:	1ad3      	subs	r3, r2, r3
 801dc1c:	b29b      	uxth	r3, r3
 801dc1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801dc28:	b29a      	uxth	r2, r3
 801dc2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801dc2e:	4413      	add	r3, r2
 801dc30:	b29b      	uxth	r3, r3
 801dc32:	b21a      	sxth	r2, r3
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801dc38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	da05      	bge.n	801dc4c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801dc40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801dc44:	425b      	negs	r3, r3
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801dc4c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801dc56:	109b      	asrs	r3, r3, #2
 801dc58:	b21b      	sxth	r3, r3
 801dc5a:	b29b      	uxth	r3, r3
 801dc5c:	1ad3      	subs	r3, r2, r3
 801dc5e:	b29b      	uxth	r3, r3
 801dc60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801dc6a:	b29a      	uxth	r2, r3
 801dc6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801dc70:	4413      	add	r3, r2
 801dc72:	b29b      	uxth	r3, r3
 801dc74:	b21a      	sxth	r2, r3
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801dc80:	10db      	asrs	r3, r3, #3
 801dc82:	b21b      	sxth	r3, r3
 801dc84:	b29a      	uxth	r2, r3
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801dc8c:	b29b      	uxth	r3, r3
 801dc8e:	4413      	add	r3, r2
 801dc90:	b29b      	uxth	r3, r3
 801dc92:	b21a      	sxth	r2, r3
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801dca0:	4b35      	ldr	r3, [pc, #212]	; (801dd78 <tcp_receive+0x5e4>)
 801dca2:	881b      	ldrh	r3, [r3, #0]
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	f000 84e2 	beq.w	801e66e <tcp_receive+0xeda>
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	7d1b      	ldrb	r3, [r3, #20]
 801dcae:	2b06      	cmp	r3, #6
 801dcb0:	f200 84dd 	bhi.w	801e66e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801dcb8:	4b30      	ldr	r3, [pc, #192]	; (801dd7c <tcp_receive+0x5e8>)
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	1ad3      	subs	r3, r2, r3
 801dcbe:	3b01      	subs	r3, #1
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	f2c0 808f 	blt.w	801dde4 <tcp_receive+0x650>
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801dcca:	4b2b      	ldr	r3, [pc, #172]	; (801dd78 <tcp_receive+0x5e4>)
 801dccc:	881b      	ldrh	r3, [r3, #0]
 801dcce:	4619      	mov	r1, r3
 801dcd0:	4b2a      	ldr	r3, [pc, #168]	; (801dd7c <tcp_receive+0x5e8>)
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	440b      	add	r3, r1
 801dcd6:	1ad3      	subs	r3, r2, r3
 801dcd8:	3301      	adds	r3, #1
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	f300 8082 	bgt.w	801dde4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801dce0:	4b27      	ldr	r3, [pc, #156]	; (801dd80 <tcp_receive+0x5ec>)
 801dce2:	685b      	ldr	r3, [r3, #4]
 801dce4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801dcea:	4b24      	ldr	r3, [pc, #144]	; (801dd7c <tcp_receive+0x5e8>)
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	1ad3      	subs	r3, r2, r3
 801dcf0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801dcf2:	4b23      	ldr	r3, [pc, #140]	; (801dd80 <tcp_receive+0x5ec>)
 801dcf4:	685b      	ldr	r3, [r3, #4]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d106      	bne.n	801dd08 <tcp_receive+0x574>
 801dcfa:	4b22      	ldr	r3, [pc, #136]	; (801dd84 <tcp_receive+0x5f0>)
 801dcfc:	f240 5294 	movw	r2, #1428	; 0x594
 801dd00:	4921      	ldr	r1, [pc, #132]	; (801dd88 <tcp_receive+0x5f4>)
 801dd02:	4822      	ldr	r0, [pc, #136]	; (801dd8c <tcp_receive+0x5f8>)
 801dd04:	f008 f92e 	bl	8025f64 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd0e:	4293      	cmp	r3, r2
 801dd10:	d906      	bls.n	801dd20 <tcp_receive+0x58c>
 801dd12:	4b1c      	ldr	r3, [pc, #112]	; (801dd84 <tcp_receive+0x5f0>)
 801dd14:	f240 5295 	movw	r2, #1429	; 0x595
 801dd18:	491d      	ldr	r1, [pc, #116]	; (801dd90 <tcp_receive+0x5fc>)
 801dd1a:	481c      	ldr	r0, [pc, #112]	; (801dd8c <tcp_receive+0x5f8>)
 801dd1c:	f008 f922 	bl	8025f64 <iprintf>
      off = (u16_t)off32;
 801dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801dd26:	4b16      	ldr	r3, [pc, #88]	; (801dd80 <tcp_receive+0x5ec>)
 801dd28:	685b      	ldr	r3, [r3, #4]
 801dd2a:	891b      	ldrh	r3, [r3, #8]
 801dd2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dd30:	429a      	cmp	r2, r3
 801dd32:	d906      	bls.n	801dd42 <tcp_receive+0x5ae>
 801dd34:	4b13      	ldr	r3, [pc, #76]	; (801dd84 <tcp_receive+0x5f0>)
 801dd36:	f240 5297 	movw	r2, #1431	; 0x597
 801dd3a:	4916      	ldr	r1, [pc, #88]	; (801dd94 <tcp_receive+0x600>)
 801dd3c:	4813      	ldr	r0, [pc, #76]	; (801dd8c <tcp_receive+0x5f8>)
 801dd3e:	f008 f911 	bl	8025f64 <iprintf>
      inseg.len -= off;
 801dd42:	4b0f      	ldr	r3, [pc, #60]	; (801dd80 <tcp_receive+0x5ec>)
 801dd44:	891a      	ldrh	r2, [r3, #8]
 801dd46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dd4a:	1ad3      	subs	r3, r2, r3
 801dd4c:	b29a      	uxth	r2, r3
 801dd4e:	4b0c      	ldr	r3, [pc, #48]	; (801dd80 <tcp_receive+0x5ec>)
 801dd50:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801dd52:	4b0b      	ldr	r3, [pc, #44]	; (801dd80 <tcp_receive+0x5ec>)
 801dd54:	685b      	ldr	r3, [r3, #4]
 801dd56:	891a      	ldrh	r2, [r3, #8]
 801dd58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dd5c:	1ad3      	subs	r3, r2, r3
 801dd5e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801dd60:	e02a      	b.n	801ddb8 <tcp_receive+0x624>
 801dd62:	bf00      	nop
 801dd64:	08028588 	.word	0x08028588
 801dd68:	08028590 	.word	0x08028590
 801dd6c:	2400d03c 	.word	0x2400d03c
 801dd70:	2400d038 	.word	0x2400d038
 801dd74:	2400cffc 	.word	0x2400cffc
 801dd78:	2400d03e 	.word	0x2400d03e
 801dd7c:	2400d034 	.word	0x2400d034
 801dd80:	2400d014 	.word	0x2400d014
 801dd84:	08028220 	.word	0x08028220
 801dd88:	08028598 	.word	0x08028598
 801dd8c:	0802826c 	.word	0x0802826c
 801dd90:	080285a8 	.word	0x080285a8
 801dd94:	080285b8 	.word	0x080285b8
        off -= p->len;
 801dd98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd9a:	895b      	ldrh	r3, [r3, #10]
 801dd9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dda0:	1ad3      	subs	r3, r2, r3
 801dda2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801dda6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dda8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ddaa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ddac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ddae:	2200      	movs	r2, #0
 801ddb0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ddb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801ddb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ddba:	895b      	ldrh	r3, [r3, #10]
 801ddbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ddc0:	429a      	cmp	r2, r3
 801ddc2:	d8e9      	bhi.n	801dd98 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ddc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ddc8:	4619      	mov	r1, r3
 801ddca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ddcc:	f7fc fb60 	bl	801a490 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddd4:	4a91      	ldr	r2, [pc, #580]	; (801e01c <tcp_receive+0x888>)
 801ddd6:	6013      	str	r3, [r2, #0]
 801ddd8:	4b91      	ldr	r3, [pc, #580]	; (801e020 <tcp_receive+0x88c>)
 801ddda:	68db      	ldr	r3, [r3, #12]
 801dddc:	4a8f      	ldr	r2, [pc, #572]	; (801e01c <tcp_receive+0x888>)
 801ddde:	6812      	ldr	r2, [r2, #0]
 801dde0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801dde2:	e00d      	b.n	801de00 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801dde4:	4b8d      	ldr	r3, [pc, #564]	; (801e01c <tcp_receive+0x888>)
 801dde6:	681a      	ldr	r2, [r3, #0]
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddec:	1ad3      	subs	r3, r2, r3
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	da06      	bge.n	801de00 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	8b5b      	ldrh	r3, [r3, #26]
 801ddf6:	f043 0302 	orr.w	r3, r3, #2
 801ddfa:	b29a      	uxth	r2, r3
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801de00:	4b86      	ldr	r3, [pc, #536]	; (801e01c <tcp_receive+0x888>)
 801de02:	681a      	ldr	r2, [r3, #0]
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de08:	1ad3      	subs	r3, r2, r3
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	f2c0 842a 	blt.w	801e664 <tcp_receive+0xed0>
 801de10:	4b82      	ldr	r3, [pc, #520]	; (801e01c <tcp_receive+0x888>)
 801de12:	681a      	ldr	r2, [r3, #0]
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de18:	6879      	ldr	r1, [r7, #4]
 801de1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801de1c:	440b      	add	r3, r1
 801de1e:	1ad3      	subs	r3, r2, r3
 801de20:	3301      	adds	r3, #1
 801de22:	2b00      	cmp	r3, #0
 801de24:	f300 841e 	bgt.w	801e664 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801de2c:	4b7b      	ldr	r3, [pc, #492]	; (801e01c <tcp_receive+0x888>)
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	429a      	cmp	r2, r3
 801de32:	f040 829a 	bne.w	801e36a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801de36:	4b7a      	ldr	r3, [pc, #488]	; (801e020 <tcp_receive+0x88c>)
 801de38:	891c      	ldrh	r4, [r3, #8]
 801de3a:	4b79      	ldr	r3, [pc, #484]	; (801e020 <tcp_receive+0x88c>)
 801de3c:	68db      	ldr	r3, [r3, #12]
 801de3e:	899b      	ldrh	r3, [r3, #12]
 801de40:	b29b      	uxth	r3, r3
 801de42:	4618      	mov	r0, r3
 801de44:	f7fa fef4 	bl	8018c30 <lwip_htons>
 801de48:	4603      	mov	r3, r0
 801de4a:	b2db      	uxtb	r3, r3
 801de4c:	f003 0303 	and.w	r3, r3, #3
 801de50:	2b00      	cmp	r3, #0
 801de52:	d001      	beq.n	801de58 <tcp_receive+0x6c4>
 801de54:	2301      	movs	r3, #1
 801de56:	e000      	b.n	801de5a <tcp_receive+0x6c6>
 801de58:	2300      	movs	r3, #0
 801de5a:	4423      	add	r3, r4
 801de5c:	b29a      	uxth	r2, r3
 801de5e:	4b71      	ldr	r3, [pc, #452]	; (801e024 <tcp_receive+0x890>)
 801de60:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801de66:	4b6f      	ldr	r3, [pc, #444]	; (801e024 <tcp_receive+0x890>)
 801de68:	881b      	ldrh	r3, [r3, #0]
 801de6a:	429a      	cmp	r2, r3
 801de6c:	d275      	bcs.n	801df5a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801de6e:	4b6c      	ldr	r3, [pc, #432]	; (801e020 <tcp_receive+0x88c>)
 801de70:	68db      	ldr	r3, [r3, #12]
 801de72:	899b      	ldrh	r3, [r3, #12]
 801de74:	b29b      	uxth	r3, r3
 801de76:	4618      	mov	r0, r3
 801de78:	f7fa feda 	bl	8018c30 <lwip_htons>
 801de7c:	4603      	mov	r3, r0
 801de7e:	b2db      	uxtb	r3, r3
 801de80:	f003 0301 	and.w	r3, r3, #1
 801de84:	2b00      	cmp	r3, #0
 801de86:	d01f      	beq.n	801dec8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801de88:	4b65      	ldr	r3, [pc, #404]	; (801e020 <tcp_receive+0x88c>)
 801de8a:	68db      	ldr	r3, [r3, #12]
 801de8c:	899b      	ldrh	r3, [r3, #12]
 801de8e:	b29b      	uxth	r3, r3
 801de90:	b21b      	sxth	r3, r3
 801de92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801de96:	b21c      	sxth	r4, r3
 801de98:	4b61      	ldr	r3, [pc, #388]	; (801e020 <tcp_receive+0x88c>)
 801de9a:	68db      	ldr	r3, [r3, #12]
 801de9c:	899b      	ldrh	r3, [r3, #12]
 801de9e:	b29b      	uxth	r3, r3
 801dea0:	4618      	mov	r0, r3
 801dea2:	f7fa fec5 	bl	8018c30 <lwip_htons>
 801dea6:	4603      	mov	r3, r0
 801dea8:	b2db      	uxtb	r3, r3
 801deaa:	b29b      	uxth	r3, r3
 801deac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801deb0:	b29b      	uxth	r3, r3
 801deb2:	4618      	mov	r0, r3
 801deb4:	f7fa febc 	bl	8018c30 <lwip_htons>
 801deb8:	4603      	mov	r3, r0
 801deba:	b21b      	sxth	r3, r3
 801debc:	4323      	orrs	r3, r4
 801debe:	b21a      	sxth	r2, r3
 801dec0:	4b57      	ldr	r3, [pc, #348]	; (801e020 <tcp_receive+0x88c>)
 801dec2:	68db      	ldr	r3, [r3, #12]
 801dec4:	b292      	uxth	r2, r2
 801dec6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801decc:	4b54      	ldr	r3, [pc, #336]	; (801e020 <tcp_receive+0x88c>)
 801dece:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ded0:	4b53      	ldr	r3, [pc, #332]	; (801e020 <tcp_receive+0x88c>)
 801ded2:	68db      	ldr	r3, [r3, #12]
 801ded4:	899b      	ldrh	r3, [r3, #12]
 801ded6:	b29b      	uxth	r3, r3
 801ded8:	4618      	mov	r0, r3
 801deda:	f7fa fea9 	bl	8018c30 <lwip_htons>
 801dede:	4603      	mov	r3, r0
 801dee0:	b2db      	uxtb	r3, r3
 801dee2:	f003 0302 	and.w	r3, r3, #2
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d005      	beq.n	801def6 <tcp_receive+0x762>
            inseg.len -= 1;
 801deea:	4b4d      	ldr	r3, [pc, #308]	; (801e020 <tcp_receive+0x88c>)
 801deec:	891b      	ldrh	r3, [r3, #8]
 801deee:	3b01      	subs	r3, #1
 801def0:	b29a      	uxth	r2, r3
 801def2:	4b4b      	ldr	r3, [pc, #300]	; (801e020 <tcp_receive+0x88c>)
 801def4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801def6:	4b4a      	ldr	r3, [pc, #296]	; (801e020 <tcp_receive+0x88c>)
 801def8:	685b      	ldr	r3, [r3, #4]
 801defa:	4a49      	ldr	r2, [pc, #292]	; (801e020 <tcp_receive+0x88c>)
 801defc:	8912      	ldrh	r2, [r2, #8]
 801defe:	4611      	mov	r1, r2
 801df00:	4618      	mov	r0, r3
 801df02:	f7fc f9c5 	bl	801a290 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801df06:	4b46      	ldr	r3, [pc, #280]	; (801e020 <tcp_receive+0x88c>)
 801df08:	891c      	ldrh	r4, [r3, #8]
 801df0a:	4b45      	ldr	r3, [pc, #276]	; (801e020 <tcp_receive+0x88c>)
 801df0c:	68db      	ldr	r3, [r3, #12]
 801df0e:	899b      	ldrh	r3, [r3, #12]
 801df10:	b29b      	uxth	r3, r3
 801df12:	4618      	mov	r0, r3
 801df14:	f7fa fe8c 	bl	8018c30 <lwip_htons>
 801df18:	4603      	mov	r3, r0
 801df1a:	b2db      	uxtb	r3, r3
 801df1c:	f003 0303 	and.w	r3, r3, #3
 801df20:	2b00      	cmp	r3, #0
 801df22:	d001      	beq.n	801df28 <tcp_receive+0x794>
 801df24:	2301      	movs	r3, #1
 801df26:	e000      	b.n	801df2a <tcp_receive+0x796>
 801df28:	2300      	movs	r3, #0
 801df2a:	4423      	add	r3, r4
 801df2c:	b29a      	uxth	r2, r3
 801df2e:	4b3d      	ldr	r3, [pc, #244]	; (801e024 <tcp_receive+0x890>)
 801df30:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801df32:	4b3c      	ldr	r3, [pc, #240]	; (801e024 <tcp_receive+0x890>)
 801df34:	881b      	ldrh	r3, [r3, #0]
 801df36:	461a      	mov	r2, r3
 801df38:	4b38      	ldr	r3, [pc, #224]	; (801e01c <tcp_receive+0x888>)
 801df3a:	681b      	ldr	r3, [r3, #0]
 801df3c:	441a      	add	r2, r3
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df42:	6879      	ldr	r1, [r7, #4]
 801df44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801df46:	440b      	add	r3, r1
 801df48:	429a      	cmp	r2, r3
 801df4a:	d006      	beq.n	801df5a <tcp_receive+0x7c6>
 801df4c:	4b36      	ldr	r3, [pc, #216]	; (801e028 <tcp_receive+0x894>)
 801df4e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801df52:	4936      	ldr	r1, [pc, #216]	; (801e02c <tcp_receive+0x898>)
 801df54:	4836      	ldr	r0, [pc, #216]	; (801e030 <tcp_receive+0x89c>)
 801df56:	f008 f805 	bl	8025f64 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801df5e:	2b00      	cmp	r3, #0
 801df60:	f000 80e7 	beq.w	801e132 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801df64:	4b2e      	ldr	r3, [pc, #184]	; (801e020 <tcp_receive+0x88c>)
 801df66:	68db      	ldr	r3, [r3, #12]
 801df68:	899b      	ldrh	r3, [r3, #12]
 801df6a:	b29b      	uxth	r3, r3
 801df6c:	4618      	mov	r0, r3
 801df6e:	f7fa fe5f 	bl	8018c30 <lwip_htons>
 801df72:	4603      	mov	r3, r0
 801df74:	b2db      	uxtb	r3, r3
 801df76:	f003 0301 	and.w	r3, r3, #1
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d010      	beq.n	801dfa0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801df7e:	e00a      	b.n	801df96 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801df84:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801df8a:	681a      	ldr	r2, [r3, #0]
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801df90:	68f8      	ldr	r0, [r7, #12]
 801df92:	f7fd fd92 	bl	801baba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d1f0      	bne.n	801df80 <tcp_receive+0x7ec>
 801df9e:	e0c8      	b.n	801e132 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801dfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801dfa6:	e052      	b.n	801e04e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801dfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dfaa:	68db      	ldr	r3, [r3, #12]
 801dfac:	899b      	ldrh	r3, [r3, #12]
 801dfae:	b29b      	uxth	r3, r3
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	f7fa fe3d 	bl	8018c30 <lwip_htons>
 801dfb6:	4603      	mov	r3, r0
 801dfb8:	b2db      	uxtb	r3, r3
 801dfba:	f003 0301 	and.w	r3, r3, #1
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d03d      	beq.n	801e03e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801dfc2:	4b17      	ldr	r3, [pc, #92]	; (801e020 <tcp_receive+0x88c>)
 801dfc4:	68db      	ldr	r3, [r3, #12]
 801dfc6:	899b      	ldrh	r3, [r3, #12]
 801dfc8:	b29b      	uxth	r3, r3
 801dfca:	4618      	mov	r0, r3
 801dfcc:	f7fa fe30 	bl	8018c30 <lwip_htons>
 801dfd0:	4603      	mov	r3, r0
 801dfd2:	b2db      	uxtb	r3, r3
 801dfd4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	d130      	bne.n	801e03e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801dfdc:	4b10      	ldr	r3, [pc, #64]	; (801e020 <tcp_receive+0x88c>)
 801dfde:	68db      	ldr	r3, [r3, #12]
 801dfe0:	899b      	ldrh	r3, [r3, #12]
 801dfe2:	b29c      	uxth	r4, r3
 801dfe4:	2001      	movs	r0, #1
 801dfe6:	f7fa fe23 	bl	8018c30 <lwip_htons>
 801dfea:	4603      	mov	r3, r0
 801dfec:	461a      	mov	r2, r3
 801dfee:	4b0c      	ldr	r3, [pc, #48]	; (801e020 <tcp_receive+0x88c>)
 801dff0:	68db      	ldr	r3, [r3, #12]
 801dff2:	4322      	orrs	r2, r4
 801dff4:	b292      	uxth	r2, r2
 801dff6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801dff8:	4b09      	ldr	r3, [pc, #36]	; (801e020 <tcp_receive+0x88c>)
 801dffa:	891c      	ldrh	r4, [r3, #8]
 801dffc:	4b08      	ldr	r3, [pc, #32]	; (801e020 <tcp_receive+0x88c>)
 801dffe:	68db      	ldr	r3, [r3, #12]
 801e000:	899b      	ldrh	r3, [r3, #12]
 801e002:	b29b      	uxth	r3, r3
 801e004:	4618      	mov	r0, r3
 801e006:	f7fa fe13 	bl	8018c30 <lwip_htons>
 801e00a:	4603      	mov	r3, r0
 801e00c:	b2db      	uxtb	r3, r3
 801e00e:	f003 0303 	and.w	r3, r3, #3
 801e012:	2b00      	cmp	r3, #0
 801e014:	d00e      	beq.n	801e034 <tcp_receive+0x8a0>
 801e016:	2301      	movs	r3, #1
 801e018:	e00d      	b.n	801e036 <tcp_receive+0x8a2>
 801e01a:	bf00      	nop
 801e01c:	2400d034 	.word	0x2400d034
 801e020:	2400d014 	.word	0x2400d014
 801e024:	2400d03e 	.word	0x2400d03e
 801e028:	08028220 	.word	0x08028220
 801e02c:	080285c8 	.word	0x080285c8
 801e030:	0802826c 	.word	0x0802826c
 801e034:	2300      	movs	r3, #0
 801e036:	4423      	add	r3, r4
 801e038:	b29a      	uxth	r2, r3
 801e03a:	4b98      	ldr	r3, [pc, #608]	; (801e29c <tcp_receive+0xb08>)
 801e03c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801e03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e040:	613b      	str	r3, [r7, #16]
              next = next->next;
 801e042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801e048:	6938      	ldr	r0, [r7, #16]
 801e04a:	f7fd fd36 	bl	801baba <tcp_seg_free>
            while (next &&
 801e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e050:	2b00      	cmp	r3, #0
 801e052:	d00e      	beq.n	801e072 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e054:	4b91      	ldr	r3, [pc, #580]	; (801e29c <tcp_receive+0xb08>)
 801e056:	881b      	ldrh	r3, [r3, #0]
 801e058:	461a      	mov	r2, r3
 801e05a:	4b91      	ldr	r3, [pc, #580]	; (801e2a0 <tcp_receive+0xb0c>)
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	441a      	add	r2, r3
 801e060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e062:	68db      	ldr	r3, [r3, #12]
 801e064:	685b      	ldr	r3, [r3, #4]
 801e066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e068:	8909      	ldrh	r1, [r1, #8]
 801e06a:	440b      	add	r3, r1
 801e06c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801e06e:	2b00      	cmp	r3, #0
 801e070:	da9a      	bge.n	801dfa8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801e072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e074:	2b00      	cmp	r3, #0
 801e076:	d059      	beq.n	801e12c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801e078:	4b88      	ldr	r3, [pc, #544]	; (801e29c <tcp_receive+0xb08>)
 801e07a:	881b      	ldrh	r3, [r3, #0]
 801e07c:	461a      	mov	r2, r3
 801e07e:	4b88      	ldr	r3, [pc, #544]	; (801e2a0 <tcp_receive+0xb0c>)
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	441a      	add	r2, r3
 801e084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e086:	68db      	ldr	r3, [r3, #12]
 801e088:	685b      	ldr	r3, [r3, #4]
 801e08a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	dd4d      	ble.n	801e12c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e092:	68db      	ldr	r3, [r3, #12]
 801e094:	685b      	ldr	r3, [r3, #4]
 801e096:	b29a      	uxth	r2, r3
 801e098:	4b81      	ldr	r3, [pc, #516]	; (801e2a0 <tcp_receive+0xb0c>)
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	b29b      	uxth	r3, r3
 801e09e:	1ad3      	subs	r3, r2, r3
 801e0a0:	b29a      	uxth	r2, r3
 801e0a2:	4b80      	ldr	r3, [pc, #512]	; (801e2a4 <tcp_receive+0xb10>)
 801e0a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e0a6:	4b7f      	ldr	r3, [pc, #508]	; (801e2a4 <tcp_receive+0xb10>)
 801e0a8:	68db      	ldr	r3, [r3, #12]
 801e0aa:	899b      	ldrh	r3, [r3, #12]
 801e0ac:	b29b      	uxth	r3, r3
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	f7fa fdbe 	bl	8018c30 <lwip_htons>
 801e0b4:	4603      	mov	r3, r0
 801e0b6:	b2db      	uxtb	r3, r3
 801e0b8:	f003 0302 	and.w	r3, r3, #2
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d005      	beq.n	801e0cc <tcp_receive+0x938>
                inseg.len -= 1;
 801e0c0:	4b78      	ldr	r3, [pc, #480]	; (801e2a4 <tcp_receive+0xb10>)
 801e0c2:	891b      	ldrh	r3, [r3, #8]
 801e0c4:	3b01      	subs	r3, #1
 801e0c6:	b29a      	uxth	r2, r3
 801e0c8:	4b76      	ldr	r3, [pc, #472]	; (801e2a4 <tcp_receive+0xb10>)
 801e0ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801e0cc:	4b75      	ldr	r3, [pc, #468]	; (801e2a4 <tcp_receive+0xb10>)
 801e0ce:	685b      	ldr	r3, [r3, #4]
 801e0d0:	4a74      	ldr	r2, [pc, #464]	; (801e2a4 <tcp_receive+0xb10>)
 801e0d2:	8912      	ldrh	r2, [r2, #8]
 801e0d4:	4611      	mov	r1, r2
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f7fc f8da 	bl	801a290 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801e0dc:	4b71      	ldr	r3, [pc, #452]	; (801e2a4 <tcp_receive+0xb10>)
 801e0de:	891c      	ldrh	r4, [r3, #8]
 801e0e0:	4b70      	ldr	r3, [pc, #448]	; (801e2a4 <tcp_receive+0xb10>)
 801e0e2:	68db      	ldr	r3, [r3, #12]
 801e0e4:	899b      	ldrh	r3, [r3, #12]
 801e0e6:	b29b      	uxth	r3, r3
 801e0e8:	4618      	mov	r0, r3
 801e0ea:	f7fa fda1 	bl	8018c30 <lwip_htons>
 801e0ee:	4603      	mov	r3, r0
 801e0f0:	b2db      	uxtb	r3, r3
 801e0f2:	f003 0303 	and.w	r3, r3, #3
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d001      	beq.n	801e0fe <tcp_receive+0x96a>
 801e0fa:	2301      	movs	r3, #1
 801e0fc:	e000      	b.n	801e100 <tcp_receive+0x96c>
 801e0fe:	2300      	movs	r3, #0
 801e100:	4423      	add	r3, r4
 801e102:	b29a      	uxth	r2, r3
 801e104:	4b65      	ldr	r3, [pc, #404]	; (801e29c <tcp_receive+0xb08>)
 801e106:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e108:	4b64      	ldr	r3, [pc, #400]	; (801e29c <tcp_receive+0xb08>)
 801e10a:	881b      	ldrh	r3, [r3, #0]
 801e10c:	461a      	mov	r2, r3
 801e10e:	4b64      	ldr	r3, [pc, #400]	; (801e2a0 <tcp_receive+0xb0c>)
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	441a      	add	r2, r3
 801e114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e116:	68db      	ldr	r3, [r3, #12]
 801e118:	685b      	ldr	r3, [r3, #4]
 801e11a:	429a      	cmp	r2, r3
 801e11c:	d006      	beq.n	801e12c <tcp_receive+0x998>
 801e11e:	4b62      	ldr	r3, [pc, #392]	; (801e2a8 <tcp_receive+0xb14>)
 801e120:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801e124:	4961      	ldr	r1, [pc, #388]	; (801e2ac <tcp_receive+0xb18>)
 801e126:	4862      	ldr	r0, [pc, #392]	; (801e2b0 <tcp_receive+0xb1c>)
 801e128:	f007 ff1c 	bl	8025f64 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e130:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801e132:	4b5a      	ldr	r3, [pc, #360]	; (801e29c <tcp_receive+0xb08>)
 801e134:	881b      	ldrh	r3, [r3, #0]
 801e136:	461a      	mov	r2, r3
 801e138:	4b59      	ldr	r3, [pc, #356]	; (801e2a0 <tcp_receive+0xb0c>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	441a      	add	r2, r3
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e146:	4b55      	ldr	r3, [pc, #340]	; (801e29c <tcp_receive+0xb08>)
 801e148:	881b      	ldrh	r3, [r3, #0]
 801e14a:	429a      	cmp	r2, r3
 801e14c:	d206      	bcs.n	801e15c <tcp_receive+0x9c8>
 801e14e:	4b56      	ldr	r3, [pc, #344]	; (801e2a8 <tcp_receive+0xb14>)
 801e150:	f240 6207 	movw	r2, #1543	; 0x607
 801e154:	4957      	ldr	r1, [pc, #348]	; (801e2b4 <tcp_receive+0xb20>)
 801e156:	4856      	ldr	r0, [pc, #344]	; (801e2b0 <tcp_receive+0xb1c>)
 801e158:	f007 ff04 	bl	8025f64 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e160:	4b4e      	ldr	r3, [pc, #312]	; (801e29c <tcp_receive+0xb08>)
 801e162:	881b      	ldrh	r3, [r3, #0]
 801e164:	1ad3      	subs	r3, r2, r3
 801e166:	b29a      	uxth	r2, r3
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801e16c:	6878      	ldr	r0, [r7, #4]
 801e16e:	f7fc ffc5 	bl	801b0fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801e172:	4b4c      	ldr	r3, [pc, #304]	; (801e2a4 <tcp_receive+0xb10>)
 801e174:	685b      	ldr	r3, [r3, #4]
 801e176:	891b      	ldrh	r3, [r3, #8]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d006      	beq.n	801e18a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801e17c:	4b49      	ldr	r3, [pc, #292]	; (801e2a4 <tcp_receive+0xb10>)
 801e17e:	685b      	ldr	r3, [r3, #4]
 801e180:	4a4d      	ldr	r2, [pc, #308]	; (801e2b8 <tcp_receive+0xb24>)
 801e182:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801e184:	4b47      	ldr	r3, [pc, #284]	; (801e2a4 <tcp_receive+0xb10>)
 801e186:	2200      	movs	r2, #0
 801e188:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e18a:	4b46      	ldr	r3, [pc, #280]	; (801e2a4 <tcp_receive+0xb10>)
 801e18c:	68db      	ldr	r3, [r3, #12]
 801e18e:	899b      	ldrh	r3, [r3, #12]
 801e190:	b29b      	uxth	r3, r3
 801e192:	4618      	mov	r0, r3
 801e194:	f7fa fd4c 	bl	8018c30 <lwip_htons>
 801e198:	4603      	mov	r3, r0
 801e19a:	b2db      	uxtb	r3, r3
 801e19c:	f003 0301 	and.w	r3, r3, #1
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	f000 80b8 	beq.w	801e316 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801e1a6:	4b45      	ldr	r3, [pc, #276]	; (801e2bc <tcp_receive+0xb28>)
 801e1a8:	781b      	ldrb	r3, [r3, #0]
 801e1aa:	f043 0320 	orr.w	r3, r3, #32
 801e1ae:	b2da      	uxtb	r2, r3
 801e1b0:	4b42      	ldr	r3, [pc, #264]	; (801e2bc <tcp_receive+0xb28>)
 801e1b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801e1b4:	e0af      	b.n	801e316 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1c0:	68db      	ldr	r3, [r3, #12]
 801e1c2:	685b      	ldr	r3, [r3, #4]
 801e1c4:	4a36      	ldr	r2, [pc, #216]	; (801e2a0 <tcp_receive+0xb0c>)
 801e1c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e1c8:	68bb      	ldr	r3, [r7, #8]
 801e1ca:	891b      	ldrh	r3, [r3, #8]
 801e1cc:	461c      	mov	r4, r3
 801e1ce:	68bb      	ldr	r3, [r7, #8]
 801e1d0:	68db      	ldr	r3, [r3, #12]
 801e1d2:	899b      	ldrh	r3, [r3, #12]
 801e1d4:	b29b      	uxth	r3, r3
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	f7fa fd2a 	bl	8018c30 <lwip_htons>
 801e1dc:	4603      	mov	r3, r0
 801e1de:	b2db      	uxtb	r3, r3
 801e1e0:	f003 0303 	and.w	r3, r3, #3
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d001      	beq.n	801e1ec <tcp_receive+0xa58>
 801e1e8:	2301      	movs	r3, #1
 801e1ea:	e000      	b.n	801e1ee <tcp_receive+0xa5a>
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	191a      	adds	r2, r3, r4
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1f4:	441a      	add	r2, r3
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e1fe:	461c      	mov	r4, r3
 801e200:	68bb      	ldr	r3, [r7, #8]
 801e202:	891b      	ldrh	r3, [r3, #8]
 801e204:	461d      	mov	r5, r3
 801e206:	68bb      	ldr	r3, [r7, #8]
 801e208:	68db      	ldr	r3, [r3, #12]
 801e20a:	899b      	ldrh	r3, [r3, #12]
 801e20c:	b29b      	uxth	r3, r3
 801e20e:	4618      	mov	r0, r3
 801e210:	f7fa fd0e 	bl	8018c30 <lwip_htons>
 801e214:	4603      	mov	r3, r0
 801e216:	b2db      	uxtb	r3, r3
 801e218:	f003 0303 	and.w	r3, r3, #3
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d001      	beq.n	801e224 <tcp_receive+0xa90>
 801e220:	2301      	movs	r3, #1
 801e222:	e000      	b.n	801e226 <tcp_receive+0xa92>
 801e224:	2300      	movs	r3, #0
 801e226:	442b      	add	r3, r5
 801e228:	429c      	cmp	r4, r3
 801e22a:	d206      	bcs.n	801e23a <tcp_receive+0xaa6>
 801e22c:	4b1e      	ldr	r3, [pc, #120]	; (801e2a8 <tcp_receive+0xb14>)
 801e22e:	f240 622b 	movw	r2, #1579	; 0x62b
 801e232:	4923      	ldr	r1, [pc, #140]	; (801e2c0 <tcp_receive+0xb2c>)
 801e234:	481e      	ldr	r0, [pc, #120]	; (801e2b0 <tcp_receive+0xb1c>)
 801e236:	f007 fe95 	bl	8025f64 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e23a:	68bb      	ldr	r3, [r7, #8]
 801e23c:	891b      	ldrh	r3, [r3, #8]
 801e23e:	461c      	mov	r4, r3
 801e240:	68bb      	ldr	r3, [r7, #8]
 801e242:	68db      	ldr	r3, [r3, #12]
 801e244:	899b      	ldrh	r3, [r3, #12]
 801e246:	b29b      	uxth	r3, r3
 801e248:	4618      	mov	r0, r3
 801e24a:	f7fa fcf1 	bl	8018c30 <lwip_htons>
 801e24e:	4603      	mov	r3, r0
 801e250:	b2db      	uxtb	r3, r3
 801e252:	f003 0303 	and.w	r3, r3, #3
 801e256:	2b00      	cmp	r3, #0
 801e258:	d001      	beq.n	801e25e <tcp_receive+0xaca>
 801e25a:	2301      	movs	r3, #1
 801e25c:	e000      	b.n	801e260 <tcp_receive+0xacc>
 801e25e:	2300      	movs	r3, #0
 801e260:	1919      	adds	r1, r3, r4
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e266:	b28b      	uxth	r3, r1
 801e268:	1ad3      	subs	r3, r2, r3
 801e26a:	b29a      	uxth	r2, r3
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801e270:	6878      	ldr	r0, [r7, #4]
 801e272:	f7fc ff43 	bl	801b0fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801e276:	68bb      	ldr	r3, [r7, #8]
 801e278:	685b      	ldr	r3, [r3, #4]
 801e27a:	891b      	ldrh	r3, [r3, #8]
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d028      	beq.n	801e2d2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801e280:	4b0d      	ldr	r3, [pc, #52]	; (801e2b8 <tcp_receive+0xb24>)
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	2b00      	cmp	r3, #0
 801e286:	d01d      	beq.n	801e2c4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801e288:	4b0b      	ldr	r3, [pc, #44]	; (801e2b8 <tcp_receive+0xb24>)
 801e28a:	681a      	ldr	r2, [r3, #0]
 801e28c:	68bb      	ldr	r3, [r7, #8]
 801e28e:	685b      	ldr	r3, [r3, #4]
 801e290:	4619      	mov	r1, r3
 801e292:	4610      	mov	r0, r2
 801e294:	f7fc fa50 	bl	801a738 <pbuf_cat>
 801e298:	e018      	b.n	801e2cc <tcp_receive+0xb38>
 801e29a:	bf00      	nop
 801e29c:	2400d03e 	.word	0x2400d03e
 801e2a0:	2400d034 	.word	0x2400d034
 801e2a4:	2400d014 	.word	0x2400d014
 801e2a8:	08028220 	.word	0x08028220
 801e2ac:	08028600 	.word	0x08028600
 801e2b0:	0802826c 	.word	0x0802826c
 801e2b4:	0802863c 	.word	0x0802863c
 801e2b8:	2400d044 	.word	0x2400d044
 801e2bc:	2400d041 	.word	0x2400d041
 801e2c0:	0802865c 	.word	0x0802865c
            } else {
              recv_data = cseg->p;
 801e2c4:	68bb      	ldr	r3, [r7, #8]
 801e2c6:	685b      	ldr	r3, [r3, #4]
 801e2c8:	4a70      	ldr	r2, [pc, #448]	; (801e48c <tcp_receive+0xcf8>)
 801e2ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801e2cc:	68bb      	ldr	r3, [r7, #8]
 801e2ce:	2200      	movs	r2, #0
 801e2d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e2d2:	68bb      	ldr	r3, [r7, #8]
 801e2d4:	68db      	ldr	r3, [r3, #12]
 801e2d6:	899b      	ldrh	r3, [r3, #12]
 801e2d8:	b29b      	uxth	r3, r3
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f7fa fca8 	bl	8018c30 <lwip_htons>
 801e2e0:	4603      	mov	r3, r0
 801e2e2:	b2db      	uxtb	r3, r3
 801e2e4:	f003 0301 	and.w	r3, r3, #1
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d00d      	beq.n	801e308 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801e2ec:	4b68      	ldr	r3, [pc, #416]	; (801e490 <tcp_receive+0xcfc>)
 801e2ee:	781b      	ldrb	r3, [r3, #0]
 801e2f0:	f043 0320 	orr.w	r3, r3, #32
 801e2f4:	b2da      	uxtb	r2, r3
 801e2f6:	4b66      	ldr	r3, [pc, #408]	; (801e490 <tcp_receive+0xcfc>)
 801e2f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	7d1b      	ldrb	r3, [r3, #20]
 801e2fe:	2b04      	cmp	r3, #4
 801e300:	d102      	bne.n	801e308 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	2207      	movs	r2, #7
 801e306:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801e308:	68bb      	ldr	r3, [r7, #8]
 801e30a:	681a      	ldr	r2, [r3, #0]
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801e310:	68b8      	ldr	r0, [r7, #8]
 801e312:	f7fd fbd2 	bl	801baba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d008      	beq.n	801e330 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e322:	68db      	ldr	r3, [r3, #12]
 801e324:	685a      	ldr	r2, [r3, #4]
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801e32a:	429a      	cmp	r2, r3
 801e32c:	f43f af43 	beq.w	801e1b6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	8b5b      	ldrh	r3, [r3, #26]
 801e334:	f003 0301 	and.w	r3, r3, #1
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d00e      	beq.n	801e35a <tcp_receive+0xbc6>
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	8b5b      	ldrh	r3, [r3, #26]
 801e340:	f023 0301 	bic.w	r3, r3, #1
 801e344:	b29a      	uxth	r2, r3
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	835a      	strh	r2, [r3, #26]
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	8b5b      	ldrh	r3, [r3, #26]
 801e34e:	f043 0302 	orr.w	r3, r3, #2
 801e352:	b29a      	uxth	r2, r3
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e358:	e188      	b.n	801e66c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	8b5b      	ldrh	r3, [r3, #26]
 801e35e:	f043 0301 	orr.w	r3, r3, #1
 801e362:	b29a      	uxth	r2, r3
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e368:	e180      	b.n	801e66c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d106      	bne.n	801e380 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801e372:	4848      	ldr	r0, [pc, #288]	; (801e494 <tcp_receive+0xd00>)
 801e374:	f7fd fbba 	bl	801baec <tcp_seg_copy>
 801e378:	4602      	mov	r2, r0
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	675a      	str	r2, [r3, #116]	; 0x74
 801e37e:	e16d      	b.n	801e65c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801e380:	2300      	movs	r3, #0
 801e382:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e388:	63bb      	str	r3, [r7, #56]	; 0x38
 801e38a:	e157      	b.n	801e63c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801e38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e38e:	68db      	ldr	r3, [r3, #12]
 801e390:	685a      	ldr	r2, [r3, #4]
 801e392:	4b41      	ldr	r3, [pc, #260]	; (801e498 <tcp_receive+0xd04>)
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	429a      	cmp	r2, r3
 801e398:	d11d      	bne.n	801e3d6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801e39a:	4b3e      	ldr	r3, [pc, #248]	; (801e494 <tcp_receive+0xd00>)
 801e39c:	891a      	ldrh	r2, [r3, #8]
 801e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e3a0:	891b      	ldrh	r3, [r3, #8]
 801e3a2:	429a      	cmp	r2, r3
 801e3a4:	f240 814f 	bls.w	801e646 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e3a8:	483a      	ldr	r0, [pc, #232]	; (801e494 <tcp_receive+0xd00>)
 801e3aa:	f7fd fb9f 	bl	801baec <tcp_seg_copy>
 801e3ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801e3b0:	697b      	ldr	r3, [r7, #20]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	f000 8149 	beq.w	801e64a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801e3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d003      	beq.n	801e3c6 <tcp_receive+0xc32>
                    prev->next = cseg;
 801e3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3c0:	697a      	ldr	r2, [r7, #20]
 801e3c2:	601a      	str	r2, [r3, #0]
 801e3c4:	e002      	b.n	801e3cc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	697a      	ldr	r2, [r7, #20]
 801e3ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801e3cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e3ce:	6978      	ldr	r0, [r7, #20]
 801e3d0:	f7ff f8dc 	bl	801d58c <tcp_oos_insert_segment>
                }
                break;
 801e3d4:	e139      	b.n	801e64a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801e3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d117      	bne.n	801e40c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e3dc:	4b2e      	ldr	r3, [pc, #184]	; (801e498 <tcp_receive+0xd04>)
 801e3de:	681a      	ldr	r2, [r3, #0]
 801e3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e3e2:	68db      	ldr	r3, [r3, #12]
 801e3e4:	685b      	ldr	r3, [r3, #4]
 801e3e6:	1ad3      	subs	r3, r2, r3
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	da57      	bge.n	801e49c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e3ec:	4829      	ldr	r0, [pc, #164]	; (801e494 <tcp_receive+0xd00>)
 801e3ee:	f7fd fb7d 	bl	801baec <tcp_seg_copy>
 801e3f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801e3f4:	69bb      	ldr	r3, [r7, #24]
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	f000 8129 	beq.w	801e64e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	69ba      	ldr	r2, [r7, #24]
 801e400:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e402:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e404:	69b8      	ldr	r0, [r7, #24]
 801e406:	f7ff f8c1 	bl	801d58c <tcp_oos_insert_segment>
                  }
                  break;
 801e40a:	e120      	b.n	801e64e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e40c:	4b22      	ldr	r3, [pc, #136]	; (801e498 <tcp_receive+0xd04>)
 801e40e:	681a      	ldr	r2, [r3, #0]
 801e410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e412:	68db      	ldr	r3, [r3, #12]
 801e414:	685b      	ldr	r3, [r3, #4]
 801e416:	1ad3      	subs	r3, r2, r3
 801e418:	3b01      	subs	r3, #1
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	db3e      	blt.n	801e49c <tcp_receive+0xd08>
 801e41e:	4b1e      	ldr	r3, [pc, #120]	; (801e498 <tcp_receive+0xd04>)
 801e420:	681a      	ldr	r2, [r3, #0]
 801e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e424:	68db      	ldr	r3, [r3, #12]
 801e426:	685b      	ldr	r3, [r3, #4]
 801e428:	1ad3      	subs	r3, r2, r3
 801e42a:	3301      	adds	r3, #1
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	dc35      	bgt.n	801e49c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e430:	4818      	ldr	r0, [pc, #96]	; (801e494 <tcp_receive+0xd00>)
 801e432:	f7fd fb5b 	bl	801baec <tcp_seg_copy>
 801e436:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801e438:	69fb      	ldr	r3, [r7, #28]
 801e43a:	2b00      	cmp	r3, #0
 801e43c:	f000 8109 	beq.w	801e652 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e442:	68db      	ldr	r3, [r3, #12]
 801e444:	685b      	ldr	r3, [r3, #4]
 801e446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e448:	8912      	ldrh	r2, [r2, #8]
 801e44a:	441a      	add	r2, r3
 801e44c:	4b12      	ldr	r3, [pc, #72]	; (801e498 <tcp_receive+0xd04>)
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	1ad3      	subs	r3, r2, r3
 801e452:	2b00      	cmp	r3, #0
 801e454:	dd12      	ble.n	801e47c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e456:	4b10      	ldr	r3, [pc, #64]	; (801e498 <tcp_receive+0xd04>)
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	b29a      	uxth	r2, r3
 801e45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e45e:	68db      	ldr	r3, [r3, #12]
 801e460:	685b      	ldr	r3, [r3, #4]
 801e462:	b29b      	uxth	r3, r3
 801e464:	1ad3      	subs	r3, r2, r3
 801e466:	b29a      	uxth	r2, r3
 801e468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e46a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e46e:	685a      	ldr	r2, [r3, #4]
 801e470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e472:	891b      	ldrh	r3, [r3, #8]
 801e474:	4619      	mov	r1, r3
 801e476:	4610      	mov	r0, r2
 801e478:	f7fb ff0a 	bl	801a290 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801e47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e47e:	69fa      	ldr	r2, [r7, #28]
 801e480:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801e482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e484:	69f8      	ldr	r0, [r7, #28]
 801e486:	f7ff f881 	bl	801d58c <tcp_oos_insert_segment>
                  }
                  break;
 801e48a:	e0e2      	b.n	801e652 <tcp_receive+0xebe>
 801e48c:	2400d044 	.word	0x2400d044
 801e490:	2400d041 	.word	0x2400d041
 801e494:	2400d014 	.word	0x2400d014
 801e498:	2400d034 	.word	0x2400d034
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801e49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e49e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	f040 80c6 	bne.w	801e636 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e4aa:	4b80      	ldr	r3, [pc, #512]	; (801e6ac <tcp_receive+0xf18>)
 801e4ac:	681a      	ldr	r2, [r3, #0]
 801e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4b0:	68db      	ldr	r3, [r3, #12]
 801e4b2:	685b      	ldr	r3, [r3, #4]
 801e4b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	f340 80bd 	ble.w	801e636 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4be:	68db      	ldr	r3, [r3, #12]
 801e4c0:	899b      	ldrh	r3, [r3, #12]
 801e4c2:	b29b      	uxth	r3, r3
 801e4c4:	4618      	mov	r0, r3
 801e4c6:	f7fa fbb3 	bl	8018c30 <lwip_htons>
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	b2db      	uxtb	r3, r3
 801e4ce:	f003 0301 	and.w	r3, r3, #1
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	f040 80bf 	bne.w	801e656 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801e4d8:	4875      	ldr	r0, [pc, #468]	; (801e6b0 <tcp_receive+0xf1c>)
 801e4da:	f7fd fb07 	bl	801baec <tcp_seg_copy>
 801e4de:	4602      	mov	r2, r0
 801e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801e4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	f000 80b6 	beq.w	801e65a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4f0:	68db      	ldr	r3, [r3, #12]
 801e4f2:	685b      	ldr	r3, [r3, #4]
 801e4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e4f6:	8912      	ldrh	r2, [r2, #8]
 801e4f8:	441a      	add	r2, r3
 801e4fa:	4b6c      	ldr	r3, [pc, #432]	; (801e6ac <tcp_receive+0xf18>)
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	1ad3      	subs	r3, r2, r3
 801e500:	2b00      	cmp	r3, #0
 801e502:	dd12      	ble.n	801e52a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e504:	4b69      	ldr	r3, [pc, #420]	; (801e6ac <tcp_receive+0xf18>)
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	b29a      	uxth	r2, r3
 801e50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e50c:	68db      	ldr	r3, [r3, #12]
 801e50e:	685b      	ldr	r3, [r3, #4]
 801e510:	b29b      	uxth	r3, r3
 801e512:	1ad3      	subs	r3, r2, r3
 801e514:	b29a      	uxth	r2, r3
 801e516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e518:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e51c:	685a      	ldr	r2, [r3, #4]
 801e51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e520:	891b      	ldrh	r3, [r3, #8]
 801e522:	4619      	mov	r1, r3
 801e524:	4610      	mov	r0, r2
 801e526:	f7fb feb3 	bl	801a290 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e52a:	4b62      	ldr	r3, [pc, #392]	; (801e6b4 <tcp_receive+0xf20>)
 801e52c:	881b      	ldrh	r3, [r3, #0]
 801e52e:	461a      	mov	r2, r3
 801e530:	4b5e      	ldr	r3, [pc, #376]	; (801e6ac <tcp_receive+0xf18>)
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	441a      	add	r2, r3
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e53a:	6879      	ldr	r1, [r7, #4]
 801e53c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e53e:	440b      	add	r3, r1
 801e540:	1ad3      	subs	r3, r2, r3
 801e542:	2b00      	cmp	r3, #0
 801e544:	f340 8089 	ble.w	801e65a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	68db      	ldr	r3, [r3, #12]
 801e54e:	899b      	ldrh	r3, [r3, #12]
 801e550:	b29b      	uxth	r3, r3
 801e552:	4618      	mov	r0, r3
 801e554:	f7fa fb6c 	bl	8018c30 <lwip_htons>
 801e558:	4603      	mov	r3, r0
 801e55a:	b2db      	uxtb	r3, r3
 801e55c:	f003 0301 	and.w	r3, r3, #1
 801e560:	2b00      	cmp	r3, #0
 801e562:	d022      	beq.n	801e5aa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	68db      	ldr	r3, [r3, #12]
 801e56a:	899b      	ldrh	r3, [r3, #12]
 801e56c:	b29b      	uxth	r3, r3
 801e56e:	b21b      	sxth	r3, r3
 801e570:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e574:	b21c      	sxth	r4, r3
 801e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e578:	681b      	ldr	r3, [r3, #0]
 801e57a:	68db      	ldr	r3, [r3, #12]
 801e57c:	899b      	ldrh	r3, [r3, #12]
 801e57e:	b29b      	uxth	r3, r3
 801e580:	4618      	mov	r0, r3
 801e582:	f7fa fb55 	bl	8018c30 <lwip_htons>
 801e586:	4603      	mov	r3, r0
 801e588:	b2db      	uxtb	r3, r3
 801e58a:	b29b      	uxth	r3, r3
 801e58c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801e590:	b29b      	uxth	r3, r3
 801e592:	4618      	mov	r0, r3
 801e594:	f7fa fb4c 	bl	8018c30 <lwip_htons>
 801e598:	4603      	mov	r3, r0
 801e59a:	b21b      	sxth	r3, r3
 801e59c:	4323      	orrs	r3, r4
 801e59e:	b21a      	sxth	r2, r3
 801e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	68db      	ldr	r3, [r3, #12]
 801e5a6:	b292      	uxth	r2, r2
 801e5a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5ae:	b29a      	uxth	r2, r3
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e5b4:	4413      	add	r3, r2
 801e5b6:	b299      	uxth	r1, r3
 801e5b8:	4b3c      	ldr	r3, [pc, #240]	; (801e6ac <tcp_receive+0xf18>)
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	b29a      	uxth	r2, r3
 801e5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	1a8a      	subs	r2, r1, r2
 801e5c4:	b292      	uxth	r2, r2
 801e5c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	685a      	ldr	r2, [r3, #4]
 801e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	891b      	ldrh	r3, [r3, #8]
 801e5d4:	4619      	mov	r1, r3
 801e5d6:	4610      	mov	r0, r2
 801e5d8:	f7fb fe5a 	bl	801a290 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801e5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	891c      	ldrh	r4, [r3, #8]
 801e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	68db      	ldr	r3, [r3, #12]
 801e5e8:	899b      	ldrh	r3, [r3, #12]
 801e5ea:	b29b      	uxth	r3, r3
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	f7fa fb1f 	bl	8018c30 <lwip_htons>
 801e5f2:	4603      	mov	r3, r0
 801e5f4:	b2db      	uxtb	r3, r3
 801e5f6:	f003 0303 	and.w	r3, r3, #3
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d001      	beq.n	801e602 <tcp_receive+0xe6e>
 801e5fe:	2301      	movs	r3, #1
 801e600:	e000      	b.n	801e604 <tcp_receive+0xe70>
 801e602:	2300      	movs	r3, #0
 801e604:	4423      	add	r3, r4
 801e606:	b29a      	uxth	r2, r3
 801e608:	4b2a      	ldr	r3, [pc, #168]	; (801e6b4 <tcp_receive+0xf20>)
 801e60a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e60c:	4b29      	ldr	r3, [pc, #164]	; (801e6b4 <tcp_receive+0xf20>)
 801e60e:	881b      	ldrh	r3, [r3, #0]
 801e610:	461a      	mov	r2, r3
 801e612:	4b26      	ldr	r3, [pc, #152]	; (801e6ac <tcp_receive+0xf18>)
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	441a      	add	r2, r3
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e61c:	6879      	ldr	r1, [r7, #4]
 801e61e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e620:	440b      	add	r3, r1
 801e622:	429a      	cmp	r2, r3
 801e624:	d019      	beq.n	801e65a <tcp_receive+0xec6>
 801e626:	4b24      	ldr	r3, [pc, #144]	; (801e6b8 <tcp_receive+0xf24>)
 801e628:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801e62c:	4923      	ldr	r1, [pc, #140]	; (801e6bc <tcp_receive+0xf28>)
 801e62e:	4824      	ldr	r0, [pc, #144]	; (801e6c0 <tcp_receive+0xf2c>)
 801e630:	f007 fc98 	bl	8025f64 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801e634:	e011      	b.n	801e65a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	63bb      	str	r3, [r7, #56]	; 0x38
 801e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e63e:	2b00      	cmp	r3, #0
 801e640:	f47f aea4 	bne.w	801e38c <tcp_receive+0xbf8>
 801e644:	e00a      	b.n	801e65c <tcp_receive+0xec8>
                break;
 801e646:	bf00      	nop
 801e648:	e008      	b.n	801e65c <tcp_receive+0xec8>
                break;
 801e64a:	bf00      	nop
 801e64c:	e006      	b.n	801e65c <tcp_receive+0xec8>
                  break;
 801e64e:	bf00      	nop
 801e650:	e004      	b.n	801e65c <tcp_receive+0xec8>
                  break;
 801e652:	bf00      	nop
 801e654:	e002      	b.n	801e65c <tcp_receive+0xec8>
                  break;
 801e656:	bf00      	nop
 801e658:	e000      	b.n	801e65c <tcp_receive+0xec8>
                break;
 801e65a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801e65c:	6878      	ldr	r0, [r7, #4]
 801e65e:	f001 fa33 	bl	801fac8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801e662:	e003      	b.n	801e66c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801e664:	6878      	ldr	r0, [r7, #4]
 801e666:	f001 fa2f 	bl	801fac8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e66a:	e01a      	b.n	801e6a2 <tcp_receive+0xf0e>
 801e66c:	e019      	b.n	801e6a2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801e66e:	4b0f      	ldr	r3, [pc, #60]	; (801e6ac <tcp_receive+0xf18>)
 801e670:	681a      	ldr	r2, [r3, #0]
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e676:	1ad3      	subs	r3, r2, r3
 801e678:	2b00      	cmp	r3, #0
 801e67a:	db0a      	blt.n	801e692 <tcp_receive+0xefe>
 801e67c:	4b0b      	ldr	r3, [pc, #44]	; (801e6ac <tcp_receive+0xf18>)
 801e67e:	681a      	ldr	r2, [r3, #0]
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e684:	6879      	ldr	r1, [r7, #4]
 801e686:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e688:	440b      	add	r3, r1
 801e68a:	1ad3      	subs	r3, r2, r3
 801e68c:	3301      	adds	r3, #1
 801e68e:	2b00      	cmp	r3, #0
 801e690:	dd07      	ble.n	801e6a2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	8b5b      	ldrh	r3, [r3, #26]
 801e696:	f043 0302 	orr.w	r3, r3, #2
 801e69a:	b29a      	uxth	r2, r3
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801e6a0:	e7ff      	b.n	801e6a2 <tcp_receive+0xf0e>
 801e6a2:	bf00      	nop
 801e6a4:	3750      	adds	r7, #80	; 0x50
 801e6a6:	46bd      	mov	sp, r7
 801e6a8:	bdb0      	pop	{r4, r5, r7, pc}
 801e6aa:	bf00      	nop
 801e6ac:	2400d034 	.word	0x2400d034
 801e6b0:	2400d014 	.word	0x2400d014
 801e6b4:	2400d03e 	.word	0x2400d03e
 801e6b8:	08028220 	.word	0x08028220
 801e6bc:	080285c8 	.word	0x080285c8
 801e6c0:	0802826c 	.word	0x0802826c

0801e6c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801e6c4:	b480      	push	{r7}
 801e6c6:	b083      	sub	sp, #12
 801e6c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801e6ca:	4b15      	ldr	r3, [pc, #84]	; (801e720 <tcp_get_next_optbyte+0x5c>)
 801e6cc:	881b      	ldrh	r3, [r3, #0]
 801e6ce:	1c5a      	adds	r2, r3, #1
 801e6d0:	b291      	uxth	r1, r2
 801e6d2:	4a13      	ldr	r2, [pc, #76]	; (801e720 <tcp_get_next_optbyte+0x5c>)
 801e6d4:	8011      	strh	r1, [r2, #0]
 801e6d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801e6d8:	4b12      	ldr	r3, [pc, #72]	; (801e724 <tcp_get_next_optbyte+0x60>)
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d004      	beq.n	801e6ea <tcp_get_next_optbyte+0x26>
 801e6e0:	4b11      	ldr	r3, [pc, #68]	; (801e728 <tcp_get_next_optbyte+0x64>)
 801e6e2:	881b      	ldrh	r3, [r3, #0]
 801e6e4:	88fa      	ldrh	r2, [r7, #6]
 801e6e6:	429a      	cmp	r2, r3
 801e6e8:	d208      	bcs.n	801e6fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801e6ea:	4b10      	ldr	r3, [pc, #64]	; (801e72c <tcp_get_next_optbyte+0x68>)
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	3314      	adds	r3, #20
 801e6f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801e6f2:	88fb      	ldrh	r3, [r7, #6]
 801e6f4:	683a      	ldr	r2, [r7, #0]
 801e6f6:	4413      	add	r3, r2
 801e6f8:	781b      	ldrb	r3, [r3, #0]
 801e6fa:	e00b      	b.n	801e714 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801e6fc:	88fb      	ldrh	r3, [r7, #6]
 801e6fe:	b2da      	uxtb	r2, r3
 801e700:	4b09      	ldr	r3, [pc, #36]	; (801e728 <tcp_get_next_optbyte+0x64>)
 801e702:	881b      	ldrh	r3, [r3, #0]
 801e704:	b2db      	uxtb	r3, r3
 801e706:	1ad3      	subs	r3, r2, r3
 801e708:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801e70a:	4b06      	ldr	r3, [pc, #24]	; (801e724 <tcp_get_next_optbyte+0x60>)
 801e70c:	681a      	ldr	r2, [r3, #0]
 801e70e:	797b      	ldrb	r3, [r7, #5]
 801e710:	4413      	add	r3, r2
 801e712:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e714:	4618      	mov	r0, r3
 801e716:	370c      	adds	r7, #12
 801e718:	46bd      	mov	sp, r7
 801e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e71e:	4770      	bx	lr
 801e720:	2400d030 	.word	0x2400d030
 801e724:	2400d02c 	.word	0x2400d02c
 801e728:	2400d02a 	.word	0x2400d02a
 801e72c:	2400d024 	.word	0x2400d024

0801e730 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801e730:	b580      	push	{r7, lr}
 801e732:	b084      	sub	sp, #16
 801e734:	af00      	add	r7, sp, #0
 801e736:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d106      	bne.n	801e74c <tcp_parseopt+0x1c>
 801e73e:	4b32      	ldr	r3, [pc, #200]	; (801e808 <tcp_parseopt+0xd8>)
 801e740:	f240 727d 	movw	r2, #1917	; 0x77d
 801e744:	4931      	ldr	r1, [pc, #196]	; (801e80c <tcp_parseopt+0xdc>)
 801e746:	4832      	ldr	r0, [pc, #200]	; (801e810 <tcp_parseopt+0xe0>)
 801e748:	f007 fc0c 	bl	8025f64 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801e74c:	4b31      	ldr	r3, [pc, #196]	; (801e814 <tcp_parseopt+0xe4>)
 801e74e:	881b      	ldrh	r3, [r3, #0]
 801e750:	2b00      	cmp	r3, #0
 801e752:	d055      	beq.n	801e800 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e754:	4b30      	ldr	r3, [pc, #192]	; (801e818 <tcp_parseopt+0xe8>)
 801e756:	2200      	movs	r2, #0
 801e758:	801a      	strh	r2, [r3, #0]
 801e75a:	e045      	b.n	801e7e8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801e75c:	f7ff ffb2 	bl	801e6c4 <tcp_get_next_optbyte>
 801e760:	4603      	mov	r3, r0
 801e762:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801e764:	7bfb      	ldrb	r3, [r7, #15]
 801e766:	2b02      	cmp	r3, #2
 801e768:	d006      	beq.n	801e778 <tcp_parseopt+0x48>
 801e76a:	2b02      	cmp	r3, #2
 801e76c:	dc2b      	bgt.n	801e7c6 <tcp_parseopt+0x96>
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d041      	beq.n	801e7f6 <tcp_parseopt+0xc6>
 801e772:	2b01      	cmp	r3, #1
 801e774:	d127      	bne.n	801e7c6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801e776:	e037      	b.n	801e7e8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801e778:	f7ff ffa4 	bl	801e6c4 <tcp_get_next_optbyte>
 801e77c:	4603      	mov	r3, r0
 801e77e:	2b04      	cmp	r3, #4
 801e780:	d13b      	bne.n	801e7fa <tcp_parseopt+0xca>
 801e782:	4b25      	ldr	r3, [pc, #148]	; (801e818 <tcp_parseopt+0xe8>)
 801e784:	881b      	ldrh	r3, [r3, #0]
 801e786:	3301      	adds	r3, #1
 801e788:	4a22      	ldr	r2, [pc, #136]	; (801e814 <tcp_parseopt+0xe4>)
 801e78a:	8812      	ldrh	r2, [r2, #0]
 801e78c:	4293      	cmp	r3, r2
 801e78e:	da34      	bge.n	801e7fa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801e790:	f7ff ff98 	bl	801e6c4 <tcp_get_next_optbyte>
 801e794:	4603      	mov	r3, r0
 801e796:	b29b      	uxth	r3, r3
 801e798:	021b      	lsls	r3, r3, #8
 801e79a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801e79c:	f7ff ff92 	bl	801e6c4 <tcp_get_next_optbyte>
 801e7a0:	4603      	mov	r3, r0
 801e7a2:	b29a      	uxth	r2, r3
 801e7a4:	89bb      	ldrh	r3, [r7, #12]
 801e7a6:	4313      	orrs	r3, r2
 801e7a8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801e7aa:	89bb      	ldrh	r3, [r7, #12]
 801e7ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801e7b0:	d804      	bhi.n	801e7bc <tcp_parseopt+0x8c>
 801e7b2:	89bb      	ldrh	r3, [r7, #12]
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	d001      	beq.n	801e7bc <tcp_parseopt+0x8c>
 801e7b8:	89ba      	ldrh	r2, [r7, #12]
 801e7ba:	e001      	b.n	801e7c0 <tcp_parseopt+0x90>
 801e7bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801e7c4:	e010      	b.n	801e7e8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801e7c6:	f7ff ff7d 	bl	801e6c4 <tcp_get_next_optbyte>
 801e7ca:	4603      	mov	r3, r0
 801e7cc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801e7ce:	7afb      	ldrb	r3, [r7, #11]
 801e7d0:	2b01      	cmp	r3, #1
 801e7d2:	d914      	bls.n	801e7fe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801e7d4:	7afb      	ldrb	r3, [r7, #11]
 801e7d6:	b29a      	uxth	r2, r3
 801e7d8:	4b0f      	ldr	r3, [pc, #60]	; (801e818 <tcp_parseopt+0xe8>)
 801e7da:	881b      	ldrh	r3, [r3, #0]
 801e7dc:	4413      	add	r3, r2
 801e7de:	b29b      	uxth	r3, r3
 801e7e0:	3b02      	subs	r3, #2
 801e7e2:	b29a      	uxth	r2, r3
 801e7e4:	4b0c      	ldr	r3, [pc, #48]	; (801e818 <tcp_parseopt+0xe8>)
 801e7e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801e7e8:	4b0b      	ldr	r3, [pc, #44]	; (801e818 <tcp_parseopt+0xe8>)
 801e7ea:	881a      	ldrh	r2, [r3, #0]
 801e7ec:	4b09      	ldr	r3, [pc, #36]	; (801e814 <tcp_parseopt+0xe4>)
 801e7ee:	881b      	ldrh	r3, [r3, #0]
 801e7f0:	429a      	cmp	r2, r3
 801e7f2:	d3b3      	bcc.n	801e75c <tcp_parseopt+0x2c>
 801e7f4:	e004      	b.n	801e800 <tcp_parseopt+0xd0>
          return;
 801e7f6:	bf00      	nop
 801e7f8:	e002      	b.n	801e800 <tcp_parseopt+0xd0>
            return;
 801e7fa:	bf00      	nop
 801e7fc:	e000      	b.n	801e800 <tcp_parseopt+0xd0>
            return;
 801e7fe:	bf00      	nop
      }
    }
  }
}
 801e800:	3710      	adds	r7, #16
 801e802:	46bd      	mov	sp, r7
 801e804:	bd80      	pop	{r7, pc}
 801e806:	bf00      	nop
 801e808:	08028220 	.word	0x08028220
 801e80c:	08028684 	.word	0x08028684
 801e810:	0802826c 	.word	0x0802826c
 801e814:	2400d028 	.word	0x2400d028
 801e818:	2400d030 	.word	0x2400d030

0801e81c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801e81c:	b480      	push	{r7}
 801e81e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801e820:	4b05      	ldr	r3, [pc, #20]	; (801e838 <tcp_trigger_input_pcb_close+0x1c>)
 801e822:	781b      	ldrb	r3, [r3, #0]
 801e824:	f043 0310 	orr.w	r3, r3, #16
 801e828:	b2da      	uxtb	r2, r3
 801e82a:	4b03      	ldr	r3, [pc, #12]	; (801e838 <tcp_trigger_input_pcb_close+0x1c>)
 801e82c:	701a      	strb	r2, [r3, #0]
}
 801e82e:	bf00      	nop
 801e830:	46bd      	mov	sp, r7
 801e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e836:	4770      	bx	lr
 801e838:	2400d041 	.word	0x2400d041

0801e83c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801e83c:	b580      	push	{r7, lr}
 801e83e:	b084      	sub	sp, #16
 801e840:	af00      	add	r7, sp, #0
 801e842:	60f8      	str	r0, [r7, #12]
 801e844:	60b9      	str	r1, [r7, #8]
 801e846:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d00a      	beq.n	801e864 <tcp_route+0x28>
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	7a1b      	ldrb	r3, [r3, #8]
 801e852:	2b00      	cmp	r3, #0
 801e854:	d006      	beq.n	801e864 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801e856:	68fb      	ldr	r3, [r7, #12]
 801e858:	7a1b      	ldrb	r3, [r3, #8]
 801e85a:	4618      	mov	r0, r3
 801e85c:	f7fb fb10 	bl	8019e80 <netif_get_by_index>
 801e860:	4603      	mov	r3, r0
 801e862:	e003      	b.n	801e86c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801e864:	6878      	ldr	r0, [r7, #4]
 801e866:	f005 f86d 	bl	8023944 <ip4_route>
 801e86a:	4603      	mov	r3, r0
  }
}
 801e86c:	4618      	mov	r0, r3
 801e86e:	3710      	adds	r7, #16
 801e870:	46bd      	mov	sp, r7
 801e872:	bd80      	pop	{r7, pc}

0801e874 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801e874:	b590      	push	{r4, r7, lr}
 801e876:	b087      	sub	sp, #28
 801e878:	af00      	add	r7, sp, #0
 801e87a:	60f8      	str	r0, [r7, #12]
 801e87c:	60b9      	str	r1, [r7, #8]
 801e87e:	603b      	str	r3, [r7, #0]
 801e880:	4613      	mov	r3, r2
 801e882:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	2b00      	cmp	r3, #0
 801e888:	d105      	bne.n	801e896 <tcp_create_segment+0x22>
 801e88a:	4b44      	ldr	r3, [pc, #272]	; (801e99c <tcp_create_segment+0x128>)
 801e88c:	22a3      	movs	r2, #163	; 0xa3
 801e88e:	4944      	ldr	r1, [pc, #272]	; (801e9a0 <tcp_create_segment+0x12c>)
 801e890:	4844      	ldr	r0, [pc, #272]	; (801e9a4 <tcp_create_segment+0x130>)
 801e892:	f007 fb67 	bl	8025f64 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e896:	68bb      	ldr	r3, [r7, #8]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d105      	bne.n	801e8a8 <tcp_create_segment+0x34>
 801e89c:	4b3f      	ldr	r3, [pc, #252]	; (801e99c <tcp_create_segment+0x128>)
 801e89e:	22a4      	movs	r2, #164	; 0xa4
 801e8a0:	4941      	ldr	r1, [pc, #260]	; (801e9a8 <tcp_create_segment+0x134>)
 801e8a2:	4840      	ldr	r0, [pc, #256]	; (801e9a4 <tcp_create_segment+0x130>)
 801e8a4:	f007 fb5e 	bl	8025f64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e8a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e8ac:	009b      	lsls	r3, r3, #2
 801e8ae:	b2db      	uxtb	r3, r3
 801e8b0:	f003 0304 	and.w	r3, r3, #4
 801e8b4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e8b6:	2003      	movs	r0, #3
 801e8b8:	f7fa ff4a 	bl	8019750 <memp_malloc>
 801e8bc:	6138      	str	r0, [r7, #16]
 801e8be:	693b      	ldr	r3, [r7, #16]
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d104      	bne.n	801e8ce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801e8c4:	68b8      	ldr	r0, [r7, #8]
 801e8c6:	f7fb fe69 	bl	801a59c <pbuf_free>
    return NULL;
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	e061      	b.n	801e992 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801e8ce:	693b      	ldr	r3, [r7, #16]
 801e8d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801e8d4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801e8d6:	693b      	ldr	r3, [r7, #16]
 801e8d8:	2200      	movs	r2, #0
 801e8da:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801e8dc:	693b      	ldr	r3, [r7, #16]
 801e8de:	68ba      	ldr	r2, [r7, #8]
 801e8e0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e8e2:	68bb      	ldr	r3, [r7, #8]
 801e8e4:	891a      	ldrh	r2, [r3, #8]
 801e8e6:	7dfb      	ldrb	r3, [r7, #23]
 801e8e8:	b29b      	uxth	r3, r3
 801e8ea:	429a      	cmp	r2, r3
 801e8ec:	d205      	bcs.n	801e8fa <tcp_create_segment+0x86>
 801e8ee:	4b2b      	ldr	r3, [pc, #172]	; (801e99c <tcp_create_segment+0x128>)
 801e8f0:	22b0      	movs	r2, #176	; 0xb0
 801e8f2:	492e      	ldr	r1, [pc, #184]	; (801e9ac <tcp_create_segment+0x138>)
 801e8f4:	482b      	ldr	r0, [pc, #172]	; (801e9a4 <tcp_create_segment+0x130>)
 801e8f6:	f007 fb35 	bl	8025f64 <iprintf>
  seg->len = p->tot_len - optlen;
 801e8fa:	68bb      	ldr	r3, [r7, #8]
 801e8fc:	891a      	ldrh	r2, [r3, #8]
 801e8fe:	7dfb      	ldrb	r3, [r7, #23]
 801e900:	b29b      	uxth	r3, r3
 801e902:	1ad3      	subs	r3, r2, r3
 801e904:	b29a      	uxth	r2, r3
 801e906:	693b      	ldr	r3, [r7, #16]
 801e908:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e90a:	2114      	movs	r1, #20
 801e90c:	68b8      	ldr	r0, [r7, #8]
 801e90e:	f7fb fdaf 	bl	801a470 <pbuf_add_header>
 801e912:	4603      	mov	r3, r0
 801e914:	2b00      	cmp	r3, #0
 801e916:	d004      	beq.n	801e922 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801e918:	6938      	ldr	r0, [r7, #16]
 801e91a:	f7fd f8ce 	bl	801baba <tcp_seg_free>
    return NULL;
 801e91e:	2300      	movs	r3, #0
 801e920:	e037      	b.n	801e992 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e922:	693b      	ldr	r3, [r7, #16]
 801e924:	685b      	ldr	r3, [r3, #4]
 801e926:	685a      	ldr	r2, [r3, #4]
 801e928:	693b      	ldr	r3, [r7, #16]
 801e92a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	8ada      	ldrh	r2, [r3, #22]
 801e930:	693b      	ldr	r3, [r7, #16]
 801e932:	68dc      	ldr	r4, [r3, #12]
 801e934:	4610      	mov	r0, r2
 801e936:	f7fa f97b 	bl	8018c30 <lwip_htons>
 801e93a:	4603      	mov	r3, r0
 801e93c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	8b1a      	ldrh	r2, [r3, #24]
 801e942:	693b      	ldr	r3, [r7, #16]
 801e944:	68dc      	ldr	r4, [r3, #12]
 801e946:	4610      	mov	r0, r2
 801e948:	f7fa f972 	bl	8018c30 <lwip_htons>
 801e94c:	4603      	mov	r3, r0
 801e94e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801e950:	693b      	ldr	r3, [r7, #16]
 801e952:	68dc      	ldr	r4, [r3, #12]
 801e954:	6838      	ldr	r0, [r7, #0]
 801e956:	f7fa f980 	bl	8018c5a <lwip_htonl>
 801e95a:	4603      	mov	r3, r0
 801e95c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e95e:	7dfb      	ldrb	r3, [r7, #23]
 801e960:	089b      	lsrs	r3, r3, #2
 801e962:	b2db      	uxtb	r3, r3
 801e964:	b29b      	uxth	r3, r3
 801e966:	3305      	adds	r3, #5
 801e968:	b29b      	uxth	r3, r3
 801e96a:	031b      	lsls	r3, r3, #12
 801e96c:	b29a      	uxth	r2, r3
 801e96e:	79fb      	ldrb	r3, [r7, #7]
 801e970:	b29b      	uxth	r3, r3
 801e972:	4313      	orrs	r3, r2
 801e974:	b29a      	uxth	r2, r3
 801e976:	693b      	ldr	r3, [r7, #16]
 801e978:	68dc      	ldr	r4, [r3, #12]
 801e97a:	4610      	mov	r0, r2
 801e97c:	f7fa f958 	bl	8018c30 <lwip_htons>
 801e980:	4603      	mov	r3, r0
 801e982:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801e984:	693b      	ldr	r3, [r7, #16]
 801e986:	68db      	ldr	r3, [r3, #12]
 801e988:	2200      	movs	r2, #0
 801e98a:	749a      	strb	r2, [r3, #18]
 801e98c:	2200      	movs	r2, #0
 801e98e:	74da      	strb	r2, [r3, #19]
  return seg;
 801e990:	693b      	ldr	r3, [r7, #16]
}
 801e992:	4618      	mov	r0, r3
 801e994:	371c      	adds	r7, #28
 801e996:	46bd      	mov	sp, r7
 801e998:	bd90      	pop	{r4, r7, pc}
 801e99a:	bf00      	nop
 801e99c:	080286a0 	.word	0x080286a0
 801e9a0:	080286d4 	.word	0x080286d4
 801e9a4:	080286f4 	.word	0x080286f4
 801e9a8:	0802871c 	.word	0x0802871c
 801e9ac:	08028740 	.word	0x08028740

0801e9b0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801e9b0:	b590      	push	{r4, r7, lr}
 801e9b2:	b08b      	sub	sp, #44	; 0x2c
 801e9b4:	af02      	add	r7, sp, #8
 801e9b6:	6078      	str	r0, [r7, #4]
 801e9b8:	460b      	mov	r3, r1
 801e9ba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801e9bc:	2300      	movs	r3, #0
 801e9be:	61fb      	str	r3, [r7, #28]
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d106      	bne.n	801e9dc <tcp_split_unsent_seg+0x2c>
 801e9ce:	4b95      	ldr	r3, [pc, #596]	; (801ec24 <tcp_split_unsent_seg+0x274>)
 801e9d0:	f240 324b 	movw	r2, #843	; 0x34b
 801e9d4:	4994      	ldr	r1, [pc, #592]	; (801ec28 <tcp_split_unsent_seg+0x278>)
 801e9d6:	4895      	ldr	r0, [pc, #596]	; (801ec2c <tcp_split_unsent_seg+0x27c>)
 801e9d8:	f007 fac4 	bl	8025f64 <iprintf>

  useg = pcb->unsent;
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e9e0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801e9e2:	697b      	ldr	r3, [r7, #20]
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d102      	bne.n	801e9ee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801e9e8:	f04f 33ff 	mov.w	r3, #4294967295
 801e9ec:	e116      	b.n	801ec1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801e9ee:	887b      	ldrh	r3, [r7, #2]
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	d109      	bne.n	801ea08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e9f4:	4b8b      	ldr	r3, [pc, #556]	; (801ec24 <tcp_split_unsent_seg+0x274>)
 801e9f6:	f240 3253 	movw	r2, #851	; 0x353
 801e9fa:	498d      	ldr	r1, [pc, #564]	; (801ec30 <tcp_split_unsent_seg+0x280>)
 801e9fc:	488b      	ldr	r0, [pc, #556]	; (801ec2c <tcp_split_unsent_seg+0x27c>)
 801e9fe:	f007 fab1 	bl	8025f64 <iprintf>
    return ERR_VAL;
 801ea02:	f06f 0305 	mvn.w	r3, #5
 801ea06:	e109      	b.n	801ec1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801ea08:	697b      	ldr	r3, [r7, #20]
 801ea0a:	891b      	ldrh	r3, [r3, #8]
 801ea0c:	887a      	ldrh	r2, [r7, #2]
 801ea0e:	429a      	cmp	r2, r3
 801ea10:	d301      	bcc.n	801ea16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801ea12:	2300      	movs	r3, #0
 801ea14:	e102      	b.n	801ec1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ea1a:	887a      	ldrh	r2, [r7, #2]
 801ea1c:	429a      	cmp	r2, r3
 801ea1e:	d906      	bls.n	801ea2e <tcp_split_unsent_seg+0x7e>
 801ea20:	4b80      	ldr	r3, [pc, #512]	; (801ec24 <tcp_split_unsent_seg+0x274>)
 801ea22:	f240 325b 	movw	r2, #859	; 0x35b
 801ea26:	4983      	ldr	r1, [pc, #524]	; (801ec34 <tcp_split_unsent_seg+0x284>)
 801ea28:	4880      	ldr	r0, [pc, #512]	; (801ec2c <tcp_split_unsent_seg+0x27c>)
 801ea2a:	f007 fa9b 	bl	8025f64 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801ea2e:	697b      	ldr	r3, [r7, #20]
 801ea30:	891b      	ldrh	r3, [r3, #8]
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d106      	bne.n	801ea44 <tcp_split_unsent_seg+0x94>
 801ea36:	4b7b      	ldr	r3, [pc, #492]	; (801ec24 <tcp_split_unsent_seg+0x274>)
 801ea38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801ea3c:	497e      	ldr	r1, [pc, #504]	; (801ec38 <tcp_split_unsent_seg+0x288>)
 801ea3e:	487b      	ldr	r0, [pc, #492]	; (801ec2c <tcp_split_unsent_seg+0x27c>)
 801ea40:	f007 fa90 	bl	8025f64 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801ea44:	697b      	ldr	r3, [r7, #20]
 801ea46:	7a9b      	ldrb	r3, [r3, #10]
 801ea48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ea4a:	7bfb      	ldrb	r3, [r7, #15]
 801ea4c:	009b      	lsls	r3, r3, #2
 801ea4e:	b2db      	uxtb	r3, r3
 801ea50:	f003 0304 	and.w	r3, r3, #4
 801ea54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801ea56:	697b      	ldr	r3, [r7, #20]
 801ea58:	891a      	ldrh	r2, [r3, #8]
 801ea5a:	887b      	ldrh	r3, [r7, #2]
 801ea5c:	1ad3      	subs	r3, r2, r3
 801ea5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ea60:	7bbb      	ldrb	r3, [r7, #14]
 801ea62:	b29a      	uxth	r2, r3
 801ea64:	89bb      	ldrh	r3, [r7, #12]
 801ea66:	4413      	add	r3, r2
 801ea68:	b29b      	uxth	r3, r3
 801ea6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ea6e:	4619      	mov	r1, r3
 801ea70:	2036      	movs	r0, #54	; 0x36
 801ea72:	f7fb faaf 	bl	8019fd4 <pbuf_alloc>
 801ea76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ea78:	693b      	ldr	r3, [r7, #16]
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	f000 80b7 	beq.w	801ebee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	685b      	ldr	r3, [r3, #4]
 801ea84:	891a      	ldrh	r2, [r3, #8]
 801ea86:	697b      	ldr	r3, [r7, #20]
 801ea88:	891b      	ldrh	r3, [r3, #8]
 801ea8a:	1ad3      	subs	r3, r2, r3
 801ea8c:	b29a      	uxth	r2, r3
 801ea8e:	887b      	ldrh	r3, [r7, #2]
 801ea90:	4413      	add	r3, r2
 801ea92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801ea94:	697b      	ldr	r3, [r7, #20]
 801ea96:	6858      	ldr	r0, [r3, #4]
 801ea98:	693b      	ldr	r3, [r7, #16]
 801ea9a:	685a      	ldr	r2, [r3, #4]
 801ea9c:	7bbb      	ldrb	r3, [r7, #14]
 801ea9e:	18d1      	adds	r1, r2, r3
 801eaa0:	897b      	ldrh	r3, [r7, #10]
 801eaa2:	89ba      	ldrh	r2, [r7, #12]
 801eaa4:	f7fb ff80 	bl	801a9a8 <pbuf_copy_partial>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	461a      	mov	r2, r3
 801eaac:	89bb      	ldrh	r3, [r7, #12]
 801eaae:	4293      	cmp	r3, r2
 801eab0:	f040 809f 	bne.w	801ebf2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801eab4:	697b      	ldr	r3, [r7, #20]
 801eab6:	68db      	ldr	r3, [r3, #12]
 801eab8:	899b      	ldrh	r3, [r3, #12]
 801eaba:	b29b      	uxth	r3, r3
 801eabc:	4618      	mov	r0, r3
 801eabe:	f7fa f8b7 	bl	8018c30 <lwip_htons>
 801eac2:	4603      	mov	r3, r0
 801eac4:	b2db      	uxtb	r3, r3
 801eac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801eaca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801eacc:	2300      	movs	r3, #0
 801eace:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801ead0:	7efb      	ldrb	r3, [r7, #27]
 801ead2:	f003 0308 	and.w	r3, r3, #8
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	d007      	beq.n	801eaea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801eada:	7efb      	ldrb	r3, [r7, #27]
 801eadc:	f023 0308 	bic.w	r3, r3, #8
 801eae0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801eae2:	7ebb      	ldrb	r3, [r7, #26]
 801eae4:	f043 0308 	orr.w	r3, r3, #8
 801eae8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801eaea:	7efb      	ldrb	r3, [r7, #27]
 801eaec:	f003 0301 	and.w	r3, r3, #1
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d007      	beq.n	801eb04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801eaf4:	7efb      	ldrb	r3, [r7, #27]
 801eaf6:	f023 0301 	bic.w	r3, r3, #1
 801eafa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801eafc:	7ebb      	ldrb	r3, [r7, #26]
 801eafe:	f043 0301 	orr.w	r3, r3, #1
 801eb02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801eb04:	697b      	ldr	r3, [r7, #20]
 801eb06:	68db      	ldr	r3, [r3, #12]
 801eb08:	685b      	ldr	r3, [r3, #4]
 801eb0a:	4618      	mov	r0, r3
 801eb0c:	f7fa f8a5 	bl	8018c5a <lwip_htonl>
 801eb10:	4602      	mov	r2, r0
 801eb12:	887b      	ldrh	r3, [r7, #2]
 801eb14:	18d1      	adds	r1, r2, r3
 801eb16:	7eba      	ldrb	r2, [r7, #26]
 801eb18:	7bfb      	ldrb	r3, [r7, #15]
 801eb1a:	9300      	str	r3, [sp, #0]
 801eb1c:	460b      	mov	r3, r1
 801eb1e:	6939      	ldr	r1, [r7, #16]
 801eb20:	6878      	ldr	r0, [r7, #4]
 801eb22:	f7ff fea7 	bl	801e874 <tcp_create_segment>
 801eb26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801eb28:	69fb      	ldr	r3, [r7, #28]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d063      	beq.n	801ebf6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801eb2e:	697b      	ldr	r3, [r7, #20]
 801eb30:	685b      	ldr	r3, [r3, #4]
 801eb32:	4618      	mov	r0, r3
 801eb34:	f7fb fdc0 	bl	801a6b8 <pbuf_clen>
 801eb38:	4603      	mov	r3, r0
 801eb3a:	461a      	mov	r2, r3
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801eb42:	1a9b      	subs	r3, r3, r2
 801eb44:	b29a      	uxth	r2, r3
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801eb4c:	697b      	ldr	r3, [r7, #20]
 801eb4e:	6858      	ldr	r0, [r3, #4]
 801eb50:	697b      	ldr	r3, [r7, #20]
 801eb52:	685b      	ldr	r3, [r3, #4]
 801eb54:	891a      	ldrh	r2, [r3, #8]
 801eb56:	89bb      	ldrh	r3, [r7, #12]
 801eb58:	1ad3      	subs	r3, r2, r3
 801eb5a:	b29b      	uxth	r3, r3
 801eb5c:	4619      	mov	r1, r3
 801eb5e:	f7fb fb97 	bl	801a290 <pbuf_realloc>
  useg->len -= remainder;
 801eb62:	697b      	ldr	r3, [r7, #20]
 801eb64:	891a      	ldrh	r2, [r3, #8]
 801eb66:	89bb      	ldrh	r3, [r7, #12]
 801eb68:	1ad3      	subs	r3, r2, r3
 801eb6a:	b29a      	uxth	r2, r3
 801eb6c:	697b      	ldr	r3, [r7, #20]
 801eb6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801eb70:	697b      	ldr	r3, [r7, #20]
 801eb72:	68db      	ldr	r3, [r3, #12]
 801eb74:	899b      	ldrh	r3, [r3, #12]
 801eb76:	b29c      	uxth	r4, r3
 801eb78:	7efb      	ldrb	r3, [r7, #27]
 801eb7a:	b29b      	uxth	r3, r3
 801eb7c:	4618      	mov	r0, r3
 801eb7e:	f7fa f857 	bl	8018c30 <lwip_htons>
 801eb82:	4603      	mov	r3, r0
 801eb84:	461a      	mov	r2, r3
 801eb86:	697b      	ldr	r3, [r7, #20]
 801eb88:	68db      	ldr	r3, [r3, #12]
 801eb8a:	4322      	orrs	r2, r4
 801eb8c:	b292      	uxth	r2, r2
 801eb8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801eb90:	697b      	ldr	r3, [r7, #20]
 801eb92:	685b      	ldr	r3, [r3, #4]
 801eb94:	4618      	mov	r0, r3
 801eb96:	f7fb fd8f 	bl	801a6b8 <pbuf_clen>
 801eb9a:	4603      	mov	r3, r0
 801eb9c:	461a      	mov	r2, r3
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801eba4:	4413      	add	r3, r2
 801eba6:	b29a      	uxth	r2, r3
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ebae:	69fb      	ldr	r3, [r7, #28]
 801ebb0:	685b      	ldr	r3, [r3, #4]
 801ebb2:	4618      	mov	r0, r3
 801ebb4:	f7fb fd80 	bl	801a6b8 <pbuf_clen>
 801ebb8:	4603      	mov	r3, r0
 801ebba:	461a      	mov	r2, r3
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ebc2:	4413      	add	r3, r2
 801ebc4:	b29a      	uxth	r2, r3
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801ebcc:	697b      	ldr	r3, [r7, #20]
 801ebce:	681a      	ldr	r2, [r3, #0]
 801ebd0:	69fb      	ldr	r3, [r7, #28]
 801ebd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801ebd4:	697b      	ldr	r3, [r7, #20]
 801ebd6:	69fa      	ldr	r2, [r7, #28]
 801ebd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801ebda:	69fb      	ldr	r3, [r7, #28]
 801ebdc:	681b      	ldr	r3, [r3, #0]
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	d103      	bne.n	801ebea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	2200      	movs	r2, #0
 801ebe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801ebea:	2300      	movs	r3, #0
 801ebec:	e016      	b.n	801ec1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801ebee:	bf00      	nop
 801ebf0:	e002      	b.n	801ebf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801ebf2:	bf00      	nop
 801ebf4:	e000      	b.n	801ebf8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801ebf6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801ebf8:	69fb      	ldr	r3, [r7, #28]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d006      	beq.n	801ec0c <tcp_split_unsent_seg+0x25c>
 801ebfe:	4b09      	ldr	r3, [pc, #36]	; (801ec24 <tcp_split_unsent_seg+0x274>)
 801ec00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801ec04:	490d      	ldr	r1, [pc, #52]	; (801ec3c <tcp_split_unsent_seg+0x28c>)
 801ec06:	4809      	ldr	r0, [pc, #36]	; (801ec2c <tcp_split_unsent_seg+0x27c>)
 801ec08:	f007 f9ac 	bl	8025f64 <iprintf>
  if (p != NULL) {
 801ec0c:	693b      	ldr	r3, [r7, #16]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d002      	beq.n	801ec18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801ec12:	6938      	ldr	r0, [r7, #16]
 801ec14:	f7fb fcc2 	bl	801a59c <pbuf_free>
  }

  return ERR_MEM;
 801ec18:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ec1c:	4618      	mov	r0, r3
 801ec1e:	3724      	adds	r7, #36	; 0x24
 801ec20:	46bd      	mov	sp, r7
 801ec22:	bd90      	pop	{r4, r7, pc}
 801ec24:	080286a0 	.word	0x080286a0
 801ec28:	08028a34 	.word	0x08028a34
 801ec2c:	080286f4 	.word	0x080286f4
 801ec30:	08028a58 	.word	0x08028a58
 801ec34:	08028a7c 	.word	0x08028a7c
 801ec38:	08028a8c 	.word	0x08028a8c
 801ec3c:	08028a9c 	.word	0x08028a9c

0801ec40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801ec40:	b590      	push	{r4, r7, lr}
 801ec42:	b085      	sub	sp, #20
 801ec44:	af00      	add	r7, sp, #0
 801ec46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d106      	bne.n	801ec5c <tcp_send_fin+0x1c>
 801ec4e:	4b21      	ldr	r3, [pc, #132]	; (801ecd4 <tcp_send_fin+0x94>)
 801ec50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ec54:	4920      	ldr	r1, [pc, #128]	; (801ecd8 <tcp_send_fin+0x98>)
 801ec56:	4821      	ldr	r0, [pc, #132]	; (801ecdc <tcp_send_fin+0x9c>)
 801ec58:	f007 f984 	bl	8025f64 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d02e      	beq.n	801ecc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec68:	60fb      	str	r3, [r7, #12]
 801ec6a:	e002      	b.n	801ec72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801ec6c:	68fb      	ldr	r3, [r7, #12]
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ec72:	68fb      	ldr	r3, [r7, #12]
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d1f8      	bne.n	801ec6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	68db      	ldr	r3, [r3, #12]
 801ec7e:	899b      	ldrh	r3, [r3, #12]
 801ec80:	b29b      	uxth	r3, r3
 801ec82:	4618      	mov	r0, r3
 801ec84:	f7f9 ffd4 	bl	8018c30 <lwip_htons>
 801ec88:	4603      	mov	r3, r0
 801ec8a:	b2db      	uxtb	r3, r3
 801ec8c:	f003 0307 	and.w	r3, r3, #7
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d116      	bne.n	801ecc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ec94:	68fb      	ldr	r3, [r7, #12]
 801ec96:	68db      	ldr	r3, [r3, #12]
 801ec98:	899b      	ldrh	r3, [r3, #12]
 801ec9a:	b29c      	uxth	r4, r3
 801ec9c:	2001      	movs	r0, #1
 801ec9e:	f7f9 ffc7 	bl	8018c30 <lwip_htons>
 801eca2:	4603      	mov	r3, r0
 801eca4:	461a      	mov	r2, r3
 801eca6:	68fb      	ldr	r3, [r7, #12]
 801eca8:	68db      	ldr	r3, [r3, #12]
 801ecaa:	4322      	orrs	r2, r4
 801ecac:	b292      	uxth	r2, r2
 801ecae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	8b5b      	ldrh	r3, [r3, #26]
 801ecb4:	f043 0320 	orr.w	r3, r3, #32
 801ecb8:	b29a      	uxth	r2, r3
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	e004      	b.n	801eccc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ecc2:	2101      	movs	r1, #1
 801ecc4:	6878      	ldr	r0, [r7, #4]
 801ecc6:	f000 f80b 	bl	801ece0 <tcp_enqueue_flags>
 801ecca:	4603      	mov	r3, r0
}
 801eccc:	4618      	mov	r0, r3
 801ecce:	3714      	adds	r7, #20
 801ecd0:	46bd      	mov	sp, r7
 801ecd2:	bd90      	pop	{r4, r7, pc}
 801ecd4:	080286a0 	.word	0x080286a0
 801ecd8:	08028aa8 	.word	0x08028aa8
 801ecdc:	080286f4 	.word	0x080286f4

0801ece0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801ece0:	b580      	push	{r7, lr}
 801ece2:	b08a      	sub	sp, #40	; 0x28
 801ece4:	af02      	add	r7, sp, #8
 801ece6:	6078      	str	r0, [r7, #4]
 801ece8:	460b      	mov	r3, r1
 801ecea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801ecec:	2300      	movs	r3, #0
 801ecee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ecf4:	78fb      	ldrb	r3, [r7, #3]
 801ecf6:	f003 0303 	and.w	r3, r3, #3
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d106      	bne.n	801ed0c <tcp_enqueue_flags+0x2c>
 801ecfe:	4b67      	ldr	r3, [pc, #412]	; (801ee9c <tcp_enqueue_flags+0x1bc>)
 801ed00:	f240 4211 	movw	r2, #1041	; 0x411
 801ed04:	4966      	ldr	r1, [pc, #408]	; (801eea0 <tcp_enqueue_flags+0x1c0>)
 801ed06:	4867      	ldr	r0, [pc, #412]	; (801eea4 <tcp_enqueue_flags+0x1c4>)
 801ed08:	f007 f92c 	bl	8025f64 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d106      	bne.n	801ed20 <tcp_enqueue_flags+0x40>
 801ed12:	4b62      	ldr	r3, [pc, #392]	; (801ee9c <tcp_enqueue_flags+0x1bc>)
 801ed14:	f240 4213 	movw	r2, #1043	; 0x413
 801ed18:	4963      	ldr	r1, [pc, #396]	; (801eea8 <tcp_enqueue_flags+0x1c8>)
 801ed1a:	4862      	ldr	r0, [pc, #392]	; (801eea4 <tcp_enqueue_flags+0x1c4>)
 801ed1c:	f007 f922 	bl	8025f64 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801ed20:	78fb      	ldrb	r3, [r7, #3]
 801ed22:	f003 0302 	and.w	r3, r3, #2
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d001      	beq.n	801ed2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801ed2a:	2301      	movs	r3, #1
 801ed2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ed2e:	7ffb      	ldrb	r3, [r7, #31]
 801ed30:	009b      	lsls	r3, r3, #2
 801ed32:	b2db      	uxtb	r3, r3
 801ed34:	f003 0304 	and.w	r3, r3, #4
 801ed38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ed3a:	7dfb      	ldrb	r3, [r7, #23]
 801ed3c:	b29b      	uxth	r3, r3
 801ed3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ed42:	4619      	mov	r1, r3
 801ed44:	2036      	movs	r0, #54	; 0x36
 801ed46:	f7fb f945 	bl	8019fd4 <pbuf_alloc>
 801ed4a:	6138      	str	r0, [r7, #16]
 801ed4c:	693b      	ldr	r3, [r7, #16]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d109      	bne.n	801ed66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	8b5b      	ldrh	r3, [r3, #26]
 801ed56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed5a:	b29a      	uxth	r2, r3
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ed60:	f04f 33ff 	mov.w	r3, #4294967295
 801ed64:	e095      	b.n	801ee92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ed66:	693b      	ldr	r3, [r7, #16]
 801ed68:	895a      	ldrh	r2, [r3, #10]
 801ed6a:	7dfb      	ldrb	r3, [r7, #23]
 801ed6c:	b29b      	uxth	r3, r3
 801ed6e:	429a      	cmp	r2, r3
 801ed70:	d206      	bcs.n	801ed80 <tcp_enqueue_flags+0xa0>
 801ed72:	4b4a      	ldr	r3, [pc, #296]	; (801ee9c <tcp_enqueue_flags+0x1bc>)
 801ed74:	f240 4239 	movw	r2, #1081	; 0x439
 801ed78:	494c      	ldr	r1, [pc, #304]	; (801eeac <tcp_enqueue_flags+0x1cc>)
 801ed7a:	484a      	ldr	r0, [pc, #296]	; (801eea4 <tcp_enqueue_flags+0x1c4>)
 801ed7c:	f007 f8f2 	bl	8025f64 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ed84:	78fa      	ldrb	r2, [r7, #3]
 801ed86:	7ffb      	ldrb	r3, [r7, #31]
 801ed88:	9300      	str	r3, [sp, #0]
 801ed8a:	460b      	mov	r3, r1
 801ed8c:	6939      	ldr	r1, [r7, #16]
 801ed8e:	6878      	ldr	r0, [r7, #4]
 801ed90:	f7ff fd70 	bl	801e874 <tcp_create_segment>
 801ed94:	60f8      	str	r0, [r7, #12]
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	d109      	bne.n	801edb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	8b5b      	ldrh	r3, [r3, #26]
 801eda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eda4:	b29a      	uxth	r2, r3
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801edaa:	f04f 33ff 	mov.w	r3, #4294967295
 801edae:	e070      	b.n	801ee92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	68db      	ldr	r3, [r3, #12]
 801edb4:	f003 0303 	and.w	r3, r3, #3
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d006      	beq.n	801edca <tcp_enqueue_flags+0xea>
 801edbc:	4b37      	ldr	r3, [pc, #220]	; (801ee9c <tcp_enqueue_flags+0x1bc>)
 801edbe:	f240 4242 	movw	r2, #1090	; 0x442
 801edc2:	493b      	ldr	r1, [pc, #236]	; (801eeb0 <tcp_enqueue_flags+0x1d0>)
 801edc4:	4837      	ldr	r0, [pc, #220]	; (801eea4 <tcp_enqueue_flags+0x1c4>)
 801edc6:	f007 f8cd 	bl	8025f64 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	891b      	ldrh	r3, [r3, #8]
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d006      	beq.n	801ede0 <tcp_enqueue_flags+0x100>
 801edd2:	4b32      	ldr	r3, [pc, #200]	; (801ee9c <tcp_enqueue_flags+0x1bc>)
 801edd4:	f240 4243 	movw	r2, #1091	; 0x443
 801edd8:	4936      	ldr	r1, [pc, #216]	; (801eeb4 <tcp_enqueue_flags+0x1d4>)
 801edda:	4832      	ldr	r0, [pc, #200]	; (801eea4 <tcp_enqueue_flags+0x1c4>)
 801eddc:	f007 f8c2 	bl	8025f64 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801ede0:	687b      	ldr	r3, [r7, #4]
 801ede2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ede4:	2b00      	cmp	r3, #0
 801ede6:	d103      	bne.n	801edf0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	68fa      	ldr	r2, [r7, #12]
 801edec:	66da      	str	r2, [r3, #108]	; 0x6c
 801edee:	e00d      	b.n	801ee0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801edf4:	61bb      	str	r3, [r7, #24]
 801edf6:	e002      	b.n	801edfe <tcp_enqueue_flags+0x11e>
 801edf8:	69bb      	ldr	r3, [r7, #24]
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	61bb      	str	r3, [r7, #24]
 801edfe:	69bb      	ldr	r3, [r7, #24]
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d1f8      	bne.n	801edf8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801ee06:	69bb      	ldr	r3, [r7, #24]
 801ee08:	68fa      	ldr	r2, [r7, #12]
 801ee0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	2200      	movs	r2, #0
 801ee10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ee14:	78fb      	ldrb	r3, [r7, #3]
 801ee16:	f003 0302 	and.w	r3, r3, #2
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	d104      	bne.n	801ee28 <tcp_enqueue_flags+0x148>
 801ee1e:	78fb      	ldrb	r3, [r7, #3]
 801ee20:	f003 0301 	and.w	r3, r3, #1
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d004      	beq.n	801ee32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ee2c:	1c5a      	adds	r2, r3, #1
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801ee32:	78fb      	ldrb	r3, [r7, #3]
 801ee34:	f003 0301 	and.w	r3, r3, #1
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d006      	beq.n	801ee4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	8b5b      	ldrh	r3, [r3, #26]
 801ee40:	f043 0320 	orr.w	r3, r3, #32
 801ee44:	b29a      	uxth	r2, r3
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	685b      	ldr	r3, [r3, #4]
 801ee4e:	4618      	mov	r0, r3
 801ee50:	f7fb fc32 	bl	801a6b8 <pbuf_clen>
 801ee54:	4603      	mov	r3, r0
 801ee56:	461a      	mov	r2, r3
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ee5e:	4413      	add	r3, r2
 801ee60:	b29a      	uxth	r2, r3
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d00e      	beq.n	801ee90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d10a      	bne.n	801ee90 <tcp_enqueue_flags+0x1b0>
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d106      	bne.n	801ee90 <tcp_enqueue_flags+0x1b0>
 801ee82:	4b06      	ldr	r3, [pc, #24]	; (801ee9c <tcp_enqueue_flags+0x1bc>)
 801ee84:	f240 4265 	movw	r2, #1125	; 0x465
 801ee88:	490b      	ldr	r1, [pc, #44]	; (801eeb8 <tcp_enqueue_flags+0x1d8>)
 801ee8a:	4806      	ldr	r0, [pc, #24]	; (801eea4 <tcp_enqueue_flags+0x1c4>)
 801ee8c:	f007 f86a 	bl	8025f64 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ee90:	2300      	movs	r3, #0
}
 801ee92:	4618      	mov	r0, r3
 801ee94:	3720      	adds	r7, #32
 801ee96:	46bd      	mov	sp, r7
 801ee98:	bd80      	pop	{r7, pc}
 801ee9a:	bf00      	nop
 801ee9c:	080286a0 	.word	0x080286a0
 801eea0:	08028ac4 	.word	0x08028ac4
 801eea4:	080286f4 	.word	0x080286f4
 801eea8:	08028b1c 	.word	0x08028b1c
 801eeac:	08028b3c 	.word	0x08028b3c
 801eeb0:	08028b78 	.word	0x08028b78
 801eeb4:	08028b90 	.word	0x08028b90
 801eeb8:	08028bbc 	.word	0x08028bbc

0801eebc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801eebc:	b5b0      	push	{r4, r5, r7, lr}
 801eebe:	b08a      	sub	sp, #40	; 0x28
 801eec0:	af00      	add	r7, sp, #0
 801eec2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d106      	bne.n	801eed8 <tcp_output+0x1c>
 801eeca:	4b8a      	ldr	r3, [pc, #552]	; (801f0f4 <tcp_output+0x238>)
 801eecc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801eed0:	4989      	ldr	r1, [pc, #548]	; (801f0f8 <tcp_output+0x23c>)
 801eed2:	488a      	ldr	r0, [pc, #552]	; (801f0fc <tcp_output+0x240>)
 801eed4:	f007 f846 	bl	8025f64 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	7d1b      	ldrb	r3, [r3, #20]
 801eedc:	2b01      	cmp	r3, #1
 801eede:	d106      	bne.n	801eeee <tcp_output+0x32>
 801eee0:	4b84      	ldr	r3, [pc, #528]	; (801f0f4 <tcp_output+0x238>)
 801eee2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801eee6:	4986      	ldr	r1, [pc, #536]	; (801f100 <tcp_output+0x244>)
 801eee8:	4884      	ldr	r0, [pc, #528]	; (801f0fc <tcp_output+0x240>)
 801eeea:	f007 f83b 	bl	8025f64 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801eeee:	4b85      	ldr	r3, [pc, #532]	; (801f104 <tcp_output+0x248>)
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	687a      	ldr	r2, [r7, #4]
 801eef4:	429a      	cmp	r2, r3
 801eef6:	d101      	bne.n	801eefc <tcp_output+0x40>
    return ERR_OK;
 801eef8:	2300      	movs	r3, #0
 801eefa:	e1ce      	b.n	801f29a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ef08:	4293      	cmp	r3, r2
 801ef0a:	bf28      	it	cs
 801ef0c:	4613      	movcs	r3, r2
 801ef0e:	b29b      	uxth	r3, r3
 801ef10:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ef16:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d10b      	bne.n	801ef36 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	8b5b      	ldrh	r3, [r3, #26]
 801ef22:	f003 0302 	and.w	r3, r3, #2
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	f000 81aa 	beq.w	801f280 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801ef2c:	6878      	ldr	r0, [r7, #4]
 801ef2e:	f000 fdcb 	bl	801fac8 <tcp_send_empty_ack>
 801ef32:	4603      	mov	r3, r0
 801ef34:	e1b1      	b.n	801f29a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ef36:	6879      	ldr	r1, [r7, #4]
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	3304      	adds	r3, #4
 801ef3c:	461a      	mov	r2, r3
 801ef3e:	6878      	ldr	r0, [r7, #4]
 801ef40:	f7ff fc7c 	bl	801e83c <tcp_route>
 801ef44:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801ef46:	697b      	ldr	r3, [r7, #20]
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d102      	bne.n	801ef52 <tcp_output+0x96>
    return ERR_RTE;
 801ef4c:	f06f 0303 	mvn.w	r3, #3
 801ef50:	e1a3      	b.n	801f29a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d003      	beq.n	801ef60 <tcp_output+0xa4>
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d111      	bne.n	801ef84 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ef60:	697b      	ldr	r3, [r7, #20]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d002      	beq.n	801ef6c <tcp_output+0xb0>
 801ef66:	697b      	ldr	r3, [r7, #20]
 801ef68:	3304      	adds	r3, #4
 801ef6a:	e000      	b.n	801ef6e <tcp_output+0xb2>
 801ef6c:	2300      	movs	r3, #0
 801ef6e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ef70:	693b      	ldr	r3, [r7, #16]
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	d102      	bne.n	801ef7c <tcp_output+0xc0>
      return ERR_RTE;
 801ef76:	f06f 0303 	mvn.w	r3, #3
 801ef7a:	e18e      	b.n	801f29a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ef7c:	693b      	ldr	r3, [r7, #16]
 801ef7e:	681a      	ldr	r2, [r3, #0]
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef86:	68db      	ldr	r3, [r3, #12]
 801ef88:	685b      	ldr	r3, [r3, #4]
 801ef8a:	4618      	mov	r0, r3
 801ef8c:	f7f9 fe65 	bl	8018c5a <lwip_htonl>
 801ef90:	4602      	mov	r2, r0
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef96:	1ad3      	subs	r3, r2, r3
 801ef98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ef9a:	8912      	ldrh	r2, [r2, #8]
 801ef9c:	4413      	add	r3, r2
 801ef9e:	69ba      	ldr	r2, [r7, #24]
 801efa0:	429a      	cmp	r2, r3
 801efa2:	d227      	bcs.n	801eff4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801efaa:	461a      	mov	r2, r3
 801efac:	69bb      	ldr	r3, [r7, #24]
 801efae:	4293      	cmp	r3, r2
 801efb0:	d114      	bne.n	801efdc <tcp_output+0x120>
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	d110      	bne.n	801efdc <tcp_output+0x120>
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d10b      	bne.n	801efdc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	2200      	movs	r2, #0
 801efc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	2201      	movs	r2, #1
 801efd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	2200      	movs	r2, #0
 801efd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	8b5b      	ldrh	r3, [r3, #26]
 801efe0:	f003 0302 	and.w	r3, r3, #2
 801efe4:	2b00      	cmp	r3, #0
 801efe6:	f000 814d 	beq.w	801f284 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801efea:	6878      	ldr	r0, [r7, #4]
 801efec:	f000 fd6c 	bl	801fac8 <tcp_send_empty_ack>
 801eff0:	4603      	mov	r3, r0
 801eff2:	e152      	b.n	801f29a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	2200      	movs	r2, #0
 801eff8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f000:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801f002:	6a3b      	ldr	r3, [r7, #32]
 801f004:	2b00      	cmp	r3, #0
 801f006:	f000 811c 	beq.w	801f242 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801f00a:	e002      	b.n	801f012 <tcp_output+0x156>
 801f00c:	6a3b      	ldr	r3, [r7, #32]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	623b      	str	r3, [r7, #32]
 801f012:	6a3b      	ldr	r3, [r7, #32]
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d1f8      	bne.n	801f00c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801f01a:	e112      	b.n	801f242 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f01e:	68db      	ldr	r3, [r3, #12]
 801f020:	899b      	ldrh	r3, [r3, #12]
 801f022:	b29b      	uxth	r3, r3
 801f024:	4618      	mov	r0, r3
 801f026:	f7f9 fe03 	bl	8018c30 <lwip_htons>
 801f02a:	4603      	mov	r3, r0
 801f02c:	b2db      	uxtb	r3, r3
 801f02e:	f003 0304 	and.w	r3, r3, #4
 801f032:	2b00      	cmp	r3, #0
 801f034:	d006      	beq.n	801f044 <tcp_output+0x188>
 801f036:	4b2f      	ldr	r3, [pc, #188]	; (801f0f4 <tcp_output+0x238>)
 801f038:	f240 5236 	movw	r2, #1334	; 0x536
 801f03c:	4932      	ldr	r1, [pc, #200]	; (801f108 <tcp_output+0x24c>)
 801f03e:	482f      	ldr	r0, [pc, #188]	; (801f0fc <tcp_output+0x240>)
 801f040:	f006 ff90 	bl	8025f64 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d01f      	beq.n	801f08c <tcp_output+0x1d0>
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	8b5b      	ldrh	r3, [r3, #26]
 801f050:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801f054:	2b00      	cmp	r3, #0
 801f056:	d119      	bne.n	801f08c <tcp_output+0x1d0>
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d00b      	beq.n	801f078 <tcp_output+0x1bc>
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	2b00      	cmp	r3, #0
 801f068:	d110      	bne.n	801f08c <tcp_output+0x1d0>
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f06e:	891a      	ldrh	r2, [r3, #8]
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f074:	429a      	cmp	r2, r3
 801f076:	d209      	bcs.n	801f08c <tcp_output+0x1d0>
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f07e:	2b00      	cmp	r3, #0
 801f080:	d004      	beq.n	801f08c <tcp_output+0x1d0>
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f088:	2b08      	cmp	r3, #8
 801f08a:	d901      	bls.n	801f090 <tcp_output+0x1d4>
 801f08c:	2301      	movs	r3, #1
 801f08e:	e000      	b.n	801f092 <tcp_output+0x1d6>
 801f090:	2300      	movs	r3, #0
 801f092:	2b00      	cmp	r3, #0
 801f094:	d106      	bne.n	801f0a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	8b5b      	ldrh	r3, [r3, #26]
 801f09a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	f000 80e4 	beq.w	801f26c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	7d1b      	ldrb	r3, [r3, #20]
 801f0a8:	2b02      	cmp	r3, #2
 801f0aa:	d00d      	beq.n	801f0c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ae:	68db      	ldr	r3, [r3, #12]
 801f0b0:	899b      	ldrh	r3, [r3, #12]
 801f0b2:	b29c      	uxth	r4, r3
 801f0b4:	2010      	movs	r0, #16
 801f0b6:	f7f9 fdbb 	bl	8018c30 <lwip_htons>
 801f0ba:	4603      	mov	r3, r0
 801f0bc:	461a      	mov	r2, r3
 801f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0c0:	68db      	ldr	r3, [r3, #12]
 801f0c2:	4322      	orrs	r2, r4
 801f0c4:	b292      	uxth	r2, r2
 801f0c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801f0c8:	697a      	ldr	r2, [r7, #20]
 801f0ca:	6879      	ldr	r1, [r7, #4]
 801f0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f0ce:	f000 f909 	bl	801f2e4 <tcp_output_segment>
 801f0d2:	4603      	mov	r3, r0
 801f0d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801f0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d016      	beq.n	801f10c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	8b5b      	ldrh	r3, [r3, #26]
 801f0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f0e6:	b29a      	uxth	r2, r3
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	835a      	strh	r2, [r3, #26]
      return err;
 801f0ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f0f0:	e0d3      	b.n	801f29a <tcp_output+0x3de>
 801f0f2:	bf00      	nop
 801f0f4:	080286a0 	.word	0x080286a0
 801f0f8:	08028be4 	.word	0x08028be4
 801f0fc:	080286f4 	.word	0x080286f4
 801f100:	08028bfc 	.word	0x08028bfc
 801f104:	2400d048 	.word	0x2400d048
 801f108:	08028c24 	.word	0x08028c24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f10e:	681a      	ldr	r2, [r3, #0]
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	7d1b      	ldrb	r3, [r3, #20]
 801f118:	2b02      	cmp	r3, #2
 801f11a:	d006      	beq.n	801f12a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	8b5b      	ldrh	r3, [r3, #26]
 801f120:	f023 0303 	bic.w	r3, r3, #3
 801f124:	b29a      	uxth	r2, r3
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f12c:	68db      	ldr	r3, [r3, #12]
 801f12e:	685b      	ldr	r3, [r3, #4]
 801f130:	4618      	mov	r0, r3
 801f132:	f7f9 fd92 	bl	8018c5a <lwip_htonl>
 801f136:	4604      	mov	r4, r0
 801f138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f13a:	891b      	ldrh	r3, [r3, #8]
 801f13c:	461d      	mov	r5, r3
 801f13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f140:	68db      	ldr	r3, [r3, #12]
 801f142:	899b      	ldrh	r3, [r3, #12]
 801f144:	b29b      	uxth	r3, r3
 801f146:	4618      	mov	r0, r3
 801f148:	f7f9 fd72 	bl	8018c30 <lwip_htons>
 801f14c:	4603      	mov	r3, r0
 801f14e:	b2db      	uxtb	r3, r3
 801f150:	f003 0303 	and.w	r3, r3, #3
 801f154:	2b00      	cmp	r3, #0
 801f156:	d001      	beq.n	801f15c <tcp_output+0x2a0>
 801f158:	2301      	movs	r3, #1
 801f15a:	e000      	b.n	801f15e <tcp_output+0x2a2>
 801f15c:	2300      	movs	r3, #0
 801f15e:	442b      	add	r3, r5
 801f160:	4423      	add	r3, r4
 801f162:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f168:	68bb      	ldr	r3, [r7, #8]
 801f16a:	1ad3      	subs	r3, r2, r3
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	da02      	bge.n	801f176 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	68ba      	ldr	r2, [r7, #8]
 801f174:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f178:	891b      	ldrh	r3, [r3, #8]
 801f17a:	461c      	mov	r4, r3
 801f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f17e:	68db      	ldr	r3, [r3, #12]
 801f180:	899b      	ldrh	r3, [r3, #12]
 801f182:	b29b      	uxth	r3, r3
 801f184:	4618      	mov	r0, r3
 801f186:	f7f9 fd53 	bl	8018c30 <lwip_htons>
 801f18a:	4603      	mov	r3, r0
 801f18c:	b2db      	uxtb	r3, r3
 801f18e:	f003 0303 	and.w	r3, r3, #3
 801f192:	2b00      	cmp	r3, #0
 801f194:	d001      	beq.n	801f19a <tcp_output+0x2de>
 801f196:	2301      	movs	r3, #1
 801f198:	e000      	b.n	801f19c <tcp_output+0x2e0>
 801f19a:	2300      	movs	r3, #0
 801f19c:	4423      	add	r3, r4
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d049      	beq.n	801f236 <tcp_output+0x37a>
      seg->next = NULL;
 801f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1a4:	2200      	movs	r2, #0
 801f1a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d105      	bne.n	801f1bc <tcp_output+0x300>
        pcb->unacked = seg;
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f1b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1b8:	623b      	str	r3, [r7, #32]
 801f1ba:	e03f      	b.n	801f23c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1be:	68db      	ldr	r3, [r3, #12]
 801f1c0:	685b      	ldr	r3, [r3, #4]
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	f7f9 fd49 	bl	8018c5a <lwip_htonl>
 801f1c8:	4604      	mov	r4, r0
 801f1ca:	6a3b      	ldr	r3, [r7, #32]
 801f1cc:	68db      	ldr	r3, [r3, #12]
 801f1ce:	685b      	ldr	r3, [r3, #4]
 801f1d0:	4618      	mov	r0, r3
 801f1d2:	f7f9 fd42 	bl	8018c5a <lwip_htonl>
 801f1d6:	4603      	mov	r3, r0
 801f1d8:	1ae3      	subs	r3, r4, r3
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	da24      	bge.n	801f228 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	3370      	adds	r3, #112	; 0x70
 801f1e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f1e4:	e002      	b.n	801f1ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801f1e6:	69fb      	ldr	r3, [r7, #28]
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f1ec:	69fb      	ldr	r3, [r7, #28]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	d011      	beq.n	801f218 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f1f4:	69fb      	ldr	r3, [r7, #28]
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	68db      	ldr	r3, [r3, #12]
 801f1fa:	685b      	ldr	r3, [r3, #4]
 801f1fc:	4618      	mov	r0, r3
 801f1fe:	f7f9 fd2c 	bl	8018c5a <lwip_htonl>
 801f202:	4604      	mov	r4, r0
 801f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f206:	68db      	ldr	r3, [r3, #12]
 801f208:	685b      	ldr	r3, [r3, #4]
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7f9 fd25 	bl	8018c5a <lwip_htonl>
 801f210:	4603      	mov	r3, r0
 801f212:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801f214:	2b00      	cmp	r3, #0
 801f216:	dbe6      	blt.n	801f1e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801f218:	69fb      	ldr	r3, [r7, #28]
 801f21a:	681a      	ldr	r2, [r3, #0]
 801f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f21e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801f220:	69fb      	ldr	r3, [r7, #28]
 801f222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f224:	601a      	str	r2, [r3, #0]
 801f226:	e009      	b.n	801f23c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801f228:	6a3b      	ldr	r3, [r7, #32]
 801f22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f22c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801f22e:	6a3b      	ldr	r3, [r7, #32]
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	623b      	str	r3, [r7, #32]
 801f234:	e002      	b.n	801f23c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801f236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f238:	f7fc fc3f 	bl	801baba <tcp_seg_free>
    }
    seg = pcb->unsent;
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f240:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801f242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f244:	2b00      	cmp	r3, #0
 801f246:	d012      	beq.n	801f26e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f24a:	68db      	ldr	r3, [r3, #12]
 801f24c:	685b      	ldr	r3, [r3, #4]
 801f24e:	4618      	mov	r0, r3
 801f250:	f7f9 fd03 	bl	8018c5a <lwip_htonl>
 801f254:	4602      	mov	r2, r0
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f25a:	1ad3      	subs	r3, r2, r3
 801f25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f25e:	8912      	ldrh	r2, [r2, #8]
 801f260:	4413      	add	r3, r2
  while (seg != NULL &&
 801f262:	69ba      	ldr	r2, [r7, #24]
 801f264:	429a      	cmp	r2, r3
 801f266:	f4bf aed9 	bcs.w	801f01c <tcp_output+0x160>
 801f26a:	e000      	b.n	801f26e <tcp_output+0x3b2>
      break;
 801f26c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801f26e:	687b      	ldr	r3, [r7, #4]
 801f270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f272:	2b00      	cmp	r3, #0
 801f274:	d108      	bne.n	801f288 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	2200      	movs	r2, #0
 801f27a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801f27e:	e004      	b.n	801f28a <tcp_output+0x3ce>
    goto output_done;
 801f280:	bf00      	nop
 801f282:	e002      	b.n	801f28a <tcp_output+0x3ce>
    goto output_done;
 801f284:	bf00      	nop
 801f286:	e000      	b.n	801f28a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801f288:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	8b5b      	ldrh	r3, [r3, #26]
 801f28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f292:	b29a      	uxth	r2, r3
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801f298:	2300      	movs	r3, #0
}
 801f29a:	4618      	mov	r0, r3
 801f29c:	3728      	adds	r7, #40	; 0x28
 801f29e:	46bd      	mov	sp, r7
 801f2a0:	bdb0      	pop	{r4, r5, r7, pc}
 801f2a2:	bf00      	nop

0801f2a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801f2a4:	b580      	push	{r7, lr}
 801f2a6:	b082      	sub	sp, #8
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	d106      	bne.n	801f2c0 <tcp_output_segment_busy+0x1c>
 801f2b2:	4b09      	ldr	r3, [pc, #36]	; (801f2d8 <tcp_output_segment_busy+0x34>)
 801f2b4:	f240 529a 	movw	r2, #1434	; 0x59a
 801f2b8:	4908      	ldr	r1, [pc, #32]	; (801f2dc <tcp_output_segment_busy+0x38>)
 801f2ba:	4809      	ldr	r0, [pc, #36]	; (801f2e0 <tcp_output_segment_busy+0x3c>)
 801f2bc:	f006 fe52 	bl	8025f64 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	685b      	ldr	r3, [r3, #4]
 801f2c4:	7b9b      	ldrb	r3, [r3, #14]
 801f2c6:	2b01      	cmp	r3, #1
 801f2c8:	d001      	beq.n	801f2ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801f2ca:	2301      	movs	r3, #1
 801f2cc:	e000      	b.n	801f2d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801f2ce:	2300      	movs	r3, #0
}
 801f2d0:	4618      	mov	r0, r3
 801f2d2:	3708      	adds	r7, #8
 801f2d4:	46bd      	mov	sp, r7
 801f2d6:	bd80      	pop	{r7, pc}
 801f2d8:	080286a0 	.word	0x080286a0
 801f2dc:	08028c3c 	.word	0x08028c3c
 801f2e0:	080286f4 	.word	0x080286f4

0801f2e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801f2e4:	b5b0      	push	{r4, r5, r7, lr}
 801f2e6:	b08c      	sub	sp, #48	; 0x30
 801f2e8:	af04      	add	r7, sp, #16
 801f2ea:	60f8      	str	r0, [r7, #12]
 801f2ec:	60b9      	str	r1, [r7, #8]
 801f2ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801f2f0:	68fb      	ldr	r3, [r7, #12]
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d106      	bne.n	801f304 <tcp_output_segment+0x20>
 801f2f6:	4b63      	ldr	r3, [pc, #396]	; (801f484 <tcp_output_segment+0x1a0>)
 801f2f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801f2fc:	4962      	ldr	r1, [pc, #392]	; (801f488 <tcp_output_segment+0x1a4>)
 801f2fe:	4863      	ldr	r0, [pc, #396]	; (801f48c <tcp_output_segment+0x1a8>)
 801f300:	f006 fe30 	bl	8025f64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801f304:	68bb      	ldr	r3, [r7, #8]
 801f306:	2b00      	cmp	r3, #0
 801f308:	d106      	bne.n	801f318 <tcp_output_segment+0x34>
 801f30a:	4b5e      	ldr	r3, [pc, #376]	; (801f484 <tcp_output_segment+0x1a0>)
 801f30c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801f310:	495f      	ldr	r1, [pc, #380]	; (801f490 <tcp_output_segment+0x1ac>)
 801f312:	485e      	ldr	r0, [pc, #376]	; (801f48c <tcp_output_segment+0x1a8>)
 801f314:	f006 fe26 	bl	8025f64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d106      	bne.n	801f32c <tcp_output_segment+0x48>
 801f31e:	4b59      	ldr	r3, [pc, #356]	; (801f484 <tcp_output_segment+0x1a0>)
 801f320:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801f324:	495b      	ldr	r1, [pc, #364]	; (801f494 <tcp_output_segment+0x1b0>)
 801f326:	4859      	ldr	r0, [pc, #356]	; (801f48c <tcp_output_segment+0x1a8>)
 801f328:	f006 fe1c 	bl	8025f64 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801f32c:	68f8      	ldr	r0, [r7, #12]
 801f32e:	f7ff ffb9 	bl	801f2a4 <tcp_output_segment_busy>
 801f332:	4603      	mov	r3, r0
 801f334:	2b00      	cmp	r3, #0
 801f336:	d001      	beq.n	801f33c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801f338:	2300      	movs	r3, #0
 801f33a:	e09f      	b.n	801f47c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f33c:	68bb      	ldr	r3, [r7, #8]
 801f33e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f340:	68fb      	ldr	r3, [r7, #12]
 801f342:	68dc      	ldr	r4, [r3, #12]
 801f344:	4610      	mov	r0, r2
 801f346:	f7f9 fc88 	bl	8018c5a <lwip_htonl>
 801f34a:	4603      	mov	r3, r0
 801f34c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f34e:	68bb      	ldr	r3, [r7, #8]
 801f350:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	68dc      	ldr	r4, [r3, #12]
 801f356:	4610      	mov	r0, r2
 801f358:	f7f9 fc6a 	bl	8018c30 <lwip_htons>
 801f35c:	4603      	mov	r3, r0
 801f35e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f360:	68bb      	ldr	r3, [r7, #8]
 801f362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f364:	68ba      	ldr	r2, [r7, #8]
 801f366:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f368:	441a      	add	r2, r3
 801f36a:	68bb      	ldr	r3, [r7, #8]
 801f36c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	68db      	ldr	r3, [r3, #12]
 801f372:	3314      	adds	r3, #20
 801f374:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f376:	68fb      	ldr	r3, [r7, #12]
 801f378:	7a9b      	ldrb	r3, [r3, #10]
 801f37a:	f003 0301 	and.w	r3, r3, #1
 801f37e:	2b00      	cmp	r3, #0
 801f380:	d015      	beq.n	801f3ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f382:	68bb      	ldr	r3, [r7, #8]
 801f384:	3304      	adds	r3, #4
 801f386:	461a      	mov	r2, r3
 801f388:	6879      	ldr	r1, [r7, #4]
 801f38a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801f38e:	f7fc fe8b 	bl	801c0a8 <tcp_eff_send_mss_netif>
 801f392:	4603      	mov	r3, r0
 801f394:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f396:	8b7b      	ldrh	r3, [r7, #26]
 801f398:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801f39c:	4618      	mov	r0, r3
 801f39e:	f7f9 fc5c 	bl	8018c5a <lwip_htonl>
 801f3a2:	4602      	mov	r2, r0
 801f3a4:	69fb      	ldr	r3, [r7, #28]
 801f3a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 801f3a8:	69fb      	ldr	r3, [r7, #28]
 801f3aa:	3304      	adds	r3, #4
 801f3ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801f3ae:	68bb      	ldr	r3, [r7, #8]
 801f3b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	da02      	bge.n	801f3be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801f3b8:	68bb      	ldr	r3, [r7, #8]
 801f3ba:	2200      	movs	r2, #0
 801f3bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801f3be:	68bb      	ldr	r3, [r7, #8]
 801f3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d10c      	bne.n	801f3e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801f3c6:	4b34      	ldr	r3, [pc, #208]	; (801f498 <tcp_output_segment+0x1b4>)
 801f3c8:	681a      	ldr	r2, [r3, #0]
 801f3ca:	68bb      	ldr	r3, [r7, #8]
 801f3cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f3ce:	68fb      	ldr	r3, [r7, #12]
 801f3d0:	68db      	ldr	r3, [r3, #12]
 801f3d2:	685b      	ldr	r3, [r3, #4]
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	f7f9 fc40 	bl	8018c5a <lwip_htonl>
 801f3da:	4602      	mov	r2, r0
 801f3dc:	68bb      	ldr	r3, [r7, #8]
 801f3de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	68da      	ldr	r2, [r3, #12]
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	685b      	ldr	r3, [r3, #4]
 801f3e8:	685b      	ldr	r3, [r3, #4]
 801f3ea:	1ad3      	subs	r3, r2, r3
 801f3ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	685b      	ldr	r3, [r3, #4]
 801f3f2:	8959      	ldrh	r1, [r3, #10]
 801f3f4:	68fb      	ldr	r3, [r7, #12]
 801f3f6:	685b      	ldr	r3, [r3, #4]
 801f3f8:	8b3a      	ldrh	r2, [r7, #24]
 801f3fa:	1a8a      	subs	r2, r1, r2
 801f3fc:	b292      	uxth	r2, r2
 801f3fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801f400:	68fb      	ldr	r3, [r7, #12]
 801f402:	685b      	ldr	r3, [r3, #4]
 801f404:	8919      	ldrh	r1, [r3, #8]
 801f406:	68fb      	ldr	r3, [r7, #12]
 801f408:	685b      	ldr	r3, [r3, #4]
 801f40a:	8b3a      	ldrh	r2, [r7, #24]
 801f40c:	1a8a      	subs	r2, r1, r2
 801f40e:	b292      	uxth	r2, r2
 801f410:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	685b      	ldr	r3, [r3, #4]
 801f416:	68fa      	ldr	r2, [r7, #12]
 801f418:	68d2      	ldr	r2, [r2, #12]
 801f41a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801f41c:	68fb      	ldr	r3, [r7, #12]
 801f41e:	68db      	ldr	r3, [r3, #12]
 801f420:	2200      	movs	r2, #0
 801f422:	741a      	strb	r2, [r3, #16]
 801f424:	2200      	movs	r2, #0
 801f426:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f428:	68fb      	ldr	r3, [r7, #12]
 801f42a:	68db      	ldr	r3, [r3, #12]
 801f42c:	f103 0214 	add.w	r2, r3, #20
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	7a9b      	ldrb	r3, [r3, #10]
 801f434:	009b      	lsls	r3, r3, #2
 801f436:	f003 0304 	and.w	r3, r3, #4
 801f43a:	4413      	add	r3, r2
 801f43c:	69fa      	ldr	r2, [r7, #28]
 801f43e:	429a      	cmp	r2, r3
 801f440:	d006      	beq.n	801f450 <tcp_output_segment+0x16c>
 801f442:	4b10      	ldr	r3, [pc, #64]	; (801f484 <tcp_output_segment+0x1a0>)
 801f444:	f240 621c 	movw	r2, #1564	; 0x61c
 801f448:	4914      	ldr	r1, [pc, #80]	; (801f49c <tcp_output_segment+0x1b8>)
 801f44a:	4810      	ldr	r0, [pc, #64]	; (801f48c <tcp_output_segment+0x1a8>)
 801f44c:	f006 fd8a 	bl	8025f64 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f450:	68fb      	ldr	r3, [r7, #12]
 801f452:	6858      	ldr	r0, [r3, #4]
 801f454:	68b9      	ldr	r1, [r7, #8]
 801f456:	68bb      	ldr	r3, [r7, #8]
 801f458:	1d1c      	adds	r4, r3, #4
 801f45a:	68bb      	ldr	r3, [r7, #8]
 801f45c:	7add      	ldrb	r5, [r3, #11]
 801f45e:	68bb      	ldr	r3, [r7, #8]
 801f460:	7a9b      	ldrb	r3, [r3, #10]
 801f462:	687a      	ldr	r2, [r7, #4]
 801f464:	9202      	str	r2, [sp, #8]
 801f466:	2206      	movs	r2, #6
 801f468:	9201      	str	r2, [sp, #4]
 801f46a:	9300      	str	r3, [sp, #0]
 801f46c:	462b      	mov	r3, r5
 801f46e:	4622      	mov	r2, r4
 801f470:	f004 fc44 	bl	8023cfc <ip4_output_if>
 801f474:	4603      	mov	r3, r0
 801f476:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801f478:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f47c:	4618      	mov	r0, r3
 801f47e:	3720      	adds	r7, #32
 801f480:	46bd      	mov	sp, r7
 801f482:	bdb0      	pop	{r4, r5, r7, pc}
 801f484:	080286a0 	.word	0x080286a0
 801f488:	08028c64 	.word	0x08028c64
 801f48c:	080286f4 	.word	0x080286f4
 801f490:	08028c84 	.word	0x08028c84
 801f494:	08028ca4 	.word	0x08028ca4
 801f498:	2400cffc 	.word	0x2400cffc
 801f49c:	08028cc8 	.word	0x08028cc8

0801f4a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801f4a0:	b5b0      	push	{r4, r5, r7, lr}
 801f4a2:	b084      	sub	sp, #16
 801f4a4:	af00      	add	r7, sp, #0
 801f4a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	d106      	bne.n	801f4bc <tcp_rexmit_rto_prepare+0x1c>
 801f4ae:	4b31      	ldr	r3, [pc, #196]	; (801f574 <tcp_rexmit_rto_prepare+0xd4>)
 801f4b0:	f240 6263 	movw	r2, #1635	; 0x663
 801f4b4:	4930      	ldr	r1, [pc, #192]	; (801f578 <tcp_rexmit_rto_prepare+0xd8>)
 801f4b6:	4831      	ldr	r0, [pc, #196]	; (801f57c <tcp_rexmit_rto_prepare+0xdc>)
 801f4b8:	f006 fd54 	bl	8025f64 <iprintf>

  if (pcb->unacked == NULL) {
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	d102      	bne.n	801f4ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801f4c4:	f06f 0305 	mvn.w	r3, #5
 801f4c8:	e050      	b.n	801f56c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f4ce:	60fb      	str	r3, [r7, #12]
 801f4d0:	e00b      	b.n	801f4ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801f4d2:	68f8      	ldr	r0, [r7, #12]
 801f4d4:	f7ff fee6 	bl	801f2a4 <tcp_output_segment_busy>
 801f4d8:	4603      	mov	r3, r0
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d002      	beq.n	801f4e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801f4de:	f06f 0305 	mvn.w	r3, #5
 801f4e2:	e043      	b.n	801f56c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f4e4:	68fb      	ldr	r3, [r7, #12]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	60fb      	str	r3, [r7, #12]
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	d1ef      	bne.n	801f4d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801f4f2:	68f8      	ldr	r0, [r7, #12]
 801f4f4:	f7ff fed6 	bl	801f2a4 <tcp_output_segment_busy>
 801f4f8:	4603      	mov	r3, r0
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d002      	beq.n	801f504 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801f4fe:	f06f 0305 	mvn.w	r3, #5
 801f502:	e033      	b.n	801f56c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	2200      	movs	r2, #0
 801f518:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	8b5b      	ldrh	r3, [r3, #26]
 801f51e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801f522:	b29a      	uxth	r2, r3
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	68db      	ldr	r3, [r3, #12]
 801f52c:	685b      	ldr	r3, [r3, #4]
 801f52e:	4618      	mov	r0, r3
 801f530:	f7f9 fb93 	bl	8018c5a <lwip_htonl>
 801f534:	4604      	mov	r4, r0
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	891b      	ldrh	r3, [r3, #8]
 801f53a:	461d      	mov	r5, r3
 801f53c:	68fb      	ldr	r3, [r7, #12]
 801f53e:	68db      	ldr	r3, [r3, #12]
 801f540:	899b      	ldrh	r3, [r3, #12]
 801f542:	b29b      	uxth	r3, r3
 801f544:	4618      	mov	r0, r3
 801f546:	f7f9 fb73 	bl	8018c30 <lwip_htons>
 801f54a:	4603      	mov	r3, r0
 801f54c:	b2db      	uxtb	r3, r3
 801f54e:	f003 0303 	and.w	r3, r3, #3
 801f552:	2b00      	cmp	r3, #0
 801f554:	d001      	beq.n	801f55a <tcp_rexmit_rto_prepare+0xba>
 801f556:	2301      	movs	r3, #1
 801f558:	e000      	b.n	801f55c <tcp_rexmit_rto_prepare+0xbc>
 801f55a:	2300      	movs	r3, #0
 801f55c:	442b      	add	r3, r5
 801f55e:	18e2      	adds	r2, r4, r3
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	2200      	movs	r2, #0
 801f568:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801f56a:	2300      	movs	r3, #0
}
 801f56c:	4618      	mov	r0, r3
 801f56e:	3710      	adds	r7, #16
 801f570:	46bd      	mov	sp, r7
 801f572:	bdb0      	pop	{r4, r5, r7, pc}
 801f574:	080286a0 	.word	0x080286a0
 801f578:	08028cdc 	.word	0x08028cdc
 801f57c:	080286f4 	.word	0x080286f4

0801f580 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801f580:	b580      	push	{r7, lr}
 801f582:	b082      	sub	sp, #8
 801f584:	af00      	add	r7, sp, #0
 801f586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d106      	bne.n	801f59c <tcp_rexmit_rto_commit+0x1c>
 801f58e:	4b0d      	ldr	r3, [pc, #52]	; (801f5c4 <tcp_rexmit_rto_commit+0x44>)
 801f590:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f594:	490c      	ldr	r1, [pc, #48]	; (801f5c8 <tcp_rexmit_rto_commit+0x48>)
 801f596:	480d      	ldr	r0, [pc, #52]	; (801f5cc <tcp_rexmit_rto_commit+0x4c>)
 801f598:	f006 fce4 	bl	8025f64 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f5a2:	2bff      	cmp	r3, #255	; 0xff
 801f5a4:	d007      	beq.n	801f5b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f5ac:	3301      	adds	r3, #1
 801f5ae:	b2da      	uxtb	r2, r3
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801f5b6:	6878      	ldr	r0, [r7, #4]
 801f5b8:	f7ff fc80 	bl	801eebc <tcp_output>
}
 801f5bc:	bf00      	nop
 801f5be:	3708      	adds	r7, #8
 801f5c0:	46bd      	mov	sp, r7
 801f5c2:	bd80      	pop	{r7, pc}
 801f5c4:	080286a0 	.word	0x080286a0
 801f5c8:	08028d00 	.word	0x08028d00
 801f5cc:	080286f4 	.word	0x080286f4

0801f5d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801f5d0:	b580      	push	{r7, lr}
 801f5d2:	b082      	sub	sp, #8
 801f5d4:	af00      	add	r7, sp, #0
 801f5d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d106      	bne.n	801f5ec <tcp_rexmit_rto+0x1c>
 801f5de:	4b0a      	ldr	r3, [pc, #40]	; (801f608 <tcp_rexmit_rto+0x38>)
 801f5e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f5e4:	4909      	ldr	r1, [pc, #36]	; (801f60c <tcp_rexmit_rto+0x3c>)
 801f5e6:	480a      	ldr	r0, [pc, #40]	; (801f610 <tcp_rexmit_rto+0x40>)
 801f5e8:	f006 fcbc 	bl	8025f64 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f5ec:	6878      	ldr	r0, [r7, #4]
 801f5ee:	f7ff ff57 	bl	801f4a0 <tcp_rexmit_rto_prepare>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d102      	bne.n	801f5fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801f5f8:	6878      	ldr	r0, [r7, #4]
 801f5fa:	f7ff ffc1 	bl	801f580 <tcp_rexmit_rto_commit>
  }
}
 801f5fe:	bf00      	nop
 801f600:	3708      	adds	r7, #8
 801f602:	46bd      	mov	sp, r7
 801f604:	bd80      	pop	{r7, pc}
 801f606:	bf00      	nop
 801f608:	080286a0 	.word	0x080286a0
 801f60c:	08028d24 	.word	0x08028d24
 801f610:	080286f4 	.word	0x080286f4

0801f614 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801f614:	b590      	push	{r4, r7, lr}
 801f616:	b085      	sub	sp, #20
 801f618:	af00      	add	r7, sp, #0
 801f61a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d106      	bne.n	801f630 <tcp_rexmit+0x1c>
 801f622:	4b2f      	ldr	r3, [pc, #188]	; (801f6e0 <tcp_rexmit+0xcc>)
 801f624:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801f628:	492e      	ldr	r1, [pc, #184]	; (801f6e4 <tcp_rexmit+0xd0>)
 801f62a:	482f      	ldr	r0, [pc, #188]	; (801f6e8 <tcp_rexmit+0xd4>)
 801f62c:	f006 fc9a 	bl	8025f64 <iprintf>

  if (pcb->unacked == NULL) {
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f634:	2b00      	cmp	r3, #0
 801f636:	d102      	bne.n	801f63e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801f638:	f06f 0305 	mvn.w	r3, #5
 801f63c:	e04c      	b.n	801f6d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f642:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801f644:	68b8      	ldr	r0, [r7, #8]
 801f646:	f7ff fe2d 	bl	801f2a4 <tcp_output_segment_busy>
 801f64a:	4603      	mov	r3, r0
 801f64c:	2b00      	cmp	r3, #0
 801f64e:	d002      	beq.n	801f656 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801f650:	f06f 0305 	mvn.w	r3, #5
 801f654:	e040      	b.n	801f6d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801f656:	68bb      	ldr	r3, [r7, #8]
 801f658:	681a      	ldr	r2, [r3, #0]
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	336c      	adds	r3, #108	; 0x6c
 801f662:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f664:	e002      	b.n	801f66c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	681b      	ldr	r3, [r3, #0]
 801f66a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	2b00      	cmp	r3, #0
 801f672:	d011      	beq.n	801f698 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f674:	68fb      	ldr	r3, [r7, #12]
 801f676:	681b      	ldr	r3, [r3, #0]
 801f678:	68db      	ldr	r3, [r3, #12]
 801f67a:	685b      	ldr	r3, [r3, #4]
 801f67c:	4618      	mov	r0, r3
 801f67e:	f7f9 faec 	bl	8018c5a <lwip_htonl>
 801f682:	4604      	mov	r4, r0
 801f684:	68bb      	ldr	r3, [r7, #8]
 801f686:	68db      	ldr	r3, [r3, #12]
 801f688:	685b      	ldr	r3, [r3, #4]
 801f68a:	4618      	mov	r0, r3
 801f68c:	f7f9 fae5 	bl	8018c5a <lwip_htonl>
 801f690:	4603      	mov	r3, r0
 801f692:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801f694:	2b00      	cmp	r3, #0
 801f696:	dbe6      	blt.n	801f666 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	681a      	ldr	r2, [r3, #0]
 801f69c:	68bb      	ldr	r3, [r7, #8]
 801f69e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801f6a0:	68fb      	ldr	r3, [r7, #12]
 801f6a2:	68ba      	ldr	r2, [r7, #8]
 801f6a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801f6a6:	68bb      	ldr	r3, [r7, #8]
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d103      	bne.n	801f6b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	2200      	movs	r2, #0
 801f6b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f6bc:	2bff      	cmp	r3, #255	; 0xff
 801f6be:	d007      	beq.n	801f6d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f6c6:	3301      	adds	r3, #1
 801f6c8:	b2da      	uxtb	r2, r3
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801f6d6:	2300      	movs	r3, #0
}
 801f6d8:	4618      	mov	r0, r3
 801f6da:	3714      	adds	r7, #20
 801f6dc:	46bd      	mov	sp, r7
 801f6de:	bd90      	pop	{r4, r7, pc}
 801f6e0:	080286a0 	.word	0x080286a0
 801f6e4:	08028d40 	.word	0x08028d40
 801f6e8:	080286f4 	.word	0x080286f4

0801f6ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801f6ec:	b580      	push	{r7, lr}
 801f6ee:	b082      	sub	sp, #8
 801f6f0:	af00      	add	r7, sp, #0
 801f6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d106      	bne.n	801f708 <tcp_rexmit_fast+0x1c>
 801f6fa:	4b2a      	ldr	r3, [pc, #168]	; (801f7a4 <tcp_rexmit_fast+0xb8>)
 801f6fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f700:	4929      	ldr	r1, [pc, #164]	; (801f7a8 <tcp_rexmit_fast+0xbc>)
 801f702:	482a      	ldr	r0, [pc, #168]	; (801f7ac <tcp_rexmit_fast+0xc0>)
 801f704:	f006 fc2e 	bl	8025f64 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d045      	beq.n	801f79c <tcp_rexmit_fast+0xb0>
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	8b5b      	ldrh	r3, [r3, #26]
 801f714:	f003 0304 	and.w	r3, r3, #4
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d13f      	bne.n	801f79c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f71c:	6878      	ldr	r0, [r7, #4]
 801f71e:	f7ff ff79 	bl	801f614 <tcp_rexmit>
 801f722:	4603      	mov	r3, r0
 801f724:	2b00      	cmp	r3, #0
 801f726:	d139      	bne.n	801f79c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f734:	4293      	cmp	r3, r2
 801f736:	bf28      	it	cs
 801f738:	4613      	movcs	r3, r2
 801f73a:	b29b      	uxth	r3, r3
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	da00      	bge.n	801f742 <tcp_rexmit_fast+0x56>
 801f740:	3301      	adds	r3, #1
 801f742:	105b      	asrs	r3, r3, #1
 801f744:	b29a      	uxth	r2, r3
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801f752:	461a      	mov	r2, r3
 801f754:	687b      	ldr	r3, [r7, #4]
 801f756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f758:	005b      	lsls	r3, r3, #1
 801f75a:	429a      	cmp	r2, r3
 801f75c:	d206      	bcs.n	801f76c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f762:	005b      	lsls	r3, r3, #1
 801f764:	b29a      	uxth	r2, r3
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f776:	4619      	mov	r1, r3
 801f778:	0049      	lsls	r1, r1, #1
 801f77a:	440b      	add	r3, r1
 801f77c:	b29b      	uxth	r3, r3
 801f77e:	4413      	add	r3, r2
 801f780:	b29a      	uxth	r2, r3
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	8b5b      	ldrh	r3, [r3, #26]
 801f78c:	f043 0304 	orr.w	r3, r3, #4
 801f790:	b29a      	uxth	r2, r3
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	2200      	movs	r2, #0
 801f79a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801f79c:	bf00      	nop
 801f79e:	3708      	adds	r7, #8
 801f7a0:	46bd      	mov	sp, r7
 801f7a2:	bd80      	pop	{r7, pc}
 801f7a4:	080286a0 	.word	0x080286a0
 801f7a8:	08028d58 	.word	0x08028d58
 801f7ac:	080286f4 	.word	0x080286f4

0801f7b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801f7b0:	b580      	push	{r7, lr}
 801f7b2:	b086      	sub	sp, #24
 801f7b4:	af00      	add	r7, sp, #0
 801f7b6:	60f8      	str	r0, [r7, #12]
 801f7b8:	607b      	str	r3, [r7, #4]
 801f7ba:	460b      	mov	r3, r1
 801f7bc:	817b      	strh	r3, [r7, #10]
 801f7be:	4613      	mov	r3, r2
 801f7c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f7c2:	897a      	ldrh	r2, [r7, #10]
 801f7c4:	893b      	ldrh	r3, [r7, #8]
 801f7c6:	4413      	add	r3, r2
 801f7c8:	b29b      	uxth	r3, r3
 801f7ca:	3314      	adds	r3, #20
 801f7cc:	b29b      	uxth	r3, r3
 801f7ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f7d2:	4619      	mov	r1, r3
 801f7d4:	2022      	movs	r0, #34	; 0x22
 801f7d6:	f7fa fbfd 	bl	8019fd4 <pbuf_alloc>
 801f7da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801f7dc:	697b      	ldr	r3, [r7, #20]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d04d      	beq.n	801f87e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f7e2:	897b      	ldrh	r3, [r7, #10]
 801f7e4:	3313      	adds	r3, #19
 801f7e6:	697a      	ldr	r2, [r7, #20]
 801f7e8:	8952      	ldrh	r2, [r2, #10]
 801f7ea:	4293      	cmp	r3, r2
 801f7ec:	db06      	blt.n	801f7fc <tcp_output_alloc_header_common+0x4c>
 801f7ee:	4b26      	ldr	r3, [pc, #152]	; (801f888 <tcp_output_alloc_header_common+0xd8>)
 801f7f0:	f240 7223 	movw	r2, #1827	; 0x723
 801f7f4:	4925      	ldr	r1, [pc, #148]	; (801f88c <tcp_output_alloc_header_common+0xdc>)
 801f7f6:	4826      	ldr	r0, [pc, #152]	; (801f890 <tcp_output_alloc_header_common+0xe0>)
 801f7f8:	f006 fbb4 	bl	8025f64 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801f7fc:	697b      	ldr	r3, [r7, #20]
 801f7fe:	685b      	ldr	r3, [r3, #4]
 801f800:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801f802:	8c3b      	ldrh	r3, [r7, #32]
 801f804:	4618      	mov	r0, r3
 801f806:	f7f9 fa13 	bl	8018c30 <lwip_htons>
 801f80a:	4603      	mov	r3, r0
 801f80c:	461a      	mov	r2, r3
 801f80e:	693b      	ldr	r3, [r7, #16]
 801f810:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801f812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f814:	4618      	mov	r0, r3
 801f816:	f7f9 fa0b 	bl	8018c30 <lwip_htons>
 801f81a:	4603      	mov	r3, r0
 801f81c:	461a      	mov	r2, r3
 801f81e:	693b      	ldr	r3, [r7, #16]
 801f820:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801f822:	693b      	ldr	r3, [r7, #16]
 801f824:	687a      	ldr	r2, [r7, #4]
 801f826:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801f828:	68f8      	ldr	r0, [r7, #12]
 801f82a:	f7f9 fa16 	bl	8018c5a <lwip_htonl>
 801f82e:	4602      	mov	r2, r0
 801f830:	693b      	ldr	r3, [r7, #16]
 801f832:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f834:	897b      	ldrh	r3, [r7, #10]
 801f836:	089b      	lsrs	r3, r3, #2
 801f838:	b29b      	uxth	r3, r3
 801f83a:	3305      	adds	r3, #5
 801f83c:	b29b      	uxth	r3, r3
 801f83e:	031b      	lsls	r3, r3, #12
 801f840:	b29a      	uxth	r2, r3
 801f842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f846:	b29b      	uxth	r3, r3
 801f848:	4313      	orrs	r3, r2
 801f84a:	b29b      	uxth	r3, r3
 801f84c:	4618      	mov	r0, r3
 801f84e:	f7f9 f9ef 	bl	8018c30 <lwip_htons>
 801f852:	4603      	mov	r3, r0
 801f854:	461a      	mov	r2, r3
 801f856:	693b      	ldr	r3, [r7, #16]
 801f858:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801f85a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f85c:	4618      	mov	r0, r3
 801f85e:	f7f9 f9e7 	bl	8018c30 <lwip_htons>
 801f862:	4603      	mov	r3, r0
 801f864:	461a      	mov	r2, r3
 801f866:	693b      	ldr	r3, [r7, #16]
 801f868:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801f86a:	693b      	ldr	r3, [r7, #16]
 801f86c:	2200      	movs	r2, #0
 801f86e:	741a      	strb	r2, [r3, #16]
 801f870:	2200      	movs	r2, #0
 801f872:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801f874:	693b      	ldr	r3, [r7, #16]
 801f876:	2200      	movs	r2, #0
 801f878:	749a      	strb	r2, [r3, #18]
 801f87a:	2200      	movs	r2, #0
 801f87c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801f87e:	697b      	ldr	r3, [r7, #20]
}
 801f880:	4618      	mov	r0, r3
 801f882:	3718      	adds	r7, #24
 801f884:	46bd      	mov	sp, r7
 801f886:	bd80      	pop	{r7, pc}
 801f888:	080286a0 	.word	0x080286a0
 801f88c:	08028d78 	.word	0x08028d78
 801f890:	080286f4 	.word	0x080286f4

0801f894 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801f894:	b5b0      	push	{r4, r5, r7, lr}
 801f896:	b08a      	sub	sp, #40	; 0x28
 801f898:	af04      	add	r7, sp, #16
 801f89a:	60f8      	str	r0, [r7, #12]
 801f89c:	607b      	str	r3, [r7, #4]
 801f89e:	460b      	mov	r3, r1
 801f8a0:	817b      	strh	r3, [r7, #10]
 801f8a2:	4613      	mov	r3, r2
 801f8a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d106      	bne.n	801f8ba <tcp_output_alloc_header+0x26>
 801f8ac:	4b15      	ldr	r3, [pc, #84]	; (801f904 <tcp_output_alloc_header+0x70>)
 801f8ae:	f240 7242 	movw	r2, #1858	; 0x742
 801f8b2:	4915      	ldr	r1, [pc, #84]	; (801f908 <tcp_output_alloc_header+0x74>)
 801f8b4:	4815      	ldr	r0, [pc, #84]	; (801f90c <tcp_output_alloc_header+0x78>)
 801f8b6:	f006 fb55 	bl	8025f64 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801f8ba:	68fb      	ldr	r3, [r7, #12]
 801f8bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	8adb      	ldrh	r3, [r3, #22]
 801f8c2:	68fa      	ldr	r2, [r7, #12]
 801f8c4:	8b12      	ldrh	r2, [r2, #24]
 801f8c6:	68f9      	ldr	r1, [r7, #12]
 801f8c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801f8ca:	893d      	ldrh	r5, [r7, #8]
 801f8cc:	897c      	ldrh	r4, [r7, #10]
 801f8ce:	9103      	str	r1, [sp, #12]
 801f8d0:	2110      	movs	r1, #16
 801f8d2:	9102      	str	r1, [sp, #8]
 801f8d4:	9201      	str	r2, [sp, #4]
 801f8d6:	9300      	str	r3, [sp, #0]
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	462a      	mov	r2, r5
 801f8dc:	4621      	mov	r1, r4
 801f8de:	f7ff ff67 	bl	801f7b0 <tcp_output_alloc_header_common>
 801f8e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801f8e4:	697b      	ldr	r3, [r7, #20]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d006      	beq.n	801f8f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f8ea:	68fb      	ldr	r3, [r7, #12]
 801f8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8ee:	68fa      	ldr	r2, [r7, #12]
 801f8f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f8f2:	441a      	add	r2, r3
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801f8f8:	697b      	ldr	r3, [r7, #20]
}
 801f8fa:	4618      	mov	r0, r3
 801f8fc:	3718      	adds	r7, #24
 801f8fe:	46bd      	mov	sp, r7
 801f900:	bdb0      	pop	{r4, r5, r7, pc}
 801f902:	bf00      	nop
 801f904:	080286a0 	.word	0x080286a0
 801f908:	08028da8 	.word	0x08028da8
 801f90c:	080286f4 	.word	0x080286f4

0801f910 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801f910:	b580      	push	{r7, lr}
 801f912:	b088      	sub	sp, #32
 801f914:	af00      	add	r7, sp, #0
 801f916:	60f8      	str	r0, [r7, #12]
 801f918:	60b9      	str	r1, [r7, #8]
 801f91a:	4611      	mov	r1, r2
 801f91c:	461a      	mov	r2, r3
 801f91e:	460b      	mov	r3, r1
 801f920:	71fb      	strb	r3, [r7, #7]
 801f922:	4613      	mov	r3, r2
 801f924:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801f926:	2300      	movs	r3, #0
 801f928:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801f92a:	68bb      	ldr	r3, [r7, #8]
 801f92c:	2b00      	cmp	r3, #0
 801f92e:	d106      	bne.n	801f93e <tcp_output_fill_options+0x2e>
 801f930:	4b13      	ldr	r3, [pc, #76]	; (801f980 <tcp_output_fill_options+0x70>)
 801f932:	f240 7256 	movw	r2, #1878	; 0x756
 801f936:	4913      	ldr	r1, [pc, #76]	; (801f984 <tcp_output_fill_options+0x74>)
 801f938:	4813      	ldr	r0, [pc, #76]	; (801f988 <tcp_output_fill_options+0x78>)
 801f93a:	f006 fb13 	bl	8025f64 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801f93e:	68bb      	ldr	r3, [r7, #8]
 801f940:	685b      	ldr	r3, [r3, #4]
 801f942:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801f944:	69bb      	ldr	r3, [r7, #24]
 801f946:	3314      	adds	r3, #20
 801f948:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801f94a:	69bb      	ldr	r3, [r7, #24]
 801f94c:	f103 0214 	add.w	r2, r3, #20
 801f950:	8bfb      	ldrh	r3, [r7, #30]
 801f952:	009b      	lsls	r3, r3, #2
 801f954:	4619      	mov	r1, r3
 801f956:	79fb      	ldrb	r3, [r7, #7]
 801f958:	009b      	lsls	r3, r3, #2
 801f95a:	f003 0304 	and.w	r3, r3, #4
 801f95e:	440b      	add	r3, r1
 801f960:	4413      	add	r3, r2
 801f962:	697a      	ldr	r2, [r7, #20]
 801f964:	429a      	cmp	r2, r3
 801f966:	d006      	beq.n	801f976 <tcp_output_fill_options+0x66>
 801f968:	4b05      	ldr	r3, [pc, #20]	; (801f980 <tcp_output_fill_options+0x70>)
 801f96a:	f240 7275 	movw	r2, #1909	; 0x775
 801f96e:	4907      	ldr	r1, [pc, #28]	; (801f98c <tcp_output_fill_options+0x7c>)
 801f970:	4805      	ldr	r0, [pc, #20]	; (801f988 <tcp_output_fill_options+0x78>)
 801f972:	f006 faf7 	bl	8025f64 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801f976:	bf00      	nop
 801f978:	3720      	adds	r7, #32
 801f97a:	46bd      	mov	sp, r7
 801f97c:	bd80      	pop	{r7, pc}
 801f97e:	bf00      	nop
 801f980:	080286a0 	.word	0x080286a0
 801f984:	08028dd0 	.word	0x08028dd0
 801f988:	080286f4 	.word	0x080286f4
 801f98c:	08028cc8 	.word	0x08028cc8

0801f990 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f990:	b580      	push	{r7, lr}
 801f992:	b08a      	sub	sp, #40	; 0x28
 801f994:	af04      	add	r7, sp, #16
 801f996:	60f8      	str	r0, [r7, #12]
 801f998:	60b9      	str	r1, [r7, #8]
 801f99a:	607a      	str	r2, [r7, #4]
 801f99c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f99e:	68bb      	ldr	r3, [r7, #8]
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d106      	bne.n	801f9b2 <tcp_output_control_segment+0x22>
 801f9a4:	4b1c      	ldr	r3, [pc, #112]	; (801fa18 <tcp_output_control_segment+0x88>)
 801f9a6:	f240 7287 	movw	r2, #1927	; 0x787
 801f9aa:	491c      	ldr	r1, [pc, #112]	; (801fa1c <tcp_output_control_segment+0x8c>)
 801f9ac:	481c      	ldr	r0, [pc, #112]	; (801fa20 <tcp_output_control_segment+0x90>)
 801f9ae:	f006 fad9 	bl	8025f64 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801f9b2:	683a      	ldr	r2, [r7, #0]
 801f9b4:	6879      	ldr	r1, [r7, #4]
 801f9b6:	68f8      	ldr	r0, [r7, #12]
 801f9b8:	f7fe ff40 	bl	801e83c <tcp_route>
 801f9bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801f9be:	693b      	ldr	r3, [r7, #16]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	d102      	bne.n	801f9ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801f9c4:	23fc      	movs	r3, #252	; 0xfc
 801f9c6:	75fb      	strb	r3, [r7, #23]
 801f9c8:	e01c      	b.n	801fa04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	d006      	beq.n	801f9de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	7adb      	ldrb	r3, [r3, #11]
 801f9d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801f9d6:	68fb      	ldr	r3, [r7, #12]
 801f9d8:	7a9b      	ldrb	r3, [r3, #10]
 801f9da:	757b      	strb	r3, [r7, #21]
 801f9dc:	e003      	b.n	801f9e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801f9de:	23ff      	movs	r3, #255	; 0xff
 801f9e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801f9e2:	2300      	movs	r3, #0
 801f9e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f9e6:	7dba      	ldrb	r2, [r7, #22]
 801f9e8:	693b      	ldr	r3, [r7, #16]
 801f9ea:	9302      	str	r3, [sp, #8]
 801f9ec:	2306      	movs	r3, #6
 801f9ee:	9301      	str	r3, [sp, #4]
 801f9f0:	7d7b      	ldrb	r3, [r7, #21]
 801f9f2:	9300      	str	r3, [sp, #0]
 801f9f4:	4613      	mov	r3, r2
 801f9f6:	683a      	ldr	r2, [r7, #0]
 801f9f8:	6879      	ldr	r1, [r7, #4]
 801f9fa:	68b8      	ldr	r0, [r7, #8]
 801f9fc:	f004 f97e 	bl	8023cfc <ip4_output_if>
 801fa00:	4603      	mov	r3, r0
 801fa02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801fa04:	68b8      	ldr	r0, [r7, #8]
 801fa06:	f7fa fdc9 	bl	801a59c <pbuf_free>
  return err;
 801fa0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fa0e:	4618      	mov	r0, r3
 801fa10:	3718      	adds	r7, #24
 801fa12:	46bd      	mov	sp, r7
 801fa14:	bd80      	pop	{r7, pc}
 801fa16:	bf00      	nop
 801fa18:	080286a0 	.word	0x080286a0
 801fa1c:	08028df8 	.word	0x08028df8
 801fa20:	080286f4 	.word	0x080286f4

0801fa24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801fa24:	b590      	push	{r4, r7, lr}
 801fa26:	b08b      	sub	sp, #44	; 0x2c
 801fa28:	af04      	add	r7, sp, #16
 801fa2a:	60f8      	str	r0, [r7, #12]
 801fa2c:	60b9      	str	r1, [r7, #8]
 801fa2e:	607a      	str	r2, [r7, #4]
 801fa30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801fa32:	683b      	ldr	r3, [r7, #0]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d106      	bne.n	801fa46 <tcp_rst+0x22>
 801fa38:	4b1f      	ldr	r3, [pc, #124]	; (801fab8 <tcp_rst+0x94>)
 801fa3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801fa3e:	491f      	ldr	r1, [pc, #124]	; (801fabc <tcp_rst+0x98>)
 801fa40:	481f      	ldr	r0, [pc, #124]	; (801fac0 <tcp_rst+0x9c>)
 801fa42:	f006 fa8f 	bl	8025f64 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801fa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d106      	bne.n	801fa5a <tcp_rst+0x36>
 801fa4c:	4b1a      	ldr	r3, [pc, #104]	; (801fab8 <tcp_rst+0x94>)
 801fa4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801fa52:	491c      	ldr	r1, [pc, #112]	; (801fac4 <tcp_rst+0xa0>)
 801fa54:	481a      	ldr	r0, [pc, #104]	; (801fac0 <tcp_rst+0x9c>)
 801fa56:	f006 fa85 	bl	8025f64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801fa5a:	2300      	movs	r3, #0
 801fa5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801fa5e:	f246 0308 	movw	r3, #24584	; 0x6008
 801fa62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801fa64:	7dfb      	ldrb	r3, [r7, #23]
 801fa66:	b29c      	uxth	r4, r3
 801fa68:	68b8      	ldr	r0, [r7, #8]
 801fa6a:	f7f9 f8f6 	bl	8018c5a <lwip_htonl>
 801fa6e:	4602      	mov	r2, r0
 801fa70:	8abb      	ldrh	r3, [r7, #20]
 801fa72:	9303      	str	r3, [sp, #12]
 801fa74:	2314      	movs	r3, #20
 801fa76:	9302      	str	r3, [sp, #8]
 801fa78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801fa7a:	9301      	str	r3, [sp, #4]
 801fa7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801fa7e:	9300      	str	r3, [sp, #0]
 801fa80:	4613      	mov	r3, r2
 801fa82:	2200      	movs	r2, #0
 801fa84:	4621      	mov	r1, r4
 801fa86:	6878      	ldr	r0, [r7, #4]
 801fa88:	f7ff fe92 	bl	801f7b0 <tcp_output_alloc_header_common>
 801fa8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801fa8e:	693b      	ldr	r3, [r7, #16]
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d00c      	beq.n	801faae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fa94:	7dfb      	ldrb	r3, [r7, #23]
 801fa96:	2200      	movs	r2, #0
 801fa98:	6939      	ldr	r1, [r7, #16]
 801fa9a:	68f8      	ldr	r0, [r7, #12]
 801fa9c:	f7ff ff38 	bl	801f910 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801faa2:	683a      	ldr	r2, [r7, #0]
 801faa4:	6939      	ldr	r1, [r7, #16]
 801faa6:	68f8      	ldr	r0, [r7, #12]
 801faa8:	f7ff ff72 	bl	801f990 <tcp_output_control_segment>
 801faac:	e000      	b.n	801fab0 <tcp_rst+0x8c>
    return;
 801faae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801fab0:	371c      	adds	r7, #28
 801fab2:	46bd      	mov	sp, r7
 801fab4:	bd90      	pop	{r4, r7, pc}
 801fab6:	bf00      	nop
 801fab8:	080286a0 	.word	0x080286a0
 801fabc:	08028e24 	.word	0x08028e24
 801fac0:	080286f4 	.word	0x080286f4
 801fac4:	08028e40 	.word	0x08028e40

0801fac8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801fac8:	b590      	push	{r4, r7, lr}
 801faca:	b087      	sub	sp, #28
 801facc:	af00      	add	r7, sp, #0
 801face:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801fad0:	2300      	movs	r3, #0
 801fad2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801fad4:	2300      	movs	r3, #0
 801fad6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	2b00      	cmp	r3, #0
 801fadc:	d106      	bne.n	801faec <tcp_send_empty_ack+0x24>
 801fade:	4b28      	ldr	r3, [pc, #160]	; (801fb80 <tcp_send_empty_ack+0xb8>)
 801fae0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801fae4:	4927      	ldr	r1, [pc, #156]	; (801fb84 <tcp_send_empty_ack+0xbc>)
 801fae6:	4828      	ldr	r0, [pc, #160]	; (801fb88 <tcp_send_empty_ack+0xc0>)
 801fae8:	f006 fa3c 	bl	8025f64 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801faec:	7dfb      	ldrb	r3, [r7, #23]
 801faee:	009b      	lsls	r3, r3, #2
 801faf0:	b2db      	uxtb	r3, r3
 801faf2:	f003 0304 	and.w	r3, r3, #4
 801faf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801faf8:	7d7b      	ldrb	r3, [r7, #21]
 801fafa:	b29c      	uxth	r4, r3
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb00:	4618      	mov	r0, r3
 801fb02:	f7f9 f8aa 	bl	8018c5a <lwip_htonl>
 801fb06:	4603      	mov	r3, r0
 801fb08:	2200      	movs	r2, #0
 801fb0a:	4621      	mov	r1, r4
 801fb0c:	6878      	ldr	r0, [r7, #4]
 801fb0e:	f7ff fec1 	bl	801f894 <tcp_output_alloc_header>
 801fb12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801fb14:	693b      	ldr	r3, [r7, #16]
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d109      	bne.n	801fb2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	8b5b      	ldrh	r3, [r3, #26]
 801fb1e:	f043 0303 	orr.w	r3, r3, #3
 801fb22:	b29a      	uxth	r2, r3
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801fb28:	f06f 0301 	mvn.w	r3, #1
 801fb2c:	e023      	b.n	801fb76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801fb2e:	7dbb      	ldrb	r3, [r7, #22]
 801fb30:	7dfa      	ldrb	r2, [r7, #23]
 801fb32:	6939      	ldr	r1, [r7, #16]
 801fb34:	6878      	ldr	r0, [r7, #4]
 801fb36:	f7ff feeb 	bl	801f910 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fb3a:	687a      	ldr	r2, [r7, #4]
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	3304      	adds	r3, #4
 801fb40:	6939      	ldr	r1, [r7, #16]
 801fb42:	6878      	ldr	r0, [r7, #4]
 801fb44:	f7ff ff24 	bl	801f990 <tcp_output_control_segment>
 801fb48:	4603      	mov	r3, r0
 801fb4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801fb4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	d007      	beq.n	801fb64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	8b5b      	ldrh	r3, [r3, #26]
 801fb58:	f043 0303 	orr.w	r3, r3, #3
 801fb5c:	b29a      	uxth	r2, r3
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	835a      	strh	r2, [r3, #26]
 801fb62:	e006      	b.n	801fb72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	8b5b      	ldrh	r3, [r3, #26]
 801fb68:	f023 0303 	bic.w	r3, r3, #3
 801fb6c:	b29a      	uxth	r2, r3
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801fb72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fb76:	4618      	mov	r0, r3
 801fb78:	371c      	adds	r7, #28
 801fb7a:	46bd      	mov	sp, r7
 801fb7c:	bd90      	pop	{r4, r7, pc}
 801fb7e:	bf00      	nop
 801fb80:	080286a0 	.word	0x080286a0
 801fb84:	08028e5c 	.word	0x08028e5c
 801fb88:	080286f4 	.word	0x080286f4

0801fb8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801fb8c:	b590      	push	{r4, r7, lr}
 801fb8e:	b087      	sub	sp, #28
 801fb90:	af00      	add	r7, sp, #0
 801fb92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801fb94:	2300      	movs	r3, #0
 801fb96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d106      	bne.n	801fbac <tcp_keepalive+0x20>
 801fb9e:	4b18      	ldr	r3, [pc, #96]	; (801fc00 <tcp_keepalive+0x74>)
 801fba0:	f640 0224 	movw	r2, #2084	; 0x824
 801fba4:	4917      	ldr	r1, [pc, #92]	; (801fc04 <tcp_keepalive+0x78>)
 801fba6:	4818      	ldr	r0, [pc, #96]	; (801fc08 <tcp_keepalive+0x7c>)
 801fba8:	f006 f9dc 	bl	8025f64 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801fbac:	7dfb      	ldrb	r3, [r7, #23]
 801fbae:	b29c      	uxth	r4, r3
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fbb4:	3b01      	subs	r3, #1
 801fbb6:	4618      	mov	r0, r3
 801fbb8:	f7f9 f84f 	bl	8018c5a <lwip_htonl>
 801fbbc:	4603      	mov	r3, r0
 801fbbe:	2200      	movs	r2, #0
 801fbc0:	4621      	mov	r1, r4
 801fbc2:	6878      	ldr	r0, [r7, #4]
 801fbc4:	f7ff fe66 	bl	801f894 <tcp_output_alloc_header>
 801fbc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801fbca:	693b      	ldr	r3, [r7, #16]
 801fbcc:	2b00      	cmp	r3, #0
 801fbce:	d102      	bne.n	801fbd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801fbd0:	f04f 33ff 	mov.w	r3, #4294967295
 801fbd4:	e010      	b.n	801fbf8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fbd6:	7dfb      	ldrb	r3, [r7, #23]
 801fbd8:	2200      	movs	r2, #0
 801fbda:	6939      	ldr	r1, [r7, #16]
 801fbdc:	6878      	ldr	r0, [r7, #4]
 801fbde:	f7ff fe97 	bl	801f910 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fbe2:	687a      	ldr	r2, [r7, #4]
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	3304      	adds	r3, #4
 801fbe8:	6939      	ldr	r1, [r7, #16]
 801fbea:	6878      	ldr	r0, [r7, #4]
 801fbec:	f7ff fed0 	bl	801f990 <tcp_output_control_segment>
 801fbf0:	4603      	mov	r3, r0
 801fbf2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801fbf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fbf8:	4618      	mov	r0, r3
 801fbfa:	371c      	adds	r7, #28
 801fbfc:	46bd      	mov	sp, r7
 801fbfe:	bd90      	pop	{r4, r7, pc}
 801fc00:	080286a0 	.word	0x080286a0
 801fc04:	08028e7c 	.word	0x08028e7c
 801fc08:	080286f4 	.word	0x080286f4

0801fc0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801fc0c:	b590      	push	{r4, r7, lr}
 801fc0e:	b08b      	sub	sp, #44	; 0x2c
 801fc10:	af00      	add	r7, sp, #0
 801fc12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801fc14:	2300      	movs	r3, #0
 801fc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d106      	bne.n	801fc2e <tcp_zero_window_probe+0x22>
 801fc20:	4b4c      	ldr	r3, [pc, #304]	; (801fd54 <tcp_zero_window_probe+0x148>)
 801fc22:	f640 024f 	movw	r2, #2127	; 0x84f
 801fc26:	494c      	ldr	r1, [pc, #304]	; (801fd58 <tcp_zero_window_probe+0x14c>)
 801fc28:	484c      	ldr	r0, [pc, #304]	; (801fd5c <tcp_zero_window_probe+0x150>)
 801fc2a:	f006 f99b 	bl	8025f64 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fc32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801fc34:	6a3b      	ldr	r3, [r7, #32]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d101      	bne.n	801fc3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801fc3a:	2300      	movs	r3, #0
 801fc3c:	e086      	b.n	801fd4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801fc44:	2bff      	cmp	r3, #255	; 0xff
 801fc46:	d007      	beq.n	801fc58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801fc4e:	3301      	adds	r3, #1
 801fc50:	b2da      	uxtb	r2, r3
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801fc58:	6a3b      	ldr	r3, [r7, #32]
 801fc5a:	68db      	ldr	r3, [r3, #12]
 801fc5c:	899b      	ldrh	r3, [r3, #12]
 801fc5e:	b29b      	uxth	r3, r3
 801fc60:	4618      	mov	r0, r3
 801fc62:	f7f8 ffe5 	bl	8018c30 <lwip_htons>
 801fc66:	4603      	mov	r3, r0
 801fc68:	b2db      	uxtb	r3, r3
 801fc6a:	f003 0301 	and.w	r3, r3, #1
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	d005      	beq.n	801fc7e <tcp_zero_window_probe+0x72>
 801fc72:	6a3b      	ldr	r3, [r7, #32]
 801fc74:	891b      	ldrh	r3, [r3, #8]
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d101      	bne.n	801fc7e <tcp_zero_window_probe+0x72>
 801fc7a:	2301      	movs	r3, #1
 801fc7c:	e000      	b.n	801fc80 <tcp_zero_window_probe+0x74>
 801fc7e:	2300      	movs	r3, #0
 801fc80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801fc82:	7ffb      	ldrb	r3, [r7, #31]
 801fc84:	2b00      	cmp	r3, #0
 801fc86:	bf0c      	ite	eq
 801fc88:	2301      	moveq	r3, #1
 801fc8a:	2300      	movne	r3, #0
 801fc8c:	b2db      	uxtb	r3, r3
 801fc8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801fc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fc94:	b299      	uxth	r1, r3
 801fc96:	6a3b      	ldr	r3, [r7, #32]
 801fc98:	68db      	ldr	r3, [r3, #12]
 801fc9a:	685b      	ldr	r3, [r3, #4]
 801fc9c:	8bba      	ldrh	r2, [r7, #28]
 801fc9e:	6878      	ldr	r0, [r7, #4]
 801fca0:	f7ff fdf8 	bl	801f894 <tcp_output_alloc_header>
 801fca4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801fca6:	69bb      	ldr	r3, [r7, #24]
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d102      	bne.n	801fcb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801fcac:	f04f 33ff 	mov.w	r3, #4294967295
 801fcb0:	e04c      	b.n	801fd4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801fcb2:	69bb      	ldr	r3, [r7, #24]
 801fcb4:	685b      	ldr	r3, [r3, #4]
 801fcb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801fcb8:	7ffb      	ldrb	r3, [r7, #31]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d011      	beq.n	801fce2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801fcbe:	697b      	ldr	r3, [r7, #20]
 801fcc0:	899b      	ldrh	r3, [r3, #12]
 801fcc2:	b29b      	uxth	r3, r3
 801fcc4:	b21b      	sxth	r3, r3
 801fcc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801fcca:	b21c      	sxth	r4, r3
 801fccc:	2011      	movs	r0, #17
 801fcce:	f7f8 ffaf 	bl	8018c30 <lwip_htons>
 801fcd2:	4603      	mov	r3, r0
 801fcd4:	b21b      	sxth	r3, r3
 801fcd6:	4323      	orrs	r3, r4
 801fcd8:	b21b      	sxth	r3, r3
 801fcda:	b29a      	uxth	r2, r3
 801fcdc:	697b      	ldr	r3, [r7, #20]
 801fcde:	819a      	strh	r2, [r3, #12]
 801fce0:	e010      	b.n	801fd04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801fce2:	69bb      	ldr	r3, [r7, #24]
 801fce4:	685b      	ldr	r3, [r3, #4]
 801fce6:	3314      	adds	r3, #20
 801fce8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801fcea:	6a3b      	ldr	r3, [r7, #32]
 801fcec:	6858      	ldr	r0, [r3, #4]
 801fcee:	6a3b      	ldr	r3, [r7, #32]
 801fcf0:	685b      	ldr	r3, [r3, #4]
 801fcf2:	891a      	ldrh	r2, [r3, #8]
 801fcf4:	6a3b      	ldr	r3, [r7, #32]
 801fcf6:	891b      	ldrh	r3, [r3, #8]
 801fcf8:	1ad3      	subs	r3, r2, r3
 801fcfa:	b29b      	uxth	r3, r3
 801fcfc:	2201      	movs	r2, #1
 801fcfe:	6939      	ldr	r1, [r7, #16]
 801fd00:	f7fa fe52 	bl	801a9a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801fd04:	6a3b      	ldr	r3, [r7, #32]
 801fd06:	68db      	ldr	r3, [r3, #12]
 801fd08:	685b      	ldr	r3, [r3, #4]
 801fd0a:	4618      	mov	r0, r3
 801fd0c:	f7f8 ffa5 	bl	8018c5a <lwip_htonl>
 801fd10:	4603      	mov	r3, r0
 801fd12:	3301      	adds	r3, #1
 801fd14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fd1a:	68fb      	ldr	r3, [r7, #12]
 801fd1c:	1ad3      	subs	r3, r2, r3
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	da02      	bge.n	801fd28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	68fa      	ldr	r2, [r7, #12]
 801fd26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fd2c:	2200      	movs	r2, #0
 801fd2e:	69b9      	ldr	r1, [r7, #24]
 801fd30:	6878      	ldr	r0, [r7, #4]
 801fd32:	f7ff fded 	bl	801f910 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fd36:	687a      	ldr	r2, [r7, #4]
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	3304      	adds	r3, #4
 801fd3c:	69b9      	ldr	r1, [r7, #24]
 801fd3e:	6878      	ldr	r0, [r7, #4]
 801fd40:	f7ff fe26 	bl	801f990 <tcp_output_control_segment>
 801fd44:	4603      	mov	r3, r0
 801fd46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801fd48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	372c      	adds	r7, #44	; 0x2c
 801fd50:	46bd      	mov	sp, r7
 801fd52:	bd90      	pop	{r4, r7, pc}
 801fd54:	080286a0 	.word	0x080286a0
 801fd58:	08028e98 	.word	0x08028e98
 801fd5c:	080286f4 	.word	0x080286f4

0801fd60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801fd60:	b580      	push	{r7, lr}
 801fd62:	b082      	sub	sp, #8
 801fd64:	af00      	add	r7, sp, #0
 801fd66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801fd68:	f7fa ff0c 	bl	801ab84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801fd6c:	4b0a      	ldr	r3, [pc, #40]	; (801fd98 <tcpip_tcp_timer+0x38>)
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d103      	bne.n	801fd7c <tcpip_tcp_timer+0x1c>
 801fd74:	4b09      	ldr	r3, [pc, #36]	; (801fd9c <tcpip_tcp_timer+0x3c>)
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	d005      	beq.n	801fd88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801fd7c:	2200      	movs	r2, #0
 801fd7e:	4908      	ldr	r1, [pc, #32]	; (801fda0 <tcpip_tcp_timer+0x40>)
 801fd80:	20fa      	movs	r0, #250	; 0xfa
 801fd82:	f000 f8f3 	bl	801ff6c <sys_timeout>
 801fd86:	e003      	b.n	801fd90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801fd88:	4b06      	ldr	r3, [pc, #24]	; (801fda4 <tcpip_tcp_timer+0x44>)
 801fd8a:	2200      	movs	r2, #0
 801fd8c:	601a      	str	r2, [r3, #0]
  }
}
 801fd8e:	bf00      	nop
 801fd90:	bf00      	nop
 801fd92:	3708      	adds	r7, #8
 801fd94:	46bd      	mov	sp, r7
 801fd96:	bd80      	pop	{r7, pc}
 801fd98:	2400d008 	.word	0x2400d008
 801fd9c:	2400d00c 	.word	0x2400d00c
 801fda0:	0801fd61 	.word	0x0801fd61
 801fda4:	2400d054 	.word	0x2400d054

0801fda8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801fda8:	b580      	push	{r7, lr}
 801fdaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801fdac:	4b0a      	ldr	r3, [pc, #40]	; (801fdd8 <tcp_timer_needed+0x30>)
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d10f      	bne.n	801fdd4 <tcp_timer_needed+0x2c>
 801fdb4:	4b09      	ldr	r3, [pc, #36]	; (801fddc <tcp_timer_needed+0x34>)
 801fdb6:	681b      	ldr	r3, [r3, #0]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d103      	bne.n	801fdc4 <tcp_timer_needed+0x1c>
 801fdbc:	4b08      	ldr	r3, [pc, #32]	; (801fde0 <tcp_timer_needed+0x38>)
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	d007      	beq.n	801fdd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801fdc4:	4b04      	ldr	r3, [pc, #16]	; (801fdd8 <tcp_timer_needed+0x30>)
 801fdc6:	2201      	movs	r2, #1
 801fdc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801fdca:	2200      	movs	r2, #0
 801fdcc:	4905      	ldr	r1, [pc, #20]	; (801fde4 <tcp_timer_needed+0x3c>)
 801fdce:	20fa      	movs	r0, #250	; 0xfa
 801fdd0:	f000 f8cc 	bl	801ff6c <sys_timeout>
  }
}
 801fdd4:	bf00      	nop
 801fdd6:	bd80      	pop	{r7, pc}
 801fdd8:	2400d054 	.word	0x2400d054
 801fddc:	2400d008 	.word	0x2400d008
 801fde0:	2400d00c 	.word	0x2400d00c
 801fde4:	0801fd61 	.word	0x0801fd61

0801fde8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801fde8:	b580      	push	{r7, lr}
 801fdea:	b086      	sub	sp, #24
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	60f8      	str	r0, [r7, #12]
 801fdf0:	60b9      	str	r1, [r7, #8]
 801fdf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801fdf4:	200a      	movs	r0, #10
 801fdf6:	f7f9 fcab 	bl	8019750 <memp_malloc>
 801fdfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801fdfc:	693b      	ldr	r3, [r7, #16]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d109      	bne.n	801fe16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801fe02:	693b      	ldr	r3, [r7, #16]
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d151      	bne.n	801feac <sys_timeout_abs+0xc4>
 801fe08:	4b2a      	ldr	r3, [pc, #168]	; (801feb4 <sys_timeout_abs+0xcc>)
 801fe0a:	22be      	movs	r2, #190	; 0xbe
 801fe0c:	492a      	ldr	r1, [pc, #168]	; (801feb8 <sys_timeout_abs+0xd0>)
 801fe0e:	482b      	ldr	r0, [pc, #172]	; (801febc <sys_timeout_abs+0xd4>)
 801fe10:	f006 f8a8 	bl	8025f64 <iprintf>
    return;
 801fe14:	e04a      	b.n	801feac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801fe16:	693b      	ldr	r3, [r7, #16]
 801fe18:	2200      	movs	r2, #0
 801fe1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801fe1c:	693b      	ldr	r3, [r7, #16]
 801fe1e:	68ba      	ldr	r2, [r7, #8]
 801fe20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801fe22:	693b      	ldr	r3, [r7, #16]
 801fe24:	687a      	ldr	r2, [r7, #4]
 801fe26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801fe28:	693b      	ldr	r3, [r7, #16]
 801fe2a:	68fa      	ldr	r2, [r7, #12]
 801fe2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801fe2e:	4b24      	ldr	r3, [pc, #144]	; (801fec0 <sys_timeout_abs+0xd8>)
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d103      	bne.n	801fe3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801fe36:	4a22      	ldr	r2, [pc, #136]	; (801fec0 <sys_timeout_abs+0xd8>)
 801fe38:	693b      	ldr	r3, [r7, #16]
 801fe3a:	6013      	str	r3, [r2, #0]
    return;
 801fe3c:	e037      	b.n	801feae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801fe3e:	693b      	ldr	r3, [r7, #16]
 801fe40:	685a      	ldr	r2, [r3, #4]
 801fe42:	4b1f      	ldr	r3, [pc, #124]	; (801fec0 <sys_timeout_abs+0xd8>)
 801fe44:	681b      	ldr	r3, [r3, #0]
 801fe46:	685b      	ldr	r3, [r3, #4]
 801fe48:	1ad3      	subs	r3, r2, r3
 801fe4a:	0fdb      	lsrs	r3, r3, #31
 801fe4c:	f003 0301 	and.w	r3, r3, #1
 801fe50:	b2db      	uxtb	r3, r3
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d007      	beq.n	801fe66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801fe56:	4b1a      	ldr	r3, [pc, #104]	; (801fec0 <sys_timeout_abs+0xd8>)
 801fe58:	681a      	ldr	r2, [r3, #0]
 801fe5a:	693b      	ldr	r3, [r7, #16]
 801fe5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801fe5e:	4a18      	ldr	r2, [pc, #96]	; (801fec0 <sys_timeout_abs+0xd8>)
 801fe60:	693b      	ldr	r3, [r7, #16]
 801fe62:	6013      	str	r3, [r2, #0]
 801fe64:	e023      	b.n	801feae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801fe66:	4b16      	ldr	r3, [pc, #88]	; (801fec0 <sys_timeout_abs+0xd8>)
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	617b      	str	r3, [r7, #20]
 801fe6c:	e01a      	b.n	801fea4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801fe6e:	697b      	ldr	r3, [r7, #20]
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d00b      	beq.n	801fe8e <sys_timeout_abs+0xa6>
 801fe76:	693b      	ldr	r3, [r7, #16]
 801fe78:	685a      	ldr	r2, [r3, #4]
 801fe7a:	697b      	ldr	r3, [r7, #20]
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	685b      	ldr	r3, [r3, #4]
 801fe80:	1ad3      	subs	r3, r2, r3
 801fe82:	0fdb      	lsrs	r3, r3, #31
 801fe84:	f003 0301 	and.w	r3, r3, #1
 801fe88:	b2db      	uxtb	r3, r3
 801fe8a:	2b00      	cmp	r3, #0
 801fe8c:	d007      	beq.n	801fe9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801fe8e:	697b      	ldr	r3, [r7, #20]
 801fe90:	681a      	ldr	r2, [r3, #0]
 801fe92:	693b      	ldr	r3, [r7, #16]
 801fe94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801fe96:	697b      	ldr	r3, [r7, #20]
 801fe98:	693a      	ldr	r2, [r7, #16]
 801fe9a:	601a      	str	r2, [r3, #0]
        break;
 801fe9c:	e007      	b.n	801feae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801fe9e:	697b      	ldr	r3, [r7, #20]
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	617b      	str	r3, [r7, #20]
 801fea4:	697b      	ldr	r3, [r7, #20]
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d1e1      	bne.n	801fe6e <sys_timeout_abs+0x86>
 801feaa:	e000      	b.n	801feae <sys_timeout_abs+0xc6>
    return;
 801feac:	bf00      	nop
      }
    }
  }
}
 801feae:	3718      	adds	r7, #24
 801feb0:	46bd      	mov	sp, r7
 801feb2:	bd80      	pop	{r7, pc}
 801feb4:	08028ebc 	.word	0x08028ebc
 801feb8:	08028ef0 	.word	0x08028ef0
 801febc:	08028f30 	.word	0x08028f30
 801fec0:	2400d04c 	.word	0x2400d04c

0801fec4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801fec4:	b580      	push	{r7, lr}
 801fec6:	b086      	sub	sp, #24
 801fec8:	af00      	add	r7, sp, #0
 801feca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801fed0:	697b      	ldr	r3, [r7, #20]
 801fed2:	685b      	ldr	r3, [r3, #4]
 801fed4:	4798      	blx	r3

  now = sys_now();
 801fed6:	f7f2 fca7 	bl	8012828 <sys_now>
 801feda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801fedc:	697b      	ldr	r3, [r7, #20]
 801fede:	681a      	ldr	r2, [r3, #0]
 801fee0:	4b0f      	ldr	r3, [pc, #60]	; (801ff20 <lwip_cyclic_timer+0x5c>)
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	4413      	add	r3, r2
 801fee6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801fee8:	68fa      	ldr	r2, [r7, #12]
 801feea:	693b      	ldr	r3, [r7, #16]
 801feec:	1ad3      	subs	r3, r2, r3
 801feee:	0fdb      	lsrs	r3, r3, #31
 801fef0:	f003 0301 	and.w	r3, r3, #1
 801fef4:	b2db      	uxtb	r3, r3
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d009      	beq.n	801ff0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	681a      	ldr	r2, [r3, #0]
 801fefe:	693b      	ldr	r3, [r7, #16]
 801ff00:	4413      	add	r3, r2
 801ff02:	687a      	ldr	r2, [r7, #4]
 801ff04:	4907      	ldr	r1, [pc, #28]	; (801ff24 <lwip_cyclic_timer+0x60>)
 801ff06:	4618      	mov	r0, r3
 801ff08:	f7ff ff6e 	bl	801fde8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ff0c:	e004      	b.n	801ff18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ff0e:	687a      	ldr	r2, [r7, #4]
 801ff10:	4904      	ldr	r1, [pc, #16]	; (801ff24 <lwip_cyclic_timer+0x60>)
 801ff12:	68f8      	ldr	r0, [r7, #12]
 801ff14:	f7ff ff68 	bl	801fde8 <sys_timeout_abs>
}
 801ff18:	bf00      	nop
 801ff1a:	3718      	adds	r7, #24
 801ff1c:	46bd      	mov	sp, r7
 801ff1e:	bd80      	pop	{r7, pc}
 801ff20:	2400d050 	.word	0x2400d050
 801ff24:	0801fec5 	.word	0x0801fec5

0801ff28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ff28:	b580      	push	{r7, lr}
 801ff2a:	b082      	sub	sp, #8
 801ff2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ff2e:	2301      	movs	r3, #1
 801ff30:	607b      	str	r3, [r7, #4]
 801ff32:	e00e      	b.n	801ff52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ff34:	4a0b      	ldr	r2, [pc, #44]	; (801ff64 <sys_timeouts_init+0x3c>)
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	00db      	lsls	r3, r3, #3
 801ff40:	4a08      	ldr	r2, [pc, #32]	; (801ff64 <sys_timeouts_init+0x3c>)
 801ff42:	4413      	add	r3, r2
 801ff44:	461a      	mov	r2, r3
 801ff46:	4908      	ldr	r1, [pc, #32]	; (801ff68 <sys_timeouts_init+0x40>)
 801ff48:	f000 f810 	bl	801ff6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	3301      	adds	r3, #1
 801ff50:	607b      	str	r3, [r7, #4]
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	2b04      	cmp	r3, #4
 801ff56:	d9ed      	bls.n	801ff34 <sys_timeouts_init+0xc>
  }
}
 801ff58:	bf00      	nop
 801ff5a:	bf00      	nop
 801ff5c:	3708      	adds	r7, #8
 801ff5e:	46bd      	mov	sp, r7
 801ff60:	bd80      	pop	{r7, pc}
 801ff62:	bf00      	nop
 801ff64:	0802a584 	.word	0x0802a584
 801ff68:	0801fec5 	.word	0x0801fec5

0801ff6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ff6c:	b580      	push	{r7, lr}
 801ff6e:	b086      	sub	sp, #24
 801ff70:	af00      	add	r7, sp, #0
 801ff72:	60f8      	str	r0, [r7, #12]
 801ff74:	60b9      	str	r1, [r7, #8]
 801ff76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ff78:	68fb      	ldr	r3, [r7, #12]
 801ff7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ff7e:	d306      	bcc.n	801ff8e <sys_timeout+0x22>
 801ff80:	4b0a      	ldr	r3, [pc, #40]	; (801ffac <sys_timeout+0x40>)
 801ff82:	f240 1229 	movw	r2, #297	; 0x129
 801ff86:	490a      	ldr	r1, [pc, #40]	; (801ffb0 <sys_timeout+0x44>)
 801ff88:	480a      	ldr	r0, [pc, #40]	; (801ffb4 <sys_timeout+0x48>)
 801ff8a:	f005 ffeb 	bl	8025f64 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ff8e:	f7f2 fc4b 	bl	8012828 <sys_now>
 801ff92:	4602      	mov	r2, r0
 801ff94:	68fb      	ldr	r3, [r7, #12]
 801ff96:	4413      	add	r3, r2
 801ff98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ff9a:	687a      	ldr	r2, [r7, #4]
 801ff9c:	68b9      	ldr	r1, [r7, #8]
 801ff9e:	6978      	ldr	r0, [r7, #20]
 801ffa0:	f7ff ff22 	bl	801fde8 <sys_timeout_abs>
#endif
}
 801ffa4:	bf00      	nop
 801ffa6:	3718      	adds	r7, #24
 801ffa8:	46bd      	mov	sp, r7
 801ffaa:	bd80      	pop	{r7, pc}
 801ffac:	08028ebc 	.word	0x08028ebc
 801ffb0:	08028f58 	.word	0x08028f58
 801ffb4:	08028f30 	.word	0x08028f30

0801ffb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ffb8:	b580      	push	{r7, lr}
 801ffba:	b084      	sub	sp, #16
 801ffbc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ffbe:	f7f2 fc33 	bl	8012828 <sys_now>
 801ffc2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ffc4:	4b17      	ldr	r3, [pc, #92]	; (8020024 <sys_check_timeouts+0x6c>)
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ffca:	68bb      	ldr	r3, [r7, #8]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d022      	beq.n	8020016 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ffd0:	68bb      	ldr	r3, [r7, #8]
 801ffd2:	685b      	ldr	r3, [r3, #4]
 801ffd4:	68fa      	ldr	r2, [r7, #12]
 801ffd6:	1ad3      	subs	r3, r2, r3
 801ffd8:	0fdb      	lsrs	r3, r3, #31
 801ffda:	f003 0301 	and.w	r3, r3, #1
 801ffde:	b2db      	uxtb	r3, r3
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d11a      	bne.n	802001a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ffe4:	68bb      	ldr	r3, [r7, #8]
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	4a0e      	ldr	r2, [pc, #56]	; (8020024 <sys_check_timeouts+0x6c>)
 801ffea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ffec:	68bb      	ldr	r3, [r7, #8]
 801ffee:	689b      	ldr	r3, [r3, #8]
 801fff0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801fff2:	68bb      	ldr	r3, [r7, #8]
 801fff4:	68db      	ldr	r3, [r3, #12]
 801fff6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801fff8:	68bb      	ldr	r3, [r7, #8]
 801fffa:	685b      	ldr	r3, [r3, #4]
 801fffc:	4a0a      	ldr	r2, [pc, #40]	; (8020028 <sys_check_timeouts+0x70>)
 801fffe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8020000:	68b9      	ldr	r1, [r7, #8]
 8020002:	200a      	movs	r0, #10
 8020004:	f7f9 fc1a 	bl	801983c <memp_free>
    if (handler != NULL) {
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d0da      	beq.n	801ffc4 <sys_check_timeouts+0xc>
      handler(arg);
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	6838      	ldr	r0, [r7, #0]
 8020012:	4798      	blx	r3
  do {
 8020014:	e7d6      	b.n	801ffc4 <sys_check_timeouts+0xc>
      return;
 8020016:	bf00      	nop
 8020018:	e000      	b.n	802001c <sys_check_timeouts+0x64>
      return;
 802001a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 802001c:	3710      	adds	r7, #16
 802001e:	46bd      	mov	sp, r7
 8020020:	bd80      	pop	{r7, pc}
 8020022:	bf00      	nop
 8020024:	2400d04c 	.word	0x2400d04c
 8020028:	2400d050 	.word	0x2400d050

0802002c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 802002c:	b580      	push	{r7, lr}
 802002e:	b082      	sub	sp, #8
 8020030:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020032:	4b16      	ldr	r3, [pc, #88]	; (802008c <sys_timeouts_sleeptime+0x60>)
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	2b00      	cmp	r3, #0
 8020038:	d102      	bne.n	8020040 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 802003a:	f04f 33ff 	mov.w	r3, #4294967295
 802003e:	e020      	b.n	8020082 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8020040:	f7f2 fbf2 	bl	8012828 <sys_now>
 8020044:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8020046:	4b11      	ldr	r3, [pc, #68]	; (802008c <sys_timeouts_sleeptime+0x60>)
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	685a      	ldr	r2, [r3, #4]
 802004c:	687b      	ldr	r3, [r7, #4]
 802004e:	1ad3      	subs	r3, r2, r3
 8020050:	0fdb      	lsrs	r3, r3, #31
 8020052:	f003 0301 	and.w	r3, r3, #1
 8020056:	b2db      	uxtb	r3, r3
 8020058:	2b00      	cmp	r3, #0
 802005a:	d001      	beq.n	8020060 <sys_timeouts_sleeptime+0x34>
    return 0;
 802005c:	2300      	movs	r3, #0
 802005e:	e010      	b.n	8020082 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8020060:	4b0a      	ldr	r3, [pc, #40]	; (802008c <sys_timeouts_sleeptime+0x60>)
 8020062:	681b      	ldr	r3, [r3, #0]
 8020064:	685a      	ldr	r2, [r3, #4]
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	1ad3      	subs	r3, r2, r3
 802006a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 802006c:	683b      	ldr	r3, [r7, #0]
 802006e:	2b00      	cmp	r3, #0
 8020070:	da06      	bge.n	8020080 <sys_timeouts_sleeptime+0x54>
 8020072:	4b07      	ldr	r3, [pc, #28]	; (8020090 <sys_timeouts_sleeptime+0x64>)
 8020074:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8020078:	4906      	ldr	r1, [pc, #24]	; (8020094 <sys_timeouts_sleeptime+0x68>)
 802007a:	4807      	ldr	r0, [pc, #28]	; (8020098 <sys_timeouts_sleeptime+0x6c>)
 802007c:	f005 ff72 	bl	8025f64 <iprintf>
    return ret;
 8020080:	683b      	ldr	r3, [r7, #0]
  }
}
 8020082:	4618      	mov	r0, r3
 8020084:	3708      	adds	r7, #8
 8020086:	46bd      	mov	sp, r7
 8020088:	bd80      	pop	{r7, pc}
 802008a:	bf00      	nop
 802008c:	2400d04c 	.word	0x2400d04c
 8020090:	08028ebc 	.word	0x08028ebc
 8020094:	08028f90 	.word	0x08028f90
 8020098:	08028f30 	.word	0x08028f30

0802009c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 802009c:	b580      	push	{r7, lr}
 802009e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80200a0:	f005 ffee 	bl	8026080 <rand>
 80200a4:	4603      	mov	r3, r0
 80200a6:	b29b      	uxth	r3, r3
 80200a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80200ac:	b29b      	uxth	r3, r3
 80200ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80200b2:	b29a      	uxth	r2, r3
 80200b4:	4b01      	ldr	r3, [pc, #4]	; (80200bc <udp_init+0x20>)
 80200b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80200b8:	bf00      	nop
 80200ba:	bd80      	pop	{r7, pc}
 80200bc:	24000460 	.word	0x24000460

080200c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80200c0:	b480      	push	{r7}
 80200c2:	b083      	sub	sp, #12
 80200c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80200c6:	2300      	movs	r3, #0
 80200c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80200ca:	4b17      	ldr	r3, [pc, #92]	; (8020128 <udp_new_port+0x68>)
 80200cc:	881b      	ldrh	r3, [r3, #0]
 80200ce:	1c5a      	adds	r2, r3, #1
 80200d0:	b291      	uxth	r1, r2
 80200d2:	4a15      	ldr	r2, [pc, #84]	; (8020128 <udp_new_port+0x68>)
 80200d4:	8011      	strh	r1, [r2, #0]
 80200d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80200da:	4293      	cmp	r3, r2
 80200dc:	d103      	bne.n	80200e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80200de:	4b12      	ldr	r3, [pc, #72]	; (8020128 <udp_new_port+0x68>)
 80200e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80200e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80200e6:	4b11      	ldr	r3, [pc, #68]	; (802012c <udp_new_port+0x6c>)
 80200e8:	681b      	ldr	r3, [r3, #0]
 80200ea:	603b      	str	r3, [r7, #0]
 80200ec:	e011      	b.n	8020112 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80200ee:	683b      	ldr	r3, [r7, #0]
 80200f0:	8a5a      	ldrh	r2, [r3, #18]
 80200f2:	4b0d      	ldr	r3, [pc, #52]	; (8020128 <udp_new_port+0x68>)
 80200f4:	881b      	ldrh	r3, [r3, #0]
 80200f6:	429a      	cmp	r2, r3
 80200f8:	d108      	bne.n	802010c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80200fa:	88fb      	ldrh	r3, [r7, #6]
 80200fc:	3301      	adds	r3, #1
 80200fe:	80fb      	strh	r3, [r7, #6]
 8020100:	88fb      	ldrh	r3, [r7, #6]
 8020102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020106:	d3e0      	bcc.n	80200ca <udp_new_port+0xa>
        return 0;
 8020108:	2300      	movs	r3, #0
 802010a:	e007      	b.n	802011c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802010c:	683b      	ldr	r3, [r7, #0]
 802010e:	68db      	ldr	r3, [r3, #12]
 8020110:	603b      	str	r3, [r7, #0]
 8020112:	683b      	ldr	r3, [r7, #0]
 8020114:	2b00      	cmp	r3, #0
 8020116:	d1ea      	bne.n	80200ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8020118:	4b03      	ldr	r3, [pc, #12]	; (8020128 <udp_new_port+0x68>)
 802011a:	881b      	ldrh	r3, [r3, #0]
}
 802011c:	4618      	mov	r0, r3
 802011e:	370c      	adds	r7, #12
 8020120:	46bd      	mov	sp, r7
 8020122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020126:	4770      	bx	lr
 8020128:	24000460 	.word	0x24000460
 802012c:	2400d058 	.word	0x2400d058

08020130 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8020130:	b580      	push	{r7, lr}
 8020132:	b084      	sub	sp, #16
 8020134:	af00      	add	r7, sp, #0
 8020136:	60f8      	str	r0, [r7, #12]
 8020138:	60b9      	str	r1, [r7, #8]
 802013a:	4613      	mov	r3, r2
 802013c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 802013e:	68fb      	ldr	r3, [r7, #12]
 8020140:	2b00      	cmp	r3, #0
 8020142:	d105      	bne.n	8020150 <udp_input_local_match+0x20>
 8020144:	4b27      	ldr	r3, [pc, #156]	; (80201e4 <udp_input_local_match+0xb4>)
 8020146:	2287      	movs	r2, #135	; 0x87
 8020148:	4927      	ldr	r1, [pc, #156]	; (80201e8 <udp_input_local_match+0xb8>)
 802014a:	4828      	ldr	r0, [pc, #160]	; (80201ec <udp_input_local_match+0xbc>)
 802014c:	f005 ff0a 	bl	8025f64 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020150:	68bb      	ldr	r3, [r7, #8]
 8020152:	2b00      	cmp	r3, #0
 8020154:	d105      	bne.n	8020162 <udp_input_local_match+0x32>
 8020156:	4b23      	ldr	r3, [pc, #140]	; (80201e4 <udp_input_local_match+0xb4>)
 8020158:	2288      	movs	r2, #136	; 0x88
 802015a:	4925      	ldr	r1, [pc, #148]	; (80201f0 <udp_input_local_match+0xc0>)
 802015c:	4823      	ldr	r0, [pc, #140]	; (80201ec <udp_input_local_match+0xbc>)
 802015e:	f005 ff01 	bl	8025f64 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	7a1b      	ldrb	r3, [r3, #8]
 8020166:	2b00      	cmp	r3, #0
 8020168:	d00b      	beq.n	8020182 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802016a:	68fb      	ldr	r3, [r7, #12]
 802016c:	7a1a      	ldrb	r2, [r3, #8]
 802016e:	4b21      	ldr	r3, [pc, #132]	; (80201f4 <udp_input_local_match+0xc4>)
 8020170:	685b      	ldr	r3, [r3, #4]
 8020172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020176:	3301      	adds	r3, #1
 8020178:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802017a:	429a      	cmp	r2, r3
 802017c:	d001      	beq.n	8020182 <udp_input_local_match+0x52>
    return 0;
 802017e:	2300      	movs	r3, #0
 8020180:	e02b      	b.n	80201da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8020182:	79fb      	ldrb	r3, [r7, #7]
 8020184:	2b00      	cmp	r3, #0
 8020186:	d018      	beq.n	80201ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	2b00      	cmp	r3, #0
 802018c:	d013      	beq.n	80201b6 <udp_input_local_match+0x86>
 802018e:	68fb      	ldr	r3, [r7, #12]
 8020190:	681b      	ldr	r3, [r3, #0]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d00f      	beq.n	80201b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020196:	4b17      	ldr	r3, [pc, #92]	; (80201f4 <udp_input_local_match+0xc4>)
 8020198:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802019a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802019e:	d00a      	beq.n	80201b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80201a0:	68fb      	ldr	r3, [r7, #12]
 80201a2:	681a      	ldr	r2, [r3, #0]
 80201a4:	4b13      	ldr	r3, [pc, #76]	; (80201f4 <udp_input_local_match+0xc4>)
 80201a6:	695b      	ldr	r3, [r3, #20]
 80201a8:	405a      	eors	r2, r3
 80201aa:	68bb      	ldr	r3, [r7, #8]
 80201ac:	3308      	adds	r3, #8
 80201ae:	681b      	ldr	r3, [r3, #0]
 80201b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d110      	bne.n	80201d8 <udp_input_local_match+0xa8>
          return 1;
 80201b6:	2301      	movs	r3, #1
 80201b8:	e00f      	b.n	80201da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80201ba:	68fb      	ldr	r3, [r7, #12]
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d009      	beq.n	80201d4 <udp_input_local_match+0xa4>
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	681b      	ldr	r3, [r3, #0]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d005      	beq.n	80201d4 <udp_input_local_match+0xa4>
 80201c8:	68fb      	ldr	r3, [r7, #12]
 80201ca:	681a      	ldr	r2, [r3, #0]
 80201cc:	4b09      	ldr	r3, [pc, #36]	; (80201f4 <udp_input_local_match+0xc4>)
 80201ce:	695b      	ldr	r3, [r3, #20]
 80201d0:	429a      	cmp	r2, r3
 80201d2:	d101      	bne.n	80201d8 <udp_input_local_match+0xa8>
        return 1;
 80201d4:	2301      	movs	r3, #1
 80201d6:	e000      	b.n	80201da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80201d8:	2300      	movs	r3, #0
}
 80201da:	4618      	mov	r0, r3
 80201dc:	3710      	adds	r7, #16
 80201de:	46bd      	mov	sp, r7
 80201e0:	bd80      	pop	{r7, pc}
 80201e2:	bf00      	nop
 80201e4:	08028fa4 	.word	0x08028fa4
 80201e8:	08028fd4 	.word	0x08028fd4
 80201ec:	08028ff8 	.word	0x08028ff8
 80201f0:	08029020 	.word	0x08029020
 80201f4:	24009edc 	.word	0x24009edc

080201f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80201f8:	b590      	push	{r4, r7, lr}
 80201fa:	b08d      	sub	sp, #52	; 0x34
 80201fc:	af02      	add	r7, sp, #8
 80201fe:	6078      	str	r0, [r7, #4]
 8020200:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8020202:	2300      	movs	r3, #0
 8020204:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	2b00      	cmp	r3, #0
 802020a:	d105      	bne.n	8020218 <udp_input+0x20>
 802020c:	4b7c      	ldr	r3, [pc, #496]	; (8020400 <udp_input+0x208>)
 802020e:	22cf      	movs	r2, #207	; 0xcf
 8020210:	497c      	ldr	r1, [pc, #496]	; (8020404 <udp_input+0x20c>)
 8020212:	487d      	ldr	r0, [pc, #500]	; (8020408 <udp_input+0x210>)
 8020214:	f005 fea6 	bl	8025f64 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020218:	683b      	ldr	r3, [r7, #0]
 802021a:	2b00      	cmp	r3, #0
 802021c:	d105      	bne.n	802022a <udp_input+0x32>
 802021e:	4b78      	ldr	r3, [pc, #480]	; (8020400 <udp_input+0x208>)
 8020220:	22d0      	movs	r2, #208	; 0xd0
 8020222:	497a      	ldr	r1, [pc, #488]	; (802040c <udp_input+0x214>)
 8020224:	4878      	ldr	r0, [pc, #480]	; (8020408 <udp_input+0x210>)
 8020226:	f005 fe9d 	bl	8025f64 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	895b      	ldrh	r3, [r3, #10]
 802022e:	2b07      	cmp	r3, #7
 8020230:	d803      	bhi.n	802023a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8020232:	6878      	ldr	r0, [r7, #4]
 8020234:	f7fa f9b2 	bl	801a59c <pbuf_free>
    goto end;
 8020238:	e0de      	b.n	80203f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	685b      	ldr	r3, [r3, #4]
 802023e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020240:	4b73      	ldr	r3, [pc, #460]	; (8020410 <udp_input+0x218>)
 8020242:	695b      	ldr	r3, [r3, #20]
 8020244:	4a72      	ldr	r2, [pc, #456]	; (8020410 <udp_input+0x218>)
 8020246:	6812      	ldr	r2, [r2, #0]
 8020248:	4611      	mov	r1, r2
 802024a:	4618      	mov	r0, r3
 802024c:	f003 fe2e 	bl	8023eac <ip4_addr_isbroadcast_u32>
 8020250:	4603      	mov	r3, r0
 8020252:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020254:	697b      	ldr	r3, [r7, #20]
 8020256:	881b      	ldrh	r3, [r3, #0]
 8020258:	b29b      	uxth	r3, r3
 802025a:	4618      	mov	r0, r3
 802025c:	f7f8 fce8 	bl	8018c30 <lwip_htons>
 8020260:	4603      	mov	r3, r0
 8020262:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8020264:	697b      	ldr	r3, [r7, #20]
 8020266:	885b      	ldrh	r3, [r3, #2]
 8020268:	b29b      	uxth	r3, r3
 802026a:	4618      	mov	r0, r3
 802026c:	f7f8 fce0 	bl	8018c30 <lwip_htons>
 8020270:	4603      	mov	r3, r0
 8020272:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8020274:	2300      	movs	r3, #0
 8020276:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8020278:	2300      	movs	r3, #0
 802027a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 802027c:	2300      	movs	r3, #0
 802027e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020280:	4b64      	ldr	r3, [pc, #400]	; (8020414 <udp_input+0x21c>)
 8020282:	681b      	ldr	r3, [r3, #0]
 8020284:	627b      	str	r3, [r7, #36]	; 0x24
 8020286:	e054      	b.n	8020332 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802028a:	8a5b      	ldrh	r3, [r3, #18]
 802028c:	89fa      	ldrh	r2, [r7, #14]
 802028e:	429a      	cmp	r2, r3
 8020290:	d14a      	bne.n	8020328 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8020292:	7cfb      	ldrb	r3, [r7, #19]
 8020294:	461a      	mov	r2, r3
 8020296:	6839      	ldr	r1, [r7, #0]
 8020298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802029a:	f7ff ff49 	bl	8020130 <udp_input_local_match>
 802029e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d041      	beq.n	8020328 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80202a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202a6:	7c1b      	ldrb	r3, [r3, #16]
 80202a8:	f003 0304 	and.w	r3, r3, #4
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d11d      	bne.n	80202ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80202b0:	69fb      	ldr	r3, [r7, #28]
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d102      	bne.n	80202bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80202b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202b8:	61fb      	str	r3, [r7, #28]
 80202ba:	e017      	b.n	80202ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80202bc:	7cfb      	ldrb	r3, [r7, #19]
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d014      	beq.n	80202ec <udp_input+0xf4>
 80202c2:	4b53      	ldr	r3, [pc, #332]	; (8020410 <udp_input+0x218>)
 80202c4:	695b      	ldr	r3, [r3, #20]
 80202c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80202ca:	d10f      	bne.n	80202ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80202cc:	69fb      	ldr	r3, [r7, #28]
 80202ce:	681a      	ldr	r2, [r3, #0]
 80202d0:	683b      	ldr	r3, [r7, #0]
 80202d2:	3304      	adds	r3, #4
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	429a      	cmp	r2, r3
 80202d8:	d008      	beq.n	80202ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80202da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202dc:	681a      	ldr	r2, [r3, #0]
 80202de:	683b      	ldr	r3, [r7, #0]
 80202e0:	3304      	adds	r3, #4
 80202e2:	681b      	ldr	r3, [r3, #0]
 80202e4:	429a      	cmp	r2, r3
 80202e6:	d101      	bne.n	80202ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80202e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80202ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202ee:	8a9b      	ldrh	r3, [r3, #20]
 80202f0:	8a3a      	ldrh	r2, [r7, #16]
 80202f2:	429a      	cmp	r2, r3
 80202f4:	d118      	bne.n	8020328 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80202f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d005      	beq.n	802030a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80202fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020300:	685a      	ldr	r2, [r3, #4]
 8020302:	4b43      	ldr	r3, [pc, #268]	; (8020410 <udp_input+0x218>)
 8020304:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020306:	429a      	cmp	r2, r3
 8020308:	d10e      	bne.n	8020328 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 802030a:	6a3b      	ldr	r3, [r7, #32]
 802030c:	2b00      	cmp	r3, #0
 802030e:	d014      	beq.n	802033a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8020310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020312:	68da      	ldr	r2, [r3, #12]
 8020314:	6a3b      	ldr	r3, [r7, #32]
 8020316:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8020318:	4b3e      	ldr	r3, [pc, #248]	; (8020414 <udp_input+0x21c>)
 802031a:	681a      	ldr	r2, [r3, #0]
 802031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802031e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8020320:	4a3c      	ldr	r2, [pc, #240]	; (8020414 <udp_input+0x21c>)
 8020322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020324:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8020326:	e008      	b.n	802033a <udp_input+0x142>
      }
    }

    prev = pcb;
 8020328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802032a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802032e:	68db      	ldr	r3, [r3, #12]
 8020330:	627b      	str	r3, [r7, #36]	; 0x24
 8020332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020334:	2b00      	cmp	r3, #0
 8020336:	d1a7      	bne.n	8020288 <udp_input+0x90>
 8020338:	e000      	b.n	802033c <udp_input+0x144>
        break;
 802033a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 802033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802033e:	2b00      	cmp	r3, #0
 8020340:	d101      	bne.n	8020346 <udp_input+0x14e>
    pcb = uncon_pcb;
 8020342:	69fb      	ldr	r3, [r7, #28]
 8020344:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8020346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020348:	2b00      	cmp	r3, #0
 802034a:	d002      	beq.n	8020352 <udp_input+0x15a>
    for_us = 1;
 802034c:	2301      	movs	r3, #1
 802034e:	76fb      	strb	r3, [r7, #27]
 8020350:	e00a      	b.n	8020368 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8020352:	683b      	ldr	r3, [r7, #0]
 8020354:	3304      	adds	r3, #4
 8020356:	681a      	ldr	r2, [r3, #0]
 8020358:	4b2d      	ldr	r3, [pc, #180]	; (8020410 <udp_input+0x218>)
 802035a:	695b      	ldr	r3, [r3, #20]
 802035c:	429a      	cmp	r2, r3
 802035e:	bf0c      	ite	eq
 8020360:	2301      	moveq	r3, #1
 8020362:	2300      	movne	r3, #0
 8020364:	b2db      	uxtb	r3, r3
 8020366:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8020368:	7efb      	ldrb	r3, [r7, #27]
 802036a:	2b00      	cmp	r3, #0
 802036c:	d041      	beq.n	80203f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 802036e:	2108      	movs	r1, #8
 8020370:	6878      	ldr	r0, [r7, #4]
 8020372:	f7fa f88d 	bl	801a490 <pbuf_remove_header>
 8020376:	4603      	mov	r3, r0
 8020378:	2b00      	cmp	r3, #0
 802037a:	d00a      	beq.n	8020392 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 802037c:	4b20      	ldr	r3, [pc, #128]	; (8020400 <udp_input+0x208>)
 802037e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8020382:	4925      	ldr	r1, [pc, #148]	; (8020418 <udp_input+0x220>)
 8020384:	4820      	ldr	r0, [pc, #128]	; (8020408 <udp_input+0x210>)
 8020386:	f005 fded 	bl	8025f64 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 802038a:	6878      	ldr	r0, [r7, #4]
 802038c:	f7fa f906 	bl	801a59c <pbuf_free>
      goto end;
 8020390:	e032      	b.n	80203f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8020392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020394:	2b00      	cmp	r3, #0
 8020396:	d012      	beq.n	80203be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8020398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802039a:	699b      	ldr	r3, [r3, #24]
 802039c:	2b00      	cmp	r3, #0
 802039e:	d00a      	beq.n	80203b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80203a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203a2:	699c      	ldr	r4, [r3, #24]
 80203a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203a6:	69d8      	ldr	r0, [r3, #28]
 80203a8:	8a3b      	ldrh	r3, [r7, #16]
 80203aa:	9300      	str	r3, [sp, #0]
 80203ac:	4b1b      	ldr	r3, [pc, #108]	; (802041c <udp_input+0x224>)
 80203ae:	687a      	ldr	r2, [r7, #4]
 80203b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80203b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80203b4:	e021      	b.n	80203fa <udp_input+0x202>
        pbuf_free(p);
 80203b6:	6878      	ldr	r0, [r7, #4]
 80203b8:	f7fa f8f0 	bl	801a59c <pbuf_free>
        goto end;
 80203bc:	e01c      	b.n	80203f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80203be:	7cfb      	ldrb	r3, [r7, #19]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	d112      	bne.n	80203ea <udp_input+0x1f2>
 80203c4:	4b12      	ldr	r3, [pc, #72]	; (8020410 <udp_input+0x218>)
 80203c6:	695b      	ldr	r3, [r3, #20]
 80203c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80203cc:	2be0      	cmp	r3, #224	; 0xe0
 80203ce:	d00c      	beq.n	80203ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80203d0:	4b0f      	ldr	r3, [pc, #60]	; (8020410 <udp_input+0x218>)
 80203d2:	899b      	ldrh	r3, [r3, #12]
 80203d4:	3308      	adds	r3, #8
 80203d6:	b29b      	uxth	r3, r3
 80203d8:	b21b      	sxth	r3, r3
 80203da:	4619      	mov	r1, r3
 80203dc:	6878      	ldr	r0, [r7, #4]
 80203de:	f7fa f8ca 	bl	801a576 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80203e2:	2103      	movs	r1, #3
 80203e4:	6878      	ldr	r0, [r7, #4]
 80203e6:	f003 fa19 	bl	802381c <icmp_dest_unreach>
      pbuf_free(p);
 80203ea:	6878      	ldr	r0, [r7, #4]
 80203ec:	f7fa f8d6 	bl	801a59c <pbuf_free>
  return;
 80203f0:	e003      	b.n	80203fa <udp_input+0x202>
    pbuf_free(p);
 80203f2:	6878      	ldr	r0, [r7, #4]
 80203f4:	f7fa f8d2 	bl	801a59c <pbuf_free>
  return;
 80203f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80203fa:	372c      	adds	r7, #44	; 0x2c
 80203fc:	46bd      	mov	sp, r7
 80203fe:	bd90      	pop	{r4, r7, pc}
 8020400:	08028fa4 	.word	0x08028fa4
 8020404:	08029048 	.word	0x08029048
 8020408:	08028ff8 	.word	0x08028ff8
 802040c:	08029060 	.word	0x08029060
 8020410:	24009edc 	.word	0x24009edc
 8020414:	2400d058 	.word	0x2400d058
 8020418:	0802907c 	.word	0x0802907c
 802041c:	24009eec 	.word	0x24009eec

08020420 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8020420:	b580      	push	{r7, lr}
 8020422:	b088      	sub	sp, #32
 8020424:	af02      	add	r7, sp, #8
 8020426:	60f8      	str	r0, [r7, #12]
 8020428:	60b9      	str	r1, [r7, #8]
 802042a:	607a      	str	r2, [r7, #4]
 802042c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802042e:	68fb      	ldr	r3, [r7, #12]
 8020430:	2b00      	cmp	r3, #0
 8020432:	d109      	bne.n	8020448 <udp_sendto_if+0x28>
 8020434:	4b2e      	ldr	r3, [pc, #184]	; (80204f0 <udp_sendto_if+0xd0>)
 8020436:	f44f 7220 	mov.w	r2, #640	; 0x280
 802043a:	492e      	ldr	r1, [pc, #184]	; (80204f4 <udp_sendto_if+0xd4>)
 802043c:	482e      	ldr	r0, [pc, #184]	; (80204f8 <udp_sendto_if+0xd8>)
 802043e:	f005 fd91 	bl	8025f64 <iprintf>
 8020442:	f06f 030f 	mvn.w	r3, #15
 8020446:	e04f      	b.n	80204e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8020448:	68bb      	ldr	r3, [r7, #8]
 802044a:	2b00      	cmp	r3, #0
 802044c:	d109      	bne.n	8020462 <udp_sendto_if+0x42>
 802044e:	4b28      	ldr	r3, [pc, #160]	; (80204f0 <udp_sendto_if+0xd0>)
 8020450:	f240 2281 	movw	r2, #641	; 0x281
 8020454:	4929      	ldr	r1, [pc, #164]	; (80204fc <udp_sendto_if+0xdc>)
 8020456:	4828      	ldr	r0, [pc, #160]	; (80204f8 <udp_sendto_if+0xd8>)
 8020458:	f005 fd84 	bl	8025f64 <iprintf>
 802045c:	f06f 030f 	mvn.w	r3, #15
 8020460:	e042      	b.n	80204e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	2b00      	cmp	r3, #0
 8020466:	d109      	bne.n	802047c <udp_sendto_if+0x5c>
 8020468:	4b21      	ldr	r3, [pc, #132]	; (80204f0 <udp_sendto_if+0xd0>)
 802046a:	f240 2282 	movw	r2, #642	; 0x282
 802046e:	4924      	ldr	r1, [pc, #144]	; (8020500 <udp_sendto_if+0xe0>)
 8020470:	4821      	ldr	r0, [pc, #132]	; (80204f8 <udp_sendto_if+0xd8>)
 8020472:	f005 fd77 	bl	8025f64 <iprintf>
 8020476:	f06f 030f 	mvn.w	r3, #15
 802047a:	e035      	b.n	80204e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 802047c:	6a3b      	ldr	r3, [r7, #32]
 802047e:	2b00      	cmp	r3, #0
 8020480:	d109      	bne.n	8020496 <udp_sendto_if+0x76>
 8020482:	4b1b      	ldr	r3, [pc, #108]	; (80204f0 <udp_sendto_if+0xd0>)
 8020484:	f240 2283 	movw	r2, #643	; 0x283
 8020488:	491e      	ldr	r1, [pc, #120]	; (8020504 <udp_sendto_if+0xe4>)
 802048a:	481b      	ldr	r0, [pc, #108]	; (80204f8 <udp_sendto_if+0xd8>)
 802048c:	f005 fd6a 	bl	8025f64 <iprintf>
 8020490:	f06f 030f 	mvn.w	r3, #15
 8020494:	e028      	b.n	80204e8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020496:	68fb      	ldr	r3, [r7, #12]
 8020498:	2b00      	cmp	r3, #0
 802049a:	d009      	beq.n	80204b0 <udp_sendto_if+0x90>
 802049c:	68fb      	ldr	r3, [r7, #12]
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	d005      	beq.n	80204b0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	681b      	ldr	r3, [r3, #0]
 80204a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80204ac:	2be0      	cmp	r3, #224	; 0xe0
 80204ae:	d103      	bne.n	80204b8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80204b0:	6a3b      	ldr	r3, [r7, #32]
 80204b2:	3304      	adds	r3, #4
 80204b4:	617b      	str	r3, [r7, #20]
 80204b6:	e00b      	b.n	80204d0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80204b8:	68fb      	ldr	r3, [r7, #12]
 80204ba:	681a      	ldr	r2, [r3, #0]
 80204bc:	6a3b      	ldr	r3, [r7, #32]
 80204be:	3304      	adds	r3, #4
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	429a      	cmp	r2, r3
 80204c4:	d002      	beq.n	80204cc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80204c6:	f06f 0303 	mvn.w	r3, #3
 80204ca:	e00d      	b.n	80204e8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80204cc:	68fb      	ldr	r3, [r7, #12]
 80204ce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80204d0:	887a      	ldrh	r2, [r7, #2]
 80204d2:	697b      	ldr	r3, [r7, #20]
 80204d4:	9301      	str	r3, [sp, #4]
 80204d6:	6a3b      	ldr	r3, [r7, #32]
 80204d8:	9300      	str	r3, [sp, #0]
 80204da:	4613      	mov	r3, r2
 80204dc:	687a      	ldr	r2, [r7, #4]
 80204de:	68b9      	ldr	r1, [r7, #8]
 80204e0:	68f8      	ldr	r0, [r7, #12]
 80204e2:	f000 f811 	bl	8020508 <udp_sendto_if_src>
 80204e6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80204e8:	4618      	mov	r0, r3
 80204ea:	3718      	adds	r7, #24
 80204ec:	46bd      	mov	sp, r7
 80204ee:	bd80      	pop	{r7, pc}
 80204f0:	08028fa4 	.word	0x08028fa4
 80204f4:	08029118 	.word	0x08029118
 80204f8:	08028ff8 	.word	0x08028ff8
 80204fc:	08029134 	.word	0x08029134
 8020500:	08029150 	.word	0x08029150
 8020504:	08029170 	.word	0x08029170

08020508 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8020508:	b580      	push	{r7, lr}
 802050a:	b08c      	sub	sp, #48	; 0x30
 802050c:	af04      	add	r7, sp, #16
 802050e:	60f8      	str	r0, [r7, #12]
 8020510:	60b9      	str	r1, [r7, #8]
 8020512:	607a      	str	r2, [r7, #4]
 8020514:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8020516:	68fb      	ldr	r3, [r7, #12]
 8020518:	2b00      	cmp	r3, #0
 802051a:	d109      	bne.n	8020530 <udp_sendto_if_src+0x28>
 802051c:	4b65      	ldr	r3, [pc, #404]	; (80206b4 <udp_sendto_if_src+0x1ac>)
 802051e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8020522:	4965      	ldr	r1, [pc, #404]	; (80206b8 <udp_sendto_if_src+0x1b0>)
 8020524:	4865      	ldr	r0, [pc, #404]	; (80206bc <udp_sendto_if_src+0x1b4>)
 8020526:	f005 fd1d 	bl	8025f64 <iprintf>
 802052a:	f06f 030f 	mvn.w	r3, #15
 802052e:	e0bc      	b.n	80206aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8020530:	68bb      	ldr	r3, [r7, #8]
 8020532:	2b00      	cmp	r3, #0
 8020534:	d109      	bne.n	802054a <udp_sendto_if_src+0x42>
 8020536:	4b5f      	ldr	r3, [pc, #380]	; (80206b4 <udp_sendto_if_src+0x1ac>)
 8020538:	f240 22d2 	movw	r2, #722	; 0x2d2
 802053c:	4960      	ldr	r1, [pc, #384]	; (80206c0 <udp_sendto_if_src+0x1b8>)
 802053e:	485f      	ldr	r0, [pc, #380]	; (80206bc <udp_sendto_if_src+0x1b4>)
 8020540:	f005 fd10 	bl	8025f64 <iprintf>
 8020544:	f06f 030f 	mvn.w	r3, #15
 8020548:	e0af      	b.n	80206aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	2b00      	cmp	r3, #0
 802054e:	d109      	bne.n	8020564 <udp_sendto_if_src+0x5c>
 8020550:	4b58      	ldr	r3, [pc, #352]	; (80206b4 <udp_sendto_if_src+0x1ac>)
 8020552:	f240 22d3 	movw	r2, #723	; 0x2d3
 8020556:	495b      	ldr	r1, [pc, #364]	; (80206c4 <udp_sendto_if_src+0x1bc>)
 8020558:	4858      	ldr	r0, [pc, #352]	; (80206bc <udp_sendto_if_src+0x1b4>)
 802055a:	f005 fd03 	bl	8025f64 <iprintf>
 802055e:	f06f 030f 	mvn.w	r3, #15
 8020562:	e0a2      	b.n	80206aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8020564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020566:	2b00      	cmp	r3, #0
 8020568:	d109      	bne.n	802057e <udp_sendto_if_src+0x76>
 802056a:	4b52      	ldr	r3, [pc, #328]	; (80206b4 <udp_sendto_if_src+0x1ac>)
 802056c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8020570:	4955      	ldr	r1, [pc, #340]	; (80206c8 <udp_sendto_if_src+0x1c0>)
 8020572:	4852      	ldr	r0, [pc, #328]	; (80206bc <udp_sendto_if_src+0x1b4>)
 8020574:	f005 fcf6 	bl	8025f64 <iprintf>
 8020578:	f06f 030f 	mvn.w	r3, #15
 802057c:	e095      	b.n	80206aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020580:	2b00      	cmp	r3, #0
 8020582:	d109      	bne.n	8020598 <udp_sendto_if_src+0x90>
 8020584:	4b4b      	ldr	r3, [pc, #300]	; (80206b4 <udp_sendto_if_src+0x1ac>)
 8020586:	f240 22d5 	movw	r2, #725	; 0x2d5
 802058a:	4950      	ldr	r1, [pc, #320]	; (80206cc <udp_sendto_if_src+0x1c4>)
 802058c:	484b      	ldr	r0, [pc, #300]	; (80206bc <udp_sendto_if_src+0x1b4>)
 802058e:	f005 fce9 	bl	8025f64 <iprintf>
 8020592:	f06f 030f 	mvn.w	r3, #15
 8020596:	e088      	b.n	80206aa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	8a5b      	ldrh	r3, [r3, #18]
 802059c:	2b00      	cmp	r3, #0
 802059e:	d10f      	bne.n	80205c0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80205a0:	68f9      	ldr	r1, [r7, #12]
 80205a2:	68fb      	ldr	r3, [r7, #12]
 80205a4:	8a5b      	ldrh	r3, [r3, #18]
 80205a6:	461a      	mov	r2, r3
 80205a8:	68f8      	ldr	r0, [r7, #12]
 80205aa:	f000 f893 	bl	80206d4 <udp_bind>
 80205ae:	4603      	mov	r3, r0
 80205b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80205b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80205b6:	2b00      	cmp	r3, #0
 80205b8:	d002      	beq.n	80205c0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80205ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80205be:	e074      	b.n	80206aa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80205c0:	68bb      	ldr	r3, [r7, #8]
 80205c2:	891b      	ldrh	r3, [r3, #8]
 80205c4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80205c8:	4293      	cmp	r3, r2
 80205ca:	d902      	bls.n	80205d2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80205cc:	f04f 33ff 	mov.w	r3, #4294967295
 80205d0:	e06b      	b.n	80206aa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80205d2:	2108      	movs	r1, #8
 80205d4:	68b8      	ldr	r0, [r7, #8]
 80205d6:	f7f9 ff4b 	bl	801a470 <pbuf_add_header>
 80205da:	4603      	mov	r3, r0
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d015      	beq.n	802060c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80205e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80205e4:	2108      	movs	r1, #8
 80205e6:	2022      	movs	r0, #34	; 0x22
 80205e8:	f7f9 fcf4 	bl	8019fd4 <pbuf_alloc>
 80205ec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80205ee:	69fb      	ldr	r3, [r7, #28]
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d102      	bne.n	80205fa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80205f4:	f04f 33ff 	mov.w	r3, #4294967295
 80205f8:	e057      	b.n	80206aa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80205fa:	68bb      	ldr	r3, [r7, #8]
 80205fc:	891b      	ldrh	r3, [r3, #8]
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d006      	beq.n	8020610 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8020602:	68b9      	ldr	r1, [r7, #8]
 8020604:	69f8      	ldr	r0, [r7, #28]
 8020606:	f7fa f8ed 	bl	801a7e4 <pbuf_chain>
 802060a:	e001      	b.n	8020610 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 802060c:	68bb      	ldr	r3, [r7, #8]
 802060e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8020610:	69fb      	ldr	r3, [r7, #28]
 8020612:	895b      	ldrh	r3, [r3, #10]
 8020614:	2b07      	cmp	r3, #7
 8020616:	d806      	bhi.n	8020626 <udp_sendto_if_src+0x11e>
 8020618:	4b26      	ldr	r3, [pc, #152]	; (80206b4 <udp_sendto_if_src+0x1ac>)
 802061a:	f240 320d 	movw	r2, #781	; 0x30d
 802061e:	492c      	ldr	r1, [pc, #176]	; (80206d0 <udp_sendto_if_src+0x1c8>)
 8020620:	4826      	ldr	r0, [pc, #152]	; (80206bc <udp_sendto_if_src+0x1b4>)
 8020622:	f005 fc9f 	bl	8025f64 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8020626:	69fb      	ldr	r3, [r7, #28]
 8020628:	685b      	ldr	r3, [r3, #4]
 802062a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 802062c:	68fb      	ldr	r3, [r7, #12]
 802062e:	8a5b      	ldrh	r3, [r3, #18]
 8020630:	4618      	mov	r0, r3
 8020632:	f7f8 fafd 	bl	8018c30 <lwip_htons>
 8020636:	4603      	mov	r3, r0
 8020638:	461a      	mov	r2, r3
 802063a:	697b      	ldr	r3, [r7, #20]
 802063c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 802063e:	887b      	ldrh	r3, [r7, #2]
 8020640:	4618      	mov	r0, r3
 8020642:	f7f8 faf5 	bl	8018c30 <lwip_htons>
 8020646:	4603      	mov	r3, r0
 8020648:	461a      	mov	r2, r3
 802064a:	697b      	ldr	r3, [r7, #20]
 802064c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 802064e:	697b      	ldr	r3, [r7, #20]
 8020650:	2200      	movs	r2, #0
 8020652:	719a      	strb	r2, [r3, #6]
 8020654:	2200      	movs	r2, #0
 8020656:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8020658:	69fb      	ldr	r3, [r7, #28]
 802065a:	891b      	ldrh	r3, [r3, #8]
 802065c:	4618      	mov	r0, r3
 802065e:	f7f8 fae7 	bl	8018c30 <lwip_htons>
 8020662:	4603      	mov	r3, r0
 8020664:	461a      	mov	r2, r3
 8020666:	697b      	ldr	r3, [r7, #20]
 8020668:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 802066a:	2311      	movs	r3, #17
 802066c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 802066e:	68fb      	ldr	r3, [r7, #12]
 8020670:	7adb      	ldrb	r3, [r3, #11]
 8020672:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8020674:	68fb      	ldr	r3, [r7, #12]
 8020676:	7a9b      	ldrb	r3, [r3, #10]
 8020678:	7cb9      	ldrb	r1, [r7, #18]
 802067a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802067c:	9202      	str	r2, [sp, #8]
 802067e:	7cfa      	ldrb	r2, [r7, #19]
 8020680:	9201      	str	r2, [sp, #4]
 8020682:	9300      	str	r3, [sp, #0]
 8020684:	460b      	mov	r3, r1
 8020686:	687a      	ldr	r2, [r7, #4]
 8020688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802068a:	69f8      	ldr	r0, [r7, #28]
 802068c:	f003 fb60 	bl	8023d50 <ip4_output_if_src>
 8020690:	4603      	mov	r3, r0
 8020692:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8020694:	69fa      	ldr	r2, [r7, #28]
 8020696:	68bb      	ldr	r3, [r7, #8]
 8020698:	429a      	cmp	r2, r3
 802069a:	d004      	beq.n	80206a6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 802069c:	69f8      	ldr	r0, [r7, #28]
 802069e:	f7f9 ff7d 	bl	801a59c <pbuf_free>
    q = NULL;
 80206a2:	2300      	movs	r3, #0
 80206a4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80206a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80206aa:	4618      	mov	r0, r3
 80206ac:	3720      	adds	r7, #32
 80206ae:	46bd      	mov	sp, r7
 80206b0:	bd80      	pop	{r7, pc}
 80206b2:	bf00      	nop
 80206b4:	08028fa4 	.word	0x08028fa4
 80206b8:	08029190 	.word	0x08029190
 80206bc:	08028ff8 	.word	0x08028ff8
 80206c0:	080291b0 	.word	0x080291b0
 80206c4:	080291d0 	.word	0x080291d0
 80206c8:	080291f4 	.word	0x080291f4
 80206cc:	08029218 	.word	0x08029218
 80206d0:	0802923c 	.word	0x0802923c

080206d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80206d4:	b580      	push	{r7, lr}
 80206d6:	b086      	sub	sp, #24
 80206d8:	af00      	add	r7, sp, #0
 80206da:	60f8      	str	r0, [r7, #12]
 80206dc:	60b9      	str	r1, [r7, #8]
 80206de:	4613      	mov	r3, r2
 80206e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80206e2:	68bb      	ldr	r3, [r7, #8]
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d101      	bne.n	80206ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80206e8:	4b39      	ldr	r3, [pc, #228]	; (80207d0 <udp_bind+0xfc>)
 80206ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80206ec:	68fb      	ldr	r3, [r7, #12]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d109      	bne.n	8020706 <udp_bind+0x32>
 80206f2:	4b38      	ldr	r3, [pc, #224]	; (80207d4 <udp_bind+0x100>)
 80206f4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80206f8:	4937      	ldr	r1, [pc, #220]	; (80207d8 <udp_bind+0x104>)
 80206fa:	4838      	ldr	r0, [pc, #224]	; (80207dc <udp_bind+0x108>)
 80206fc:	f005 fc32 	bl	8025f64 <iprintf>
 8020700:	f06f 030f 	mvn.w	r3, #15
 8020704:	e060      	b.n	80207c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8020706:	2300      	movs	r3, #0
 8020708:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802070a:	4b35      	ldr	r3, [pc, #212]	; (80207e0 <udp_bind+0x10c>)
 802070c:	681b      	ldr	r3, [r3, #0]
 802070e:	617b      	str	r3, [r7, #20]
 8020710:	e009      	b.n	8020726 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8020712:	68fa      	ldr	r2, [r7, #12]
 8020714:	697b      	ldr	r3, [r7, #20]
 8020716:	429a      	cmp	r2, r3
 8020718:	d102      	bne.n	8020720 <udp_bind+0x4c>
      rebind = 1;
 802071a:	2301      	movs	r3, #1
 802071c:	74fb      	strb	r3, [r7, #19]
      break;
 802071e:	e005      	b.n	802072c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020720:	697b      	ldr	r3, [r7, #20]
 8020722:	68db      	ldr	r3, [r3, #12]
 8020724:	617b      	str	r3, [r7, #20]
 8020726:	697b      	ldr	r3, [r7, #20]
 8020728:	2b00      	cmp	r3, #0
 802072a:	d1f2      	bne.n	8020712 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 802072c:	88fb      	ldrh	r3, [r7, #6]
 802072e:	2b00      	cmp	r3, #0
 8020730:	d109      	bne.n	8020746 <udp_bind+0x72>
    port = udp_new_port();
 8020732:	f7ff fcc5 	bl	80200c0 <udp_new_port>
 8020736:	4603      	mov	r3, r0
 8020738:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802073a:	88fb      	ldrh	r3, [r7, #6]
 802073c:	2b00      	cmp	r3, #0
 802073e:	d12c      	bne.n	802079a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8020740:	f06f 0307 	mvn.w	r3, #7
 8020744:	e040      	b.n	80207c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020746:	4b26      	ldr	r3, [pc, #152]	; (80207e0 <udp_bind+0x10c>)
 8020748:	681b      	ldr	r3, [r3, #0]
 802074a:	617b      	str	r3, [r7, #20]
 802074c:	e022      	b.n	8020794 <udp_bind+0xc0>
      if (pcb != ipcb) {
 802074e:	68fa      	ldr	r2, [r7, #12]
 8020750:	697b      	ldr	r3, [r7, #20]
 8020752:	429a      	cmp	r2, r3
 8020754:	d01b      	beq.n	802078e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8020756:	697b      	ldr	r3, [r7, #20]
 8020758:	8a5b      	ldrh	r3, [r3, #18]
 802075a:	88fa      	ldrh	r2, [r7, #6]
 802075c:	429a      	cmp	r2, r3
 802075e:	d116      	bne.n	802078e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020760:	697b      	ldr	r3, [r7, #20]
 8020762:	681a      	ldr	r2, [r3, #0]
 8020764:	68bb      	ldr	r3, [r7, #8]
 8020766:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8020768:	429a      	cmp	r2, r3
 802076a:	d00d      	beq.n	8020788 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802076c:	68bb      	ldr	r3, [r7, #8]
 802076e:	2b00      	cmp	r3, #0
 8020770:	d00a      	beq.n	8020788 <udp_bind+0xb4>
 8020772:	68bb      	ldr	r3, [r7, #8]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	2b00      	cmp	r3, #0
 8020778:	d006      	beq.n	8020788 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802077a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802077c:	2b00      	cmp	r3, #0
 802077e:	d003      	beq.n	8020788 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8020780:	697b      	ldr	r3, [r7, #20]
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	2b00      	cmp	r3, #0
 8020786:	d102      	bne.n	802078e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8020788:	f06f 0307 	mvn.w	r3, #7
 802078c:	e01c      	b.n	80207c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802078e:	697b      	ldr	r3, [r7, #20]
 8020790:	68db      	ldr	r3, [r3, #12]
 8020792:	617b      	str	r3, [r7, #20]
 8020794:	697b      	ldr	r3, [r7, #20]
 8020796:	2b00      	cmp	r3, #0
 8020798:	d1d9      	bne.n	802074e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802079a:	68bb      	ldr	r3, [r7, #8]
 802079c:	2b00      	cmp	r3, #0
 802079e:	d002      	beq.n	80207a6 <udp_bind+0xd2>
 80207a0:	68bb      	ldr	r3, [r7, #8]
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	e000      	b.n	80207a8 <udp_bind+0xd4>
 80207a6:	2300      	movs	r3, #0
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80207ac:	68fb      	ldr	r3, [r7, #12]
 80207ae:	88fa      	ldrh	r2, [r7, #6]
 80207b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80207b2:	7cfb      	ldrb	r3, [r7, #19]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d106      	bne.n	80207c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80207b8:	4b09      	ldr	r3, [pc, #36]	; (80207e0 <udp_bind+0x10c>)
 80207ba:	681a      	ldr	r2, [r3, #0]
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80207c0:	4a07      	ldr	r2, [pc, #28]	; (80207e0 <udp_bind+0x10c>)
 80207c2:	68fb      	ldr	r3, [r7, #12]
 80207c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80207c6:	2300      	movs	r3, #0
}
 80207c8:	4618      	mov	r0, r3
 80207ca:	3718      	adds	r7, #24
 80207cc:	46bd      	mov	sp, r7
 80207ce:	bd80      	pop	{r7, pc}
 80207d0:	0802a5ac 	.word	0x0802a5ac
 80207d4:	08028fa4 	.word	0x08028fa4
 80207d8:	0802926c 	.word	0x0802926c
 80207dc:	08028ff8 	.word	0x08028ff8
 80207e0:	2400d058 	.word	0x2400d058

080207e4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80207e4:	b580      	push	{r7, lr}
 80207e6:	b086      	sub	sp, #24
 80207e8:	af00      	add	r7, sp, #0
 80207ea:	60f8      	str	r0, [r7, #12]
 80207ec:	60b9      	str	r1, [r7, #8]
 80207ee:	4613      	mov	r3, r2
 80207f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80207f2:	68fb      	ldr	r3, [r7, #12]
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d109      	bne.n	802080c <udp_connect+0x28>
 80207f8:	4b2c      	ldr	r3, [pc, #176]	; (80208ac <udp_connect+0xc8>)
 80207fa:	f240 4235 	movw	r2, #1077	; 0x435
 80207fe:	492c      	ldr	r1, [pc, #176]	; (80208b0 <udp_connect+0xcc>)
 8020800:	482c      	ldr	r0, [pc, #176]	; (80208b4 <udp_connect+0xd0>)
 8020802:	f005 fbaf 	bl	8025f64 <iprintf>
 8020806:	f06f 030f 	mvn.w	r3, #15
 802080a:	e04b      	b.n	80208a4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802080c:	68bb      	ldr	r3, [r7, #8]
 802080e:	2b00      	cmp	r3, #0
 8020810:	d109      	bne.n	8020826 <udp_connect+0x42>
 8020812:	4b26      	ldr	r3, [pc, #152]	; (80208ac <udp_connect+0xc8>)
 8020814:	f240 4236 	movw	r2, #1078	; 0x436
 8020818:	4927      	ldr	r1, [pc, #156]	; (80208b8 <udp_connect+0xd4>)
 802081a:	4826      	ldr	r0, [pc, #152]	; (80208b4 <udp_connect+0xd0>)
 802081c:	f005 fba2 	bl	8025f64 <iprintf>
 8020820:	f06f 030f 	mvn.w	r3, #15
 8020824:	e03e      	b.n	80208a4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	8a5b      	ldrh	r3, [r3, #18]
 802082a:	2b00      	cmp	r3, #0
 802082c:	d10f      	bne.n	802084e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802082e:	68f9      	ldr	r1, [r7, #12]
 8020830:	68fb      	ldr	r3, [r7, #12]
 8020832:	8a5b      	ldrh	r3, [r3, #18]
 8020834:	461a      	mov	r2, r3
 8020836:	68f8      	ldr	r0, [r7, #12]
 8020838:	f7ff ff4c 	bl	80206d4 <udp_bind>
 802083c:	4603      	mov	r3, r0
 802083e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8020840:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d002      	beq.n	802084e <udp_connect+0x6a>
      return err;
 8020848:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802084c:	e02a      	b.n	80208a4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 802084e:	68bb      	ldr	r3, [r7, #8]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d002      	beq.n	802085a <udp_connect+0x76>
 8020854:	68bb      	ldr	r3, [r7, #8]
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	e000      	b.n	802085c <udp_connect+0x78>
 802085a:	2300      	movs	r3, #0
 802085c:	68fa      	ldr	r2, [r7, #12]
 802085e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	88fa      	ldrh	r2, [r7, #6]
 8020864:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8020866:	68fb      	ldr	r3, [r7, #12]
 8020868:	7c1b      	ldrb	r3, [r3, #16]
 802086a:	f043 0304 	orr.w	r3, r3, #4
 802086e:	b2da      	uxtb	r2, r3
 8020870:	68fb      	ldr	r3, [r7, #12]
 8020872:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020874:	4b11      	ldr	r3, [pc, #68]	; (80208bc <udp_connect+0xd8>)
 8020876:	681b      	ldr	r3, [r3, #0]
 8020878:	617b      	str	r3, [r7, #20]
 802087a:	e008      	b.n	802088e <udp_connect+0xaa>
    if (pcb == ipcb) {
 802087c:	68fa      	ldr	r2, [r7, #12]
 802087e:	697b      	ldr	r3, [r7, #20]
 8020880:	429a      	cmp	r2, r3
 8020882:	d101      	bne.n	8020888 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8020884:	2300      	movs	r3, #0
 8020886:	e00d      	b.n	80208a4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020888:	697b      	ldr	r3, [r7, #20]
 802088a:	68db      	ldr	r3, [r3, #12]
 802088c:	617b      	str	r3, [r7, #20]
 802088e:	697b      	ldr	r3, [r7, #20]
 8020890:	2b00      	cmp	r3, #0
 8020892:	d1f3      	bne.n	802087c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8020894:	4b09      	ldr	r3, [pc, #36]	; (80208bc <udp_connect+0xd8>)
 8020896:	681a      	ldr	r2, [r3, #0]
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 802089c:	4a07      	ldr	r2, [pc, #28]	; (80208bc <udp_connect+0xd8>)
 802089e:	68fb      	ldr	r3, [r7, #12]
 80208a0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80208a2:	2300      	movs	r3, #0
}
 80208a4:	4618      	mov	r0, r3
 80208a6:	3718      	adds	r7, #24
 80208a8:	46bd      	mov	sp, r7
 80208aa:	bd80      	pop	{r7, pc}
 80208ac:	08028fa4 	.word	0x08028fa4
 80208b0:	08029284 	.word	0x08029284
 80208b4:	08028ff8 	.word	0x08028ff8
 80208b8:	080292a0 	.word	0x080292a0
 80208bc:	2400d058 	.word	0x2400d058

080208c0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80208c0:	b580      	push	{r7, lr}
 80208c2:	b084      	sub	sp, #16
 80208c4:	af00      	add	r7, sp, #0
 80208c6:	60f8      	str	r0, [r7, #12]
 80208c8:	60b9      	str	r1, [r7, #8]
 80208ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80208cc:	68fb      	ldr	r3, [r7, #12]
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	d107      	bne.n	80208e2 <udp_recv+0x22>
 80208d2:	4b08      	ldr	r3, [pc, #32]	; (80208f4 <udp_recv+0x34>)
 80208d4:	f240 428a 	movw	r2, #1162	; 0x48a
 80208d8:	4907      	ldr	r1, [pc, #28]	; (80208f8 <udp_recv+0x38>)
 80208da:	4808      	ldr	r0, [pc, #32]	; (80208fc <udp_recv+0x3c>)
 80208dc:	f005 fb42 	bl	8025f64 <iprintf>
 80208e0:	e005      	b.n	80208ee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80208e2:	68fb      	ldr	r3, [r7, #12]
 80208e4:	68ba      	ldr	r2, [r7, #8]
 80208e6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80208e8:	68fb      	ldr	r3, [r7, #12]
 80208ea:	687a      	ldr	r2, [r7, #4]
 80208ec:	61da      	str	r2, [r3, #28]
}
 80208ee:	3710      	adds	r7, #16
 80208f0:	46bd      	mov	sp, r7
 80208f2:	bd80      	pop	{r7, pc}
 80208f4:	08028fa4 	.word	0x08028fa4
 80208f8:	080292d8 	.word	0x080292d8
 80208fc:	08028ff8 	.word	0x08028ff8

08020900 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8020900:	b580      	push	{r7, lr}
 8020902:	b084      	sub	sp, #16
 8020904:	af00      	add	r7, sp, #0
 8020906:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	2b00      	cmp	r3, #0
 802090c:	d107      	bne.n	802091e <udp_remove+0x1e>
 802090e:	4b19      	ldr	r3, [pc, #100]	; (8020974 <udp_remove+0x74>)
 8020910:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8020914:	4918      	ldr	r1, [pc, #96]	; (8020978 <udp_remove+0x78>)
 8020916:	4819      	ldr	r0, [pc, #100]	; (802097c <udp_remove+0x7c>)
 8020918:	f005 fb24 	bl	8025f64 <iprintf>
 802091c:	e026      	b.n	802096c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 802091e:	4b18      	ldr	r3, [pc, #96]	; (8020980 <udp_remove+0x80>)
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	687a      	ldr	r2, [r7, #4]
 8020924:	429a      	cmp	r2, r3
 8020926:	d105      	bne.n	8020934 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8020928:	4b15      	ldr	r3, [pc, #84]	; (8020980 <udp_remove+0x80>)
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	68db      	ldr	r3, [r3, #12]
 802092e:	4a14      	ldr	r2, [pc, #80]	; (8020980 <udp_remove+0x80>)
 8020930:	6013      	str	r3, [r2, #0]
 8020932:	e017      	b.n	8020964 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020934:	4b12      	ldr	r3, [pc, #72]	; (8020980 <udp_remove+0x80>)
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	60fb      	str	r3, [r7, #12]
 802093a:	e010      	b.n	802095e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 802093c:	68fb      	ldr	r3, [r7, #12]
 802093e:	68db      	ldr	r3, [r3, #12]
 8020940:	2b00      	cmp	r3, #0
 8020942:	d009      	beq.n	8020958 <udp_remove+0x58>
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	68db      	ldr	r3, [r3, #12]
 8020948:	687a      	ldr	r2, [r7, #4]
 802094a:	429a      	cmp	r2, r3
 802094c:	d104      	bne.n	8020958 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	68da      	ldr	r2, [r3, #12]
 8020952:	68fb      	ldr	r3, [r7, #12]
 8020954:	60da      	str	r2, [r3, #12]
        break;
 8020956:	e005      	b.n	8020964 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020958:	68fb      	ldr	r3, [r7, #12]
 802095a:	68db      	ldr	r3, [r3, #12]
 802095c:	60fb      	str	r3, [r7, #12]
 802095e:	68fb      	ldr	r3, [r7, #12]
 8020960:	2b00      	cmp	r3, #0
 8020962:	d1eb      	bne.n	802093c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8020964:	6879      	ldr	r1, [r7, #4]
 8020966:	2000      	movs	r0, #0
 8020968:	f7f8 ff68 	bl	801983c <memp_free>
}
 802096c:	3710      	adds	r7, #16
 802096e:	46bd      	mov	sp, r7
 8020970:	bd80      	pop	{r7, pc}
 8020972:	bf00      	nop
 8020974:	08028fa4 	.word	0x08028fa4
 8020978:	080292f0 	.word	0x080292f0
 802097c:	08028ff8 	.word	0x08028ff8
 8020980:	2400d058 	.word	0x2400d058

08020984 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8020984:	b580      	push	{r7, lr}
 8020986:	b082      	sub	sp, #8
 8020988:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802098a:	2000      	movs	r0, #0
 802098c:	f7f8 fee0 	bl	8019750 <memp_malloc>
 8020990:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	2b00      	cmp	r3, #0
 8020996:	d007      	beq.n	80209a8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020998:	2220      	movs	r2, #32
 802099a:	2100      	movs	r1, #0
 802099c:	6878      	ldr	r0, [r7, #4]
 802099e:	f005 f9e3 	bl	8025d68 <memset>
    pcb->ttl = UDP_TTL;
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	22ff      	movs	r2, #255	; 0xff
 80209a6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80209a8:	687b      	ldr	r3, [r7, #4]
}
 80209aa:	4618      	mov	r0, r3
 80209ac:	3708      	adds	r7, #8
 80209ae:	46bd      	mov	sp, r7
 80209b0:	bd80      	pop	{r7, pc}
	...

080209b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80209b4:	b480      	push	{r7}
 80209b6:	b085      	sub	sp, #20
 80209b8:	af00      	add	r7, sp, #0
 80209ba:	6078      	str	r0, [r7, #4]
 80209bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d01e      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d01a      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
 80209cc:	683b      	ldr	r3, [r7, #0]
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	d017      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
 80209d2:	683b      	ldr	r3, [r7, #0]
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	2b00      	cmp	r3, #0
 80209d8:	d013      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80209da:	4b0d      	ldr	r3, [pc, #52]	; (8020a10 <udp_netif_ip_addr_changed+0x5c>)
 80209dc:	681b      	ldr	r3, [r3, #0]
 80209de:	60fb      	str	r3, [r7, #12]
 80209e0:	e00c      	b.n	80209fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80209e2:	68fb      	ldr	r3, [r7, #12]
 80209e4:	681a      	ldr	r2, [r3, #0]
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	429a      	cmp	r2, r3
 80209ec:	d103      	bne.n	80209f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80209ee:	683b      	ldr	r3, [r7, #0]
 80209f0:	681a      	ldr	r2, [r3, #0]
 80209f2:	68fb      	ldr	r3, [r7, #12]
 80209f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80209f6:	68fb      	ldr	r3, [r7, #12]
 80209f8:	68db      	ldr	r3, [r3, #12]
 80209fa:	60fb      	str	r3, [r7, #12]
 80209fc:	68fb      	ldr	r3, [r7, #12]
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d1ef      	bne.n	80209e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8020a02:	bf00      	nop
 8020a04:	3714      	adds	r7, #20
 8020a06:	46bd      	mov	sp, r7
 8020a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a0c:	4770      	bx	lr
 8020a0e:	bf00      	nop
 8020a10:	2400d058 	.word	0x2400d058

08020a14 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8020a14:	b580      	push	{r7, lr}
 8020a16:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8020a18:	4b20      	ldr	r3, [pc, #128]	; (8020a9c <dhcp_inc_pcb_refcount+0x88>)
 8020a1a:	781b      	ldrb	r3, [r3, #0]
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d133      	bne.n	8020a88 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8020a20:	4b1f      	ldr	r3, [pc, #124]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d005      	beq.n	8020a34 <dhcp_inc_pcb_refcount+0x20>
 8020a28:	4b1e      	ldr	r3, [pc, #120]	; (8020aa4 <dhcp_inc_pcb_refcount+0x90>)
 8020a2a:	22e5      	movs	r2, #229	; 0xe5
 8020a2c:	491e      	ldr	r1, [pc, #120]	; (8020aa8 <dhcp_inc_pcb_refcount+0x94>)
 8020a2e:	481f      	ldr	r0, [pc, #124]	; (8020aac <dhcp_inc_pcb_refcount+0x98>)
 8020a30:	f005 fa98 	bl	8025f64 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8020a34:	f7ff ffa6 	bl	8020984 <udp_new>
 8020a38:	4603      	mov	r3, r0
 8020a3a:	4a19      	ldr	r2, [pc, #100]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a3c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8020a3e:	4b18      	ldr	r3, [pc, #96]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a40:	681b      	ldr	r3, [r3, #0]
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d102      	bne.n	8020a4c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8020a46:	f04f 33ff 	mov.w	r3, #4294967295
 8020a4a:	e024      	b.n	8020a96 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8020a4c:	4b14      	ldr	r3, [pc, #80]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	7a5a      	ldrb	r2, [r3, #9]
 8020a52:	4b13      	ldr	r3, [pc, #76]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	f042 0220 	orr.w	r2, r2, #32
 8020a5a:	b2d2      	uxtb	r2, r2
 8020a5c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8020a5e:	4b10      	ldr	r3, [pc, #64]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	2244      	movs	r2, #68	; 0x44
 8020a64:	4912      	ldr	r1, [pc, #72]	; (8020ab0 <dhcp_inc_pcb_refcount+0x9c>)
 8020a66:	4618      	mov	r0, r3
 8020a68:	f7ff fe34 	bl	80206d4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8020a6c:	4b0c      	ldr	r3, [pc, #48]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	2243      	movs	r2, #67	; 0x43
 8020a72:	490f      	ldr	r1, [pc, #60]	; (8020ab0 <dhcp_inc_pcb_refcount+0x9c>)
 8020a74:	4618      	mov	r0, r3
 8020a76:	f7ff feb5 	bl	80207e4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8020a7a:	4b09      	ldr	r3, [pc, #36]	; (8020aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	2200      	movs	r2, #0
 8020a80:	490c      	ldr	r1, [pc, #48]	; (8020ab4 <dhcp_inc_pcb_refcount+0xa0>)
 8020a82:	4618      	mov	r0, r3
 8020a84:	f7ff ff1c 	bl	80208c0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8020a88:	4b04      	ldr	r3, [pc, #16]	; (8020a9c <dhcp_inc_pcb_refcount+0x88>)
 8020a8a:	781b      	ldrb	r3, [r3, #0]
 8020a8c:	3301      	adds	r3, #1
 8020a8e:	b2da      	uxtb	r2, r3
 8020a90:	4b02      	ldr	r3, [pc, #8]	; (8020a9c <dhcp_inc_pcb_refcount+0x88>)
 8020a92:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8020a94:	2300      	movs	r3, #0
}
 8020a96:	4618      	mov	r0, r3
 8020a98:	bd80      	pop	{r7, pc}
 8020a9a:	bf00      	nop
 8020a9c:	2400d088 	.word	0x2400d088
 8020aa0:	2400d084 	.word	0x2400d084
 8020aa4:	08029308 	.word	0x08029308
 8020aa8:	08029340 	.word	0x08029340
 8020aac:	08029368 	.word	0x08029368
 8020ab0:	0802a5ac 	.word	0x0802a5ac
 8020ab4:	0802234d 	.word	0x0802234d

08020ab8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8020ab8:	b580      	push	{r7, lr}
 8020aba:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8020abc:	4b0e      	ldr	r3, [pc, #56]	; (8020af8 <dhcp_dec_pcb_refcount+0x40>)
 8020abe:	781b      	ldrb	r3, [r3, #0]
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d105      	bne.n	8020ad0 <dhcp_dec_pcb_refcount+0x18>
 8020ac4:	4b0d      	ldr	r3, [pc, #52]	; (8020afc <dhcp_dec_pcb_refcount+0x44>)
 8020ac6:	22ff      	movs	r2, #255	; 0xff
 8020ac8:	490d      	ldr	r1, [pc, #52]	; (8020b00 <dhcp_dec_pcb_refcount+0x48>)
 8020aca:	480e      	ldr	r0, [pc, #56]	; (8020b04 <dhcp_dec_pcb_refcount+0x4c>)
 8020acc:	f005 fa4a 	bl	8025f64 <iprintf>
  dhcp_pcb_refcount--;
 8020ad0:	4b09      	ldr	r3, [pc, #36]	; (8020af8 <dhcp_dec_pcb_refcount+0x40>)
 8020ad2:	781b      	ldrb	r3, [r3, #0]
 8020ad4:	3b01      	subs	r3, #1
 8020ad6:	b2da      	uxtb	r2, r3
 8020ad8:	4b07      	ldr	r3, [pc, #28]	; (8020af8 <dhcp_dec_pcb_refcount+0x40>)
 8020ada:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8020adc:	4b06      	ldr	r3, [pc, #24]	; (8020af8 <dhcp_dec_pcb_refcount+0x40>)
 8020ade:	781b      	ldrb	r3, [r3, #0]
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	d107      	bne.n	8020af4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8020ae4:	4b08      	ldr	r3, [pc, #32]	; (8020b08 <dhcp_dec_pcb_refcount+0x50>)
 8020ae6:	681b      	ldr	r3, [r3, #0]
 8020ae8:	4618      	mov	r0, r3
 8020aea:	f7ff ff09 	bl	8020900 <udp_remove>
    dhcp_pcb = NULL;
 8020aee:	4b06      	ldr	r3, [pc, #24]	; (8020b08 <dhcp_dec_pcb_refcount+0x50>)
 8020af0:	2200      	movs	r2, #0
 8020af2:	601a      	str	r2, [r3, #0]
  }
}
 8020af4:	bf00      	nop
 8020af6:	bd80      	pop	{r7, pc}
 8020af8:	2400d088 	.word	0x2400d088
 8020afc:	08029308 	.word	0x08029308
 8020b00:	08029390 	.word	0x08029390
 8020b04:	08029368 	.word	0x08029368
 8020b08:	2400d084 	.word	0x2400d084

08020b0c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8020b0c:	b580      	push	{r7, lr}
 8020b0e:	b084      	sub	sp, #16
 8020b10:	af00      	add	r7, sp, #0
 8020b12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b18:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8020b1a:	210c      	movs	r1, #12
 8020b1c:	68f8      	ldr	r0, [r7, #12]
 8020b1e:	f001 f857 	bl	8021bd0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8020b22:	4b06      	ldr	r3, [pc, #24]	; (8020b3c <dhcp_handle_nak+0x30>)
 8020b24:	4a05      	ldr	r2, [pc, #20]	; (8020b3c <dhcp_handle_nak+0x30>)
 8020b26:	4905      	ldr	r1, [pc, #20]	; (8020b3c <dhcp_handle_nak+0x30>)
 8020b28:	6878      	ldr	r0, [r7, #4]
 8020b2a:	f7f9 f829 	bl	8019b80 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8020b2e:	6878      	ldr	r0, [r7, #4]
 8020b30:	f000 fc4a 	bl	80213c8 <dhcp_discover>
}
 8020b34:	bf00      	nop
 8020b36:	3710      	adds	r7, #16
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	bd80      	pop	{r7, pc}
 8020b3c:	0802a5ac 	.word	0x0802a5ac

08020b40 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8020b40:	b580      	push	{r7, lr}
 8020b42:	b084      	sub	sp, #16
 8020b44:	af00      	add	r7, sp, #0
 8020b46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b4c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8020b4e:	2108      	movs	r1, #8
 8020b50:	68f8      	ldr	r0, [r7, #12]
 8020b52:	f001 f83d 	bl	8021bd0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8020b56:	68fb      	ldr	r3, [r7, #12]
 8020b58:	331c      	adds	r3, #28
 8020b5a:	2200      	movs	r2, #0
 8020b5c:	4619      	mov	r1, r3
 8020b5e:	6878      	ldr	r0, [r7, #4]
 8020b60:	f002 fb3e 	bl	80231e0 <etharp_query>
 8020b64:	4603      	mov	r3, r0
 8020b66:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8020b68:	68fb      	ldr	r3, [r7, #12]
 8020b6a:	799b      	ldrb	r3, [r3, #6]
 8020b6c:	2bff      	cmp	r3, #255	; 0xff
 8020b6e:	d005      	beq.n	8020b7c <dhcp_check+0x3c>
    dhcp->tries++;
 8020b70:	68fb      	ldr	r3, [r7, #12]
 8020b72:	799b      	ldrb	r3, [r3, #6]
 8020b74:	3301      	adds	r3, #1
 8020b76:	b2da      	uxtb	r2, r3
 8020b78:	68fb      	ldr	r3, [r7, #12]
 8020b7a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8020b7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8020b80:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020b82:	893b      	ldrh	r3, [r7, #8]
 8020b84:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020b88:	4a06      	ldr	r2, [pc, #24]	; (8020ba4 <dhcp_check+0x64>)
 8020b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8020b8e:	1152      	asrs	r2, r2, #5
 8020b90:	17db      	asrs	r3, r3, #31
 8020b92:	1ad3      	subs	r3, r2, r3
 8020b94:	b29a      	uxth	r2, r3
 8020b96:	68fb      	ldr	r3, [r7, #12]
 8020b98:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8020b9a:	bf00      	nop
 8020b9c:	3710      	adds	r7, #16
 8020b9e:	46bd      	mov	sp, r7
 8020ba0:	bd80      	pop	{r7, pc}
 8020ba2:	bf00      	nop
 8020ba4:	10624dd3 	.word	0x10624dd3

08020ba8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8020ba8:	b580      	push	{r7, lr}
 8020baa:	b084      	sub	sp, #16
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	6078      	str	r0, [r7, #4]
 8020bb0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020bb6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8020bb8:	4b0c      	ldr	r3, [pc, #48]	; (8020bec <dhcp_handle_offer+0x44>)
 8020bba:	789b      	ldrb	r3, [r3, #2]
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d011      	beq.n	8020be4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	2200      	movs	r2, #0
 8020bc4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8020bc6:	4b0a      	ldr	r3, [pc, #40]	; (8020bf0 <dhcp_handle_offer+0x48>)
 8020bc8:	689b      	ldr	r3, [r3, #8]
 8020bca:	4618      	mov	r0, r3
 8020bcc:	f7f8 f845 	bl	8018c5a <lwip_htonl>
 8020bd0:	4602      	mov	r2, r0
 8020bd2:	68fb      	ldr	r3, [r7, #12]
 8020bd4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020bd6:	683b      	ldr	r3, [r7, #0]
 8020bd8:	691a      	ldr	r2, [r3, #16]
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8020bde:	6878      	ldr	r0, [r7, #4]
 8020be0:	f000 f808 	bl	8020bf4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8020be4:	bf00      	nop
 8020be6:	3710      	adds	r7, #16
 8020be8:	46bd      	mov	sp, r7
 8020bea:	bd80      	pop	{r7, pc}
 8020bec:	2400d07c 	.word	0x2400d07c
 8020bf0:	2400d05c 	.word	0x2400d05c

08020bf4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8020bf4:	b5b0      	push	{r4, r5, r7, lr}
 8020bf6:	b08a      	sub	sp, #40	; 0x28
 8020bf8:	af02      	add	r7, sp, #8
 8020bfa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d109      	bne.n	8020c16 <dhcp_select+0x22>
 8020c02:	4b71      	ldr	r3, [pc, #452]	; (8020dc8 <dhcp_select+0x1d4>)
 8020c04:	f240 1277 	movw	r2, #375	; 0x177
 8020c08:	4970      	ldr	r1, [pc, #448]	; (8020dcc <dhcp_select+0x1d8>)
 8020c0a:	4871      	ldr	r0, [pc, #452]	; (8020dd0 <dhcp_select+0x1dc>)
 8020c0c:	f005 f9aa 	bl	8025f64 <iprintf>
 8020c10:	f06f 030f 	mvn.w	r3, #15
 8020c14:	e0d3      	b.n	8020dbe <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8020c16:	687b      	ldr	r3, [r7, #4]
 8020c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c1a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020c1c:	69bb      	ldr	r3, [r7, #24]
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d109      	bne.n	8020c36 <dhcp_select+0x42>
 8020c22:	4b69      	ldr	r3, [pc, #420]	; (8020dc8 <dhcp_select+0x1d4>)
 8020c24:	f240 1279 	movw	r2, #377	; 0x179
 8020c28:	496a      	ldr	r1, [pc, #424]	; (8020dd4 <dhcp_select+0x1e0>)
 8020c2a:	4869      	ldr	r0, [pc, #420]	; (8020dd0 <dhcp_select+0x1dc>)
 8020c2c:	f005 f99a 	bl	8025f64 <iprintf>
 8020c30:	f06f 0305 	mvn.w	r3, #5
 8020c34:	e0c3      	b.n	8020dbe <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8020c36:	2101      	movs	r1, #1
 8020c38:	69b8      	ldr	r0, [r7, #24]
 8020c3a:	f000 ffc9 	bl	8021bd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020c3e:	f107 030c 	add.w	r3, r7, #12
 8020c42:	2203      	movs	r2, #3
 8020c44:	69b9      	ldr	r1, [r7, #24]
 8020c46:	6878      	ldr	r0, [r7, #4]
 8020c48:	f001 fc4e 	bl	80224e8 <dhcp_create_msg>
 8020c4c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8020c4e:	697b      	ldr	r3, [r7, #20]
 8020c50:	2b00      	cmp	r3, #0
 8020c52:	f000 8085 	beq.w	8020d60 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020c56:	697b      	ldr	r3, [r7, #20]
 8020c58:	685b      	ldr	r3, [r3, #4]
 8020c5a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020c5c:	89b8      	ldrh	r0, [r7, #12]
 8020c5e:	693b      	ldr	r3, [r7, #16]
 8020c60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020c64:	2302      	movs	r3, #2
 8020c66:	2239      	movs	r2, #57	; 0x39
 8020c68:	f000 ffcc 	bl	8021c04 <dhcp_option>
 8020c6c:	4603      	mov	r3, r0
 8020c6e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020c70:	89b8      	ldrh	r0, [r7, #12]
 8020c72:	693b      	ldr	r3, [r7, #16]
 8020c74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020c7c:	461a      	mov	r2, r3
 8020c7e:	f001 f81b 	bl	8021cb8 <dhcp_option_short>
 8020c82:	4603      	mov	r3, r0
 8020c84:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020c86:	89b8      	ldrh	r0, [r7, #12]
 8020c88:	693b      	ldr	r3, [r7, #16]
 8020c8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020c8e:	2304      	movs	r3, #4
 8020c90:	2232      	movs	r2, #50	; 0x32
 8020c92:	f000 ffb7 	bl	8021c04 <dhcp_option>
 8020c96:	4603      	mov	r3, r0
 8020c98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020c9a:	89bc      	ldrh	r4, [r7, #12]
 8020c9c:	693b      	ldr	r3, [r7, #16]
 8020c9e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8020ca2:	69bb      	ldr	r3, [r7, #24]
 8020ca4:	69db      	ldr	r3, [r3, #28]
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	f7f7 ffd7 	bl	8018c5a <lwip_htonl>
 8020cac:	4603      	mov	r3, r0
 8020cae:	461a      	mov	r2, r3
 8020cb0:	4629      	mov	r1, r5
 8020cb2:	4620      	mov	r0, r4
 8020cb4:	f001 f832 	bl	8021d1c <dhcp_option_long>
 8020cb8:	4603      	mov	r3, r0
 8020cba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020cbc:	89b8      	ldrh	r0, [r7, #12]
 8020cbe:	693b      	ldr	r3, [r7, #16]
 8020cc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020cc4:	2304      	movs	r3, #4
 8020cc6:	2236      	movs	r2, #54	; 0x36
 8020cc8:	f000 ff9c 	bl	8021c04 <dhcp_option>
 8020ccc:	4603      	mov	r3, r0
 8020cce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020cd0:	89bc      	ldrh	r4, [r7, #12]
 8020cd2:	693b      	ldr	r3, [r7, #16]
 8020cd4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8020cd8:	69bb      	ldr	r3, [r7, #24]
 8020cda:	699b      	ldr	r3, [r3, #24]
 8020cdc:	4618      	mov	r0, r3
 8020cde:	f7f7 ffbc 	bl	8018c5a <lwip_htonl>
 8020ce2:	4603      	mov	r3, r0
 8020ce4:	461a      	mov	r2, r3
 8020ce6:	4629      	mov	r1, r5
 8020ce8:	4620      	mov	r0, r4
 8020cea:	f001 f817 	bl	8021d1c <dhcp_option_long>
 8020cee:	4603      	mov	r3, r0
 8020cf0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020cf2:	89b8      	ldrh	r0, [r7, #12]
 8020cf4:	693b      	ldr	r3, [r7, #16]
 8020cf6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020cfa:	2303      	movs	r3, #3
 8020cfc:	2237      	movs	r2, #55	; 0x37
 8020cfe:	f000 ff81 	bl	8021c04 <dhcp_option>
 8020d02:	4603      	mov	r3, r0
 8020d04:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020d06:	2300      	movs	r3, #0
 8020d08:	77bb      	strb	r3, [r7, #30]
 8020d0a:	e00e      	b.n	8020d2a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020d0c:	89b8      	ldrh	r0, [r7, #12]
 8020d0e:	693b      	ldr	r3, [r7, #16]
 8020d10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020d14:	7fbb      	ldrb	r3, [r7, #30]
 8020d16:	4a30      	ldr	r2, [pc, #192]	; (8020dd8 <dhcp_select+0x1e4>)
 8020d18:	5cd3      	ldrb	r3, [r2, r3]
 8020d1a:	461a      	mov	r2, r3
 8020d1c:	f000 ffa6 	bl	8021c6c <dhcp_option_byte>
 8020d20:	4603      	mov	r3, r0
 8020d22:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020d24:	7fbb      	ldrb	r3, [r7, #30]
 8020d26:	3301      	adds	r3, #1
 8020d28:	77bb      	strb	r3, [r7, #30]
 8020d2a:	7fbb      	ldrb	r3, [r7, #30]
 8020d2c:	2b02      	cmp	r3, #2
 8020d2e:	d9ed      	bls.n	8020d0c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020d30:	89b8      	ldrh	r0, [r7, #12]
 8020d32:	693b      	ldr	r3, [r7, #16]
 8020d34:	33f0      	adds	r3, #240	; 0xf0
 8020d36:	697a      	ldr	r2, [r7, #20]
 8020d38:	4619      	mov	r1, r3
 8020d3a:	f001 fcab 	bl	8022694 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020d3e:	4b27      	ldr	r3, [pc, #156]	; (8020ddc <dhcp_select+0x1e8>)
 8020d40:	6818      	ldr	r0, [r3, #0]
 8020d42:	4b27      	ldr	r3, [pc, #156]	; (8020de0 <dhcp_select+0x1ec>)
 8020d44:	9301      	str	r3, [sp, #4]
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	9300      	str	r3, [sp, #0]
 8020d4a:	2343      	movs	r3, #67	; 0x43
 8020d4c:	4a25      	ldr	r2, [pc, #148]	; (8020de4 <dhcp_select+0x1f0>)
 8020d4e:	6979      	ldr	r1, [r7, #20]
 8020d50:	f7ff fbda 	bl	8020508 <udp_sendto_if_src>
 8020d54:	4603      	mov	r3, r0
 8020d56:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020d58:	6978      	ldr	r0, [r7, #20]
 8020d5a:	f7f9 fc1f 	bl	801a59c <pbuf_free>
 8020d5e:	e001      	b.n	8020d64 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020d60:	23ff      	movs	r3, #255	; 0xff
 8020d62:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020d64:	69bb      	ldr	r3, [r7, #24]
 8020d66:	799b      	ldrb	r3, [r3, #6]
 8020d68:	2bff      	cmp	r3, #255	; 0xff
 8020d6a:	d005      	beq.n	8020d78 <dhcp_select+0x184>
    dhcp->tries++;
 8020d6c:	69bb      	ldr	r3, [r7, #24]
 8020d6e:	799b      	ldrb	r3, [r3, #6]
 8020d70:	3301      	adds	r3, #1
 8020d72:	b2da      	uxtb	r2, r3
 8020d74:	69bb      	ldr	r3, [r7, #24]
 8020d76:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020d78:	69bb      	ldr	r3, [r7, #24]
 8020d7a:	799b      	ldrb	r3, [r3, #6]
 8020d7c:	2b05      	cmp	r3, #5
 8020d7e:	d80d      	bhi.n	8020d9c <dhcp_select+0x1a8>
 8020d80:	69bb      	ldr	r3, [r7, #24]
 8020d82:	799b      	ldrb	r3, [r3, #6]
 8020d84:	461a      	mov	r2, r3
 8020d86:	2301      	movs	r3, #1
 8020d88:	4093      	lsls	r3, r2
 8020d8a:	b29b      	uxth	r3, r3
 8020d8c:	461a      	mov	r2, r3
 8020d8e:	0152      	lsls	r2, r2, #5
 8020d90:	1ad2      	subs	r2, r2, r3
 8020d92:	0092      	lsls	r2, r2, #2
 8020d94:	4413      	add	r3, r2
 8020d96:	00db      	lsls	r3, r3, #3
 8020d98:	b29b      	uxth	r3, r3
 8020d9a:	e001      	b.n	8020da0 <dhcp_select+0x1ac>
 8020d9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8020da0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020da2:	89fb      	ldrh	r3, [r7, #14]
 8020da4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020da8:	4a0f      	ldr	r2, [pc, #60]	; (8020de8 <dhcp_select+0x1f4>)
 8020daa:	fb82 1203 	smull	r1, r2, r2, r3
 8020dae:	1152      	asrs	r2, r2, #5
 8020db0:	17db      	asrs	r3, r3, #31
 8020db2:	1ad3      	subs	r3, r2, r3
 8020db4:	b29a      	uxth	r2, r3
 8020db6:	69bb      	ldr	r3, [r7, #24]
 8020db8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020dbe:	4618      	mov	r0, r3
 8020dc0:	3720      	adds	r7, #32
 8020dc2:	46bd      	mov	sp, r7
 8020dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8020dc6:	bf00      	nop
 8020dc8:	08029308 	.word	0x08029308
 8020dcc:	080293b4 	.word	0x080293b4
 8020dd0:	08029368 	.word	0x08029368
 8020dd4:	080293d0 	.word	0x080293d0
 8020dd8:	24000464 	.word	0x24000464
 8020ddc:	2400d084 	.word	0x2400d084
 8020de0:	0802a5ac 	.word	0x0802a5ac
 8020de4:	0802a5b0 	.word	0x0802a5b0
 8020de8:	10624dd3 	.word	0x10624dd3

08020dec <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8020dec:	b580      	push	{r7, lr}
 8020dee:	b082      	sub	sp, #8
 8020df0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8020df2:	4b27      	ldr	r3, [pc, #156]	; (8020e90 <dhcp_coarse_tmr+0xa4>)
 8020df4:	681b      	ldr	r3, [r3, #0]
 8020df6:	607b      	str	r3, [r7, #4]
 8020df8:	e042      	b.n	8020e80 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dfe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8020e00:	683b      	ldr	r3, [r7, #0]
 8020e02:	2b00      	cmp	r3, #0
 8020e04:	d039      	beq.n	8020e7a <dhcp_coarse_tmr+0x8e>
 8020e06:	683b      	ldr	r3, [r7, #0]
 8020e08:	795b      	ldrb	r3, [r3, #5]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d035      	beq.n	8020e7a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8020e0e:	683b      	ldr	r3, [r7, #0]
 8020e10:	8a9b      	ldrh	r3, [r3, #20]
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d012      	beq.n	8020e3c <dhcp_coarse_tmr+0x50>
 8020e16:	683b      	ldr	r3, [r7, #0]
 8020e18:	8a5b      	ldrh	r3, [r3, #18]
 8020e1a:	3301      	adds	r3, #1
 8020e1c:	b29a      	uxth	r2, r3
 8020e1e:	683b      	ldr	r3, [r7, #0]
 8020e20:	825a      	strh	r2, [r3, #18]
 8020e22:	683b      	ldr	r3, [r7, #0]
 8020e24:	8a5a      	ldrh	r2, [r3, #18]
 8020e26:	683b      	ldr	r3, [r7, #0]
 8020e28:	8a9b      	ldrh	r3, [r3, #20]
 8020e2a:	429a      	cmp	r2, r3
 8020e2c:	d106      	bne.n	8020e3c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8020e2e:	6878      	ldr	r0, [r7, #4]
 8020e30:	f000 fe34 	bl	8021a9c <dhcp_release_and_stop>
        dhcp_start(netif);
 8020e34:	6878      	ldr	r0, [r7, #4]
 8020e36:	f000 f96b 	bl	8021110 <dhcp_start>
 8020e3a:	e01e      	b.n	8020e7a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8020e3c:	683b      	ldr	r3, [r7, #0]
 8020e3e:	8a1b      	ldrh	r3, [r3, #16]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d00b      	beq.n	8020e5c <dhcp_coarse_tmr+0x70>
 8020e44:	683b      	ldr	r3, [r7, #0]
 8020e46:	8a1b      	ldrh	r3, [r3, #16]
 8020e48:	1e5a      	subs	r2, r3, #1
 8020e4a:	b291      	uxth	r1, r2
 8020e4c:	683a      	ldr	r2, [r7, #0]
 8020e4e:	8211      	strh	r1, [r2, #16]
 8020e50:	2b01      	cmp	r3, #1
 8020e52:	d103      	bne.n	8020e5c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8020e54:	6878      	ldr	r0, [r7, #4]
 8020e56:	f000 f8c7 	bl	8020fe8 <dhcp_t2_timeout>
 8020e5a:	e00e      	b.n	8020e7a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8020e5c:	683b      	ldr	r3, [r7, #0]
 8020e5e:	89db      	ldrh	r3, [r3, #14]
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d00a      	beq.n	8020e7a <dhcp_coarse_tmr+0x8e>
 8020e64:	683b      	ldr	r3, [r7, #0]
 8020e66:	89db      	ldrh	r3, [r3, #14]
 8020e68:	1e5a      	subs	r2, r3, #1
 8020e6a:	b291      	uxth	r1, r2
 8020e6c:	683a      	ldr	r2, [r7, #0]
 8020e6e:	81d1      	strh	r1, [r2, #14]
 8020e70:	2b01      	cmp	r3, #1
 8020e72:	d102      	bne.n	8020e7a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8020e74:	6878      	ldr	r0, [r7, #4]
 8020e76:	f000 f888 	bl	8020f8a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	607b      	str	r3, [r7, #4]
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	d1b9      	bne.n	8020dfa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8020e86:	bf00      	nop
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	2400cff0 	.word	0x2400cff0

08020e94 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8020e94:	b580      	push	{r7, lr}
 8020e96:	b082      	sub	sp, #8
 8020e98:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8020e9a:	4b16      	ldr	r3, [pc, #88]	; (8020ef4 <dhcp_fine_tmr+0x60>)
 8020e9c:	681b      	ldr	r3, [r3, #0]
 8020e9e:	607b      	str	r3, [r7, #4]
 8020ea0:	e020      	b.n	8020ee4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ea6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8020ea8:	683b      	ldr	r3, [r7, #0]
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	d017      	beq.n	8020ede <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8020eae:	683b      	ldr	r3, [r7, #0]
 8020eb0:	891b      	ldrh	r3, [r3, #8]
 8020eb2:	2b01      	cmp	r3, #1
 8020eb4:	d906      	bls.n	8020ec4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8020eb6:	683b      	ldr	r3, [r7, #0]
 8020eb8:	891b      	ldrh	r3, [r3, #8]
 8020eba:	3b01      	subs	r3, #1
 8020ebc:	b29a      	uxth	r2, r3
 8020ebe:	683b      	ldr	r3, [r7, #0]
 8020ec0:	811a      	strh	r2, [r3, #8]
 8020ec2:	e00c      	b.n	8020ede <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8020ec4:	683b      	ldr	r3, [r7, #0]
 8020ec6:	891b      	ldrh	r3, [r3, #8]
 8020ec8:	2b01      	cmp	r3, #1
 8020eca:	d108      	bne.n	8020ede <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8020ecc:	683b      	ldr	r3, [r7, #0]
 8020ece:	891b      	ldrh	r3, [r3, #8]
 8020ed0:	3b01      	subs	r3, #1
 8020ed2:	b29a      	uxth	r2, r3
 8020ed4:	683b      	ldr	r3, [r7, #0]
 8020ed6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8020ed8:	6878      	ldr	r0, [r7, #4]
 8020eda:	f000 f80d 	bl	8020ef8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8020ede:	687b      	ldr	r3, [r7, #4]
 8020ee0:	681b      	ldr	r3, [r3, #0]
 8020ee2:	607b      	str	r3, [r7, #4]
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d1db      	bne.n	8020ea2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8020eea:	bf00      	nop
 8020eec:	bf00      	nop
 8020eee:	3708      	adds	r7, #8
 8020ef0:	46bd      	mov	sp, r7
 8020ef2:	bd80      	pop	{r7, pc}
 8020ef4:	2400cff0 	.word	0x2400cff0

08020ef8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8020ef8:	b580      	push	{r7, lr}
 8020efa:	b084      	sub	sp, #16
 8020efc:	af00      	add	r7, sp, #0
 8020efe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f04:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	795b      	ldrb	r3, [r3, #5]
 8020f0a:	2b0c      	cmp	r3, #12
 8020f0c:	d003      	beq.n	8020f16 <dhcp_timeout+0x1e>
 8020f0e:	68fb      	ldr	r3, [r7, #12]
 8020f10:	795b      	ldrb	r3, [r3, #5]
 8020f12:	2b06      	cmp	r3, #6
 8020f14:	d103      	bne.n	8020f1e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8020f16:	6878      	ldr	r0, [r7, #4]
 8020f18:	f000 fa56 	bl	80213c8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8020f1c:	e031      	b.n	8020f82 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	795b      	ldrb	r3, [r3, #5]
 8020f22:	2b01      	cmp	r3, #1
 8020f24:	d10e      	bne.n	8020f44 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8020f26:	68fb      	ldr	r3, [r7, #12]
 8020f28:	799b      	ldrb	r3, [r3, #6]
 8020f2a:	2b05      	cmp	r3, #5
 8020f2c:	d803      	bhi.n	8020f36 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8020f2e:	6878      	ldr	r0, [r7, #4]
 8020f30:	f7ff fe60 	bl	8020bf4 <dhcp_select>
}
 8020f34:	e025      	b.n	8020f82 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8020f36:	6878      	ldr	r0, [r7, #4]
 8020f38:	f000 fdb0 	bl	8021a9c <dhcp_release_and_stop>
      dhcp_start(netif);
 8020f3c:	6878      	ldr	r0, [r7, #4]
 8020f3e:	f000 f8e7 	bl	8021110 <dhcp_start>
}
 8020f42:	e01e      	b.n	8020f82 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8020f44:	68fb      	ldr	r3, [r7, #12]
 8020f46:	795b      	ldrb	r3, [r3, #5]
 8020f48:	2b08      	cmp	r3, #8
 8020f4a:	d10b      	bne.n	8020f64 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8020f4c:	68fb      	ldr	r3, [r7, #12]
 8020f4e:	799b      	ldrb	r3, [r3, #6]
 8020f50:	2b01      	cmp	r3, #1
 8020f52:	d803      	bhi.n	8020f5c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8020f54:	6878      	ldr	r0, [r7, #4]
 8020f56:	f7ff fdf3 	bl	8020b40 <dhcp_check>
}
 8020f5a:	e012      	b.n	8020f82 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8020f5c:	6878      	ldr	r0, [r7, #4]
 8020f5e:	f000 fad5 	bl	802150c <dhcp_bind>
}
 8020f62:	e00e      	b.n	8020f82 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8020f64:	68fb      	ldr	r3, [r7, #12]
 8020f66:	795b      	ldrb	r3, [r3, #5]
 8020f68:	2b03      	cmp	r3, #3
 8020f6a:	d10a      	bne.n	8020f82 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8020f6c:	68fb      	ldr	r3, [r7, #12]
 8020f6e:	799b      	ldrb	r3, [r3, #6]
 8020f70:	2b01      	cmp	r3, #1
 8020f72:	d803      	bhi.n	8020f7c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8020f74:	6878      	ldr	r0, [r7, #4]
 8020f76:	f000 fcdb 	bl	8021930 <dhcp_reboot>
}
 8020f7a:	e002      	b.n	8020f82 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8020f7c:	6878      	ldr	r0, [r7, #4]
 8020f7e:	f000 fa23 	bl	80213c8 <dhcp_discover>
}
 8020f82:	bf00      	nop
 8020f84:	3710      	adds	r7, #16
 8020f86:	46bd      	mov	sp, r7
 8020f88:	bd80      	pop	{r7, pc}

08020f8a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8020f8a:	b580      	push	{r7, lr}
 8020f8c:	b084      	sub	sp, #16
 8020f8e:	af00      	add	r7, sp, #0
 8020f90:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020f92:	687b      	ldr	r3, [r7, #4]
 8020f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f96:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020f98:	68fb      	ldr	r3, [r7, #12]
 8020f9a:	795b      	ldrb	r3, [r3, #5]
 8020f9c:	2b01      	cmp	r3, #1
 8020f9e:	d007      	beq.n	8020fb0 <dhcp_t1_timeout+0x26>
 8020fa0:	68fb      	ldr	r3, [r7, #12]
 8020fa2:	795b      	ldrb	r3, [r3, #5]
 8020fa4:	2b0a      	cmp	r3, #10
 8020fa6:	d003      	beq.n	8020fb0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8020fa8:	68fb      	ldr	r3, [r7, #12]
 8020faa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020fac:	2b05      	cmp	r3, #5
 8020fae:	d117      	bne.n	8020fe0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8020fb0:	6878      	ldr	r0, [r7, #4]
 8020fb2:	f000 fb85 	bl	80216c0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020fb6:	68fb      	ldr	r3, [r7, #12]
 8020fb8:	899b      	ldrh	r3, [r3, #12]
 8020fba:	461a      	mov	r2, r3
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	8a5b      	ldrh	r3, [r3, #18]
 8020fc0:	1ad3      	subs	r3, r2, r3
 8020fc2:	2b01      	cmp	r3, #1
 8020fc4:	dd0c      	ble.n	8020fe0 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8020fc6:	68fb      	ldr	r3, [r7, #12]
 8020fc8:	899b      	ldrh	r3, [r3, #12]
 8020fca:	461a      	mov	r2, r3
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	8a5b      	ldrh	r3, [r3, #18]
 8020fd0:	1ad3      	subs	r3, r2, r3
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	da00      	bge.n	8020fd8 <dhcp_t1_timeout+0x4e>
 8020fd6:	3301      	adds	r3, #1
 8020fd8:	105b      	asrs	r3, r3, #1
 8020fda:	b29a      	uxth	r2, r3
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8020fe0:	bf00      	nop
 8020fe2:	3710      	adds	r7, #16
 8020fe4:	46bd      	mov	sp, r7
 8020fe6:	bd80      	pop	{r7, pc}

08020fe8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8020fe8:	b580      	push	{r7, lr}
 8020fea:	b084      	sub	sp, #16
 8020fec:	af00      	add	r7, sp, #0
 8020fee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ff4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020ff6:	68fb      	ldr	r3, [r7, #12]
 8020ff8:	795b      	ldrb	r3, [r3, #5]
 8020ffa:	2b01      	cmp	r3, #1
 8020ffc:	d00b      	beq.n	8021016 <dhcp_t2_timeout+0x2e>
 8020ffe:	68fb      	ldr	r3, [r7, #12]
 8021000:	795b      	ldrb	r3, [r3, #5]
 8021002:	2b0a      	cmp	r3, #10
 8021004:	d007      	beq.n	8021016 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8021006:	68fb      	ldr	r3, [r7, #12]
 8021008:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 802100a:	2b05      	cmp	r3, #5
 802100c:	d003      	beq.n	8021016 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 802100e:	68fb      	ldr	r3, [r7, #12]
 8021010:	795b      	ldrb	r3, [r3, #5]
 8021012:	2b04      	cmp	r3, #4
 8021014:	d117      	bne.n	8021046 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8021016:	6878      	ldr	r0, [r7, #4]
 8021018:	f000 fbee 	bl	80217f8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802101c:	68fb      	ldr	r3, [r7, #12]
 802101e:	8a9b      	ldrh	r3, [r3, #20]
 8021020:	461a      	mov	r2, r3
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	8a5b      	ldrh	r3, [r3, #18]
 8021026:	1ad3      	subs	r3, r2, r3
 8021028:	2b01      	cmp	r3, #1
 802102a:	dd0c      	ble.n	8021046 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	8a9b      	ldrh	r3, [r3, #20]
 8021030:	461a      	mov	r2, r3
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	8a5b      	ldrh	r3, [r3, #18]
 8021036:	1ad3      	subs	r3, r2, r3
 8021038:	2b00      	cmp	r3, #0
 802103a:	da00      	bge.n	802103e <dhcp_t2_timeout+0x56>
 802103c:	3301      	adds	r3, #1
 802103e:	105b      	asrs	r3, r3, #1
 8021040:	b29a      	uxth	r2, r3
 8021042:	68fb      	ldr	r3, [r7, #12]
 8021044:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8021046:	bf00      	nop
 8021048:	3710      	adds	r7, #16
 802104a:	46bd      	mov	sp, r7
 802104c:	bd80      	pop	{r7, pc}
	...

08021050 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8021050:	b580      	push	{r7, lr}
 8021052:	b084      	sub	sp, #16
 8021054:	af00      	add	r7, sp, #0
 8021056:	6078      	str	r0, [r7, #4]
 8021058:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802105e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	2200      	movs	r2, #0
 8021064:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021066:	68fb      	ldr	r3, [r7, #12]
 8021068:	2200      	movs	r2, #0
 802106a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 802106c:	4b26      	ldr	r3, [pc, #152]	; (8021108 <dhcp_handle_ack+0xb8>)
 802106e:	78db      	ldrb	r3, [r3, #3]
 8021070:	2b00      	cmp	r3, #0
 8021072:	d003      	beq.n	802107c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8021074:	4b25      	ldr	r3, [pc, #148]	; (802110c <dhcp_handle_ack+0xbc>)
 8021076:	68da      	ldr	r2, [r3, #12]
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 802107c:	4b22      	ldr	r3, [pc, #136]	; (8021108 <dhcp_handle_ack+0xb8>)
 802107e:	791b      	ldrb	r3, [r3, #4]
 8021080:	2b00      	cmp	r3, #0
 8021082:	d004      	beq.n	802108e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8021084:	4b21      	ldr	r3, [pc, #132]	; (802110c <dhcp_handle_ack+0xbc>)
 8021086:	691a      	ldr	r2, [r3, #16]
 8021088:	68fb      	ldr	r3, [r7, #12]
 802108a:	62da      	str	r2, [r3, #44]	; 0x2c
 802108c:	e004      	b.n	8021098 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 802108e:	68fb      	ldr	r3, [r7, #12]
 8021090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021092:	085a      	lsrs	r2, r3, #1
 8021094:	68fb      	ldr	r3, [r7, #12]
 8021096:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8021098:	4b1b      	ldr	r3, [pc, #108]	; (8021108 <dhcp_handle_ack+0xb8>)
 802109a:	795b      	ldrb	r3, [r3, #5]
 802109c:	2b00      	cmp	r3, #0
 802109e:	d004      	beq.n	80210aa <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80210a0:	4b1a      	ldr	r3, [pc, #104]	; (802110c <dhcp_handle_ack+0xbc>)
 80210a2:	695a      	ldr	r2, [r3, #20]
 80210a4:	68fb      	ldr	r3, [r7, #12]
 80210a6:	631a      	str	r2, [r3, #48]	; 0x30
 80210a8:	e007      	b.n	80210ba <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80210aa:	68fb      	ldr	r3, [r7, #12]
 80210ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80210ae:	4613      	mov	r3, r2
 80210b0:	00db      	lsls	r3, r3, #3
 80210b2:	1a9b      	subs	r3, r3, r2
 80210b4:	08da      	lsrs	r2, r3, #3
 80210b6:	68fb      	ldr	r3, [r7, #12]
 80210b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80210ba:	683b      	ldr	r3, [r7, #0]
 80210bc:	691a      	ldr	r2, [r3, #16]
 80210be:	68fb      	ldr	r3, [r7, #12]
 80210c0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80210c2:	4b11      	ldr	r3, [pc, #68]	; (8021108 <dhcp_handle_ack+0xb8>)
 80210c4:	799b      	ldrb	r3, [r3, #6]
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d00b      	beq.n	80210e2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80210ca:	4b10      	ldr	r3, [pc, #64]	; (802110c <dhcp_handle_ack+0xbc>)
 80210cc:	699b      	ldr	r3, [r3, #24]
 80210ce:	4618      	mov	r0, r3
 80210d0:	f7f7 fdc3 	bl	8018c5a <lwip_htonl>
 80210d4:	4602      	mov	r2, r0
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80210da:	68fb      	ldr	r3, [r7, #12]
 80210dc:	2201      	movs	r2, #1
 80210de:	71da      	strb	r2, [r3, #7]
 80210e0:	e002      	b.n	80210e8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80210e2:	68fb      	ldr	r3, [r7, #12]
 80210e4:	2200      	movs	r2, #0
 80210e6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80210e8:	4b07      	ldr	r3, [pc, #28]	; (8021108 <dhcp_handle_ack+0xb8>)
 80210ea:	79db      	ldrb	r3, [r3, #7]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	d007      	beq.n	8021100 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80210f0:	4b06      	ldr	r3, [pc, #24]	; (802110c <dhcp_handle_ack+0xbc>)
 80210f2:	69db      	ldr	r3, [r3, #28]
 80210f4:	4618      	mov	r0, r3
 80210f6:	f7f7 fdb0 	bl	8018c5a <lwip_htonl>
 80210fa:	4602      	mov	r2, r0
 80210fc:	68fb      	ldr	r3, [r7, #12]
 80210fe:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8021100:	bf00      	nop
 8021102:	3710      	adds	r7, #16
 8021104:	46bd      	mov	sp, r7
 8021106:	bd80      	pop	{r7, pc}
 8021108:	2400d07c 	.word	0x2400d07c
 802110c:	2400d05c 	.word	0x2400d05c

08021110 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8021110:	b580      	push	{r7, lr}
 8021112:	b084      	sub	sp, #16
 8021114:	af00      	add	r7, sp, #0
 8021116:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021118:	687b      	ldr	r3, [r7, #4]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d109      	bne.n	8021132 <dhcp_start+0x22>
 802111e:	4b37      	ldr	r3, [pc, #220]	; (80211fc <dhcp_start+0xec>)
 8021120:	f240 22e7 	movw	r2, #743	; 0x2e7
 8021124:	4936      	ldr	r1, [pc, #216]	; (8021200 <dhcp_start+0xf0>)
 8021126:	4837      	ldr	r0, [pc, #220]	; (8021204 <dhcp_start+0xf4>)
 8021128:	f004 ff1c 	bl	8025f64 <iprintf>
 802112c:	f06f 030f 	mvn.w	r3, #15
 8021130:	e060      	b.n	80211f4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021138:	f003 0301 	and.w	r3, r3, #1
 802113c:	2b00      	cmp	r3, #0
 802113e:	d109      	bne.n	8021154 <dhcp_start+0x44>
 8021140:	4b2e      	ldr	r3, [pc, #184]	; (80211fc <dhcp_start+0xec>)
 8021142:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8021146:	4930      	ldr	r1, [pc, #192]	; (8021208 <dhcp_start+0xf8>)
 8021148:	482e      	ldr	r0, [pc, #184]	; (8021204 <dhcp_start+0xf4>)
 802114a:	f004 ff0b 	bl	8025f64 <iprintf>
 802114e:	f06f 030f 	mvn.w	r3, #15
 8021152:	e04f      	b.n	80211f4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021158:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802115e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8021162:	d202      	bcs.n	802116a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8021164:	f04f 33ff 	mov.w	r3, #4294967295
 8021168:	e044      	b.n	80211f4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 802116a:	68fb      	ldr	r3, [r7, #12]
 802116c:	2b00      	cmp	r3, #0
 802116e:	d10d      	bne.n	802118c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8021170:	2034      	movs	r0, #52	; 0x34
 8021172:	f7f8 f949 	bl	8019408 <mem_malloc>
 8021176:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8021178:	68fb      	ldr	r3, [r7, #12]
 802117a:	2b00      	cmp	r3, #0
 802117c:	d102      	bne.n	8021184 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 802117e:	f04f 33ff 	mov.w	r3, #4294967295
 8021182:	e037      	b.n	80211f4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	68fa      	ldr	r2, [r7, #12]
 8021188:	625a      	str	r2, [r3, #36]	; 0x24
 802118a:	e005      	b.n	8021198 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 802118c:	68fb      	ldr	r3, [r7, #12]
 802118e:	791b      	ldrb	r3, [r3, #4]
 8021190:	2b00      	cmp	r3, #0
 8021192:	d001      	beq.n	8021198 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021194:	f7ff fc90 	bl	8020ab8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8021198:	2234      	movs	r2, #52	; 0x34
 802119a:	2100      	movs	r1, #0
 802119c:	68f8      	ldr	r0, [r7, #12]
 802119e:	f004 fde3 	bl	8025d68 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80211a2:	f7ff fc37 	bl	8020a14 <dhcp_inc_pcb_refcount>
 80211a6:	4603      	mov	r3, r0
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d002      	beq.n	80211b2 <dhcp_start+0xa2>
    return ERR_MEM;
 80211ac:	f04f 33ff 	mov.w	r3, #4294967295
 80211b0:	e020      	b.n	80211f4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80211b2:	68fb      	ldr	r3, [r7, #12]
 80211b4:	2201      	movs	r2, #1
 80211b6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80211be:	f003 0304 	and.w	r3, r3, #4
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	d105      	bne.n	80211d2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80211c6:	2102      	movs	r1, #2
 80211c8:	68f8      	ldr	r0, [r7, #12]
 80211ca:	f000 fd01 	bl	8021bd0 <dhcp_set_state>
    return ERR_OK;
 80211ce:	2300      	movs	r3, #0
 80211d0:	e010      	b.n	80211f4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80211d2:	6878      	ldr	r0, [r7, #4]
 80211d4:	f000 f8f8 	bl	80213c8 <dhcp_discover>
 80211d8:	4603      	mov	r3, r0
 80211da:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80211dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d005      	beq.n	80211f0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80211e4:	6878      	ldr	r0, [r7, #4]
 80211e6:	f000 fc59 	bl	8021a9c <dhcp_release_and_stop>
    return ERR_MEM;
 80211ea:	f04f 33ff 	mov.w	r3, #4294967295
 80211ee:	e001      	b.n	80211f4 <dhcp_start+0xe4>
  }
  return result;
 80211f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80211f4:	4618      	mov	r0, r3
 80211f6:	3710      	adds	r7, #16
 80211f8:	46bd      	mov	sp, r7
 80211fa:	bd80      	pop	{r7, pc}
 80211fc:	08029308 	.word	0x08029308
 8021200:	080293ec 	.word	0x080293ec
 8021204:	08029368 	.word	0x08029368
 8021208:	08029430 	.word	0x08029430

0802120c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 802120c:	b580      	push	{r7, lr}
 802120e:	b084      	sub	sp, #16
 8021210:	af00      	add	r7, sp, #0
 8021212:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021218:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 802121a:	68fb      	ldr	r3, [r7, #12]
 802121c:	2b00      	cmp	r3, #0
 802121e:	d025      	beq.n	802126c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8021220:	68fb      	ldr	r3, [r7, #12]
 8021222:	795b      	ldrb	r3, [r3, #5]
 8021224:	2b0a      	cmp	r3, #10
 8021226:	d008      	beq.n	802123a <dhcp_network_changed+0x2e>
 8021228:	2b0a      	cmp	r3, #10
 802122a:	dc0d      	bgt.n	8021248 <dhcp_network_changed+0x3c>
 802122c:	2b00      	cmp	r3, #0
 802122e:	d01f      	beq.n	8021270 <dhcp_network_changed+0x64>
 8021230:	2b00      	cmp	r3, #0
 8021232:	db09      	blt.n	8021248 <dhcp_network_changed+0x3c>
 8021234:	3b03      	subs	r3, #3
 8021236:	2b02      	cmp	r3, #2
 8021238:	d806      	bhi.n	8021248 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 802123a:	68fb      	ldr	r3, [r7, #12]
 802123c:	2200      	movs	r2, #0
 802123e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8021240:	6878      	ldr	r0, [r7, #4]
 8021242:	f000 fb75 	bl	8021930 <dhcp_reboot>
      break;
 8021246:	e014      	b.n	8021272 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8021248:	68fb      	ldr	r3, [r7, #12]
 802124a:	795b      	ldrb	r3, [r3, #5]
 802124c:	2b0c      	cmp	r3, #12
 802124e:	d906      	bls.n	802125e <dhcp_network_changed+0x52>
 8021250:	4b09      	ldr	r3, [pc, #36]	; (8021278 <dhcp_network_changed+0x6c>)
 8021252:	f240 326d 	movw	r2, #877	; 0x36d
 8021256:	4909      	ldr	r1, [pc, #36]	; (802127c <dhcp_network_changed+0x70>)
 8021258:	4809      	ldr	r0, [pc, #36]	; (8021280 <dhcp_network_changed+0x74>)
 802125a:	f004 fe83 	bl	8025f64 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 802125e:	68fb      	ldr	r3, [r7, #12]
 8021260:	2200      	movs	r2, #0
 8021262:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8021264:	6878      	ldr	r0, [r7, #4]
 8021266:	f000 f8af 	bl	80213c8 <dhcp_discover>
      break;
 802126a:	e002      	b.n	8021272 <dhcp_network_changed+0x66>
    return;
 802126c:	bf00      	nop
 802126e:	e000      	b.n	8021272 <dhcp_network_changed+0x66>
      break;
 8021270:	bf00      	nop
  }
}
 8021272:	3710      	adds	r7, #16
 8021274:	46bd      	mov	sp, r7
 8021276:	bd80      	pop	{r7, pc}
 8021278:	08029308 	.word	0x08029308
 802127c:	08029454 	.word	0x08029454
 8021280:	08029368 	.word	0x08029368

08021284 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8021284:	b580      	push	{r7, lr}
 8021286:	b084      	sub	sp, #16
 8021288:	af00      	add	r7, sp, #0
 802128a:	6078      	str	r0, [r7, #4]
 802128c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	2b00      	cmp	r3, #0
 8021292:	d107      	bne.n	80212a4 <dhcp_arp_reply+0x20>
 8021294:	4b0e      	ldr	r3, [pc, #56]	; (80212d0 <dhcp_arp_reply+0x4c>)
 8021296:	f240 328b 	movw	r2, #907	; 0x38b
 802129a:	490e      	ldr	r1, [pc, #56]	; (80212d4 <dhcp_arp_reply+0x50>)
 802129c:	480e      	ldr	r0, [pc, #56]	; (80212d8 <dhcp_arp_reply+0x54>)
 802129e:	f004 fe61 	bl	8025f64 <iprintf>
 80212a2:	e012      	b.n	80212ca <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212a8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80212aa:	68fb      	ldr	r3, [r7, #12]
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d00c      	beq.n	80212ca <dhcp_arp_reply+0x46>
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	795b      	ldrb	r3, [r3, #5]
 80212b4:	2b08      	cmp	r3, #8
 80212b6:	d108      	bne.n	80212ca <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80212b8:	683b      	ldr	r3, [r7, #0]
 80212ba:	681a      	ldr	r2, [r3, #0]
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	69db      	ldr	r3, [r3, #28]
 80212c0:	429a      	cmp	r2, r3
 80212c2:	d102      	bne.n	80212ca <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80212c4:	6878      	ldr	r0, [r7, #4]
 80212c6:	f000 f809 	bl	80212dc <dhcp_decline>
    }
  }
}
 80212ca:	3710      	adds	r7, #16
 80212cc:	46bd      	mov	sp, r7
 80212ce:	bd80      	pop	{r7, pc}
 80212d0:	08029308 	.word	0x08029308
 80212d4:	080293ec 	.word	0x080293ec
 80212d8:	08029368 	.word	0x08029368

080212dc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80212dc:	b5b0      	push	{r4, r5, r7, lr}
 80212de:	b08a      	sub	sp, #40	; 0x28
 80212e0:	af02      	add	r7, sp, #8
 80212e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80212e8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80212ea:	210c      	movs	r1, #12
 80212ec:	69b8      	ldr	r0, [r7, #24]
 80212ee:	f000 fc6f 	bl	8021bd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80212f2:	f107 030c 	add.w	r3, r7, #12
 80212f6:	2204      	movs	r2, #4
 80212f8:	69b9      	ldr	r1, [r7, #24]
 80212fa:	6878      	ldr	r0, [r7, #4]
 80212fc:	f001 f8f4 	bl	80224e8 <dhcp_create_msg>
 8021300:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8021302:	697b      	ldr	r3, [r7, #20]
 8021304:	2b00      	cmp	r3, #0
 8021306:	d035      	beq.n	8021374 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8021308:	697b      	ldr	r3, [r7, #20]
 802130a:	685b      	ldr	r3, [r3, #4]
 802130c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802130e:	89b8      	ldrh	r0, [r7, #12]
 8021310:	693b      	ldr	r3, [r7, #16]
 8021312:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021316:	2304      	movs	r3, #4
 8021318:	2232      	movs	r2, #50	; 0x32
 802131a:	f000 fc73 	bl	8021c04 <dhcp_option>
 802131e:	4603      	mov	r3, r0
 8021320:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021322:	89bc      	ldrh	r4, [r7, #12]
 8021324:	693b      	ldr	r3, [r7, #16]
 8021326:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 802132a:	69bb      	ldr	r3, [r7, #24]
 802132c:	69db      	ldr	r3, [r3, #28]
 802132e:	4618      	mov	r0, r3
 8021330:	f7f7 fc93 	bl	8018c5a <lwip_htonl>
 8021334:	4603      	mov	r3, r0
 8021336:	461a      	mov	r2, r3
 8021338:	4629      	mov	r1, r5
 802133a:	4620      	mov	r0, r4
 802133c:	f000 fcee 	bl	8021d1c <dhcp_option_long>
 8021340:	4603      	mov	r3, r0
 8021342:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8021344:	89b8      	ldrh	r0, [r7, #12]
 8021346:	693b      	ldr	r3, [r7, #16]
 8021348:	33f0      	adds	r3, #240	; 0xf0
 802134a:	697a      	ldr	r2, [r7, #20]
 802134c:	4619      	mov	r1, r3
 802134e:	f001 f9a1 	bl	8022694 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021352:	4b19      	ldr	r3, [pc, #100]	; (80213b8 <dhcp_decline+0xdc>)
 8021354:	6818      	ldr	r0, [r3, #0]
 8021356:	4b19      	ldr	r3, [pc, #100]	; (80213bc <dhcp_decline+0xe0>)
 8021358:	9301      	str	r3, [sp, #4]
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	9300      	str	r3, [sp, #0]
 802135e:	2343      	movs	r3, #67	; 0x43
 8021360:	4a17      	ldr	r2, [pc, #92]	; (80213c0 <dhcp_decline+0xe4>)
 8021362:	6979      	ldr	r1, [r7, #20]
 8021364:	f7ff f8d0 	bl	8020508 <udp_sendto_if_src>
 8021368:	4603      	mov	r3, r0
 802136a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 802136c:	6978      	ldr	r0, [r7, #20]
 802136e:	f7f9 f915 	bl	801a59c <pbuf_free>
 8021372:	e001      	b.n	8021378 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8021374:	23ff      	movs	r3, #255	; 0xff
 8021376:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8021378:	69bb      	ldr	r3, [r7, #24]
 802137a:	799b      	ldrb	r3, [r3, #6]
 802137c:	2bff      	cmp	r3, #255	; 0xff
 802137e:	d005      	beq.n	802138c <dhcp_decline+0xb0>
    dhcp->tries++;
 8021380:	69bb      	ldr	r3, [r7, #24]
 8021382:	799b      	ldrb	r3, [r3, #6]
 8021384:	3301      	adds	r3, #1
 8021386:	b2da      	uxtb	r2, r3
 8021388:	69bb      	ldr	r3, [r7, #24]
 802138a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 802138c:	f242 7310 	movw	r3, #10000	; 0x2710
 8021390:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021392:	89fb      	ldrh	r3, [r7, #14]
 8021394:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021398:	4a0a      	ldr	r2, [pc, #40]	; (80213c4 <dhcp_decline+0xe8>)
 802139a:	fb82 1203 	smull	r1, r2, r2, r3
 802139e:	1152      	asrs	r2, r2, #5
 80213a0:	17db      	asrs	r3, r3, #31
 80213a2:	1ad3      	subs	r3, r2, r3
 80213a4:	b29a      	uxth	r2, r3
 80213a6:	69bb      	ldr	r3, [r7, #24]
 80213a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80213aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80213ae:	4618      	mov	r0, r3
 80213b0:	3720      	adds	r7, #32
 80213b2:	46bd      	mov	sp, r7
 80213b4:	bdb0      	pop	{r4, r5, r7, pc}
 80213b6:	bf00      	nop
 80213b8:	2400d084 	.word	0x2400d084
 80213bc:	0802a5ac 	.word	0x0802a5ac
 80213c0:	0802a5b0 	.word	0x0802a5b0
 80213c4:	10624dd3 	.word	0x10624dd3

080213c8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80213c8:	b580      	push	{r7, lr}
 80213ca:	b08a      	sub	sp, #40	; 0x28
 80213cc:	af02      	add	r7, sp, #8
 80213ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213d4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80213d6:	2300      	movs	r3, #0
 80213d8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80213da:	69bb      	ldr	r3, [r7, #24]
 80213dc:	2200      	movs	r2, #0
 80213de:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80213e0:	2106      	movs	r1, #6
 80213e2:	69b8      	ldr	r0, [r7, #24]
 80213e4:	f000 fbf4 	bl	8021bd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80213e8:	f107 0308 	add.w	r3, r7, #8
 80213ec:	2201      	movs	r2, #1
 80213ee:	69b9      	ldr	r1, [r7, #24]
 80213f0:	6878      	ldr	r0, [r7, #4]
 80213f2:	f001 f879 	bl	80224e8 <dhcp_create_msg>
 80213f6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80213f8:	693b      	ldr	r3, [r7, #16]
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	d04b      	beq.n	8021496 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80213fe:	693b      	ldr	r3, [r7, #16]
 8021400:	685b      	ldr	r3, [r3, #4]
 8021402:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021404:	8938      	ldrh	r0, [r7, #8]
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802140c:	2302      	movs	r3, #2
 802140e:	2239      	movs	r2, #57	; 0x39
 8021410:	f000 fbf8 	bl	8021c04 <dhcp_option>
 8021414:	4603      	mov	r3, r0
 8021416:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021418:	8938      	ldrh	r0, [r7, #8]
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021424:	461a      	mov	r2, r3
 8021426:	f000 fc47 	bl	8021cb8 <dhcp_option_short>
 802142a:	4603      	mov	r3, r0
 802142c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802142e:	8938      	ldrh	r0, [r7, #8]
 8021430:	68fb      	ldr	r3, [r7, #12]
 8021432:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021436:	2303      	movs	r3, #3
 8021438:	2237      	movs	r2, #55	; 0x37
 802143a:	f000 fbe3 	bl	8021c04 <dhcp_option>
 802143e:	4603      	mov	r3, r0
 8021440:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021442:	2300      	movs	r3, #0
 8021444:	77fb      	strb	r3, [r7, #31]
 8021446:	e00e      	b.n	8021466 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021448:	8938      	ldrh	r0, [r7, #8]
 802144a:	68fb      	ldr	r3, [r7, #12]
 802144c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021450:	7ffb      	ldrb	r3, [r7, #31]
 8021452:	4a29      	ldr	r2, [pc, #164]	; (80214f8 <dhcp_discover+0x130>)
 8021454:	5cd3      	ldrb	r3, [r2, r3]
 8021456:	461a      	mov	r2, r3
 8021458:	f000 fc08 	bl	8021c6c <dhcp_option_byte>
 802145c:	4603      	mov	r3, r0
 802145e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021460:	7ffb      	ldrb	r3, [r7, #31]
 8021462:	3301      	adds	r3, #1
 8021464:	77fb      	strb	r3, [r7, #31]
 8021466:	7ffb      	ldrb	r3, [r7, #31]
 8021468:	2b02      	cmp	r3, #2
 802146a:	d9ed      	bls.n	8021448 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802146c:	8938      	ldrh	r0, [r7, #8]
 802146e:	68fb      	ldr	r3, [r7, #12]
 8021470:	33f0      	adds	r3, #240	; 0xf0
 8021472:	693a      	ldr	r2, [r7, #16]
 8021474:	4619      	mov	r1, r3
 8021476:	f001 f90d 	bl	8022694 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802147a:	4b20      	ldr	r3, [pc, #128]	; (80214fc <dhcp_discover+0x134>)
 802147c:	6818      	ldr	r0, [r3, #0]
 802147e:	4b20      	ldr	r3, [pc, #128]	; (8021500 <dhcp_discover+0x138>)
 8021480:	9301      	str	r3, [sp, #4]
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	9300      	str	r3, [sp, #0]
 8021486:	2343      	movs	r3, #67	; 0x43
 8021488:	4a1e      	ldr	r2, [pc, #120]	; (8021504 <dhcp_discover+0x13c>)
 802148a:	6939      	ldr	r1, [r7, #16]
 802148c:	f7ff f83c 	bl	8020508 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8021490:	6938      	ldr	r0, [r7, #16]
 8021492:	f7f9 f883 	bl	801a59c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8021496:	69bb      	ldr	r3, [r7, #24]
 8021498:	799b      	ldrb	r3, [r3, #6]
 802149a:	2bff      	cmp	r3, #255	; 0xff
 802149c:	d005      	beq.n	80214aa <dhcp_discover+0xe2>
    dhcp->tries++;
 802149e:	69bb      	ldr	r3, [r7, #24]
 80214a0:	799b      	ldrb	r3, [r3, #6]
 80214a2:	3301      	adds	r3, #1
 80214a4:	b2da      	uxtb	r2, r3
 80214a6:	69bb      	ldr	r3, [r7, #24]
 80214a8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80214aa:	69bb      	ldr	r3, [r7, #24]
 80214ac:	799b      	ldrb	r3, [r3, #6]
 80214ae:	2b05      	cmp	r3, #5
 80214b0:	d80d      	bhi.n	80214ce <dhcp_discover+0x106>
 80214b2:	69bb      	ldr	r3, [r7, #24]
 80214b4:	799b      	ldrb	r3, [r3, #6]
 80214b6:	461a      	mov	r2, r3
 80214b8:	2301      	movs	r3, #1
 80214ba:	4093      	lsls	r3, r2
 80214bc:	b29b      	uxth	r3, r3
 80214be:	461a      	mov	r2, r3
 80214c0:	0152      	lsls	r2, r2, #5
 80214c2:	1ad2      	subs	r2, r2, r3
 80214c4:	0092      	lsls	r2, r2, #2
 80214c6:	4413      	add	r3, r2
 80214c8:	00db      	lsls	r3, r3, #3
 80214ca:	b29b      	uxth	r3, r3
 80214cc:	e001      	b.n	80214d2 <dhcp_discover+0x10a>
 80214ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80214d2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80214d4:	897b      	ldrh	r3, [r7, #10]
 80214d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80214da:	4a0b      	ldr	r2, [pc, #44]	; (8021508 <dhcp_discover+0x140>)
 80214dc:	fb82 1203 	smull	r1, r2, r2, r3
 80214e0:	1152      	asrs	r2, r2, #5
 80214e2:	17db      	asrs	r3, r3, #31
 80214e4:	1ad3      	subs	r3, r2, r3
 80214e6:	b29a      	uxth	r2, r3
 80214e8:	69bb      	ldr	r3, [r7, #24]
 80214ea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80214ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80214f0:	4618      	mov	r0, r3
 80214f2:	3720      	adds	r7, #32
 80214f4:	46bd      	mov	sp, r7
 80214f6:	bd80      	pop	{r7, pc}
 80214f8:	24000464 	.word	0x24000464
 80214fc:	2400d084 	.word	0x2400d084
 8021500:	0802a5ac 	.word	0x0802a5ac
 8021504:	0802a5b0 	.word	0x0802a5b0
 8021508:	10624dd3 	.word	0x10624dd3

0802150c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 802150c:	b580      	push	{r7, lr}
 802150e:	b088      	sub	sp, #32
 8021510:	af00      	add	r7, sp, #0
 8021512:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d107      	bne.n	802152a <dhcp_bind+0x1e>
 802151a:	4b64      	ldr	r3, [pc, #400]	; (80216ac <dhcp_bind+0x1a0>)
 802151c:	f240 4215 	movw	r2, #1045	; 0x415
 8021520:	4963      	ldr	r1, [pc, #396]	; (80216b0 <dhcp_bind+0x1a4>)
 8021522:	4864      	ldr	r0, [pc, #400]	; (80216b4 <dhcp_bind+0x1a8>)
 8021524:	f004 fd1e 	bl	8025f64 <iprintf>
 8021528:	e0bc      	b.n	80216a4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 802152a:	687b      	ldr	r3, [r7, #4]
 802152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802152e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8021530:	69bb      	ldr	r3, [r7, #24]
 8021532:	2b00      	cmp	r3, #0
 8021534:	d107      	bne.n	8021546 <dhcp_bind+0x3a>
 8021536:	4b5d      	ldr	r3, [pc, #372]	; (80216ac <dhcp_bind+0x1a0>)
 8021538:	f240 4217 	movw	r2, #1047	; 0x417
 802153c:	495e      	ldr	r1, [pc, #376]	; (80216b8 <dhcp_bind+0x1ac>)
 802153e:	485d      	ldr	r0, [pc, #372]	; (80216b4 <dhcp_bind+0x1a8>)
 8021540:	f004 fd10 	bl	8025f64 <iprintf>
 8021544:	e0ae      	b.n	80216a4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8021546:	69bb      	ldr	r3, [r7, #24]
 8021548:	2200      	movs	r2, #0
 802154a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802154c:	69bb      	ldr	r3, [r7, #24]
 802154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021554:	d019      	beq.n	802158a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021556:	69bb      	ldr	r3, [r7, #24]
 8021558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802155a:	331e      	adds	r3, #30
 802155c:	4a57      	ldr	r2, [pc, #348]	; (80216bc <dhcp_bind+0x1b0>)
 802155e:	fba2 2303 	umull	r2, r3, r2, r3
 8021562:	095b      	lsrs	r3, r3, #5
 8021564:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8021566:	69fb      	ldr	r3, [r7, #28]
 8021568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802156c:	d302      	bcc.n	8021574 <dhcp_bind+0x68>
      timeout = 0xffff;
 802156e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021572:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8021574:	69fb      	ldr	r3, [r7, #28]
 8021576:	b29a      	uxth	r2, r3
 8021578:	69bb      	ldr	r3, [r7, #24]
 802157a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 802157c:	69bb      	ldr	r3, [r7, #24]
 802157e:	8a9b      	ldrh	r3, [r3, #20]
 8021580:	2b00      	cmp	r3, #0
 8021582:	d102      	bne.n	802158a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8021584:	69bb      	ldr	r3, [r7, #24]
 8021586:	2201      	movs	r2, #1
 8021588:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802158a:	69bb      	ldr	r3, [r7, #24]
 802158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021592:	d01d      	beq.n	80215d0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8021594:	69bb      	ldr	r3, [r7, #24]
 8021596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021598:	331e      	adds	r3, #30
 802159a:	4a48      	ldr	r2, [pc, #288]	; (80216bc <dhcp_bind+0x1b0>)
 802159c:	fba2 2303 	umull	r2, r3, r2, r3
 80215a0:	095b      	lsrs	r3, r3, #5
 80215a2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80215a4:	69fb      	ldr	r3, [r7, #28]
 80215a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80215aa:	d302      	bcc.n	80215b2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80215ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80215b0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80215b2:	69fb      	ldr	r3, [r7, #28]
 80215b4:	b29a      	uxth	r2, r3
 80215b6:	69bb      	ldr	r3, [r7, #24]
 80215b8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80215ba:	69bb      	ldr	r3, [r7, #24]
 80215bc:	895b      	ldrh	r3, [r3, #10]
 80215be:	2b00      	cmp	r3, #0
 80215c0:	d102      	bne.n	80215c8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80215c2:	69bb      	ldr	r3, [r7, #24]
 80215c4:	2201      	movs	r2, #1
 80215c6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80215c8:	69bb      	ldr	r3, [r7, #24]
 80215ca:	895a      	ldrh	r2, [r3, #10]
 80215cc:	69bb      	ldr	r3, [r7, #24]
 80215ce:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80215d0:	69bb      	ldr	r3, [r7, #24]
 80215d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80215d8:	d01d      	beq.n	8021616 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80215da:	69bb      	ldr	r3, [r7, #24]
 80215dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215de:	331e      	adds	r3, #30
 80215e0:	4a36      	ldr	r2, [pc, #216]	; (80216bc <dhcp_bind+0x1b0>)
 80215e2:	fba2 2303 	umull	r2, r3, r2, r3
 80215e6:	095b      	lsrs	r3, r3, #5
 80215e8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80215ea:	69fb      	ldr	r3, [r7, #28]
 80215ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80215f0:	d302      	bcc.n	80215f8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80215f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80215f6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80215f8:	69fb      	ldr	r3, [r7, #28]
 80215fa:	b29a      	uxth	r2, r3
 80215fc:	69bb      	ldr	r3, [r7, #24]
 80215fe:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8021600:	69bb      	ldr	r3, [r7, #24]
 8021602:	899b      	ldrh	r3, [r3, #12]
 8021604:	2b00      	cmp	r3, #0
 8021606:	d102      	bne.n	802160e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8021608:	69bb      	ldr	r3, [r7, #24]
 802160a:	2201      	movs	r2, #1
 802160c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 802160e:	69bb      	ldr	r3, [r7, #24]
 8021610:	899a      	ldrh	r2, [r3, #12]
 8021612:	69bb      	ldr	r3, [r7, #24]
 8021614:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8021616:	69bb      	ldr	r3, [r7, #24]
 8021618:	895a      	ldrh	r2, [r3, #10]
 802161a:	69bb      	ldr	r3, [r7, #24]
 802161c:	899b      	ldrh	r3, [r3, #12]
 802161e:	429a      	cmp	r2, r3
 8021620:	d306      	bcc.n	8021630 <dhcp_bind+0x124>
 8021622:	69bb      	ldr	r3, [r7, #24]
 8021624:	899b      	ldrh	r3, [r3, #12]
 8021626:	2b00      	cmp	r3, #0
 8021628:	d002      	beq.n	8021630 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 802162a:	69bb      	ldr	r3, [r7, #24]
 802162c:	2200      	movs	r2, #0
 802162e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8021630:	69bb      	ldr	r3, [r7, #24]
 8021632:	79db      	ldrb	r3, [r3, #7]
 8021634:	2b00      	cmp	r3, #0
 8021636:	d003      	beq.n	8021640 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8021638:	69bb      	ldr	r3, [r7, #24]
 802163a:	6a1b      	ldr	r3, [r3, #32]
 802163c:	613b      	str	r3, [r7, #16]
 802163e:	e014      	b.n	802166a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8021640:	69bb      	ldr	r3, [r7, #24]
 8021642:	331c      	adds	r3, #28
 8021644:	781b      	ldrb	r3, [r3, #0]
 8021646:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8021648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802164c:	2b00      	cmp	r3, #0
 802164e:	db02      	blt.n	8021656 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8021650:	23ff      	movs	r3, #255	; 0xff
 8021652:	613b      	str	r3, [r7, #16]
 8021654:	e009      	b.n	802166a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8021656:	7dfb      	ldrb	r3, [r7, #23]
 8021658:	2bbf      	cmp	r3, #191	; 0xbf
 802165a:	d903      	bls.n	8021664 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 802165c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8021660:	613b      	str	r3, [r7, #16]
 8021662:	e002      	b.n	802166a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8021664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021668:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 802166a:	69bb      	ldr	r3, [r7, #24]
 802166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802166e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8021670:	68fb      	ldr	r3, [r7, #12]
 8021672:	2b00      	cmp	r3, #0
 8021674:	d108      	bne.n	8021688 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8021676:	69bb      	ldr	r3, [r7, #24]
 8021678:	69da      	ldr	r2, [r3, #28]
 802167a:	693b      	ldr	r3, [r7, #16]
 802167c:	4013      	ands	r3, r2
 802167e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8021680:	68fb      	ldr	r3, [r7, #12]
 8021682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021686:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8021688:	210a      	movs	r1, #10
 802168a:	69b8      	ldr	r0, [r7, #24]
 802168c:	f000 faa0 	bl	8021bd0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8021690:	69bb      	ldr	r3, [r7, #24]
 8021692:	f103 011c 	add.w	r1, r3, #28
 8021696:	f107 030c 	add.w	r3, r7, #12
 802169a:	f107 0210 	add.w	r2, r7, #16
 802169e:	6878      	ldr	r0, [r7, #4]
 80216a0:	f7f8 fa6e 	bl	8019b80 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80216a4:	3720      	adds	r7, #32
 80216a6:	46bd      	mov	sp, r7
 80216a8:	bd80      	pop	{r7, pc}
 80216aa:	bf00      	nop
 80216ac:	08029308 	.word	0x08029308
 80216b0:	08029468 	.word	0x08029468
 80216b4:	08029368 	.word	0x08029368
 80216b8:	08029484 	.word	0x08029484
 80216bc:	88888889 	.word	0x88888889

080216c0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80216c0:	b580      	push	{r7, lr}
 80216c2:	b08a      	sub	sp, #40	; 0x28
 80216c4:	af02      	add	r7, sp, #8
 80216c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80216c8:	687b      	ldr	r3, [r7, #4]
 80216ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80216cc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80216ce:	2105      	movs	r1, #5
 80216d0:	69b8      	ldr	r0, [r7, #24]
 80216d2:	f000 fa7d 	bl	8021bd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80216d6:	f107 030c 	add.w	r3, r7, #12
 80216da:	2203      	movs	r2, #3
 80216dc:	69b9      	ldr	r1, [r7, #24]
 80216de:	6878      	ldr	r0, [r7, #4]
 80216e0:	f000 ff02 	bl	80224e8 <dhcp_create_msg>
 80216e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80216e6:	697b      	ldr	r3, [r7, #20]
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d04e      	beq.n	802178a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80216ec:	697b      	ldr	r3, [r7, #20]
 80216ee:	685b      	ldr	r3, [r3, #4]
 80216f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80216f2:	89b8      	ldrh	r0, [r7, #12]
 80216f4:	693b      	ldr	r3, [r7, #16]
 80216f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80216fa:	2302      	movs	r3, #2
 80216fc:	2239      	movs	r2, #57	; 0x39
 80216fe:	f000 fa81 	bl	8021c04 <dhcp_option>
 8021702:	4603      	mov	r3, r0
 8021704:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021706:	89b8      	ldrh	r0, [r7, #12]
 8021708:	693b      	ldr	r3, [r7, #16]
 802170a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021712:	461a      	mov	r2, r3
 8021714:	f000 fad0 	bl	8021cb8 <dhcp_option_short>
 8021718:	4603      	mov	r3, r0
 802171a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802171c:	89b8      	ldrh	r0, [r7, #12]
 802171e:	693b      	ldr	r3, [r7, #16]
 8021720:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021724:	2303      	movs	r3, #3
 8021726:	2237      	movs	r2, #55	; 0x37
 8021728:	f000 fa6c 	bl	8021c04 <dhcp_option>
 802172c:	4603      	mov	r3, r0
 802172e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021730:	2300      	movs	r3, #0
 8021732:	77bb      	strb	r3, [r7, #30]
 8021734:	e00e      	b.n	8021754 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021736:	89b8      	ldrh	r0, [r7, #12]
 8021738:	693b      	ldr	r3, [r7, #16]
 802173a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802173e:	7fbb      	ldrb	r3, [r7, #30]
 8021740:	4a2a      	ldr	r2, [pc, #168]	; (80217ec <dhcp_renew+0x12c>)
 8021742:	5cd3      	ldrb	r3, [r2, r3]
 8021744:	461a      	mov	r2, r3
 8021746:	f000 fa91 	bl	8021c6c <dhcp_option_byte>
 802174a:	4603      	mov	r3, r0
 802174c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802174e:	7fbb      	ldrb	r3, [r7, #30]
 8021750:	3301      	adds	r3, #1
 8021752:	77bb      	strb	r3, [r7, #30]
 8021754:	7fbb      	ldrb	r3, [r7, #30]
 8021756:	2b02      	cmp	r3, #2
 8021758:	d9ed      	bls.n	8021736 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802175a:	89b8      	ldrh	r0, [r7, #12]
 802175c:	693b      	ldr	r3, [r7, #16]
 802175e:	33f0      	adds	r3, #240	; 0xf0
 8021760:	697a      	ldr	r2, [r7, #20]
 8021762:	4619      	mov	r1, r3
 8021764:	f000 ff96 	bl	8022694 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021768:	4b21      	ldr	r3, [pc, #132]	; (80217f0 <dhcp_renew+0x130>)
 802176a:	6818      	ldr	r0, [r3, #0]
 802176c:	69bb      	ldr	r3, [r7, #24]
 802176e:	f103 0218 	add.w	r2, r3, #24
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	9300      	str	r3, [sp, #0]
 8021776:	2343      	movs	r3, #67	; 0x43
 8021778:	6979      	ldr	r1, [r7, #20]
 802177a:	f7fe fe51 	bl	8020420 <udp_sendto_if>
 802177e:	4603      	mov	r3, r0
 8021780:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8021782:	6978      	ldr	r0, [r7, #20]
 8021784:	f7f8 ff0a 	bl	801a59c <pbuf_free>
 8021788:	e001      	b.n	802178e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 802178a:	23ff      	movs	r3, #255	; 0xff
 802178c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 802178e:	69bb      	ldr	r3, [r7, #24]
 8021790:	799b      	ldrb	r3, [r3, #6]
 8021792:	2bff      	cmp	r3, #255	; 0xff
 8021794:	d005      	beq.n	80217a2 <dhcp_renew+0xe2>
    dhcp->tries++;
 8021796:	69bb      	ldr	r3, [r7, #24]
 8021798:	799b      	ldrb	r3, [r3, #6]
 802179a:	3301      	adds	r3, #1
 802179c:	b2da      	uxtb	r2, r3
 802179e:	69bb      	ldr	r3, [r7, #24]
 80217a0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80217a2:	69bb      	ldr	r3, [r7, #24]
 80217a4:	799b      	ldrb	r3, [r3, #6]
 80217a6:	2b09      	cmp	r3, #9
 80217a8:	d80a      	bhi.n	80217c0 <dhcp_renew+0x100>
 80217aa:	69bb      	ldr	r3, [r7, #24]
 80217ac:	799b      	ldrb	r3, [r3, #6]
 80217ae:	b29b      	uxth	r3, r3
 80217b0:	461a      	mov	r2, r3
 80217b2:	0152      	lsls	r2, r2, #5
 80217b4:	1ad2      	subs	r2, r2, r3
 80217b6:	0092      	lsls	r2, r2, #2
 80217b8:	4413      	add	r3, r2
 80217ba:	011b      	lsls	r3, r3, #4
 80217bc:	b29b      	uxth	r3, r3
 80217be:	e001      	b.n	80217c4 <dhcp_renew+0x104>
 80217c0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80217c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80217c6:	89fb      	ldrh	r3, [r7, #14]
 80217c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80217cc:	4a09      	ldr	r2, [pc, #36]	; (80217f4 <dhcp_renew+0x134>)
 80217ce:	fb82 1203 	smull	r1, r2, r2, r3
 80217d2:	1152      	asrs	r2, r2, #5
 80217d4:	17db      	asrs	r3, r3, #31
 80217d6:	1ad3      	subs	r3, r2, r3
 80217d8:	b29a      	uxth	r2, r3
 80217da:	69bb      	ldr	r3, [r7, #24]
 80217dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80217de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80217e2:	4618      	mov	r0, r3
 80217e4:	3720      	adds	r7, #32
 80217e6:	46bd      	mov	sp, r7
 80217e8:	bd80      	pop	{r7, pc}
 80217ea:	bf00      	nop
 80217ec:	24000464 	.word	0x24000464
 80217f0:	2400d084 	.word	0x2400d084
 80217f4:	10624dd3 	.word	0x10624dd3

080217f8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80217f8:	b580      	push	{r7, lr}
 80217fa:	b08a      	sub	sp, #40	; 0x28
 80217fc:	af02      	add	r7, sp, #8
 80217fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021804:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8021806:	2104      	movs	r1, #4
 8021808:	69b8      	ldr	r0, [r7, #24]
 802180a:	f000 f9e1 	bl	8021bd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802180e:	f107 030c 	add.w	r3, r7, #12
 8021812:	2203      	movs	r2, #3
 8021814:	69b9      	ldr	r1, [r7, #24]
 8021816:	6878      	ldr	r0, [r7, #4]
 8021818:	f000 fe66 	bl	80224e8 <dhcp_create_msg>
 802181c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802181e:	697b      	ldr	r3, [r7, #20]
 8021820:	2b00      	cmp	r3, #0
 8021822:	d04c      	beq.n	80218be <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8021824:	697b      	ldr	r3, [r7, #20]
 8021826:	685b      	ldr	r3, [r3, #4]
 8021828:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802182a:	89b8      	ldrh	r0, [r7, #12]
 802182c:	693b      	ldr	r3, [r7, #16]
 802182e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021832:	2302      	movs	r3, #2
 8021834:	2239      	movs	r2, #57	; 0x39
 8021836:	f000 f9e5 	bl	8021c04 <dhcp_option>
 802183a:	4603      	mov	r3, r0
 802183c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802183e:	89b8      	ldrh	r0, [r7, #12]
 8021840:	693b      	ldr	r3, [r7, #16]
 8021842:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802184a:	461a      	mov	r2, r3
 802184c:	f000 fa34 	bl	8021cb8 <dhcp_option_short>
 8021850:	4603      	mov	r3, r0
 8021852:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021854:	89b8      	ldrh	r0, [r7, #12]
 8021856:	693b      	ldr	r3, [r7, #16]
 8021858:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802185c:	2303      	movs	r3, #3
 802185e:	2237      	movs	r2, #55	; 0x37
 8021860:	f000 f9d0 	bl	8021c04 <dhcp_option>
 8021864:	4603      	mov	r3, r0
 8021866:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021868:	2300      	movs	r3, #0
 802186a:	77bb      	strb	r3, [r7, #30]
 802186c:	e00e      	b.n	802188c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802186e:	89b8      	ldrh	r0, [r7, #12]
 8021870:	693b      	ldr	r3, [r7, #16]
 8021872:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021876:	7fbb      	ldrb	r3, [r7, #30]
 8021878:	4a29      	ldr	r2, [pc, #164]	; (8021920 <dhcp_rebind+0x128>)
 802187a:	5cd3      	ldrb	r3, [r2, r3]
 802187c:	461a      	mov	r2, r3
 802187e:	f000 f9f5 	bl	8021c6c <dhcp_option_byte>
 8021882:	4603      	mov	r3, r0
 8021884:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021886:	7fbb      	ldrb	r3, [r7, #30]
 8021888:	3301      	adds	r3, #1
 802188a:	77bb      	strb	r3, [r7, #30]
 802188c:	7fbb      	ldrb	r3, [r7, #30]
 802188e:	2b02      	cmp	r3, #2
 8021890:	d9ed      	bls.n	802186e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8021892:	89b8      	ldrh	r0, [r7, #12]
 8021894:	693b      	ldr	r3, [r7, #16]
 8021896:	33f0      	adds	r3, #240	; 0xf0
 8021898:	697a      	ldr	r2, [r7, #20]
 802189a:	4619      	mov	r1, r3
 802189c:	f000 fefa 	bl	8022694 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80218a0:	4b20      	ldr	r3, [pc, #128]	; (8021924 <dhcp_rebind+0x12c>)
 80218a2:	6818      	ldr	r0, [r3, #0]
 80218a4:	687b      	ldr	r3, [r7, #4]
 80218a6:	9300      	str	r3, [sp, #0]
 80218a8:	2343      	movs	r3, #67	; 0x43
 80218aa:	4a1f      	ldr	r2, [pc, #124]	; (8021928 <dhcp_rebind+0x130>)
 80218ac:	6979      	ldr	r1, [r7, #20]
 80218ae:	f7fe fdb7 	bl	8020420 <udp_sendto_if>
 80218b2:	4603      	mov	r3, r0
 80218b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80218b6:	6978      	ldr	r0, [r7, #20]
 80218b8:	f7f8 fe70 	bl	801a59c <pbuf_free>
 80218bc:	e001      	b.n	80218c2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80218be:	23ff      	movs	r3, #255	; 0xff
 80218c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80218c2:	69bb      	ldr	r3, [r7, #24]
 80218c4:	799b      	ldrb	r3, [r3, #6]
 80218c6:	2bff      	cmp	r3, #255	; 0xff
 80218c8:	d005      	beq.n	80218d6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80218ca:	69bb      	ldr	r3, [r7, #24]
 80218cc:	799b      	ldrb	r3, [r3, #6]
 80218ce:	3301      	adds	r3, #1
 80218d0:	b2da      	uxtb	r2, r3
 80218d2:	69bb      	ldr	r3, [r7, #24]
 80218d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80218d6:	69bb      	ldr	r3, [r7, #24]
 80218d8:	799b      	ldrb	r3, [r3, #6]
 80218da:	2b09      	cmp	r3, #9
 80218dc:	d80a      	bhi.n	80218f4 <dhcp_rebind+0xfc>
 80218de:	69bb      	ldr	r3, [r7, #24]
 80218e0:	799b      	ldrb	r3, [r3, #6]
 80218e2:	b29b      	uxth	r3, r3
 80218e4:	461a      	mov	r2, r3
 80218e6:	0152      	lsls	r2, r2, #5
 80218e8:	1ad2      	subs	r2, r2, r3
 80218ea:	0092      	lsls	r2, r2, #2
 80218ec:	4413      	add	r3, r2
 80218ee:	00db      	lsls	r3, r3, #3
 80218f0:	b29b      	uxth	r3, r3
 80218f2:	e001      	b.n	80218f8 <dhcp_rebind+0x100>
 80218f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80218f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80218fa:	89fb      	ldrh	r3, [r7, #14]
 80218fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021900:	4a0a      	ldr	r2, [pc, #40]	; (802192c <dhcp_rebind+0x134>)
 8021902:	fb82 1203 	smull	r1, r2, r2, r3
 8021906:	1152      	asrs	r2, r2, #5
 8021908:	17db      	asrs	r3, r3, #31
 802190a:	1ad3      	subs	r3, r2, r3
 802190c:	b29a      	uxth	r2, r3
 802190e:	69bb      	ldr	r3, [r7, #24]
 8021910:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8021912:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021916:	4618      	mov	r0, r3
 8021918:	3720      	adds	r7, #32
 802191a:	46bd      	mov	sp, r7
 802191c:	bd80      	pop	{r7, pc}
 802191e:	bf00      	nop
 8021920:	24000464 	.word	0x24000464
 8021924:	2400d084 	.word	0x2400d084
 8021928:	0802a5b0 	.word	0x0802a5b0
 802192c:	10624dd3 	.word	0x10624dd3

08021930 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8021930:	b5b0      	push	{r4, r5, r7, lr}
 8021932:	b08a      	sub	sp, #40	; 0x28
 8021934:	af02      	add	r7, sp, #8
 8021936:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802193c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 802193e:	2103      	movs	r1, #3
 8021940:	69b8      	ldr	r0, [r7, #24]
 8021942:	f000 f945 	bl	8021bd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021946:	f107 030c 	add.w	r3, r7, #12
 802194a:	2203      	movs	r2, #3
 802194c:	69b9      	ldr	r1, [r7, #24]
 802194e:	6878      	ldr	r0, [r7, #4]
 8021950:	f000 fdca 	bl	80224e8 <dhcp_create_msg>
 8021954:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8021956:	697b      	ldr	r3, [r7, #20]
 8021958:	2b00      	cmp	r3, #0
 802195a:	d066      	beq.n	8021a2a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 802195c:	697b      	ldr	r3, [r7, #20]
 802195e:	685b      	ldr	r3, [r3, #4]
 8021960:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021962:	89b8      	ldrh	r0, [r7, #12]
 8021964:	693b      	ldr	r3, [r7, #16]
 8021966:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802196a:	2302      	movs	r3, #2
 802196c:	2239      	movs	r2, #57	; 0x39
 802196e:	f000 f949 	bl	8021c04 <dhcp_option>
 8021972:	4603      	mov	r3, r0
 8021974:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8021976:	89b8      	ldrh	r0, [r7, #12]
 8021978:	693b      	ldr	r3, [r7, #16]
 802197a:	33f0      	adds	r3, #240	; 0xf0
 802197c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8021980:	4619      	mov	r1, r3
 8021982:	f000 f999 	bl	8021cb8 <dhcp_option_short>
 8021986:	4603      	mov	r3, r0
 8021988:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802198a:	89b8      	ldrh	r0, [r7, #12]
 802198c:	693b      	ldr	r3, [r7, #16]
 802198e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021992:	2304      	movs	r3, #4
 8021994:	2232      	movs	r2, #50	; 0x32
 8021996:	f000 f935 	bl	8021c04 <dhcp_option>
 802199a:	4603      	mov	r3, r0
 802199c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802199e:	89bc      	ldrh	r4, [r7, #12]
 80219a0:	693b      	ldr	r3, [r7, #16]
 80219a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80219a6:	69bb      	ldr	r3, [r7, #24]
 80219a8:	69db      	ldr	r3, [r3, #28]
 80219aa:	4618      	mov	r0, r3
 80219ac:	f7f7 f955 	bl	8018c5a <lwip_htonl>
 80219b0:	4603      	mov	r3, r0
 80219b2:	461a      	mov	r2, r3
 80219b4:	4629      	mov	r1, r5
 80219b6:	4620      	mov	r0, r4
 80219b8:	f000 f9b0 	bl	8021d1c <dhcp_option_long>
 80219bc:	4603      	mov	r3, r0
 80219be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80219c0:	89b8      	ldrh	r0, [r7, #12]
 80219c2:	693b      	ldr	r3, [r7, #16]
 80219c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80219c8:	2303      	movs	r3, #3
 80219ca:	2237      	movs	r2, #55	; 0x37
 80219cc:	f000 f91a 	bl	8021c04 <dhcp_option>
 80219d0:	4603      	mov	r3, r0
 80219d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80219d4:	2300      	movs	r3, #0
 80219d6:	77bb      	strb	r3, [r7, #30]
 80219d8:	e00e      	b.n	80219f8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80219da:	89b8      	ldrh	r0, [r7, #12]
 80219dc:	693b      	ldr	r3, [r7, #16]
 80219de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80219e2:	7fbb      	ldrb	r3, [r7, #30]
 80219e4:	4a29      	ldr	r2, [pc, #164]	; (8021a8c <dhcp_reboot+0x15c>)
 80219e6:	5cd3      	ldrb	r3, [r2, r3]
 80219e8:	461a      	mov	r2, r3
 80219ea:	f000 f93f 	bl	8021c6c <dhcp_option_byte>
 80219ee:	4603      	mov	r3, r0
 80219f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80219f2:	7fbb      	ldrb	r3, [r7, #30]
 80219f4:	3301      	adds	r3, #1
 80219f6:	77bb      	strb	r3, [r7, #30]
 80219f8:	7fbb      	ldrb	r3, [r7, #30]
 80219fa:	2b02      	cmp	r3, #2
 80219fc:	d9ed      	bls.n	80219da <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80219fe:	89b8      	ldrh	r0, [r7, #12]
 8021a00:	693b      	ldr	r3, [r7, #16]
 8021a02:	33f0      	adds	r3, #240	; 0xf0
 8021a04:	697a      	ldr	r2, [r7, #20]
 8021a06:	4619      	mov	r1, r3
 8021a08:	f000 fe44 	bl	8022694 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021a0c:	4b20      	ldr	r3, [pc, #128]	; (8021a90 <dhcp_reboot+0x160>)
 8021a0e:	6818      	ldr	r0, [r3, #0]
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	9300      	str	r3, [sp, #0]
 8021a14:	2343      	movs	r3, #67	; 0x43
 8021a16:	4a1f      	ldr	r2, [pc, #124]	; (8021a94 <dhcp_reboot+0x164>)
 8021a18:	6979      	ldr	r1, [r7, #20]
 8021a1a:	f7fe fd01 	bl	8020420 <udp_sendto_if>
 8021a1e:	4603      	mov	r3, r0
 8021a20:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8021a22:	6978      	ldr	r0, [r7, #20]
 8021a24:	f7f8 fdba 	bl	801a59c <pbuf_free>
 8021a28:	e001      	b.n	8021a2e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8021a2a:	23ff      	movs	r3, #255	; 0xff
 8021a2c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8021a2e:	69bb      	ldr	r3, [r7, #24]
 8021a30:	799b      	ldrb	r3, [r3, #6]
 8021a32:	2bff      	cmp	r3, #255	; 0xff
 8021a34:	d005      	beq.n	8021a42 <dhcp_reboot+0x112>
    dhcp->tries++;
 8021a36:	69bb      	ldr	r3, [r7, #24]
 8021a38:	799b      	ldrb	r3, [r3, #6]
 8021a3a:	3301      	adds	r3, #1
 8021a3c:	b2da      	uxtb	r2, r3
 8021a3e:	69bb      	ldr	r3, [r7, #24]
 8021a40:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021a42:	69bb      	ldr	r3, [r7, #24]
 8021a44:	799b      	ldrb	r3, [r3, #6]
 8021a46:	2b09      	cmp	r3, #9
 8021a48:	d80a      	bhi.n	8021a60 <dhcp_reboot+0x130>
 8021a4a:	69bb      	ldr	r3, [r7, #24]
 8021a4c:	799b      	ldrb	r3, [r3, #6]
 8021a4e:	b29b      	uxth	r3, r3
 8021a50:	461a      	mov	r2, r3
 8021a52:	0152      	lsls	r2, r2, #5
 8021a54:	1ad2      	subs	r2, r2, r3
 8021a56:	0092      	lsls	r2, r2, #2
 8021a58:	4413      	add	r3, r2
 8021a5a:	00db      	lsls	r3, r3, #3
 8021a5c:	b29b      	uxth	r3, r3
 8021a5e:	e001      	b.n	8021a64 <dhcp_reboot+0x134>
 8021a60:	f242 7310 	movw	r3, #10000	; 0x2710
 8021a64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021a66:	89fb      	ldrh	r3, [r7, #14]
 8021a68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021a6c:	4a0a      	ldr	r2, [pc, #40]	; (8021a98 <dhcp_reboot+0x168>)
 8021a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8021a72:	1152      	asrs	r2, r2, #5
 8021a74:	17db      	asrs	r3, r3, #31
 8021a76:	1ad3      	subs	r3, r2, r3
 8021a78:	b29a      	uxth	r2, r3
 8021a7a:	69bb      	ldr	r3, [r7, #24]
 8021a7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8021a7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021a82:	4618      	mov	r0, r3
 8021a84:	3720      	adds	r7, #32
 8021a86:	46bd      	mov	sp, r7
 8021a88:	bdb0      	pop	{r4, r5, r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	24000464 	.word	0x24000464
 8021a90:	2400d084 	.word	0x2400d084
 8021a94:	0802a5b0 	.word	0x0802a5b0
 8021a98:	10624dd3 	.word	0x10624dd3

08021a9c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8021a9c:	b5b0      	push	{r4, r5, r7, lr}
 8021a9e:	b08a      	sub	sp, #40	; 0x28
 8021aa0:	af02      	add	r7, sp, #8
 8021aa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021aa8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8021aaa:	69fb      	ldr	r3, [r7, #28]
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	f000 8084 	beq.w	8021bba <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8021ab2:	69fb      	ldr	r3, [r7, #28]
 8021ab4:	795b      	ldrb	r3, [r3, #5]
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	f000 8081 	beq.w	8021bbe <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8021abc:	69fb      	ldr	r3, [r7, #28]
 8021abe:	699b      	ldr	r3, [r3, #24]
 8021ac0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8021ac2:	69fb      	ldr	r3, [r7, #28]
 8021ac4:	2200      	movs	r2, #0
 8021ac6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8021ac8:	69fb      	ldr	r3, [r7, #28]
 8021aca:	2200      	movs	r2, #0
 8021acc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8021ace:	69fb      	ldr	r3, [r7, #28]
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8021ad4:	69fb      	ldr	r3, [r7, #28]
 8021ad6:	2200      	movs	r2, #0
 8021ad8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8021ada:	69fb      	ldr	r3, [r7, #28]
 8021adc:	2200      	movs	r2, #0
 8021ade:	631a      	str	r2, [r3, #48]	; 0x30
 8021ae0:	69fb      	ldr	r3, [r7, #28]
 8021ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021ae4:	69fb      	ldr	r3, [r7, #28]
 8021ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8021ae8:	69fb      	ldr	r3, [r7, #28]
 8021aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021aec:	69fb      	ldr	r3, [r7, #28]
 8021aee:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8021af0:	69fb      	ldr	r3, [r7, #28]
 8021af2:	2200      	movs	r2, #0
 8021af4:	829a      	strh	r2, [r3, #20]
 8021af6:	69fb      	ldr	r3, [r7, #28]
 8021af8:	8a9a      	ldrh	r2, [r3, #20]
 8021afa:	69fb      	ldr	r3, [r7, #28]
 8021afc:	825a      	strh	r2, [r3, #18]
 8021afe:	69fb      	ldr	r3, [r7, #28]
 8021b00:	8a5a      	ldrh	r2, [r3, #18]
 8021b02:	69fb      	ldr	r3, [r7, #28]
 8021b04:	821a      	strh	r2, [r3, #16]
 8021b06:	69fb      	ldr	r3, [r7, #28]
 8021b08:	8a1a      	ldrh	r2, [r3, #16]
 8021b0a:	69fb      	ldr	r3, [r7, #28]
 8021b0c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8021b0e:	6878      	ldr	r0, [r7, #4]
 8021b10:	f000 fdee 	bl	80226f0 <dhcp_supplied_address>
 8021b14:	4603      	mov	r3, r0
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d03b      	beq.n	8021b92 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8021b1a:	f107 030e 	add.w	r3, r7, #14
 8021b1e:	2207      	movs	r2, #7
 8021b20:	69f9      	ldr	r1, [r7, #28]
 8021b22:	6878      	ldr	r0, [r7, #4]
 8021b24:	f000 fce0 	bl	80224e8 <dhcp_create_msg>
 8021b28:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8021b2a:	69bb      	ldr	r3, [r7, #24]
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d030      	beq.n	8021b92 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8021b30:	69bb      	ldr	r3, [r7, #24]
 8021b32:	685b      	ldr	r3, [r3, #4]
 8021b34:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021b36:	89f8      	ldrh	r0, [r7, #14]
 8021b38:	697b      	ldr	r3, [r7, #20]
 8021b3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021b3e:	2304      	movs	r3, #4
 8021b40:	2236      	movs	r2, #54	; 0x36
 8021b42:	f000 f85f 	bl	8021c04 <dhcp_option>
 8021b46:	4603      	mov	r3, r0
 8021b48:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021b4a:	89fc      	ldrh	r4, [r7, #14]
 8021b4c:	697b      	ldr	r3, [r7, #20]
 8021b4e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8021b52:	693b      	ldr	r3, [r7, #16]
 8021b54:	4618      	mov	r0, r3
 8021b56:	f7f7 f880 	bl	8018c5a <lwip_htonl>
 8021b5a:	4603      	mov	r3, r0
 8021b5c:	461a      	mov	r2, r3
 8021b5e:	4629      	mov	r1, r5
 8021b60:	4620      	mov	r0, r4
 8021b62:	f000 f8db 	bl	8021d1c <dhcp_option_long>
 8021b66:	4603      	mov	r3, r0
 8021b68:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8021b6a:	89f8      	ldrh	r0, [r7, #14]
 8021b6c:	697b      	ldr	r3, [r7, #20]
 8021b6e:	33f0      	adds	r3, #240	; 0xf0
 8021b70:	69ba      	ldr	r2, [r7, #24]
 8021b72:	4619      	mov	r1, r3
 8021b74:	f000 fd8e 	bl	8022694 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021b78:	4b13      	ldr	r3, [pc, #76]	; (8021bc8 <dhcp_release_and_stop+0x12c>)
 8021b7a:	6818      	ldr	r0, [r3, #0]
 8021b7c:	f107 0210 	add.w	r2, r7, #16
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	9300      	str	r3, [sp, #0]
 8021b84:	2343      	movs	r3, #67	; 0x43
 8021b86:	69b9      	ldr	r1, [r7, #24]
 8021b88:	f7fe fc4a 	bl	8020420 <udp_sendto_if>
      pbuf_free(p_out);
 8021b8c:	69b8      	ldr	r0, [r7, #24]
 8021b8e:	f7f8 fd05 	bl	801a59c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8021b92:	4b0e      	ldr	r3, [pc, #56]	; (8021bcc <dhcp_release_and_stop+0x130>)
 8021b94:	4a0d      	ldr	r2, [pc, #52]	; (8021bcc <dhcp_release_and_stop+0x130>)
 8021b96:	490d      	ldr	r1, [pc, #52]	; (8021bcc <dhcp_release_and_stop+0x130>)
 8021b98:	6878      	ldr	r0, [r7, #4]
 8021b9a:	f7f7 fff1 	bl	8019b80 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8021b9e:	2100      	movs	r1, #0
 8021ba0:	69f8      	ldr	r0, [r7, #28]
 8021ba2:	f000 f815 	bl	8021bd0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8021ba6:	69fb      	ldr	r3, [r7, #28]
 8021ba8:	791b      	ldrb	r3, [r3, #4]
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d008      	beq.n	8021bc0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021bae:	f7fe ff83 	bl	8020ab8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8021bb2:	69fb      	ldr	r3, [r7, #28]
 8021bb4:	2200      	movs	r2, #0
 8021bb6:	711a      	strb	r2, [r3, #4]
 8021bb8:	e002      	b.n	8021bc0 <dhcp_release_and_stop+0x124>
    return;
 8021bba:	bf00      	nop
 8021bbc:	e000      	b.n	8021bc0 <dhcp_release_and_stop+0x124>
    return;
 8021bbe:	bf00      	nop
  }
}
 8021bc0:	3720      	adds	r7, #32
 8021bc2:	46bd      	mov	sp, r7
 8021bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8021bc6:	bf00      	nop
 8021bc8:	2400d084 	.word	0x2400d084
 8021bcc:	0802a5ac 	.word	0x0802a5ac

08021bd0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8021bd0:	b480      	push	{r7}
 8021bd2:	b083      	sub	sp, #12
 8021bd4:	af00      	add	r7, sp, #0
 8021bd6:	6078      	str	r0, [r7, #4]
 8021bd8:	460b      	mov	r3, r1
 8021bda:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	795b      	ldrb	r3, [r3, #5]
 8021be0:	78fa      	ldrb	r2, [r7, #3]
 8021be2:	429a      	cmp	r2, r3
 8021be4:	d008      	beq.n	8021bf8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	78fa      	ldrb	r2, [r7, #3]
 8021bea:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	2200      	movs	r2, #0
 8021bf0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	2200      	movs	r2, #0
 8021bf6:	811a      	strh	r2, [r3, #8]
  }
}
 8021bf8:	bf00      	nop
 8021bfa:	370c      	adds	r7, #12
 8021bfc:	46bd      	mov	sp, r7
 8021bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c02:	4770      	bx	lr

08021c04 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8021c04:	b580      	push	{r7, lr}
 8021c06:	b082      	sub	sp, #8
 8021c08:	af00      	add	r7, sp, #0
 8021c0a:	6039      	str	r1, [r7, #0]
 8021c0c:	4611      	mov	r1, r2
 8021c0e:	461a      	mov	r2, r3
 8021c10:	4603      	mov	r3, r0
 8021c12:	80fb      	strh	r3, [r7, #6]
 8021c14:	460b      	mov	r3, r1
 8021c16:	717b      	strb	r3, [r7, #5]
 8021c18:	4613      	mov	r3, r2
 8021c1a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c1c:	88fa      	ldrh	r2, [r7, #6]
 8021c1e:	793b      	ldrb	r3, [r7, #4]
 8021c20:	4413      	add	r3, r2
 8021c22:	3302      	adds	r3, #2
 8021c24:	2b44      	cmp	r3, #68	; 0x44
 8021c26:	d906      	bls.n	8021c36 <dhcp_option+0x32>
 8021c28:	4b0d      	ldr	r3, [pc, #52]	; (8021c60 <dhcp_option+0x5c>)
 8021c2a:	f240 529a 	movw	r2, #1434	; 0x59a
 8021c2e:	490d      	ldr	r1, [pc, #52]	; (8021c64 <dhcp_option+0x60>)
 8021c30:	480d      	ldr	r0, [pc, #52]	; (8021c68 <dhcp_option+0x64>)
 8021c32:	f004 f997 	bl	8025f64 <iprintf>
  options[options_out_len++] = option_type;
 8021c36:	88fb      	ldrh	r3, [r7, #6]
 8021c38:	1c5a      	adds	r2, r3, #1
 8021c3a:	80fa      	strh	r2, [r7, #6]
 8021c3c:	461a      	mov	r2, r3
 8021c3e:	683b      	ldr	r3, [r7, #0]
 8021c40:	4413      	add	r3, r2
 8021c42:	797a      	ldrb	r2, [r7, #5]
 8021c44:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8021c46:	88fb      	ldrh	r3, [r7, #6]
 8021c48:	1c5a      	adds	r2, r3, #1
 8021c4a:	80fa      	strh	r2, [r7, #6]
 8021c4c:	461a      	mov	r2, r3
 8021c4e:	683b      	ldr	r3, [r7, #0]
 8021c50:	4413      	add	r3, r2
 8021c52:	793a      	ldrb	r2, [r7, #4]
 8021c54:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021c56:	88fb      	ldrh	r3, [r7, #6]
}
 8021c58:	4618      	mov	r0, r3
 8021c5a:	3708      	adds	r7, #8
 8021c5c:	46bd      	mov	sp, r7
 8021c5e:	bd80      	pop	{r7, pc}
 8021c60:	08029308 	.word	0x08029308
 8021c64:	0802949c 	.word	0x0802949c
 8021c68:	08029368 	.word	0x08029368

08021c6c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8021c6c:	b580      	push	{r7, lr}
 8021c6e:	b082      	sub	sp, #8
 8021c70:	af00      	add	r7, sp, #0
 8021c72:	4603      	mov	r3, r0
 8021c74:	6039      	str	r1, [r7, #0]
 8021c76:	80fb      	strh	r3, [r7, #6]
 8021c78:	4613      	mov	r3, r2
 8021c7a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021c7c:	88fb      	ldrh	r3, [r7, #6]
 8021c7e:	2b43      	cmp	r3, #67	; 0x43
 8021c80:	d906      	bls.n	8021c90 <dhcp_option_byte+0x24>
 8021c82:	4b0a      	ldr	r3, [pc, #40]	; (8021cac <dhcp_option_byte+0x40>)
 8021c84:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021c88:	4909      	ldr	r1, [pc, #36]	; (8021cb0 <dhcp_option_byte+0x44>)
 8021c8a:	480a      	ldr	r0, [pc, #40]	; (8021cb4 <dhcp_option_byte+0x48>)
 8021c8c:	f004 f96a 	bl	8025f64 <iprintf>
  options[options_out_len++] = value;
 8021c90:	88fb      	ldrh	r3, [r7, #6]
 8021c92:	1c5a      	adds	r2, r3, #1
 8021c94:	80fa      	strh	r2, [r7, #6]
 8021c96:	461a      	mov	r2, r3
 8021c98:	683b      	ldr	r3, [r7, #0]
 8021c9a:	4413      	add	r3, r2
 8021c9c:	797a      	ldrb	r2, [r7, #5]
 8021c9e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021ca0:	88fb      	ldrh	r3, [r7, #6]
}
 8021ca2:	4618      	mov	r0, r3
 8021ca4:	3708      	adds	r7, #8
 8021ca6:	46bd      	mov	sp, r7
 8021ca8:	bd80      	pop	{r7, pc}
 8021caa:	bf00      	nop
 8021cac:	08029308 	.word	0x08029308
 8021cb0:	080294e0 	.word	0x080294e0
 8021cb4:	08029368 	.word	0x08029368

08021cb8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8021cb8:	b580      	push	{r7, lr}
 8021cba:	b082      	sub	sp, #8
 8021cbc:	af00      	add	r7, sp, #0
 8021cbe:	4603      	mov	r3, r0
 8021cc0:	6039      	str	r1, [r7, #0]
 8021cc2:	80fb      	strh	r3, [r7, #6]
 8021cc4:	4613      	mov	r3, r2
 8021cc6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021cc8:	88fb      	ldrh	r3, [r7, #6]
 8021cca:	3302      	adds	r3, #2
 8021ccc:	2b44      	cmp	r3, #68	; 0x44
 8021cce:	d906      	bls.n	8021cde <dhcp_option_short+0x26>
 8021cd0:	4b0f      	ldr	r3, [pc, #60]	; (8021d10 <dhcp_option_short+0x58>)
 8021cd2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021cd6:	490f      	ldr	r1, [pc, #60]	; (8021d14 <dhcp_option_short+0x5c>)
 8021cd8:	480f      	ldr	r0, [pc, #60]	; (8021d18 <dhcp_option_short+0x60>)
 8021cda:	f004 f943 	bl	8025f64 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021cde:	88bb      	ldrh	r3, [r7, #4]
 8021ce0:	0a1b      	lsrs	r3, r3, #8
 8021ce2:	b29a      	uxth	r2, r3
 8021ce4:	88fb      	ldrh	r3, [r7, #6]
 8021ce6:	1c59      	adds	r1, r3, #1
 8021ce8:	80f9      	strh	r1, [r7, #6]
 8021cea:	4619      	mov	r1, r3
 8021cec:	683b      	ldr	r3, [r7, #0]
 8021cee:	440b      	add	r3, r1
 8021cf0:	b2d2      	uxtb	r2, r2
 8021cf2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021cf4:	88fb      	ldrh	r3, [r7, #6]
 8021cf6:	1c5a      	adds	r2, r3, #1
 8021cf8:	80fa      	strh	r2, [r7, #6]
 8021cfa:	461a      	mov	r2, r3
 8021cfc:	683b      	ldr	r3, [r7, #0]
 8021cfe:	4413      	add	r3, r2
 8021d00:	88ba      	ldrh	r2, [r7, #4]
 8021d02:	b2d2      	uxtb	r2, r2
 8021d04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021d06:	88fb      	ldrh	r3, [r7, #6]
}
 8021d08:	4618      	mov	r0, r3
 8021d0a:	3708      	adds	r7, #8
 8021d0c:	46bd      	mov	sp, r7
 8021d0e:	bd80      	pop	{r7, pc}
 8021d10:	08029308 	.word	0x08029308
 8021d14:	08029518 	.word	0x08029518
 8021d18:	08029368 	.word	0x08029368

08021d1c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	b084      	sub	sp, #16
 8021d20:	af00      	add	r7, sp, #0
 8021d22:	4603      	mov	r3, r0
 8021d24:	60b9      	str	r1, [r7, #8]
 8021d26:	607a      	str	r2, [r7, #4]
 8021d28:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8021d2a:	89fb      	ldrh	r3, [r7, #14]
 8021d2c:	3304      	adds	r3, #4
 8021d2e:	2b44      	cmp	r3, #68	; 0x44
 8021d30:	d906      	bls.n	8021d40 <dhcp_option_long+0x24>
 8021d32:	4b19      	ldr	r3, [pc, #100]	; (8021d98 <dhcp_option_long+0x7c>)
 8021d34:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8021d38:	4918      	ldr	r1, [pc, #96]	; (8021d9c <dhcp_option_long+0x80>)
 8021d3a:	4819      	ldr	r0, [pc, #100]	; (8021da0 <dhcp_option_long+0x84>)
 8021d3c:	f004 f912 	bl	8025f64 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	0e1a      	lsrs	r2, r3, #24
 8021d44:	89fb      	ldrh	r3, [r7, #14]
 8021d46:	1c59      	adds	r1, r3, #1
 8021d48:	81f9      	strh	r1, [r7, #14]
 8021d4a:	4619      	mov	r1, r3
 8021d4c:	68bb      	ldr	r3, [r7, #8]
 8021d4e:	440b      	add	r3, r1
 8021d50:	b2d2      	uxtb	r2, r2
 8021d52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	0c1a      	lsrs	r2, r3, #16
 8021d58:	89fb      	ldrh	r3, [r7, #14]
 8021d5a:	1c59      	adds	r1, r3, #1
 8021d5c:	81f9      	strh	r1, [r7, #14]
 8021d5e:	4619      	mov	r1, r3
 8021d60:	68bb      	ldr	r3, [r7, #8]
 8021d62:	440b      	add	r3, r1
 8021d64:	b2d2      	uxtb	r2, r2
 8021d66:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	0a1a      	lsrs	r2, r3, #8
 8021d6c:	89fb      	ldrh	r3, [r7, #14]
 8021d6e:	1c59      	adds	r1, r3, #1
 8021d70:	81f9      	strh	r1, [r7, #14]
 8021d72:	4619      	mov	r1, r3
 8021d74:	68bb      	ldr	r3, [r7, #8]
 8021d76:	440b      	add	r3, r1
 8021d78:	b2d2      	uxtb	r2, r2
 8021d7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8021d7c:	89fb      	ldrh	r3, [r7, #14]
 8021d7e:	1c5a      	adds	r2, r3, #1
 8021d80:	81fa      	strh	r2, [r7, #14]
 8021d82:	461a      	mov	r2, r3
 8021d84:	68bb      	ldr	r3, [r7, #8]
 8021d86:	4413      	add	r3, r2
 8021d88:	687a      	ldr	r2, [r7, #4]
 8021d8a:	b2d2      	uxtb	r2, r2
 8021d8c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021d8e:	89fb      	ldrh	r3, [r7, #14]
}
 8021d90:	4618      	mov	r0, r3
 8021d92:	3710      	adds	r7, #16
 8021d94:	46bd      	mov	sp, r7
 8021d96:	bd80      	pop	{r7, pc}
 8021d98:	08029308 	.word	0x08029308
 8021d9c:	08029554 	.word	0x08029554
 8021da0:	08029368 	.word	0x08029368

08021da4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8021da4:	b580      	push	{r7, lr}
 8021da6:	b090      	sub	sp, #64	; 0x40
 8021da8:	af00      	add	r7, sp, #0
 8021daa:	6078      	str	r0, [r7, #4]
 8021dac:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8021dae:	2300      	movs	r3, #0
 8021db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8021db2:	2300      	movs	r3, #0
 8021db4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8021db6:	2208      	movs	r2, #8
 8021db8:	2100      	movs	r1, #0
 8021dba:	48b5      	ldr	r0, [pc, #724]	; (8022090 <dhcp_parse_reply+0x2ec>)
 8021dbc:	f003 ffd4 	bl	8025d68 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	895b      	ldrh	r3, [r3, #10]
 8021dc4:	2b2b      	cmp	r3, #43	; 0x2b
 8021dc6:	d802      	bhi.n	8021dce <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8021dc8:	f06f 0301 	mvn.w	r3, #1
 8021dcc:	e2a7      	b.n	802231e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	685b      	ldr	r3, [r3, #4]
 8021dd2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8021dd4:	23f0      	movs	r3, #240	; 0xf0
 8021dd6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	891b      	ldrh	r3, [r3, #8]
 8021ddc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8021de2:	e00c      	b.n	8021dfe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8021de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021de6:	895b      	ldrh	r3, [r3, #10]
 8021de8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021dea:	1ad3      	subs	r3, r2, r3
 8021dec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8021dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021df0:	895b      	ldrh	r3, [r3, #10]
 8021df2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8021df4:	1ad3      	subs	r3, r2, r3
 8021df6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8021df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8021dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	d004      	beq.n	8021e0e <dhcp_parse_reply+0x6a>
 8021e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e06:	895b      	ldrh	r3, [r3, #10]
 8021e08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021e0a:	429a      	cmp	r2, r3
 8021e0c:	d2ea      	bcs.n	8021de4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8021e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d102      	bne.n	8021e1a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8021e14:	f06f 0301 	mvn.w	r3, #1
 8021e18:	e281      	b.n	802231e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8021e1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8021e1c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8021e1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8021e20:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8021e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e24:	685b      	ldr	r3, [r3, #4]
 8021e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021e28:	e239      	b.n	802229e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8021e2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021e2e:	4413      	add	r3, r2
 8021e30:	781b      	ldrb	r3, [r3, #0]
 8021e32:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8021e34:	2300      	movs	r3, #0
 8021e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8021e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8021e3e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8021e40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021e42:	3302      	adds	r3, #2
 8021e44:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8021e46:	8bfa      	ldrh	r2, [r7, #30]
 8021e48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021e4a:	429a      	cmp	r2, r3
 8021e4c:	d202      	bcs.n	8021e54 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8021e4e:	f06f 0301 	mvn.w	r3, #1
 8021e52:	e264      	b.n	802231e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8021e54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021e56:	3301      	adds	r3, #1
 8021e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021e5a:	8952      	ldrh	r2, [r2, #10]
 8021e5c:	4293      	cmp	r3, r2
 8021e5e:	da07      	bge.n	8021e70 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8021e60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021e62:	3301      	adds	r3, #1
 8021e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021e66:	4413      	add	r3, r2
 8021e68:	781b      	ldrb	r3, [r3, #0]
 8021e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021e6e:	e00b      	b.n	8021e88 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8021e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e72:	681b      	ldr	r3, [r3, #0]
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	d004      	beq.n	8021e82 <dhcp_parse_reply+0xde>
 8021e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e7a:	681b      	ldr	r3, [r3, #0]
 8021e7c:	685b      	ldr	r3, [r3, #4]
 8021e7e:	781b      	ldrb	r3, [r3, #0]
 8021e80:	e000      	b.n	8021e84 <dhcp_parse_reply+0xe0>
 8021e82:	2300      	movs	r3, #0
 8021e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8021e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8021e90:	7dfb      	ldrb	r3, [r7, #23]
 8021e92:	2b3b      	cmp	r3, #59	; 0x3b
 8021e94:	f200 812c 	bhi.w	80220f0 <dhcp_parse_reply+0x34c>
 8021e98:	a201      	add	r2, pc, #4	; (adr r2, 8021ea0 <dhcp_parse_reply+0xfc>)
 8021e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e9e:	bf00      	nop
 8021ea0:	08021f91 	.word	0x08021f91
 8021ea4:	08021fa1 	.word	0x08021fa1
 8021ea8:	080220f1 	.word	0x080220f1
 8021eac:	08021fc3 	.word	0x08021fc3
 8021eb0:	080220f1 	.word	0x080220f1
 8021eb4:	080220f1 	.word	0x080220f1
 8021eb8:	080220f1 	.word	0x080220f1
 8021ebc:	080220f1 	.word	0x080220f1
 8021ec0:	080220f1 	.word	0x080220f1
 8021ec4:	080220f1 	.word	0x080220f1
 8021ec8:	080220f1 	.word	0x080220f1
 8021ecc:	080220f1 	.word	0x080220f1
 8021ed0:	080220f1 	.word	0x080220f1
 8021ed4:	080220f1 	.word	0x080220f1
 8021ed8:	080220f1 	.word	0x080220f1
 8021edc:	080220f1 	.word	0x080220f1
 8021ee0:	080220f1 	.word	0x080220f1
 8021ee4:	080220f1 	.word	0x080220f1
 8021ee8:	080220f1 	.word	0x080220f1
 8021eec:	080220f1 	.word	0x080220f1
 8021ef0:	080220f1 	.word	0x080220f1
 8021ef4:	080220f1 	.word	0x080220f1
 8021ef8:	080220f1 	.word	0x080220f1
 8021efc:	080220f1 	.word	0x080220f1
 8021f00:	080220f1 	.word	0x080220f1
 8021f04:	080220f1 	.word	0x080220f1
 8021f08:	080220f1 	.word	0x080220f1
 8021f0c:	080220f1 	.word	0x080220f1
 8021f10:	080220f1 	.word	0x080220f1
 8021f14:	080220f1 	.word	0x080220f1
 8021f18:	080220f1 	.word	0x080220f1
 8021f1c:	080220f1 	.word	0x080220f1
 8021f20:	080220f1 	.word	0x080220f1
 8021f24:	080220f1 	.word	0x080220f1
 8021f28:	080220f1 	.word	0x080220f1
 8021f2c:	080220f1 	.word	0x080220f1
 8021f30:	080220f1 	.word	0x080220f1
 8021f34:	080220f1 	.word	0x080220f1
 8021f38:	080220f1 	.word	0x080220f1
 8021f3c:	080220f1 	.word	0x080220f1
 8021f40:	080220f1 	.word	0x080220f1
 8021f44:	080220f1 	.word	0x080220f1
 8021f48:	080220f1 	.word	0x080220f1
 8021f4c:	080220f1 	.word	0x080220f1
 8021f50:	080220f1 	.word	0x080220f1
 8021f54:	080220f1 	.word	0x080220f1
 8021f58:	080220f1 	.word	0x080220f1
 8021f5c:	080220f1 	.word	0x080220f1
 8021f60:	080220f1 	.word	0x080220f1
 8021f64:	080220f1 	.word	0x080220f1
 8021f68:	080220f1 	.word	0x080220f1
 8021f6c:	08021fef 	.word	0x08021fef
 8021f70:	08022011 	.word	0x08022011
 8021f74:	0802204d 	.word	0x0802204d
 8021f78:	0802206f 	.word	0x0802206f
 8021f7c:	080220f1 	.word	0x080220f1
 8021f80:	080220f1 	.word	0x080220f1
 8021f84:	080220f1 	.word	0x080220f1
 8021f88:	080220ad 	.word	0x080220ad
 8021f8c:	080220cf 	.word	0x080220cf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8021f90:	2300      	movs	r3, #0
 8021f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8021f9e:	e0ab      	b.n	80220f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021fa4:	2b04      	cmp	r3, #4
 8021fa6:	d009      	beq.n	8021fbc <dhcp_parse_reply+0x218>
 8021fa8:	4b3a      	ldr	r3, [pc, #232]	; (8022094 <dhcp_parse_reply+0x2f0>)
 8021faa:	f240 622e 	movw	r2, #1582	; 0x62e
 8021fae:	493a      	ldr	r1, [pc, #232]	; (8022098 <dhcp_parse_reply+0x2f4>)
 8021fb0:	483a      	ldr	r0, [pc, #232]	; (802209c <dhcp_parse_reply+0x2f8>)
 8021fb2:	f003 ffd7 	bl	8025f64 <iprintf>
 8021fb6:	f06f 0305 	mvn.w	r3, #5
 8021fba:	e1b0      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8021fbc:	2306      	movs	r3, #6
 8021fbe:	623b      	str	r3, [r7, #32]
        break;
 8021fc0:	e09a      	b.n	80220f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8021fc2:	2304      	movs	r3, #4
 8021fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8021fc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021fd0:	429a      	cmp	r2, r3
 8021fd2:	d209      	bcs.n	8021fe8 <dhcp_parse_reply+0x244>
 8021fd4:	4b2f      	ldr	r3, [pc, #188]	; (8022094 <dhcp_parse_reply+0x2f0>)
 8021fd6:	f240 6233 	movw	r2, #1587	; 0x633
 8021fda:	4931      	ldr	r1, [pc, #196]	; (80220a0 <dhcp_parse_reply+0x2fc>)
 8021fdc:	482f      	ldr	r0, [pc, #188]	; (802209c <dhcp_parse_reply+0x2f8>)
 8021fde:	f003 ffc1 	bl	8025f64 <iprintf>
 8021fe2:	f06f 0305 	mvn.w	r3, #5
 8021fe6:	e19a      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8021fe8:	2307      	movs	r3, #7
 8021fea:	623b      	str	r3, [r7, #32]
        break;
 8021fec:	e084      	b.n	80220f8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ff2:	2b04      	cmp	r3, #4
 8021ff4:	d009      	beq.n	802200a <dhcp_parse_reply+0x266>
 8021ff6:	4b27      	ldr	r3, [pc, #156]	; (8022094 <dhcp_parse_reply+0x2f0>)
 8021ff8:	f240 6241 	movw	r2, #1601	; 0x641
 8021ffc:	4926      	ldr	r1, [pc, #152]	; (8022098 <dhcp_parse_reply+0x2f4>)
 8021ffe:	4827      	ldr	r0, [pc, #156]	; (802209c <dhcp_parse_reply+0x2f8>)
 8022000:	f003 ffb0 	bl	8025f64 <iprintf>
 8022004:	f06f 0305 	mvn.w	r3, #5
 8022008:	e189      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 802200a:	2303      	movs	r3, #3
 802200c:	623b      	str	r3, [r7, #32]
        break;
 802200e:	e073      	b.n	80220f8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8022010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022014:	2b01      	cmp	r3, #1
 8022016:	d009      	beq.n	802202c <dhcp_parse_reply+0x288>
 8022018:	4b1e      	ldr	r3, [pc, #120]	; (8022094 <dhcp_parse_reply+0x2f0>)
 802201a:	f240 624f 	movw	r2, #1615	; 0x64f
 802201e:	4921      	ldr	r1, [pc, #132]	; (80220a4 <dhcp_parse_reply+0x300>)
 8022020:	481e      	ldr	r0, [pc, #120]	; (802209c <dhcp_parse_reply+0x2f8>)
 8022022:	f003 ff9f 	bl	8025f64 <iprintf>
 8022026:	f06f 0305 	mvn.w	r3, #5
 802202a:	e178      	b.n	802231e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 802202c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802202e:	2bf0      	cmp	r3, #240	; 0xf0
 8022030:	d009      	beq.n	8022046 <dhcp_parse_reply+0x2a2>
 8022032:	4b18      	ldr	r3, [pc, #96]	; (8022094 <dhcp_parse_reply+0x2f0>)
 8022034:	f240 6251 	movw	r2, #1617	; 0x651
 8022038:	491b      	ldr	r1, [pc, #108]	; (80220a8 <dhcp_parse_reply+0x304>)
 802203a:	4818      	ldr	r0, [pc, #96]	; (802209c <dhcp_parse_reply+0x2f8>)
 802203c:	f003 ff92 	bl	8025f64 <iprintf>
 8022040:	f06f 0305 	mvn.w	r3, #5
 8022044:	e16b      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8022046:	2300      	movs	r3, #0
 8022048:	623b      	str	r3, [r7, #32]
        break;
 802204a:	e055      	b.n	80220f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802204c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022050:	2b01      	cmp	r3, #1
 8022052:	d009      	beq.n	8022068 <dhcp_parse_reply+0x2c4>
 8022054:	4b0f      	ldr	r3, [pc, #60]	; (8022094 <dhcp_parse_reply+0x2f0>)
 8022056:	f240 6255 	movw	r2, #1621	; 0x655
 802205a:	4912      	ldr	r1, [pc, #72]	; (80220a4 <dhcp_parse_reply+0x300>)
 802205c:	480f      	ldr	r0, [pc, #60]	; (802209c <dhcp_parse_reply+0x2f8>)
 802205e:	f003 ff81 	bl	8025f64 <iprintf>
 8022062:	f06f 0305 	mvn.w	r3, #5
 8022066:	e15a      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8022068:	2301      	movs	r3, #1
 802206a:	623b      	str	r3, [r7, #32]
        break;
 802206c:	e044      	b.n	80220f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802206e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022072:	2b04      	cmp	r3, #4
 8022074:	d009      	beq.n	802208a <dhcp_parse_reply+0x2e6>
 8022076:	4b07      	ldr	r3, [pc, #28]	; (8022094 <dhcp_parse_reply+0x2f0>)
 8022078:	f240 6259 	movw	r2, #1625	; 0x659
 802207c:	4906      	ldr	r1, [pc, #24]	; (8022098 <dhcp_parse_reply+0x2f4>)
 802207e:	4807      	ldr	r0, [pc, #28]	; (802209c <dhcp_parse_reply+0x2f8>)
 8022080:	f003 ff70 	bl	8025f64 <iprintf>
 8022084:	f06f 0305 	mvn.w	r3, #5
 8022088:	e149      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 802208a:	2302      	movs	r3, #2
 802208c:	623b      	str	r3, [r7, #32]
        break;
 802208e:	e033      	b.n	80220f8 <dhcp_parse_reply+0x354>
 8022090:	2400d07c 	.word	0x2400d07c
 8022094:	08029308 	.word	0x08029308
 8022098:	08029590 	.word	0x08029590
 802209c:	08029368 	.word	0x08029368
 80220a0:	0802959c 	.word	0x0802959c
 80220a4:	080295b0 	.word	0x080295b0
 80220a8:	080295bc 	.word	0x080295bc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80220ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80220b0:	2b04      	cmp	r3, #4
 80220b2:	d009      	beq.n	80220c8 <dhcp_parse_reply+0x324>
 80220b4:	4b9c      	ldr	r3, [pc, #624]	; (8022328 <dhcp_parse_reply+0x584>)
 80220b6:	f240 625d 	movw	r2, #1629	; 0x65d
 80220ba:	499c      	ldr	r1, [pc, #624]	; (802232c <dhcp_parse_reply+0x588>)
 80220bc:	489c      	ldr	r0, [pc, #624]	; (8022330 <dhcp_parse_reply+0x58c>)
 80220be:	f003 ff51 	bl	8025f64 <iprintf>
 80220c2:	f06f 0305 	mvn.w	r3, #5
 80220c6:	e12a      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80220c8:	2304      	movs	r3, #4
 80220ca:	623b      	str	r3, [r7, #32]
        break;
 80220cc:	e014      	b.n	80220f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80220ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80220d2:	2b04      	cmp	r3, #4
 80220d4:	d009      	beq.n	80220ea <dhcp_parse_reply+0x346>
 80220d6:	4b94      	ldr	r3, [pc, #592]	; (8022328 <dhcp_parse_reply+0x584>)
 80220d8:	f240 6261 	movw	r2, #1633	; 0x661
 80220dc:	4993      	ldr	r1, [pc, #588]	; (802232c <dhcp_parse_reply+0x588>)
 80220de:	4894      	ldr	r0, [pc, #592]	; (8022330 <dhcp_parse_reply+0x58c>)
 80220e0:	f003 ff40 	bl	8025f64 <iprintf>
 80220e4:	f06f 0305 	mvn.w	r3, #5
 80220e8:	e119      	b.n	802231e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80220ea:	2305      	movs	r3, #5
 80220ec:	623b      	str	r3, [r7, #32]
        break;
 80220ee:	e003      	b.n	80220f8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80220f0:	2300      	movs	r3, #0
 80220f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80220f6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80220f8:	7dfb      	ldrb	r3, [r7, #23]
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d103      	bne.n	8022106 <dhcp_parse_reply+0x362>
      offset++;
 80220fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022100:	3301      	adds	r3, #1
 8022102:	877b      	strh	r3, [r7, #58]	; 0x3a
 8022104:	e0a1      	b.n	802224a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8022106:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8022108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802210c:	4413      	add	r3, r2
 802210e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8022112:	4293      	cmp	r3, r2
 8022114:	dd02      	ble.n	802211c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8022116:	f06f 0301 	mvn.w	r3, #1
 802211a:	e100      	b.n	802231e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 802211c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022120:	b29a      	uxth	r2, r3
 8022122:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022124:	4413      	add	r3, r2
 8022126:	b29b      	uxth	r3, r3
 8022128:	3302      	adds	r3, #2
 802212a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 802212c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022130:	2b00      	cmp	r3, #0
 8022132:	f000 808a 	beq.w	802224a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8022136:	2300      	movs	r3, #0
 8022138:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 802213a:	6a3b      	ldr	r3, [r7, #32]
 802213c:	2b00      	cmp	r3, #0
 802213e:	db02      	blt.n	8022146 <dhcp_parse_reply+0x3a2>
 8022140:	6a3b      	ldr	r3, [r7, #32]
 8022142:	2b07      	cmp	r3, #7
 8022144:	dd06      	ble.n	8022154 <dhcp_parse_reply+0x3b0>
 8022146:	4b78      	ldr	r3, [pc, #480]	; (8022328 <dhcp_parse_reply+0x584>)
 8022148:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 802214c:	4979      	ldr	r1, [pc, #484]	; (8022334 <dhcp_parse_reply+0x590>)
 802214e:	4878      	ldr	r0, [pc, #480]	; (8022330 <dhcp_parse_reply+0x58c>)
 8022150:	f003 ff08 	bl	8025f64 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8022154:	4a78      	ldr	r2, [pc, #480]	; (8022338 <dhcp_parse_reply+0x594>)
 8022156:	6a3b      	ldr	r3, [r7, #32]
 8022158:	4413      	add	r3, r2
 802215a:	781b      	ldrb	r3, [r3, #0]
 802215c:	2b00      	cmp	r3, #0
 802215e:	d174      	bne.n	802224a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8022160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022164:	2b04      	cmp	r3, #4
 8022166:	bf28      	it	cs
 8022168:	2304      	movcs	r3, #4
 802216a:	b2db      	uxtb	r3, r3
 802216c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802216e:	8bfb      	ldrh	r3, [r7, #30]
 8022170:	8aba      	ldrh	r2, [r7, #20]
 8022172:	f107 0108 	add.w	r1, r7, #8
 8022176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022178:	f7f8 fc16 	bl	801a9a8 <pbuf_copy_partial>
 802217c:	4603      	mov	r3, r0
 802217e:	461a      	mov	r2, r3
 8022180:	8abb      	ldrh	r3, [r7, #20]
 8022182:	4293      	cmp	r3, r2
 8022184:	d002      	beq.n	802218c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8022186:	f06f 0301 	mvn.w	r3, #1
 802218a:	e0c8      	b.n	802231e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 802218c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022190:	2b04      	cmp	r3, #4
 8022192:	d933      	bls.n	80221fc <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8022194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022198:	f003 0303 	and.w	r3, r3, #3
 802219c:	b2db      	uxtb	r3, r3
 802219e:	2b00      	cmp	r3, #0
 80221a0:	d009      	beq.n	80221b6 <dhcp_parse_reply+0x412>
 80221a2:	4b61      	ldr	r3, [pc, #388]	; (8022328 <dhcp_parse_reply+0x584>)
 80221a4:	f240 6281 	movw	r2, #1665	; 0x681
 80221a8:	4964      	ldr	r1, [pc, #400]	; (802233c <dhcp_parse_reply+0x598>)
 80221aa:	4861      	ldr	r0, [pc, #388]	; (8022330 <dhcp_parse_reply+0x58c>)
 80221ac:	f003 feda 	bl	8025f64 <iprintf>
 80221b0:	f06f 0305 	mvn.w	r3, #5
 80221b4:	e0b3      	b.n	802231e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80221b6:	4a60      	ldr	r2, [pc, #384]	; (8022338 <dhcp_parse_reply+0x594>)
 80221b8:	6a3b      	ldr	r3, [r7, #32]
 80221ba:	4413      	add	r3, r2
 80221bc:	2201      	movs	r2, #1
 80221be:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80221c0:	68bb      	ldr	r3, [r7, #8]
 80221c2:	4618      	mov	r0, r3
 80221c4:	f7f6 fd49 	bl	8018c5a <lwip_htonl>
 80221c8:	4602      	mov	r2, r0
 80221ca:	495d      	ldr	r1, [pc, #372]	; (8022340 <dhcp_parse_reply+0x59c>)
 80221cc:	6a3b      	ldr	r3, [r7, #32]
 80221ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80221d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80221d6:	3b04      	subs	r3, #4
 80221d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80221dc:	8bfb      	ldrh	r3, [r7, #30]
 80221de:	3304      	adds	r3, #4
 80221e0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80221e2:	8a7a      	ldrh	r2, [r7, #18]
 80221e4:	8bfb      	ldrh	r3, [r7, #30]
 80221e6:	429a      	cmp	r2, r3
 80221e8:	d202      	bcs.n	80221f0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80221ea:	f06f 0301 	mvn.w	r3, #1
 80221ee:	e096      	b.n	802231e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80221f0:	8a7b      	ldrh	r3, [r7, #18]
 80221f2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80221f4:	6a3b      	ldr	r3, [r7, #32]
 80221f6:	3301      	adds	r3, #1
 80221f8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80221fa:	e79e      	b.n	802213a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80221fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022200:	2b04      	cmp	r3, #4
 8022202:	d106      	bne.n	8022212 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8022204:	68bb      	ldr	r3, [r7, #8]
 8022206:	4618      	mov	r0, r3
 8022208:	f7f6 fd27 	bl	8018c5a <lwip_htonl>
 802220c:	4603      	mov	r3, r0
 802220e:	60bb      	str	r3, [r7, #8]
 8022210:	e011      	b.n	8022236 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8022212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022216:	2b01      	cmp	r3, #1
 8022218:	d009      	beq.n	802222e <dhcp_parse_reply+0x48a>
 802221a:	4b43      	ldr	r3, [pc, #268]	; (8022328 <dhcp_parse_reply+0x584>)
 802221c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8022220:	4948      	ldr	r1, [pc, #288]	; (8022344 <dhcp_parse_reply+0x5a0>)
 8022222:	4843      	ldr	r0, [pc, #268]	; (8022330 <dhcp_parse_reply+0x58c>)
 8022224:	f003 fe9e 	bl	8025f64 <iprintf>
 8022228:	f06f 0305 	mvn.w	r3, #5
 802222c:	e077      	b.n	802231e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 802222e:	f107 0308 	add.w	r3, r7, #8
 8022232:	781b      	ldrb	r3, [r3, #0]
 8022234:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8022236:	4a40      	ldr	r2, [pc, #256]	; (8022338 <dhcp_parse_reply+0x594>)
 8022238:	6a3b      	ldr	r3, [r7, #32]
 802223a:	4413      	add	r3, r2
 802223c:	2201      	movs	r2, #1
 802223e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8022240:	68ba      	ldr	r2, [r7, #8]
 8022242:	493f      	ldr	r1, [pc, #252]	; (8022340 <dhcp_parse_reply+0x59c>)
 8022244:	6a3b      	ldr	r3, [r7, #32]
 8022246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 802224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802224c:	895b      	ldrh	r3, [r3, #10]
 802224e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8022250:	429a      	cmp	r2, r3
 8022252:	d324      	bcc.n	802229e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8022254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022256:	895b      	ldrh	r3, [r3, #10]
 8022258:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802225a:	1ad3      	subs	r3, r2, r3
 802225c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 802225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022260:	895b      	ldrh	r3, [r3, #10]
 8022262:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8022264:	1ad3      	subs	r3, r2, r3
 8022266:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8022268:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802226a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802226c:	429a      	cmp	r2, r3
 802226e:	d213      	bcs.n	8022298 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8022270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022272:	681b      	ldr	r3, [r3, #0]
 8022274:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8022276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022278:	2b00      	cmp	r3, #0
 802227a:	d109      	bne.n	8022290 <dhcp_parse_reply+0x4ec>
 802227c:	4b2a      	ldr	r3, [pc, #168]	; (8022328 <dhcp_parse_reply+0x584>)
 802227e:	f240 629d 	movw	r2, #1693	; 0x69d
 8022282:	4931      	ldr	r1, [pc, #196]	; (8022348 <dhcp_parse_reply+0x5a4>)
 8022284:	482a      	ldr	r0, [pc, #168]	; (8022330 <dhcp_parse_reply+0x58c>)
 8022286:	f003 fe6d 	bl	8025f64 <iprintf>
 802228a:	f06f 0305 	mvn.w	r3, #5
 802228e:	e046      	b.n	802231e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8022290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022292:	685b      	ldr	r3, [r3, #4]
 8022294:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022296:	e002      	b.n	802229e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8022298:	f06f 0301 	mvn.w	r3, #1
 802229c:	e03f      	b.n	802231e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d00a      	beq.n	80222ba <dhcp_parse_reply+0x516>
 80222a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80222a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80222a8:	429a      	cmp	r2, r3
 80222aa:	d206      	bcs.n	80222ba <dhcp_parse_reply+0x516>
 80222ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80222ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80222b0:	4413      	add	r3, r2
 80222b2:	781b      	ldrb	r3, [r3, #0]
 80222b4:	2bff      	cmp	r3, #255	; 0xff
 80222b6:	f47f adb8 	bne.w	8021e2a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80222ba:	4b1f      	ldr	r3, [pc, #124]	; (8022338 <dhcp_parse_reply+0x594>)
 80222bc:	781b      	ldrb	r3, [r3, #0]
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d018      	beq.n	80222f4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80222c2:	4b1f      	ldr	r3, [pc, #124]	; (8022340 <dhcp_parse_reply+0x59c>)
 80222c4:	681b      	ldr	r3, [r3, #0]
 80222c6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80222c8:	4b1b      	ldr	r3, [pc, #108]	; (8022338 <dhcp_parse_reply+0x594>)
 80222ca:	2200      	movs	r2, #0
 80222cc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80222ce:	68fb      	ldr	r3, [r7, #12]
 80222d0:	2b01      	cmp	r3, #1
 80222d2:	d102      	bne.n	80222da <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80222d4:	2301      	movs	r3, #1
 80222d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80222d8:	e00c      	b.n	80222f4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80222da:	68fb      	ldr	r3, [r7, #12]
 80222dc:	2b02      	cmp	r3, #2
 80222de:	d102      	bne.n	80222e6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80222e0:	2301      	movs	r3, #1
 80222e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80222e4:	e006      	b.n	80222f4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80222e6:	68fb      	ldr	r3, [r7, #12]
 80222e8:	2b03      	cmp	r3, #3
 80222ea:	d103      	bne.n	80222f4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80222ec:	2301      	movs	r3, #1
 80222ee:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80222f0:	2301      	movs	r3, #1
 80222f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80222f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80222f6:	2b00      	cmp	r3, #0
 80222f8:	d006      	beq.n	8022308 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80222fa:	2300      	movs	r3, #0
 80222fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80222fe:	236c      	movs	r3, #108	; 0x6c
 8022300:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8022302:	23ec      	movs	r3, #236	; 0xec
 8022304:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8022306:	e56a      	b.n	8021dde <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8022308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802230a:	2b00      	cmp	r3, #0
 802230c:	d006      	beq.n	802231c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 802230e:	2300      	movs	r3, #0
 8022310:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8022312:	232c      	movs	r3, #44	; 0x2c
 8022314:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8022316:	236c      	movs	r3, #108	; 0x6c
 8022318:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 802231a:	e560      	b.n	8021dde <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 802231c:	2300      	movs	r3, #0
}
 802231e:	4618      	mov	r0, r3
 8022320:	3740      	adds	r7, #64	; 0x40
 8022322:	46bd      	mov	sp, r7
 8022324:	bd80      	pop	{r7, pc}
 8022326:	bf00      	nop
 8022328:	08029308 	.word	0x08029308
 802232c:	08029590 	.word	0x08029590
 8022330:	08029368 	.word	0x08029368
 8022334:	080295d4 	.word	0x080295d4
 8022338:	2400d07c 	.word	0x2400d07c
 802233c:	080295e8 	.word	0x080295e8
 8022340:	2400d05c 	.word	0x2400d05c
 8022344:	08029600 	.word	0x08029600
 8022348:	08029614 	.word	0x08029614

0802234c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 802234c:	b580      	push	{r7, lr}
 802234e:	b08a      	sub	sp, #40	; 0x28
 8022350:	af00      	add	r7, sp, #0
 8022352:	60f8      	str	r0, [r7, #12]
 8022354:	60b9      	str	r1, [r7, #8]
 8022356:	607a      	str	r2, [r7, #4]
 8022358:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 802235a:	4b60      	ldr	r3, [pc, #384]	; (80224dc <dhcp_recv+0x190>)
 802235c:	685b      	ldr	r3, [r3, #4]
 802235e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022360:	6a3b      	ldr	r3, [r7, #32]
 8022362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022364:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	685b      	ldr	r3, [r3, #4]
 802236a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 802236c:	69fb      	ldr	r3, [r7, #28]
 802236e:	2b00      	cmp	r3, #0
 8022370:	f000 809d 	beq.w	80224ae <dhcp_recv+0x162>
 8022374:	69fb      	ldr	r3, [r7, #28]
 8022376:	791b      	ldrb	r3, [r3, #4]
 8022378:	2b00      	cmp	r3, #0
 802237a:	f000 8098 	beq.w	80224ae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	895b      	ldrh	r3, [r3, #10]
 8022382:	2b2b      	cmp	r3, #43	; 0x2b
 8022384:	f240 8095 	bls.w	80224b2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8022388:	69bb      	ldr	r3, [r7, #24]
 802238a:	781b      	ldrb	r3, [r3, #0]
 802238c:	2b02      	cmp	r3, #2
 802238e:	f040 8092 	bne.w	80224b6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022392:	2300      	movs	r3, #0
 8022394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022398:	e012      	b.n	80223c0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 802239a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802239e:	6a3a      	ldr	r2, [r7, #32]
 80223a0:	4413      	add	r3, r2
 80223a2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80223a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80223aa:	69b9      	ldr	r1, [r7, #24]
 80223ac:	440b      	add	r3, r1
 80223ae:	7f1b      	ldrb	r3, [r3, #28]
 80223b0:	429a      	cmp	r2, r3
 80223b2:	f040 8082 	bne.w	80224ba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80223b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80223ba:	3301      	adds	r3, #1
 80223bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80223c0:	6a3b      	ldr	r3, [r7, #32]
 80223c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80223c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80223ca:	429a      	cmp	r2, r3
 80223cc:	d203      	bcs.n	80223d6 <dhcp_recv+0x8a>
 80223ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80223d2:	2b05      	cmp	r3, #5
 80223d4:	d9e1      	bls.n	802239a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80223d6:	69bb      	ldr	r3, [r7, #24]
 80223d8:	685b      	ldr	r3, [r3, #4]
 80223da:	4618      	mov	r0, r3
 80223dc:	f7f6 fc3d 	bl	8018c5a <lwip_htonl>
 80223e0:	4602      	mov	r2, r0
 80223e2:	69fb      	ldr	r3, [r7, #28]
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	429a      	cmp	r2, r3
 80223e8:	d169      	bne.n	80224be <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80223ea:	69f9      	ldr	r1, [r7, #28]
 80223ec:	6878      	ldr	r0, [r7, #4]
 80223ee:	f7ff fcd9 	bl	8021da4 <dhcp_parse_reply>
 80223f2:	4603      	mov	r3, r0
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	d164      	bne.n	80224c2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80223f8:	4b39      	ldr	r3, [pc, #228]	; (80224e0 <dhcp_recv+0x194>)
 80223fa:	785b      	ldrb	r3, [r3, #1]
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	d062      	beq.n	80224c6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	685b      	ldr	r3, [r3, #4]
 8022404:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8022406:	4b37      	ldr	r3, [pc, #220]	; (80224e4 <dhcp_recv+0x198>)
 8022408:	685b      	ldr	r3, [r3, #4]
 802240a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 802240c:	7cfb      	ldrb	r3, [r7, #19]
 802240e:	2b05      	cmp	r3, #5
 8022410:	d12a      	bne.n	8022468 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8022412:	69fb      	ldr	r3, [r7, #28]
 8022414:	795b      	ldrb	r3, [r3, #5]
 8022416:	2b01      	cmp	r3, #1
 8022418:	d112      	bne.n	8022440 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 802241a:	6979      	ldr	r1, [r7, #20]
 802241c:	6a38      	ldr	r0, [r7, #32]
 802241e:	f7fe fe17 	bl	8021050 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8022422:	6a3b      	ldr	r3, [r7, #32]
 8022424:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022428:	f003 0308 	and.w	r3, r3, #8
 802242c:	2b00      	cmp	r3, #0
 802242e:	d003      	beq.n	8022438 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8022430:	6a38      	ldr	r0, [r7, #32]
 8022432:	f7fe fb85 	bl	8020b40 <dhcp_check>
 8022436:	e049      	b.n	80224cc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8022438:	6a38      	ldr	r0, [r7, #32]
 802243a:	f7ff f867 	bl	802150c <dhcp_bind>
 802243e:	e045      	b.n	80224cc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8022440:	69fb      	ldr	r3, [r7, #28]
 8022442:	795b      	ldrb	r3, [r3, #5]
 8022444:	2b03      	cmp	r3, #3
 8022446:	d007      	beq.n	8022458 <dhcp_recv+0x10c>
 8022448:	69fb      	ldr	r3, [r7, #28]
 802244a:	795b      	ldrb	r3, [r3, #5]
 802244c:	2b04      	cmp	r3, #4
 802244e:	d003      	beq.n	8022458 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8022450:	69fb      	ldr	r3, [r7, #28]
 8022452:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8022454:	2b05      	cmp	r3, #5
 8022456:	d139      	bne.n	80224cc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8022458:	6979      	ldr	r1, [r7, #20]
 802245a:	6a38      	ldr	r0, [r7, #32]
 802245c:	f7fe fdf8 	bl	8021050 <dhcp_handle_ack>
      dhcp_bind(netif);
 8022460:	6a38      	ldr	r0, [r7, #32]
 8022462:	f7ff f853 	bl	802150c <dhcp_bind>
 8022466:	e031      	b.n	80224cc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8022468:	7cfb      	ldrb	r3, [r7, #19]
 802246a:	2b06      	cmp	r3, #6
 802246c:	d113      	bne.n	8022496 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802246e:	69fb      	ldr	r3, [r7, #28]
 8022470:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8022472:	2b03      	cmp	r3, #3
 8022474:	d00b      	beq.n	802248e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8022476:	69fb      	ldr	r3, [r7, #28]
 8022478:	795b      	ldrb	r3, [r3, #5]
 802247a:	2b01      	cmp	r3, #1
 802247c:	d007      	beq.n	802248e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 802247e:	69fb      	ldr	r3, [r7, #28]
 8022480:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8022482:	2b04      	cmp	r3, #4
 8022484:	d003      	beq.n	802248e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8022486:	69fb      	ldr	r3, [r7, #28]
 8022488:	795b      	ldrb	r3, [r3, #5]
 802248a:	2b05      	cmp	r3, #5
 802248c:	d103      	bne.n	8022496 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 802248e:	6a38      	ldr	r0, [r7, #32]
 8022490:	f7fe fb3c 	bl	8020b0c <dhcp_handle_nak>
 8022494:	e01a      	b.n	80224cc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8022496:	7cfb      	ldrb	r3, [r7, #19]
 8022498:	2b02      	cmp	r3, #2
 802249a:	d116      	bne.n	80224ca <dhcp_recv+0x17e>
 802249c:	69fb      	ldr	r3, [r7, #28]
 802249e:	795b      	ldrb	r3, [r3, #5]
 80224a0:	2b06      	cmp	r3, #6
 80224a2:	d112      	bne.n	80224ca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80224a4:	6979      	ldr	r1, [r7, #20]
 80224a6:	6a38      	ldr	r0, [r7, #32]
 80224a8:	f7fe fb7e 	bl	8020ba8 <dhcp_handle_offer>
 80224ac:	e00e      	b.n	80224cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80224ae:	bf00      	nop
 80224b0:	e00c      	b.n	80224cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80224b2:	bf00      	nop
 80224b4:	e00a      	b.n	80224cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80224b6:	bf00      	nop
 80224b8:	e008      	b.n	80224cc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80224ba:	bf00      	nop
 80224bc:	e006      	b.n	80224cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80224be:	bf00      	nop
 80224c0:	e004      	b.n	80224cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80224c2:	bf00      	nop
 80224c4:	e002      	b.n	80224cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80224c6:	bf00      	nop
 80224c8:	e000      	b.n	80224cc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80224ca:	bf00      	nop
  pbuf_free(p);
 80224cc:	6878      	ldr	r0, [r7, #4]
 80224ce:	f7f8 f865 	bl	801a59c <pbuf_free>
}
 80224d2:	bf00      	nop
 80224d4:	3728      	adds	r7, #40	; 0x28
 80224d6:	46bd      	mov	sp, r7
 80224d8:	bd80      	pop	{r7, pc}
 80224da:	bf00      	nop
 80224dc:	24009edc 	.word	0x24009edc
 80224e0:	2400d07c 	.word	0x2400d07c
 80224e4:	2400d05c 	.word	0x2400d05c

080224e8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80224e8:	b580      	push	{r7, lr}
 80224ea:	b088      	sub	sp, #32
 80224ec:	af00      	add	r7, sp, #0
 80224ee:	60f8      	str	r0, [r7, #12]
 80224f0:	60b9      	str	r1, [r7, #8]
 80224f2:	603b      	str	r3, [r7, #0]
 80224f4:	4613      	mov	r3, r2
 80224f6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80224f8:	68fb      	ldr	r3, [r7, #12]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d108      	bne.n	8022510 <dhcp_create_msg+0x28>
 80224fe:	4b5f      	ldr	r3, [pc, #380]	; (802267c <dhcp_create_msg+0x194>)
 8022500:	f240 7269 	movw	r2, #1897	; 0x769
 8022504:	495e      	ldr	r1, [pc, #376]	; (8022680 <dhcp_create_msg+0x198>)
 8022506:	485f      	ldr	r0, [pc, #380]	; (8022684 <dhcp_create_msg+0x19c>)
 8022508:	f003 fd2c 	bl	8025f64 <iprintf>
 802250c:	2300      	movs	r3, #0
 802250e:	e0b1      	b.n	8022674 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8022510:	68bb      	ldr	r3, [r7, #8]
 8022512:	2b00      	cmp	r3, #0
 8022514:	d108      	bne.n	8022528 <dhcp_create_msg+0x40>
 8022516:	4b59      	ldr	r3, [pc, #356]	; (802267c <dhcp_create_msg+0x194>)
 8022518:	f240 726a 	movw	r2, #1898	; 0x76a
 802251c:	495a      	ldr	r1, [pc, #360]	; (8022688 <dhcp_create_msg+0x1a0>)
 802251e:	4859      	ldr	r0, [pc, #356]	; (8022684 <dhcp_create_msg+0x19c>)
 8022520:	f003 fd20 	bl	8025f64 <iprintf>
 8022524:	2300      	movs	r3, #0
 8022526:	e0a5      	b.n	8022674 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8022528:	f44f 7220 	mov.w	r2, #640	; 0x280
 802252c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8022530:	2036      	movs	r0, #54	; 0x36
 8022532:	f7f7 fd4f 	bl	8019fd4 <pbuf_alloc>
 8022536:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8022538:	69bb      	ldr	r3, [r7, #24]
 802253a:	2b00      	cmp	r3, #0
 802253c:	d101      	bne.n	8022542 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 802253e:	2300      	movs	r3, #0
 8022540:	e098      	b.n	8022674 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8022542:	69bb      	ldr	r3, [r7, #24]
 8022544:	895b      	ldrh	r3, [r3, #10]
 8022546:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 802254a:	d206      	bcs.n	802255a <dhcp_create_msg+0x72>
 802254c:	4b4b      	ldr	r3, [pc, #300]	; (802267c <dhcp_create_msg+0x194>)
 802254e:	f240 7271 	movw	r2, #1905	; 0x771
 8022552:	494e      	ldr	r1, [pc, #312]	; (802268c <dhcp_create_msg+0x1a4>)
 8022554:	484b      	ldr	r0, [pc, #300]	; (8022684 <dhcp_create_msg+0x19c>)
 8022556:	f003 fd05 	bl	8025f64 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 802255a:	79fb      	ldrb	r3, [r7, #7]
 802255c:	2b03      	cmp	r3, #3
 802255e:	d103      	bne.n	8022568 <dhcp_create_msg+0x80>
 8022560:	68bb      	ldr	r3, [r7, #8]
 8022562:	795b      	ldrb	r3, [r3, #5]
 8022564:	2b03      	cmp	r3, #3
 8022566:	d10d      	bne.n	8022584 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8022568:	68bb      	ldr	r3, [r7, #8]
 802256a:	799b      	ldrb	r3, [r3, #6]
 802256c:	2b00      	cmp	r3, #0
 802256e:	d105      	bne.n	802257c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8022570:	f003 fd86 	bl	8026080 <rand>
 8022574:	4603      	mov	r3, r0
 8022576:	461a      	mov	r2, r3
 8022578:	4b45      	ldr	r3, [pc, #276]	; (8022690 <dhcp_create_msg+0x1a8>)
 802257a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 802257c:	4b44      	ldr	r3, [pc, #272]	; (8022690 <dhcp_create_msg+0x1a8>)
 802257e:	681a      	ldr	r2, [r3, #0]
 8022580:	68bb      	ldr	r3, [r7, #8]
 8022582:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8022584:	69bb      	ldr	r3, [r7, #24]
 8022586:	685b      	ldr	r3, [r3, #4]
 8022588:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802258a:	f44f 729a 	mov.w	r2, #308	; 0x134
 802258e:	2100      	movs	r1, #0
 8022590:	6978      	ldr	r0, [r7, #20]
 8022592:	f003 fbe9 	bl	8025d68 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8022596:	697b      	ldr	r3, [r7, #20]
 8022598:	2201      	movs	r2, #1
 802259a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 802259c:	697b      	ldr	r3, [r7, #20]
 802259e:	2201      	movs	r2, #1
 80225a0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80225a2:	68fb      	ldr	r3, [r7, #12]
 80225a4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80225a8:	697b      	ldr	r3, [r7, #20]
 80225aa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80225ac:	68bb      	ldr	r3, [r7, #8]
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	4618      	mov	r0, r3
 80225b2:	f7f6 fb52 	bl	8018c5a <lwip_htonl>
 80225b6:	4602      	mov	r2, r0
 80225b8:	697b      	ldr	r3, [r7, #20]
 80225ba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80225bc:	79fb      	ldrb	r3, [r7, #7]
 80225be:	2b08      	cmp	r3, #8
 80225c0:	d010      	beq.n	80225e4 <dhcp_create_msg+0xfc>
 80225c2:	79fb      	ldrb	r3, [r7, #7]
 80225c4:	2b04      	cmp	r3, #4
 80225c6:	d00d      	beq.n	80225e4 <dhcp_create_msg+0xfc>
 80225c8:	79fb      	ldrb	r3, [r7, #7]
 80225ca:	2b07      	cmp	r3, #7
 80225cc:	d00a      	beq.n	80225e4 <dhcp_create_msg+0xfc>
 80225ce:	79fb      	ldrb	r3, [r7, #7]
 80225d0:	2b03      	cmp	r3, #3
 80225d2:	d10c      	bne.n	80225ee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80225d4:	68bb      	ldr	r3, [r7, #8]
 80225d6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80225d8:	2b05      	cmp	r3, #5
 80225da:	d003      	beq.n	80225e4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80225dc:	68bb      	ldr	r3, [r7, #8]
 80225de:	795b      	ldrb	r3, [r3, #5]
 80225e0:	2b04      	cmp	r3, #4
 80225e2:	d104      	bne.n	80225ee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80225e4:	68fb      	ldr	r3, [r7, #12]
 80225e6:	3304      	adds	r3, #4
 80225e8:	681a      	ldr	r2, [r3, #0]
 80225ea:	697b      	ldr	r3, [r7, #20]
 80225ec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80225ee:	2300      	movs	r3, #0
 80225f0:	83fb      	strh	r3, [r7, #30]
 80225f2:	e00c      	b.n	802260e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80225f4:	8bfa      	ldrh	r2, [r7, #30]
 80225f6:	8bfb      	ldrh	r3, [r7, #30]
 80225f8:	68f9      	ldr	r1, [r7, #12]
 80225fa:	440a      	add	r2, r1
 80225fc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8022600:	697a      	ldr	r2, [r7, #20]
 8022602:	4413      	add	r3, r2
 8022604:	460a      	mov	r2, r1
 8022606:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8022608:	8bfb      	ldrh	r3, [r7, #30]
 802260a:	3301      	adds	r3, #1
 802260c:	83fb      	strh	r3, [r7, #30]
 802260e:	8bfb      	ldrh	r3, [r7, #30]
 8022610:	2b05      	cmp	r3, #5
 8022612:	d9ef      	bls.n	80225f4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8022614:	697b      	ldr	r3, [r7, #20]
 8022616:	2200      	movs	r2, #0
 8022618:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 802261c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8022620:	2200      	movs	r2, #0
 8022622:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8022626:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 802262a:	2200      	movs	r2, #0
 802262c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8022630:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8022634:	2200      	movs	r2, #0
 8022636:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 802263a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 802263e:	697b      	ldr	r3, [r7, #20]
 8022640:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022644:	2301      	movs	r3, #1
 8022646:	2235      	movs	r2, #53	; 0x35
 8022648:	2000      	movs	r0, #0
 802264a:	f7ff fadb 	bl	8021c04 <dhcp_option>
 802264e:	4603      	mov	r3, r0
 8022650:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8022652:	697b      	ldr	r3, [r7, #20]
 8022654:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8022658:	79fa      	ldrb	r2, [r7, #7]
 802265a:	8a7b      	ldrh	r3, [r7, #18]
 802265c:	4618      	mov	r0, r3
 802265e:	f7ff fb05 	bl	8021c6c <dhcp_option_byte>
 8022662:	4603      	mov	r3, r0
 8022664:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8022666:	683b      	ldr	r3, [r7, #0]
 8022668:	2b00      	cmp	r3, #0
 802266a:	d002      	beq.n	8022672 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 802266c:	683b      	ldr	r3, [r7, #0]
 802266e:	8a7a      	ldrh	r2, [r7, #18]
 8022670:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8022672:	69bb      	ldr	r3, [r7, #24]
}
 8022674:	4618      	mov	r0, r3
 8022676:	3720      	adds	r7, #32
 8022678:	46bd      	mov	sp, r7
 802267a:	bd80      	pop	{r7, pc}
 802267c:	08029308 	.word	0x08029308
 8022680:	08029628 	.word	0x08029628
 8022684:	08029368 	.word	0x08029368
 8022688:	08029648 	.word	0x08029648
 802268c:	08029668 	.word	0x08029668
 8022690:	2400d08c 	.word	0x2400d08c

08022694 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8022694:	b580      	push	{r7, lr}
 8022696:	b084      	sub	sp, #16
 8022698:	af00      	add	r7, sp, #0
 802269a:	4603      	mov	r3, r0
 802269c:	60b9      	str	r1, [r7, #8]
 802269e:	607a      	str	r2, [r7, #4]
 80226a0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80226a2:	89fb      	ldrh	r3, [r7, #14]
 80226a4:	1c5a      	adds	r2, r3, #1
 80226a6:	81fa      	strh	r2, [r7, #14]
 80226a8:	461a      	mov	r2, r3
 80226aa:	68bb      	ldr	r3, [r7, #8]
 80226ac:	4413      	add	r3, r2
 80226ae:	22ff      	movs	r2, #255	; 0xff
 80226b0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80226b2:	e007      	b.n	80226c4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80226b4:	89fb      	ldrh	r3, [r7, #14]
 80226b6:	1c5a      	adds	r2, r3, #1
 80226b8:	81fa      	strh	r2, [r7, #14]
 80226ba:	461a      	mov	r2, r3
 80226bc:	68bb      	ldr	r3, [r7, #8]
 80226be:	4413      	add	r3, r2
 80226c0:	2200      	movs	r2, #0
 80226c2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80226c4:	89fb      	ldrh	r3, [r7, #14]
 80226c6:	2b43      	cmp	r3, #67	; 0x43
 80226c8:	d904      	bls.n	80226d4 <dhcp_option_trailer+0x40>
 80226ca:	89fb      	ldrh	r3, [r7, #14]
 80226cc:	f003 0303 	and.w	r3, r3, #3
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	d002      	beq.n	80226da <dhcp_option_trailer+0x46>
 80226d4:	89fb      	ldrh	r3, [r7, #14]
 80226d6:	2b43      	cmp	r3, #67	; 0x43
 80226d8:	d9ec      	bls.n	80226b4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80226da:	89fb      	ldrh	r3, [r7, #14]
 80226dc:	33f0      	adds	r3, #240	; 0xf0
 80226de:	b29b      	uxth	r3, r3
 80226e0:	4619      	mov	r1, r3
 80226e2:	6878      	ldr	r0, [r7, #4]
 80226e4:	f7f7 fdd4 	bl	801a290 <pbuf_realloc>
}
 80226e8:	bf00      	nop
 80226ea:	3710      	adds	r7, #16
 80226ec:	46bd      	mov	sp, r7
 80226ee:	bd80      	pop	{r7, pc}

080226f0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80226f0:	b480      	push	{r7}
 80226f2:	b085      	sub	sp, #20
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80226f8:	687b      	ldr	r3, [r7, #4]
 80226fa:	2b00      	cmp	r3, #0
 80226fc:	d017      	beq.n	802272e <dhcp_supplied_address+0x3e>
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022702:	2b00      	cmp	r3, #0
 8022704:	d013      	beq.n	802272e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802270a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	795b      	ldrb	r3, [r3, #5]
 8022710:	2b0a      	cmp	r3, #10
 8022712:	d007      	beq.n	8022724 <dhcp_supplied_address+0x34>
 8022714:	68fb      	ldr	r3, [r7, #12]
 8022716:	795b      	ldrb	r3, [r3, #5]
 8022718:	2b05      	cmp	r3, #5
 802271a:	d003      	beq.n	8022724 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 802271c:	68fb      	ldr	r3, [r7, #12]
 802271e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8022720:	2b04      	cmp	r3, #4
 8022722:	d101      	bne.n	8022728 <dhcp_supplied_address+0x38>
 8022724:	2301      	movs	r3, #1
 8022726:	e000      	b.n	802272a <dhcp_supplied_address+0x3a>
 8022728:	2300      	movs	r3, #0
 802272a:	b2db      	uxtb	r3, r3
 802272c:	e000      	b.n	8022730 <dhcp_supplied_address+0x40>
  }
  return 0;
 802272e:	2300      	movs	r3, #0
}
 8022730:	4618      	mov	r0, r3
 8022732:	3714      	adds	r7, #20
 8022734:	46bd      	mov	sp, r7
 8022736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802273a:	4770      	bx	lr

0802273c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802273c:	b580      	push	{r7, lr}
 802273e:	b082      	sub	sp, #8
 8022740:	af00      	add	r7, sp, #0
 8022742:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8022744:	4915      	ldr	r1, [pc, #84]	; (802279c <etharp_free_entry+0x60>)
 8022746:	687a      	ldr	r2, [r7, #4]
 8022748:	4613      	mov	r3, r2
 802274a:	005b      	lsls	r3, r3, #1
 802274c:	4413      	add	r3, r2
 802274e:	00db      	lsls	r3, r3, #3
 8022750:	440b      	add	r3, r1
 8022752:	681b      	ldr	r3, [r3, #0]
 8022754:	2b00      	cmp	r3, #0
 8022756:	d013      	beq.n	8022780 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8022758:	4910      	ldr	r1, [pc, #64]	; (802279c <etharp_free_entry+0x60>)
 802275a:	687a      	ldr	r2, [r7, #4]
 802275c:	4613      	mov	r3, r2
 802275e:	005b      	lsls	r3, r3, #1
 8022760:	4413      	add	r3, r2
 8022762:	00db      	lsls	r3, r3, #3
 8022764:	440b      	add	r3, r1
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	4618      	mov	r0, r3
 802276a:	f7f7 ff17 	bl	801a59c <pbuf_free>
    arp_table[i].q = NULL;
 802276e:	490b      	ldr	r1, [pc, #44]	; (802279c <etharp_free_entry+0x60>)
 8022770:	687a      	ldr	r2, [r7, #4]
 8022772:	4613      	mov	r3, r2
 8022774:	005b      	lsls	r3, r3, #1
 8022776:	4413      	add	r3, r2
 8022778:	00db      	lsls	r3, r3, #3
 802277a:	440b      	add	r3, r1
 802277c:	2200      	movs	r2, #0
 802277e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8022780:	4906      	ldr	r1, [pc, #24]	; (802279c <etharp_free_entry+0x60>)
 8022782:	687a      	ldr	r2, [r7, #4]
 8022784:	4613      	mov	r3, r2
 8022786:	005b      	lsls	r3, r3, #1
 8022788:	4413      	add	r3, r2
 802278a:	00db      	lsls	r3, r3, #3
 802278c:	440b      	add	r3, r1
 802278e:	3314      	adds	r3, #20
 8022790:	2200      	movs	r2, #0
 8022792:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8022794:	bf00      	nop
 8022796:	3708      	adds	r7, #8
 8022798:	46bd      	mov	sp, r7
 802279a:	bd80      	pop	{r7, pc}
 802279c:	2400d090 	.word	0x2400d090

080227a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80227a0:	b580      	push	{r7, lr}
 80227a2:	b082      	sub	sp, #8
 80227a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80227a6:	2300      	movs	r3, #0
 80227a8:	607b      	str	r3, [r7, #4]
 80227aa:	e096      	b.n	80228da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80227ac:	494f      	ldr	r1, [pc, #316]	; (80228ec <etharp_tmr+0x14c>)
 80227ae:	687a      	ldr	r2, [r7, #4]
 80227b0:	4613      	mov	r3, r2
 80227b2:	005b      	lsls	r3, r3, #1
 80227b4:	4413      	add	r3, r2
 80227b6:	00db      	lsls	r3, r3, #3
 80227b8:	440b      	add	r3, r1
 80227ba:	3314      	adds	r3, #20
 80227bc:	781b      	ldrb	r3, [r3, #0]
 80227be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80227c0:	78fb      	ldrb	r3, [r7, #3]
 80227c2:	2b00      	cmp	r3, #0
 80227c4:	f000 8086 	beq.w	80228d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80227c8:	4948      	ldr	r1, [pc, #288]	; (80228ec <etharp_tmr+0x14c>)
 80227ca:	687a      	ldr	r2, [r7, #4]
 80227cc:	4613      	mov	r3, r2
 80227ce:	005b      	lsls	r3, r3, #1
 80227d0:	4413      	add	r3, r2
 80227d2:	00db      	lsls	r3, r3, #3
 80227d4:	440b      	add	r3, r1
 80227d6:	3312      	adds	r3, #18
 80227d8:	881b      	ldrh	r3, [r3, #0]
 80227da:	3301      	adds	r3, #1
 80227dc:	b298      	uxth	r0, r3
 80227de:	4943      	ldr	r1, [pc, #268]	; (80228ec <etharp_tmr+0x14c>)
 80227e0:	687a      	ldr	r2, [r7, #4]
 80227e2:	4613      	mov	r3, r2
 80227e4:	005b      	lsls	r3, r3, #1
 80227e6:	4413      	add	r3, r2
 80227e8:	00db      	lsls	r3, r3, #3
 80227ea:	440b      	add	r3, r1
 80227ec:	3312      	adds	r3, #18
 80227ee:	4602      	mov	r2, r0
 80227f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80227f2:	493e      	ldr	r1, [pc, #248]	; (80228ec <etharp_tmr+0x14c>)
 80227f4:	687a      	ldr	r2, [r7, #4]
 80227f6:	4613      	mov	r3, r2
 80227f8:	005b      	lsls	r3, r3, #1
 80227fa:	4413      	add	r3, r2
 80227fc:	00db      	lsls	r3, r3, #3
 80227fe:	440b      	add	r3, r1
 8022800:	3312      	adds	r3, #18
 8022802:	881b      	ldrh	r3, [r3, #0]
 8022804:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8022808:	d215      	bcs.n	8022836 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802280a:	4938      	ldr	r1, [pc, #224]	; (80228ec <etharp_tmr+0x14c>)
 802280c:	687a      	ldr	r2, [r7, #4]
 802280e:	4613      	mov	r3, r2
 8022810:	005b      	lsls	r3, r3, #1
 8022812:	4413      	add	r3, r2
 8022814:	00db      	lsls	r3, r3, #3
 8022816:	440b      	add	r3, r1
 8022818:	3314      	adds	r3, #20
 802281a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802281c:	2b01      	cmp	r3, #1
 802281e:	d10e      	bne.n	802283e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8022820:	4932      	ldr	r1, [pc, #200]	; (80228ec <etharp_tmr+0x14c>)
 8022822:	687a      	ldr	r2, [r7, #4]
 8022824:	4613      	mov	r3, r2
 8022826:	005b      	lsls	r3, r3, #1
 8022828:	4413      	add	r3, r2
 802282a:	00db      	lsls	r3, r3, #3
 802282c:	440b      	add	r3, r1
 802282e:	3312      	adds	r3, #18
 8022830:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022832:	2b04      	cmp	r3, #4
 8022834:	d903      	bls.n	802283e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8022836:	6878      	ldr	r0, [r7, #4]
 8022838:	f7ff ff80 	bl	802273c <etharp_free_entry>
 802283c:	e04a      	b.n	80228d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 802283e:	492b      	ldr	r1, [pc, #172]	; (80228ec <etharp_tmr+0x14c>)
 8022840:	687a      	ldr	r2, [r7, #4]
 8022842:	4613      	mov	r3, r2
 8022844:	005b      	lsls	r3, r3, #1
 8022846:	4413      	add	r3, r2
 8022848:	00db      	lsls	r3, r3, #3
 802284a:	440b      	add	r3, r1
 802284c:	3314      	adds	r3, #20
 802284e:	781b      	ldrb	r3, [r3, #0]
 8022850:	2b03      	cmp	r3, #3
 8022852:	d10a      	bne.n	802286a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8022854:	4925      	ldr	r1, [pc, #148]	; (80228ec <etharp_tmr+0x14c>)
 8022856:	687a      	ldr	r2, [r7, #4]
 8022858:	4613      	mov	r3, r2
 802285a:	005b      	lsls	r3, r3, #1
 802285c:	4413      	add	r3, r2
 802285e:	00db      	lsls	r3, r3, #3
 8022860:	440b      	add	r3, r1
 8022862:	3314      	adds	r3, #20
 8022864:	2204      	movs	r2, #4
 8022866:	701a      	strb	r2, [r3, #0]
 8022868:	e034      	b.n	80228d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802286a:	4920      	ldr	r1, [pc, #128]	; (80228ec <etharp_tmr+0x14c>)
 802286c:	687a      	ldr	r2, [r7, #4]
 802286e:	4613      	mov	r3, r2
 8022870:	005b      	lsls	r3, r3, #1
 8022872:	4413      	add	r3, r2
 8022874:	00db      	lsls	r3, r3, #3
 8022876:	440b      	add	r3, r1
 8022878:	3314      	adds	r3, #20
 802287a:	781b      	ldrb	r3, [r3, #0]
 802287c:	2b04      	cmp	r3, #4
 802287e:	d10a      	bne.n	8022896 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8022880:	491a      	ldr	r1, [pc, #104]	; (80228ec <etharp_tmr+0x14c>)
 8022882:	687a      	ldr	r2, [r7, #4]
 8022884:	4613      	mov	r3, r2
 8022886:	005b      	lsls	r3, r3, #1
 8022888:	4413      	add	r3, r2
 802288a:	00db      	lsls	r3, r3, #3
 802288c:	440b      	add	r3, r1
 802288e:	3314      	adds	r3, #20
 8022890:	2202      	movs	r2, #2
 8022892:	701a      	strb	r2, [r3, #0]
 8022894:	e01e      	b.n	80228d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022896:	4915      	ldr	r1, [pc, #84]	; (80228ec <etharp_tmr+0x14c>)
 8022898:	687a      	ldr	r2, [r7, #4]
 802289a:	4613      	mov	r3, r2
 802289c:	005b      	lsls	r3, r3, #1
 802289e:	4413      	add	r3, r2
 80228a0:	00db      	lsls	r3, r3, #3
 80228a2:	440b      	add	r3, r1
 80228a4:	3314      	adds	r3, #20
 80228a6:	781b      	ldrb	r3, [r3, #0]
 80228a8:	2b01      	cmp	r3, #1
 80228aa:	d113      	bne.n	80228d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80228ac:	490f      	ldr	r1, [pc, #60]	; (80228ec <etharp_tmr+0x14c>)
 80228ae:	687a      	ldr	r2, [r7, #4]
 80228b0:	4613      	mov	r3, r2
 80228b2:	005b      	lsls	r3, r3, #1
 80228b4:	4413      	add	r3, r2
 80228b6:	00db      	lsls	r3, r3, #3
 80228b8:	440b      	add	r3, r1
 80228ba:	3308      	adds	r3, #8
 80228bc:	6818      	ldr	r0, [r3, #0]
 80228be:	687a      	ldr	r2, [r7, #4]
 80228c0:	4613      	mov	r3, r2
 80228c2:	005b      	lsls	r3, r3, #1
 80228c4:	4413      	add	r3, r2
 80228c6:	00db      	lsls	r3, r3, #3
 80228c8:	4a08      	ldr	r2, [pc, #32]	; (80228ec <etharp_tmr+0x14c>)
 80228ca:	4413      	add	r3, r2
 80228cc:	3304      	adds	r3, #4
 80228ce:	4619      	mov	r1, r3
 80228d0:	f000 fe72 	bl	80235b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	3301      	adds	r3, #1
 80228d8:	607b      	str	r3, [r7, #4]
 80228da:	687b      	ldr	r3, [r7, #4]
 80228dc:	2b09      	cmp	r3, #9
 80228de:	f77f af65 	ble.w	80227ac <etharp_tmr+0xc>
      }
    }
  }
}
 80228e2:	bf00      	nop
 80228e4:	bf00      	nop
 80228e6:	3708      	adds	r7, #8
 80228e8:	46bd      	mov	sp, r7
 80228ea:	bd80      	pop	{r7, pc}
 80228ec:	2400d090 	.word	0x2400d090

080228f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80228f0:	b580      	push	{r7, lr}
 80228f2:	b08a      	sub	sp, #40	; 0x28
 80228f4:	af00      	add	r7, sp, #0
 80228f6:	60f8      	str	r0, [r7, #12]
 80228f8:	460b      	mov	r3, r1
 80228fa:	607a      	str	r2, [r7, #4]
 80228fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80228fe:	230a      	movs	r3, #10
 8022900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8022902:	230a      	movs	r3, #10
 8022904:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8022906:	230a      	movs	r3, #10
 8022908:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 802290a:	2300      	movs	r3, #0
 802290c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802290e:	230a      	movs	r3, #10
 8022910:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8022912:	2300      	movs	r3, #0
 8022914:	83bb      	strh	r3, [r7, #28]
 8022916:	2300      	movs	r3, #0
 8022918:	837b      	strh	r3, [r7, #26]
 802291a:	2300      	movs	r3, #0
 802291c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802291e:	2300      	movs	r3, #0
 8022920:	843b      	strh	r3, [r7, #32]
 8022922:	e0ae      	b.n	8022a82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8022924:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022928:	49a6      	ldr	r1, [pc, #664]	; (8022bc4 <etharp_find_entry+0x2d4>)
 802292a:	4613      	mov	r3, r2
 802292c:	005b      	lsls	r3, r3, #1
 802292e:	4413      	add	r3, r2
 8022930:	00db      	lsls	r3, r3, #3
 8022932:	440b      	add	r3, r1
 8022934:	3314      	adds	r3, #20
 8022936:	781b      	ldrb	r3, [r3, #0]
 8022938:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802293a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802293e:	2b0a      	cmp	r3, #10
 8022940:	d105      	bne.n	802294e <etharp_find_entry+0x5e>
 8022942:	7dfb      	ldrb	r3, [r7, #23]
 8022944:	2b00      	cmp	r3, #0
 8022946:	d102      	bne.n	802294e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8022948:	8c3b      	ldrh	r3, [r7, #32]
 802294a:	847b      	strh	r3, [r7, #34]	; 0x22
 802294c:	e095      	b.n	8022a7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 802294e:	7dfb      	ldrb	r3, [r7, #23]
 8022950:	2b00      	cmp	r3, #0
 8022952:	f000 8092 	beq.w	8022a7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8022956:	7dfb      	ldrb	r3, [r7, #23]
 8022958:	2b01      	cmp	r3, #1
 802295a:	d009      	beq.n	8022970 <etharp_find_entry+0x80>
 802295c:	7dfb      	ldrb	r3, [r7, #23]
 802295e:	2b01      	cmp	r3, #1
 8022960:	d806      	bhi.n	8022970 <etharp_find_entry+0x80>
 8022962:	4b99      	ldr	r3, [pc, #612]	; (8022bc8 <etharp_find_entry+0x2d8>)
 8022964:	f240 1223 	movw	r2, #291	; 0x123
 8022968:	4998      	ldr	r1, [pc, #608]	; (8022bcc <etharp_find_entry+0x2dc>)
 802296a:	4899      	ldr	r0, [pc, #612]	; (8022bd0 <etharp_find_entry+0x2e0>)
 802296c:	f003 fafa 	bl	8025f64 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8022970:	68fb      	ldr	r3, [r7, #12]
 8022972:	2b00      	cmp	r3, #0
 8022974:	d020      	beq.n	80229b8 <etharp_find_entry+0xc8>
 8022976:	68fb      	ldr	r3, [r7, #12]
 8022978:	6819      	ldr	r1, [r3, #0]
 802297a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802297e:	4891      	ldr	r0, [pc, #580]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022980:	4613      	mov	r3, r2
 8022982:	005b      	lsls	r3, r3, #1
 8022984:	4413      	add	r3, r2
 8022986:	00db      	lsls	r3, r3, #3
 8022988:	4403      	add	r3, r0
 802298a:	3304      	adds	r3, #4
 802298c:	681b      	ldr	r3, [r3, #0]
 802298e:	4299      	cmp	r1, r3
 8022990:	d112      	bne.n	80229b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	2b00      	cmp	r3, #0
 8022996:	d00c      	beq.n	80229b2 <etharp_find_entry+0xc2>
 8022998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802299c:	4989      	ldr	r1, [pc, #548]	; (8022bc4 <etharp_find_entry+0x2d4>)
 802299e:	4613      	mov	r3, r2
 80229a0:	005b      	lsls	r3, r3, #1
 80229a2:	4413      	add	r3, r2
 80229a4:	00db      	lsls	r3, r3, #3
 80229a6:	440b      	add	r3, r1
 80229a8:	3308      	adds	r3, #8
 80229aa:	681b      	ldr	r3, [r3, #0]
 80229ac:	687a      	ldr	r2, [r7, #4]
 80229ae:	429a      	cmp	r2, r3
 80229b0:	d102      	bne.n	80229b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80229b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80229b6:	e100      	b.n	8022bba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80229b8:	7dfb      	ldrb	r3, [r7, #23]
 80229ba:	2b01      	cmp	r3, #1
 80229bc:	d140      	bne.n	8022a40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80229be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80229c2:	4980      	ldr	r1, [pc, #512]	; (8022bc4 <etharp_find_entry+0x2d4>)
 80229c4:	4613      	mov	r3, r2
 80229c6:	005b      	lsls	r3, r3, #1
 80229c8:	4413      	add	r3, r2
 80229ca:	00db      	lsls	r3, r3, #3
 80229cc:	440b      	add	r3, r1
 80229ce:	681b      	ldr	r3, [r3, #0]
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	d01a      	beq.n	8022a0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80229d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80229d8:	497a      	ldr	r1, [pc, #488]	; (8022bc4 <etharp_find_entry+0x2d4>)
 80229da:	4613      	mov	r3, r2
 80229dc:	005b      	lsls	r3, r3, #1
 80229de:	4413      	add	r3, r2
 80229e0:	00db      	lsls	r3, r3, #3
 80229e2:	440b      	add	r3, r1
 80229e4:	3312      	adds	r3, #18
 80229e6:	881b      	ldrh	r3, [r3, #0]
 80229e8:	8bba      	ldrh	r2, [r7, #28]
 80229ea:	429a      	cmp	r2, r3
 80229ec:	d845      	bhi.n	8022a7a <etharp_find_entry+0x18a>
            old_queue = i;
 80229ee:	8c3b      	ldrh	r3, [r7, #32]
 80229f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80229f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80229f6:	4973      	ldr	r1, [pc, #460]	; (8022bc4 <etharp_find_entry+0x2d4>)
 80229f8:	4613      	mov	r3, r2
 80229fa:	005b      	lsls	r3, r3, #1
 80229fc:	4413      	add	r3, r2
 80229fe:	00db      	lsls	r3, r3, #3
 8022a00:	440b      	add	r3, r1
 8022a02:	3312      	adds	r3, #18
 8022a04:	881b      	ldrh	r3, [r3, #0]
 8022a06:	83bb      	strh	r3, [r7, #28]
 8022a08:	e037      	b.n	8022a7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8022a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022a0e:	496d      	ldr	r1, [pc, #436]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022a10:	4613      	mov	r3, r2
 8022a12:	005b      	lsls	r3, r3, #1
 8022a14:	4413      	add	r3, r2
 8022a16:	00db      	lsls	r3, r3, #3
 8022a18:	440b      	add	r3, r1
 8022a1a:	3312      	adds	r3, #18
 8022a1c:	881b      	ldrh	r3, [r3, #0]
 8022a1e:	8b7a      	ldrh	r2, [r7, #26]
 8022a20:	429a      	cmp	r2, r3
 8022a22:	d82a      	bhi.n	8022a7a <etharp_find_entry+0x18a>
            old_pending = i;
 8022a24:	8c3b      	ldrh	r3, [r7, #32]
 8022a26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8022a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022a2c:	4965      	ldr	r1, [pc, #404]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022a2e:	4613      	mov	r3, r2
 8022a30:	005b      	lsls	r3, r3, #1
 8022a32:	4413      	add	r3, r2
 8022a34:	00db      	lsls	r3, r3, #3
 8022a36:	440b      	add	r3, r1
 8022a38:	3312      	adds	r3, #18
 8022a3a:	881b      	ldrh	r3, [r3, #0]
 8022a3c:	837b      	strh	r3, [r7, #26]
 8022a3e:	e01c      	b.n	8022a7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8022a40:	7dfb      	ldrb	r3, [r7, #23]
 8022a42:	2b01      	cmp	r3, #1
 8022a44:	d919      	bls.n	8022a7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8022a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022a4a:	495e      	ldr	r1, [pc, #376]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022a4c:	4613      	mov	r3, r2
 8022a4e:	005b      	lsls	r3, r3, #1
 8022a50:	4413      	add	r3, r2
 8022a52:	00db      	lsls	r3, r3, #3
 8022a54:	440b      	add	r3, r1
 8022a56:	3312      	adds	r3, #18
 8022a58:	881b      	ldrh	r3, [r3, #0]
 8022a5a:	8b3a      	ldrh	r2, [r7, #24]
 8022a5c:	429a      	cmp	r2, r3
 8022a5e:	d80c      	bhi.n	8022a7a <etharp_find_entry+0x18a>
            old_stable = i;
 8022a60:	8c3b      	ldrh	r3, [r7, #32]
 8022a62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8022a64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022a68:	4956      	ldr	r1, [pc, #344]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022a6a:	4613      	mov	r3, r2
 8022a6c:	005b      	lsls	r3, r3, #1
 8022a6e:	4413      	add	r3, r2
 8022a70:	00db      	lsls	r3, r3, #3
 8022a72:	440b      	add	r3, r1
 8022a74:	3312      	adds	r3, #18
 8022a76:	881b      	ldrh	r3, [r3, #0]
 8022a78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022a7a:	8c3b      	ldrh	r3, [r7, #32]
 8022a7c:	3301      	adds	r3, #1
 8022a7e:	b29b      	uxth	r3, r3
 8022a80:	843b      	strh	r3, [r7, #32]
 8022a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022a86:	2b09      	cmp	r3, #9
 8022a88:	f77f af4c 	ble.w	8022924 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8022a8c:	7afb      	ldrb	r3, [r7, #11]
 8022a8e:	f003 0302 	and.w	r3, r3, #2
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d108      	bne.n	8022aa8 <etharp_find_entry+0x1b8>
 8022a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022a9a:	2b0a      	cmp	r3, #10
 8022a9c:	d107      	bne.n	8022aae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8022a9e:	7afb      	ldrb	r3, [r7, #11]
 8022aa0:	f003 0301 	and.w	r3, r3, #1
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d102      	bne.n	8022aae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8022aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8022aac:	e085      	b.n	8022bba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8022aae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022ab2:	2b09      	cmp	r3, #9
 8022ab4:	dc02      	bgt.n	8022abc <etharp_find_entry+0x1cc>
    i = empty;
 8022ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022ab8:	843b      	strh	r3, [r7, #32]
 8022aba:	e039      	b.n	8022b30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8022abc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8022ac0:	2b09      	cmp	r3, #9
 8022ac2:	dc14      	bgt.n	8022aee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8022ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022ac6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8022ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022acc:	493d      	ldr	r1, [pc, #244]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022ace:	4613      	mov	r3, r2
 8022ad0:	005b      	lsls	r3, r3, #1
 8022ad2:	4413      	add	r3, r2
 8022ad4:	00db      	lsls	r3, r3, #3
 8022ad6:	440b      	add	r3, r1
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	d018      	beq.n	8022b10 <etharp_find_entry+0x220>
 8022ade:	4b3a      	ldr	r3, [pc, #232]	; (8022bc8 <etharp_find_entry+0x2d8>)
 8022ae0:	f240 126d 	movw	r2, #365	; 0x16d
 8022ae4:	493b      	ldr	r1, [pc, #236]	; (8022bd4 <etharp_find_entry+0x2e4>)
 8022ae6:	483a      	ldr	r0, [pc, #232]	; (8022bd0 <etharp_find_entry+0x2e0>)
 8022ae8:	f003 fa3c 	bl	8025f64 <iprintf>
 8022aec:	e010      	b.n	8022b10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8022aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8022af2:	2b09      	cmp	r3, #9
 8022af4:	dc02      	bgt.n	8022afc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8022af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022af8:	843b      	strh	r3, [r7, #32]
 8022afa:	e009      	b.n	8022b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8022afc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8022b00:	2b09      	cmp	r3, #9
 8022b02:	dc02      	bgt.n	8022b0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8022b04:	8bfb      	ldrh	r3, [r7, #30]
 8022b06:	843b      	strh	r3, [r7, #32]
 8022b08:	e002      	b.n	8022b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8022b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8022b0e:	e054      	b.n	8022bba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022b14:	2b09      	cmp	r3, #9
 8022b16:	dd06      	ble.n	8022b26 <etharp_find_entry+0x236>
 8022b18:	4b2b      	ldr	r3, [pc, #172]	; (8022bc8 <etharp_find_entry+0x2d8>)
 8022b1a:	f240 127f 	movw	r2, #383	; 0x17f
 8022b1e:	492e      	ldr	r1, [pc, #184]	; (8022bd8 <etharp_find_entry+0x2e8>)
 8022b20:	482b      	ldr	r0, [pc, #172]	; (8022bd0 <etharp_find_entry+0x2e0>)
 8022b22:	f003 fa1f 	bl	8025f64 <iprintf>
    etharp_free_entry(i);
 8022b26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	f7ff fe06 	bl	802273c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022b30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022b34:	2b09      	cmp	r3, #9
 8022b36:	dd06      	ble.n	8022b46 <etharp_find_entry+0x256>
 8022b38:	4b23      	ldr	r3, [pc, #140]	; (8022bc8 <etharp_find_entry+0x2d8>)
 8022b3a:	f240 1283 	movw	r2, #387	; 0x183
 8022b3e:	4926      	ldr	r1, [pc, #152]	; (8022bd8 <etharp_find_entry+0x2e8>)
 8022b40:	4823      	ldr	r0, [pc, #140]	; (8022bd0 <etharp_find_entry+0x2e0>)
 8022b42:	f003 fa0f 	bl	8025f64 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8022b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022b4a:	491e      	ldr	r1, [pc, #120]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022b4c:	4613      	mov	r3, r2
 8022b4e:	005b      	lsls	r3, r3, #1
 8022b50:	4413      	add	r3, r2
 8022b52:	00db      	lsls	r3, r3, #3
 8022b54:	440b      	add	r3, r1
 8022b56:	3314      	adds	r3, #20
 8022b58:	781b      	ldrb	r3, [r3, #0]
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d006      	beq.n	8022b6c <etharp_find_entry+0x27c>
 8022b5e:	4b1a      	ldr	r3, [pc, #104]	; (8022bc8 <etharp_find_entry+0x2d8>)
 8022b60:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8022b64:	491d      	ldr	r1, [pc, #116]	; (8022bdc <etharp_find_entry+0x2ec>)
 8022b66:	481a      	ldr	r0, [pc, #104]	; (8022bd0 <etharp_find_entry+0x2e0>)
 8022b68:	f003 f9fc 	bl	8025f64 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d00b      	beq.n	8022b8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8022b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022b76:	68fb      	ldr	r3, [r7, #12]
 8022b78:	6819      	ldr	r1, [r3, #0]
 8022b7a:	4812      	ldr	r0, [pc, #72]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022b7c:	4613      	mov	r3, r2
 8022b7e:	005b      	lsls	r3, r3, #1
 8022b80:	4413      	add	r3, r2
 8022b82:	00db      	lsls	r3, r3, #3
 8022b84:	4403      	add	r3, r0
 8022b86:	3304      	adds	r3, #4
 8022b88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8022b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022b8e:	490d      	ldr	r1, [pc, #52]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022b90:	4613      	mov	r3, r2
 8022b92:	005b      	lsls	r3, r3, #1
 8022b94:	4413      	add	r3, r2
 8022b96:	00db      	lsls	r3, r3, #3
 8022b98:	440b      	add	r3, r1
 8022b9a:	3312      	adds	r3, #18
 8022b9c:	2200      	movs	r2, #0
 8022b9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8022ba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022ba4:	4907      	ldr	r1, [pc, #28]	; (8022bc4 <etharp_find_entry+0x2d4>)
 8022ba6:	4613      	mov	r3, r2
 8022ba8:	005b      	lsls	r3, r3, #1
 8022baa:	4413      	add	r3, r2
 8022bac:	00db      	lsls	r3, r3, #3
 8022bae:	440b      	add	r3, r1
 8022bb0:	3308      	adds	r3, #8
 8022bb2:	687a      	ldr	r2, [r7, #4]
 8022bb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8022bb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8022bba:	4618      	mov	r0, r3
 8022bbc:	3728      	adds	r7, #40	; 0x28
 8022bbe:	46bd      	mov	sp, r7
 8022bc0:	bd80      	pop	{r7, pc}
 8022bc2:	bf00      	nop
 8022bc4:	2400d090 	.word	0x2400d090
 8022bc8:	080296a8 	.word	0x080296a8
 8022bcc:	080296e0 	.word	0x080296e0
 8022bd0:	08029720 	.word	0x08029720
 8022bd4:	08029748 	.word	0x08029748
 8022bd8:	08029760 	.word	0x08029760
 8022bdc:	08029774 	.word	0x08029774

08022be0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8022be0:	b580      	push	{r7, lr}
 8022be2:	b088      	sub	sp, #32
 8022be4:	af02      	add	r7, sp, #8
 8022be6:	60f8      	str	r0, [r7, #12]
 8022be8:	60b9      	str	r1, [r7, #8]
 8022bea:	607a      	str	r2, [r7, #4]
 8022bec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8022bee:	68fb      	ldr	r3, [r7, #12]
 8022bf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022bf4:	2b06      	cmp	r3, #6
 8022bf6:	d006      	beq.n	8022c06 <etharp_update_arp_entry+0x26>
 8022bf8:	4b48      	ldr	r3, [pc, #288]	; (8022d1c <etharp_update_arp_entry+0x13c>)
 8022bfa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8022bfe:	4948      	ldr	r1, [pc, #288]	; (8022d20 <etharp_update_arp_entry+0x140>)
 8022c00:	4848      	ldr	r0, [pc, #288]	; (8022d24 <etharp_update_arp_entry+0x144>)
 8022c02:	f003 f9af 	bl	8025f64 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8022c06:	68bb      	ldr	r3, [r7, #8]
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	d012      	beq.n	8022c32 <etharp_update_arp_entry+0x52>
 8022c0c:	68bb      	ldr	r3, [r7, #8]
 8022c0e:	681b      	ldr	r3, [r3, #0]
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	d00e      	beq.n	8022c32 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8022c14:	68bb      	ldr	r3, [r7, #8]
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	68f9      	ldr	r1, [r7, #12]
 8022c1a:	4618      	mov	r0, r3
 8022c1c:	f001 f946 	bl	8023eac <ip4_addr_isbroadcast_u32>
 8022c20:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8022c22:	2b00      	cmp	r3, #0
 8022c24:	d105      	bne.n	8022c32 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8022c26:	68bb      	ldr	r3, [r7, #8]
 8022c28:	681b      	ldr	r3, [r3, #0]
 8022c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8022c2e:	2be0      	cmp	r3, #224	; 0xe0
 8022c30:	d102      	bne.n	8022c38 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022c32:	f06f 030f 	mvn.w	r3, #15
 8022c36:	e06c      	b.n	8022d12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8022c38:	78fb      	ldrb	r3, [r7, #3]
 8022c3a:	68fa      	ldr	r2, [r7, #12]
 8022c3c:	4619      	mov	r1, r3
 8022c3e:	68b8      	ldr	r0, [r7, #8]
 8022c40:	f7ff fe56 	bl	80228f0 <etharp_find_entry>
 8022c44:	4603      	mov	r3, r0
 8022c46:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8022c48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	da02      	bge.n	8022c56 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8022c50:	8afb      	ldrh	r3, [r7, #22]
 8022c52:	b25b      	sxtb	r3, r3
 8022c54:	e05d      	b.n	8022d12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8022c56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022c5a:	4933      	ldr	r1, [pc, #204]	; (8022d28 <etharp_update_arp_entry+0x148>)
 8022c5c:	4613      	mov	r3, r2
 8022c5e:	005b      	lsls	r3, r3, #1
 8022c60:	4413      	add	r3, r2
 8022c62:	00db      	lsls	r3, r3, #3
 8022c64:	440b      	add	r3, r1
 8022c66:	3314      	adds	r3, #20
 8022c68:	2202      	movs	r2, #2
 8022c6a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8022c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022c70:	492d      	ldr	r1, [pc, #180]	; (8022d28 <etharp_update_arp_entry+0x148>)
 8022c72:	4613      	mov	r3, r2
 8022c74:	005b      	lsls	r3, r3, #1
 8022c76:	4413      	add	r3, r2
 8022c78:	00db      	lsls	r3, r3, #3
 8022c7a:	440b      	add	r3, r1
 8022c7c:	3308      	adds	r3, #8
 8022c7e:	68fa      	ldr	r2, [r7, #12]
 8022c80:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022c82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022c86:	4613      	mov	r3, r2
 8022c88:	005b      	lsls	r3, r3, #1
 8022c8a:	4413      	add	r3, r2
 8022c8c:	00db      	lsls	r3, r3, #3
 8022c8e:	3308      	adds	r3, #8
 8022c90:	4a25      	ldr	r2, [pc, #148]	; (8022d28 <etharp_update_arp_entry+0x148>)
 8022c92:	4413      	add	r3, r2
 8022c94:	3304      	adds	r3, #4
 8022c96:	2206      	movs	r2, #6
 8022c98:	6879      	ldr	r1, [r7, #4]
 8022c9a:	4618      	mov	r0, r3
 8022c9c:	f003 f856 	bl	8025d4c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8022ca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022ca4:	4920      	ldr	r1, [pc, #128]	; (8022d28 <etharp_update_arp_entry+0x148>)
 8022ca6:	4613      	mov	r3, r2
 8022ca8:	005b      	lsls	r3, r3, #1
 8022caa:	4413      	add	r3, r2
 8022cac:	00db      	lsls	r3, r3, #3
 8022cae:	440b      	add	r3, r1
 8022cb0:	3312      	adds	r3, #18
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8022cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022cba:	491b      	ldr	r1, [pc, #108]	; (8022d28 <etharp_update_arp_entry+0x148>)
 8022cbc:	4613      	mov	r3, r2
 8022cbe:	005b      	lsls	r3, r3, #1
 8022cc0:	4413      	add	r3, r2
 8022cc2:	00db      	lsls	r3, r3, #3
 8022cc4:	440b      	add	r3, r1
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d021      	beq.n	8022d10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8022ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022cd0:	4915      	ldr	r1, [pc, #84]	; (8022d28 <etharp_update_arp_entry+0x148>)
 8022cd2:	4613      	mov	r3, r2
 8022cd4:	005b      	lsls	r3, r3, #1
 8022cd6:	4413      	add	r3, r2
 8022cd8:	00db      	lsls	r3, r3, #3
 8022cda:	440b      	add	r3, r1
 8022cdc:	681b      	ldr	r3, [r3, #0]
 8022cde:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8022ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022ce4:	4910      	ldr	r1, [pc, #64]	; (8022d28 <etharp_update_arp_entry+0x148>)
 8022ce6:	4613      	mov	r3, r2
 8022ce8:	005b      	lsls	r3, r3, #1
 8022cea:	4413      	add	r3, r2
 8022cec:	00db      	lsls	r3, r3, #3
 8022cee:	440b      	add	r3, r1
 8022cf0:	2200      	movs	r2, #0
 8022cf2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8022cf4:	68fb      	ldr	r3, [r7, #12]
 8022cf6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8022cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022cfe:	9300      	str	r3, [sp, #0]
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	6939      	ldr	r1, [r7, #16]
 8022d04:	68f8      	ldr	r0, [r7, #12]
 8022d06:	f001 ffdf 	bl	8024cc8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8022d0a:	6938      	ldr	r0, [r7, #16]
 8022d0c:	f7f7 fc46 	bl	801a59c <pbuf_free>
  }
  return ERR_OK;
 8022d10:	2300      	movs	r3, #0
}
 8022d12:	4618      	mov	r0, r3
 8022d14:	3718      	adds	r7, #24
 8022d16:	46bd      	mov	sp, r7
 8022d18:	bd80      	pop	{r7, pc}
 8022d1a:	bf00      	nop
 8022d1c:	080296a8 	.word	0x080296a8
 8022d20:	080297a0 	.word	0x080297a0
 8022d24:	08029720 	.word	0x08029720
 8022d28:	2400d090 	.word	0x2400d090

08022d2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8022d2c:	b580      	push	{r7, lr}
 8022d2e:	b084      	sub	sp, #16
 8022d30:	af00      	add	r7, sp, #0
 8022d32:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022d34:	2300      	movs	r3, #0
 8022d36:	60fb      	str	r3, [r7, #12]
 8022d38:	e01e      	b.n	8022d78 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8022d3a:	4913      	ldr	r1, [pc, #76]	; (8022d88 <etharp_cleanup_netif+0x5c>)
 8022d3c:	68fa      	ldr	r2, [r7, #12]
 8022d3e:	4613      	mov	r3, r2
 8022d40:	005b      	lsls	r3, r3, #1
 8022d42:	4413      	add	r3, r2
 8022d44:	00db      	lsls	r3, r3, #3
 8022d46:	440b      	add	r3, r1
 8022d48:	3314      	adds	r3, #20
 8022d4a:	781b      	ldrb	r3, [r3, #0]
 8022d4c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8022d4e:	7afb      	ldrb	r3, [r7, #11]
 8022d50:	2b00      	cmp	r3, #0
 8022d52:	d00e      	beq.n	8022d72 <etharp_cleanup_netif+0x46>
 8022d54:	490c      	ldr	r1, [pc, #48]	; (8022d88 <etharp_cleanup_netif+0x5c>)
 8022d56:	68fa      	ldr	r2, [r7, #12]
 8022d58:	4613      	mov	r3, r2
 8022d5a:	005b      	lsls	r3, r3, #1
 8022d5c:	4413      	add	r3, r2
 8022d5e:	00db      	lsls	r3, r3, #3
 8022d60:	440b      	add	r3, r1
 8022d62:	3308      	adds	r3, #8
 8022d64:	681b      	ldr	r3, [r3, #0]
 8022d66:	687a      	ldr	r2, [r7, #4]
 8022d68:	429a      	cmp	r2, r3
 8022d6a:	d102      	bne.n	8022d72 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8022d6c:	68f8      	ldr	r0, [r7, #12]
 8022d6e:	f7ff fce5 	bl	802273c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022d72:	68fb      	ldr	r3, [r7, #12]
 8022d74:	3301      	adds	r3, #1
 8022d76:	60fb      	str	r3, [r7, #12]
 8022d78:	68fb      	ldr	r3, [r7, #12]
 8022d7a:	2b09      	cmp	r3, #9
 8022d7c:	dddd      	ble.n	8022d3a <etharp_cleanup_netif+0xe>
    }
  }
}
 8022d7e:	bf00      	nop
 8022d80:	bf00      	nop
 8022d82:	3710      	adds	r7, #16
 8022d84:	46bd      	mov	sp, r7
 8022d86:	bd80      	pop	{r7, pc}
 8022d88:	2400d090 	.word	0x2400d090

08022d8c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8022d8c:	b5b0      	push	{r4, r5, r7, lr}
 8022d8e:	b08a      	sub	sp, #40	; 0x28
 8022d90:	af04      	add	r7, sp, #16
 8022d92:	6078      	str	r0, [r7, #4]
 8022d94:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022d96:	683b      	ldr	r3, [r7, #0]
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	d107      	bne.n	8022dac <etharp_input+0x20>
 8022d9c:	4b3f      	ldr	r3, [pc, #252]	; (8022e9c <etharp_input+0x110>)
 8022d9e:	f240 228a 	movw	r2, #650	; 0x28a
 8022da2:	493f      	ldr	r1, [pc, #252]	; (8022ea0 <etharp_input+0x114>)
 8022da4:	483f      	ldr	r0, [pc, #252]	; (8022ea4 <etharp_input+0x118>)
 8022da6:	f003 f8dd 	bl	8025f64 <iprintf>
 8022daa:	e074      	b.n	8022e96 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	685b      	ldr	r3, [r3, #4]
 8022db0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022db2:	693b      	ldr	r3, [r7, #16]
 8022db4:	881b      	ldrh	r3, [r3, #0]
 8022db6:	b29b      	uxth	r3, r3
 8022db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022dbc:	d10c      	bne.n	8022dd8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8022dbe:	693b      	ldr	r3, [r7, #16]
 8022dc0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022dc2:	2b06      	cmp	r3, #6
 8022dc4:	d108      	bne.n	8022dd8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022dc6:	693b      	ldr	r3, [r7, #16]
 8022dc8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8022dca:	2b04      	cmp	r3, #4
 8022dcc:	d104      	bne.n	8022dd8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8022dce:	693b      	ldr	r3, [r7, #16]
 8022dd0:	885b      	ldrh	r3, [r3, #2]
 8022dd2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022dd4:	2b08      	cmp	r3, #8
 8022dd6:	d003      	beq.n	8022de0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8022dd8:	6878      	ldr	r0, [r7, #4]
 8022dda:	f7f7 fbdf 	bl	801a59c <pbuf_free>
    return;
 8022dde:	e05a      	b.n	8022e96 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8022de0:	693b      	ldr	r3, [r7, #16]
 8022de2:	330e      	adds	r3, #14
 8022de4:	681b      	ldr	r3, [r3, #0]
 8022de6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8022de8:	693b      	ldr	r3, [r7, #16]
 8022dea:	3318      	adds	r3, #24
 8022dec:	681b      	ldr	r3, [r3, #0]
 8022dee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022df0:	683b      	ldr	r3, [r7, #0]
 8022df2:	3304      	adds	r3, #4
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	d102      	bne.n	8022e00 <etharp_input+0x74>
    for_us = 0;
 8022dfa:	2300      	movs	r3, #0
 8022dfc:	75fb      	strb	r3, [r7, #23]
 8022dfe:	e009      	b.n	8022e14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8022e00:	68ba      	ldr	r2, [r7, #8]
 8022e02:	683b      	ldr	r3, [r7, #0]
 8022e04:	3304      	adds	r3, #4
 8022e06:	681b      	ldr	r3, [r3, #0]
 8022e08:	429a      	cmp	r2, r3
 8022e0a:	bf0c      	ite	eq
 8022e0c:	2301      	moveq	r3, #1
 8022e0e:	2300      	movne	r3, #0
 8022e10:	b2db      	uxtb	r3, r3
 8022e12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8022e14:	693b      	ldr	r3, [r7, #16]
 8022e16:	f103 0208 	add.w	r2, r3, #8
 8022e1a:	7dfb      	ldrb	r3, [r7, #23]
 8022e1c:	2b00      	cmp	r3, #0
 8022e1e:	d001      	beq.n	8022e24 <etharp_input+0x98>
 8022e20:	2301      	movs	r3, #1
 8022e22:	e000      	b.n	8022e26 <etharp_input+0x9a>
 8022e24:	2302      	movs	r3, #2
 8022e26:	f107 010c 	add.w	r1, r7, #12
 8022e2a:	6838      	ldr	r0, [r7, #0]
 8022e2c:	f7ff fed8 	bl	8022be0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8022e30:	693b      	ldr	r3, [r7, #16]
 8022e32:	88db      	ldrh	r3, [r3, #6]
 8022e34:	b29b      	uxth	r3, r3
 8022e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022e3a:	d003      	beq.n	8022e44 <etharp_input+0xb8>
 8022e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022e40:	d01e      	beq.n	8022e80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8022e42:	e025      	b.n	8022e90 <etharp_input+0x104>
      if (for_us) {
 8022e44:	7dfb      	ldrb	r3, [r7, #23]
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	d021      	beq.n	8022e8e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8022e4a:	683b      	ldr	r3, [r7, #0]
 8022e4c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8022e50:	693b      	ldr	r3, [r7, #16]
 8022e52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8022e56:	683b      	ldr	r3, [r7, #0]
 8022e58:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8022e5c:	683b      	ldr	r3, [r7, #0]
 8022e5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8022e60:	693a      	ldr	r2, [r7, #16]
 8022e62:	3208      	adds	r2, #8
        etharp_raw(netif,
 8022e64:	2102      	movs	r1, #2
 8022e66:	9103      	str	r1, [sp, #12]
 8022e68:	f107 010c 	add.w	r1, r7, #12
 8022e6c:	9102      	str	r1, [sp, #8]
 8022e6e:	9201      	str	r2, [sp, #4]
 8022e70:	9300      	str	r3, [sp, #0]
 8022e72:	462b      	mov	r3, r5
 8022e74:	4622      	mov	r2, r4
 8022e76:	4601      	mov	r1, r0
 8022e78:	6838      	ldr	r0, [r7, #0]
 8022e7a:	f000 faef 	bl	802345c <etharp_raw>
      break;
 8022e7e:	e006      	b.n	8022e8e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8022e80:	f107 030c 	add.w	r3, r7, #12
 8022e84:	4619      	mov	r1, r3
 8022e86:	6838      	ldr	r0, [r7, #0]
 8022e88:	f7fe f9fc 	bl	8021284 <dhcp_arp_reply>
      break;
 8022e8c:	e000      	b.n	8022e90 <etharp_input+0x104>
      break;
 8022e8e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8022e90:	6878      	ldr	r0, [r7, #4]
 8022e92:	f7f7 fb83 	bl	801a59c <pbuf_free>
}
 8022e96:	3718      	adds	r7, #24
 8022e98:	46bd      	mov	sp, r7
 8022e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8022e9c:	080296a8 	.word	0x080296a8
 8022ea0:	080297f8 	.word	0x080297f8
 8022ea4:	08029720 	.word	0x08029720

08022ea8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b086      	sub	sp, #24
 8022eac:	af02      	add	r7, sp, #8
 8022eae:	60f8      	str	r0, [r7, #12]
 8022eb0:	60b9      	str	r1, [r7, #8]
 8022eb2:	4613      	mov	r3, r2
 8022eb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022eb6:	79fa      	ldrb	r2, [r7, #7]
 8022eb8:	4944      	ldr	r1, [pc, #272]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022eba:	4613      	mov	r3, r2
 8022ebc:	005b      	lsls	r3, r3, #1
 8022ebe:	4413      	add	r3, r2
 8022ec0:	00db      	lsls	r3, r3, #3
 8022ec2:	440b      	add	r3, r1
 8022ec4:	3314      	adds	r3, #20
 8022ec6:	781b      	ldrb	r3, [r3, #0]
 8022ec8:	2b01      	cmp	r3, #1
 8022eca:	d806      	bhi.n	8022eda <etharp_output_to_arp_index+0x32>
 8022ecc:	4b40      	ldr	r3, [pc, #256]	; (8022fd0 <etharp_output_to_arp_index+0x128>)
 8022ece:	f240 22ee 	movw	r2, #750	; 0x2ee
 8022ed2:	4940      	ldr	r1, [pc, #256]	; (8022fd4 <etharp_output_to_arp_index+0x12c>)
 8022ed4:	4840      	ldr	r0, [pc, #256]	; (8022fd8 <etharp_output_to_arp_index+0x130>)
 8022ed6:	f003 f845 	bl	8025f64 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8022eda:	79fa      	ldrb	r2, [r7, #7]
 8022edc:	493b      	ldr	r1, [pc, #236]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022ede:	4613      	mov	r3, r2
 8022ee0:	005b      	lsls	r3, r3, #1
 8022ee2:	4413      	add	r3, r2
 8022ee4:	00db      	lsls	r3, r3, #3
 8022ee6:	440b      	add	r3, r1
 8022ee8:	3314      	adds	r3, #20
 8022eea:	781b      	ldrb	r3, [r3, #0]
 8022eec:	2b02      	cmp	r3, #2
 8022eee:	d153      	bne.n	8022f98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8022ef0:	79fa      	ldrb	r2, [r7, #7]
 8022ef2:	4936      	ldr	r1, [pc, #216]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022ef4:	4613      	mov	r3, r2
 8022ef6:	005b      	lsls	r3, r3, #1
 8022ef8:	4413      	add	r3, r2
 8022efa:	00db      	lsls	r3, r3, #3
 8022efc:	440b      	add	r3, r1
 8022efe:	3312      	adds	r3, #18
 8022f00:	881b      	ldrh	r3, [r3, #0]
 8022f02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8022f06:	d919      	bls.n	8022f3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8022f08:	79fa      	ldrb	r2, [r7, #7]
 8022f0a:	4613      	mov	r3, r2
 8022f0c:	005b      	lsls	r3, r3, #1
 8022f0e:	4413      	add	r3, r2
 8022f10:	00db      	lsls	r3, r3, #3
 8022f12:	4a2e      	ldr	r2, [pc, #184]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022f14:	4413      	add	r3, r2
 8022f16:	3304      	adds	r3, #4
 8022f18:	4619      	mov	r1, r3
 8022f1a:	68f8      	ldr	r0, [r7, #12]
 8022f1c:	f000 fb4c 	bl	80235b8 <etharp_request>
 8022f20:	4603      	mov	r3, r0
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	d138      	bne.n	8022f98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8022f26:	79fa      	ldrb	r2, [r7, #7]
 8022f28:	4928      	ldr	r1, [pc, #160]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022f2a:	4613      	mov	r3, r2
 8022f2c:	005b      	lsls	r3, r3, #1
 8022f2e:	4413      	add	r3, r2
 8022f30:	00db      	lsls	r3, r3, #3
 8022f32:	440b      	add	r3, r1
 8022f34:	3314      	adds	r3, #20
 8022f36:	2203      	movs	r2, #3
 8022f38:	701a      	strb	r2, [r3, #0]
 8022f3a:	e02d      	b.n	8022f98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8022f3c:	79fa      	ldrb	r2, [r7, #7]
 8022f3e:	4923      	ldr	r1, [pc, #140]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022f40:	4613      	mov	r3, r2
 8022f42:	005b      	lsls	r3, r3, #1
 8022f44:	4413      	add	r3, r2
 8022f46:	00db      	lsls	r3, r3, #3
 8022f48:	440b      	add	r3, r1
 8022f4a:	3312      	adds	r3, #18
 8022f4c:	881b      	ldrh	r3, [r3, #0]
 8022f4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8022f52:	d321      	bcc.n	8022f98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022f54:	79fa      	ldrb	r2, [r7, #7]
 8022f56:	4613      	mov	r3, r2
 8022f58:	005b      	lsls	r3, r3, #1
 8022f5a:	4413      	add	r3, r2
 8022f5c:	00db      	lsls	r3, r3, #3
 8022f5e:	4a1b      	ldr	r2, [pc, #108]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022f60:	4413      	add	r3, r2
 8022f62:	1d19      	adds	r1, r3, #4
 8022f64:	79fa      	ldrb	r2, [r7, #7]
 8022f66:	4613      	mov	r3, r2
 8022f68:	005b      	lsls	r3, r3, #1
 8022f6a:	4413      	add	r3, r2
 8022f6c:	00db      	lsls	r3, r3, #3
 8022f6e:	3308      	adds	r3, #8
 8022f70:	4a16      	ldr	r2, [pc, #88]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022f72:	4413      	add	r3, r2
 8022f74:	3304      	adds	r3, #4
 8022f76:	461a      	mov	r2, r3
 8022f78:	68f8      	ldr	r0, [r7, #12]
 8022f7a:	f000 fafb 	bl	8023574 <etharp_request_dst>
 8022f7e:	4603      	mov	r3, r0
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	d109      	bne.n	8022f98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8022f84:	79fa      	ldrb	r2, [r7, #7]
 8022f86:	4911      	ldr	r1, [pc, #68]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022f88:	4613      	mov	r3, r2
 8022f8a:	005b      	lsls	r3, r3, #1
 8022f8c:	4413      	add	r3, r2
 8022f8e:	00db      	lsls	r3, r3, #3
 8022f90:	440b      	add	r3, r1
 8022f92:	3314      	adds	r3, #20
 8022f94:	2203      	movs	r2, #3
 8022f96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8022f98:	68fb      	ldr	r3, [r7, #12]
 8022f9a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8022f9e:	79fa      	ldrb	r2, [r7, #7]
 8022fa0:	4613      	mov	r3, r2
 8022fa2:	005b      	lsls	r3, r3, #1
 8022fa4:	4413      	add	r3, r2
 8022fa6:	00db      	lsls	r3, r3, #3
 8022fa8:	3308      	adds	r3, #8
 8022faa:	4a08      	ldr	r2, [pc, #32]	; (8022fcc <etharp_output_to_arp_index+0x124>)
 8022fac:	4413      	add	r3, r2
 8022fae:	3304      	adds	r3, #4
 8022fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022fb4:	9200      	str	r2, [sp, #0]
 8022fb6:	460a      	mov	r2, r1
 8022fb8:	68b9      	ldr	r1, [r7, #8]
 8022fba:	68f8      	ldr	r0, [r7, #12]
 8022fbc:	f001 fe84 	bl	8024cc8 <ethernet_output>
 8022fc0:	4603      	mov	r3, r0
}
 8022fc2:	4618      	mov	r0, r3
 8022fc4:	3710      	adds	r7, #16
 8022fc6:	46bd      	mov	sp, r7
 8022fc8:	bd80      	pop	{r7, pc}
 8022fca:	bf00      	nop
 8022fcc:	2400d090 	.word	0x2400d090
 8022fd0:	080296a8 	.word	0x080296a8
 8022fd4:	08029818 	.word	0x08029818
 8022fd8:	08029720 	.word	0x08029720

08022fdc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8022fdc:	b580      	push	{r7, lr}
 8022fde:	b08a      	sub	sp, #40	; 0x28
 8022fe0:	af02      	add	r7, sp, #8
 8022fe2:	60f8      	str	r0, [r7, #12]
 8022fe4:	60b9      	str	r1, [r7, #8]
 8022fe6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022fec:	68fb      	ldr	r3, [r7, #12]
 8022fee:	2b00      	cmp	r3, #0
 8022ff0:	d106      	bne.n	8023000 <etharp_output+0x24>
 8022ff2:	4b73      	ldr	r3, [pc, #460]	; (80231c0 <etharp_output+0x1e4>)
 8022ff4:	f240 321e 	movw	r2, #798	; 0x31e
 8022ff8:	4972      	ldr	r1, [pc, #456]	; (80231c4 <etharp_output+0x1e8>)
 8022ffa:	4873      	ldr	r0, [pc, #460]	; (80231c8 <etharp_output+0x1ec>)
 8022ffc:	f002 ffb2 	bl	8025f64 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023000:	68bb      	ldr	r3, [r7, #8]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d106      	bne.n	8023014 <etharp_output+0x38>
 8023006:	4b6e      	ldr	r3, [pc, #440]	; (80231c0 <etharp_output+0x1e4>)
 8023008:	f240 321f 	movw	r2, #799	; 0x31f
 802300c:	496f      	ldr	r1, [pc, #444]	; (80231cc <etharp_output+0x1f0>)
 802300e:	486e      	ldr	r0, [pc, #440]	; (80231c8 <etharp_output+0x1ec>)
 8023010:	f002 ffa8 	bl	8025f64 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023014:	687b      	ldr	r3, [r7, #4]
 8023016:	2b00      	cmp	r3, #0
 8023018:	d106      	bne.n	8023028 <etharp_output+0x4c>
 802301a:	4b69      	ldr	r3, [pc, #420]	; (80231c0 <etharp_output+0x1e4>)
 802301c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8023020:	496b      	ldr	r1, [pc, #428]	; (80231d0 <etharp_output+0x1f4>)
 8023022:	4869      	ldr	r0, [pc, #420]	; (80231c8 <etharp_output+0x1ec>)
 8023024:	f002 ff9e 	bl	8025f64 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	681b      	ldr	r3, [r3, #0]
 802302c:	68f9      	ldr	r1, [r7, #12]
 802302e:	4618      	mov	r0, r3
 8023030:	f000 ff3c 	bl	8023eac <ip4_addr_isbroadcast_u32>
 8023034:	4603      	mov	r3, r0
 8023036:	2b00      	cmp	r3, #0
 8023038:	d002      	beq.n	8023040 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802303a:	4b66      	ldr	r3, [pc, #408]	; (80231d4 <etharp_output+0x1f8>)
 802303c:	61fb      	str	r3, [r7, #28]
 802303e:	e0af      	b.n	80231a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023040:	687b      	ldr	r3, [r7, #4]
 8023042:	681b      	ldr	r3, [r3, #0]
 8023044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023048:	2be0      	cmp	r3, #224	; 0xe0
 802304a:	d118      	bne.n	802307e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802304c:	2301      	movs	r3, #1
 802304e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023050:	2300      	movs	r3, #0
 8023052:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023054:	235e      	movs	r3, #94	; 0x5e
 8023056:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	3301      	adds	r3, #1
 802305c:	781b      	ldrb	r3, [r3, #0]
 802305e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023062:	b2db      	uxtb	r3, r3
 8023064:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023066:	687b      	ldr	r3, [r7, #4]
 8023068:	3302      	adds	r3, #2
 802306a:	781b      	ldrb	r3, [r3, #0]
 802306c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	3303      	adds	r3, #3
 8023072:	781b      	ldrb	r3, [r3, #0]
 8023074:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8023076:	f107 0310 	add.w	r3, r7, #16
 802307a:	61fb      	str	r3, [r7, #28]
 802307c:	e090      	b.n	80231a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	681a      	ldr	r2, [r3, #0]
 8023082:	68fb      	ldr	r3, [r7, #12]
 8023084:	3304      	adds	r3, #4
 8023086:	681b      	ldr	r3, [r3, #0]
 8023088:	405a      	eors	r2, r3
 802308a:	68fb      	ldr	r3, [r7, #12]
 802308c:	3308      	adds	r3, #8
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	4013      	ands	r3, r2
 8023092:	2b00      	cmp	r3, #0
 8023094:	d012      	beq.n	80230bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802309c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80230a0:	4293      	cmp	r3, r2
 80230a2:	d00b      	beq.n	80230bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80230a4:	68fb      	ldr	r3, [r7, #12]
 80230a6:	330c      	adds	r3, #12
 80230a8:	681b      	ldr	r3, [r3, #0]
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	d003      	beq.n	80230b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80230ae:	68fb      	ldr	r3, [r7, #12]
 80230b0:	330c      	adds	r3, #12
 80230b2:	61bb      	str	r3, [r7, #24]
 80230b4:	e002      	b.n	80230bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80230b6:	f06f 0303 	mvn.w	r3, #3
 80230ba:	e07d      	b.n	80231b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80230bc:	4b46      	ldr	r3, [pc, #280]	; (80231d8 <etharp_output+0x1fc>)
 80230be:	781b      	ldrb	r3, [r3, #0]
 80230c0:	4619      	mov	r1, r3
 80230c2:	4a46      	ldr	r2, [pc, #280]	; (80231dc <etharp_output+0x200>)
 80230c4:	460b      	mov	r3, r1
 80230c6:	005b      	lsls	r3, r3, #1
 80230c8:	440b      	add	r3, r1
 80230ca:	00db      	lsls	r3, r3, #3
 80230cc:	4413      	add	r3, r2
 80230ce:	3314      	adds	r3, #20
 80230d0:	781b      	ldrb	r3, [r3, #0]
 80230d2:	2b01      	cmp	r3, #1
 80230d4:	d925      	bls.n	8023122 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80230d6:	4b40      	ldr	r3, [pc, #256]	; (80231d8 <etharp_output+0x1fc>)
 80230d8:	781b      	ldrb	r3, [r3, #0]
 80230da:	4619      	mov	r1, r3
 80230dc:	4a3f      	ldr	r2, [pc, #252]	; (80231dc <etharp_output+0x200>)
 80230de:	460b      	mov	r3, r1
 80230e0:	005b      	lsls	r3, r3, #1
 80230e2:	440b      	add	r3, r1
 80230e4:	00db      	lsls	r3, r3, #3
 80230e6:	4413      	add	r3, r2
 80230e8:	3308      	adds	r3, #8
 80230ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80230ec:	68fa      	ldr	r2, [r7, #12]
 80230ee:	429a      	cmp	r2, r3
 80230f0:	d117      	bne.n	8023122 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80230f2:	69bb      	ldr	r3, [r7, #24]
 80230f4:	681a      	ldr	r2, [r3, #0]
 80230f6:	4b38      	ldr	r3, [pc, #224]	; (80231d8 <etharp_output+0x1fc>)
 80230f8:	781b      	ldrb	r3, [r3, #0]
 80230fa:	4618      	mov	r0, r3
 80230fc:	4937      	ldr	r1, [pc, #220]	; (80231dc <etharp_output+0x200>)
 80230fe:	4603      	mov	r3, r0
 8023100:	005b      	lsls	r3, r3, #1
 8023102:	4403      	add	r3, r0
 8023104:	00db      	lsls	r3, r3, #3
 8023106:	440b      	add	r3, r1
 8023108:	3304      	adds	r3, #4
 802310a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 802310c:	429a      	cmp	r2, r3
 802310e:	d108      	bne.n	8023122 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8023110:	4b31      	ldr	r3, [pc, #196]	; (80231d8 <etharp_output+0x1fc>)
 8023112:	781b      	ldrb	r3, [r3, #0]
 8023114:	461a      	mov	r2, r3
 8023116:	68b9      	ldr	r1, [r7, #8]
 8023118:	68f8      	ldr	r0, [r7, #12]
 802311a:	f7ff fec5 	bl	8022ea8 <etharp_output_to_arp_index>
 802311e:	4603      	mov	r3, r0
 8023120:	e04a      	b.n	80231b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023122:	2300      	movs	r3, #0
 8023124:	75fb      	strb	r3, [r7, #23]
 8023126:	e031      	b.n	802318c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023128:	7dfa      	ldrb	r2, [r7, #23]
 802312a:	492c      	ldr	r1, [pc, #176]	; (80231dc <etharp_output+0x200>)
 802312c:	4613      	mov	r3, r2
 802312e:	005b      	lsls	r3, r3, #1
 8023130:	4413      	add	r3, r2
 8023132:	00db      	lsls	r3, r3, #3
 8023134:	440b      	add	r3, r1
 8023136:	3314      	adds	r3, #20
 8023138:	781b      	ldrb	r3, [r3, #0]
 802313a:	2b01      	cmp	r3, #1
 802313c:	d923      	bls.n	8023186 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802313e:	7dfa      	ldrb	r2, [r7, #23]
 8023140:	4926      	ldr	r1, [pc, #152]	; (80231dc <etharp_output+0x200>)
 8023142:	4613      	mov	r3, r2
 8023144:	005b      	lsls	r3, r3, #1
 8023146:	4413      	add	r3, r2
 8023148:	00db      	lsls	r3, r3, #3
 802314a:	440b      	add	r3, r1
 802314c:	3308      	adds	r3, #8
 802314e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023150:	68fa      	ldr	r2, [r7, #12]
 8023152:	429a      	cmp	r2, r3
 8023154:	d117      	bne.n	8023186 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8023156:	69bb      	ldr	r3, [r7, #24]
 8023158:	6819      	ldr	r1, [r3, #0]
 802315a:	7dfa      	ldrb	r2, [r7, #23]
 802315c:	481f      	ldr	r0, [pc, #124]	; (80231dc <etharp_output+0x200>)
 802315e:	4613      	mov	r3, r2
 8023160:	005b      	lsls	r3, r3, #1
 8023162:	4413      	add	r3, r2
 8023164:	00db      	lsls	r3, r3, #3
 8023166:	4403      	add	r3, r0
 8023168:	3304      	adds	r3, #4
 802316a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 802316c:	4299      	cmp	r1, r3
 802316e:	d10a      	bne.n	8023186 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8023170:	4a19      	ldr	r2, [pc, #100]	; (80231d8 <etharp_output+0x1fc>)
 8023172:	7dfb      	ldrb	r3, [r7, #23]
 8023174:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8023176:	7dfb      	ldrb	r3, [r7, #23]
 8023178:	461a      	mov	r2, r3
 802317a:	68b9      	ldr	r1, [r7, #8]
 802317c:	68f8      	ldr	r0, [r7, #12]
 802317e:	f7ff fe93 	bl	8022ea8 <etharp_output_to_arp_index>
 8023182:	4603      	mov	r3, r0
 8023184:	e018      	b.n	80231b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023186:	7dfb      	ldrb	r3, [r7, #23]
 8023188:	3301      	adds	r3, #1
 802318a:	75fb      	strb	r3, [r7, #23]
 802318c:	7dfb      	ldrb	r3, [r7, #23]
 802318e:	2b09      	cmp	r3, #9
 8023190:	d9ca      	bls.n	8023128 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8023192:	68ba      	ldr	r2, [r7, #8]
 8023194:	69b9      	ldr	r1, [r7, #24]
 8023196:	68f8      	ldr	r0, [r7, #12]
 8023198:	f000 f822 	bl	80231e0 <etharp_query>
 802319c:	4603      	mov	r3, r0
 802319e:	e00b      	b.n	80231b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80231a0:	68fb      	ldr	r3, [r7, #12]
 80231a2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80231a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80231aa:	9300      	str	r3, [sp, #0]
 80231ac:	69fb      	ldr	r3, [r7, #28]
 80231ae:	68b9      	ldr	r1, [r7, #8]
 80231b0:	68f8      	ldr	r0, [r7, #12]
 80231b2:	f001 fd89 	bl	8024cc8 <ethernet_output>
 80231b6:	4603      	mov	r3, r0
}
 80231b8:	4618      	mov	r0, r3
 80231ba:	3720      	adds	r7, #32
 80231bc:	46bd      	mov	sp, r7
 80231be:	bd80      	pop	{r7, pc}
 80231c0:	080296a8 	.word	0x080296a8
 80231c4:	080297f8 	.word	0x080297f8
 80231c8:	08029720 	.word	0x08029720
 80231cc:	08029848 	.word	0x08029848
 80231d0:	080297e8 	.word	0x080297e8
 80231d4:	0802a5b4 	.word	0x0802a5b4
 80231d8:	2400d180 	.word	0x2400d180
 80231dc:	2400d090 	.word	0x2400d090

080231e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80231e0:	b580      	push	{r7, lr}
 80231e2:	b08c      	sub	sp, #48	; 0x30
 80231e4:	af02      	add	r7, sp, #8
 80231e6:	60f8      	str	r0, [r7, #12]
 80231e8:	60b9      	str	r1, [r7, #8]
 80231ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80231ec:	68fb      	ldr	r3, [r7, #12]
 80231ee:	332a      	adds	r3, #42	; 0x2a
 80231f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80231f2:	23ff      	movs	r3, #255	; 0xff
 80231f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80231f8:	2300      	movs	r3, #0
 80231fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80231fc:	68bb      	ldr	r3, [r7, #8]
 80231fe:	681b      	ldr	r3, [r3, #0]
 8023200:	68f9      	ldr	r1, [r7, #12]
 8023202:	4618      	mov	r0, r3
 8023204:	f000 fe52 	bl	8023eac <ip4_addr_isbroadcast_u32>
 8023208:	4603      	mov	r3, r0
 802320a:	2b00      	cmp	r3, #0
 802320c:	d10c      	bne.n	8023228 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802320e:	68bb      	ldr	r3, [r7, #8]
 8023210:	681b      	ldr	r3, [r3, #0]
 8023212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023216:	2be0      	cmp	r3, #224	; 0xe0
 8023218:	d006      	beq.n	8023228 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802321a:	68bb      	ldr	r3, [r7, #8]
 802321c:	2b00      	cmp	r3, #0
 802321e:	d003      	beq.n	8023228 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8023220:	68bb      	ldr	r3, [r7, #8]
 8023222:	681b      	ldr	r3, [r3, #0]
 8023224:	2b00      	cmp	r3, #0
 8023226:	d102      	bne.n	802322e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8023228:	f06f 030f 	mvn.w	r3, #15
 802322c:	e101      	b.n	8023432 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802322e:	68fa      	ldr	r2, [r7, #12]
 8023230:	2101      	movs	r1, #1
 8023232:	68b8      	ldr	r0, [r7, #8]
 8023234:	f7ff fb5c 	bl	80228f0 <etharp_find_entry>
 8023238:	4603      	mov	r3, r0
 802323a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 802323c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8023240:	2b00      	cmp	r3, #0
 8023242:	da02      	bge.n	802324a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8023244:	8a7b      	ldrh	r3, [r7, #18]
 8023246:	b25b      	sxtb	r3, r3
 8023248:	e0f3      	b.n	8023432 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802324a:	8a7b      	ldrh	r3, [r7, #18]
 802324c:	2b7e      	cmp	r3, #126	; 0x7e
 802324e:	d906      	bls.n	802325e <etharp_query+0x7e>
 8023250:	4b7a      	ldr	r3, [pc, #488]	; (802343c <etharp_query+0x25c>)
 8023252:	f240 32c1 	movw	r2, #961	; 0x3c1
 8023256:	497a      	ldr	r1, [pc, #488]	; (8023440 <etharp_query+0x260>)
 8023258:	487a      	ldr	r0, [pc, #488]	; (8023444 <etharp_query+0x264>)
 802325a:	f002 fe83 	bl	8025f64 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802325e:	8a7b      	ldrh	r3, [r7, #18]
 8023260:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023262:	7c7a      	ldrb	r2, [r7, #17]
 8023264:	4978      	ldr	r1, [pc, #480]	; (8023448 <etharp_query+0x268>)
 8023266:	4613      	mov	r3, r2
 8023268:	005b      	lsls	r3, r3, #1
 802326a:	4413      	add	r3, r2
 802326c:	00db      	lsls	r3, r3, #3
 802326e:	440b      	add	r3, r1
 8023270:	3314      	adds	r3, #20
 8023272:	781b      	ldrb	r3, [r3, #0]
 8023274:	2b00      	cmp	r3, #0
 8023276:	d115      	bne.n	80232a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8023278:	2301      	movs	r3, #1
 802327a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802327c:	7c7a      	ldrb	r2, [r7, #17]
 802327e:	4972      	ldr	r1, [pc, #456]	; (8023448 <etharp_query+0x268>)
 8023280:	4613      	mov	r3, r2
 8023282:	005b      	lsls	r3, r3, #1
 8023284:	4413      	add	r3, r2
 8023286:	00db      	lsls	r3, r3, #3
 8023288:	440b      	add	r3, r1
 802328a:	3314      	adds	r3, #20
 802328c:	2201      	movs	r2, #1
 802328e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8023290:	7c7a      	ldrb	r2, [r7, #17]
 8023292:	496d      	ldr	r1, [pc, #436]	; (8023448 <etharp_query+0x268>)
 8023294:	4613      	mov	r3, r2
 8023296:	005b      	lsls	r3, r3, #1
 8023298:	4413      	add	r3, r2
 802329a:	00db      	lsls	r3, r3, #3
 802329c:	440b      	add	r3, r1
 802329e:	3308      	adds	r3, #8
 80232a0:	68fa      	ldr	r2, [r7, #12]
 80232a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80232a4:	7c7a      	ldrb	r2, [r7, #17]
 80232a6:	4968      	ldr	r1, [pc, #416]	; (8023448 <etharp_query+0x268>)
 80232a8:	4613      	mov	r3, r2
 80232aa:	005b      	lsls	r3, r3, #1
 80232ac:	4413      	add	r3, r2
 80232ae:	00db      	lsls	r3, r3, #3
 80232b0:	440b      	add	r3, r1
 80232b2:	3314      	adds	r3, #20
 80232b4:	781b      	ldrb	r3, [r3, #0]
 80232b6:	2b01      	cmp	r3, #1
 80232b8:	d011      	beq.n	80232de <etharp_query+0xfe>
 80232ba:	7c7a      	ldrb	r2, [r7, #17]
 80232bc:	4962      	ldr	r1, [pc, #392]	; (8023448 <etharp_query+0x268>)
 80232be:	4613      	mov	r3, r2
 80232c0:	005b      	lsls	r3, r3, #1
 80232c2:	4413      	add	r3, r2
 80232c4:	00db      	lsls	r3, r3, #3
 80232c6:	440b      	add	r3, r1
 80232c8:	3314      	adds	r3, #20
 80232ca:	781b      	ldrb	r3, [r3, #0]
 80232cc:	2b01      	cmp	r3, #1
 80232ce:	d806      	bhi.n	80232de <etharp_query+0xfe>
 80232d0:	4b5a      	ldr	r3, [pc, #360]	; (802343c <etharp_query+0x25c>)
 80232d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80232d6:	495d      	ldr	r1, [pc, #372]	; (802344c <etharp_query+0x26c>)
 80232d8:	485a      	ldr	r0, [pc, #360]	; (8023444 <etharp_query+0x264>)
 80232da:	f002 fe43 	bl	8025f64 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80232de:	6a3b      	ldr	r3, [r7, #32]
 80232e0:	2b00      	cmp	r3, #0
 80232e2:	d102      	bne.n	80232ea <etharp_query+0x10a>
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d10c      	bne.n	8023304 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80232ea:	68b9      	ldr	r1, [r7, #8]
 80232ec:	68f8      	ldr	r0, [r7, #12]
 80232ee:	f000 f963 	bl	80235b8 <etharp_request>
 80232f2:	4603      	mov	r3, r0
 80232f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d102      	bne.n	8023304 <etharp_query+0x124>
      return result;
 80232fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8023302:	e096      	b.n	8023432 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8023304:	687b      	ldr	r3, [r7, #4]
 8023306:	2b00      	cmp	r3, #0
 8023308:	d106      	bne.n	8023318 <etharp_query+0x138>
 802330a:	4b4c      	ldr	r3, [pc, #304]	; (802343c <etharp_query+0x25c>)
 802330c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8023310:	494f      	ldr	r1, [pc, #316]	; (8023450 <etharp_query+0x270>)
 8023312:	484c      	ldr	r0, [pc, #304]	; (8023444 <etharp_query+0x264>)
 8023314:	f002 fe26 	bl	8025f64 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023318:	7c7a      	ldrb	r2, [r7, #17]
 802331a:	494b      	ldr	r1, [pc, #300]	; (8023448 <etharp_query+0x268>)
 802331c:	4613      	mov	r3, r2
 802331e:	005b      	lsls	r3, r3, #1
 8023320:	4413      	add	r3, r2
 8023322:	00db      	lsls	r3, r3, #3
 8023324:	440b      	add	r3, r1
 8023326:	3314      	adds	r3, #20
 8023328:	781b      	ldrb	r3, [r3, #0]
 802332a:	2b01      	cmp	r3, #1
 802332c:	d917      	bls.n	802335e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802332e:	4a49      	ldr	r2, [pc, #292]	; (8023454 <etharp_query+0x274>)
 8023330:	7c7b      	ldrb	r3, [r7, #17]
 8023332:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8023334:	7c7a      	ldrb	r2, [r7, #17]
 8023336:	4613      	mov	r3, r2
 8023338:	005b      	lsls	r3, r3, #1
 802333a:	4413      	add	r3, r2
 802333c:	00db      	lsls	r3, r3, #3
 802333e:	3308      	adds	r3, #8
 8023340:	4a41      	ldr	r2, [pc, #260]	; (8023448 <etharp_query+0x268>)
 8023342:	4413      	add	r3, r2
 8023344:	3304      	adds	r3, #4
 8023346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802334a:	9200      	str	r2, [sp, #0]
 802334c:	697a      	ldr	r2, [r7, #20]
 802334e:	6879      	ldr	r1, [r7, #4]
 8023350:	68f8      	ldr	r0, [r7, #12]
 8023352:	f001 fcb9 	bl	8024cc8 <ethernet_output>
 8023356:	4603      	mov	r3, r0
 8023358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802335c:	e067      	b.n	802342e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802335e:	7c7a      	ldrb	r2, [r7, #17]
 8023360:	4939      	ldr	r1, [pc, #228]	; (8023448 <etharp_query+0x268>)
 8023362:	4613      	mov	r3, r2
 8023364:	005b      	lsls	r3, r3, #1
 8023366:	4413      	add	r3, r2
 8023368:	00db      	lsls	r3, r3, #3
 802336a:	440b      	add	r3, r1
 802336c:	3314      	adds	r3, #20
 802336e:	781b      	ldrb	r3, [r3, #0]
 8023370:	2b01      	cmp	r3, #1
 8023372:	d15c      	bne.n	802342e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8023374:	2300      	movs	r3, #0
 8023376:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8023378:	687b      	ldr	r3, [r7, #4]
 802337a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802337c:	e01c      	b.n	80233b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802337e:	69fb      	ldr	r3, [r7, #28]
 8023380:	895a      	ldrh	r2, [r3, #10]
 8023382:	69fb      	ldr	r3, [r7, #28]
 8023384:	891b      	ldrh	r3, [r3, #8]
 8023386:	429a      	cmp	r2, r3
 8023388:	d10a      	bne.n	80233a0 <etharp_query+0x1c0>
 802338a:	69fb      	ldr	r3, [r7, #28]
 802338c:	681b      	ldr	r3, [r3, #0]
 802338e:	2b00      	cmp	r3, #0
 8023390:	d006      	beq.n	80233a0 <etharp_query+0x1c0>
 8023392:	4b2a      	ldr	r3, [pc, #168]	; (802343c <etharp_query+0x25c>)
 8023394:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8023398:	492f      	ldr	r1, [pc, #188]	; (8023458 <etharp_query+0x278>)
 802339a:	482a      	ldr	r0, [pc, #168]	; (8023444 <etharp_query+0x264>)
 802339c:	f002 fde2 	bl	8025f64 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80233a0:	69fb      	ldr	r3, [r7, #28]
 80233a2:	7b1b      	ldrb	r3, [r3, #12]
 80233a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80233a8:	2b00      	cmp	r3, #0
 80233aa:	d002      	beq.n	80233b2 <etharp_query+0x1d2>
        copy_needed = 1;
 80233ac:	2301      	movs	r3, #1
 80233ae:	61bb      	str	r3, [r7, #24]
        break;
 80233b0:	e005      	b.n	80233be <etharp_query+0x1de>
      }
      p = p->next;
 80233b2:	69fb      	ldr	r3, [r7, #28]
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80233b8:	69fb      	ldr	r3, [r7, #28]
 80233ba:	2b00      	cmp	r3, #0
 80233bc:	d1df      	bne.n	802337e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80233be:	69bb      	ldr	r3, [r7, #24]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	d007      	beq.n	80233d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80233c4:	687a      	ldr	r2, [r7, #4]
 80233c6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80233ca:	200e      	movs	r0, #14
 80233cc:	f7f7 fb5e 	bl	801aa8c <pbuf_clone>
 80233d0:	61f8      	str	r0, [r7, #28]
 80233d2:	e004      	b.n	80233de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80233d8:	69f8      	ldr	r0, [r7, #28]
 80233da:	f7f7 f985 	bl	801a6e8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80233de:	69fb      	ldr	r3, [r7, #28]
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d021      	beq.n	8023428 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80233e4:	7c7a      	ldrb	r2, [r7, #17]
 80233e6:	4918      	ldr	r1, [pc, #96]	; (8023448 <etharp_query+0x268>)
 80233e8:	4613      	mov	r3, r2
 80233ea:	005b      	lsls	r3, r3, #1
 80233ec:	4413      	add	r3, r2
 80233ee:	00db      	lsls	r3, r3, #3
 80233f0:	440b      	add	r3, r1
 80233f2:	681b      	ldr	r3, [r3, #0]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	d00a      	beq.n	802340e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80233f8:	7c7a      	ldrb	r2, [r7, #17]
 80233fa:	4913      	ldr	r1, [pc, #76]	; (8023448 <etharp_query+0x268>)
 80233fc:	4613      	mov	r3, r2
 80233fe:	005b      	lsls	r3, r3, #1
 8023400:	4413      	add	r3, r2
 8023402:	00db      	lsls	r3, r3, #3
 8023404:	440b      	add	r3, r1
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	4618      	mov	r0, r3
 802340a:	f7f7 f8c7 	bl	801a59c <pbuf_free>
      }
      arp_table[i].q = p;
 802340e:	7c7a      	ldrb	r2, [r7, #17]
 8023410:	490d      	ldr	r1, [pc, #52]	; (8023448 <etharp_query+0x268>)
 8023412:	4613      	mov	r3, r2
 8023414:	005b      	lsls	r3, r3, #1
 8023416:	4413      	add	r3, r2
 8023418:	00db      	lsls	r3, r3, #3
 802341a:	440b      	add	r3, r1
 802341c:	69fa      	ldr	r2, [r7, #28]
 802341e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8023420:	2300      	movs	r3, #0
 8023422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8023426:	e002      	b.n	802342e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8023428:	23ff      	movs	r3, #255	; 0xff
 802342a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802342e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8023432:	4618      	mov	r0, r3
 8023434:	3728      	adds	r7, #40	; 0x28
 8023436:	46bd      	mov	sp, r7
 8023438:	bd80      	pop	{r7, pc}
 802343a:	bf00      	nop
 802343c:	080296a8 	.word	0x080296a8
 8023440:	08029854 	.word	0x08029854
 8023444:	08029720 	.word	0x08029720
 8023448:	2400d090 	.word	0x2400d090
 802344c:	08029864 	.word	0x08029864
 8023450:	08029848 	.word	0x08029848
 8023454:	2400d180 	.word	0x2400d180
 8023458:	0802988c 	.word	0x0802988c

0802345c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802345c:	b580      	push	{r7, lr}
 802345e:	b08a      	sub	sp, #40	; 0x28
 8023460:	af02      	add	r7, sp, #8
 8023462:	60f8      	str	r0, [r7, #12]
 8023464:	60b9      	str	r1, [r7, #8]
 8023466:	607a      	str	r2, [r7, #4]
 8023468:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802346a:	2300      	movs	r3, #0
 802346c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802346e:	68fb      	ldr	r3, [r7, #12]
 8023470:	2b00      	cmp	r3, #0
 8023472:	d106      	bne.n	8023482 <etharp_raw+0x26>
 8023474:	4b3a      	ldr	r3, [pc, #232]	; (8023560 <etharp_raw+0x104>)
 8023476:	f240 4257 	movw	r2, #1111	; 0x457
 802347a:	493a      	ldr	r1, [pc, #232]	; (8023564 <etharp_raw+0x108>)
 802347c:	483a      	ldr	r0, [pc, #232]	; (8023568 <etharp_raw+0x10c>)
 802347e:	f002 fd71 	bl	8025f64 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8023482:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023486:	211c      	movs	r1, #28
 8023488:	200e      	movs	r0, #14
 802348a:	f7f6 fda3 	bl	8019fd4 <pbuf_alloc>
 802348e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8023490:	69bb      	ldr	r3, [r7, #24]
 8023492:	2b00      	cmp	r3, #0
 8023494:	d102      	bne.n	802349c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8023496:	f04f 33ff 	mov.w	r3, #4294967295
 802349a:	e05d      	b.n	8023558 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 802349c:	69bb      	ldr	r3, [r7, #24]
 802349e:	895b      	ldrh	r3, [r3, #10]
 80234a0:	2b1b      	cmp	r3, #27
 80234a2:	d806      	bhi.n	80234b2 <etharp_raw+0x56>
 80234a4:	4b2e      	ldr	r3, [pc, #184]	; (8023560 <etharp_raw+0x104>)
 80234a6:	f240 4262 	movw	r2, #1122	; 0x462
 80234aa:	4930      	ldr	r1, [pc, #192]	; (802356c <etharp_raw+0x110>)
 80234ac:	482e      	ldr	r0, [pc, #184]	; (8023568 <etharp_raw+0x10c>)
 80234ae:	f002 fd59 	bl	8025f64 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80234b2:	69bb      	ldr	r3, [r7, #24]
 80234b4:	685b      	ldr	r3, [r3, #4]
 80234b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80234b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80234ba:	4618      	mov	r0, r3
 80234bc:	f7f5 fbb8 	bl	8018c30 <lwip_htons>
 80234c0:	4603      	mov	r3, r0
 80234c2:	461a      	mov	r2, r3
 80234c4:	697b      	ldr	r3, [r7, #20]
 80234c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80234c8:	68fb      	ldr	r3, [r7, #12]
 80234ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80234ce:	2b06      	cmp	r3, #6
 80234d0:	d006      	beq.n	80234e0 <etharp_raw+0x84>
 80234d2:	4b23      	ldr	r3, [pc, #140]	; (8023560 <etharp_raw+0x104>)
 80234d4:	f240 4269 	movw	r2, #1129	; 0x469
 80234d8:	4925      	ldr	r1, [pc, #148]	; (8023570 <etharp_raw+0x114>)
 80234da:	4823      	ldr	r0, [pc, #140]	; (8023568 <etharp_raw+0x10c>)
 80234dc:	f002 fd42 	bl	8025f64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80234e0:	697b      	ldr	r3, [r7, #20]
 80234e2:	3308      	adds	r3, #8
 80234e4:	2206      	movs	r2, #6
 80234e6:	6839      	ldr	r1, [r7, #0]
 80234e8:	4618      	mov	r0, r3
 80234ea:	f002 fc2f 	bl	8025d4c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80234ee:	697b      	ldr	r3, [r7, #20]
 80234f0:	3312      	adds	r3, #18
 80234f2:	2206      	movs	r2, #6
 80234f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80234f6:	4618      	mov	r0, r3
 80234f8:	f002 fc28 	bl	8025d4c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80234fc:	697b      	ldr	r3, [r7, #20]
 80234fe:	330e      	adds	r3, #14
 8023500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023502:	6812      	ldr	r2, [r2, #0]
 8023504:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023506:	697b      	ldr	r3, [r7, #20]
 8023508:	3318      	adds	r3, #24
 802350a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802350c:	6812      	ldr	r2, [r2, #0]
 802350e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023510:	697b      	ldr	r3, [r7, #20]
 8023512:	2200      	movs	r2, #0
 8023514:	701a      	strb	r2, [r3, #0]
 8023516:	2200      	movs	r2, #0
 8023518:	f042 0201 	orr.w	r2, r2, #1
 802351c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802351e:	697b      	ldr	r3, [r7, #20]
 8023520:	2200      	movs	r2, #0
 8023522:	f042 0208 	orr.w	r2, r2, #8
 8023526:	709a      	strb	r2, [r3, #2]
 8023528:	2200      	movs	r2, #0
 802352a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802352c:	697b      	ldr	r3, [r7, #20]
 802352e:	2206      	movs	r2, #6
 8023530:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8023532:	697b      	ldr	r3, [r7, #20]
 8023534:	2204      	movs	r2, #4
 8023536:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023538:	f640 0306 	movw	r3, #2054	; 0x806
 802353c:	9300      	str	r3, [sp, #0]
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	68ba      	ldr	r2, [r7, #8]
 8023542:	69b9      	ldr	r1, [r7, #24]
 8023544:	68f8      	ldr	r0, [r7, #12]
 8023546:	f001 fbbf 	bl	8024cc8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802354a:	69b8      	ldr	r0, [r7, #24]
 802354c:	f7f7 f826 	bl	801a59c <pbuf_free>
  p = NULL;
 8023550:	2300      	movs	r3, #0
 8023552:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8023554:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8023558:	4618      	mov	r0, r3
 802355a:	3720      	adds	r7, #32
 802355c:	46bd      	mov	sp, r7
 802355e:	bd80      	pop	{r7, pc}
 8023560:	080296a8 	.word	0x080296a8
 8023564:	080297f8 	.word	0x080297f8
 8023568:	08029720 	.word	0x08029720
 802356c:	080298a8 	.word	0x080298a8
 8023570:	080298dc 	.word	0x080298dc

08023574 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8023574:	b580      	push	{r7, lr}
 8023576:	b088      	sub	sp, #32
 8023578:	af04      	add	r7, sp, #16
 802357a:	60f8      	str	r0, [r7, #12]
 802357c:	60b9      	str	r1, [r7, #8]
 802357e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023580:	68fb      	ldr	r3, [r7, #12]
 8023582:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023586:	68fb      	ldr	r3, [r7, #12]
 8023588:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 802358c:	68fb      	ldr	r3, [r7, #12]
 802358e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023590:	2201      	movs	r2, #1
 8023592:	9203      	str	r2, [sp, #12]
 8023594:	68ba      	ldr	r2, [r7, #8]
 8023596:	9202      	str	r2, [sp, #8]
 8023598:	4a06      	ldr	r2, [pc, #24]	; (80235b4 <etharp_request_dst+0x40>)
 802359a:	9201      	str	r2, [sp, #4]
 802359c:	9300      	str	r3, [sp, #0]
 802359e:	4603      	mov	r3, r0
 80235a0:	687a      	ldr	r2, [r7, #4]
 80235a2:	68f8      	ldr	r0, [r7, #12]
 80235a4:	f7ff ff5a 	bl	802345c <etharp_raw>
 80235a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80235aa:	4618      	mov	r0, r3
 80235ac:	3710      	adds	r7, #16
 80235ae:	46bd      	mov	sp, r7
 80235b0:	bd80      	pop	{r7, pc}
 80235b2:	bf00      	nop
 80235b4:	0802a5bc 	.word	0x0802a5bc

080235b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80235b8:	b580      	push	{r7, lr}
 80235ba:	b082      	sub	sp, #8
 80235bc:	af00      	add	r7, sp, #0
 80235be:	6078      	str	r0, [r7, #4]
 80235c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80235c2:	4a05      	ldr	r2, [pc, #20]	; (80235d8 <etharp_request+0x20>)
 80235c4:	6839      	ldr	r1, [r7, #0]
 80235c6:	6878      	ldr	r0, [r7, #4]
 80235c8:	f7ff ffd4 	bl	8023574 <etharp_request_dst>
 80235cc:	4603      	mov	r3, r0
}
 80235ce:	4618      	mov	r0, r3
 80235d0:	3708      	adds	r7, #8
 80235d2:	46bd      	mov	sp, r7
 80235d4:	bd80      	pop	{r7, pc}
 80235d6:	bf00      	nop
 80235d8:	0802a5b4 	.word	0x0802a5b4

080235dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80235dc:	b580      	push	{r7, lr}
 80235de:	b08e      	sub	sp, #56	; 0x38
 80235e0:	af04      	add	r7, sp, #16
 80235e2:	6078      	str	r0, [r7, #4]
 80235e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80235e6:	4b87      	ldr	r3, [pc, #540]	; (8023804 <icmp_input+0x228>)
 80235e8:	689b      	ldr	r3, [r3, #8]
 80235ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80235ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235ee:	781b      	ldrb	r3, [r3, #0]
 80235f0:	f003 030f 	and.w	r3, r3, #15
 80235f4:	b2db      	uxtb	r3, r3
 80235f6:	009b      	lsls	r3, r3, #2
 80235f8:	b2db      	uxtb	r3, r3
 80235fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80235fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80235fe:	2b13      	cmp	r3, #19
 8023600:	f240 80e8 	bls.w	80237d4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	895b      	ldrh	r3, [r3, #10]
 8023608:	2b03      	cmp	r3, #3
 802360a:	f240 80e5 	bls.w	80237d8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	685b      	ldr	r3, [r3, #4]
 8023612:	781b      	ldrb	r3, [r3, #0]
 8023614:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8023618:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802361c:	2b00      	cmp	r3, #0
 802361e:	f000 80d2 	beq.w	80237c6 <icmp_input+0x1ea>
 8023622:	2b08      	cmp	r3, #8
 8023624:	f040 80d2 	bne.w	80237cc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8023628:	4b77      	ldr	r3, [pc, #476]	; (8023808 <icmp_input+0x22c>)
 802362a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802362c:	4b75      	ldr	r3, [pc, #468]	; (8023804 <icmp_input+0x228>)
 802362e:	695b      	ldr	r3, [r3, #20]
 8023630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023634:	2be0      	cmp	r3, #224	; 0xe0
 8023636:	f000 80d6 	beq.w	80237e6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802363a:	4b72      	ldr	r3, [pc, #456]	; (8023804 <icmp_input+0x228>)
 802363c:	695b      	ldr	r3, [r3, #20]
 802363e:	4a71      	ldr	r2, [pc, #452]	; (8023804 <icmp_input+0x228>)
 8023640:	6812      	ldr	r2, [r2, #0]
 8023642:	4611      	mov	r1, r2
 8023644:	4618      	mov	r0, r3
 8023646:	f000 fc31 	bl	8023eac <ip4_addr_isbroadcast_u32>
 802364a:	4603      	mov	r3, r0
 802364c:	2b00      	cmp	r3, #0
 802364e:	f040 80cc 	bne.w	80237ea <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8023652:	687b      	ldr	r3, [r7, #4]
 8023654:	891b      	ldrh	r3, [r3, #8]
 8023656:	2b07      	cmp	r3, #7
 8023658:	f240 80c0 	bls.w	80237dc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 802365c:	6878      	ldr	r0, [r7, #4]
 802365e:	f7f5 fb84 	bl	8018d6a <inet_chksum_pbuf>
 8023662:	4603      	mov	r3, r0
 8023664:	2b00      	cmp	r3, #0
 8023666:	d003      	beq.n	8023670 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8023668:	6878      	ldr	r0, [r7, #4]
 802366a:	f7f6 ff97 	bl	801a59c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 802366e:	e0c5      	b.n	80237fc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023670:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023672:	330e      	adds	r3, #14
 8023674:	4619      	mov	r1, r3
 8023676:	6878      	ldr	r0, [r7, #4]
 8023678:	f7f6 fefa 	bl	801a470 <pbuf_add_header>
 802367c:	4603      	mov	r3, r0
 802367e:	2b00      	cmp	r3, #0
 8023680:	d04b      	beq.n	802371a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	891a      	ldrh	r2, [r3, #8]
 8023686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023688:	4413      	add	r3, r2
 802368a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	891b      	ldrh	r3, [r3, #8]
 8023690:	8b7a      	ldrh	r2, [r7, #26]
 8023692:	429a      	cmp	r2, r3
 8023694:	f0c0 80ab 	bcc.w	80237ee <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8023698:	8b7b      	ldrh	r3, [r7, #26]
 802369a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802369e:	4619      	mov	r1, r3
 80236a0:	200e      	movs	r0, #14
 80236a2:	f7f6 fc97 	bl	8019fd4 <pbuf_alloc>
 80236a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80236a8:	697b      	ldr	r3, [r7, #20]
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	f000 80a1 	beq.w	80237f2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80236b0:	697b      	ldr	r3, [r7, #20]
 80236b2:	895b      	ldrh	r3, [r3, #10]
 80236b4:	461a      	mov	r2, r3
 80236b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80236b8:	3308      	adds	r3, #8
 80236ba:	429a      	cmp	r2, r3
 80236bc:	d203      	bcs.n	80236c6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80236be:	6978      	ldr	r0, [r7, #20]
 80236c0:	f7f6 ff6c 	bl	801a59c <pbuf_free>
          goto icmperr;
 80236c4:	e096      	b.n	80237f4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80236c6:	697b      	ldr	r3, [r7, #20]
 80236c8:	685b      	ldr	r3, [r3, #4]
 80236ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80236cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80236ce:	4618      	mov	r0, r3
 80236d0:	f002 fb3c 	bl	8025d4c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80236d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80236d6:	4619      	mov	r1, r3
 80236d8:	6978      	ldr	r0, [r7, #20]
 80236da:	f7f6 fed9 	bl	801a490 <pbuf_remove_header>
 80236de:	4603      	mov	r3, r0
 80236e0:	2b00      	cmp	r3, #0
 80236e2:	d009      	beq.n	80236f8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80236e4:	4b49      	ldr	r3, [pc, #292]	; (802380c <icmp_input+0x230>)
 80236e6:	22b6      	movs	r2, #182	; 0xb6
 80236e8:	4949      	ldr	r1, [pc, #292]	; (8023810 <icmp_input+0x234>)
 80236ea:	484a      	ldr	r0, [pc, #296]	; (8023814 <icmp_input+0x238>)
 80236ec:	f002 fc3a 	bl	8025f64 <iprintf>
          pbuf_free(r);
 80236f0:	6978      	ldr	r0, [r7, #20]
 80236f2:	f7f6 ff53 	bl	801a59c <pbuf_free>
          goto icmperr;
 80236f6:	e07d      	b.n	80237f4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80236f8:	6879      	ldr	r1, [r7, #4]
 80236fa:	6978      	ldr	r0, [r7, #20]
 80236fc:	f7f7 f882 	bl	801a804 <pbuf_copy>
 8023700:	4603      	mov	r3, r0
 8023702:	2b00      	cmp	r3, #0
 8023704:	d003      	beq.n	802370e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8023706:	6978      	ldr	r0, [r7, #20]
 8023708:	f7f6 ff48 	bl	801a59c <pbuf_free>
          goto icmperr;
 802370c:	e072      	b.n	80237f4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 802370e:	6878      	ldr	r0, [r7, #4]
 8023710:	f7f6 ff44 	bl	801a59c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8023714:	697b      	ldr	r3, [r7, #20]
 8023716:	607b      	str	r3, [r7, #4]
 8023718:	e00f      	b.n	802373a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802371a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802371c:	330e      	adds	r3, #14
 802371e:	4619      	mov	r1, r3
 8023720:	6878      	ldr	r0, [r7, #4]
 8023722:	f7f6 feb5 	bl	801a490 <pbuf_remove_header>
 8023726:	4603      	mov	r3, r0
 8023728:	2b00      	cmp	r3, #0
 802372a:	d006      	beq.n	802373a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 802372c:	4b37      	ldr	r3, [pc, #220]	; (802380c <icmp_input+0x230>)
 802372e:	22c7      	movs	r2, #199	; 0xc7
 8023730:	4939      	ldr	r1, [pc, #228]	; (8023818 <icmp_input+0x23c>)
 8023732:	4838      	ldr	r0, [pc, #224]	; (8023814 <icmp_input+0x238>)
 8023734:	f002 fc16 	bl	8025f64 <iprintf>
          goto icmperr;
 8023738:	e05c      	b.n	80237f4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	685b      	ldr	r3, [r3, #4]
 802373e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8023740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023742:	4619      	mov	r1, r3
 8023744:	6878      	ldr	r0, [r7, #4]
 8023746:	f7f6 fe93 	bl	801a470 <pbuf_add_header>
 802374a:	4603      	mov	r3, r0
 802374c:	2b00      	cmp	r3, #0
 802374e:	d13c      	bne.n	80237ca <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	685b      	ldr	r3, [r3, #4]
 8023754:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8023756:	69fb      	ldr	r3, [r7, #28]
 8023758:	681a      	ldr	r2, [r3, #0]
 802375a:	68fb      	ldr	r3, [r7, #12]
 802375c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802375e:	4b29      	ldr	r3, [pc, #164]	; (8023804 <icmp_input+0x228>)
 8023760:	691a      	ldr	r2, [r3, #16]
 8023762:	68fb      	ldr	r3, [r7, #12]
 8023764:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8023766:	693b      	ldr	r3, [r7, #16]
 8023768:	2200      	movs	r2, #0
 802376a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802376c:	693b      	ldr	r3, [r7, #16]
 802376e:	885b      	ldrh	r3, [r3, #2]
 8023770:	b29b      	uxth	r3, r3
 8023772:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8023776:	4293      	cmp	r3, r2
 8023778:	d907      	bls.n	802378a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 802377a:	693b      	ldr	r3, [r7, #16]
 802377c:	885b      	ldrh	r3, [r3, #2]
 802377e:	b29b      	uxth	r3, r3
 8023780:	3309      	adds	r3, #9
 8023782:	b29a      	uxth	r2, r3
 8023784:	693b      	ldr	r3, [r7, #16]
 8023786:	805a      	strh	r2, [r3, #2]
 8023788:	e006      	b.n	8023798 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802378a:	693b      	ldr	r3, [r7, #16]
 802378c:	885b      	ldrh	r3, [r3, #2]
 802378e:	b29b      	uxth	r3, r3
 8023790:	3308      	adds	r3, #8
 8023792:	b29a      	uxth	r2, r3
 8023794:	693b      	ldr	r3, [r7, #16]
 8023796:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8023798:	68fb      	ldr	r3, [r7, #12]
 802379a:	22ff      	movs	r2, #255	; 0xff
 802379c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802379e:	68fb      	ldr	r3, [r7, #12]
 80237a0:	2200      	movs	r2, #0
 80237a2:	729a      	strb	r2, [r3, #10]
 80237a4:	2200      	movs	r2, #0
 80237a6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80237a8:	683b      	ldr	r3, [r7, #0]
 80237aa:	9302      	str	r3, [sp, #8]
 80237ac:	2301      	movs	r3, #1
 80237ae:	9301      	str	r3, [sp, #4]
 80237b0:	2300      	movs	r3, #0
 80237b2:	9300      	str	r3, [sp, #0]
 80237b4:	23ff      	movs	r3, #255	; 0xff
 80237b6:	2200      	movs	r2, #0
 80237b8:	69f9      	ldr	r1, [r7, #28]
 80237ba:	6878      	ldr	r0, [r7, #4]
 80237bc:	f000 fa9e 	bl	8023cfc <ip4_output_if>
 80237c0:	4603      	mov	r3, r0
 80237c2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80237c4:	e001      	b.n	80237ca <icmp_input+0x1ee>
      break;
 80237c6:	bf00      	nop
 80237c8:	e000      	b.n	80237cc <icmp_input+0x1f0>
      break;
 80237ca:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80237cc:	6878      	ldr	r0, [r7, #4]
 80237ce:	f7f6 fee5 	bl	801a59c <pbuf_free>
  return;
 80237d2:	e013      	b.n	80237fc <icmp_input+0x220>
    goto lenerr;
 80237d4:	bf00      	nop
 80237d6:	e002      	b.n	80237de <icmp_input+0x202>
    goto lenerr;
 80237d8:	bf00      	nop
 80237da:	e000      	b.n	80237de <icmp_input+0x202>
        goto lenerr;
 80237dc:	bf00      	nop
lenerr:
  pbuf_free(p);
 80237de:	6878      	ldr	r0, [r7, #4]
 80237e0:	f7f6 fedc 	bl	801a59c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80237e4:	e00a      	b.n	80237fc <icmp_input+0x220>
        goto icmperr;
 80237e6:	bf00      	nop
 80237e8:	e004      	b.n	80237f4 <icmp_input+0x218>
        goto icmperr;
 80237ea:	bf00      	nop
 80237ec:	e002      	b.n	80237f4 <icmp_input+0x218>
          goto icmperr;
 80237ee:	bf00      	nop
 80237f0:	e000      	b.n	80237f4 <icmp_input+0x218>
          goto icmperr;
 80237f2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80237f4:	6878      	ldr	r0, [r7, #4]
 80237f6:	f7f6 fed1 	bl	801a59c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80237fa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80237fc:	3728      	adds	r7, #40	; 0x28
 80237fe:	46bd      	mov	sp, r7
 8023800:	bd80      	pop	{r7, pc}
 8023802:	bf00      	nop
 8023804:	24009edc 	.word	0x24009edc
 8023808:	24009ef0 	.word	0x24009ef0
 802380c:	08029920 	.word	0x08029920
 8023810:	08029958 	.word	0x08029958
 8023814:	08029990 	.word	0x08029990
 8023818:	080299b8 	.word	0x080299b8

0802381c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 802381c:	b580      	push	{r7, lr}
 802381e:	b082      	sub	sp, #8
 8023820:	af00      	add	r7, sp, #0
 8023822:	6078      	str	r0, [r7, #4]
 8023824:	460b      	mov	r3, r1
 8023826:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8023828:	78fb      	ldrb	r3, [r7, #3]
 802382a:	461a      	mov	r2, r3
 802382c:	2103      	movs	r1, #3
 802382e:	6878      	ldr	r0, [r7, #4]
 8023830:	f000 f814 	bl	802385c <icmp_send_response>
}
 8023834:	bf00      	nop
 8023836:	3708      	adds	r7, #8
 8023838:	46bd      	mov	sp, r7
 802383a:	bd80      	pop	{r7, pc}

0802383c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 802383c:	b580      	push	{r7, lr}
 802383e:	b082      	sub	sp, #8
 8023840:	af00      	add	r7, sp, #0
 8023842:	6078      	str	r0, [r7, #4]
 8023844:	460b      	mov	r3, r1
 8023846:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8023848:	78fb      	ldrb	r3, [r7, #3]
 802384a:	461a      	mov	r2, r3
 802384c:	210b      	movs	r1, #11
 802384e:	6878      	ldr	r0, [r7, #4]
 8023850:	f000 f804 	bl	802385c <icmp_send_response>
}
 8023854:	bf00      	nop
 8023856:	3708      	adds	r7, #8
 8023858:	46bd      	mov	sp, r7
 802385a:	bd80      	pop	{r7, pc}

0802385c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 802385c:	b580      	push	{r7, lr}
 802385e:	b08c      	sub	sp, #48	; 0x30
 8023860:	af04      	add	r7, sp, #16
 8023862:	6078      	str	r0, [r7, #4]
 8023864:	460b      	mov	r3, r1
 8023866:	70fb      	strb	r3, [r7, #3]
 8023868:	4613      	mov	r3, r2
 802386a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802386c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023870:	2124      	movs	r1, #36	; 0x24
 8023872:	2022      	movs	r0, #34	; 0x22
 8023874:	f7f6 fbae 	bl	8019fd4 <pbuf_alloc>
 8023878:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802387a:	69fb      	ldr	r3, [r7, #28]
 802387c:	2b00      	cmp	r3, #0
 802387e:	d056      	beq.n	802392e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8023880:	69fb      	ldr	r3, [r7, #28]
 8023882:	895b      	ldrh	r3, [r3, #10]
 8023884:	2b23      	cmp	r3, #35	; 0x23
 8023886:	d806      	bhi.n	8023896 <icmp_send_response+0x3a>
 8023888:	4b2b      	ldr	r3, [pc, #172]	; (8023938 <icmp_send_response+0xdc>)
 802388a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 802388e:	492b      	ldr	r1, [pc, #172]	; (802393c <icmp_send_response+0xe0>)
 8023890:	482b      	ldr	r0, [pc, #172]	; (8023940 <icmp_send_response+0xe4>)
 8023892:	f002 fb67 	bl	8025f64 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	685b      	ldr	r3, [r3, #4]
 802389a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 802389c:	69fb      	ldr	r3, [r7, #28]
 802389e:	685b      	ldr	r3, [r3, #4]
 80238a0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80238a2:	697b      	ldr	r3, [r7, #20]
 80238a4:	78fa      	ldrb	r2, [r7, #3]
 80238a6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80238a8:	697b      	ldr	r3, [r7, #20]
 80238aa:	78ba      	ldrb	r2, [r7, #2]
 80238ac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80238ae:	697b      	ldr	r3, [r7, #20]
 80238b0:	2200      	movs	r2, #0
 80238b2:	711a      	strb	r2, [r3, #4]
 80238b4:	2200      	movs	r2, #0
 80238b6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80238b8:	697b      	ldr	r3, [r7, #20]
 80238ba:	2200      	movs	r2, #0
 80238bc:	719a      	strb	r2, [r3, #6]
 80238be:	2200      	movs	r2, #0
 80238c0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80238c2:	69fb      	ldr	r3, [r7, #28]
 80238c4:	685b      	ldr	r3, [r3, #4]
 80238c6:	f103 0008 	add.w	r0, r3, #8
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	685b      	ldr	r3, [r3, #4]
 80238ce:	221c      	movs	r2, #28
 80238d0:	4619      	mov	r1, r3
 80238d2:	f002 fa3b 	bl	8025d4c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80238d6:	69bb      	ldr	r3, [r7, #24]
 80238d8:	68db      	ldr	r3, [r3, #12]
 80238da:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80238dc:	f107 030c 	add.w	r3, r7, #12
 80238e0:	4618      	mov	r0, r3
 80238e2:	f000 f82f 	bl	8023944 <ip4_route>
 80238e6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80238e8:	693b      	ldr	r3, [r7, #16]
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	d01b      	beq.n	8023926 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80238ee:	697b      	ldr	r3, [r7, #20]
 80238f0:	2200      	movs	r2, #0
 80238f2:	709a      	strb	r2, [r3, #2]
 80238f4:	2200      	movs	r2, #0
 80238f6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80238f8:	69fb      	ldr	r3, [r7, #28]
 80238fa:	895b      	ldrh	r3, [r3, #10]
 80238fc:	4619      	mov	r1, r3
 80238fe:	6978      	ldr	r0, [r7, #20]
 8023900:	f7f5 fa21 	bl	8018d46 <inet_chksum>
 8023904:	4603      	mov	r3, r0
 8023906:	461a      	mov	r2, r3
 8023908:	697b      	ldr	r3, [r7, #20]
 802390a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802390c:	f107 020c 	add.w	r2, r7, #12
 8023910:	693b      	ldr	r3, [r7, #16]
 8023912:	9302      	str	r3, [sp, #8]
 8023914:	2301      	movs	r3, #1
 8023916:	9301      	str	r3, [sp, #4]
 8023918:	2300      	movs	r3, #0
 802391a:	9300      	str	r3, [sp, #0]
 802391c:	23ff      	movs	r3, #255	; 0xff
 802391e:	2100      	movs	r1, #0
 8023920:	69f8      	ldr	r0, [r7, #28]
 8023922:	f000 f9eb 	bl	8023cfc <ip4_output_if>
  }
  pbuf_free(q);
 8023926:	69f8      	ldr	r0, [r7, #28]
 8023928:	f7f6 fe38 	bl	801a59c <pbuf_free>
 802392c:	e000      	b.n	8023930 <icmp_send_response+0xd4>
    return;
 802392e:	bf00      	nop
}
 8023930:	3720      	adds	r7, #32
 8023932:	46bd      	mov	sp, r7
 8023934:	bd80      	pop	{r7, pc}
 8023936:	bf00      	nop
 8023938:	08029920 	.word	0x08029920
 802393c:	080299ec 	.word	0x080299ec
 8023940:	08029990 	.word	0x08029990

08023944 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8023944:	b480      	push	{r7}
 8023946:	b085      	sub	sp, #20
 8023948:	af00      	add	r7, sp, #0
 802394a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 802394c:	4b33      	ldr	r3, [pc, #204]	; (8023a1c <ip4_route+0xd8>)
 802394e:	681b      	ldr	r3, [r3, #0]
 8023950:	60fb      	str	r3, [r7, #12]
 8023952:	e036      	b.n	80239c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802395a:	f003 0301 	and.w	r3, r3, #1
 802395e:	b2db      	uxtb	r3, r3
 8023960:	2b00      	cmp	r3, #0
 8023962:	d02b      	beq.n	80239bc <ip4_route+0x78>
 8023964:	68fb      	ldr	r3, [r7, #12]
 8023966:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802396a:	089b      	lsrs	r3, r3, #2
 802396c:	f003 0301 	and.w	r3, r3, #1
 8023970:	b2db      	uxtb	r3, r3
 8023972:	2b00      	cmp	r3, #0
 8023974:	d022      	beq.n	80239bc <ip4_route+0x78>
 8023976:	68fb      	ldr	r3, [r7, #12]
 8023978:	3304      	adds	r3, #4
 802397a:	681b      	ldr	r3, [r3, #0]
 802397c:	2b00      	cmp	r3, #0
 802397e:	d01d      	beq.n	80239bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	681a      	ldr	r2, [r3, #0]
 8023984:	68fb      	ldr	r3, [r7, #12]
 8023986:	3304      	adds	r3, #4
 8023988:	681b      	ldr	r3, [r3, #0]
 802398a:	405a      	eors	r2, r3
 802398c:	68fb      	ldr	r3, [r7, #12]
 802398e:	3308      	adds	r3, #8
 8023990:	681b      	ldr	r3, [r3, #0]
 8023992:	4013      	ands	r3, r2
 8023994:	2b00      	cmp	r3, #0
 8023996:	d101      	bne.n	802399c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8023998:	68fb      	ldr	r3, [r7, #12]
 802399a:	e038      	b.n	8023a0e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802399c:	68fb      	ldr	r3, [r7, #12]
 802399e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80239a2:	f003 0302 	and.w	r3, r3, #2
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	d108      	bne.n	80239bc <ip4_route+0x78>
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	681a      	ldr	r2, [r3, #0]
 80239ae:	68fb      	ldr	r3, [r7, #12]
 80239b0:	330c      	adds	r3, #12
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	429a      	cmp	r2, r3
 80239b6:	d101      	bne.n	80239bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80239b8:	68fb      	ldr	r3, [r7, #12]
 80239ba:	e028      	b.n	8023a0e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80239bc:	68fb      	ldr	r3, [r7, #12]
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	60fb      	str	r3, [r7, #12]
 80239c2:	68fb      	ldr	r3, [r7, #12]
 80239c4:	2b00      	cmp	r3, #0
 80239c6:	d1c5      	bne.n	8023954 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80239c8:	4b15      	ldr	r3, [pc, #84]	; (8023a20 <ip4_route+0xdc>)
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	2b00      	cmp	r3, #0
 80239ce:	d01a      	beq.n	8023a06 <ip4_route+0xc2>
 80239d0:	4b13      	ldr	r3, [pc, #76]	; (8023a20 <ip4_route+0xdc>)
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80239d8:	f003 0301 	and.w	r3, r3, #1
 80239dc:	2b00      	cmp	r3, #0
 80239de:	d012      	beq.n	8023a06 <ip4_route+0xc2>
 80239e0:	4b0f      	ldr	r3, [pc, #60]	; (8023a20 <ip4_route+0xdc>)
 80239e2:	681b      	ldr	r3, [r3, #0]
 80239e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80239e8:	f003 0304 	and.w	r3, r3, #4
 80239ec:	2b00      	cmp	r3, #0
 80239ee:	d00a      	beq.n	8023a06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80239f0:	4b0b      	ldr	r3, [pc, #44]	; (8023a20 <ip4_route+0xdc>)
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	3304      	adds	r3, #4
 80239f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80239f8:	2b00      	cmp	r3, #0
 80239fa:	d004      	beq.n	8023a06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	681b      	ldr	r3, [r3, #0]
 8023a00:	b2db      	uxtb	r3, r3
 8023a02:	2b7f      	cmp	r3, #127	; 0x7f
 8023a04:	d101      	bne.n	8023a0a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8023a06:	2300      	movs	r3, #0
 8023a08:	e001      	b.n	8023a0e <ip4_route+0xca>
  }

  return netif_default;
 8023a0a:	4b05      	ldr	r3, [pc, #20]	; (8023a20 <ip4_route+0xdc>)
 8023a0c:	681b      	ldr	r3, [r3, #0]
}
 8023a0e:	4618      	mov	r0, r3
 8023a10:	3714      	adds	r7, #20
 8023a12:	46bd      	mov	sp, r7
 8023a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a18:	4770      	bx	lr
 8023a1a:	bf00      	nop
 8023a1c:	2400cff0 	.word	0x2400cff0
 8023a20:	2400cff4 	.word	0x2400cff4

08023a24 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8023a24:	b580      	push	{r7, lr}
 8023a26:	b082      	sub	sp, #8
 8023a28:	af00      	add	r7, sp, #0
 8023a2a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023a32:	f003 0301 	and.w	r3, r3, #1
 8023a36:	b2db      	uxtb	r3, r3
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	d016      	beq.n	8023a6a <ip4_input_accept+0x46>
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	3304      	adds	r3, #4
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	d011      	beq.n	8023a6a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023a46:	4b0b      	ldr	r3, [pc, #44]	; (8023a74 <ip4_input_accept+0x50>)
 8023a48:	695a      	ldr	r2, [r3, #20]
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	3304      	adds	r3, #4
 8023a4e:	681b      	ldr	r3, [r3, #0]
 8023a50:	429a      	cmp	r2, r3
 8023a52:	d008      	beq.n	8023a66 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023a54:	4b07      	ldr	r3, [pc, #28]	; (8023a74 <ip4_input_accept+0x50>)
 8023a56:	695b      	ldr	r3, [r3, #20]
 8023a58:	6879      	ldr	r1, [r7, #4]
 8023a5a:	4618      	mov	r0, r3
 8023a5c:	f000 fa26 	bl	8023eac <ip4_addr_isbroadcast_u32>
 8023a60:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d001      	beq.n	8023a6a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8023a66:	2301      	movs	r3, #1
 8023a68:	e000      	b.n	8023a6c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8023a6a:	2300      	movs	r3, #0
}
 8023a6c:	4618      	mov	r0, r3
 8023a6e:	3708      	adds	r7, #8
 8023a70:	46bd      	mov	sp, r7
 8023a72:	bd80      	pop	{r7, pc}
 8023a74:	24009edc 	.word	0x24009edc

08023a78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8023a78:	b580      	push	{r7, lr}
 8023a7a:	b088      	sub	sp, #32
 8023a7c:	af00      	add	r7, sp, #0
 8023a7e:	6078      	str	r0, [r7, #4]
 8023a80:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8023a82:	2301      	movs	r3, #1
 8023a84:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	685b      	ldr	r3, [r3, #4]
 8023a8a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8023a8c:	69fb      	ldr	r3, [r7, #28]
 8023a8e:	781b      	ldrb	r3, [r3, #0]
 8023a90:	091b      	lsrs	r3, r3, #4
 8023a92:	b2db      	uxtb	r3, r3
 8023a94:	2b04      	cmp	r3, #4
 8023a96:	d004      	beq.n	8023aa2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8023a98:	6878      	ldr	r0, [r7, #4]
 8023a9a:	f7f6 fd7f 	bl	801a59c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8023a9e:	2300      	movs	r3, #0
 8023aa0:	e123      	b.n	8023cea <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8023aa2:	69fb      	ldr	r3, [r7, #28]
 8023aa4:	781b      	ldrb	r3, [r3, #0]
 8023aa6:	f003 030f 	and.w	r3, r3, #15
 8023aaa:	b2db      	uxtb	r3, r3
 8023aac:	009b      	lsls	r3, r3, #2
 8023aae:	b2db      	uxtb	r3, r3
 8023ab0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8023ab2:	69fb      	ldr	r3, [r7, #28]
 8023ab4:	885b      	ldrh	r3, [r3, #2]
 8023ab6:	b29b      	uxth	r3, r3
 8023ab8:	4618      	mov	r0, r3
 8023aba:	f7f5 f8b9 	bl	8018c30 <lwip_htons>
 8023abe:	4603      	mov	r3, r0
 8023ac0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	891b      	ldrh	r3, [r3, #8]
 8023ac6:	8a3a      	ldrh	r2, [r7, #16]
 8023ac8:	429a      	cmp	r2, r3
 8023aca:	d204      	bcs.n	8023ad6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8023acc:	8a3b      	ldrh	r3, [r7, #16]
 8023ace:	4619      	mov	r1, r3
 8023ad0:	6878      	ldr	r0, [r7, #4]
 8023ad2:	f7f6 fbdd 	bl	801a290 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	895b      	ldrh	r3, [r3, #10]
 8023ada:	8a7a      	ldrh	r2, [r7, #18]
 8023adc:	429a      	cmp	r2, r3
 8023ade:	d807      	bhi.n	8023af0 <ip4_input+0x78>
 8023ae0:	687b      	ldr	r3, [r7, #4]
 8023ae2:	891b      	ldrh	r3, [r3, #8]
 8023ae4:	8a3a      	ldrh	r2, [r7, #16]
 8023ae6:	429a      	cmp	r2, r3
 8023ae8:	d802      	bhi.n	8023af0 <ip4_input+0x78>
 8023aea:	8a7b      	ldrh	r3, [r7, #18]
 8023aec:	2b13      	cmp	r3, #19
 8023aee:	d804      	bhi.n	8023afa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8023af0:	6878      	ldr	r0, [r7, #4]
 8023af2:	f7f6 fd53 	bl	801a59c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8023af6:	2300      	movs	r3, #0
 8023af8:	e0f7      	b.n	8023cea <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8023afa:	69fb      	ldr	r3, [r7, #28]
 8023afc:	691b      	ldr	r3, [r3, #16]
 8023afe:	4a7d      	ldr	r2, [pc, #500]	; (8023cf4 <ip4_input+0x27c>)
 8023b00:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023b02:	69fb      	ldr	r3, [r7, #28]
 8023b04:	68db      	ldr	r3, [r3, #12]
 8023b06:	4a7b      	ldr	r2, [pc, #492]	; (8023cf4 <ip4_input+0x27c>)
 8023b08:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023b0a:	4b7a      	ldr	r3, [pc, #488]	; (8023cf4 <ip4_input+0x27c>)
 8023b0c:	695b      	ldr	r3, [r3, #20]
 8023b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023b12:	2be0      	cmp	r3, #224	; 0xe0
 8023b14:	d112      	bne.n	8023b3c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023b16:	683b      	ldr	r3, [r7, #0]
 8023b18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023b1c:	f003 0301 	and.w	r3, r3, #1
 8023b20:	b2db      	uxtb	r3, r3
 8023b22:	2b00      	cmp	r3, #0
 8023b24:	d007      	beq.n	8023b36 <ip4_input+0xbe>
 8023b26:	683b      	ldr	r3, [r7, #0]
 8023b28:	3304      	adds	r3, #4
 8023b2a:	681b      	ldr	r3, [r3, #0]
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	d002      	beq.n	8023b36 <ip4_input+0xbe>
      netif = inp;
 8023b30:	683b      	ldr	r3, [r7, #0]
 8023b32:	61bb      	str	r3, [r7, #24]
 8023b34:	e02a      	b.n	8023b8c <ip4_input+0x114>
    } else {
      netif = NULL;
 8023b36:	2300      	movs	r3, #0
 8023b38:	61bb      	str	r3, [r7, #24]
 8023b3a:	e027      	b.n	8023b8c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8023b3c:	6838      	ldr	r0, [r7, #0]
 8023b3e:	f7ff ff71 	bl	8023a24 <ip4_input_accept>
 8023b42:	4603      	mov	r3, r0
 8023b44:	2b00      	cmp	r3, #0
 8023b46:	d002      	beq.n	8023b4e <ip4_input+0xd6>
      netif = inp;
 8023b48:	683b      	ldr	r3, [r7, #0]
 8023b4a:	61bb      	str	r3, [r7, #24]
 8023b4c:	e01e      	b.n	8023b8c <ip4_input+0x114>
    } else {
      netif = NULL;
 8023b4e:	2300      	movs	r3, #0
 8023b50:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023b52:	4b68      	ldr	r3, [pc, #416]	; (8023cf4 <ip4_input+0x27c>)
 8023b54:	695b      	ldr	r3, [r3, #20]
 8023b56:	b2db      	uxtb	r3, r3
 8023b58:	2b7f      	cmp	r3, #127	; 0x7f
 8023b5a:	d017      	beq.n	8023b8c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8023b5c:	4b66      	ldr	r3, [pc, #408]	; (8023cf8 <ip4_input+0x280>)
 8023b5e:	681b      	ldr	r3, [r3, #0]
 8023b60:	61bb      	str	r3, [r7, #24]
 8023b62:	e00e      	b.n	8023b82 <ip4_input+0x10a>
          if (netif == inp) {
 8023b64:	69ba      	ldr	r2, [r7, #24]
 8023b66:	683b      	ldr	r3, [r7, #0]
 8023b68:	429a      	cmp	r2, r3
 8023b6a:	d006      	beq.n	8023b7a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8023b6c:	69b8      	ldr	r0, [r7, #24]
 8023b6e:	f7ff ff59 	bl	8023a24 <ip4_input_accept>
 8023b72:	4603      	mov	r3, r0
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	d108      	bne.n	8023b8a <ip4_input+0x112>
 8023b78:	e000      	b.n	8023b7c <ip4_input+0x104>
            continue;
 8023b7a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8023b7c:	69bb      	ldr	r3, [r7, #24]
 8023b7e:	681b      	ldr	r3, [r3, #0]
 8023b80:	61bb      	str	r3, [r7, #24]
 8023b82:	69bb      	ldr	r3, [r7, #24]
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	d1ed      	bne.n	8023b64 <ip4_input+0xec>
 8023b88:	e000      	b.n	8023b8c <ip4_input+0x114>
            break;
 8023b8a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8023b8c:	69bb      	ldr	r3, [r7, #24]
 8023b8e:	2b00      	cmp	r3, #0
 8023b90:	d111      	bne.n	8023bb6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8023b92:	69fb      	ldr	r3, [r7, #28]
 8023b94:	7a5b      	ldrb	r3, [r3, #9]
 8023b96:	2b11      	cmp	r3, #17
 8023b98:	d10d      	bne.n	8023bb6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8023b9a:	8a7b      	ldrh	r3, [r7, #18]
 8023b9c:	69fa      	ldr	r2, [r7, #28]
 8023b9e:	4413      	add	r3, r2
 8023ba0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	885b      	ldrh	r3, [r3, #2]
 8023ba6:	b29b      	uxth	r3, r3
 8023ba8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8023bac:	d103      	bne.n	8023bb6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8023bae:	683b      	ldr	r3, [r7, #0]
 8023bb0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8023bb2:	2300      	movs	r3, #0
 8023bb4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8023bb6:	697b      	ldr	r3, [r7, #20]
 8023bb8:	2b00      	cmp	r3, #0
 8023bba:	d017      	beq.n	8023bec <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8023bbc:	4b4d      	ldr	r3, [pc, #308]	; (8023cf4 <ip4_input+0x27c>)
 8023bbe:	691b      	ldr	r3, [r3, #16]
 8023bc0:	2b00      	cmp	r3, #0
 8023bc2:	d013      	beq.n	8023bec <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023bc4:	4b4b      	ldr	r3, [pc, #300]	; (8023cf4 <ip4_input+0x27c>)
 8023bc6:	691b      	ldr	r3, [r3, #16]
 8023bc8:	6839      	ldr	r1, [r7, #0]
 8023bca:	4618      	mov	r0, r3
 8023bcc:	f000 f96e 	bl	8023eac <ip4_addr_isbroadcast_u32>
 8023bd0:	4603      	mov	r3, r0
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	d105      	bne.n	8023be2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8023bd6:	4b47      	ldr	r3, [pc, #284]	; (8023cf4 <ip4_input+0x27c>)
 8023bd8:	691b      	ldr	r3, [r3, #16]
 8023bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8023bde:	2be0      	cmp	r3, #224	; 0xe0
 8023be0:	d104      	bne.n	8023bec <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8023be2:	6878      	ldr	r0, [r7, #4]
 8023be4:	f7f6 fcda 	bl	801a59c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8023be8:	2300      	movs	r3, #0
 8023bea:	e07e      	b.n	8023cea <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8023bec:	69bb      	ldr	r3, [r7, #24]
 8023bee:	2b00      	cmp	r3, #0
 8023bf0:	d104      	bne.n	8023bfc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8023bf2:	6878      	ldr	r0, [r7, #4]
 8023bf4:	f7f6 fcd2 	bl	801a59c <pbuf_free>
    return ERR_OK;
 8023bf8:	2300      	movs	r3, #0
 8023bfa:	e076      	b.n	8023cea <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8023bfc:	69fb      	ldr	r3, [r7, #28]
 8023bfe:	88db      	ldrh	r3, [r3, #6]
 8023c00:	b29b      	uxth	r3, r3
 8023c02:	461a      	mov	r2, r3
 8023c04:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8023c08:	4013      	ands	r3, r2
 8023c0a:	2b00      	cmp	r3, #0
 8023c0c:	d00b      	beq.n	8023c26 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8023c0e:	6878      	ldr	r0, [r7, #4]
 8023c10:	f000 fc92 	bl	8024538 <ip4_reass>
 8023c14:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8023c16:	687b      	ldr	r3, [r7, #4]
 8023c18:	2b00      	cmp	r3, #0
 8023c1a:	d101      	bne.n	8023c20 <ip4_input+0x1a8>
      return ERR_OK;
 8023c1c:	2300      	movs	r3, #0
 8023c1e:	e064      	b.n	8023cea <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	685b      	ldr	r3, [r3, #4]
 8023c24:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8023c26:	4a33      	ldr	r2, [pc, #204]	; (8023cf4 <ip4_input+0x27c>)
 8023c28:	69bb      	ldr	r3, [r7, #24]
 8023c2a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8023c2c:	4a31      	ldr	r2, [pc, #196]	; (8023cf4 <ip4_input+0x27c>)
 8023c2e:	683b      	ldr	r3, [r7, #0]
 8023c30:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8023c32:	4a30      	ldr	r2, [pc, #192]	; (8023cf4 <ip4_input+0x27c>)
 8023c34:	69fb      	ldr	r3, [r7, #28]
 8023c36:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023c38:	69fb      	ldr	r3, [r7, #28]
 8023c3a:	781b      	ldrb	r3, [r3, #0]
 8023c3c:	f003 030f 	and.w	r3, r3, #15
 8023c40:	b2db      	uxtb	r3, r3
 8023c42:	009b      	lsls	r3, r3, #2
 8023c44:	b2db      	uxtb	r3, r3
 8023c46:	b29a      	uxth	r2, r3
 8023c48:	4b2a      	ldr	r3, [pc, #168]	; (8023cf4 <ip4_input+0x27c>)
 8023c4a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023c4c:	8a7b      	ldrh	r3, [r7, #18]
 8023c4e:	4619      	mov	r1, r3
 8023c50:	6878      	ldr	r0, [r7, #4]
 8023c52:	f7f6 fc1d 	bl	801a490 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023c56:	69fb      	ldr	r3, [r7, #28]
 8023c58:	7a5b      	ldrb	r3, [r3, #9]
 8023c5a:	2b11      	cmp	r3, #17
 8023c5c:	d006      	beq.n	8023c6c <ip4_input+0x1f4>
 8023c5e:	2b11      	cmp	r3, #17
 8023c60:	dc13      	bgt.n	8023c8a <ip4_input+0x212>
 8023c62:	2b01      	cmp	r3, #1
 8023c64:	d00c      	beq.n	8023c80 <ip4_input+0x208>
 8023c66:	2b06      	cmp	r3, #6
 8023c68:	d005      	beq.n	8023c76 <ip4_input+0x1fe>
 8023c6a:	e00e      	b.n	8023c8a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8023c6c:	6839      	ldr	r1, [r7, #0]
 8023c6e:	6878      	ldr	r0, [r7, #4]
 8023c70:	f7fc fac2 	bl	80201f8 <udp_input>
        break;
 8023c74:	e026      	b.n	8023cc4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8023c76:	6839      	ldr	r1, [r7, #0]
 8023c78:	6878      	ldr	r0, [r7, #4]
 8023c7a:	f7f8 fad3 	bl	801c224 <tcp_input>
        break;
 8023c7e:	e021      	b.n	8023cc4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8023c80:	6839      	ldr	r1, [r7, #0]
 8023c82:	6878      	ldr	r0, [r7, #4]
 8023c84:	f7ff fcaa 	bl	80235dc <icmp_input>
        break;
 8023c88:	e01c      	b.n	8023cc4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023c8a:	4b1a      	ldr	r3, [pc, #104]	; (8023cf4 <ip4_input+0x27c>)
 8023c8c:	695b      	ldr	r3, [r3, #20]
 8023c8e:	69b9      	ldr	r1, [r7, #24]
 8023c90:	4618      	mov	r0, r3
 8023c92:	f000 f90b 	bl	8023eac <ip4_addr_isbroadcast_u32>
 8023c96:	4603      	mov	r3, r0
 8023c98:	2b00      	cmp	r3, #0
 8023c9a:	d10f      	bne.n	8023cbc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023c9c:	4b15      	ldr	r3, [pc, #84]	; (8023cf4 <ip4_input+0x27c>)
 8023c9e:	695b      	ldr	r3, [r3, #20]
 8023ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023ca4:	2be0      	cmp	r3, #224	; 0xe0
 8023ca6:	d009      	beq.n	8023cbc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8023ca8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8023cac:	4619      	mov	r1, r3
 8023cae:	6878      	ldr	r0, [r7, #4]
 8023cb0:	f7f6 fc61 	bl	801a576 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023cb4:	2102      	movs	r1, #2
 8023cb6:	6878      	ldr	r0, [r7, #4]
 8023cb8:	f7ff fdb0 	bl	802381c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8023cbc:	6878      	ldr	r0, [r7, #4]
 8023cbe:	f7f6 fc6d 	bl	801a59c <pbuf_free>
        break;
 8023cc2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023cc4:	4b0b      	ldr	r3, [pc, #44]	; (8023cf4 <ip4_input+0x27c>)
 8023cc6:	2200      	movs	r2, #0
 8023cc8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8023cca:	4b0a      	ldr	r3, [pc, #40]	; (8023cf4 <ip4_input+0x27c>)
 8023ccc:	2200      	movs	r2, #0
 8023cce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8023cd0:	4b08      	ldr	r3, [pc, #32]	; (8023cf4 <ip4_input+0x27c>)
 8023cd2:	2200      	movs	r2, #0
 8023cd4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023cd6:	4b07      	ldr	r3, [pc, #28]	; (8023cf4 <ip4_input+0x27c>)
 8023cd8:	2200      	movs	r2, #0
 8023cda:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8023cdc:	4b05      	ldr	r3, [pc, #20]	; (8023cf4 <ip4_input+0x27c>)
 8023cde:	2200      	movs	r2, #0
 8023ce0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023ce2:	4b04      	ldr	r3, [pc, #16]	; (8023cf4 <ip4_input+0x27c>)
 8023ce4:	2200      	movs	r2, #0
 8023ce6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8023ce8:	2300      	movs	r3, #0
}
 8023cea:	4618      	mov	r0, r3
 8023cec:	3720      	adds	r7, #32
 8023cee:	46bd      	mov	sp, r7
 8023cf0:	bd80      	pop	{r7, pc}
 8023cf2:	bf00      	nop
 8023cf4:	24009edc 	.word	0x24009edc
 8023cf8:	2400cff0 	.word	0x2400cff0

08023cfc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8023cfc:	b580      	push	{r7, lr}
 8023cfe:	b08a      	sub	sp, #40	; 0x28
 8023d00:	af04      	add	r7, sp, #16
 8023d02:	60f8      	str	r0, [r7, #12]
 8023d04:	60b9      	str	r1, [r7, #8]
 8023d06:	607a      	str	r2, [r7, #4]
 8023d08:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8023d0a:	68bb      	ldr	r3, [r7, #8]
 8023d0c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	d009      	beq.n	8023d28 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8023d14:	68bb      	ldr	r3, [r7, #8]
 8023d16:	2b00      	cmp	r3, #0
 8023d18:	d003      	beq.n	8023d22 <ip4_output_if+0x26>
 8023d1a:	68bb      	ldr	r3, [r7, #8]
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	d102      	bne.n	8023d28 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8023d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d24:	3304      	adds	r3, #4
 8023d26:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8023d28:	78fa      	ldrb	r2, [r7, #3]
 8023d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d2c:	9302      	str	r3, [sp, #8]
 8023d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023d32:	9301      	str	r3, [sp, #4]
 8023d34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023d38:	9300      	str	r3, [sp, #0]
 8023d3a:	4613      	mov	r3, r2
 8023d3c:	687a      	ldr	r2, [r7, #4]
 8023d3e:	6979      	ldr	r1, [r7, #20]
 8023d40:	68f8      	ldr	r0, [r7, #12]
 8023d42:	f000 f805 	bl	8023d50 <ip4_output_if_src>
 8023d46:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8023d48:	4618      	mov	r0, r3
 8023d4a:	3718      	adds	r7, #24
 8023d4c:	46bd      	mov	sp, r7
 8023d4e:	bd80      	pop	{r7, pc}

08023d50 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8023d50:	b580      	push	{r7, lr}
 8023d52:	b088      	sub	sp, #32
 8023d54:	af00      	add	r7, sp, #0
 8023d56:	60f8      	str	r0, [r7, #12]
 8023d58:	60b9      	str	r1, [r7, #8]
 8023d5a:	607a      	str	r2, [r7, #4]
 8023d5c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023d5e:	68fb      	ldr	r3, [r7, #12]
 8023d60:	7b9b      	ldrb	r3, [r3, #14]
 8023d62:	2b01      	cmp	r3, #1
 8023d64:	d006      	beq.n	8023d74 <ip4_output_if_src+0x24>
 8023d66:	4b4b      	ldr	r3, [pc, #300]	; (8023e94 <ip4_output_if_src+0x144>)
 8023d68:	f44f 7255 	mov.w	r2, #852	; 0x354
 8023d6c:	494a      	ldr	r1, [pc, #296]	; (8023e98 <ip4_output_if_src+0x148>)
 8023d6e:	484b      	ldr	r0, [pc, #300]	; (8023e9c <ip4_output_if_src+0x14c>)
 8023d70:	f002 f8f8 	bl	8025f64 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	d060      	beq.n	8023e3c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8023d7a:	2314      	movs	r3, #20
 8023d7c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8023d7e:	2114      	movs	r1, #20
 8023d80:	68f8      	ldr	r0, [r7, #12]
 8023d82:	f7f6 fb75 	bl	801a470 <pbuf_add_header>
 8023d86:	4603      	mov	r3, r0
 8023d88:	2b00      	cmp	r3, #0
 8023d8a:	d002      	beq.n	8023d92 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023d8c:	f06f 0301 	mvn.w	r3, #1
 8023d90:	e07c      	b.n	8023e8c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8023d92:	68fb      	ldr	r3, [r7, #12]
 8023d94:	685b      	ldr	r3, [r3, #4]
 8023d96:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023d98:	68fb      	ldr	r3, [r7, #12]
 8023d9a:	895b      	ldrh	r3, [r3, #10]
 8023d9c:	2b13      	cmp	r3, #19
 8023d9e:	d806      	bhi.n	8023dae <ip4_output_if_src+0x5e>
 8023da0:	4b3c      	ldr	r3, [pc, #240]	; (8023e94 <ip4_output_if_src+0x144>)
 8023da2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8023da6:	493e      	ldr	r1, [pc, #248]	; (8023ea0 <ip4_output_if_src+0x150>)
 8023da8:	483c      	ldr	r0, [pc, #240]	; (8023e9c <ip4_output_if_src+0x14c>)
 8023daa:	f002 f8db 	bl	8025f64 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8023dae:	69fb      	ldr	r3, [r7, #28]
 8023db0:	78fa      	ldrb	r2, [r7, #3]
 8023db2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8023db4:	69fb      	ldr	r3, [r7, #28]
 8023db6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8023dba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	681a      	ldr	r2, [r3, #0]
 8023dc0:	69fb      	ldr	r3, [r7, #28]
 8023dc2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8023dc4:	8b7b      	ldrh	r3, [r7, #26]
 8023dc6:	089b      	lsrs	r3, r3, #2
 8023dc8:	b29b      	uxth	r3, r3
 8023dca:	b2db      	uxtb	r3, r3
 8023dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023dd0:	b2da      	uxtb	r2, r3
 8023dd2:	69fb      	ldr	r3, [r7, #28]
 8023dd4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8023dd6:	69fb      	ldr	r3, [r7, #28]
 8023dd8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8023ddc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8023dde:	68fb      	ldr	r3, [r7, #12]
 8023de0:	891b      	ldrh	r3, [r3, #8]
 8023de2:	4618      	mov	r0, r3
 8023de4:	f7f4 ff24 	bl	8018c30 <lwip_htons>
 8023de8:	4603      	mov	r3, r0
 8023dea:	461a      	mov	r2, r3
 8023dec:	69fb      	ldr	r3, [r7, #28]
 8023dee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8023df0:	69fb      	ldr	r3, [r7, #28]
 8023df2:	2200      	movs	r2, #0
 8023df4:	719a      	strb	r2, [r3, #6]
 8023df6:	2200      	movs	r2, #0
 8023df8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023dfa:	4b2a      	ldr	r3, [pc, #168]	; (8023ea4 <ip4_output_if_src+0x154>)
 8023dfc:	881b      	ldrh	r3, [r3, #0]
 8023dfe:	4618      	mov	r0, r3
 8023e00:	f7f4 ff16 	bl	8018c30 <lwip_htons>
 8023e04:	4603      	mov	r3, r0
 8023e06:	461a      	mov	r2, r3
 8023e08:	69fb      	ldr	r3, [r7, #28]
 8023e0a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8023e0c:	4b25      	ldr	r3, [pc, #148]	; (8023ea4 <ip4_output_if_src+0x154>)
 8023e0e:	881b      	ldrh	r3, [r3, #0]
 8023e10:	3301      	adds	r3, #1
 8023e12:	b29a      	uxth	r2, r3
 8023e14:	4b23      	ldr	r3, [pc, #140]	; (8023ea4 <ip4_output_if_src+0x154>)
 8023e16:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8023e18:	68bb      	ldr	r3, [r7, #8]
 8023e1a:	2b00      	cmp	r3, #0
 8023e1c:	d104      	bne.n	8023e28 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8023e1e:	4b22      	ldr	r3, [pc, #136]	; (8023ea8 <ip4_output_if_src+0x158>)
 8023e20:	681a      	ldr	r2, [r3, #0]
 8023e22:	69fb      	ldr	r3, [r7, #28]
 8023e24:	60da      	str	r2, [r3, #12]
 8023e26:	e003      	b.n	8023e30 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8023e28:	68bb      	ldr	r3, [r7, #8]
 8023e2a:	681a      	ldr	r2, [r3, #0]
 8023e2c:	69fb      	ldr	r3, [r7, #28]
 8023e2e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8023e30:	69fb      	ldr	r3, [r7, #28]
 8023e32:	2200      	movs	r2, #0
 8023e34:	729a      	strb	r2, [r3, #10]
 8023e36:	2200      	movs	r2, #0
 8023e38:	72da      	strb	r2, [r3, #11]
 8023e3a:	e00f      	b.n	8023e5c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8023e3c:	68fb      	ldr	r3, [r7, #12]
 8023e3e:	895b      	ldrh	r3, [r3, #10]
 8023e40:	2b13      	cmp	r3, #19
 8023e42:	d802      	bhi.n	8023e4a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023e44:	f06f 0301 	mvn.w	r3, #1
 8023e48:	e020      	b.n	8023e8c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8023e4a:	68fb      	ldr	r3, [r7, #12]
 8023e4c:	685b      	ldr	r3, [r3, #4]
 8023e4e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8023e50:	69fb      	ldr	r3, [r7, #28]
 8023e52:	691b      	ldr	r3, [r3, #16]
 8023e54:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8023e56:	f107 0314 	add.w	r3, r7, #20
 8023e5a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8023e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d00c      	beq.n	8023e7e <ip4_output_if_src+0x12e>
 8023e64:	68fb      	ldr	r3, [r7, #12]
 8023e66:	891a      	ldrh	r2, [r3, #8]
 8023e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e6c:	429a      	cmp	r2, r3
 8023e6e:	d906      	bls.n	8023e7e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8023e70:	687a      	ldr	r2, [r7, #4]
 8023e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023e74:	68f8      	ldr	r0, [r7, #12]
 8023e76:	f000 fd53 	bl	8024920 <ip4_frag>
 8023e7a:	4603      	mov	r3, r0
 8023e7c:	e006      	b.n	8023e8c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8023e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e80:	695b      	ldr	r3, [r3, #20]
 8023e82:	687a      	ldr	r2, [r7, #4]
 8023e84:	68f9      	ldr	r1, [r7, #12]
 8023e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023e88:	4798      	blx	r3
 8023e8a:	4603      	mov	r3, r0
}
 8023e8c:	4618      	mov	r0, r3
 8023e8e:	3720      	adds	r7, #32
 8023e90:	46bd      	mov	sp, r7
 8023e92:	bd80      	pop	{r7, pc}
 8023e94:	08029a18 	.word	0x08029a18
 8023e98:	08029a4c 	.word	0x08029a4c
 8023e9c:	08029a58 	.word	0x08029a58
 8023ea0:	08029a80 	.word	0x08029a80
 8023ea4:	2400d182 	.word	0x2400d182
 8023ea8:	0802a5ac 	.word	0x0802a5ac

08023eac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8023eac:	b480      	push	{r7}
 8023eae:	b085      	sub	sp, #20
 8023eb0:	af00      	add	r7, sp, #0
 8023eb2:	6078      	str	r0, [r7, #4]
 8023eb4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8023eb6:	687b      	ldr	r3, [r7, #4]
 8023eb8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023ec0:	d002      	beq.n	8023ec8 <ip4_addr_isbroadcast_u32+0x1c>
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	d101      	bne.n	8023ecc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8023ec8:	2301      	movs	r3, #1
 8023eca:	e02a      	b.n	8023f22 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8023ecc:	683b      	ldr	r3, [r7, #0]
 8023ece:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8023ed2:	f003 0302 	and.w	r3, r3, #2
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	d101      	bne.n	8023ede <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8023eda:	2300      	movs	r3, #0
 8023edc:	e021      	b.n	8023f22 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8023ede:	683b      	ldr	r3, [r7, #0]
 8023ee0:	3304      	adds	r3, #4
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	687a      	ldr	r2, [r7, #4]
 8023ee6:	429a      	cmp	r2, r3
 8023ee8:	d101      	bne.n	8023eee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8023eea:	2300      	movs	r3, #0
 8023eec:	e019      	b.n	8023f22 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8023eee:	68fa      	ldr	r2, [r7, #12]
 8023ef0:	683b      	ldr	r3, [r7, #0]
 8023ef2:	3304      	adds	r3, #4
 8023ef4:	681b      	ldr	r3, [r3, #0]
 8023ef6:	405a      	eors	r2, r3
 8023ef8:	683b      	ldr	r3, [r7, #0]
 8023efa:	3308      	adds	r3, #8
 8023efc:	681b      	ldr	r3, [r3, #0]
 8023efe:	4013      	ands	r3, r2
 8023f00:	2b00      	cmp	r3, #0
 8023f02:	d10d      	bne.n	8023f20 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023f04:	683b      	ldr	r3, [r7, #0]
 8023f06:	3308      	adds	r3, #8
 8023f08:	681b      	ldr	r3, [r3, #0]
 8023f0a:	43da      	mvns	r2, r3
 8023f0c:	687b      	ldr	r3, [r7, #4]
 8023f0e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8023f10:	683b      	ldr	r3, [r7, #0]
 8023f12:	3308      	adds	r3, #8
 8023f14:	681b      	ldr	r3, [r3, #0]
 8023f16:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023f18:	429a      	cmp	r2, r3
 8023f1a:	d101      	bne.n	8023f20 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8023f1c:	2301      	movs	r3, #1
 8023f1e:	e000      	b.n	8023f22 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8023f20:	2300      	movs	r3, #0
  }
}
 8023f22:	4618      	mov	r0, r3
 8023f24:	3714      	adds	r7, #20
 8023f26:	46bd      	mov	sp, r7
 8023f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f2c:	4770      	bx	lr
	...

08023f30 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8023f30:	b580      	push	{r7, lr}
 8023f32:	b084      	sub	sp, #16
 8023f34:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8023f36:	2300      	movs	r3, #0
 8023f38:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8023f3a:	4b12      	ldr	r3, [pc, #72]	; (8023f84 <ip_reass_tmr+0x54>)
 8023f3c:	681b      	ldr	r3, [r3, #0]
 8023f3e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8023f40:	e018      	b.n	8023f74 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8023f42:	68fb      	ldr	r3, [r7, #12]
 8023f44:	7fdb      	ldrb	r3, [r3, #31]
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	d00b      	beq.n	8023f62 <ip_reass_tmr+0x32>
      r->timer--;
 8023f4a:	68fb      	ldr	r3, [r7, #12]
 8023f4c:	7fdb      	ldrb	r3, [r3, #31]
 8023f4e:	3b01      	subs	r3, #1
 8023f50:	b2da      	uxtb	r2, r3
 8023f52:	68fb      	ldr	r3, [r7, #12]
 8023f54:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8023f56:	68fb      	ldr	r3, [r7, #12]
 8023f58:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8023f5a:	68fb      	ldr	r3, [r7, #12]
 8023f5c:	681b      	ldr	r3, [r3, #0]
 8023f5e:	60fb      	str	r3, [r7, #12]
 8023f60:	e008      	b.n	8023f74 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8023f62:	68fb      	ldr	r3, [r7, #12]
 8023f64:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8023f66:	68fb      	ldr	r3, [r7, #12]
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8023f6c:	68b9      	ldr	r1, [r7, #8]
 8023f6e:	6878      	ldr	r0, [r7, #4]
 8023f70:	f000 f80a 	bl	8023f88 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8023f74:	68fb      	ldr	r3, [r7, #12]
 8023f76:	2b00      	cmp	r3, #0
 8023f78:	d1e3      	bne.n	8023f42 <ip_reass_tmr+0x12>
    }
  }
}
 8023f7a:	bf00      	nop
 8023f7c:	bf00      	nop
 8023f7e:	3710      	adds	r7, #16
 8023f80:	46bd      	mov	sp, r7
 8023f82:	bd80      	pop	{r7, pc}
 8023f84:	2400d184 	.word	0x2400d184

08023f88 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023f88:	b580      	push	{r7, lr}
 8023f8a:	b088      	sub	sp, #32
 8023f8c:	af00      	add	r7, sp, #0
 8023f8e:	6078      	str	r0, [r7, #4]
 8023f90:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8023f92:	2300      	movs	r3, #0
 8023f94:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023f96:	683a      	ldr	r2, [r7, #0]
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	429a      	cmp	r2, r3
 8023f9c:	d105      	bne.n	8023faa <ip_reass_free_complete_datagram+0x22>
 8023f9e:	4b45      	ldr	r3, [pc, #276]	; (80240b4 <ip_reass_free_complete_datagram+0x12c>)
 8023fa0:	22ab      	movs	r2, #171	; 0xab
 8023fa2:	4945      	ldr	r1, [pc, #276]	; (80240b8 <ip_reass_free_complete_datagram+0x130>)
 8023fa4:	4845      	ldr	r0, [pc, #276]	; (80240bc <ip_reass_free_complete_datagram+0x134>)
 8023fa6:	f001 ffdd 	bl	8025f64 <iprintf>
  if (prev != NULL) {
 8023faa:	683b      	ldr	r3, [r7, #0]
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d00a      	beq.n	8023fc6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8023fb0:	683b      	ldr	r3, [r7, #0]
 8023fb2:	681b      	ldr	r3, [r3, #0]
 8023fb4:	687a      	ldr	r2, [r7, #4]
 8023fb6:	429a      	cmp	r2, r3
 8023fb8:	d005      	beq.n	8023fc6 <ip_reass_free_complete_datagram+0x3e>
 8023fba:	4b3e      	ldr	r3, [pc, #248]	; (80240b4 <ip_reass_free_complete_datagram+0x12c>)
 8023fbc:	22ad      	movs	r2, #173	; 0xad
 8023fbe:	4940      	ldr	r1, [pc, #256]	; (80240c0 <ip_reass_free_complete_datagram+0x138>)
 8023fc0:	483e      	ldr	r0, [pc, #248]	; (80240bc <ip_reass_free_complete_datagram+0x134>)
 8023fc2:	f001 ffcf 	bl	8025f64 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8023fc6:	687b      	ldr	r3, [r7, #4]
 8023fc8:	685b      	ldr	r3, [r3, #4]
 8023fca:	685b      	ldr	r3, [r3, #4]
 8023fcc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8023fce:	697b      	ldr	r3, [r7, #20]
 8023fd0:	889b      	ldrh	r3, [r3, #4]
 8023fd2:	b29b      	uxth	r3, r3
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	d12a      	bne.n	802402e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8023fd8:	687b      	ldr	r3, [r7, #4]
 8023fda:	685b      	ldr	r3, [r3, #4]
 8023fdc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8023fde:	697b      	ldr	r3, [r7, #20]
 8023fe0:	681a      	ldr	r2, [r3, #0]
 8023fe2:	687b      	ldr	r3, [r7, #4]
 8023fe4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023fe6:	69bb      	ldr	r3, [r7, #24]
 8023fe8:	6858      	ldr	r0, [r3, #4]
 8023fea:	687b      	ldr	r3, [r7, #4]
 8023fec:	3308      	adds	r3, #8
 8023fee:	2214      	movs	r2, #20
 8023ff0:	4619      	mov	r1, r3
 8023ff2:	f001 feab 	bl	8025d4c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023ff6:	2101      	movs	r1, #1
 8023ff8:	69b8      	ldr	r0, [r7, #24]
 8023ffa:	f7ff fc1f 	bl	802383c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8023ffe:	69b8      	ldr	r0, [r7, #24]
 8024000:	f7f6 fb5a 	bl	801a6b8 <pbuf_clen>
 8024004:	4603      	mov	r3, r0
 8024006:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024008:	8bfa      	ldrh	r2, [r7, #30]
 802400a:	8a7b      	ldrh	r3, [r7, #18]
 802400c:	4413      	add	r3, r2
 802400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024012:	db05      	blt.n	8024020 <ip_reass_free_complete_datagram+0x98>
 8024014:	4b27      	ldr	r3, [pc, #156]	; (80240b4 <ip_reass_free_complete_datagram+0x12c>)
 8024016:	22bc      	movs	r2, #188	; 0xbc
 8024018:	492a      	ldr	r1, [pc, #168]	; (80240c4 <ip_reass_free_complete_datagram+0x13c>)
 802401a:	4828      	ldr	r0, [pc, #160]	; (80240bc <ip_reass_free_complete_datagram+0x134>)
 802401c:	f001 ffa2 	bl	8025f64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024020:	8bfa      	ldrh	r2, [r7, #30]
 8024022:	8a7b      	ldrh	r3, [r7, #18]
 8024024:	4413      	add	r3, r2
 8024026:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8024028:	69b8      	ldr	r0, [r7, #24]
 802402a:	f7f6 fab7 	bl	801a59c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802402e:	687b      	ldr	r3, [r7, #4]
 8024030:	685b      	ldr	r3, [r3, #4]
 8024032:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8024034:	e01f      	b.n	8024076 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8024036:	69bb      	ldr	r3, [r7, #24]
 8024038:	685b      	ldr	r3, [r3, #4]
 802403a:	617b      	str	r3, [r7, #20]
    pcur = p;
 802403c:	69bb      	ldr	r3, [r7, #24]
 802403e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8024040:	697b      	ldr	r3, [r7, #20]
 8024042:	681b      	ldr	r3, [r3, #0]
 8024044:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8024046:	68f8      	ldr	r0, [r7, #12]
 8024048:	f7f6 fb36 	bl	801a6b8 <pbuf_clen>
 802404c:	4603      	mov	r3, r0
 802404e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024050:	8bfa      	ldrh	r2, [r7, #30]
 8024052:	8a7b      	ldrh	r3, [r7, #18]
 8024054:	4413      	add	r3, r2
 8024056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802405a:	db05      	blt.n	8024068 <ip_reass_free_complete_datagram+0xe0>
 802405c:	4b15      	ldr	r3, [pc, #84]	; (80240b4 <ip_reass_free_complete_datagram+0x12c>)
 802405e:	22cc      	movs	r2, #204	; 0xcc
 8024060:	4918      	ldr	r1, [pc, #96]	; (80240c4 <ip_reass_free_complete_datagram+0x13c>)
 8024062:	4816      	ldr	r0, [pc, #88]	; (80240bc <ip_reass_free_complete_datagram+0x134>)
 8024064:	f001 ff7e 	bl	8025f64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024068:	8bfa      	ldrh	r2, [r7, #30]
 802406a:	8a7b      	ldrh	r3, [r7, #18]
 802406c:	4413      	add	r3, r2
 802406e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8024070:	68f8      	ldr	r0, [r7, #12]
 8024072:	f7f6 fa93 	bl	801a59c <pbuf_free>
  while (p != NULL) {
 8024076:	69bb      	ldr	r3, [r7, #24]
 8024078:	2b00      	cmp	r3, #0
 802407a:	d1dc      	bne.n	8024036 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 802407c:	6839      	ldr	r1, [r7, #0]
 802407e:	6878      	ldr	r0, [r7, #4]
 8024080:	f000 f8c2 	bl	8024208 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8024084:	4b10      	ldr	r3, [pc, #64]	; (80240c8 <ip_reass_free_complete_datagram+0x140>)
 8024086:	881b      	ldrh	r3, [r3, #0]
 8024088:	8bfa      	ldrh	r2, [r7, #30]
 802408a:	429a      	cmp	r2, r3
 802408c:	d905      	bls.n	802409a <ip_reass_free_complete_datagram+0x112>
 802408e:	4b09      	ldr	r3, [pc, #36]	; (80240b4 <ip_reass_free_complete_datagram+0x12c>)
 8024090:	22d2      	movs	r2, #210	; 0xd2
 8024092:	490e      	ldr	r1, [pc, #56]	; (80240cc <ip_reass_free_complete_datagram+0x144>)
 8024094:	4809      	ldr	r0, [pc, #36]	; (80240bc <ip_reass_free_complete_datagram+0x134>)
 8024096:	f001 ff65 	bl	8025f64 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802409a:	4b0b      	ldr	r3, [pc, #44]	; (80240c8 <ip_reass_free_complete_datagram+0x140>)
 802409c:	881a      	ldrh	r2, [r3, #0]
 802409e:	8bfb      	ldrh	r3, [r7, #30]
 80240a0:	1ad3      	subs	r3, r2, r3
 80240a2:	b29a      	uxth	r2, r3
 80240a4:	4b08      	ldr	r3, [pc, #32]	; (80240c8 <ip_reass_free_complete_datagram+0x140>)
 80240a6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80240a8:	8bfb      	ldrh	r3, [r7, #30]
}
 80240aa:	4618      	mov	r0, r3
 80240ac:	3720      	adds	r7, #32
 80240ae:	46bd      	mov	sp, r7
 80240b0:	bd80      	pop	{r7, pc}
 80240b2:	bf00      	nop
 80240b4:	08029ab0 	.word	0x08029ab0
 80240b8:	08029aec 	.word	0x08029aec
 80240bc:	08029af8 	.word	0x08029af8
 80240c0:	08029b20 	.word	0x08029b20
 80240c4:	08029b34 	.word	0x08029b34
 80240c8:	2400d188 	.word	0x2400d188
 80240cc:	08029b54 	.word	0x08029b54

080240d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80240d0:	b580      	push	{r7, lr}
 80240d2:	b08a      	sub	sp, #40	; 0x28
 80240d4:	af00      	add	r7, sp, #0
 80240d6:	6078      	str	r0, [r7, #4]
 80240d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80240da:	2300      	movs	r3, #0
 80240dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80240de:	2300      	movs	r3, #0
 80240e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80240e2:	2300      	movs	r3, #0
 80240e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80240e6:	2300      	movs	r3, #0
 80240e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80240ea:	2300      	movs	r3, #0
 80240ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80240ee:	4b28      	ldr	r3, [pc, #160]	; (8024190 <ip_reass_remove_oldest_datagram+0xc0>)
 80240f0:	681b      	ldr	r3, [r3, #0]
 80240f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80240f4:	e030      	b.n	8024158 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80240f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80240f8:	695a      	ldr	r2, [r3, #20]
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	68db      	ldr	r3, [r3, #12]
 80240fe:	429a      	cmp	r2, r3
 8024100:	d10c      	bne.n	802411c <ip_reass_remove_oldest_datagram+0x4c>
 8024102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024104:	699a      	ldr	r2, [r3, #24]
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	691b      	ldr	r3, [r3, #16]
 802410a:	429a      	cmp	r2, r3
 802410c:	d106      	bne.n	802411c <ip_reass_remove_oldest_datagram+0x4c>
 802410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024110:	899a      	ldrh	r2, [r3, #12]
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	889b      	ldrh	r3, [r3, #4]
 8024116:	b29b      	uxth	r3, r3
 8024118:	429a      	cmp	r2, r3
 802411a:	d014      	beq.n	8024146 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 802411c:	693b      	ldr	r3, [r7, #16]
 802411e:	3301      	adds	r3, #1
 8024120:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8024122:	6a3b      	ldr	r3, [r7, #32]
 8024124:	2b00      	cmp	r3, #0
 8024126:	d104      	bne.n	8024132 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8024128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802412a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802412c:	69fb      	ldr	r3, [r7, #28]
 802412e:	61bb      	str	r3, [r7, #24]
 8024130:	e009      	b.n	8024146 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8024132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024134:	7fda      	ldrb	r2, [r3, #31]
 8024136:	6a3b      	ldr	r3, [r7, #32]
 8024138:	7fdb      	ldrb	r3, [r3, #31]
 802413a:	429a      	cmp	r2, r3
 802413c:	d803      	bhi.n	8024146 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024140:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8024142:	69fb      	ldr	r3, [r7, #28]
 8024144:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8024146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	2b00      	cmp	r3, #0
 802414c:	d001      	beq.n	8024152 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024150:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8024152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024154:	681b      	ldr	r3, [r3, #0]
 8024156:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8024158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802415a:	2b00      	cmp	r3, #0
 802415c:	d1cb      	bne.n	80240f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802415e:	6a3b      	ldr	r3, [r7, #32]
 8024160:	2b00      	cmp	r3, #0
 8024162:	d008      	beq.n	8024176 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8024164:	69b9      	ldr	r1, [r7, #24]
 8024166:	6a38      	ldr	r0, [r7, #32]
 8024168:	f7ff ff0e 	bl	8023f88 <ip_reass_free_complete_datagram>
 802416c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802416e:	697a      	ldr	r2, [r7, #20]
 8024170:	68fb      	ldr	r3, [r7, #12]
 8024172:	4413      	add	r3, r2
 8024174:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8024176:	697a      	ldr	r2, [r7, #20]
 8024178:	683b      	ldr	r3, [r7, #0]
 802417a:	429a      	cmp	r2, r3
 802417c:	da02      	bge.n	8024184 <ip_reass_remove_oldest_datagram+0xb4>
 802417e:	693b      	ldr	r3, [r7, #16]
 8024180:	2b01      	cmp	r3, #1
 8024182:	dcac      	bgt.n	80240de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8024184:	697b      	ldr	r3, [r7, #20]
}
 8024186:	4618      	mov	r0, r3
 8024188:	3728      	adds	r7, #40	; 0x28
 802418a:	46bd      	mov	sp, r7
 802418c:	bd80      	pop	{r7, pc}
 802418e:	bf00      	nop
 8024190:	2400d184 	.word	0x2400d184

08024194 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8024194:	b580      	push	{r7, lr}
 8024196:	b084      	sub	sp, #16
 8024198:	af00      	add	r7, sp, #0
 802419a:	6078      	str	r0, [r7, #4]
 802419c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802419e:	2004      	movs	r0, #4
 80241a0:	f7f5 fad6 	bl	8019750 <memp_malloc>
 80241a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80241a6:	68fb      	ldr	r3, [r7, #12]
 80241a8:	2b00      	cmp	r3, #0
 80241aa:	d110      	bne.n	80241ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80241ac:	6839      	ldr	r1, [r7, #0]
 80241ae:	6878      	ldr	r0, [r7, #4]
 80241b0:	f7ff ff8e 	bl	80240d0 <ip_reass_remove_oldest_datagram>
 80241b4:	4602      	mov	r2, r0
 80241b6:	683b      	ldr	r3, [r7, #0]
 80241b8:	4293      	cmp	r3, r2
 80241ba:	dc03      	bgt.n	80241c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80241bc:	2004      	movs	r0, #4
 80241be:	f7f5 fac7 	bl	8019750 <memp_malloc>
 80241c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80241c4:	68fb      	ldr	r3, [r7, #12]
 80241c6:	2b00      	cmp	r3, #0
 80241c8:	d101      	bne.n	80241ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80241ca:	2300      	movs	r3, #0
 80241cc:	e016      	b.n	80241fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80241ce:	2220      	movs	r2, #32
 80241d0:	2100      	movs	r1, #0
 80241d2:	68f8      	ldr	r0, [r7, #12]
 80241d4:	f001 fdc8 	bl	8025d68 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80241d8:	68fb      	ldr	r3, [r7, #12]
 80241da:	220f      	movs	r2, #15
 80241dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80241de:	4b09      	ldr	r3, [pc, #36]	; (8024204 <ip_reass_enqueue_new_datagram+0x70>)
 80241e0:	681a      	ldr	r2, [r3, #0]
 80241e2:	68fb      	ldr	r3, [r7, #12]
 80241e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80241e6:	4a07      	ldr	r2, [pc, #28]	; (8024204 <ip_reass_enqueue_new_datagram+0x70>)
 80241e8:	68fb      	ldr	r3, [r7, #12]
 80241ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80241ec:	68fb      	ldr	r3, [r7, #12]
 80241ee:	3308      	adds	r3, #8
 80241f0:	2214      	movs	r2, #20
 80241f2:	6879      	ldr	r1, [r7, #4]
 80241f4:	4618      	mov	r0, r3
 80241f6:	f001 fda9 	bl	8025d4c <memcpy>
  return ipr;
 80241fa:	68fb      	ldr	r3, [r7, #12]
}
 80241fc:	4618      	mov	r0, r3
 80241fe:	3710      	adds	r7, #16
 8024200:	46bd      	mov	sp, r7
 8024202:	bd80      	pop	{r7, pc}
 8024204:	2400d184 	.word	0x2400d184

08024208 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024208:	b580      	push	{r7, lr}
 802420a:	b082      	sub	sp, #8
 802420c:	af00      	add	r7, sp, #0
 802420e:	6078      	str	r0, [r7, #4]
 8024210:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8024212:	4b10      	ldr	r3, [pc, #64]	; (8024254 <ip_reass_dequeue_datagram+0x4c>)
 8024214:	681b      	ldr	r3, [r3, #0]
 8024216:	687a      	ldr	r2, [r7, #4]
 8024218:	429a      	cmp	r2, r3
 802421a:	d104      	bne.n	8024226 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	681b      	ldr	r3, [r3, #0]
 8024220:	4a0c      	ldr	r2, [pc, #48]	; (8024254 <ip_reass_dequeue_datagram+0x4c>)
 8024222:	6013      	str	r3, [r2, #0]
 8024224:	e00d      	b.n	8024242 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024226:	683b      	ldr	r3, [r7, #0]
 8024228:	2b00      	cmp	r3, #0
 802422a:	d106      	bne.n	802423a <ip_reass_dequeue_datagram+0x32>
 802422c:	4b0a      	ldr	r3, [pc, #40]	; (8024258 <ip_reass_dequeue_datagram+0x50>)
 802422e:	f240 1245 	movw	r2, #325	; 0x145
 8024232:	490a      	ldr	r1, [pc, #40]	; (802425c <ip_reass_dequeue_datagram+0x54>)
 8024234:	480a      	ldr	r0, [pc, #40]	; (8024260 <ip_reass_dequeue_datagram+0x58>)
 8024236:	f001 fe95 	bl	8025f64 <iprintf>
    prev->next = ipr->next;
 802423a:	687b      	ldr	r3, [r7, #4]
 802423c:	681a      	ldr	r2, [r3, #0]
 802423e:	683b      	ldr	r3, [r7, #0]
 8024240:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8024242:	6879      	ldr	r1, [r7, #4]
 8024244:	2004      	movs	r0, #4
 8024246:	f7f5 faf9 	bl	801983c <memp_free>
}
 802424a:	bf00      	nop
 802424c:	3708      	adds	r7, #8
 802424e:	46bd      	mov	sp, r7
 8024250:	bd80      	pop	{r7, pc}
 8024252:	bf00      	nop
 8024254:	2400d184 	.word	0x2400d184
 8024258:	08029ab0 	.word	0x08029ab0
 802425c:	08029b78 	.word	0x08029b78
 8024260:	08029af8 	.word	0x08029af8

08024264 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8024264:	b580      	push	{r7, lr}
 8024266:	b08c      	sub	sp, #48	; 0x30
 8024268:	af00      	add	r7, sp, #0
 802426a:	60f8      	str	r0, [r7, #12]
 802426c:	60b9      	str	r1, [r7, #8]
 802426e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8024270:	2300      	movs	r3, #0
 8024272:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8024274:	2301      	movs	r3, #1
 8024276:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8024278:	68bb      	ldr	r3, [r7, #8]
 802427a:	685b      	ldr	r3, [r3, #4]
 802427c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802427e:	69fb      	ldr	r3, [r7, #28]
 8024280:	885b      	ldrh	r3, [r3, #2]
 8024282:	b29b      	uxth	r3, r3
 8024284:	4618      	mov	r0, r3
 8024286:	f7f4 fcd3 	bl	8018c30 <lwip_htons>
 802428a:	4603      	mov	r3, r0
 802428c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802428e:	69fb      	ldr	r3, [r7, #28]
 8024290:	781b      	ldrb	r3, [r3, #0]
 8024292:	f003 030f 	and.w	r3, r3, #15
 8024296:	b2db      	uxtb	r3, r3
 8024298:	009b      	lsls	r3, r3, #2
 802429a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 802429c:	7e7b      	ldrb	r3, [r7, #25]
 802429e:	b29b      	uxth	r3, r3
 80242a0:	8b7a      	ldrh	r2, [r7, #26]
 80242a2:	429a      	cmp	r2, r3
 80242a4:	d202      	bcs.n	80242ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80242a6:	f04f 33ff 	mov.w	r3, #4294967295
 80242aa:	e135      	b.n	8024518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80242ac:	7e7b      	ldrb	r3, [r7, #25]
 80242ae:	b29b      	uxth	r3, r3
 80242b0:	8b7a      	ldrh	r2, [r7, #26]
 80242b2:	1ad3      	subs	r3, r2, r3
 80242b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80242b6:	69fb      	ldr	r3, [r7, #28]
 80242b8:	88db      	ldrh	r3, [r3, #6]
 80242ba:	b29b      	uxth	r3, r3
 80242bc:	4618      	mov	r0, r3
 80242be:	f7f4 fcb7 	bl	8018c30 <lwip_htons>
 80242c2:	4603      	mov	r3, r0
 80242c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80242c8:	b29b      	uxth	r3, r3
 80242ca:	00db      	lsls	r3, r3, #3
 80242cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80242ce:	68bb      	ldr	r3, [r7, #8]
 80242d0:	685b      	ldr	r3, [r3, #4]
 80242d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80242d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242d6:	2200      	movs	r2, #0
 80242d8:	701a      	strb	r2, [r3, #0]
 80242da:	2200      	movs	r2, #0
 80242dc:	705a      	strb	r2, [r3, #1]
 80242de:	2200      	movs	r2, #0
 80242e0:	709a      	strb	r2, [r3, #2]
 80242e2:	2200      	movs	r2, #0
 80242e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80242e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242e8:	8afa      	ldrh	r2, [r7, #22]
 80242ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80242ec:	8afa      	ldrh	r2, [r7, #22]
 80242ee:	8b7b      	ldrh	r3, [r7, #26]
 80242f0:	4413      	add	r3, r2
 80242f2:	b29a      	uxth	r2, r3
 80242f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80242f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242fa:	88db      	ldrh	r3, [r3, #6]
 80242fc:	b29b      	uxth	r3, r3
 80242fe:	8afa      	ldrh	r2, [r7, #22]
 8024300:	429a      	cmp	r2, r3
 8024302:	d902      	bls.n	802430a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024304:	f04f 33ff 	mov.w	r3, #4294967295
 8024308:	e106      	b.n	8024518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802430a:	68fb      	ldr	r3, [r7, #12]
 802430c:	685b      	ldr	r3, [r3, #4]
 802430e:	627b      	str	r3, [r7, #36]	; 0x24
 8024310:	e068      	b.n	80243e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8024312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024314:	685b      	ldr	r3, [r3, #4]
 8024316:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8024318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802431a:	889b      	ldrh	r3, [r3, #4]
 802431c:	b29a      	uxth	r2, r3
 802431e:	693b      	ldr	r3, [r7, #16]
 8024320:	889b      	ldrh	r3, [r3, #4]
 8024322:	b29b      	uxth	r3, r3
 8024324:	429a      	cmp	r2, r3
 8024326:	d235      	bcs.n	8024394 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8024328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802432c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 802432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024330:	2b00      	cmp	r3, #0
 8024332:	d020      	beq.n	8024376 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8024334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024336:	889b      	ldrh	r3, [r3, #4]
 8024338:	b29a      	uxth	r2, r3
 802433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802433c:	88db      	ldrh	r3, [r3, #6]
 802433e:	b29b      	uxth	r3, r3
 8024340:	429a      	cmp	r2, r3
 8024342:	d307      	bcc.n	8024354 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8024344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024346:	88db      	ldrh	r3, [r3, #6]
 8024348:	b29a      	uxth	r2, r3
 802434a:	693b      	ldr	r3, [r7, #16]
 802434c:	889b      	ldrh	r3, [r3, #4]
 802434e:	b29b      	uxth	r3, r3
 8024350:	429a      	cmp	r2, r3
 8024352:	d902      	bls.n	802435a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024354:	f04f 33ff 	mov.w	r3, #4294967295
 8024358:	e0de      	b.n	8024518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802435c:	68ba      	ldr	r2, [r7, #8]
 802435e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8024360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024362:	88db      	ldrh	r3, [r3, #6]
 8024364:	b29a      	uxth	r2, r3
 8024366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024368:	889b      	ldrh	r3, [r3, #4]
 802436a:	b29b      	uxth	r3, r3
 802436c:	429a      	cmp	r2, r3
 802436e:	d03d      	beq.n	80243ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024370:	2300      	movs	r3, #0
 8024372:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8024374:	e03a      	b.n	80243ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8024376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024378:	88db      	ldrh	r3, [r3, #6]
 802437a:	b29a      	uxth	r2, r3
 802437c:	693b      	ldr	r3, [r7, #16]
 802437e:	889b      	ldrh	r3, [r3, #4]
 8024380:	b29b      	uxth	r3, r3
 8024382:	429a      	cmp	r2, r3
 8024384:	d902      	bls.n	802438c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024386:	f04f 33ff 	mov.w	r3, #4294967295
 802438a:	e0c5      	b.n	8024518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 802438c:	68fb      	ldr	r3, [r7, #12]
 802438e:	68ba      	ldr	r2, [r7, #8]
 8024390:	605a      	str	r2, [r3, #4]
      break;
 8024392:	e02b      	b.n	80243ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8024394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024396:	889b      	ldrh	r3, [r3, #4]
 8024398:	b29a      	uxth	r2, r3
 802439a:	693b      	ldr	r3, [r7, #16]
 802439c:	889b      	ldrh	r3, [r3, #4]
 802439e:	b29b      	uxth	r3, r3
 80243a0:	429a      	cmp	r2, r3
 80243a2:	d102      	bne.n	80243aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80243a4:	f04f 33ff 	mov.w	r3, #4294967295
 80243a8:	e0b6      	b.n	8024518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80243aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80243ac:	889b      	ldrh	r3, [r3, #4]
 80243ae:	b29a      	uxth	r2, r3
 80243b0:	693b      	ldr	r3, [r7, #16]
 80243b2:	88db      	ldrh	r3, [r3, #6]
 80243b4:	b29b      	uxth	r3, r3
 80243b6:	429a      	cmp	r2, r3
 80243b8:	d202      	bcs.n	80243c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80243ba:	f04f 33ff 	mov.w	r3, #4294967295
 80243be:	e0ab      	b.n	8024518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80243c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243c2:	2b00      	cmp	r3, #0
 80243c4:	d009      	beq.n	80243da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80243c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243c8:	88db      	ldrh	r3, [r3, #6]
 80243ca:	b29a      	uxth	r2, r3
 80243cc:	693b      	ldr	r3, [r7, #16]
 80243ce:	889b      	ldrh	r3, [r3, #4]
 80243d0:	b29b      	uxth	r3, r3
 80243d2:	429a      	cmp	r2, r3
 80243d4:	d001      	beq.n	80243da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80243d6:	2300      	movs	r3, #0
 80243d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80243da:	693b      	ldr	r3, [r7, #16]
 80243dc:	681b      	ldr	r3, [r3, #0]
 80243de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80243e0:	693b      	ldr	r3, [r7, #16]
 80243e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80243e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243e6:	2b00      	cmp	r3, #0
 80243e8:	d193      	bne.n	8024312 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80243ea:	e000      	b.n	80243ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80243ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80243ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243f0:	2b00      	cmp	r3, #0
 80243f2:	d12d      	bne.n	8024450 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80243f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243f6:	2b00      	cmp	r3, #0
 80243f8:	d01c      	beq.n	8024434 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80243fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243fc:	88db      	ldrh	r3, [r3, #6]
 80243fe:	b29a      	uxth	r2, r3
 8024400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024402:	889b      	ldrh	r3, [r3, #4]
 8024404:	b29b      	uxth	r3, r3
 8024406:	429a      	cmp	r2, r3
 8024408:	d906      	bls.n	8024418 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802440a:	4b45      	ldr	r3, [pc, #276]	; (8024520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802440c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8024410:	4944      	ldr	r1, [pc, #272]	; (8024524 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8024412:	4845      	ldr	r0, [pc, #276]	; (8024528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024414:	f001 fda6 	bl	8025f64 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8024418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802441a:	68ba      	ldr	r2, [r7, #8]
 802441c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024420:	88db      	ldrh	r3, [r3, #6]
 8024422:	b29a      	uxth	r2, r3
 8024424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024426:	889b      	ldrh	r3, [r3, #4]
 8024428:	b29b      	uxth	r3, r3
 802442a:	429a      	cmp	r2, r3
 802442c:	d010      	beq.n	8024450 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 802442e:	2300      	movs	r3, #0
 8024430:	623b      	str	r3, [r7, #32]
 8024432:	e00d      	b.n	8024450 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8024434:	68fb      	ldr	r3, [r7, #12]
 8024436:	685b      	ldr	r3, [r3, #4]
 8024438:	2b00      	cmp	r3, #0
 802443a:	d006      	beq.n	802444a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 802443c:	4b38      	ldr	r3, [pc, #224]	; (8024520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802443e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8024442:	493a      	ldr	r1, [pc, #232]	; (802452c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8024444:	4838      	ldr	r0, [pc, #224]	; (8024528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024446:	f001 fd8d 	bl	8025f64 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802444a:	68fb      	ldr	r3, [r7, #12]
 802444c:	68ba      	ldr	r2, [r7, #8]
 802444e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024450:	687b      	ldr	r3, [r7, #4]
 8024452:	2b00      	cmp	r3, #0
 8024454:	d105      	bne.n	8024462 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8024456:	68fb      	ldr	r3, [r7, #12]
 8024458:	7f9b      	ldrb	r3, [r3, #30]
 802445a:	f003 0301 	and.w	r3, r3, #1
 802445e:	2b00      	cmp	r3, #0
 8024460:	d059      	beq.n	8024516 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8024462:	6a3b      	ldr	r3, [r7, #32]
 8024464:	2b00      	cmp	r3, #0
 8024466:	d04f      	beq.n	8024508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024468:	68fb      	ldr	r3, [r7, #12]
 802446a:	685b      	ldr	r3, [r3, #4]
 802446c:	2b00      	cmp	r3, #0
 802446e:	d006      	beq.n	802447e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8024470:	68fb      	ldr	r3, [r7, #12]
 8024472:	685b      	ldr	r3, [r3, #4]
 8024474:	685b      	ldr	r3, [r3, #4]
 8024476:	889b      	ldrh	r3, [r3, #4]
 8024478:	b29b      	uxth	r3, r3
 802447a:	2b00      	cmp	r3, #0
 802447c:	d002      	beq.n	8024484 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802447e:	2300      	movs	r3, #0
 8024480:	623b      	str	r3, [r7, #32]
 8024482:	e041      	b.n	8024508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8024484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024486:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8024488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802448a:	681b      	ldr	r3, [r3, #0]
 802448c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802448e:	e012      	b.n	80244b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8024490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024492:	685b      	ldr	r3, [r3, #4]
 8024494:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8024496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024498:	88db      	ldrh	r3, [r3, #6]
 802449a:	b29a      	uxth	r2, r3
 802449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802449e:	889b      	ldrh	r3, [r3, #4]
 80244a0:	b29b      	uxth	r3, r3
 80244a2:	429a      	cmp	r2, r3
 80244a4:	d002      	beq.n	80244ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80244a6:	2300      	movs	r3, #0
 80244a8:	623b      	str	r3, [r7, #32]
            break;
 80244aa:	e007      	b.n	80244bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80244ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80244b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244b2:	681b      	ldr	r3, [r3, #0]
 80244b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80244b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	d1e9      	bne.n	8024490 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80244bc:	6a3b      	ldr	r3, [r7, #32]
 80244be:	2b00      	cmp	r3, #0
 80244c0:	d022      	beq.n	8024508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80244c2:	68fb      	ldr	r3, [r7, #12]
 80244c4:	685b      	ldr	r3, [r3, #4]
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	d106      	bne.n	80244d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80244ca:	4b15      	ldr	r3, [pc, #84]	; (8024520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80244cc:	f240 12df 	movw	r2, #479	; 0x1df
 80244d0:	4917      	ldr	r1, [pc, #92]	; (8024530 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80244d2:	4815      	ldr	r0, [pc, #84]	; (8024528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80244d4:	f001 fd46 	bl	8025f64 <iprintf>
          LWIP_ASSERT("sanity check",
 80244d8:	68fb      	ldr	r3, [r7, #12]
 80244da:	685b      	ldr	r3, [r3, #4]
 80244dc:	685b      	ldr	r3, [r3, #4]
 80244de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80244e0:	429a      	cmp	r2, r3
 80244e2:	d106      	bne.n	80244f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80244e4:	4b0e      	ldr	r3, [pc, #56]	; (8024520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80244e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80244ea:	4911      	ldr	r1, [pc, #68]	; (8024530 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80244ec:	480e      	ldr	r0, [pc, #56]	; (8024528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80244ee:	f001 fd39 	bl	8025f64 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80244f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244f4:	681b      	ldr	r3, [r3, #0]
 80244f6:	2b00      	cmp	r3, #0
 80244f8:	d006      	beq.n	8024508 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80244fa:	4b09      	ldr	r3, [pc, #36]	; (8024520 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80244fc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8024500:	490c      	ldr	r1, [pc, #48]	; (8024534 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8024502:	4809      	ldr	r0, [pc, #36]	; (8024528 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024504:	f001 fd2e 	bl	8025f64 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8024508:	6a3b      	ldr	r3, [r7, #32]
 802450a:	2b00      	cmp	r3, #0
 802450c:	bf14      	ite	ne
 802450e:	2301      	movne	r3, #1
 8024510:	2300      	moveq	r3, #0
 8024512:	b2db      	uxtb	r3, r3
 8024514:	e000      	b.n	8024518 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8024516:	2300      	movs	r3, #0
}
 8024518:	4618      	mov	r0, r3
 802451a:	3730      	adds	r7, #48	; 0x30
 802451c:	46bd      	mov	sp, r7
 802451e:	bd80      	pop	{r7, pc}
 8024520:	08029ab0 	.word	0x08029ab0
 8024524:	08029b94 	.word	0x08029b94
 8024528:	08029af8 	.word	0x08029af8
 802452c:	08029bb4 	.word	0x08029bb4
 8024530:	08029bec 	.word	0x08029bec
 8024534:	08029bfc 	.word	0x08029bfc

08024538 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8024538:	b580      	push	{r7, lr}
 802453a:	b08e      	sub	sp, #56	; 0x38
 802453c:	af00      	add	r7, sp, #0
 802453e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8024540:	687b      	ldr	r3, [r7, #4]
 8024542:	685b      	ldr	r3, [r3, #4]
 8024544:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8024546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024548:	781b      	ldrb	r3, [r3, #0]
 802454a:	f003 030f 	and.w	r3, r3, #15
 802454e:	b2db      	uxtb	r3, r3
 8024550:	009b      	lsls	r3, r3, #2
 8024552:	b2db      	uxtb	r3, r3
 8024554:	2b14      	cmp	r3, #20
 8024556:	f040 8171 	bne.w	802483c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802455c:	88db      	ldrh	r3, [r3, #6]
 802455e:	b29b      	uxth	r3, r3
 8024560:	4618      	mov	r0, r3
 8024562:	f7f4 fb65 	bl	8018c30 <lwip_htons>
 8024566:	4603      	mov	r3, r0
 8024568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802456c:	b29b      	uxth	r3, r3
 802456e:	00db      	lsls	r3, r3, #3
 8024570:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024574:	885b      	ldrh	r3, [r3, #2]
 8024576:	b29b      	uxth	r3, r3
 8024578:	4618      	mov	r0, r3
 802457a:	f7f4 fb59 	bl	8018c30 <lwip_htons>
 802457e:	4603      	mov	r3, r0
 8024580:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8024582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024584:	781b      	ldrb	r3, [r3, #0]
 8024586:	f003 030f 	and.w	r3, r3, #15
 802458a:	b2db      	uxtb	r3, r3
 802458c:	009b      	lsls	r3, r3, #2
 802458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8024592:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024596:	b29b      	uxth	r3, r3
 8024598:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802459a:	429a      	cmp	r2, r3
 802459c:	f0c0 8150 	bcc.w	8024840 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80245a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80245a4:	b29b      	uxth	r3, r3
 80245a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80245a8:	1ad3      	subs	r3, r2, r3
 80245aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80245ac:	6878      	ldr	r0, [r7, #4]
 80245ae:	f7f6 f883 	bl	801a6b8 <pbuf_clen>
 80245b2:	4603      	mov	r3, r0
 80245b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80245b6:	4b8c      	ldr	r3, [pc, #560]	; (80247e8 <ip4_reass+0x2b0>)
 80245b8:	881b      	ldrh	r3, [r3, #0]
 80245ba:	461a      	mov	r2, r3
 80245bc:	8c3b      	ldrh	r3, [r7, #32]
 80245be:	4413      	add	r3, r2
 80245c0:	2b0a      	cmp	r3, #10
 80245c2:	dd10      	ble.n	80245e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80245c4:	8c3b      	ldrh	r3, [r7, #32]
 80245c6:	4619      	mov	r1, r3
 80245c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80245ca:	f7ff fd81 	bl	80240d0 <ip_reass_remove_oldest_datagram>
 80245ce:	4603      	mov	r3, r0
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	f000 8137 	beq.w	8024844 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80245d6:	4b84      	ldr	r3, [pc, #528]	; (80247e8 <ip4_reass+0x2b0>)
 80245d8:	881b      	ldrh	r3, [r3, #0]
 80245da:	461a      	mov	r2, r3
 80245dc:	8c3b      	ldrh	r3, [r7, #32]
 80245de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80245e0:	2b0a      	cmp	r3, #10
 80245e2:	f300 812f 	bgt.w	8024844 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80245e6:	4b81      	ldr	r3, [pc, #516]	; (80247ec <ip4_reass+0x2b4>)
 80245e8:	681b      	ldr	r3, [r3, #0]
 80245ea:	633b      	str	r3, [r7, #48]	; 0x30
 80245ec:	e015      	b.n	802461a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80245ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245f0:	695a      	ldr	r2, [r3, #20]
 80245f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80245f4:	68db      	ldr	r3, [r3, #12]
 80245f6:	429a      	cmp	r2, r3
 80245f8:	d10c      	bne.n	8024614 <ip4_reass+0xdc>
 80245fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245fc:	699a      	ldr	r2, [r3, #24]
 80245fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024600:	691b      	ldr	r3, [r3, #16]
 8024602:	429a      	cmp	r2, r3
 8024604:	d106      	bne.n	8024614 <ip4_reass+0xdc>
 8024606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024608:	899a      	ldrh	r2, [r3, #12]
 802460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802460c:	889b      	ldrh	r3, [r3, #4]
 802460e:	b29b      	uxth	r3, r3
 8024610:	429a      	cmp	r2, r3
 8024612:	d006      	beq.n	8024622 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8024614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024616:	681b      	ldr	r3, [r3, #0]
 8024618:	633b      	str	r3, [r7, #48]	; 0x30
 802461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802461c:	2b00      	cmp	r3, #0
 802461e:	d1e6      	bne.n	80245ee <ip4_reass+0xb6>
 8024620:	e000      	b.n	8024624 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8024622:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8024624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024626:	2b00      	cmp	r3, #0
 8024628:	d109      	bne.n	802463e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802462a:	8c3b      	ldrh	r3, [r7, #32]
 802462c:	4619      	mov	r1, r3
 802462e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024630:	f7ff fdb0 	bl	8024194 <ip_reass_enqueue_new_datagram>
 8024634:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8024636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024638:	2b00      	cmp	r3, #0
 802463a:	d11c      	bne.n	8024676 <ip4_reass+0x13e>
      goto nullreturn;
 802463c:	e105      	b.n	802484a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024640:	88db      	ldrh	r3, [r3, #6]
 8024642:	b29b      	uxth	r3, r3
 8024644:	4618      	mov	r0, r3
 8024646:	f7f4 faf3 	bl	8018c30 <lwip_htons>
 802464a:	4603      	mov	r3, r0
 802464c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024650:	2b00      	cmp	r3, #0
 8024652:	d110      	bne.n	8024676 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8024654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024656:	89db      	ldrh	r3, [r3, #14]
 8024658:	4618      	mov	r0, r3
 802465a:	f7f4 fae9 	bl	8018c30 <lwip_htons>
 802465e:	4603      	mov	r3, r0
 8024660:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024664:	2b00      	cmp	r3, #0
 8024666:	d006      	beq.n	8024676 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8024668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802466a:	3308      	adds	r3, #8
 802466c:	2214      	movs	r2, #20
 802466e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024670:	4618      	mov	r0, r3
 8024672:	f001 fb6b 	bl	8025d4c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8024676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024678:	88db      	ldrh	r3, [r3, #6]
 802467a:	b29b      	uxth	r3, r3
 802467c:	f003 0320 	and.w	r3, r3, #32
 8024680:	2b00      	cmp	r3, #0
 8024682:	bf0c      	ite	eq
 8024684:	2301      	moveq	r3, #1
 8024686:	2300      	movne	r3, #0
 8024688:	b2db      	uxtb	r3, r3
 802468a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 802468c:	69fb      	ldr	r3, [r7, #28]
 802468e:	2b00      	cmp	r3, #0
 8024690:	d00e      	beq.n	80246b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8024692:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8024694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024696:	4413      	add	r3, r2
 8024698:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802469a:	8b7a      	ldrh	r2, [r7, #26]
 802469c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802469e:	429a      	cmp	r2, r3
 80246a0:	f0c0 80a0 	bcc.w	80247e4 <ip4_reass+0x2ac>
 80246a4:	8b7b      	ldrh	r3, [r7, #26]
 80246a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80246aa:	4293      	cmp	r3, r2
 80246ac:	f200 809a 	bhi.w	80247e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80246b0:	69fa      	ldr	r2, [r7, #28]
 80246b2:	6879      	ldr	r1, [r7, #4]
 80246b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80246b6:	f7ff fdd5 	bl	8024264 <ip_reass_chain_frag_into_datagram_and_validate>
 80246ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80246bc:	697b      	ldr	r3, [r7, #20]
 80246be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80246c2:	f000 809b 	beq.w	80247fc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80246c6:	4b48      	ldr	r3, [pc, #288]	; (80247e8 <ip4_reass+0x2b0>)
 80246c8:	881a      	ldrh	r2, [r3, #0]
 80246ca:	8c3b      	ldrh	r3, [r7, #32]
 80246cc:	4413      	add	r3, r2
 80246ce:	b29a      	uxth	r2, r3
 80246d0:	4b45      	ldr	r3, [pc, #276]	; (80247e8 <ip4_reass+0x2b0>)
 80246d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80246d4:	69fb      	ldr	r3, [r7, #28]
 80246d6:	2b00      	cmp	r3, #0
 80246d8:	d00d      	beq.n	80246f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80246da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80246dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80246de:	4413      	add	r3, r2
 80246e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80246e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80246e4:	8a7a      	ldrh	r2, [r7, #18]
 80246e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80246e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80246ea:	7f9b      	ldrb	r3, [r3, #30]
 80246ec:	f043 0301 	orr.w	r3, r3, #1
 80246f0:	b2da      	uxtb	r2, r3
 80246f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80246f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80246f6:	697b      	ldr	r3, [r7, #20]
 80246f8:	2b01      	cmp	r3, #1
 80246fa:	d171      	bne.n	80247e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80246fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80246fe:	8b9b      	ldrh	r3, [r3, #28]
 8024700:	3314      	adds	r3, #20
 8024702:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8024704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024706:	685b      	ldr	r3, [r3, #4]
 8024708:	685b      	ldr	r3, [r3, #4]
 802470a:	681b      	ldr	r3, [r3, #0]
 802470c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 802470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024710:	685b      	ldr	r3, [r3, #4]
 8024712:	685b      	ldr	r3, [r3, #4]
 8024714:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8024716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024718:	3308      	adds	r3, #8
 802471a:	2214      	movs	r2, #20
 802471c:	4619      	mov	r1, r3
 802471e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024720:	f001 fb14 	bl	8025d4c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8024724:	8a3b      	ldrh	r3, [r7, #16]
 8024726:	4618      	mov	r0, r3
 8024728:	f7f4 fa82 	bl	8018c30 <lwip_htons>
 802472c:	4603      	mov	r3, r0
 802472e:	461a      	mov	r2, r3
 8024730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024732:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8024734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024736:	2200      	movs	r2, #0
 8024738:	719a      	strb	r2, [r3, #6]
 802473a:	2200      	movs	r2, #0
 802473c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024740:	2200      	movs	r2, #0
 8024742:	729a      	strb	r2, [r3, #10]
 8024744:	2200      	movs	r2, #0
 8024746:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8024748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802474a:	685b      	ldr	r3, [r3, #4]
 802474c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802474e:	e00d      	b.n	802476c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8024750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024752:	685b      	ldr	r3, [r3, #4]
 8024754:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8024756:	2114      	movs	r1, #20
 8024758:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802475a:	f7f5 fe99 	bl	801a490 <pbuf_remove_header>
      pbuf_cat(p, r);
 802475e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024760:	6878      	ldr	r0, [r7, #4]
 8024762:	f7f5 ffe9 	bl	801a738 <pbuf_cat>
      r = iprh->next_pbuf;
 8024766:	68fb      	ldr	r3, [r7, #12]
 8024768:	681b      	ldr	r3, [r3, #0]
 802476a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 802476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802476e:	2b00      	cmp	r3, #0
 8024770:	d1ee      	bne.n	8024750 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8024772:	4b1e      	ldr	r3, [pc, #120]	; (80247ec <ip4_reass+0x2b4>)
 8024774:	681b      	ldr	r3, [r3, #0]
 8024776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024778:	429a      	cmp	r2, r3
 802477a:	d102      	bne.n	8024782 <ip4_reass+0x24a>
      ipr_prev = NULL;
 802477c:	2300      	movs	r3, #0
 802477e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024780:	e010      	b.n	80247a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024782:	4b1a      	ldr	r3, [pc, #104]	; (80247ec <ip4_reass+0x2b4>)
 8024784:	681b      	ldr	r3, [r3, #0]
 8024786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024788:	e007      	b.n	802479a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802478c:	681b      	ldr	r3, [r3, #0]
 802478e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024790:	429a      	cmp	r2, r3
 8024792:	d006      	beq.n	80247a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8024794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	62fb      	str	r3, [r7, #44]	; 0x2c
 802479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802479c:	2b00      	cmp	r3, #0
 802479e:	d1f4      	bne.n	802478a <ip4_reass+0x252>
 80247a0:	e000      	b.n	80247a4 <ip4_reass+0x26c>
          break;
 80247a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80247a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80247a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80247a8:	f7ff fd2e 	bl	8024208 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80247ac:	6878      	ldr	r0, [r7, #4]
 80247ae:	f7f5 ff83 	bl	801a6b8 <pbuf_clen>
 80247b2:	4603      	mov	r3, r0
 80247b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80247b6:	4b0c      	ldr	r3, [pc, #48]	; (80247e8 <ip4_reass+0x2b0>)
 80247b8:	881b      	ldrh	r3, [r3, #0]
 80247ba:	8c3a      	ldrh	r2, [r7, #32]
 80247bc:	429a      	cmp	r2, r3
 80247be:	d906      	bls.n	80247ce <ip4_reass+0x296>
 80247c0:	4b0b      	ldr	r3, [pc, #44]	; (80247f0 <ip4_reass+0x2b8>)
 80247c2:	f240 229b 	movw	r2, #667	; 0x29b
 80247c6:	490b      	ldr	r1, [pc, #44]	; (80247f4 <ip4_reass+0x2bc>)
 80247c8:	480b      	ldr	r0, [pc, #44]	; (80247f8 <ip4_reass+0x2c0>)
 80247ca:	f001 fbcb 	bl	8025f64 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80247ce:	4b06      	ldr	r3, [pc, #24]	; (80247e8 <ip4_reass+0x2b0>)
 80247d0:	881a      	ldrh	r2, [r3, #0]
 80247d2:	8c3b      	ldrh	r3, [r7, #32]
 80247d4:	1ad3      	subs	r3, r2, r3
 80247d6:	b29a      	uxth	r2, r3
 80247d8:	4b03      	ldr	r3, [pc, #12]	; (80247e8 <ip4_reass+0x2b0>)
 80247da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80247dc:	687b      	ldr	r3, [r7, #4]
 80247de:	e038      	b.n	8024852 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80247e0:	2300      	movs	r3, #0
 80247e2:	e036      	b.n	8024852 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80247e4:	bf00      	nop
 80247e6:	e00a      	b.n	80247fe <ip4_reass+0x2c6>
 80247e8:	2400d188 	.word	0x2400d188
 80247ec:	2400d184 	.word	0x2400d184
 80247f0:	08029ab0 	.word	0x08029ab0
 80247f4:	08029c20 	.word	0x08029c20
 80247f8:	08029af8 	.word	0x08029af8
    goto nullreturn_ipr;
 80247fc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80247fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024800:	2b00      	cmp	r3, #0
 8024802:	d106      	bne.n	8024812 <ip4_reass+0x2da>
 8024804:	4b15      	ldr	r3, [pc, #84]	; (802485c <ip4_reass+0x324>)
 8024806:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802480a:	4915      	ldr	r1, [pc, #84]	; (8024860 <ip4_reass+0x328>)
 802480c:	4815      	ldr	r0, [pc, #84]	; (8024864 <ip4_reass+0x32c>)
 802480e:	f001 fba9 	bl	8025f64 <iprintf>
  if (ipr->p == NULL) {
 8024812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024814:	685b      	ldr	r3, [r3, #4]
 8024816:	2b00      	cmp	r3, #0
 8024818:	d116      	bne.n	8024848 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802481a:	4b13      	ldr	r3, [pc, #76]	; (8024868 <ip4_reass+0x330>)
 802481c:	681b      	ldr	r3, [r3, #0]
 802481e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024820:	429a      	cmp	r2, r3
 8024822:	d006      	beq.n	8024832 <ip4_reass+0x2fa>
 8024824:	4b0d      	ldr	r3, [pc, #52]	; (802485c <ip4_reass+0x324>)
 8024826:	f240 22ab 	movw	r2, #683	; 0x2ab
 802482a:	4910      	ldr	r1, [pc, #64]	; (802486c <ip4_reass+0x334>)
 802482c:	480d      	ldr	r0, [pc, #52]	; (8024864 <ip4_reass+0x32c>)
 802482e:	f001 fb99 	bl	8025f64 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8024832:	2100      	movs	r1, #0
 8024834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024836:	f7ff fce7 	bl	8024208 <ip_reass_dequeue_datagram>
 802483a:	e006      	b.n	802484a <ip4_reass+0x312>
    goto nullreturn;
 802483c:	bf00      	nop
 802483e:	e004      	b.n	802484a <ip4_reass+0x312>
    goto nullreturn;
 8024840:	bf00      	nop
 8024842:	e002      	b.n	802484a <ip4_reass+0x312>
      goto nullreturn;
 8024844:	bf00      	nop
 8024846:	e000      	b.n	802484a <ip4_reass+0x312>
  }

nullreturn:
 8024848:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802484a:	6878      	ldr	r0, [r7, #4]
 802484c:	f7f5 fea6 	bl	801a59c <pbuf_free>
  return NULL;
 8024850:	2300      	movs	r3, #0
}
 8024852:	4618      	mov	r0, r3
 8024854:	3738      	adds	r7, #56	; 0x38
 8024856:	46bd      	mov	sp, r7
 8024858:	bd80      	pop	{r7, pc}
 802485a:	bf00      	nop
 802485c:	08029ab0 	.word	0x08029ab0
 8024860:	08029c3c 	.word	0x08029c3c
 8024864:	08029af8 	.word	0x08029af8
 8024868:	2400d184 	.word	0x2400d184
 802486c:	08029c48 	.word	0x08029c48

08024870 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8024870:	b580      	push	{r7, lr}
 8024872:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024874:	2005      	movs	r0, #5
 8024876:	f7f4 ff6b 	bl	8019750 <memp_malloc>
 802487a:	4603      	mov	r3, r0
}
 802487c:	4618      	mov	r0, r3
 802487e:	bd80      	pop	{r7, pc}

08024880 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b082      	sub	sp, #8
 8024884:	af00      	add	r7, sp, #0
 8024886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	2b00      	cmp	r3, #0
 802488c:	d106      	bne.n	802489c <ip_frag_free_pbuf_custom_ref+0x1c>
 802488e:	4b07      	ldr	r3, [pc, #28]	; (80248ac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8024890:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8024894:	4906      	ldr	r1, [pc, #24]	; (80248b0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8024896:	4807      	ldr	r0, [pc, #28]	; (80248b4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8024898:	f001 fb64 	bl	8025f64 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802489c:	6879      	ldr	r1, [r7, #4]
 802489e:	2005      	movs	r0, #5
 80248a0:	f7f4 ffcc 	bl	801983c <memp_free>
}
 80248a4:	bf00      	nop
 80248a6:	3708      	adds	r7, #8
 80248a8:	46bd      	mov	sp, r7
 80248aa:	bd80      	pop	{r7, pc}
 80248ac:	08029ab0 	.word	0x08029ab0
 80248b0:	08029c68 	.word	0x08029c68
 80248b4:	08029af8 	.word	0x08029af8

080248b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80248b8:	b580      	push	{r7, lr}
 80248ba:	b084      	sub	sp, #16
 80248bc:	af00      	add	r7, sp, #0
 80248be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80248c0:	687b      	ldr	r3, [r7, #4]
 80248c2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80248c4:	68fb      	ldr	r3, [r7, #12]
 80248c6:	2b00      	cmp	r3, #0
 80248c8:	d106      	bne.n	80248d8 <ipfrag_free_pbuf_custom+0x20>
 80248ca:	4b11      	ldr	r3, [pc, #68]	; (8024910 <ipfrag_free_pbuf_custom+0x58>)
 80248cc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80248d0:	4910      	ldr	r1, [pc, #64]	; (8024914 <ipfrag_free_pbuf_custom+0x5c>)
 80248d2:	4811      	ldr	r0, [pc, #68]	; (8024918 <ipfrag_free_pbuf_custom+0x60>)
 80248d4:	f001 fb46 	bl	8025f64 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80248d8:	68fa      	ldr	r2, [r7, #12]
 80248da:	687b      	ldr	r3, [r7, #4]
 80248dc:	429a      	cmp	r2, r3
 80248de:	d006      	beq.n	80248ee <ipfrag_free_pbuf_custom+0x36>
 80248e0:	4b0b      	ldr	r3, [pc, #44]	; (8024910 <ipfrag_free_pbuf_custom+0x58>)
 80248e2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80248e6:	490d      	ldr	r1, [pc, #52]	; (802491c <ipfrag_free_pbuf_custom+0x64>)
 80248e8:	480b      	ldr	r0, [pc, #44]	; (8024918 <ipfrag_free_pbuf_custom+0x60>)
 80248ea:	f001 fb3b 	bl	8025f64 <iprintf>
  if (pcr->original != NULL) {
 80248ee:	68fb      	ldr	r3, [r7, #12]
 80248f0:	695b      	ldr	r3, [r3, #20]
 80248f2:	2b00      	cmp	r3, #0
 80248f4:	d004      	beq.n	8024900 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80248f6:	68fb      	ldr	r3, [r7, #12]
 80248f8:	695b      	ldr	r3, [r3, #20]
 80248fa:	4618      	mov	r0, r3
 80248fc:	f7f5 fe4e 	bl	801a59c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8024900:	68f8      	ldr	r0, [r7, #12]
 8024902:	f7ff ffbd 	bl	8024880 <ip_frag_free_pbuf_custom_ref>
}
 8024906:	bf00      	nop
 8024908:	3710      	adds	r7, #16
 802490a:	46bd      	mov	sp, r7
 802490c:	bd80      	pop	{r7, pc}
 802490e:	bf00      	nop
 8024910:	08029ab0 	.word	0x08029ab0
 8024914:	08029c74 	.word	0x08029c74
 8024918:	08029af8 	.word	0x08029af8
 802491c:	08029c80 	.word	0x08029c80

08024920 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8024920:	b580      	push	{r7, lr}
 8024922:	b094      	sub	sp, #80	; 0x50
 8024924:	af02      	add	r7, sp, #8
 8024926:	60f8      	str	r0, [r7, #12]
 8024928:	60b9      	str	r1, [r7, #8]
 802492a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 802492c:	2300      	movs	r3, #0
 802492e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8024932:	68bb      	ldr	r3, [r7, #8]
 8024934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024936:	3b14      	subs	r3, #20
 8024938:	2b00      	cmp	r3, #0
 802493a:	da00      	bge.n	802493e <ip4_frag+0x1e>
 802493c:	3307      	adds	r3, #7
 802493e:	10db      	asrs	r3, r3, #3
 8024940:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8024942:	2314      	movs	r3, #20
 8024944:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8024946:	68fb      	ldr	r3, [r7, #12]
 8024948:	685b      	ldr	r3, [r3, #4]
 802494a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 802494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802494e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8024950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024952:	781b      	ldrb	r3, [r3, #0]
 8024954:	f003 030f 	and.w	r3, r3, #15
 8024958:	b2db      	uxtb	r3, r3
 802495a:	009b      	lsls	r3, r3, #2
 802495c:	b2db      	uxtb	r3, r3
 802495e:	2b14      	cmp	r3, #20
 8024960:	d002      	beq.n	8024968 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8024962:	f06f 0305 	mvn.w	r3, #5
 8024966:	e110      	b.n	8024b8a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8024968:	68fb      	ldr	r3, [r7, #12]
 802496a:	895b      	ldrh	r3, [r3, #10]
 802496c:	2b13      	cmp	r3, #19
 802496e:	d809      	bhi.n	8024984 <ip4_frag+0x64>
 8024970:	4b88      	ldr	r3, [pc, #544]	; (8024b94 <ip4_frag+0x274>)
 8024972:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8024976:	4988      	ldr	r1, [pc, #544]	; (8024b98 <ip4_frag+0x278>)
 8024978:	4888      	ldr	r0, [pc, #544]	; (8024b9c <ip4_frag+0x27c>)
 802497a:	f001 faf3 	bl	8025f64 <iprintf>
 802497e:	f06f 0305 	mvn.w	r3, #5
 8024982:	e102      	b.n	8024b8a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8024984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024986:	88db      	ldrh	r3, [r3, #6]
 8024988:	b29b      	uxth	r3, r3
 802498a:	4618      	mov	r0, r3
 802498c:	f7f4 f950 	bl	8018c30 <lwip_htons>
 8024990:	4603      	mov	r3, r0
 8024992:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8024994:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024996:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802499a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802499e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80249a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80249a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80249a6:	68fb      	ldr	r3, [r7, #12]
 80249a8:	891b      	ldrh	r3, [r3, #8]
 80249aa:	3b14      	subs	r3, #20
 80249ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80249b0:	e0e1      	b.n	8024b76 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80249b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80249b4:	00db      	lsls	r3, r3, #3
 80249b6:	b29b      	uxth	r3, r3
 80249b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80249bc:	4293      	cmp	r3, r2
 80249be:	bf28      	it	cs
 80249c0:	4613      	movcs	r3, r2
 80249c2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80249c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80249c8:	2114      	movs	r1, #20
 80249ca:	200e      	movs	r0, #14
 80249cc:	f7f5 fb02 	bl	8019fd4 <pbuf_alloc>
 80249d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80249d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	f000 80d5 	beq.w	8024b84 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80249da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249dc:	895b      	ldrh	r3, [r3, #10]
 80249de:	2b13      	cmp	r3, #19
 80249e0:	d806      	bhi.n	80249f0 <ip4_frag+0xd0>
 80249e2:	4b6c      	ldr	r3, [pc, #432]	; (8024b94 <ip4_frag+0x274>)
 80249e4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80249e8:	496d      	ldr	r1, [pc, #436]	; (8024ba0 <ip4_frag+0x280>)
 80249ea:	486c      	ldr	r0, [pc, #432]	; (8024b9c <ip4_frag+0x27c>)
 80249ec:	f001 faba 	bl	8025f64 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80249f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249f2:	685b      	ldr	r3, [r3, #4]
 80249f4:	2214      	movs	r2, #20
 80249f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80249f8:	4618      	mov	r0, r3
 80249fa:	f001 f9a7 	bl	8025d4c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80249fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a00:	685b      	ldr	r3, [r3, #4]
 8024a02:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8024a04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024a06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8024a0a:	e064      	b.n	8024ad6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	895a      	ldrh	r2, [r3, #10]
 8024a10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8024a12:	1ad3      	subs	r3, r2, r3
 8024a14:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8024a16:	68fb      	ldr	r3, [r7, #12]
 8024a18:	895b      	ldrh	r3, [r3, #10]
 8024a1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8024a1c:	429a      	cmp	r2, r3
 8024a1e:	d906      	bls.n	8024a2e <ip4_frag+0x10e>
 8024a20:	4b5c      	ldr	r3, [pc, #368]	; (8024b94 <ip4_frag+0x274>)
 8024a22:	f240 322d 	movw	r2, #813	; 0x32d
 8024a26:	495f      	ldr	r1, [pc, #380]	; (8024ba4 <ip4_frag+0x284>)
 8024a28:	485c      	ldr	r0, [pc, #368]	; (8024b9c <ip4_frag+0x27c>)
 8024a2a:	f001 fa9b 	bl	8025f64 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8024a2e:	8bfa      	ldrh	r2, [r7, #30]
 8024a30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024a34:	4293      	cmp	r3, r2
 8024a36:	bf28      	it	cs
 8024a38:	4613      	movcs	r3, r2
 8024a3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8024a3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024a42:	2b00      	cmp	r3, #0
 8024a44:	d105      	bne.n	8024a52 <ip4_frag+0x132>
        poff = 0;
 8024a46:	2300      	movs	r3, #0
 8024a48:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8024a4a:	68fb      	ldr	r3, [r7, #12]
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	60fb      	str	r3, [r7, #12]
        continue;
 8024a50:	e041      	b.n	8024ad6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8024a52:	f7ff ff0d 	bl	8024870 <ip_frag_alloc_pbuf_custom_ref>
 8024a56:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8024a58:	69bb      	ldr	r3, [r7, #24]
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	d103      	bne.n	8024a66 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8024a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024a60:	f7f5 fd9c 	bl	801a59c <pbuf_free>
        goto memerr;
 8024a64:	e08f      	b.n	8024b86 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024a66:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8024a68:	68fb      	ldr	r3, [r7, #12]
 8024a6a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8024a6e:	4413      	add	r3, r2
 8024a70:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8024a74:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8024a78:	9201      	str	r2, [sp, #4]
 8024a7a:	9300      	str	r3, [sp, #0]
 8024a7c:	4603      	mov	r3, r0
 8024a7e:	2241      	movs	r2, #65	; 0x41
 8024a80:	2000      	movs	r0, #0
 8024a82:	f7f5 fbd1 	bl	801a228 <pbuf_alloced_custom>
 8024a86:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8024a88:	697b      	ldr	r3, [r7, #20]
 8024a8a:	2b00      	cmp	r3, #0
 8024a8c:	d106      	bne.n	8024a9c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8024a8e:	69b8      	ldr	r0, [r7, #24]
 8024a90:	f7ff fef6 	bl	8024880 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8024a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024a96:	f7f5 fd81 	bl	801a59c <pbuf_free>
        goto memerr;
 8024a9a:	e074      	b.n	8024b86 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8024a9c:	68f8      	ldr	r0, [r7, #12]
 8024a9e:	f7f5 fe23 	bl	801a6e8 <pbuf_ref>
      pcr->original = p;
 8024aa2:	69bb      	ldr	r3, [r7, #24]
 8024aa4:	68fa      	ldr	r2, [r7, #12]
 8024aa6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024aa8:	69bb      	ldr	r3, [r7, #24]
 8024aaa:	4a3f      	ldr	r2, [pc, #252]	; (8024ba8 <ip4_frag+0x288>)
 8024aac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8024aae:	6979      	ldr	r1, [r7, #20]
 8024ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024ab2:	f7f5 fe41 	bl	801a738 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024ab6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8024aba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024abe:	1ad3      	subs	r3, r2, r3
 8024ac0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8024ac4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024ac8:	2b00      	cmp	r3, #0
 8024aca:	d004      	beq.n	8024ad6 <ip4_frag+0x1b6>
        poff = 0;
 8024acc:	2300      	movs	r3, #0
 8024ace:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8024ad0:	68fb      	ldr	r3, [r7, #12]
 8024ad2:	681b      	ldr	r3, [r3, #0]
 8024ad4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8024ad6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024ada:	2b00      	cmp	r3, #0
 8024adc:	d196      	bne.n	8024a0c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8024ade:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8024ae0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8024ae4:	4413      	add	r3, r2
 8024ae6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8024ae8:	68bb      	ldr	r3, [r7, #8]
 8024aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024aec:	f1a3 0213 	sub.w	r2, r3, #19
 8024af0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8024af4:	429a      	cmp	r2, r3
 8024af6:	bfcc      	ite	gt
 8024af8:	2301      	movgt	r3, #1
 8024afa:	2300      	movle	r3, #0
 8024afc:	b2db      	uxtb	r3, r3
 8024afe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8024b00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8024b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024b08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8024b0a:	6a3b      	ldr	r3, [r7, #32]
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	d002      	beq.n	8024b16 <ip4_frag+0x1f6>
 8024b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	d003      	beq.n	8024b1e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8024b16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024b1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8024b1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024b20:	4618      	mov	r0, r3
 8024b22:	f7f4 f885 	bl	8018c30 <lwip_htons>
 8024b26:	4603      	mov	r3, r0
 8024b28:	461a      	mov	r2, r3
 8024b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b2c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8024b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024b30:	3314      	adds	r3, #20
 8024b32:	b29b      	uxth	r3, r3
 8024b34:	4618      	mov	r0, r3
 8024b36:	f7f4 f87b 	bl	8018c30 <lwip_htons>
 8024b3a:	4603      	mov	r3, r0
 8024b3c:	461a      	mov	r2, r3
 8024b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b40:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8024b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b44:	2200      	movs	r2, #0
 8024b46:	729a      	strb	r2, [r3, #10]
 8024b48:	2200      	movs	r2, #0
 8024b4a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8024b4c:	68bb      	ldr	r3, [r7, #8]
 8024b4e:	695b      	ldr	r3, [r3, #20]
 8024b50:	687a      	ldr	r2, [r7, #4]
 8024b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024b54:	68b8      	ldr	r0, [r7, #8]
 8024b56:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8024b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024b5a:	f7f5 fd1f 	bl	801a59c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8024b5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8024b62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024b64:	1ad3      	subs	r3, r2, r3
 8024b66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8024b6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8024b6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8024b70:	4413      	add	r3, r2
 8024b72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8024b76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	f47f af19 	bne.w	80249b2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8024b80:	2300      	movs	r3, #0
 8024b82:	e002      	b.n	8024b8a <ip4_frag+0x26a>
      goto memerr;
 8024b84:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8024b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8024b8a:	4618      	mov	r0, r3
 8024b8c:	3748      	adds	r7, #72	; 0x48
 8024b8e:	46bd      	mov	sp, r7
 8024b90:	bd80      	pop	{r7, pc}
 8024b92:	bf00      	nop
 8024b94:	08029ab0 	.word	0x08029ab0
 8024b98:	08029c8c 	.word	0x08029c8c
 8024b9c:	08029af8 	.word	0x08029af8
 8024ba0:	08029ca8 	.word	0x08029ca8
 8024ba4:	08029cc8 	.word	0x08029cc8
 8024ba8:	080248b9 	.word	0x080248b9

08024bac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8024bac:	b580      	push	{r7, lr}
 8024bae:	b086      	sub	sp, #24
 8024bb0:	af00      	add	r7, sp, #0
 8024bb2:	6078      	str	r0, [r7, #4]
 8024bb4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8024bb6:	230e      	movs	r3, #14
 8024bb8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	895b      	ldrh	r3, [r3, #10]
 8024bbe:	2b0e      	cmp	r3, #14
 8024bc0:	d96e      	bls.n	8024ca0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	7bdb      	ldrb	r3, [r3, #15]
 8024bc6:	2b00      	cmp	r3, #0
 8024bc8:	d106      	bne.n	8024bd8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8024bca:	683b      	ldr	r3, [r7, #0]
 8024bcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024bd0:	3301      	adds	r3, #1
 8024bd2:	b2da      	uxtb	r2, r3
 8024bd4:	687b      	ldr	r3, [r7, #4]
 8024bd6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8024bd8:	687b      	ldr	r3, [r7, #4]
 8024bda:	685b      	ldr	r3, [r3, #4]
 8024bdc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8024bde:	693b      	ldr	r3, [r7, #16]
 8024be0:	7b1a      	ldrb	r2, [r3, #12]
 8024be2:	7b5b      	ldrb	r3, [r3, #13]
 8024be4:	021b      	lsls	r3, r3, #8
 8024be6:	4313      	orrs	r3, r2
 8024be8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8024bea:	693b      	ldr	r3, [r7, #16]
 8024bec:	781b      	ldrb	r3, [r3, #0]
 8024bee:	f003 0301 	and.w	r3, r3, #1
 8024bf2:	2b00      	cmp	r3, #0
 8024bf4:	d023      	beq.n	8024c3e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8024bf6:	693b      	ldr	r3, [r7, #16]
 8024bf8:	781b      	ldrb	r3, [r3, #0]
 8024bfa:	2b01      	cmp	r3, #1
 8024bfc:	d10f      	bne.n	8024c1e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024bfe:	693b      	ldr	r3, [r7, #16]
 8024c00:	785b      	ldrb	r3, [r3, #1]
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	d11b      	bne.n	8024c3e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8024c06:	693b      	ldr	r3, [r7, #16]
 8024c08:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024c0a:	2b5e      	cmp	r3, #94	; 0x5e
 8024c0c:	d117      	bne.n	8024c3e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	7b5b      	ldrb	r3, [r3, #13]
 8024c12:	f043 0310 	orr.w	r3, r3, #16
 8024c16:	b2da      	uxtb	r2, r3
 8024c18:	687b      	ldr	r3, [r7, #4]
 8024c1a:	735a      	strb	r2, [r3, #13]
 8024c1c:	e00f      	b.n	8024c3e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8024c1e:	693b      	ldr	r3, [r7, #16]
 8024c20:	2206      	movs	r2, #6
 8024c22:	4928      	ldr	r1, [pc, #160]	; (8024cc4 <ethernet_input+0x118>)
 8024c24:	4618      	mov	r0, r3
 8024c26:	f001 f881 	bl	8025d2c <memcmp>
 8024c2a:	4603      	mov	r3, r0
 8024c2c:	2b00      	cmp	r3, #0
 8024c2e:	d106      	bne.n	8024c3e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8024c30:	687b      	ldr	r3, [r7, #4]
 8024c32:	7b5b      	ldrb	r3, [r3, #13]
 8024c34:	f043 0308 	orr.w	r3, r3, #8
 8024c38:	b2da      	uxtb	r2, r3
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8024c3e:	89fb      	ldrh	r3, [r7, #14]
 8024c40:	2b08      	cmp	r3, #8
 8024c42:	d003      	beq.n	8024c4c <ethernet_input+0xa0>
 8024c44:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8024c48:	d014      	beq.n	8024c74 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8024c4a:	e032      	b.n	8024cb2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024c4c:	683b      	ldr	r3, [r7, #0]
 8024c4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024c52:	f003 0308 	and.w	r3, r3, #8
 8024c56:	2b00      	cmp	r3, #0
 8024c58:	d024      	beq.n	8024ca4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024c5a:	8afb      	ldrh	r3, [r7, #22]
 8024c5c:	4619      	mov	r1, r3
 8024c5e:	6878      	ldr	r0, [r7, #4]
 8024c60:	f7f5 fc16 	bl	801a490 <pbuf_remove_header>
 8024c64:	4603      	mov	r3, r0
 8024c66:	2b00      	cmp	r3, #0
 8024c68:	d11e      	bne.n	8024ca8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8024c6a:	6839      	ldr	r1, [r7, #0]
 8024c6c:	6878      	ldr	r0, [r7, #4]
 8024c6e:	f7fe ff03 	bl	8023a78 <ip4_input>
      break;
 8024c72:	e013      	b.n	8024c9c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024c74:	683b      	ldr	r3, [r7, #0]
 8024c76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024c7a:	f003 0308 	and.w	r3, r3, #8
 8024c7e:	2b00      	cmp	r3, #0
 8024c80:	d014      	beq.n	8024cac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024c82:	8afb      	ldrh	r3, [r7, #22]
 8024c84:	4619      	mov	r1, r3
 8024c86:	6878      	ldr	r0, [r7, #4]
 8024c88:	f7f5 fc02 	bl	801a490 <pbuf_remove_header>
 8024c8c:	4603      	mov	r3, r0
 8024c8e:	2b00      	cmp	r3, #0
 8024c90:	d10e      	bne.n	8024cb0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8024c92:	6839      	ldr	r1, [r7, #0]
 8024c94:	6878      	ldr	r0, [r7, #4]
 8024c96:	f7fe f879 	bl	8022d8c <etharp_input>
      break;
 8024c9a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8024c9c:	2300      	movs	r3, #0
 8024c9e:	e00c      	b.n	8024cba <ethernet_input+0x10e>
    goto free_and_return;
 8024ca0:	bf00      	nop
 8024ca2:	e006      	b.n	8024cb2 <ethernet_input+0x106>
        goto free_and_return;
 8024ca4:	bf00      	nop
 8024ca6:	e004      	b.n	8024cb2 <ethernet_input+0x106>
        goto free_and_return;
 8024ca8:	bf00      	nop
 8024caa:	e002      	b.n	8024cb2 <ethernet_input+0x106>
        goto free_and_return;
 8024cac:	bf00      	nop
 8024cae:	e000      	b.n	8024cb2 <ethernet_input+0x106>
        goto free_and_return;
 8024cb0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8024cb2:	6878      	ldr	r0, [r7, #4]
 8024cb4:	f7f5 fc72 	bl	801a59c <pbuf_free>
  return ERR_OK;
 8024cb8:	2300      	movs	r3, #0
}
 8024cba:	4618      	mov	r0, r3
 8024cbc:	3718      	adds	r7, #24
 8024cbe:	46bd      	mov	sp, r7
 8024cc0:	bd80      	pop	{r7, pc}
 8024cc2:	bf00      	nop
 8024cc4:	0802a5b4 	.word	0x0802a5b4

08024cc8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024cc8:	b580      	push	{r7, lr}
 8024cca:	b086      	sub	sp, #24
 8024ccc:	af00      	add	r7, sp, #0
 8024cce:	60f8      	str	r0, [r7, #12]
 8024cd0:	60b9      	str	r1, [r7, #8]
 8024cd2:	607a      	str	r2, [r7, #4]
 8024cd4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8024cd6:	8c3b      	ldrh	r3, [r7, #32]
 8024cd8:	4618      	mov	r0, r3
 8024cda:	f7f3 ffa9 	bl	8018c30 <lwip_htons>
 8024cde:	4603      	mov	r3, r0
 8024ce0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024ce2:	210e      	movs	r1, #14
 8024ce4:	68b8      	ldr	r0, [r7, #8]
 8024ce6:	f7f5 fbc3 	bl	801a470 <pbuf_add_header>
 8024cea:	4603      	mov	r3, r0
 8024cec:	2b00      	cmp	r3, #0
 8024cee:	d125      	bne.n	8024d3c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024cf0:	68bb      	ldr	r3, [r7, #8]
 8024cf2:	685b      	ldr	r3, [r3, #4]
 8024cf4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8024cf6:	693b      	ldr	r3, [r7, #16]
 8024cf8:	8afa      	ldrh	r2, [r7, #22]
 8024cfa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024cfc:	693b      	ldr	r3, [r7, #16]
 8024cfe:	2206      	movs	r2, #6
 8024d00:	6839      	ldr	r1, [r7, #0]
 8024d02:	4618      	mov	r0, r3
 8024d04:	f001 f822 	bl	8025d4c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8024d08:	693b      	ldr	r3, [r7, #16]
 8024d0a:	3306      	adds	r3, #6
 8024d0c:	2206      	movs	r2, #6
 8024d0e:	6879      	ldr	r1, [r7, #4]
 8024d10:	4618      	mov	r0, r3
 8024d12:	f001 f81b 	bl	8025d4c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8024d16:	68fb      	ldr	r3, [r7, #12]
 8024d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024d1c:	2b06      	cmp	r3, #6
 8024d1e:	d006      	beq.n	8024d2e <ethernet_output+0x66>
 8024d20:	4b0a      	ldr	r3, [pc, #40]	; (8024d4c <ethernet_output+0x84>)
 8024d22:	f44f 7299 	mov.w	r2, #306	; 0x132
 8024d26:	490a      	ldr	r1, [pc, #40]	; (8024d50 <ethernet_output+0x88>)
 8024d28:	480a      	ldr	r0, [pc, #40]	; (8024d54 <ethernet_output+0x8c>)
 8024d2a:	f001 f91b 	bl	8025f64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8024d2e:	68fb      	ldr	r3, [r7, #12]
 8024d30:	699b      	ldr	r3, [r3, #24]
 8024d32:	68b9      	ldr	r1, [r7, #8]
 8024d34:	68f8      	ldr	r0, [r7, #12]
 8024d36:	4798      	blx	r3
 8024d38:	4603      	mov	r3, r0
 8024d3a:	e002      	b.n	8024d42 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8024d3c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8024d3e:	f06f 0301 	mvn.w	r3, #1
}
 8024d42:	4618      	mov	r0, r3
 8024d44:	3718      	adds	r7, #24
 8024d46:	46bd      	mov	sp, r7
 8024d48:	bd80      	pop	{r7, pc}
 8024d4a:	bf00      	nop
 8024d4c:	08029cd8 	.word	0x08029cd8
 8024d50:	08029d10 	.word	0x08029d10
 8024d54:	08029d44 	.word	0x08029d44

08024d58 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8024d58:	b580      	push	{r7, lr}
 8024d5a:	b082      	sub	sp, #8
 8024d5c:	af00      	add	r7, sp, #0
 8024d5e:	6078      	str	r0, [r7, #4]
 8024d60:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8024d62:	683b      	ldr	r3, [r7, #0]
 8024d64:	2200      	movs	r2, #0
 8024d66:	2104      	movs	r1, #4
 8024d68:	4618      	mov	r0, r3
 8024d6a:	f7f0 fb15 	bl	8015398 <osMessageQueueNew>
 8024d6e:	4602      	mov	r2, r0
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	681b      	ldr	r3, [r3, #0]
 8024d78:	2b00      	cmp	r3, #0
 8024d7a:	d102      	bne.n	8024d82 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8024d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8024d80:	e000      	b.n	8024d84 <sys_mbox_new+0x2c>

  return ERR_OK;
 8024d82:	2300      	movs	r3, #0
}
 8024d84:	4618      	mov	r0, r3
 8024d86:	3708      	adds	r7, #8
 8024d88:	46bd      	mov	sp, r7
 8024d8a:	bd80      	pop	{r7, pc}

08024d8c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8024d8c:	b580      	push	{r7, lr}
 8024d8e:	b084      	sub	sp, #16
 8024d90:	af00      	add	r7, sp, #0
 8024d92:	6078      	str	r0, [r7, #4]
 8024d94:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	6818      	ldr	r0, [r3, #0]
 8024d9a:	4639      	mov	r1, r7
 8024d9c:	2300      	movs	r3, #0
 8024d9e:	2200      	movs	r2, #0
 8024da0:	f7f0 fb6e 	bl	8015480 <osMessageQueuePut>
 8024da4:	4603      	mov	r3, r0
 8024da6:	2b00      	cmp	r3, #0
 8024da8:	d102      	bne.n	8024db0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8024daa:	2300      	movs	r3, #0
 8024dac:	73fb      	strb	r3, [r7, #15]
 8024dae:	e001      	b.n	8024db4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8024db0:	23ff      	movs	r3, #255	; 0xff
 8024db2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8024db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8024db8:	4618      	mov	r0, r3
 8024dba:	3710      	adds	r7, #16
 8024dbc:	46bd      	mov	sp, r7
 8024dbe:	bd80      	pop	{r7, pc}

08024dc0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8024dc0:	b580      	push	{r7, lr}
 8024dc2:	b086      	sub	sp, #24
 8024dc4:	af00      	add	r7, sp, #0
 8024dc6:	60f8      	str	r0, [r7, #12]
 8024dc8:	60b9      	str	r1, [r7, #8]
 8024dca:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8024dcc:	f7ef fff4 	bl	8014db8 <osKernelGetTickCount>
 8024dd0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	2b00      	cmp	r3, #0
 8024dd6:	d013      	beq.n	8024e00 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8024dd8:	68fb      	ldr	r3, [r7, #12]
 8024dda:	6818      	ldr	r0, [r3, #0]
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	2200      	movs	r2, #0
 8024de0:	68b9      	ldr	r1, [r7, #8]
 8024de2:	f7f0 fbad 	bl	8015540 <osMessageQueueGet>
 8024de6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8024de8:	693b      	ldr	r3, [r7, #16]
 8024dea:	2b00      	cmp	r3, #0
 8024dec:	d105      	bne.n	8024dfa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8024dee:	f7ef ffe3 	bl	8014db8 <osKernelGetTickCount>
 8024df2:	4602      	mov	r2, r0
 8024df4:	697b      	ldr	r3, [r7, #20]
 8024df6:	1ad3      	subs	r3, r2, r3
 8024df8:	e00f      	b.n	8024e1a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8024dfe:	e00c      	b.n	8024e1a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8024e00:	68fb      	ldr	r3, [r7, #12]
 8024e02:	6818      	ldr	r0, [r3, #0]
 8024e04:	f04f 33ff 	mov.w	r3, #4294967295
 8024e08:	2200      	movs	r2, #0
 8024e0a:	68b9      	ldr	r1, [r7, #8]
 8024e0c:	f7f0 fb98 	bl	8015540 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8024e10:	f7ef ffd2 	bl	8014db8 <osKernelGetTickCount>
 8024e14:	4602      	mov	r2, r0
 8024e16:	697b      	ldr	r3, [r7, #20]
 8024e18:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8024e1a:	4618      	mov	r0, r3
 8024e1c:	3718      	adds	r7, #24
 8024e1e:	46bd      	mov	sp, r7
 8024e20:	bd80      	pop	{r7, pc}

08024e22 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8024e22:	b480      	push	{r7}
 8024e24:	b083      	sub	sp, #12
 8024e26:	af00      	add	r7, sp, #0
 8024e28:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	681b      	ldr	r3, [r3, #0]
 8024e2e:	2b00      	cmp	r3, #0
 8024e30:	d101      	bne.n	8024e36 <sys_mbox_valid+0x14>
    return 0;
 8024e32:	2300      	movs	r3, #0
 8024e34:	e000      	b.n	8024e38 <sys_mbox_valid+0x16>
  else
    return 1;
 8024e36:	2301      	movs	r3, #1
}
 8024e38:	4618      	mov	r0, r3
 8024e3a:	370c      	adds	r7, #12
 8024e3c:	46bd      	mov	sp, r7
 8024e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e42:	4770      	bx	lr

08024e44 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024e44:	b580      	push	{r7, lr}
 8024e46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8024e48:	2000      	movs	r0, #0
 8024e4a:	f7f0 f877 	bl	8014f3c <osMutexNew>
 8024e4e:	4603      	mov	r3, r0
 8024e50:	4a01      	ldr	r2, [pc, #4]	; (8024e58 <sys_init+0x14>)
 8024e52:	6013      	str	r3, [r2, #0]
#endif
}
 8024e54:	bf00      	nop
 8024e56:	bd80      	pop	{r7, pc}
 8024e58:	2400d18c 	.word	0x2400d18c

08024e5c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024e5c:	b580      	push	{r7, lr}
 8024e5e:	b082      	sub	sp, #8
 8024e60:	af00      	add	r7, sp, #0
 8024e62:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8024e64:	2000      	movs	r0, #0
 8024e66:	f7f0 f869 	bl	8014f3c <osMutexNew>
 8024e6a:	4602      	mov	r2, r0
 8024e6c:	687b      	ldr	r3, [r7, #4]
 8024e6e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8024e70:	687b      	ldr	r3, [r7, #4]
 8024e72:	681b      	ldr	r3, [r3, #0]
 8024e74:	2b00      	cmp	r3, #0
 8024e76:	d102      	bne.n	8024e7e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8024e78:	f04f 33ff 	mov.w	r3, #4294967295
 8024e7c:	e000      	b.n	8024e80 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8024e7e:	2300      	movs	r3, #0
}
 8024e80:	4618      	mov	r0, r3
 8024e82:	3708      	adds	r7, #8
 8024e84:	46bd      	mov	sp, r7
 8024e86:	bd80      	pop	{r7, pc}

08024e88 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8024e88:	b580      	push	{r7, lr}
 8024e8a:	b082      	sub	sp, #8
 8024e8c:	af00      	add	r7, sp, #0
 8024e8e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8024e90:	687b      	ldr	r3, [r7, #4]
 8024e92:	681b      	ldr	r3, [r3, #0]
 8024e94:	f04f 31ff 	mov.w	r1, #4294967295
 8024e98:	4618      	mov	r0, r3
 8024e9a:	f7f0 f8d5 	bl	8015048 <osMutexAcquire>
#endif
}
 8024e9e:	bf00      	nop
 8024ea0:	3708      	adds	r7, #8
 8024ea2:	46bd      	mov	sp, r7
 8024ea4:	bd80      	pop	{r7, pc}

08024ea6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8024ea6:	b580      	push	{r7, lr}
 8024ea8:	b082      	sub	sp, #8
 8024eaa:	af00      	add	r7, sp, #0
 8024eac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8024eae:	687b      	ldr	r3, [r7, #4]
 8024eb0:	681b      	ldr	r3, [r3, #0]
 8024eb2:	4618      	mov	r0, r3
 8024eb4:	f7f0 f913 	bl	80150de <osMutexRelease>
}
 8024eb8:	bf00      	nop
 8024eba:	3708      	adds	r7, #8
 8024ebc:	46bd      	mov	sp, r7
 8024ebe:	bd80      	pop	{r7, pc}

08024ec0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8024ec0:	b580      	push	{r7, lr}
 8024ec2:	b08e      	sub	sp, #56	; 0x38
 8024ec4:	af00      	add	r7, sp, #0
 8024ec6:	60f8      	str	r0, [r7, #12]
 8024ec8:	60b9      	str	r1, [r7, #8]
 8024eca:	607a      	str	r2, [r7, #4]
 8024ecc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8024ece:	f107 0314 	add.w	r3, r7, #20
 8024ed2:	2224      	movs	r2, #36	; 0x24
 8024ed4:	2100      	movs	r1, #0
 8024ed6:	4618      	mov	r0, r3
 8024ed8:	f000 ff46 	bl	8025d68 <memset>
 8024edc:	68fb      	ldr	r3, [r7, #12]
 8024ede:	617b      	str	r3, [r7, #20]
 8024ee0:	683b      	ldr	r3, [r7, #0]
 8024ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8024ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8024ee8:	f107 0314 	add.w	r3, r7, #20
 8024eec:	461a      	mov	r2, r3
 8024eee:	6879      	ldr	r1, [r7, #4]
 8024ef0:	68b8      	ldr	r0, [r7, #8]
 8024ef2:	f7ef ff76 	bl	8014de2 <osThreadNew>
 8024ef6:	4603      	mov	r3, r0
#endif
}
 8024ef8:	4618      	mov	r0, r3
 8024efa:	3738      	adds	r7, #56	; 0x38
 8024efc:	46bd      	mov	sp, r7
 8024efe:	bd80      	pop	{r7, pc}

08024f00 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8024f00:	b580      	push	{r7, lr}
 8024f02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8024f04:	4b04      	ldr	r3, [pc, #16]	; (8024f18 <sys_arch_protect+0x18>)
 8024f06:	681b      	ldr	r3, [r3, #0]
 8024f08:	f04f 31ff 	mov.w	r1, #4294967295
 8024f0c:	4618      	mov	r0, r3
 8024f0e:	f7f0 f89b 	bl	8015048 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8024f12:	2301      	movs	r3, #1
}
 8024f14:	4618      	mov	r0, r3
 8024f16:	bd80      	pop	{r7, pc}
 8024f18:	2400d18c 	.word	0x2400d18c

08024f1c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8024f1c:	b580      	push	{r7, lr}
 8024f1e:	b082      	sub	sp, #8
 8024f20:	af00      	add	r7, sp, #0
 8024f22:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8024f24:	4b04      	ldr	r3, [pc, #16]	; (8024f38 <sys_arch_unprotect+0x1c>)
 8024f26:	681b      	ldr	r3, [r3, #0]
 8024f28:	4618      	mov	r0, r3
 8024f2a:	f7f0 f8d8 	bl	80150de <osMutexRelease>
}
 8024f2e:	bf00      	nop
 8024f30:	3708      	adds	r7, #8
 8024f32:	46bd      	mov	sp, r7
 8024f34:	bd80      	pop	{r7, pc}
 8024f36:	bf00      	nop
 8024f38:	2400d18c 	.word	0x2400d18c

08024f3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8024f3c:	b580      	push	{r7, lr}
 8024f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8024f40:	2201      	movs	r2, #1
 8024f42:	4913      	ldr	r1, [pc, #76]	; (8024f90 <MX_USB_DEVICE_Init+0x54>)
 8024f44:	4813      	ldr	r0, [pc, #76]	; (8024f94 <MX_USB_DEVICE_Init+0x58>)
 8024f46:	f7ee fb33 	bl	80135b0 <USBD_Init>
 8024f4a:	4603      	mov	r3, r0
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	d001      	beq.n	8024f54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8024f50:	f7e0 fcce 	bl	80058f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8024f54:	4910      	ldr	r1, [pc, #64]	; (8024f98 <MX_USB_DEVICE_Init+0x5c>)
 8024f56:	480f      	ldr	r0, [pc, #60]	; (8024f94 <MX_USB_DEVICE_Init+0x58>)
 8024f58:	f7ee fb5a 	bl	8013610 <USBD_RegisterClass>
 8024f5c:	4603      	mov	r3, r0
 8024f5e:	2b00      	cmp	r3, #0
 8024f60:	d001      	beq.n	8024f66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8024f62:	f7e0 fcc5 	bl	80058f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8024f66:	490d      	ldr	r1, [pc, #52]	; (8024f9c <MX_USB_DEVICE_Init+0x60>)
 8024f68:	480a      	ldr	r0, [pc, #40]	; (8024f94 <MX_USB_DEVICE_Init+0x58>)
 8024f6a:	f7ee fa91 	bl	8013490 <USBD_CDC_RegisterInterface>
 8024f6e:	4603      	mov	r3, r0
 8024f70:	2b00      	cmp	r3, #0
 8024f72:	d001      	beq.n	8024f78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8024f74:	f7e0 fcbc 	bl	80058f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8024f78:	4806      	ldr	r0, [pc, #24]	; (8024f94 <MX_USB_DEVICE_Init+0x58>)
 8024f7a:	f7ee fb7f 	bl	801367c <USBD_Start>
 8024f7e:	4603      	mov	r3, r0
 8024f80:	2b00      	cmp	r3, #0
 8024f82:	d001      	beq.n	8024f88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8024f84:	f7e0 fcb4 	bl	80058f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8024f88:	f7e5 fe30 	bl	800abec <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8024f8c:	bf00      	nop
 8024f8e:	bd80      	pop	{r7, pc}
 8024f90:	2400047c 	.word	0x2400047c
 8024f94:	2400d190 	.word	0x2400d190
 8024f98:	240003d4 	.word	0x240003d4
 8024f9c:	24000468 	.word	0x24000468

08024fa0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8024fa0:	b580      	push	{r7, lr}
 8024fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8024fa4:	2200      	movs	r2, #0
 8024fa6:	4905      	ldr	r1, [pc, #20]	; (8024fbc <CDC_Init_HS+0x1c>)
 8024fa8:	4805      	ldr	r0, [pc, #20]	; (8024fc0 <CDC_Init_HS+0x20>)
 8024faa:	f7ee fa8b 	bl	80134c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8024fae:	4905      	ldr	r1, [pc, #20]	; (8024fc4 <CDC_Init_HS+0x24>)
 8024fb0:	4803      	ldr	r0, [pc, #12]	; (8024fc0 <CDC_Init_HS+0x20>)
 8024fb2:	f7ee faa9 	bl	8013508 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8024fb6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8024fb8:	4618      	mov	r0, r3
 8024fba:	bd80      	pop	{r7, pc}
 8024fbc:	2400dc6c 	.word	0x2400dc6c
 8024fc0:	2400d190 	.word	0x2400d190
 8024fc4:	2400d46c 	.word	0x2400d46c

08024fc8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8024fc8:	b480      	push	{r7}
 8024fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8024fcc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8024fce:	4618      	mov	r0, r3
 8024fd0:	46bd      	mov	sp, r7
 8024fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fd6:	4770      	bx	lr

08024fd8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8024fd8:	b480      	push	{r7}
 8024fda:	b083      	sub	sp, #12
 8024fdc:	af00      	add	r7, sp, #0
 8024fde:	4603      	mov	r3, r0
 8024fe0:	6039      	str	r1, [r7, #0]
 8024fe2:	71fb      	strb	r3, [r7, #7]
 8024fe4:	4613      	mov	r3, r2
 8024fe6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8024fe8:	79fb      	ldrb	r3, [r7, #7]
 8024fea:	2b23      	cmp	r3, #35	; 0x23
 8024fec:	d84a      	bhi.n	8025084 <CDC_Control_HS+0xac>
 8024fee:	a201      	add	r2, pc, #4	; (adr r2, 8024ff4 <CDC_Control_HS+0x1c>)
 8024ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ff4:	08025085 	.word	0x08025085
 8024ff8:	08025085 	.word	0x08025085
 8024ffc:	08025085 	.word	0x08025085
 8025000:	08025085 	.word	0x08025085
 8025004:	08025085 	.word	0x08025085
 8025008:	08025085 	.word	0x08025085
 802500c:	08025085 	.word	0x08025085
 8025010:	08025085 	.word	0x08025085
 8025014:	08025085 	.word	0x08025085
 8025018:	08025085 	.word	0x08025085
 802501c:	08025085 	.word	0x08025085
 8025020:	08025085 	.word	0x08025085
 8025024:	08025085 	.word	0x08025085
 8025028:	08025085 	.word	0x08025085
 802502c:	08025085 	.word	0x08025085
 8025030:	08025085 	.word	0x08025085
 8025034:	08025085 	.word	0x08025085
 8025038:	08025085 	.word	0x08025085
 802503c:	08025085 	.word	0x08025085
 8025040:	08025085 	.word	0x08025085
 8025044:	08025085 	.word	0x08025085
 8025048:	08025085 	.word	0x08025085
 802504c:	08025085 	.word	0x08025085
 8025050:	08025085 	.word	0x08025085
 8025054:	08025085 	.word	0x08025085
 8025058:	08025085 	.word	0x08025085
 802505c:	08025085 	.word	0x08025085
 8025060:	08025085 	.word	0x08025085
 8025064:	08025085 	.word	0x08025085
 8025068:	08025085 	.word	0x08025085
 802506c:	08025085 	.word	0x08025085
 8025070:	08025085 	.word	0x08025085
 8025074:	08025085 	.word	0x08025085
 8025078:	08025085 	.word	0x08025085
 802507c:	08025085 	.word	0x08025085
 8025080:	08025085 	.word	0x08025085
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8025084:	bf00      	nop
  }

  return (USBD_OK);
 8025086:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8025088:	4618      	mov	r0, r3
 802508a:	370c      	adds	r7, #12
 802508c:	46bd      	mov	sp, r7
 802508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025092:	4770      	bx	lr

08025094 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8025094:	b580      	push	{r7, lr}
 8025096:	b082      	sub	sp, #8
 8025098:	af00      	add	r7, sp, #0
 802509a:	6078      	str	r0, [r7, #4]
 802509c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 802509e:	6879      	ldr	r1, [r7, #4]
 80250a0:	4805      	ldr	r0, [pc, #20]	; (80250b8 <CDC_Receive_HS+0x24>)
 80250a2:	f7ee fa31 	bl	8013508 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80250a6:	4804      	ldr	r0, [pc, #16]	; (80250b8 <CDC_Receive_HS+0x24>)
 80250a8:	f7ee fa4c 	bl	8013544 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80250ac:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80250ae:	4618      	mov	r0, r3
 80250b0:	3708      	adds	r7, #8
 80250b2:	46bd      	mov	sp, r7
 80250b4:	bd80      	pop	{r7, pc}
 80250b6:	bf00      	nop
 80250b8:	2400d190 	.word	0x2400d190

080250bc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80250bc:	b480      	push	{r7}
 80250be:	b087      	sub	sp, #28
 80250c0:	af00      	add	r7, sp, #0
 80250c2:	60f8      	str	r0, [r7, #12]
 80250c4:	60b9      	str	r1, [r7, #8]
 80250c6:	4613      	mov	r3, r2
 80250c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80250ca:	2300      	movs	r3, #0
 80250cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80250ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80250d2:	4618      	mov	r0, r3
 80250d4:	371c      	adds	r7, #28
 80250d6:	46bd      	mov	sp, r7
 80250d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250dc:	4770      	bx	lr
	...

080250e0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80250e0:	b480      	push	{r7}
 80250e2:	b083      	sub	sp, #12
 80250e4:	af00      	add	r7, sp, #0
 80250e6:	4603      	mov	r3, r0
 80250e8:	6039      	str	r1, [r7, #0]
 80250ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80250ec:	683b      	ldr	r3, [r7, #0]
 80250ee:	2212      	movs	r2, #18
 80250f0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80250f2:	4b03      	ldr	r3, [pc, #12]	; (8025100 <USBD_HS_DeviceDescriptor+0x20>)
}
 80250f4:	4618      	mov	r0, r3
 80250f6:	370c      	adds	r7, #12
 80250f8:	46bd      	mov	sp, r7
 80250fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250fe:	4770      	bx	lr
 8025100:	24000498 	.word	0x24000498

08025104 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025104:	b480      	push	{r7}
 8025106:	b083      	sub	sp, #12
 8025108:	af00      	add	r7, sp, #0
 802510a:	4603      	mov	r3, r0
 802510c:	6039      	str	r1, [r7, #0]
 802510e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8025110:	683b      	ldr	r3, [r7, #0]
 8025112:	2204      	movs	r2, #4
 8025114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8025116:	4b03      	ldr	r3, [pc, #12]	; (8025124 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8025118:	4618      	mov	r0, r3
 802511a:	370c      	adds	r7, #12
 802511c:	46bd      	mov	sp, r7
 802511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025122:	4770      	bx	lr
 8025124:	240004ac 	.word	0x240004ac

08025128 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025128:	b580      	push	{r7, lr}
 802512a:	b082      	sub	sp, #8
 802512c:	af00      	add	r7, sp, #0
 802512e:	4603      	mov	r3, r0
 8025130:	6039      	str	r1, [r7, #0]
 8025132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8025134:	79fb      	ldrb	r3, [r7, #7]
 8025136:	2b00      	cmp	r3, #0
 8025138:	d105      	bne.n	8025146 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 802513a:	683a      	ldr	r2, [r7, #0]
 802513c:	4907      	ldr	r1, [pc, #28]	; (802515c <USBD_HS_ProductStrDescriptor+0x34>)
 802513e:	4808      	ldr	r0, [pc, #32]	; (8025160 <USBD_HS_ProductStrDescriptor+0x38>)
 8025140:	f7ef fc4e 	bl	80149e0 <USBD_GetString>
 8025144:	e004      	b.n	8025150 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8025146:	683a      	ldr	r2, [r7, #0]
 8025148:	4904      	ldr	r1, [pc, #16]	; (802515c <USBD_HS_ProductStrDescriptor+0x34>)
 802514a:	4805      	ldr	r0, [pc, #20]	; (8025160 <USBD_HS_ProductStrDescriptor+0x38>)
 802514c:	f7ef fc48 	bl	80149e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8025150:	4b02      	ldr	r3, [pc, #8]	; (802515c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8025152:	4618      	mov	r0, r3
 8025154:	3708      	adds	r7, #8
 8025156:	46bd      	mov	sp, r7
 8025158:	bd80      	pop	{r7, pc}
 802515a:	bf00      	nop
 802515c:	2400e46c 	.word	0x2400e46c
 8025160:	08029d6c 	.word	0x08029d6c

08025164 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025164:	b580      	push	{r7, lr}
 8025166:	b082      	sub	sp, #8
 8025168:	af00      	add	r7, sp, #0
 802516a:	4603      	mov	r3, r0
 802516c:	6039      	str	r1, [r7, #0]
 802516e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8025170:	683a      	ldr	r2, [r7, #0]
 8025172:	4904      	ldr	r1, [pc, #16]	; (8025184 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8025174:	4804      	ldr	r0, [pc, #16]	; (8025188 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8025176:	f7ef fc33 	bl	80149e0 <USBD_GetString>
  return USBD_StrDesc;
 802517a:	4b02      	ldr	r3, [pc, #8]	; (8025184 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 802517c:	4618      	mov	r0, r3
 802517e:	3708      	adds	r7, #8
 8025180:	46bd      	mov	sp, r7
 8025182:	bd80      	pop	{r7, pc}
 8025184:	2400e46c 	.word	0x2400e46c
 8025188:	08029d84 	.word	0x08029d84

0802518c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802518c:	b580      	push	{r7, lr}
 802518e:	b082      	sub	sp, #8
 8025190:	af00      	add	r7, sp, #0
 8025192:	4603      	mov	r3, r0
 8025194:	6039      	str	r1, [r7, #0]
 8025196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8025198:	683b      	ldr	r3, [r7, #0]
 802519a:	221a      	movs	r2, #26
 802519c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802519e:	f000 f843 	bl	8025228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80251a2:	4b02      	ldr	r3, [pc, #8]	; (80251ac <USBD_HS_SerialStrDescriptor+0x20>)
}
 80251a4:	4618      	mov	r0, r3
 80251a6:	3708      	adds	r7, #8
 80251a8:	46bd      	mov	sp, r7
 80251aa:	bd80      	pop	{r7, pc}
 80251ac:	240004b0 	.word	0x240004b0

080251b0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80251b0:	b580      	push	{r7, lr}
 80251b2:	b082      	sub	sp, #8
 80251b4:	af00      	add	r7, sp, #0
 80251b6:	4603      	mov	r3, r0
 80251b8:	6039      	str	r1, [r7, #0]
 80251ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80251bc:	79fb      	ldrb	r3, [r7, #7]
 80251be:	2b00      	cmp	r3, #0
 80251c0:	d105      	bne.n	80251ce <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80251c2:	683a      	ldr	r2, [r7, #0]
 80251c4:	4907      	ldr	r1, [pc, #28]	; (80251e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80251c6:	4808      	ldr	r0, [pc, #32]	; (80251e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80251c8:	f7ef fc0a 	bl	80149e0 <USBD_GetString>
 80251cc:	e004      	b.n	80251d8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80251ce:	683a      	ldr	r2, [r7, #0]
 80251d0:	4904      	ldr	r1, [pc, #16]	; (80251e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80251d2:	4805      	ldr	r0, [pc, #20]	; (80251e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80251d4:	f7ef fc04 	bl	80149e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80251d8:	4b02      	ldr	r3, [pc, #8]	; (80251e4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80251da:	4618      	mov	r0, r3
 80251dc:	3708      	adds	r7, #8
 80251de:	46bd      	mov	sp, r7
 80251e0:	bd80      	pop	{r7, pc}
 80251e2:	bf00      	nop
 80251e4:	2400e46c 	.word	0x2400e46c
 80251e8:	08029d98 	.word	0x08029d98

080251ec <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80251ec:	b580      	push	{r7, lr}
 80251ee:	b082      	sub	sp, #8
 80251f0:	af00      	add	r7, sp, #0
 80251f2:	4603      	mov	r3, r0
 80251f4:	6039      	str	r1, [r7, #0]
 80251f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80251f8:	79fb      	ldrb	r3, [r7, #7]
 80251fa:	2b00      	cmp	r3, #0
 80251fc:	d105      	bne.n	802520a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80251fe:	683a      	ldr	r2, [r7, #0]
 8025200:	4907      	ldr	r1, [pc, #28]	; (8025220 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8025202:	4808      	ldr	r0, [pc, #32]	; (8025224 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8025204:	f7ef fbec 	bl	80149e0 <USBD_GetString>
 8025208:	e004      	b.n	8025214 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 802520a:	683a      	ldr	r2, [r7, #0]
 802520c:	4904      	ldr	r1, [pc, #16]	; (8025220 <USBD_HS_InterfaceStrDescriptor+0x34>)
 802520e:	4805      	ldr	r0, [pc, #20]	; (8025224 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8025210:	f7ef fbe6 	bl	80149e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8025214:	4b02      	ldr	r3, [pc, #8]	; (8025220 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8025216:	4618      	mov	r0, r3
 8025218:	3708      	adds	r7, #8
 802521a:	46bd      	mov	sp, r7
 802521c:	bd80      	pop	{r7, pc}
 802521e:	bf00      	nop
 8025220:	2400e46c 	.word	0x2400e46c
 8025224:	08029da4 	.word	0x08029da4

08025228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8025228:	b580      	push	{r7, lr}
 802522a:	b084      	sub	sp, #16
 802522c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802522e:	4b0f      	ldr	r3, [pc, #60]	; (802526c <Get_SerialNum+0x44>)
 8025230:	681b      	ldr	r3, [r3, #0]
 8025232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8025234:	4b0e      	ldr	r3, [pc, #56]	; (8025270 <Get_SerialNum+0x48>)
 8025236:	681b      	ldr	r3, [r3, #0]
 8025238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802523a:	4b0e      	ldr	r3, [pc, #56]	; (8025274 <Get_SerialNum+0x4c>)
 802523c:	681b      	ldr	r3, [r3, #0]
 802523e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8025240:	68fa      	ldr	r2, [r7, #12]
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	4413      	add	r3, r2
 8025246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8025248:	68fb      	ldr	r3, [r7, #12]
 802524a:	2b00      	cmp	r3, #0
 802524c:	d009      	beq.n	8025262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802524e:	2208      	movs	r2, #8
 8025250:	4909      	ldr	r1, [pc, #36]	; (8025278 <Get_SerialNum+0x50>)
 8025252:	68f8      	ldr	r0, [r7, #12]
 8025254:	f000 f814 	bl	8025280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8025258:	2204      	movs	r2, #4
 802525a:	4908      	ldr	r1, [pc, #32]	; (802527c <Get_SerialNum+0x54>)
 802525c:	68b8      	ldr	r0, [r7, #8]
 802525e:	f000 f80f 	bl	8025280 <IntToUnicode>
  }
}
 8025262:	bf00      	nop
 8025264:	3710      	adds	r7, #16
 8025266:	46bd      	mov	sp, r7
 8025268:	bd80      	pop	{r7, pc}
 802526a:	bf00      	nop
 802526c:	1ff1e800 	.word	0x1ff1e800
 8025270:	1ff1e804 	.word	0x1ff1e804
 8025274:	1ff1e808 	.word	0x1ff1e808
 8025278:	240004b2 	.word	0x240004b2
 802527c:	240004c2 	.word	0x240004c2

08025280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8025280:	b480      	push	{r7}
 8025282:	b087      	sub	sp, #28
 8025284:	af00      	add	r7, sp, #0
 8025286:	60f8      	str	r0, [r7, #12]
 8025288:	60b9      	str	r1, [r7, #8]
 802528a:	4613      	mov	r3, r2
 802528c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802528e:	2300      	movs	r3, #0
 8025290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8025292:	2300      	movs	r3, #0
 8025294:	75fb      	strb	r3, [r7, #23]
 8025296:	e027      	b.n	80252e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8025298:	68fb      	ldr	r3, [r7, #12]
 802529a:	0f1b      	lsrs	r3, r3, #28
 802529c:	2b09      	cmp	r3, #9
 802529e:	d80b      	bhi.n	80252b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80252a0:	68fb      	ldr	r3, [r7, #12]
 80252a2:	0f1b      	lsrs	r3, r3, #28
 80252a4:	b2da      	uxtb	r2, r3
 80252a6:	7dfb      	ldrb	r3, [r7, #23]
 80252a8:	005b      	lsls	r3, r3, #1
 80252aa:	4619      	mov	r1, r3
 80252ac:	68bb      	ldr	r3, [r7, #8]
 80252ae:	440b      	add	r3, r1
 80252b0:	3230      	adds	r2, #48	; 0x30
 80252b2:	b2d2      	uxtb	r2, r2
 80252b4:	701a      	strb	r2, [r3, #0]
 80252b6:	e00a      	b.n	80252ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80252b8:	68fb      	ldr	r3, [r7, #12]
 80252ba:	0f1b      	lsrs	r3, r3, #28
 80252bc:	b2da      	uxtb	r2, r3
 80252be:	7dfb      	ldrb	r3, [r7, #23]
 80252c0:	005b      	lsls	r3, r3, #1
 80252c2:	4619      	mov	r1, r3
 80252c4:	68bb      	ldr	r3, [r7, #8]
 80252c6:	440b      	add	r3, r1
 80252c8:	3237      	adds	r2, #55	; 0x37
 80252ca:	b2d2      	uxtb	r2, r2
 80252cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80252ce:	68fb      	ldr	r3, [r7, #12]
 80252d0:	011b      	lsls	r3, r3, #4
 80252d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80252d4:	7dfb      	ldrb	r3, [r7, #23]
 80252d6:	005b      	lsls	r3, r3, #1
 80252d8:	3301      	adds	r3, #1
 80252da:	68ba      	ldr	r2, [r7, #8]
 80252dc:	4413      	add	r3, r2
 80252de:	2200      	movs	r2, #0
 80252e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80252e2:	7dfb      	ldrb	r3, [r7, #23]
 80252e4:	3301      	adds	r3, #1
 80252e6:	75fb      	strb	r3, [r7, #23]
 80252e8:	7dfa      	ldrb	r2, [r7, #23]
 80252ea:	79fb      	ldrb	r3, [r7, #7]
 80252ec:	429a      	cmp	r2, r3
 80252ee:	d3d3      	bcc.n	8025298 <IntToUnicode+0x18>
  }
}
 80252f0:	bf00      	nop
 80252f2:	bf00      	nop
 80252f4:	371c      	adds	r7, #28
 80252f6:	46bd      	mov	sp, r7
 80252f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252fc:	4770      	bx	lr
	...

08025300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8025300:	b580      	push	{r7, lr}
 8025302:	b0b2      	sub	sp, #200	; 0xc8
 8025304:	af00      	add	r7, sp, #0
 8025306:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8025308:	f107 0310 	add.w	r3, r7, #16
 802530c:	22b8      	movs	r2, #184	; 0xb8
 802530e:	2100      	movs	r1, #0
 8025310:	4618      	mov	r0, r3
 8025312:	f000 fd29 	bl	8025d68 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	681b      	ldr	r3, [r3, #0]
 802531a:	4a1a      	ldr	r2, [pc, #104]	; (8025384 <HAL_PCD_MspInit+0x84>)
 802531c:	4293      	cmp	r3, r2
 802531e:	d12c      	bne.n	802537a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8025320:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8025324:	f04f 0300 	mov.w	r3, #0
 8025328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 802532c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8025330:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8025334:	f107 0310 	add.w	r3, r7, #16
 8025338:	4618      	mov	r0, r3
 802533a:	f7e6 fbf9 	bl	800bb30 <HAL_RCCEx_PeriphCLKConfig>
 802533e:	4603      	mov	r3, r0
 8025340:	2b00      	cmp	r3, #0
 8025342:	d001      	beq.n	8025348 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8025344:	f7e0 fad4 	bl	80058f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8025348:	f7e5 fc50 	bl	800abec <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802534c:	4b0e      	ldr	r3, [pc, #56]	; (8025388 <HAL_PCD_MspInit+0x88>)
 802534e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8025352:	4a0d      	ldr	r2, [pc, #52]	; (8025388 <HAL_PCD_MspInit+0x88>)
 8025354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8025358:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 802535c:	4b0a      	ldr	r3, [pc, #40]	; (8025388 <HAL_PCD_MspInit+0x88>)
 802535e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8025362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025366:	60fb      	str	r3, [r7, #12]
 8025368:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 802536a:	2200      	movs	r2, #0
 802536c:	2105      	movs	r1, #5
 802536e:	204d      	movs	r0, #77	; 0x4d
 8025370:	f7e1 f8a6 	bl	80064c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8025374:	204d      	movs	r0, #77	; 0x4d
 8025376:	f7e1 f8bd 	bl	80064f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802537a:	bf00      	nop
 802537c:	37c8      	adds	r7, #200	; 0xc8
 802537e:	46bd      	mov	sp, r7
 8025380:	bd80      	pop	{r7, pc}
 8025382:	bf00      	nop
 8025384:	40040000 	.word	0x40040000
 8025388:	58024400 	.word	0x58024400

0802538c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802538c:	b580      	push	{r7, lr}
 802538e:	b082      	sub	sp, #8
 8025390:	af00      	add	r7, sp, #0
 8025392:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8025394:	687b      	ldr	r3, [r7, #4]
 8025396:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 802539a:	687b      	ldr	r3, [r7, #4]
 802539c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80253a0:	4619      	mov	r1, r3
 80253a2:	4610      	mov	r0, r2
 80253a4:	f7ee f9b7 	bl	8013716 <USBD_LL_SetupStage>
}
 80253a8:	bf00      	nop
 80253aa:	3708      	adds	r7, #8
 80253ac:	46bd      	mov	sp, r7
 80253ae:	bd80      	pop	{r7, pc}

080253b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80253b0:	b580      	push	{r7, lr}
 80253b2:	b082      	sub	sp, #8
 80253b4:	af00      	add	r7, sp, #0
 80253b6:	6078      	str	r0, [r7, #4]
 80253b8:	460b      	mov	r3, r1
 80253ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80253c2:	78fa      	ldrb	r2, [r7, #3]
 80253c4:	6879      	ldr	r1, [r7, #4]
 80253c6:	4613      	mov	r3, r2
 80253c8:	00db      	lsls	r3, r3, #3
 80253ca:	4413      	add	r3, r2
 80253cc:	009b      	lsls	r3, r3, #2
 80253ce:	440b      	add	r3, r1
 80253d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80253d4:	681a      	ldr	r2, [r3, #0]
 80253d6:	78fb      	ldrb	r3, [r7, #3]
 80253d8:	4619      	mov	r1, r3
 80253da:	f7ee f9f1 	bl	80137c0 <USBD_LL_DataOutStage>
}
 80253de:	bf00      	nop
 80253e0:	3708      	adds	r7, #8
 80253e2:	46bd      	mov	sp, r7
 80253e4:	bd80      	pop	{r7, pc}

080253e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80253e6:	b580      	push	{r7, lr}
 80253e8:	b082      	sub	sp, #8
 80253ea:	af00      	add	r7, sp, #0
 80253ec:	6078      	str	r0, [r7, #4]
 80253ee:	460b      	mov	r3, r1
 80253f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80253f8:	78fa      	ldrb	r2, [r7, #3]
 80253fa:	6879      	ldr	r1, [r7, #4]
 80253fc:	4613      	mov	r3, r2
 80253fe:	00db      	lsls	r3, r3, #3
 8025400:	4413      	add	r3, r2
 8025402:	009b      	lsls	r3, r3, #2
 8025404:	440b      	add	r3, r1
 8025406:	3348      	adds	r3, #72	; 0x48
 8025408:	681a      	ldr	r2, [r3, #0]
 802540a:	78fb      	ldrb	r3, [r7, #3]
 802540c:	4619      	mov	r1, r3
 802540e:	f7ee fa8a 	bl	8013926 <USBD_LL_DataInStage>
}
 8025412:	bf00      	nop
 8025414:	3708      	adds	r7, #8
 8025416:	46bd      	mov	sp, r7
 8025418:	bd80      	pop	{r7, pc}

0802541a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802541a:	b580      	push	{r7, lr}
 802541c:	b082      	sub	sp, #8
 802541e:	af00      	add	r7, sp, #0
 8025420:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8025422:	687b      	ldr	r3, [r7, #4]
 8025424:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025428:	4618      	mov	r0, r3
 802542a:	f7ee fbc4 	bl	8013bb6 <USBD_LL_SOF>
}
 802542e:	bf00      	nop
 8025430:	3708      	adds	r7, #8
 8025432:	46bd      	mov	sp, r7
 8025434:	bd80      	pop	{r7, pc}

08025436 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025436:	b580      	push	{r7, lr}
 8025438:	b084      	sub	sp, #16
 802543a:	af00      	add	r7, sp, #0
 802543c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802543e:	2301      	movs	r3, #1
 8025440:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8025442:	687b      	ldr	r3, [r7, #4]
 8025444:	691b      	ldr	r3, [r3, #16]
 8025446:	2b00      	cmp	r3, #0
 8025448:	d102      	bne.n	8025450 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802544a:	2300      	movs	r3, #0
 802544c:	73fb      	strb	r3, [r7, #15]
 802544e:	e008      	b.n	8025462 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8025450:	687b      	ldr	r3, [r7, #4]
 8025452:	691b      	ldr	r3, [r3, #16]
 8025454:	2b02      	cmp	r3, #2
 8025456:	d102      	bne.n	802545e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8025458:	2301      	movs	r3, #1
 802545a:	73fb      	strb	r3, [r7, #15]
 802545c:	e001      	b.n	8025462 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 802545e:	f7e0 fa47 	bl	80058f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8025462:	687b      	ldr	r3, [r7, #4]
 8025464:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025468:	7bfa      	ldrb	r2, [r7, #15]
 802546a:	4611      	mov	r1, r2
 802546c:	4618      	mov	r0, r3
 802546e:	f7ee fb5e 	bl	8013b2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025478:	4618      	mov	r0, r3
 802547a:	f7ee fb06 	bl	8013a8a <USBD_LL_Reset>
}
 802547e:	bf00      	nop
 8025480:	3710      	adds	r7, #16
 8025482:	46bd      	mov	sp, r7
 8025484:	bd80      	pop	{r7, pc}
	...

08025488 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025488:	b580      	push	{r7, lr}
 802548a:	b082      	sub	sp, #8
 802548c:	af00      	add	r7, sp, #0
 802548e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025496:	4618      	mov	r0, r3
 8025498:	f7ee fb59 	bl	8013b4e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80254a4:	681b      	ldr	r3, [r3, #0]
 80254a6:	687a      	ldr	r2, [r7, #4]
 80254a8:	6812      	ldr	r2, [r2, #0]
 80254aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80254ae:	f043 0301 	orr.w	r3, r3, #1
 80254b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80254b4:	687b      	ldr	r3, [r7, #4]
 80254b6:	6a1b      	ldr	r3, [r3, #32]
 80254b8:	2b00      	cmp	r3, #0
 80254ba:	d005      	beq.n	80254c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80254bc:	4b04      	ldr	r3, [pc, #16]	; (80254d0 <HAL_PCD_SuspendCallback+0x48>)
 80254be:	691b      	ldr	r3, [r3, #16]
 80254c0:	4a03      	ldr	r2, [pc, #12]	; (80254d0 <HAL_PCD_SuspendCallback+0x48>)
 80254c2:	f043 0306 	orr.w	r3, r3, #6
 80254c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80254c8:	bf00      	nop
 80254ca:	3708      	adds	r7, #8
 80254cc:	46bd      	mov	sp, r7
 80254ce:	bd80      	pop	{r7, pc}
 80254d0:	e000ed00 	.word	0xe000ed00

080254d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80254d4:	b580      	push	{r7, lr}
 80254d6:	b082      	sub	sp, #8
 80254d8:	af00      	add	r7, sp, #0
 80254da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80254e2:	4618      	mov	r0, r3
 80254e4:	f7ee fb4f 	bl	8013b86 <USBD_LL_Resume>
}
 80254e8:	bf00      	nop
 80254ea:	3708      	adds	r7, #8
 80254ec:	46bd      	mov	sp, r7
 80254ee:	bd80      	pop	{r7, pc}

080254f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80254f0:	b580      	push	{r7, lr}
 80254f2:	b082      	sub	sp, #8
 80254f4:	af00      	add	r7, sp, #0
 80254f6:	6078      	str	r0, [r7, #4]
 80254f8:	460b      	mov	r3, r1
 80254fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80254fc:	687b      	ldr	r3, [r7, #4]
 80254fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025502:	78fa      	ldrb	r2, [r7, #3]
 8025504:	4611      	mov	r1, r2
 8025506:	4618      	mov	r0, r3
 8025508:	f7ee fba7 	bl	8013c5a <USBD_LL_IsoOUTIncomplete>
}
 802550c:	bf00      	nop
 802550e:	3708      	adds	r7, #8
 8025510:	46bd      	mov	sp, r7
 8025512:	bd80      	pop	{r7, pc}

08025514 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025514:	b580      	push	{r7, lr}
 8025516:	b082      	sub	sp, #8
 8025518:	af00      	add	r7, sp, #0
 802551a:	6078      	str	r0, [r7, #4]
 802551c:	460b      	mov	r3, r1
 802551e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025520:	687b      	ldr	r3, [r7, #4]
 8025522:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025526:	78fa      	ldrb	r2, [r7, #3]
 8025528:	4611      	mov	r1, r2
 802552a:	4618      	mov	r0, r3
 802552c:	f7ee fb63 	bl	8013bf6 <USBD_LL_IsoINIncomplete>
}
 8025530:	bf00      	nop
 8025532:	3708      	adds	r7, #8
 8025534:	46bd      	mov	sp, r7
 8025536:	bd80      	pop	{r7, pc}

08025538 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025538:	b580      	push	{r7, lr}
 802553a:	b082      	sub	sp, #8
 802553c:	af00      	add	r7, sp, #0
 802553e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8025540:	687b      	ldr	r3, [r7, #4]
 8025542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025546:	4618      	mov	r0, r3
 8025548:	f7ee fbb9 	bl	8013cbe <USBD_LL_DevConnected>
}
 802554c:	bf00      	nop
 802554e:	3708      	adds	r7, #8
 8025550:	46bd      	mov	sp, r7
 8025552:	bd80      	pop	{r7, pc}

08025554 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025554:	b580      	push	{r7, lr}
 8025556:	b082      	sub	sp, #8
 8025558:	af00      	add	r7, sp, #0
 802555a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 802555c:	687b      	ldr	r3, [r7, #4]
 802555e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025562:	4618      	mov	r0, r3
 8025564:	f7ee fbb6 	bl	8013cd4 <USBD_LL_DevDisconnected>
}
 8025568:	bf00      	nop
 802556a:	3708      	adds	r7, #8
 802556c:	46bd      	mov	sp, r7
 802556e:	bd80      	pop	{r7, pc}

08025570 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8025570:	b580      	push	{r7, lr}
 8025572:	b082      	sub	sp, #8
 8025574:	af00      	add	r7, sp, #0
 8025576:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8025578:	687b      	ldr	r3, [r7, #4]
 802557a:	781b      	ldrb	r3, [r3, #0]
 802557c:	2b01      	cmp	r3, #1
 802557e:	d140      	bne.n	8025602 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8025580:	4a22      	ldr	r2, [pc, #136]	; (802560c <USBD_LL_Init+0x9c>)
 8025582:	687b      	ldr	r3, [r7, #4]
 8025584:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8025588:	687b      	ldr	r3, [r7, #4]
 802558a:	4a20      	ldr	r2, [pc, #128]	; (802560c <USBD_LL_Init+0x9c>)
 802558c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8025590:	4b1e      	ldr	r3, [pc, #120]	; (802560c <USBD_LL_Init+0x9c>)
 8025592:	4a1f      	ldr	r2, [pc, #124]	; (8025610 <USBD_LL_Init+0xa0>)
 8025594:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8025596:	4b1d      	ldr	r3, [pc, #116]	; (802560c <USBD_LL_Init+0x9c>)
 8025598:	2209      	movs	r2, #9
 802559a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 802559c:	4b1b      	ldr	r3, [pc, #108]	; (802560c <USBD_LL_Init+0x9c>)
 802559e:	2202      	movs	r2, #2
 80255a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80255a2:	4b1a      	ldr	r3, [pc, #104]	; (802560c <USBD_LL_Init+0x9c>)
 80255a4:	2200      	movs	r2, #0
 80255a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80255a8:	4b18      	ldr	r3, [pc, #96]	; (802560c <USBD_LL_Init+0x9c>)
 80255aa:	2202      	movs	r2, #2
 80255ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80255ae:	4b17      	ldr	r3, [pc, #92]	; (802560c <USBD_LL_Init+0x9c>)
 80255b0:	2200      	movs	r2, #0
 80255b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80255b4:	4b15      	ldr	r3, [pc, #84]	; (802560c <USBD_LL_Init+0x9c>)
 80255b6:	2200      	movs	r2, #0
 80255b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80255ba:	4b14      	ldr	r3, [pc, #80]	; (802560c <USBD_LL_Init+0x9c>)
 80255bc:	2200      	movs	r2, #0
 80255be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80255c0:	4b12      	ldr	r3, [pc, #72]	; (802560c <USBD_LL_Init+0x9c>)
 80255c2:	2200      	movs	r2, #0
 80255c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80255c6:	4b11      	ldr	r3, [pc, #68]	; (802560c <USBD_LL_Init+0x9c>)
 80255c8:	2200      	movs	r2, #0
 80255ca:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80255cc:	4b0f      	ldr	r3, [pc, #60]	; (802560c <USBD_LL_Init+0x9c>)
 80255ce:	2200      	movs	r2, #0
 80255d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80255d2:	480e      	ldr	r0, [pc, #56]	; (802560c <USBD_LL_Init+0x9c>)
 80255d4:	f7e4 f816 	bl	8009604 <HAL_PCD_Init>
 80255d8:	4603      	mov	r3, r0
 80255da:	2b00      	cmp	r3, #0
 80255dc:	d001      	beq.n	80255e2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80255de:	f7e0 f987 	bl	80058f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80255e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80255e6:	4809      	ldr	r0, [pc, #36]	; (802560c <USBD_LL_Init+0x9c>)
 80255e8:	f7e5 fa85 	bl	800aaf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80255ec:	2280      	movs	r2, #128	; 0x80
 80255ee:	2100      	movs	r1, #0
 80255f0:	4806      	ldr	r0, [pc, #24]	; (802560c <USBD_LL_Init+0x9c>)
 80255f2:	f7e5 fa39 	bl	800aa68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80255f6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80255fa:	2101      	movs	r1, #1
 80255fc:	4803      	ldr	r0, [pc, #12]	; (802560c <USBD_LL_Init+0x9c>)
 80255fe:	f7e5 fa33 	bl	800aa68 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8025602:	2300      	movs	r3, #0
}
 8025604:	4618      	mov	r0, r3
 8025606:	3708      	adds	r7, #8
 8025608:	46bd      	mov	sp, r7
 802560a:	bd80      	pop	{r7, pc}
 802560c:	2400e66c 	.word	0x2400e66c
 8025610:	40040000 	.word	0x40040000

08025614 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8025614:	b580      	push	{r7, lr}
 8025616:	b084      	sub	sp, #16
 8025618:	af00      	add	r7, sp, #0
 802561a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802561c:	2300      	movs	r3, #0
 802561e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025620:	2300      	movs	r3, #0
 8025622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8025624:	687b      	ldr	r3, [r7, #4]
 8025626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802562a:	4618      	mov	r0, r3
 802562c:	f7e4 f90e 	bl	800984c <HAL_PCD_Start>
 8025630:	4603      	mov	r3, r0
 8025632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025634:	7bfb      	ldrb	r3, [r7, #15]
 8025636:	4618      	mov	r0, r3
 8025638:	f000 f942 	bl	80258c0 <USBD_Get_USB_Status>
 802563c:	4603      	mov	r3, r0
 802563e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025640:	7bbb      	ldrb	r3, [r7, #14]
}
 8025642:	4618      	mov	r0, r3
 8025644:	3710      	adds	r7, #16
 8025646:	46bd      	mov	sp, r7
 8025648:	bd80      	pop	{r7, pc}

0802564a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802564a:	b580      	push	{r7, lr}
 802564c:	b084      	sub	sp, #16
 802564e:	af00      	add	r7, sp, #0
 8025650:	6078      	str	r0, [r7, #4]
 8025652:	4608      	mov	r0, r1
 8025654:	4611      	mov	r1, r2
 8025656:	461a      	mov	r2, r3
 8025658:	4603      	mov	r3, r0
 802565a:	70fb      	strb	r3, [r7, #3]
 802565c:	460b      	mov	r3, r1
 802565e:	70bb      	strb	r3, [r7, #2]
 8025660:	4613      	mov	r3, r2
 8025662:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025664:	2300      	movs	r3, #0
 8025666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025668:	2300      	movs	r3, #0
 802566a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802566c:	687b      	ldr	r3, [r7, #4]
 802566e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8025672:	78bb      	ldrb	r3, [r7, #2]
 8025674:	883a      	ldrh	r2, [r7, #0]
 8025676:	78f9      	ldrb	r1, [r7, #3]
 8025678:	f7e4 fe0e 	bl	800a298 <HAL_PCD_EP_Open>
 802567c:	4603      	mov	r3, r0
 802567e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025680:	7bfb      	ldrb	r3, [r7, #15]
 8025682:	4618      	mov	r0, r3
 8025684:	f000 f91c 	bl	80258c0 <USBD_Get_USB_Status>
 8025688:	4603      	mov	r3, r0
 802568a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802568c:	7bbb      	ldrb	r3, [r7, #14]
}
 802568e:	4618      	mov	r0, r3
 8025690:	3710      	adds	r7, #16
 8025692:	46bd      	mov	sp, r7
 8025694:	bd80      	pop	{r7, pc}

08025696 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8025696:	b580      	push	{r7, lr}
 8025698:	b084      	sub	sp, #16
 802569a:	af00      	add	r7, sp, #0
 802569c:	6078      	str	r0, [r7, #4]
 802569e:	460b      	mov	r3, r1
 80256a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80256a2:	2300      	movs	r3, #0
 80256a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80256a6:	2300      	movs	r3, #0
 80256a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80256b0:	78fa      	ldrb	r2, [r7, #3]
 80256b2:	4611      	mov	r1, r2
 80256b4:	4618      	mov	r0, r3
 80256b6:	f7e4 fe57 	bl	800a368 <HAL_PCD_EP_Close>
 80256ba:	4603      	mov	r3, r0
 80256bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80256be:	7bfb      	ldrb	r3, [r7, #15]
 80256c0:	4618      	mov	r0, r3
 80256c2:	f000 f8fd 	bl	80258c0 <USBD_Get_USB_Status>
 80256c6:	4603      	mov	r3, r0
 80256c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80256ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80256cc:	4618      	mov	r0, r3
 80256ce:	3710      	adds	r7, #16
 80256d0:	46bd      	mov	sp, r7
 80256d2:	bd80      	pop	{r7, pc}

080256d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80256d4:	b580      	push	{r7, lr}
 80256d6:	b084      	sub	sp, #16
 80256d8:	af00      	add	r7, sp, #0
 80256da:	6078      	str	r0, [r7, #4]
 80256dc:	460b      	mov	r3, r1
 80256de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80256e0:	2300      	movs	r3, #0
 80256e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80256e4:	2300      	movs	r3, #0
 80256e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80256e8:	687b      	ldr	r3, [r7, #4]
 80256ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80256ee:	78fa      	ldrb	r2, [r7, #3]
 80256f0:	4611      	mov	r1, r2
 80256f2:	4618      	mov	r0, r3
 80256f4:	f7e4 ff11 	bl	800a51a <HAL_PCD_EP_SetStall>
 80256f8:	4603      	mov	r3, r0
 80256fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80256fc:	7bfb      	ldrb	r3, [r7, #15]
 80256fe:	4618      	mov	r0, r3
 8025700:	f000 f8de 	bl	80258c0 <USBD_Get_USB_Status>
 8025704:	4603      	mov	r3, r0
 8025706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025708:	7bbb      	ldrb	r3, [r7, #14]
}
 802570a:	4618      	mov	r0, r3
 802570c:	3710      	adds	r7, #16
 802570e:	46bd      	mov	sp, r7
 8025710:	bd80      	pop	{r7, pc}

08025712 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8025712:	b580      	push	{r7, lr}
 8025714:	b084      	sub	sp, #16
 8025716:	af00      	add	r7, sp, #0
 8025718:	6078      	str	r0, [r7, #4]
 802571a:	460b      	mov	r3, r1
 802571c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802571e:	2300      	movs	r3, #0
 8025720:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025722:	2300      	movs	r3, #0
 8025724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8025726:	687b      	ldr	r3, [r7, #4]
 8025728:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802572c:	78fa      	ldrb	r2, [r7, #3]
 802572e:	4611      	mov	r1, r2
 8025730:	4618      	mov	r0, r3
 8025732:	f7e4 ff56 	bl	800a5e2 <HAL_PCD_EP_ClrStall>
 8025736:	4603      	mov	r3, r0
 8025738:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802573a:	7bfb      	ldrb	r3, [r7, #15]
 802573c:	4618      	mov	r0, r3
 802573e:	f000 f8bf 	bl	80258c0 <USBD_Get_USB_Status>
 8025742:	4603      	mov	r3, r0
 8025744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025746:	7bbb      	ldrb	r3, [r7, #14]
}
 8025748:	4618      	mov	r0, r3
 802574a:	3710      	adds	r7, #16
 802574c:	46bd      	mov	sp, r7
 802574e:	bd80      	pop	{r7, pc}

08025750 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8025750:	b480      	push	{r7}
 8025752:	b085      	sub	sp, #20
 8025754:	af00      	add	r7, sp, #0
 8025756:	6078      	str	r0, [r7, #4]
 8025758:	460b      	mov	r3, r1
 802575a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802575c:	687b      	ldr	r3, [r7, #4]
 802575e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8025762:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8025764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8025768:	2b00      	cmp	r3, #0
 802576a:	da0b      	bge.n	8025784 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802576c:	78fb      	ldrb	r3, [r7, #3]
 802576e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8025772:	68f9      	ldr	r1, [r7, #12]
 8025774:	4613      	mov	r3, r2
 8025776:	00db      	lsls	r3, r3, #3
 8025778:	4413      	add	r3, r2
 802577a:	009b      	lsls	r3, r3, #2
 802577c:	440b      	add	r3, r1
 802577e:	333e      	adds	r3, #62	; 0x3e
 8025780:	781b      	ldrb	r3, [r3, #0]
 8025782:	e00b      	b.n	802579c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8025784:	78fb      	ldrb	r3, [r7, #3]
 8025786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802578a:	68f9      	ldr	r1, [r7, #12]
 802578c:	4613      	mov	r3, r2
 802578e:	00db      	lsls	r3, r3, #3
 8025790:	4413      	add	r3, r2
 8025792:	009b      	lsls	r3, r3, #2
 8025794:	440b      	add	r3, r1
 8025796:	f203 237e 	addw	r3, r3, #638	; 0x27e
 802579a:	781b      	ldrb	r3, [r3, #0]
  }
}
 802579c:	4618      	mov	r0, r3
 802579e:	3714      	adds	r7, #20
 80257a0:	46bd      	mov	sp, r7
 80257a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257a6:	4770      	bx	lr

080257a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80257a8:	b580      	push	{r7, lr}
 80257aa:	b084      	sub	sp, #16
 80257ac:	af00      	add	r7, sp, #0
 80257ae:	6078      	str	r0, [r7, #4]
 80257b0:	460b      	mov	r3, r1
 80257b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80257b4:	2300      	movs	r3, #0
 80257b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80257b8:	2300      	movs	r3, #0
 80257ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80257c2:	78fa      	ldrb	r2, [r7, #3]
 80257c4:	4611      	mov	r1, r2
 80257c6:	4618      	mov	r0, r3
 80257c8:	f7e4 fd41 	bl	800a24e <HAL_PCD_SetAddress>
 80257cc:	4603      	mov	r3, r0
 80257ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80257d0:	7bfb      	ldrb	r3, [r7, #15]
 80257d2:	4618      	mov	r0, r3
 80257d4:	f000 f874 	bl	80258c0 <USBD_Get_USB_Status>
 80257d8:	4603      	mov	r3, r0
 80257da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80257dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80257de:	4618      	mov	r0, r3
 80257e0:	3710      	adds	r7, #16
 80257e2:	46bd      	mov	sp, r7
 80257e4:	bd80      	pop	{r7, pc}

080257e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80257e6:	b580      	push	{r7, lr}
 80257e8:	b086      	sub	sp, #24
 80257ea:	af00      	add	r7, sp, #0
 80257ec:	60f8      	str	r0, [r7, #12]
 80257ee:	607a      	str	r2, [r7, #4]
 80257f0:	603b      	str	r3, [r7, #0]
 80257f2:	460b      	mov	r3, r1
 80257f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80257f6:	2300      	movs	r3, #0
 80257f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80257fa:	2300      	movs	r3, #0
 80257fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80257fe:	68fb      	ldr	r3, [r7, #12]
 8025800:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8025804:	7af9      	ldrb	r1, [r7, #11]
 8025806:	683b      	ldr	r3, [r7, #0]
 8025808:	687a      	ldr	r2, [r7, #4]
 802580a:	f7e4 fe4b 	bl	800a4a4 <HAL_PCD_EP_Transmit>
 802580e:	4603      	mov	r3, r0
 8025810:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025812:	7dfb      	ldrb	r3, [r7, #23]
 8025814:	4618      	mov	r0, r3
 8025816:	f000 f853 	bl	80258c0 <USBD_Get_USB_Status>
 802581a:	4603      	mov	r3, r0
 802581c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802581e:	7dbb      	ldrb	r3, [r7, #22]
}
 8025820:	4618      	mov	r0, r3
 8025822:	3718      	adds	r7, #24
 8025824:	46bd      	mov	sp, r7
 8025826:	bd80      	pop	{r7, pc}

08025828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8025828:	b580      	push	{r7, lr}
 802582a:	b086      	sub	sp, #24
 802582c:	af00      	add	r7, sp, #0
 802582e:	60f8      	str	r0, [r7, #12]
 8025830:	607a      	str	r2, [r7, #4]
 8025832:	603b      	str	r3, [r7, #0]
 8025834:	460b      	mov	r3, r1
 8025836:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025838:	2300      	movs	r3, #0
 802583a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802583c:	2300      	movs	r3, #0
 802583e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8025840:	68fb      	ldr	r3, [r7, #12]
 8025842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8025846:	7af9      	ldrb	r1, [r7, #11]
 8025848:	683b      	ldr	r3, [r7, #0]
 802584a:	687a      	ldr	r2, [r7, #4]
 802584c:	f7e4 fdd6 	bl	800a3fc <HAL_PCD_EP_Receive>
 8025850:	4603      	mov	r3, r0
 8025852:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025854:	7dfb      	ldrb	r3, [r7, #23]
 8025856:	4618      	mov	r0, r3
 8025858:	f000 f832 	bl	80258c0 <USBD_Get_USB_Status>
 802585c:	4603      	mov	r3, r0
 802585e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8025860:	7dbb      	ldrb	r3, [r7, #22]
}
 8025862:	4618      	mov	r0, r3
 8025864:	3718      	adds	r7, #24
 8025866:	46bd      	mov	sp, r7
 8025868:	bd80      	pop	{r7, pc}

0802586a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802586a:	b580      	push	{r7, lr}
 802586c:	b082      	sub	sp, #8
 802586e:	af00      	add	r7, sp, #0
 8025870:	6078      	str	r0, [r7, #4]
 8025872:	460b      	mov	r3, r1
 8025874:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8025876:	687b      	ldr	r3, [r7, #4]
 8025878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802587c:	78fa      	ldrb	r2, [r7, #3]
 802587e:	4611      	mov	r1, r2
 8025880:	4618      	mov	r0, r3
 8025882:	f7e4 fdf7 	bl	800a474 <HAL_PCD_EP_GetRxCount>
 8025886:	4603      	mov	r3, r0
}
 8025888:	4618      	mov	r0, r3
 802588a:	3708      	adds	r7, #8
 802588c:	46bd      	mov	sp, r7
 802588e:	bd80      	pop	{r7, pc}

08025890 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8025890:	b480      	push	{r7}
 8025892:	b083      	sub	sp, #12
 8025894:	af00      	add	r7, sp, #0
 8025896:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8025898:	4b03      	ldr	r3, [pc, #12]	; (80258a8 <USBD_static_malloc+0x18>)
}
 802589a:	4618      	mov	r0, r3
 802589c:	370c      	adds	r7, #12
 802589e:	46bd      	mov	sp, r7
 80258a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258a4:	4770      	bx	lr
 80258a6:	bf00      	nop
 80258a8:	2400eb78 	.word	0x2400eb78

080258ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80258ac:	b480      	push	{r7}
 80258ae:	b083      	sub	sp, #12
 80258b0:	af00      	add	r7, sp, #0
 80258b2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80258b4:	bf00      	nop
 80258b6:	370c      	adds	r7, #12
 80258b8:	46bd      	mov	sp, r7
 80258ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258be:	4770      	bx	lr

080258c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80258c0:	b480      	push	{r7}
 80258c2:	b085      	sub	sp, #20
 80258c4:	af00      	add	r7, sp, #0
 80258c6:	4603      	mov	r3, r0
 80258c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80258ca:	2300      	movs	r3, #0
 80258cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80258ce:	79fb      	ldrb	r3, [r7, #7]
 80258d0:	2b03      	cmp	r3, #3
 80258d2:	d817      	bhi.n	8025904 <USBD_Get_USB_Status+0x44>
 80258d4:	a201      	add	r2, pc, #4	; (adr r2, 80258dc <USBD_Get_USB_Status+0x1c>)
 80258d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80258da:	bf00      	nop
 80258dc:	080258ed 	.word	0x080258ed
 80258e0:	080258f3 	.word	0x080258f3
 80258e4:	080258f9 	.word	0x080258f9
 80258e8:	080258ff 	.word	0x080258ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80258ec:	2300      	movs	r3, #0
 80258ee:	73fb      	strb	r3, [r7, #15]
    break;
 80258f0:	e00b      	b.n	802590a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80258f2:	2303      	movs	r3, #3
 80258f4:	73fb      	strb	r3, [r7, #15]
    break;
 80258f6:	e008      	b.n	802590a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80258f8:	2301      	movs	r3, #1
 80258fa:	73fb      	strb	r3, [r7, #15]
    break;
 80258fc:	e005      	b.n	802590a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80258fe:	2303      	movs	r3, #3
 8025900:	73fb      	strb	r3, [r7, #15]
    break;
 8025902:	e002      	b.n	802590a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8025904:	2303      	movs	r3, #3
 8025906:	73fb      	strb	r3, [r7, #15]
    break;
 8025908:	bf00      	nop
  }
  return usb_status;
 802590a:	7bfb      	ldrb	r3, [r7, #15]
}
 802590c:	4618      	mov	r0, r3
 802590e:	3714      	adds	r7, #20
 8025910:	46bd      	mov	sp, r7
 8025912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025916:	4770      	bx	lr

08025918 <calloc>:
 8025918:	4b02      	ldr	r3, [pc, #8]	; (8025924 <calloc+0xc>)
 802591a:	460a      	mov	r2, r1
 802591c:	4601      	mov	r1, r0
 802591e:	6818      	ldr	r0, [r3, #0]
 8025920:	f000 ba2a 	b.w	8025d78 <_calloc_r>
 8025924:	240004cc 	.word	0x240004cc

08025928 <__sflush_r>:
 8025928:	898a      	ldrh	r2, [r1, #12]
 802592a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802592e:	4605      	mov	r5, r0
 8025930:	0710      	lsls	r0, r2, #28
 8025932:	460c      	mov	r4, r1
 8025934:	d458      	bmi.n	80259e8 <__sflush_r+0xc0>
 8025936:	684b      	ldr	r3, [r1, #4]
 8025938:	2b00      	cmp	r3, #0
 802593a:	dc05      	bgt.n	8025948 <__sflush_r+0x20>
 802593c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802593e:	2b00      	cmp	r3, #0
 8025940:	dc02      	bgt.n	8025948 <__sflush_r+0x20>
 8025942:	2000      	movs	r0, #0
 8025944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802594a:	2e00      	cmp	r6, #0
 802594c:	d0f9      	beq.n	8025942 <__sflush_r+0x1a>
 802594e:	2300      	movs	r3, #0
 8025950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025954:	682f      	ldr	r7, [r5, #0]
 8025956:	602b      	str	r3, [r5, #0]
 8025958:	d032      	beq.n	80259c0 <__sflush_r+0x98>
 802595a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802595c:	89a3      	ldrh	r3, [r4, #12]
 802595e:	075a      	lsls	r2, r3, #29
 8025960:	d505      	bpl.n	802596e <__sflush_r+0x46>
 8025962:	6863      	ldr	r3, [r4, #4]
 8025964:	1ac0      	subs	r0, r0, r3
 8025966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025968:	b10b      	cbz	r3, 802596e <__sflush_r+0x46>
 802596a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802596c:	1ac0      	subs	r0, r0, r3
 802596e:	2300      	movs	r3, #0
 8025970:	4602      	mov	r2, r0
 8025972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025974:	6a21      	ldr	r1, [r4, #32]
 8025976:	4628      	mov	r0, r5
 8025978:	47b0      	blx	r6
 802597a:	1c43      	adds	r3, r0, #1
 802597c:	89a3      	ldrh	r3, [r4, #12]
 802597e:	d106      	bne.n	802598e <__sflush_r+0x66>
 8025980:	6829      	ldr	r1, [r5, #0]
 8025982:	291d      	cmp	r1, #29
 8025984:	d82c      	bhi.n	80259e0 <__sflush_r+0xb8>
 8025986:	4a2a      	ldr	r2, [pc, #168]	; (8025a30 <__sflush_r+0x108>)
 8025988:	40ca      	lsrs	r2, r1
 802598a:	07d6      	lsls	r6, r2, #31
 802598c:	d528      	bpl.n	80259e0 <__sflush_r+0xb8>
 802598e:	2200      	movs	r2, #0
 8025990:	6062      	str	r2, [r4, #4]
 8025992:	04d9      	lsls	r1, r3, #19
 8025994:	6922      	ldr	r2, [r4, #16]
 8025996:	6022      	str	r2, [r4, #0]
 8025998:	d504      	bpl.n	80259a4 <__sflush_r+0x7c>
 802599a:	1c42      	adds	r2, r0, #1
 802599c:	d101      	bne.n	80259a2 <__sflush_r+0x7a>
 802599e:	682b      	ldr	r3, [r5, #0]
 80259a0:	b903      	cbnz	r3, 80259a4 <__sflush_r+0x7c>
 80259a2:	6560      	str	r0, [r4, #84]	; 0x54
 80259a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80259a6:	602f      	str	r7, [r5, #0]
 80259a8:	2900      	cmp	r1, #0
 80259aa:	d0ca      	beq.n	8025942 <__sflush_r+0x1a>
 80259ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80259b0:	4299      	cmp	r1, r3
 80259b2:	d002      	beq.n	80259ba <__sflush_r+0x92>
 80259b4:	4628      	mov	r0, r5
 80259b6:	f000 f9f5 	bl	8025da4 <_free_r>
 80259ba:	2000      	movs	r0, #0
 80259bc:	6360      	str	r0, [r4, #52]	; 0x34
 80259be:	e7c1      	b.n	8025944 <__sflush_r+0x1c>
 80259c0:	6a21      	ldr	r1, [r4, #32]
 80259c2:	2301      	movs	r3, #1
 80259c4:	4628      	mov	r0, r5
 80259c6:	47b0      	blx	r6
 80259c8:	1c41      	adds	r1, r0, #1
 80259ca:	d1c7      	bne.n	802595c <__sflush_r+0x34>
 80259cc:	682b      	ldr	r3, [r5, #0]
 80259ce:	2b00      	cmp	r3, #0
 80259d0:	d0c4      	beq.n	802595c <__sflush_r+0x34>
 80259d2:	2b1d      	cmp	r3, #29
 80259d4:	d001      	beq.n	80259da <__sflush_r+0xb2>
 80259d6:	2b16      	cmp	r3, #22
 80259d8:	d101      	bne.n	80259de <__sflush_r+0xb6>
 80259da:	602f      	str	r7, [r5, #0]
 80259dc:	e7b1      	b.n	8025942 <__sflush_r+0x1a>
 80259de:	89a3      	ldrh	r3, [r4, #12]
 80259e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80259e4:	81a3      	strh	r3, [r4, #12]
 80259e6:	e7ad      	b.n	8025944 <__sflush_r+0x1c>
 80259e8:	690f      	ldr	r7, [r1, #16]
 80259ea:	2f00      	cmp	r7, #0
 80259ec:	d0a9      	beq.n	8025942 <__sflush_r+0x1a>
 80259ee:	0793      	lsls	r3, r2, #30
 80259f0:	680e      	ldr	r6, [r1, #0]
 80259f2:	bf08      	it	eq
 80259f4:	694b      	ldreq	r3, [r1, #20]
 80259f6:	600f      	str	r7, [r1, #0]
 80259f8:	bf18      	it	ne
 80259fa:	2300      	movne	r3, #0
 80259fc:	eba6 0807 	sub.w	r8, r6, r7
 8025a00:	608b      	str	r3, [r1, #8]
 8025a02:	f1b8 0f00 	cmp.w	r8, #0
 8025a06:	dd9c      	ble.n	8025942 <__sflush_r+0x1a>
 8025a08:	6a21      	ldr	r1, [r4, #32]
 8025a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025a0c:	4643      	mov	r3, r8
 8025a0e:	463a      	mov	r2, r7
 8025a10:	4628      	mov	r0, r5
 8025a12:	47b0      	blx	r6
 8025a14:	2800      	cmp	r0, #0
 8025a16:	dc06      	bgt.n	8025a26 <__sflush_r+0xfe>
 8025a18:	89a3      	ldrh	r3, [r4, #12]
 8025a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025a1e:	81a3      	strh	r3, [r4, #12]
 8025a20:	f04f 30ff 	mov.w	r0, #4294967295
 8025a24:	e78e      	b.n	8025944 <__sflush_r+0x1c>
 8025a26:	4407      	add	r7, r0
 8025a28:	eba8 0800 	sub.w	r8, r8, r0
 8025a2c:	e7e9      	b.n	8025a02 <__sflush_r+0xda>
 8025a2e:	bf00      	nop
 8025a30:	20400001 	.word	0x20400001

08025a34 <_fflush_r>:
 8025a34:	b538      	push	{r3, r4, r5, lr}
 8025a36:	690b      	ldr	r3, [r1, #16]
 8025a38:	4605      	mov	r5, r0
 8025a3a:	460c      	mov	r4, r1
 8025a3c:	b913      	cbnz	r3, 8025a44 <_fflush_r+0x10>
 8025a3e:	2500      	movs	r5, #0
 8025a40:	4628      	mov	r0, r5
 8025a42:	bd38      	pop	{r3, r4, r5, pc}
 8025a44:	b118      	cbz	r0, 8025a4e <_fflush_r+0x1a>
 8025a46:	6983      	ldr	r3, [r0, #24]
 8025a48:	b90b      	cbnz	r3, 8025a4e <_fflush_r+0x1a>
 8025a4a:	f000 f899 	bl	8025b80 <__sinit>
 8025a4e:	4b14      	ldr	r3, [pc, #80]	; (8025aa0 <_fflush_r+0x6c>)
 8025a50:	429c      	cmp	r4, r3
 8025a52:	d11b      	bne.n	8025a8c <_fflush_r+0x58>
 8025a54:	686c      	ldr	r4, [r5, #4]
 8025a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d0ef      	beq.n	8025a3e <_fflush_r+0xa>
 8025a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025a60:	07d0      	lsls	r0, r2, #31
 8025a62:	d404      	bmi.n	8025a6e <_fflush_r+0x3a>
 8025a64:	0599      	lsls	r1, r3, #22
 8025a66:	d402      	bmi.n	8025a6e <_fflush_r+0x3a>
 8025a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025a6a:	f000 f94c 	bl	8025d06 <__retarget_lock_acquire_recursive>
 8025a6e:	4628      	mov	r0, r5
 8025a70:	4621      	mov	r1, r4
 8025a72:	f7ff ff59 	bl	8025928 <__sflush_r>
 8025a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025a78:	07da      	lsls	r2, r3, #31
 8025a7a:	4605      	mov	r5, r0
 8025a7c:	d4e0      	bmi.n	8025a40 <_fflush_r+0xc>
 8025a7e:	89a3      	ldrh	r3, [r4, #12]
 8025a80:	059b      	lsls	r3, r3, #22
 8025a82:	d4dd      	bmi.n	8025a40 <_fflush_r+0xc>
 8025a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025a86:	f000 f93f 	bl	8025d08 <__retarget_lock_release_recursive>
 8025a8a:	e7d9      	b.n	8025a40 <_fflush_r+0xc>
 8025a8c:	4b05      	ldr	r3, [pc, #20]	; (8025aa4 <_fflush_r+0x70>)
 8025a8e:	429c      	cmp	r4, r3
 8025a90:	d101      	bne.n	8025a96 <_fflush_r+0x62>
 8025a92:	68ac      	ldr	r4, [r5, #8]
 8025a94:	e7df      	b.n	8025a56 <_fflush_r+0x22>
 8025a96:	4b04      	ldr	r3, [pc, #16]	; (8025aa8 <_fflush_r+0x74>)
 8025a98:	429c      	cmp	r4, r3
 8025a9a:	bf08      	it	eq
 8025a9c:	68ec      	ldreq	r4, [r5, #12]
 8025a9e:	e7da      	b.n	8025a56 <_fflush_r+0x22>
 8025aa0:	0802a5e4 	.word	0x0802a5e4
 8025aa4:	0802a604 	.word	0x0802a604
 8025aa8:	0802a5c4 	.word	0x0802a5c4

08025aac <fflush>:
 8025aac:	4601      	mov	r1, r0
 8025aae:	b920      	cbnz	r0, 8025aba <fflush+0xe>
 8025ab0:	4b04      	ldr	r3, [pc, #16]	; (8025ac4 <fflush+0x18>)
 8025ab2:	4905      	ldr	r1, [pc, #20]	; (8025ac8 <fflush+0x1c>)
 8025ab4:	6818      	ldr	r0, [r3, #0]
 8025ab6:	f000 b8e1 	b.w	8025c7c <_fwalk_reent>
 8025aba:	4b04      	ldr	r3, [pc, #16]	; (8025acc <fflush+0x20>)
 8025abc:	6818      	ldr	r0, [r3, #0]
 8025abe:	f7ff bfb9 	b.w	8025a34 <_fflush_r>
 8025ac2:	bf00      	nop
 8025ac4:	0802a624 	.word	0x0802a624
 8025ac8:	08025a35 	.word	0x08025a35
 8025acc:	240004cc 	.word	0x240004cc

08025ad0 <std>:
 8025ad0:	2300      	movs	r3, #0
 8025ad2:	b510      	push	{r4, lr}
 8025ad4:	4604      	mov	r4, r0
 8025ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8025ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025ade:	6083      	str	r3, [r0, #8]
 8025ae0:	8181      	strh	r1, [r0, #12]
 8025ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8025ae4:	81c2      	strh	r2, [r0, #14]
 8025ae6:	6183      	str	r3, [r0, #24]
 8025ae8:	4619      	mov	r1, r3
 8025aea:	2208      	movs	r2, #8
 8025aec:	305c      	adds	r0, #92	; 0x5c
 8025aee:	f000 f93b 	bl	8025d68 <memset>
 8025af2:	4b05      	ldr	r3, [pc, #20]	; (8025b08 <std+0x38>)
 8025af4:	6263      	str	r3, [r4, #36]	; 0x24
 8025af6:	4b05      	ldr	r3, [pc, #20]	; (8025b0c <std+0x3c>)
 8025af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8025afa:	4b05      	ldr	r3, [pc, #20]	; (8025b10 <std+0x40>)
 8025afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025afe:	4b05      	ldr	r3, [pc, #20]	; (8025b14 <std+0x44>)
 8025b00:	6224      	str	r4, [r4, #32]
 8025b02:	6323      	str	r3, [r4, #48]	; 0x30
 8025b04:	bd10      	pop	{r4, pc}
 8025b06:	bf00      	nop
 8025b08:	080261f1 	.word	0x080261f1
 8025b0c:	08026213 	.word	0x08026213
 8025b10:	0802624b 	.word	0x0802624b
 8025b14:	0802626f 	.word	0x0802626f

08025b18 <_cleanup_r>:
 8025b18:	4901      	ldr	r1, [pc, #4]	; (8025b20 <_cleanup_r+0x8>)
 8025b1a:	f000 b8af 	b.w	8025c7c <_fwalk_reent>
 8025b1e:	bf00      	nop
 8025b20:	08025a35 	.word	0x08025a35

08025b24 <__sfmoreglue>:
 8025b24:	b570      	push	{r4, r5, r6, lr}
 8025b26:	2268      	movs	r2, #104	; 0x68
 8025b28:	1e4d      	subs	r5, r1, #1
 8025b2a:	4355      	muls	r5, r2
 8025b2c:	460e      	mov	r6, r1
 8025b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025b32:	f000 f9a3 	bl	8025e7c <_malloc_r>
 8025b36:	4604      	mov	r4, r0
 8025b38:	b140      	cbz	r0, 8025b4c <__sfmoreglue+0x28>
 8025b3a:	2100      	movs	r1, #0
 8025b3c:	e9c0 1600 	strd	r1, r6, [r0]
 8025b40:	300c      	adds	r0, #12
 8025b42:	60a0      	str	r0, [r4, #8]
 8025b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025b48:	f000 f90e 	bl	8025d68 <memset>
 8025b4c:	4620      	mov	r0, r4
 8025b4e:	bd70      	pop	{r4, r5, r6, pc}

08025b50 <__sfp_lock_acquire>:
 8025b50:	4801      	ldr	r0, [pc, #4]	; (8025b58 <__sfp_lock_acquire+0x8>)
 8025b52:	f000 b8d8 	b.w	8025d06 <__retarget_lock_acquire_recursive>
 8025b56:	bf00      	nop
 8025b58:	2400ed99 	.word	0x2400ed99

08025b5c <__sfp_lock_release>:
 8025b5c:	4801      	ldr	r0, [pc, #4]	; (8025b64 <__sfp_lock_release+0x8>)
 8025b5e:	f000 b8d3 	b.w	8025d08 <__retarget_lock_release_recursive>
 8025b62:	bf00      	nop
 8025b64:	2400ed99 	.word	0x2400ed99

08025b68 <__sinit_lock_acquire>:
 8025b68:	4801      	ldr	r0, [pc, #4]	; (8025b70 <__sinit_lock_acquire+0x8>)
 8025b6a:	f000 b8cc 	b.w	8025d06 <__retarget_lock_acquire_recursive>
 8025b6e:	bf00      	nop
 8025b70:	2400ed9a 	.word	0x2400ed9a

08025b74 <__sinit_lock_release>:
 8025b74:	4801      	ldr	r0, [pc, #4]	; (8025b7c <__sinit_lock_release+0x8>)
 8025b76:	f000 b8c7 	b.w	8025d08 <__retarget_lock_release_recursive>
 8025b7a:	bf00      	nop
 8025b7c:	2400ed9a 	.word	0x2400ed9a

08025b80 <__sinit>:
 8025b80:	b510      	push	{r4, lr}
 8025b82:	4604      	mov	r4, r0
 8025b84:	f7ff fff0 	bl	8025b68 <__sinit_lock_acquire>
 8025b88:	69a3      	ldr	r3, [r4, #24]
 8025b8a:	b11b      	cbz	r3, 8025b94 <__sinit+0x14>
 8025b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025b90:	f7ff bff0 	b.w	8025b74 <__sinit_lock_release>
 8025b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025b98:	6523      	str	r3, [r4, #80]	; 0x50
 8025b9a:	4b13      	ldr	r3, [pc, #76]	; (8025be8 <__sinit+0x68>)
 8025b9c:	4a13      	ldr	r2, [pc, #76]	; (8025bec <__sinit+0x6c>)
 8025b9e:	681b      	ldr	r3, [r3, #0]
 8025ba0:	62a2      	str	r2, [r4, #40]	; 0x28
 8025ba2:	42a3      	cmp	r3, r4
 8025ba4:	bf04      	itt	eq
 8025ba6:	2301      	moveq	r3, #1
 8025ba8:	61a3      	streq	r3, [r4, #24]
 8025baa:	4620      	mov	r0, r4
 8025bac:	f000 f820 	bl	8025bf0 <__sfp>
 8025bb0:	6060      	str	r0, [r4, #4]
 8025bb2:	4620      	mov	r0, r4
 8025bb4:	f000 f81c 	bl	8025bf0 <__sfp>
 8025bb8:	60a0      	str	r0, [r4, #8]
 8025bba:	4620      	mov	r0, r4
 8025bbc:	f000 f818 	bl	8025bf0 <__sfp>
 8025bc0:	2200      	movs	r2, #0
 8025bc2:	60e0      	str	r0, [r4, #12]
 8025bc4:	2104      	movs	r1, #4
 8025bc6:	6860      	ldr	r0, [r4, #4]
 8025bc8:	f7ff ff82 	bl	8025ad0 <std>
 8025bcc:	68a0      	ldr	r0, [r4, #8]
 8025bce:	2201      	movs	r2, #1
 8025bd0:	2109      	movs	r1, #9
 8025bd2:	f7ff ff7d 	bl	8025ad0 <std>
 8025bd6:	68e0      	ldr	r0, [r4, #12]
 8025bd8:	2202      	movs	r2, #2
 8025bda:	2112      	movs	r1, #18
 8025bdc:	f7ff ff78 	bl	8025ad0 <std>
 8025be0:	2301      	movs	r3, #1
 8025be2:	61a3      	str	r3, [r4, #24]
 8025be4:	e7d2      	b.n	8025b8c <__sinit+0xc>
 8025be6:	bf00      	nop
 8025be8:	0802a624 	.word	0x0802a624
 8025bec:	08025b19 	.word	0x08025b19

08025bf0 <__sfp>:
 8025bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bf2:	4607      	mov	r7, r0
 8025bf4:	f7ff ffac 	bl	8025b50 <__sfp_lock_acquire>
 8025bf8:	4b1e      	ldr	r3, [pc, #120]	; (8025c74 <__sfp+0x84>)
 8025bfa:	681e      	ldr	r6, [r3, #0]
 8025bfc:	69b3      	ldr	r3, [r6, #24]
 8025bfe:	b913      	cbnz	r3, 8025c06 <__sfp+0x16>
 8025c00:	4630      	mov	r0, r6
 8025c02:	f7ff ffbd 	bl	8025b80 <__sinit>
 8025c06:	3648      	adds	r6, #72	; 0x48
 8025c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025c0c:	3b01      	subs	r3, #1
 8025c0e:	d503      	bpl.n	8025c18 <__sfp+0x28>
 8025c10:	6833      	ldr	r3, [r6, #0]
 8025c12:	b30b      	cbz	r3, 8025c58 <__sfp+0x68>
 8025c14:	6836      	ldr	r6, [r6, #0]
 8025c16:	e7f7      	b.n	8025c08 <__sfp+0x18>
 8025c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025c1c:	b9d5      	cbnz	r5, 8025c54 <__sfp+0x64>
 8025c1e:	4b16      	ldr	r3, [pc, #88]	; (8025c78 <__sfp+0x88>)
 8025c20:	60e3      	str	r3, [r4, #12]
 8025c22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025c26:	6665      	str	r5, [r4, #100]	; 0x64
 8025c28:	f000 f86c 	bl	8025d04 <__retarget_lock_init_recursive>
 8025c2c:	f7ff ff96 	bl	8025b5c <__sfp_lock_release>
 8025c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025c38:	6025      	str	r5, [r4, #0]
 8025c3a:	61a5      	str	r5, [r4, #24]
 8025c3c:	2208      	movs	r2, #8
 8025c3e:	4629      	mov	r1, r5
 8025c40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025c44:	f000 f890 	bl	8025d68 <memset>
 8025c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025c50:	4620      	mov	r0, r4
 8025c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c54:	3468      	adds	r4, #104	; 0x68
 8025c56:	e7d9      	b.n	8025c0c <__sfp+0x1c>
 8025c58:	2104      	movs	r1, #4
 8025c5a:	4638      	mov	r0, r7
 8025c5c:	f7ff ff62 	bl	8025b24 <__sfmoreglue>
 8025c60:	4604      	mov	r4, r0
 8025c62:	6030      	str	r0, [r6, #0]
 8025c64:	2800      	cmp	r0, #0
 8025c66:	d1d5      	bne.n	8025c14 <__sfp+0x24>
 8025c68:	f7ff ff78 	bl	8025b5c <__sfp_lock_release>
 8025c6c:	230c      	movs	r3, #12
 8025c6e:	603b      	str	r3, [r7, #0]
 8025c70:	e7ee      	b.n	8025c50 <__sfp+0x60>
 8025c72:	bf00      	nop
 8025c74:	0802a624 	.word	0x0802a624
 8025c78:	ffff0001 	.word	0xffff0001

08025c7c <_fwalk_reent>:
 8025c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c80:	4606      	mov	r6, r0
 8025c82:	4688      	mov	r8, r1
 8025c84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025c88:	2700      	movs	r7, #0
 8025c8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025c8e:	f1b9 0901 	subs.w	r9, r9, #1
 8025c92:	d505      	bpl.n	8025ca0 <_fwalk_reent+0x24>
 8025c94:	6824      	ldr	r4, [r4, #0]
 8025c96:	2c00      	cmp	r4, #0
 8025c98:	d1f7      	bne.n	8025c8a <_fwalk_reent+0xe>
 8025c9a:	4638      	mov	r0, r7
 8025c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025ca0:	89ab      	ldrh	r3, [r5, #12]
 8025ca2:	2b01      	cmp	r3, #1
 8025ca4:	d907      	bls.n	8025cb6 <_fwalk_reent+0x3a>
 8025ca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025caa:	3301      	adds	r3, #1
 8025cac:	d003      	beq.n	8025cb6 <_fwalk_reent+0x3a>
 8025cae:	4629      	mov	r1, r5
 8025cb0:	4630      	mov	r0, r6
 8025cb2:	47c0      	blx	r8
 8025cb4:	4307      	orrs	r7, r0
 8025cb6:	3568      	adds	r5, #104	; 0x68
 8025cb8:	e7e9      	b.n	8025c8e <_fwalk_reent+0x12>
	...

08025cbc <__libc_init_array>:
 8025cbc:	b570      	push	{r4, r5, r6, lr}
 8025cbe:	4d0d      	ldr	r5, [pc, #52]	; (8025cf4 <__libc_init_array+0x38>)
 8025cc0:	4c0d      	ldr	r4, [pc, #52]	; (8025cf8 <__libc_init_array+0x3c>)
 8025cc2:	1b64      	subs	r4, r4, r5
 8025cc4:	10a4      	asrs	r4, r4, #2
 8025cc6:	2600      	movs	r6, #0
 8025cc8:	42a6      	cmp	r6, r4
 8025cca:	d109      	bne.n	8025ce0 <__libc_init_array+0x24>
 8025ccc:	4d0b      	ldr	r5, [pc, #44]	; (8025cfc <__libc_init_array+0x40>)
 8025cce:	4c0c      	ldr	r4, [pc, #48]	; (8025d00 <__libc_init_array+0x44>)
 8025cd0:	f000 ffd6 	bl	8026c80 <_init>
 8025cd4:	1b64      	subs	r4, r4, r5
 8025cd6:	10a4      	asrs	r4, r4, #2
 8025cd8:	2600      	movs	r6, #0
 8025cda:	42a6      	cmp	r6, r4
 8025cdc:	d105      	bne.n	8025cea <__libc_init_array+0x2e>
 8025cde:	bd70      	pop	{r4, r5, r6, pc}
 8025ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8025ce4:	4798      	blx	r3
 8025ce6:	3601      	adds	r6, #1
 8025ce8:	e7ee      	b.n	8025cc8 <__libc_init_array+0xc>
 8025cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8025cee:	4798      	blx	r3
 8025cf0:	3601      	adds	r6, #1
 8025cf2:	e7f2      	b.n	8025cda <__libc_init_array+0x1e>
 8025cf4:	0802a70c 	.word	0x0802a70c
 8025cf8:	0802a70c 	.word	0x0802a70c
 8025cfc:	0802a70c 	.word	0x0802a70c
 8025d00:	0802a710 	.word	0x0802a710

08025d04 <__retarget_lock_init_recursive>:
 8025d04:	4770      	bx	lr

08025d06 <__retarget_lock_acquire_recursive>:
 8025d06:	4770      	bx	lr

08025d08 <__retarget_lock_release_recursive>:
 8025d08:	4770      	bx	lr
	...

08025d0c <malloc>:
 8025d0c:	4b02      	ldr	r3, [pc, #8]	; (8025d18 <malloc+0xc>)
 8025d0e:	4601      	mov	r1, r0
 8025d10:	6818      	ldr	r0, [r3, #0]
 8025d12:	f000 b8b3 	b.w	8025e7c <_malloc_r>
 8025d16:	bf00      	nop
 8025d18:	240004cc 	.word	0x240004cc

08025d1c <free>:
 8025d1c:	4b02      	ldr	r3, [pc, #8]	; (8025d28 <free+0xc>)
 8025d1e:	4601      	mov	r1, r0
 8025d20:	6818      	ldr	r0, [r3, #0]
 8025d22:	f000 b83f 	b.w	8025da4 <_free_r>
 8025d26:	bf00      	nop
 8025d28:	240004cc 	.word	0x240004cc

08025d2c <memcmp>:
 8025d2c:	b510      	push	{r4, lr}
 8025d2e:	3901      	subs	r1, #1
 8025d30:	4402      	add	r2, r0
 8025d32:	4290      	cmp	r0, r2
 8025d34:	d101      	bne.n	8025d3a <memcmp+0xe>
 8025d36:	2000      	movs	r0, #0
 8025d38:	e005      	b.n	8025d46 <memcmp+0x1a>
 8025d3a:	7803      	ldrb	r3, [r0, #0]
 8025d3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025d40:	42a3      	cmp	r3, r4
 8025d42:	d001      	beq.n	8025d48 <memcmp+0x1c>
 8025d44:	1b18      	subs	r0, r3, r4
 8025d46:	bd10      	pop	{r4, pc}
 8025d48:	3001      	adds	r0, #1
 8025d4a:	e7f2      	b.n	8025d32 <memcmp+0x6>

08025d4c <memcpy>:
 8025d4c:	440a      	add	r2, r1
 8025d4e:	4291      	cmp	r1, r2
 8025d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8025d54:	d100      	bne.n	8025d58 <memcpy+0xc>
 8025d56:	4770      	bx	lr
 8025d58:	b510      	push	{r4, lr}
 8025d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025d62:	4291      	cmp	r1, r2
 8025d64:	d1f9      	bne.n	8025d5a <memcpy+0xe>
 8025d66:	bd10      	pop	{r4, pc}

08025d68 <memset>:
 8025d68:	4402      	add	r2, r0
 8025d6a:	4603      	mov	r3, r0
 8025d6c:	4293      	cmp	r3, r2
 8025d6e:	d100      	bne.n	8025d72 <memset+0xa>
 8025d70:	4770      	bx	lr
 8025d72:	f803 1b01 	strb.w	r1, [r3], #1
 8025d76:	e7f9      	b.n	8025d6c <memset+0x4>

08025d78 <_calloc_r>:
 8025d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025d7a:	fba1 2402 	umull	r2, r4, r1, r2
 8025d7e:	b94c      	cbnz	r4, 8025d94 <_calloc_r+0x1c>
 8025d80:	4611      	mov	r1, r2
 8025d82:	9201      	str	r2, [sp, #4]
 8025d84:	f000 f87a 	bl	8025e7c <_malloc_r>
 8025d88:	9a01      	ldr	r2, [sp, #4]
 8025d8a:	4605      	mov	r5, r0
 8025d8c:	b930      	cbnz	r0, 8025d9c <_calloc_r+0x24>
 8025d8e:	4628      	mov	r0, r5
 8025d90:	b003      	add	sp, #12
 8025d92:	bd30      	pop	{r4, r5, pc}
 8025d94:	220c      	movs	r2, #12
 8025d96:	6002      	str	r2, [r0, #0]
 8025d98:	2500      	movs	r5, #0
 8025d9a:	e7f8      	b.n	8025d8e <_calloc_r+0x16>
 8025d9c:	4621      	mov	r1, r4
 8025d9e:	f7ff ffe3 	bl	8025d68 <memset>
 8025da2:	e7f4      	b.n	8025d8e <_calloc_r+0x16>

08025da4 <_free_r>:
 8025da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025da6:	2900      	cmp	r1, #0
 8025da8:	d044      	beq.n	8025e34 <_free_r+0x90>
 8025daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025dae:	9001      	str	r0, [sp, #4]
 8025db0:	2b00      	cmp	r3, #0
 8025db2:	f1a1 0404 	sub.w	r4, r1, #4
 8025db6:	bfb8      	it	lt
 8025db8:	18e4      	addlt	r4, r4, r3
 8025dba:	f000 fbe7 	bl	802658c <__malloc_lock>
 8025dbe:	4a1e      	ldr	r2, [pc, #120]	; (8025e38 <_free_r+0x94>)
 8025dc0:	9801      	ldr	r0, [sp, #4]
 8025dc2:	6813      	ldr	r3, [r2, #0]
 8025dc4:	b933      	cbnz	r3, 8025dd4 <_free_r+0x30>
 8025dc6:	6063      	str	r3, [r4, #4]
 8025dc8:	6014      	str	r4, [r2, #0]
 8025dca:	b003      	add	sp, #12
 8025dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025dd0:	f000 bbe2 	b.w	8026598 <__malloc_unlock>
 8025dd4:	42a3      	cmp	r3, r4
 8025dd6:	d908      	bls.n	8025dea <_free_r+0x46>
 8025dd8:	6825      	ldr	r5, [r4, #0]
 8025dda:	1961      	adds	r1, r4, r5
 8025ddc:	428b      	cmp	r3, r1
 8025dde:	bf01      	itttt	eq
 8025de0:	6819      	ldreq	r1, [r3, #0]
 8025de2:	685b      	ldreq	r3, [r3, #4]
 8025de4:	1949      	addeq	r1, r1, r5
 8025de6:	6021      	streq	r1, [r4, #0]
 8025de8:	e7ed      	b.n	8025dc6 <_free_r+0x22>
 8025dea:	461a      	mov	r2, r3
 8025dec:	685b      	ldr	r3, [r3, #4]
 8025dee:	b10b      	cbz	r3, 8025df4 <_free_r+0x50>
 8025df0:	42a3      	cmp	r3, r4
 8025df2:	d9fa      	bls.n	8025dea <_free_r+0x46>
 8025df4:	6811      	ldr	r1, [r2, #0]
 8025df6:	1855      	adds	r5, r2, r1
 8025df8:	42a5      	cmp	r5, r4
 8025dfa:	d10b      	bne.n	8025e14 <_free_r+0x70>
 8025dfc:	6824      	ldr	r4, [r4, #0]
 8025dfe:	4421      	add	r1, r4
 8025e00:	1854      	adds	r4, r2, r1
 8025e02:	42a3      	cmp	r3, r4
 8025e04:	6011      	str	r1, [r2, #0]
 8025e06:	d1e0      	bne.n	8025dca <_free_r+0x26>
 8025e08:	681c      	ldr	r4, [r3, #0]
 8025e0a:	685b      	ldr	r3, [r3, #4]
 8025e0c:	6053      	str	r3, [r2, #4]
 8025e0e:	4421      	add	r1, r4
 8025e10:	6011      	str	r1, [r2, #0]
 8025e12:	e7da      	b.n	8025dca <_free_r+0x26>
 8025e14:	d902      	bls.n	8025e1c <_free_r+0x78>
 8025e16:	230c      	movs	r3, #12
 8025e18:	6003      	str	r3, [r0, #0]
 8025e1a:	e7d6      	b.n	8025dca <_free_r+0x26>
 8025e1c:	6825      	ldr	r5, [r4, #0]
 8025e1e:	1961      	adds	r1, r4, r5
 8025e20:	428b      	cmp	r3, r1
 8025e22:	bf04      	itt	eq
 8025e24:	6819      	ldreq	r1, [r3, #0]
 8025e26:	685b      	ldreq	r3, [r3, #4]
 8025e28:	6063      	str	r3, [r4, #4]
 8025e2a:	bf04      	itt	eq
 8025e2c:	1949      	addeq	r1, r1, r5
 8025e2e:	6021      	streq	r1, [r4, #0]
 8025e30:	6054      	str	r4, [r2, #4]
 8025e32:	e7ca      	b.n	8025dca <_free_r+0x26>
 8025e34:	b003      	add	sp, #12
 8025e36:	bd30      	pop	{r4, r5, pc}
 8025e38:	2400ed9c 	.word	0x2400ed9c

08025e3c <sbrk_aligned>:
 8025e3c:	b570      	push	{r4, r5, r6, lr}
 8025e3e:	4e0e      	ldr	r6, [pc, #56]	; (8025e78 <sbrk_aligned+0x3c>)
 8025e40:	460c      	mov	r4, r1
 8025e42:	6831      	ldr	r1, [r6, #0]
 8025e44:	4605      	mov	r5, r0
 8025e46:	b911      	cbnz	r1, 8025e4e <sbrk_aligned+0x12>
 8025e48:	f000 f9c2 	bl	80261d0 <_sbrk_r>
 8025e4c:	6030      	str	r0, [r6, #0]
 8025e4e:	4621      	mov	r1, r4
 8025e50:	4628      	mov	r0, r5
 8025e52:	f000 f9bd 	bl	80261d0 <_sbrk_r>
 8025e56:	1c43      	adds	r3, r0, #1
 8025e58:	d00a      	beq.n	8025e70 <sbrk_aligned+0x34>
 8025e5a:	1cc4      	adds	r4, r0, #3
 8025e5c:	f024 0403 	bic.w	r4, r4, #3
 8025e60:	42a0      	cmp	r0, r4
 8025e62:	d007      	beq.n	8025e74 <sbrk_aligned+0x38>
 8025e64:	1a21      	subs	r1, r4, r0
 8025e66:	4628      	mov	r0, r5
 8025e68:	f000 f9b2 	bl	80261d0 <_sbrk_r>
 8025e6c:	3001      	adds	r0, #1
 8025e6e:	d101      	bne.n	8025e74 <sbrk_aligned+0x38>
 8025e70:	f04f 34ff 	mov.w	r4, #4294967295
 8025e74:	4620      	mov	r0, r4
 8025e76:	bd70      	pop	{r4, r5, r6, pc}
 8025e78:	2400eda0 	.word	0x2400eda0

08025e7c <_malloc_r>:
 8025e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e80:	1ccd      	adds	r5, r1, #3
 8025e82:	f025 0503 	bic.w	r5, r5, #3
 8025e86:	3508      	adds	r5, #8
 8025e88:	2d0c      	cmp	r5, #12
 8025e8a:	bf38      	it	cc
 8025e8c:	250c      	movcc	r5, #12
 8025e8e:	2d00      	cmp	r5, #0
 8025e90:	4607      	mov	r7, r0
 8025e92:	db01      	blt.n	8025e98 <_malloc_r+0x1c>
 8025e94:	42a9      	cmp	r1, r5
 8025e96:	d905      	bls.n	8025ea4 <_malloc_r+0x28>
 8025e98:	230c      	movs	r3, #12
 8025e9a:	603b      	str	r3, [r7, #0]
 8025e9c:	2600      	movs	r6, #0
 8025e9e:	4630      	mov	r0, r6
 8025ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ea4:	4e2e      	ldr	r6, [pc, #184]	; (8025f60 <_malloc_r+0xe4>)
 8025ea6:	f000 fb71 	bl	802658c <__malloc_lock>
 8025eaa:	6833      	ldr	r3, [r6, #0]
 8025eac:	461c      	mov	r4, r3
 8025eae:	bb34      	cbnz	r4, 8025efe <_malloc_r+0x82>
 8025eb0:	4629      	mov	r1, r5
 8025eb2:	4638      	mov	r0, r7
 8025eb4:	f7ff ffc2 	bl	8025e3c <sbrk_aligned>
 8025eb8:	1c43      	adds	r3, r0, #1
 8025eba:	4604      	mov	r4, r0
 8025ebc:	d14d      	bne.n	8025f5a <_malloc_r+0xde>
 8025ebe:	6834      	ldr	r4, [r6, #0]
 8025ec0:	4626      	mov	r6, r4
 8025ec2:	2e00      	cmp	r6, #0
 8025ec4:	d140      	bne.n	8025f48 <_malloc_r+0xcc>
 8025ec6:	6823      	ldr	r3, [r4, #0]
 8025ec8:	4631      	mov	r1, r6
 8025eca:	4638      	mov	r0, r7
 8025ecc:	eb04 0803 	add.w	r8, r4, r3
 8025ed0:	f000 f97e 	bl	80261d0 <_sbrk_r>
 8025ed4:	4580      	cmp	r8, r0
 8025ed6:	d13a      	bne.n	8025f4e <_malloc_r+0xd2>
 8025ed8:	6821      	ldr	r1, [r4, #0]
 8025eda:	3503      	adds	r5, #3
 8025edc:	1a6d      	subs	r5, r5, r1
 8025ede:	f025 0503 	bic.w	r5, r5, #3
 8025ee2:	3508      	adds	r5, #8
 8025ee4:	2d0c      	cmp	r5, #12
 8025ee6:	bf38      	it	cc
 8025ee8:	250c      	movcc	r5, #12
 8025eea:	4629      	mov	r1, r5
 8025eec:	4638      	mov	r0, r7
 8025eee:	f7ff ffa5 	bl	8025e3c <sbrk_aligned>
 8025ef2:	3001      	adds	r0, #1
 8025ef4:	d02b      	beq.n	8025f4e <_malloc_r+0xd2>
 8025ef6:	6823      	ldr	r3, [r4, #0]
 8025ef8:	442b      	add	r3, r5
 8025efa:	6023      	str	r3, [r4, #0]
 8025efc:	e00e      	b.n	8025f1c <_malloc_r+0xa0>
 8025efe:	6822      	ldr	r2, [r4, #0]
 8025f00:	1b52      	subs	r2, r2, r5
 8025f02:	d41e      	bmi.n	8025f42 <_malloc_r+0xc6>
 8025f04:	2a0b      	cmp	r2, #11
 8025f06:	d916      	bls.n	8025f36 <_malloc_r+0xba>
 8025f08:	1961      	adds	r1, r4, r5
 8025f0a:	42a3      	cmp	r3, r4
 8025f0c:	6025      	str	r5, [r4, #0]
 8025f0e:	bf18      	it	ne
 8025f10:	6059      	strne	r1, [r3, #4]
 8025f12:	6863      	ldr	r3, [r4, #4]
 8025f14:	bf08      	it	eq
 8025f16:	6031      	streq	r1, [r6, #0]
 8025f18:	5162      	str	r2, [r4, r5]
 8025f1a:	604b      	str	r3, [r1, #4]
 8025f1c:	4638      	mov	r0, r7
 8025f1e:	f104 060b 	add.w	r6, r4, #11
 8025f22:	f000 fb39 	bl	8026598 <__malloc_unlock>
 8025f26:	f026 0607 	bic.w	r6, r6, #7
 8025f2a:	1d23      	adds	r3, r4, #4
 8025f2c:	1af2      	subs	r2, r6, r3
 8025f2e:	d0b6      	beq.n	8025e9e <_malloc_r+0x22>
 8025f30:	1b9b      	subs	r3, r3, r6
 8025f32:	50a3      	str	r3, [r4, r2]
 8025f34:	e7b3      	b.n	8025e9e <_malloc_r+0x22>
 8025f36:	6862      	ldr	r2, [r4, #4]
 8025f38:	42a3      	cmp	r3, r4
 8025f3a:	bf0c      	ite	eq
 8025f3c:	6032      	streq	r2, [r6, #0]
 8025f3e:	605a      	strne	r2, [r3, #4]
 8025f40:	e7ec      	b.n	8025f1c <_malloc_r+0xa0>
 8025f42:	4623      	mov	r3, r4
 8025f44:	6864      	ldr	r4, [r4, #4]
 8025f46:	e7b2      	b.n	8025eae <_malloc_r+0x32>
 8025f48:	4634      	mov	r4, r6
 8025f4a:	6876      	ldr	r6, [r6, #4]
 8025f4c:	e7b9      	b.n	8025ec2 <_malloc_r+0x46>
 8025f4e:	230c      	movs	r3, #12
 8025f50:	603b      	str	r3, [r7, #0]
 8025f52:	4638      	mov	r0, r7
 8025f54:	f000 fb20 	bl	8026598 <__malloc_unlock>
 8025f58:	e7a1      	b.n	8025e9e <_malloc_r+0x22>
 8025f5a:	6025      	str	r5, [r4, #0]
 8025f5c:	e7de      	b.n	8025f1c <_malloc_r+0xa0>
 8025f5e:	bf00      	nop
 8025f60:	2400ed9c 	.word	0x2400ed9c

08025f64 <iprintf>:
 8025f64:	b40f      	push	{r0, r1, r2, r3}
 8025f66:	4b0a      	ldr	r3, [pc, #40]	; (8025f90 <iprintf+0x2c>)
 8025f68:	b513      	push	{r0, r1, r4, lr}
 8025f6a:	681c      	ldr	r4, [r3, #0]
 8025f6c:	b124      	cbz	r4, 8025f78 <iprintf+0x14>
 8025f6e:	69a3      	ldr	r3, [r4, #24]
 8025f70:	b913      	cbnz	r3, 8025f78 <iprintf+0x14>
 8025f72:	4620      	mov	r0, r4
 8025f74:	f7ff fe04 	bl	8025b80 <__sinit>
 8025f78:	ab05      	add	r3, sp, #20
 8025f7a:	9a04      	ldr	r2, [sp, #16]
 8025f7c:	68a1      	ldr	r1, [r4, #8]
 8025f7e:	9301      	str	r3, [sp, #4]
 8025f80:	4620      	mov	r0, r4
 8025f82:	f000 fb39 	bl	80265f8 <_vfiprintf_r>
 8025f86:	b002      	add	sp, #8
 8025f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f8c:	b004      	add	sp, #16
 8025f8e:	4770      	bx	lr
 8025f90:	240004cc 	.word	0x240004cc

08025f94 <_puts_r>:
 8025f94:	b570      	push	{r4, r5, r6, lr}
 8025f96:	460e      	mov	r6, r1
 8025f98:	4605      	mov	r5, r0
 8025f9a:	b118      	cbz	r0, 8025fa4 <_puts_r+0x10>
 8025f9c:	6983      	ldr	r3, [r0, #24]
 8025f9e:	b90b      	cbnz	r3, 8025fa4 <_puts_r+0x10>
 8025fa0:	f7ff fdee 	bl	8025b80 <__sinit>
 8025fa4:	69ab      	ldr	r3, [r5, #24]
 8025fa6:	68ac      	ldr	r4, [r5, #8]
 8025fa8:	b913      	cbnz	r3, 8025fb0 <_puts_r+0x1c>
 8025faa:	4628      	mov	r0, r5
 8025fac:	f7ff fde8 	bl	8025b80 <__sinit>
 8025fb0:	4b2c      	ldr	r3, [pc, #176]	; (8026064 <_puts_r+0xd0>)
 8025fb2:	429c      	cmp	r4, r3
 8025fb4:	d120      	bne.n	8025ff8 <_puts_r+0x64>
 8025fb6:	686c      	ldr	r4, [r5, #4]
 8025fb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025fba:	07db      	lsls	r3, r3, #31
 8025fbc:	d405      	bmi.n	8025fca <_puts_r+0x36>
 8025fbe:	89a3      	ldrh	r3, [r4, #12]
 8025fc0:	0598      	lsls	r0, r3, #22
 8025fc2:	d402      	bmi.n	8025fca <_puts_r+0x36>
 8025fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025fc6:	f7ff fe9e 	bl	8025d06 <__retarget_lock_acquire_recursive>
 8025fca:	89a3      	ldrh	r3, [r4, #12]
 8025fcc:	0719      	lsls	r1, r3, #28
 8025fce:	d51d      	bpl.n	802600c <_puts_r+0x78>
 8025fd0:	6923      	ldr	r3, [r4, #16]
 8025fd2:	b1db      	cbz	r3, 802600c <_puts_r+0x78>
 8025fd4:	3e01      	subs	r6, #1
 8025fd6:	68a3      	ldr	r3, [r4, #8]
 8025fd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025fdc:	3b01      	subs	r3, #1
 8025fde:	60a3      	str	r3, [r4, #8]
 8025fe0:	bb39      	cbnz	r1, 8026032 <_puts_r+0x9e>
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	da38      	bge.n	8026058 <_puts_r+0xc4>
 8025fe6:	4622      	mov	r2, r4
 8025fe8:	210a      	movs	r1, #10
 8025fea:	4628      	mov	r0, r5
 8025fec:	f000 f944 	bl	8026278 <__swbuf_r>
 8025ff0:	3001      	adds	r0, #1
 8025ff2:	d011      	beq.n	8026018 <_puts_r+0x84>
 8025ff4:	250a      	movs	r5, #10
 8025ff6:	e011      	b.n	802601c <_puts_r+0x88>
 8025ff8:	4b1b      	ldr	r3, [pc, #108]	; (8026068 <_puts_r+0xd4>)
 8025ffa:	429c      	cmp	r4, r3
 8025ffc:	d101      	bne.n	8026002 <_puts_r+0x6e>
 8025ffe:	68ac      	ldr	r4, [r5, #8]
 8026000:	e7da      	b.n	8025fb8 <_puts_r+0x24>
 8026002:	4b1a      	ldr	r3, [pc, #104]	; (802606c <_puts_r+0xd8>)
 8026004:	429c      	cmp	r4, r3
 8026006:	bf08      	it	eq
 8026008:	68ec      	ldreq	r4, [r5, #12]
 802600a:	e7d5      	b.n	8025fb8 <_puts_r+0x24>
 802600c:	4621      	mov	r1, r4
 802600e:	4628      	mov	r0, r5
 8026010:	f000 f996 	bl	8026340 <__swsetup_r>
 8026014:	2800      	cmp	r0, #0
 8026016:	d0dd      	beq.n	8025fd4 <_puts_r+0x40>
 8026018:	f04f 35ff 	mov.w	r5, #4294967295
 802601c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802601e:	07da      	lsls	r2, r3, #31
 8026020:	d405      	bmi.n	802602e <_puts_r+0x9a>
 8026022:	89a3      	ldrh	r3, [r4, #12]
 8026024:	059b      	lsls	r3, r3, #22
 8026026:	d402      	bmi.n	802602e <_puts_r+0x9a>
 8026028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802602a:	f7ff fe6d 	bl	8025d08 <__retarget_lock_release_recursive>
 802602e:	4628      	mov	r0, r5
 8026030:	bd70      	pop	{r4, r5, r6, pc}
 8026032:	2b00      	cmp	r3, #0
 8026034:	da04      	bge.n	8026040 <_puts_r+0xac>
 8026036:	69a2      	ldr	r2, [r4, #24]
 8026038:	429a      	cmp	r2, r3
 802603a:	dc06      	bgt.n	802604a <_puts_r+0xb6>
 802603c:	290a      	cmp	r1, #10
 802603e:	d004      	beq.n	802604a <_puts_r+0xb6>
 8026040:	6823      	ldr	r3, [r4, #0]
 8026042:	1c5a      	adds	r2, r3, #1
 8026044:	6022      	str	r2, [r4, #0]
 8026046:	7019      	strb	r1, [r3, #0]
 8026048:	e7c5      	b.n	8025fd6 <_puts_r+0x42>
 802604a:	4622      	mov	r2, r4
 802604c:	4628      	mov	r0, r5
 802604e:	f000 f913 	bl	8026278 <__swbuf_r>
 8026052:	3001      	adds	r0, #1
 8026054:	d1bf      	bne.n	8025fd6 <_puts_r+0x42>
 8026056:	e7df      	b.n	8026018 <_puts_r+0x84>
 8026058:	6823      	ldr	r3, [r4, #0]
 802605a:	250a      	movs	r5, #10
 802605c:	1c5a      	adds	r2, r3, #1
 802605e:	6022      	str	r2, [r4, #0]
 8026060:	701d      	strb	r5, [r3, #0]
 8026062:	e7db      	b.n	802601c <_puts_r+0x88>
 8026064:	0802a5e4 	.word	0x0802a5e4
 8026068:	0802a604 	.word	0x0802a604
 802606c:	0802a5c4 	.word	0x0802a5c4

08026070 <puts>:
 8026070:	4b02      	ldr	r3, [pc, #8]	; (802607c <puts+0xc>)
 8026072:	4601      	mov	r1, r0
 8026074:	6818      	ldr	r0, [r3, #0]
 8026076:	f7ff bf8d 	b.w	8025f94 <_puts_r>
 802607a:	bf00      	nop
 802607c:	240004cc 	.word	0x240004cc

08026080 <rand>:
 8026080:	4b16      	ldr	r3, [pc, #88]	; (80260dc <rand+0x5c>)
 8026082:	b510      	push	{r4, lr}
 8026084:	681c      	ldr	r4, [r3, #0]
 8026086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026088:	b9b3      	cbnz	r3, 80260b8 <rand+0x38>
 802608a:	2018      	movs	r0, #24
 802608c:	f7ff fe3e 	bl	8025d0c <malloc>
 8026090:	63a0      	str	r0, [r4, #56]	; 0x38
 8026092:	b928      	cbnz	r0, 80260a0 <rand+0x20>
 8026094:	4602      	mov	r2, r0
 8026096:	4b12      	ldr	r3, [pc, #72]	; (80260e0 <rand+0x60>)
 8026098:	4812      	ldr	r0, [pc, #72]	; (80260e4 <rand+0x64>)
 802609a:	214e      	movs	r1, #78	; 0x4e
 802609c:	f000 f9be 	bl	802641c <__assert_func>
 80260a0:	4a11      	ldr	r2, [pc, #68]	; (80260e8 <rand+0x68>)
 80260a2:	4b12      	ldr	r3, [pc, #72]	; (80260ec <rand+0x6c>)
 80260a4:	e9c0 2300 	strd	r2, r3, [r0]
 80260a8:	4b11      	ldr	r3, [pc, #68]	; (80260f0 <rand+0x70>)
 80260aa:	6083      	str	r3, [r0, #8]
 80260ac:	230b      	movs	r3, #11
 80260ae:	8183      	strh	r3, [r0, #12]
 80260b0:	2201      	movs	r2, #1
 80260b2:	2300      	movs	r3, #0
 80260b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80260b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80260ba:	4a0e      	ldr	r2, [pc, #56]	; (80260f4 <rand+0x74>)
 80260bc:	6920      	ldr	r0, [r4, #16]
 80260be:	6963      	ldr	r3, [r4, #20]
 80260c0:	490d      	ldr	r1, [pc, #52]	; (80260f8 <rand+0x78>)
 80260c2:	4342      	muls	r2, r0
 80260c4:	fb01 2203 	mla	r2, r1, r3, r2
 80260c8:	fba0 0101 	umull	r0, r1, r0, r1
 80260cc:	1c43      	adds	r3, r0, #1
 80260ce:	eb42 0001 	adc.w	r0, r2, r1
 80260d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80260d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80260da:	bd10      	pop	{r4, pc}
 80260dc:	240004cc 	.word	0x240004cc
 80260e0:	0802a628 	.word	0x0802a628
 80260e4:	0802a63f 	.word	0x0802a63f
 80260e8:	abcd330e 	.word	0xabcd330e
 80260ec:	e66d1234 	.word	0xe66d1234
 80260f0:	0005deec 	.word	0x0005deec
 80260f4:	5851f42d 	.word	0x5851f42d
 80260f8:	4c957f2d 	.word	0x4c957f2d

080260fc <cleanup_glue>:
 80260fc:	b538      	push	{r3, r4, r5, lr}
 80260fe:	460c      	mov	r4, r1
 8026100:	6809      	ldr	r1, [r1, #0]
 8026102:	4605      	mov	r5, r0
 8026104:	b109      	cbz	r1, 802610a <cleanup_glue+0xe>
 8026106:	f7ff fff9 	bl	80260fc <cleanup_glue>
 802610a:	4621      	mov	r1, r4
 802610c:	4628      	mov	r0, r5
 802610e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026112:	f7ff be47 	b.w	8025da4 <_free_r>
	...

08026118 <_reclaim_reent>:
 8026118:	4b2c      	ldr	r3, [pc, #176]	; (80261cc <_reclaim_reent+0xb4>)
 802611a:	681b      	ldr	r3, [r3, #0]
 802611c:	4283      	cmp	r3, r0
 802611e:	b570      	push	{r4, r5, r6, lr}
 8026120:	4604      	mov	r4, r0
 8026122:	d051      	beq.n	80261c8 <_reclaim_reent+0xb0>
 8026124:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8026126:	b143      	cbz	r3, 802613a <_reclaim_reent+0x22>
 8026128:	68db      	ldr	r3, [r3, #12]
 802612a:	2b00      	cmp	r3, #0
 802612c:	d14a      	bne.n	80261c4 <_reclaim_reent+0xac>
 802612e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026130:	6819      	ldr	r1, [r3, #0]
 8026132:	b111      	cbz	r1, 802613a <_reclaim_reent+0x22>
 8026134:	4620      	mov	r0, r4
 8026136:	f7ff fe35 	bl	8025da4 <_free_r>
 802613a:	6961      	ldr	r1, [r4, #20]
 802613c:	b111      	cbz	r1, 8026144 <_reclaim_reent+0x2c>
 802613e:	4620      	mov	r0, r4
 8026140:	f7ff fe30 	bl	8025da4 <_free_r>
 8026144:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026146:	b111      	cbz	r1, 802614e <_reclaim_reent+0x36>
 8026148:	4620      	mov	r0, r4
 802614a:	f7ff fe2b 	bl	8025da4 <_free_r>
 802614e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8026150:	b111      	cbz	r1, 8026158 <_reclaim_reent+0x40>
 8026152:	4620      	mov	r0, r4
 8026154:	f7ff fe26 	bl	8025da4 <_free_r>
 8026158:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802615a:	b111      	cbz	r1, 8026162 <_reclaim_reent+0x4a>
 802615c:	4620      	mov	r0, r4
 802615e:	f7ff fe21 	bl	8025da4 <_free_r>
 8026162:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026164:	b111      	cbz	r1, 802616c <_reclaim_reent+0x54>
 8026166:	4620      	mov	r0, r4
 8026168:	f7ff fe1c 	bl	8025da4 <_free_r>
 802616c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802616e:	b111      	cbz	r1, 8026176 <_reclaim_reent+0x5e>
 8026170:	4620      	mov	r0, r4
 8026172:	f7ff fe17 	bl	8025da4 <_free_r>
 8026176:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8026178:	b111      	cbz	r1, 8026180 <_reclaim_reent+0x68>
 802617a:	4620      	mov	r0, r4
 802617c:	f7ff fe12 	bl	8025da4 <_free_r>
 8026180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026182:	b111      	cbz	r1, 802618a <_reclaim_reent+0x72>
 8026184:	4620      	mov	r0, r4
 8026186:	f7ff fe0d 	bl	8025da4 <_free_r>
 802618a:	69a3      	ldr	r3, [r4, #24]
 802618c:	b1e3      	cbz	r3, 80261c8 <_reclaim_reent+0xb0>
 802618e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8026190:	4620      	mov	r0, r4
 8026192:	4798      	blx	r3
 8026194:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8026196:	b1b9      	cbz	r1, 80261c8 <_reclaim_reent+0xb0>
 8026198:	4620      	mov	r0, r4
 802619a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802619e:	f7ff bfad 	b.w	80260fc <cleanup_glue>
 80261a2:	5949      	ldr	r1, [r1, r5]
 80261a4:	b941      	cbnz	r1, 80261b8 <_reclaim_reent+0xa0>
 80261a6:	3504      	adds	r5, #4
 80261a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80261aa:	2d80      	cmp	r5, #128	; 0x80
 80261ac:	68d9      	ldr	r1, [r3, #12]
 80261ae:	d1f8      	bne.n	80261a2 <_reclaim_reent+0x8a>
 80261b0:	4620      	mov	r0, r4
 80261b2:	f7ff fdf7 	bl	8025da4 <_free_r>
 80261b6:	e7ba      	b.n	802612e <_reclaim_reent+0x16>
 80261b8:	680e      	ldr	r6, [r1, #0]
 80261ba:	4620      	mov	r0, r4
 80261bc:	f7ff fdf2 	bl	8025da4 <_free_r>
 80261c0:	4631      	mov	r1, r6
 80261c2:	e7ef      	b.n	80261a4 <_reclaim_reent+0x8c>
 80261c4:	2500      	movs	r5, #0
 80261c6:	e7ef      	b.n	80261a8 <_reclaim_reent+0x90>
 80261c8:	bd70      	pop	{r4, r5, r6, pc}
 80261ca:	bf00      	nop
 80261cc:	240004cc 	.word	0x240004cc

080261d0 <_sbrk_r>:
 80261d0:	b538      	push	{r3, r4, r5, lr}
 80261d2:	4d06      	ldr	r5, [pc, #24]	; (80261ec <_sbrk_r+0x1c>)
 80261d4:	2300      	movs	r3, #0
 80261d6:	4604      	mov	r4, r0
 80261d8:	4608      	mov	r0, r1
 80261da:	602b      	str	r3, [r5, #0]
 80261dc:	f7df fd9e 	bl	8005d1c <_sbrk>
 80261e0:	1c43      	adds	r3, r0, #1
 80261e2:	d102      	bne.n	80261ea <_sbrk_r+0x1a>
 80261e4:	682b      	ldr	r3, [r5, #0]
 80261e6:	b103      	cbz	r3, 80261ea <_sbrk_r+0x1a>
 80261e8:	6023      	str	r3, [r4, #0]
 80261ea:	bd38      	pop	{r3, r4, r5, pc}
 80261ec:	2400eda4 	.word	0x2400eda4

080261f0 <__sread>:
 80261f0:	b510      	push	{r4, lr}
 80261f2:	460c      	mov	r4, r1
 80261f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261f8:	f000 fcc2 	bl	8026b80 <_read_r>
 80261fc:	2800      	cmp	r0, #0
 80261fe:	bfab      	itete	ge
 8026200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026202:	89a3      	ldrhlt	r3, [r4, #12]
 8026204:	181b      	addge	r3, r3, r0
 8026206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802620a:	bfac      	ite	ge
 802620c:	6563      	strge	r3, [r4, #84]	; 0x54
 802620e:	81a3      	strhlt	r3, [r4, #12]
 8026210:	bd10      	pop	{r4, pc}

08026212 <__swrite>:
 8026212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026216:	461f      	mov	r7, r3
 8026218:	898b      	ldrh	r3, [r1, #12]
 802621a:	05db      	lsls	r3, r3, #23
 802621c:	4605      	mov	r5, r0
 802621e:	460c      	mov	r4, r1
 8026220:	4616      	mov	r6, r2
 8026222:	d505      	bpl.n	8026230 <__swrite+0x1e>
 8026224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026228:	2302      	movs	r3, #2
 802622a:	2200      	movs	r2, #0
 802622c:	f000 f936 	bl	802649c <_lseek_r>
 8026230:	89a3      	ldrh	r3, [r4, #12]
 8026232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802623a:	81a3      	strh	r3, [r4, #12]
 802623c:	4632      	mov	r2, r6
 802623e:	463b      	mov	r3, r7
 8026240:	4628      	mov	r0, r5
 8026242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026246:	f000 b869 	b.w	802631c <_write_r>

0802624a <__sseek>:
 802624a:	b510      	push	{r4, lr}
 802624c:	460c      	mov	r4, r1
 802624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026252:	f000 f923 	bl	802649c <_lseek_r>
 8026256:	1c43      	adds	r3, r0, #1
 8026258:	89a3      	ldrh	r3, [r4, #12]
 802625a:	bf15      	itete	ne
 802625c:	6560      	strne	r0, [r4, #84]	; 0x54
 802625e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026266:	81a3      	strheq	r3, [r4, #12]
 8026268:	bf18      	it	ne
 802626a:	81a3      	strhne	r3, [r4, #12]
 802626c:	bd10      	pop	{r4, pc}

0802626e <__sclose>:
 802626e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026272:	f000 b8f1 	b.w	8026458 <_close_r>
	...

08026278 <__swbuf_r>:
 8026278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802627a:	460e      	mov	r6, r1
 802627c:	4614      	mov	r4, r2
 802627e:	4605      	mov	r5, r0
 8026280:	b118      	cbz	r0, 802628a <__swbuf_r+0x12>
 8026282:	6983      	ldr	r3, [r0, #24]
 8026284:	b90b      	cbnz	r3, 802628a <__swbuf_r+0x12>
 8026286:	f7ff fc7b 	bl	8025b80 <__sinit>
 802628a:	4b21      	ldr	r3, [pc, #132]	; (8026310 <__swbuf_r+0x98>)
 802628c:	429c      	cmp	r4, r3
 802628e:	d12b      	bne.n	80262e8 <__swbuf_r+0x70>
 8026290:	686c      	ldr	r4, [r5, #4]
 8026292:	69a3      	ldr	r3, [r4, #24]
 8026294:	60a3      	str	r3, [r4, #8]
 8026296:	89a3      	ldrh	r3, [r4, #12]
 8026298:	071a      	lsls	r2, r3, #28
 802629a:	d52f      	bpl.n	80262fc <__swbuf_r+0x84>
 802629c:	6923      	ldr	r3, [r4, #16]
 802629e:	b36b      	cbz	r3, 80262fc <__swbuf_r+0x84>
 80262a0:	6923      	ldr	r3, [r4, #16]
 80262a2:	6820      	ldr	r0, [r4, #0]
 80262a4:	1ac0      	subs	r0, r0, r3
 80262a6:	6963      	ldr	r3, [r4, #20]
 80262a8:	b2f6      	uxtb	r6, r6
 80262aa:	4283      	cmp	r3, r0
 80262ac:	4637      	mov	r7, r6
 80262ae:	dc04      	bgt.n	80262ba <__swbuf_r+0x42>
 80262b0:	4621      	mov	r1, r4
 80262b2:	4628      	mov	r0, r5
 80262b4:	f7ff fbbe 	bl	8025a34 <_fflush_r>
 80262b8:	bb30      	cbnz	r0, 8026308 <__swbuf_r+0x90>
 80262ba:	68a3      	ldr	r3, [r4, #8]
 80262bc:	3b01      	subs	r3, #1
 80262be:	60a3      	str	r3, [r4, #8]
 80262c0:	6823      	ldr	r3, [r4, #0]
 80262c2:	1c5a      	adds	r2, r3, #1
 80262c4:	6022      	str	r2, [r4, #0]
 80262c6:	701e      	strb	r6, [r3, #0]
 80262c8:	6963      	ldr	r3, [r4, #20]
 80262ca:	3001      	adds	r0, #1
 80262cc:	4283      	cmp	r3, r0
 80262ce:	d004      	beq.n	80262da <__swbuf_r+0x62>
 80262d0:	89a3      	ldrh	r3, [r4, #12]
 80262d2:	07db      	lsls	r3, r3, #31
 80262d4:	d506      	bpl.n	80262e4 <__swbuf_r+0x6c>
 80262d6:	2e0a      	cmp	r6, #10
 80262d8:	d104      	bne.n	80262e4 <__swbuf_r+0x6c>
 80262da:	4621      	mov	r1, r4
 80262dc:	4628      	mov	r0, r5
 80262de:	f7ff fba9 	bl	8025a34 <_fflush_r>
 80262e2:	b988      	cbnz	r0, 8026308 <__swbuf_r+0x90>
 80262e4:	4638      	mov	r0, r7
 80262e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262e8:	4b0a      	ldr	r3, [pc, #40]	; (8026314 <__swbuf_r+0x9c>)
 80262ea:	429c      	cmp	r4, r3
 80262ec:	d101      	bne.n	80262f2 <__swbuf_r+0x7a>
 80262ee:	68ac      	ldr	r4, [r5, #8]
 80262f0:	e7cf      	b.n	8026292 <__swbuf_r+0x1a>
 80262f2:	4b09      	ldr	r3, [pc, #36]	; (8026318 <__swbuf_r+0xa0>)
 80262f4:	429c      	cmp	r4, r3
 80262f6:	bf08      	it	eq
 80262f8:	68ec      	ldreq	r4, [r5, #12]
 80262fa:	e7ca      	b.n	8026292 <__swbuf_r+0x1a>
 80262fc:	4621      	mov	r1, r4
 80262fe:	4628      	mov	r0, r5
 8026300:	f000 f81e 	bl	8026340 <__swsetup_r>
 8026304:	2800      	cmp	r0, #0
 8026306:	d0cb      	beq.n	80262a0 <__swbuf_r+0x28>
 8026308:	f04f 37ff 	mov.w	r7, #4294967295
 802630c:	e7ea      	b.n	80262e4 <__swbuf_r+0x6c>
 802630e:	bf00      	nop
 8026310:	0802a5e4 	.word	0x0802a5e4
 8026314:	0802a604 	.word	0x0802a604
 8026318:	0802a5c4 	.word	0x0802a5c4

0802631c <_write_r>:
 802631c:	b538      	push	{r3, r4, r5, lr}
 802631e:	4d07      	ldr	r5, [pc, #28]	; (802633c <_write_r+0x20>)
 8026320:	4604      	mov	r4, r0
 8026322:	4608      	mov	r0, r1
 8026324:	4611      	mov	r1, r2
 8026326:	2200      	movs	r2, #0
 8026328:	602a      	str	r2, [r5, #0]
 802632a:	461a      	mov	r2, r3
 802632c:	f7df fca5 	bl	8005c7a <_write>
 8026330:	1c43      	adds	r3, r0, #1
 8026332:	d102      	bne.n	802633a <_write_r+0x1e>
 8026334:	682b      	ldr	r3, [r5, #0]
 8026336:	b103      	cbz	r3, 802633a <_write_r+0x1e>
 8026338:	6023      	str	r3, [r4, #0]
 802633a:	bd38      	pop	{r3, r4, r5, pc}
 802633c:	2400eda4 	.word	0x2400eda4

08026340 <__swsetup_r>:
 8026340:	4b32      	ldr	r3, [pc, #200]	; (802640c <__swsetup_r+0xcc>)
 8026342:	b570      	push	{r4, r5, r6, lr}
 8026344:	681d      	ldr	r5, [r3, #0]
 8026346:	4606      	mov	r6, r0
 8026348:	460c      	mov	r4, r1
 802634a:	b125      	cbz	r5, 8026356 <__swsetup_r+0x16>
 802634c:	69ab      	ldr	r3, [r5, #24]
 802634e:	b913      	cbnz	r3, 8026356 <__swsetup_r+0x16>
 8026350:	4628      	mov	r0, r5
 8026352:	f7ff fc15 	bl	8025b80 <__sinit>
 8026356:	4b2e      	ldr	r3, [pc, #184]	; (8026410 <__swsetup_r+0xd0>)
 8026358:	429c      	cmp	r4, r3
 802635a:	d10f      	bne.n	802637c <__swsetup_r+0x3c>
 802635c:	686c      	ldr	r4, [r5, #4]
 802635e:	89a3      	ldrh	r3, [r4, #12]
 8026360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026364:	0719      	lsls	r1, r3, #28
 8026366:	d42c      	bmi.n	80263c2 <__swsetup_r+0x82>
 8026368:	06dd      	lsls	r5, r3, #27
 802636a:	d411      	bmi.n	8026390 <__swsetup_r+0x50>
 802636c:	2309      	movs	r3, #9
 802636e:	6033      	str	r3, [r6, #0]
 8026370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026374:	81a3      	strh	r3, [r4, #12]
 8026376:	f04f 30ff 	mov.w	r0, #4294967295
 802637a:	e03e      	b.n	80263fa <__swsetup_r+0xba>
 802637c:	4b25      	ldr	r3, [pc, #148]	; (8026414 <__swsetup_r+0xd4>)
 802637e:	429c      	cmp	r4, r3
 8026380:	d101      	bne.n	8026386 <__swsetup_r+0x46>
 8026382:	68ac      	ldr	r4, [r5, #8]
 8026384:	e7eb      	b.n	802635e <__swsetup_r+0x1e>
 8026386:	4b24      	ldr	r3, [pc, #144]	; (8026418 <__swsetup_r+0xd8>)
 8026388:	429c      	cmp	r4, r3
 802638a:	bf08      	it	eq
 802638c:	68ec      	ldreq	r4, [r5, #12]
 802638e:	e7e6      	b.n	802635e <__swsetup_r+0x1e>
 8026390:	0758      	lsls	r0, r3, #29
 8026392:	d512      	bpl.n	80263ba <__swsetup_r+0x7a>
 8026394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026396:	b141      	cbz	r1, 80263aa <__swsetup_r+0x6a>
 8026398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802639c:	4299      	cmp	r1, r3
 802639e:	d002      	beq.n	80263a6 <__swsetup_r+0x66>
 80263a0:	4630      	mov	r0, r6
 80263a2:	f7ff fcff 	bl	8025da4 <_free_r>
 80263a6:	2300      	movs	r3, #0
 80263a8:	6363      	str	r3, [r4, #52]	; 0x34
 80263aa:	89a3      	ldrh	r3, [r4, #12]
 80263ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80263b0:	81a3      	strh	r3, [r4, #12]
 80263b2:	2300      	movs	r3, #0
 80263b4:	6063      	str	r3, [r4, #4]
 80263b6:	6923      	ldr	r3, [r4, #16]
 80263b8:	6023      	str	r3, [r4, #0]
 80263ba:	89a3      	ldrh	r3, [r4, #12]
 80263bc:	f043 0308 	orr.w	r3, r3, #8
 80263c0:	81a3      	strh	r3, [r4, #12]
 80263c2:	6923      	ldr	r3, [r4, #16]
 80263c4:	b94b      	cbnz	r3, 80263da <__swsetup_r+0x9a>
 80263c6:	89a3      	ldrh	r3, [r4, #12]
 80263c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80263cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80263d0:	d003      	beq.n	80263da <__swsetup_r+0x9a>
 80263d2:	4621      	mov	r1, r4
 80263d4:	4630      	mov	r0, r6
 80263d6:	f000 f899 	bl	802650c <__smakebuf_r>
 80263da:	89a0      	ldrh	r0, [r4, #12]
 80263dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80263e0:	f010 0301 	ands.w	r3, r0, #1
 80263e4:	d00a      	beq.n	80263fc <__swsetup_r+0xbc>
 80263e6:	2300      	movs	r3, #0
 80263e8:	60a3      	str	r3, [r4, #8]
 80263ea:	6963      	ldr	r3, [r4, #20]
 80263ec:	425b      	negs	r3, r3
 80263ee:	61a3      	str	r3, [r4, #24]
 80263f0:	6923      	ldr	r3, [r4, #16]
 80263f2:	b943      	cbnz	r3, 8026406 <__swsetup_r+0xc6>
 80263f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80263f8:	d1ba      	bne.n	8026370 <__swsetup_r+0x30>
 80263fa:	bd70      	pop	{r4, r5, r6, pc}
 80263fc:	0781      	lsls	r1, r0, #30
 80263fe:	bf58      	it	pl
 8026400:	6963      	ldrpl	r3, [r4, #20]
 8026402:	60a3      	str	r3, [r4, #8]
 8026404:	e7f4      	b.n	80263f0 <__swsetup_r+0xb0>
 8026406:	2000      	movs	r0, #0
 8026408:	e7f7      	b.n	80263fa <__swsetup_r+0xba>
 802640a:	bf00      	nop
 802640c:	240004cc 	.word	0x240004cc
 8026410:	0802a5e4 	.word	0x0802a5e4
 8026414:	0802a604 	.word	0x0802a604
 8026418:	0802a5c4 	.word	0x0802a5c4

0802641c <__assert_func>:
 802641c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802641e:	4614      	mov	r4, r2
 8026420:	461a      	mov	r2, r3
 8026422:	4b09      	ldr	r3, [pc, #36]	; (8026448 <__assert_func+0x2c>)
 8026424:	681b      	ldr	r3, [r3, #0]
 8026426:	4605      	mov	r5, r0
 8026428:	68d8      	ldr	r0, [r3, #12]
 802642a:	b14c      	cbz	r4, 8026440 <__assert_func+0x24>
 802642c:	4b07      	ldr	r3, [pc, #28]	; (802644c <__assert_func+0x30>)
 802642e:	9100      	str	r1, [sp, #0]
 8026430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026434:	4906      	ldr	r1, [pc, #24]	; (8026450 <__assert_func+0x34>)
 8026436:	462b      	mov	r3, r5
 8026438:	f000 f81e 	bl	8026478 <fiprintf>
 802643c:	f000 fbb2 	bl	8026ba4 <abort>
 8026440:	4b04      	ldr	r3, [pc, #16]	; (8026454 <__assert_func+0x38>)
 8026442:	461c      	mov	r4, r3
 8026444:	e7f3      	b.n	802642e <__assert_func+0x12>
 8026446:	bf00      	nop
 8026448:	240004cc 	.word	0x240004cc
 802644c:	0802a69a 	.word	0x0802a69a
 8026450:	0802a6a7 	.word	0x0802a6a7
 8026454:	0802a6d5 	.word	0x0802a6d5

08026458 <_close_r>:
 8026458:	b538      	push	{r3, r4, r5, lr}
 802645a:	4d06      	ldr	r5, [pc, #24]	; (8026474 <_close_r+0x1c>)
 802645c:	2300      	movs	r3, #0
 802645e:	4604      	mov	r4, r0
 8026460:	4608      	mov	r0, r1
 8026462:	602b      	str	r3, [r5, #0]
 8026464:	f7df fc25 	bl	8005cb2 <_close>
 8026468:	1c43      	adds	r3, r0, #1
 802646a:	d102      	bne.n	8026472 <_close_r+0x1a>
 802646c:	682b      	ldr	r3, [r5, #0]
 802646e:	b103      	cbz	r3, 8026472 <_close_r+0x1a>
 8026470:	6023      	str	r3, [r4, #0]
 8026472:	bd38      	pop	{r3, r4, r5, pc}
 8026474:	2400eda4 	.word	0x2400eda4

08026478 <fiprintf>:
 8026478:	b40e      	push	{r1, r2, r3}
 802647a:	b503      	push	{r0, r1, lr}
 802647c:	4601      	mov	r1, r0
 802647e:	ab03      	add	r3, sp, #12
 8026480:	4805      	ldr	r0, [pc, #20]	; (8026498 <fiprintf+0x20>)
 8026482:	f853 2b04 	ldr.w	r2, [r3], #4
 8026486:	6800      	ldr	r0, [r0, #0]
 8026488:	9301      	str	r3, [sp, #4]
 802648a:	f000 f8b5 	bl	80265f8 <_vfiprintf_r>
 802648e:	b002      	add	sp, #8
 8026490:	f85d eb04 	ldr.w	lr, [sp], #4
 8026494:	b003      	add	sp, #12
 8026496:	4770      	bx	lr
 8026498:	240004cc 	.word	0x240004cc

0802649c <_lseek_r>:
 802649c:	b538      	push	{r3, r4, r5, lr}
 802649e:	4d07      	ldr	r5, [pc, #28]	; (80264bc <_lseek_r+0x20>)
 80264a0:	4604      	mov	r4, r0
 80264a2:	4608      	mov	r0, r1
 80264a4:	4611      	mov	r1, r2
 80264a6:	2200      	movs	r2, #0
 80264a8:	602a      	str	r2, [r5, #0]
 80264aa:	461a      	mov	r2, r3
 80264ac:	f7df fc28 	bl	8005d00 <_lseek>
 80264b0:	1c43      	adds	r3, r0, #1
 80264b2:	d102      	bne.n	80264ba <_lseek_r+0x1e>
 80264b4:	682b      	ldr	r3, [r5, #0]
 80264b6:	b103      	cbz	r3, 80264ba <_lseek_r+0x1e>
 80264b8:	6023      	str	r3, [r4, #0]
 80264ba:	bd38      	pop	{r3, r4, r5, pc}
 80264bc:	2400eda4 	.word	0x2400eda4

080264c0 <__swhatbuf_r>:
 80264c0:	b570      	push	{r4, r5, r6, lr}
 80264c2:	460e      	mov	r6, r1
 80264c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80264c8:	2900      	cmp	r1, #0
 80264ca:	b096      	sub	sp, #88	; 0x58
 80264cc:	4614      	mov	r4, r2
 80264ce:	461d      	mov	r5, r3
 80264d0:	da08      	bge.n	80264e4 <__swhatbuf_r+0x24>
 80264d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80264d6:	2200      	movs	r2, #0
 80264d8:	602a      	str	r2, [r5, #0]
 80264da:	061a      	lsls	r2, r3, #24
 80264dc:	d410      	bmi.n	8026500 <__swhatbuf_r+0x40>
 80264de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80264e2:	e00e      	b.n	8026502 <__swhatbuf_r+0x42>
 80264e4:	466a      	mov	r2, sp
 80264e6:	f000 fb65 	bl	8026bb4 <_fstat_r>
 80264ea:	2800      	cmp	r0, #0
 80264ec:	dbf1      	blt.n	80264d2 <__swhatbuf_r+0x12>
 80264ee:	9a01      	ldr	r2, [sp, #4]
 80264f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80264f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80264f8:	425a      	negs	r2, r3
 80264fa:	415a      	adcs	r2, r3
 80264fc:	602a      	str	r2, [r5, #0]
 80264fe:	e7ee      	b.n	80264de <__swhatbuf_r+0x1e>
 8026500:	2340      	movs	r3, #64	; 0x40
 8026502:	2000      	movs	r0, #0
 8026504:	6023      	str	r3, [r4, #0]
 8026506:	b016      	add	sp, #88	; 0x58
 8026508:	bd70      	pop	{r4, r5, r6, pc}
	...

0802650c <__smakebuf_r>:
 802650c:	898b      	ldrh	r3, [r1, #12]
 802650e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026510:	079d      	lsls	r5, r3, #30
 8026512:	4606      	mov	r6, r0
 8026514:	460c      	mov	r4, r1
 8026516:	d507      	bpl.n	8026528 <__smakebuf_r+0x1c>
 8026518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802651c:	6023      	str	r3, [r4, #0]
 802651e:	6123      	str	r3, [r4, #16]
 8026520:	2301      	movs	r3, #1
 8026522:	6163      	str	r3, [r4, #20]
 8026524:	b002      	add	sp, #8
 8026526:	bd70      	pop	{r4, r5, r6, pc}
 8026528:	ab01      	add	r3, sp, #4
 802652a:	466a      	mov	r2, sp
 802652c:	f7ff ffc8 	bl	80264c0 <__swhatbuf_r>
 8026530:	9900      	ldr	r1, [sp, #0]
 8026532:	4605      	mov	r5, r0
 8026534:	4630      	mov	r0, r6
 8026536:	f7ff fca1 	bl	8025e7c <_malloc_r>
 802653a:	b948      	cbnz	r0, 8026550 <__smakebuf_r+0x44>
 802653c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026540:	059a      	lsls	r2, r3, #22
 8026542:	d4ef      	bmi.n	8026524 <__smakebuf_r+0x18>
 8026544:	f023 0303 	bic.w	r3, r3, #3
 8026548:	f043 0302 	orr.w	r3, r3, #2
 802654c:	81a3      	strh	r3, [r4, #12]
 802654e:	e7e3      	b.n	8026518 <__smakebuf_r+0xc>
 8026550:	4b0d      	ldr	r3, [pc, #52]	; (8026588 <__smakebuf_r+0x7c>)
 8026552:	62b3      	str	r3, [r6, #40]	; 0x28
 8026554:	89a3      	ldrh	r3, [r4, #12]
 8026556:	6020      	str	r0, [r4, #0]
 8026558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802655c:	81a3      	strh	r3, [r4, #12]
 802655e:	9b00      	ldr	r3, [sp, #0]
 8026560:	6163      	str	r3, [r4, #20]
 8026562:	9b01      	ldr	r3, [sp, #4]
 8026564:	6120      	str	r0, [r4, #16]
 8026566:	b15b      	cbz	r3, 8026580 <__smakebuf_r+0x74>
 8026568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802656c:	4630      	mov	r0, r6
 802656e:	f000 fb33 	bl	8026bd8 <_isatty_r>
 8026572:	b128      	cbz	r0, 8026580 <__smakebuf_r+0x74>
 8026574:	89a3      	ldrh	r3, [r4, #12]
 8026576:	f023 0303 	bic.w	r3, r3, #3
 802657a:	f043 0301 	orr.w	r3, r3, #1
 802657e:	81a3      	strh	r3, [r4, #12]
 8026580:	89a0      	ldrh	r0, [r4, #12]
 8026582:	4305      	orrs	r5, r0
 8026584:	81a5      	strh	r5, [r4, #12]
 8026586:	e7cd      	b.n	8026524 <__smakebuf_r+0x18>
 8026588:	08025b19 	.word	0x08025b19

0802658c <__malloc_lock>:
 802658c:	4801      	ldr	r0, [pc, #4]	; (8026594 <__malloc_lock+0x8>)
 802658e:	f7ff bbba 	b.w	8025d06 <__retarget_lock_acquire_recursive>
 8026592:	bf00      	nop
 8026594:	2400ed98 	.word	0x2400ed98

08026598 <__malloc_unlock>:
 8026598:	4801      	ldr	r0, [pc, #4]	; (80265a0 <__malloc_unlock+0x8>)
 802659a:	f7ff bbb5 	b.w	8025d08 <__retarget_lock_release_recursive>
 802659e:	bf00      	nop
 80265a0:	2400ed98 	.word	0x2400ed98

080265a4 <__sfputc_r>:
 80265a4:	6893      	ldr	r3, [r2, #8]
 80265a6:	3b01      	subs	r3, #1
 80265a8:	2b00      	cmp	r3, #0
 80265aa:	b410      	push	{r4}
 80265ac:	6093      	str	r3, [r2, #8]
 80265ae:	da08      	bge.n	80265c2 <__sfputc_r+0x1e>
 80265b0:	6994      	ldr	r4, [r2, #24]
 80265b2:	42a3      	cmp	r3, r4
 80265b4:	db01      	blt.n	80265ba <__sfputc_r+0x16>
 80265b6:	290a      	cmp	r1, #10
 80265b8:	d103      	bne.n	80265c2 <__sfputc_r+0x1e>
 80265ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80265be:	f7ff be5b 	b.w	8026278 <__swbuf_r>
 80265c2:	6813      	ldr	r3, [r2, #0]
 80265c4:	1c58      	adds	r0, r3, #1
 80265c6:	6010      	str	r0, [r2, #0]
 80265c8:	7019      	strb	r1, [r3, #0]
 80265ca:	4608      	mov	r0, r1
 80265cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80265d0:	4770      	bx	lr

080265d2 <__sfputs_r>:
 80265d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265d4:	4606      	mov	r6, r0
 80265d6:	460f      	mov	r7, r1
 80265d8:	4614      	mov	r4, r2
 80265da:	18d5      	adds	r5, r2, r3
 80265dc:	42ac      	cmp	r4, r5
 80265de:	d101      	bne.n	80265e4 <__sfputs_r+0x12>
 80265e0:	2000      	movs	r0, #0
 80265e2:	e007      	b.n	80265f4 <__sfputs_r+0x22>
 80265e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265e8:	463a      	mov	r2, r7
 80265ea:	4630      	mov	r0, r6
 80265ec:	f7ff ffda 	bl	80265a4 <__sfputc_r>
 80265f0:	1c43      	adds	r3, r0, #1
 80265f2:	d1f3      	bne.n	80265dc <__sfputs_r+0xa>
 80265f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080265f8 <_vfiprintf_r>:
 80265f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265fc:	460d      	mov	r5, r1
 80265fe:	b09d      	sub	sp, #116	; 0x74
 8026600:	4614      	mov	r4, r2
 8026602:	4698      	mov	r8, r3
 8026604:	4606      	mov	r6, r0
 8026606:	b118      	cbz	r0, 8026610 <_vfiprintf_r+0x18>
 8026608:	6983      	ldr	r3, [r0, #24]
 802660a:	b90b      	cbnz	r3, 8026610 <_vfiprintf_r+0x18>
 802660c:	f7ff fab8 	bl	8025b80 <__sinit>
 8026610:	4b89      	ldr	r3, [pc, #548]	; (8026838 <_vfiprintf_r+0x240>)
 8026612:	429d      	cmp	r5, r3
 8026614:	d11b      	bne.n	802664e <_vfiprintf_r+0x56>
 8026616:	6875      	ldr	r5, [r6, #4]
 8026618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802661a:	07d9      	lsls	r1, r3, #31
 802661c:	d405      	bmi.n	802662a <_vfiprintf_r+0x32>
 802661e:	89ab      	ldrh	r3, [r5, #12]
 8026620:	059a      	lsls	r2, r3, #22
 8026622:	d402      	bmi.n	802662a <_vfiprintf_r+0x32>
 8026624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026626:	f7ff fb6e 	bl	8025d06 <__retarget_lock_acquire_recursive>
 802662a:	89ab      	ldrh	r3, [r5, #12]
 802662c:	071b      	lsls	r3, r3, #28
 802662e:	d501      	bpl.n	8026634 <_vfiprintf_r+0x3c>
 8026630:	692b      	ldr	r3, [r5, #16]
 8026632:	b9eb      	cbnz	r3, 8026670 <_vfiprintf_r+0x78>
 8026634:	4629      	mov	r1, r5
 8026636:	4630      	mov	r0, r6
 8026638:	f7ff fe82 	bl	8026340 <__swsetup_r>
 802663c:	b1c0      	cbz	r0, 8026670 <_vfiprintf_r+0x78>
 802663e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026640:	07dc      	lsls	r4, r3, #31
 8026642:	d50e      	bpl.n	8026662 <_vfiprintf_r+0x6a>
 8026644:	f04f 30ff 	mov.w	r0, #4294967295
 8026648:	b01d      	add	sp, #116	; 0x74
 802664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802664e:	4b7b      	ldr	r3, [pc, #492]	; (802683c <_vfiprintf_r+0x244>)
 8026650:	429d      	cmp	r5, r3
 8026652:	d101      	bne.n	8026658 <_vfiprintf_r+0x60>
 8026654:	68b5      	ldr	r5, [r6, #8]
 8026656:	e7df      	b.n	8026618 <_vfiprintf_r+0x20>
 8026658:	4b79      	ldr	r3, [pc, #484]	; (8026840 <_vfiprintf_r+0x248>)
 802665a:	429d      	cmp	r5, r3
 802665c:	bf08      	it	eq
 802665e:	68f5      	ldreq	r5, [r6, #12]
 8026660:	e7da      	b.n	8026618 <_vfiprintf_r+0x20>
 8026662:	89ab      	ldrh	r3, [r5, #12]
 8026664:	0598      	lsls	r0, r3, #22
 8026666:	d4ed      	bmi.n	8026644 <_vfiprintf_r+0x4c>
 8026668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802666a:	f7ff fb4d 	bl	8025d08 <__retarget_lock_release_recursive>
 802666e:	e7e9      	b.n	8026644 <_vfiprintf_r+0x4c>
 8026670:	2300      	movs	r3, #0
 8026672:	9309      	str	r3, [sp, #36]	; 0x24
 8026674:	2320      	movs	r3, #32
 8026676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802667a:	f8cd 800c 	str.w	r8, [sp, #12]
 802667e:	2330      	movs	r3, #48	; 0x30
 8026680:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026844 <_vfiprintf_r+0x24c>
 8026684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026688:	f04f 0901 	mov.w	r9, #1
 802668c:	4623      	mov	r3, r4
 802668e:	469a      	mov	sl, r3
 8026690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026694:	b10a      	cbz	r2, 802669a <_vfiprintf_r+0xa2>
 8026696:	2a25      	cmp	r2, #37	; 0x25
 8026698:	d1f9      	bne.n	802668e <_vfiprintf_r+0x96>
 802669a:	ebba 0b04 	subs.w	fp, sl, r4
 802669e:	d00b      	beq.n	80266b8 <_vfiprintf_r+0xc0>
 80266a0:	465b      	mov	r3, fp
 80266a2:	4622      	mov	r2, r4
 80266a4:	4629      	mov	r1, r5
 80266a6:	4630      	mov	r0, r6
 80266a8:	f7ff ff93 	bl	80265d2 <__sfputs_r>
 80266ac:	3001      	adds	r0, #1
 80266ae:	f000 80aa 	beq.w	8026806 <_vfiprintf_r+0x20e>
 80266b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80266b4:	445a      	add	r2, fp
 80266b6:	9209      	str	r2, [sp, #36]	; 0x24
 80266b8:	f89a 3000 	ldrb.w	r3, [sl]
 80266bc:	2b00      	cmp	r3, #0
 80266be:	f000 80a2 	beq.w	8026806 <_vfiprintf_r+0x20e>
 80266c2:	2300      	movs	r3, #0
 80266c4:	f04f 32ff 	mov.w	r2, #4294967295
 80266c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80266cc:	f10a 0a01 	add.w	sl, sl, #1
 80266d0:	9304      	str	r3, [sp, #16]
 80266d2:	9307      	str	r3, [sp, #28]
 80266d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80266d8:	931a      	str	r3, [sp, #104]	; 0x68
 80266da:	4654      	mov	r4, sl
 80266dc:	2205      	movs	r2, #5
 80266de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80266e2:	4858      	ldr	r0, [pc, #352]	; (8026844 <_vfiprintf_r+0x24c>)
 80266e4:	f7d9 fe14 	bl	8000310 <memchr>
 80266e8:	9a04      	ldr	r2, [sp, #16]
 80266ea:	b9d8      	cbnz	r0, 8026724 <_vfiprintf_r+0x12c>
 80266ec:	06d1      	lsls	r1, r2, #27
 80266ee:	bf44      	itt	mi
 80266f0:	2320      	movmi	r3, #32
 80266f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80266f6:	0713      	lsls	r3, r2, #28
 80266f8:	bf44      	itt	mi
 80266fa:	232b      	movmi	r3, #43	; 0x2b
 80266fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026700:	f89a 3000 	ldrb.w	r3, [sl]
 8026704:	2b2a      	cmp	r3, #42	; 0x2a
 8026706:	d015      	beq.n	8026734 <_vfiprintf_r+0x13c>
 8026708:	9a07      	ldr	r2, [sp, #28]
 802670a:	4654      	mov	r4, sl
 802670c:	2000      	movs	r0, #0
 802670e:	f04f 0c0a 	mov.w	ip, #10
 8026712:	4621      	mov	r1, r4
 8026714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026718:	3b30      	subs	r3, #48	; 0x30
 802671a:	2b09      	cmp	r3, #9
 802671c:	d94e      	bls.n	80267bc <_vfiprintf_r+0x1c4>
 802671e:	b1b0      	cbz	r0, 802674e <_vfiprintf_r+0x156>
 8026720:	9207      	str	r2, [sp, #28]
 8026722:	e014      	b.n	802674e <_vfiprintf_r+0x156>
 8026724:	eba0 0308 	sub.w	r3, r0, r8
 8026728:	fa09 f303 	lsl.w	r3, r9, r3
 802672c:	4313      	orrs	r3, r2
 802672e:	9304      	str	r3, [sp, #16]
 8026730:	46a2      	mov	sl, r4
 8026732:	e7d2      	b.n	80266da <_vfiprintf_r+0xe2>
 8026734:	9b03      	ldr	r3, [sp, #12]
 8026736:	1d19      	adds	r1, r3, #4
 8026738:	681b      	ldr	r3, [r3, #0]
 802673a:	9103      	str	r1, [sp, #12]
 802673c:	2b00      	cmp	r3, #0
 802673e:	bfbb      	ittet	lt
 8026740:	425b      	neglt	r3, r3
 8026742:	f042 0202 	orrlt.w	r2, r2, #2
 8026746:	9307      	strge	r3, [sp, #28]
 8026748:	9307      	strlt	r3, [sp, #28]
 802674a:	bfb8      	it	lt
 802674c:	9204      	strlt	r2, [sp, #16]
 802674e:	7823      	ldrb	r3, [r4, #0]
 8026750:	2b2e      	cmp	r3, #46	; 0x2e
 8026752:	d10c      	bne.n	802676e <_vfiprintf_r+0x176>
 8026754:	7863      	ldrb	r3, [r4, #1]
 8026756:	2b2a      	cmp	r3, #42	; 0x2a
 8026758:	d135      	bne.n	80267c6 <_vfiprintf_r+0x1ce>
 802675a:	9b03      	ldr	r3, [sp, #12]
 802675c:	1d1a      	adds	r2, r3, #4
 802675e:	681b      	ldr	r3, [r3, #0]
 8026760:	9203      	str	r2, [sp, #12]
 8026762:	2b00      	cmp	r3, #0
 8026764:	bfb8      	it	lt
 8026766:	f04f 33ff 	movlt.w	r3, #4294967295
 802676a:	3402      	adds	r4, #2
 802676c:	9305      	str	r3, [sp, #20]
 802676e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026854 <_vfiprintf_r+0x25c>
 8026772:	7821      	ldrb	r1, [r4, #0]
 8026774:	2203      	movs	r2, #3
 8026776:	4650      	mov	r0, sl
 8026778:	f7d9 fdca 	bl	8000310 <memchr>
 802677c:	b140      	cbz	r0, 8026790 <_vfiprintf_r+0x198>
 802677e:	2340      	movs	r3, #64	; 0x40
 8026780:	eba0 000a 	sub.w	r0, r0, sl
 8026784:	fa03 f000 	lsl.w	r0, r3, r0
 8026788:	9b04      	ldr	r3, [sp, #16]
 802678a:	4303      	orrs	r3, r0
 802678c:	3401      	adds	r4, #1
 802678e:	9304      	str	r3, [sp, #16]
 8026790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026794:	482c      	ldr	r0, [pc, #176]	; (8026848 <_vfiprintf_r+0x250>)
 8026796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802679a:	2206      	movs	r2, #6
 802679c:	f7d9 fdb8 	bl	8000310 <memchr>
 80267a0:	2800      	cmp	r0, #0
 80267a2:	d03f      	beq.n	8026824 <_vfiprintf_r+0x22c>
 80267a4:	4b29      	ldr	r3, [pc, #164]	; (802684c <_vfiprintf_r+0x254>)
 80267a6:	bb1b      	cbnz	r3, 80267f0 <_vfiprintf_r+0x1f8>
 80267a8:	9b03      	ldr	r3, [sp, #12]
 80267aa:	3307      	adds	r3, #7
 80267ac:	f023 0307 	bic.w	r3, r3, #7
 80267b0:	3308      	adds	r3, #8
 80267b2:	9303      	str	r3, [sp, #12]
 80267b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267b6:	443b      	add	r3, r7
 80267b8:	9309      	str	r3, [sp, #36]	; 0x24
 80267ba:	e767      	b.n	802668c <_vfiprintf_r+0x94>
 80267bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80267c0:	460c      	mov	r4, r1
 80267c2:	2001      	movs	r0, #1
 80267c4:	e7a5      	b.n	8026712 <_vfiprintf_r+0x11a>
 80267c6:	2300      	movs	r3, #0
 80267c8:	3401      	adds	r4, #1
 80267ca:	9305      	str	r3, [sp, #20]
 80267cc:	4619      	mov	r1, r3
 80267ce:	f04f 0c0a 	mov.w	ip, #10
 80267d2:	4620      	mov	r0, r4
 80267d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80267d8:	3a30      	subs	r2, #48	; 0x30
 80267da:	2a09      	cmp	r2, #9
 80267dc:	d903      	bls.n	80267e6 <_vfiprintf_r+0x1ee>
 80267de:	2b00      	cmp	r3, #0
 80267e0:	d0c5      	beq.n	802676e <_vfiprintf_r+0x176>
 80267e2:	9105      	str	r1, [sp, #20]
 80267e4:	e7c3      	b.n	802676e <_vfiprintf_r+0x176>
 80267e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80267ea:	4604      	mov	r4, r0
 80267ec:	2301      	movs	r3, #1
 80267ee:	e7f0      	b.n	80267d2 <_vfiprintf_r+0x1da>
 80267f0:	ab03      	add	r3, sp, #12
 80267f2:	9300      	str	r3, [sp, #0]
 80267f4:	462a      	mov	r2, r5
 80267f6:	4b16      	ldr	r3, [pc, #88]	; (8026850 <_vfiprintf_r+0x258>)
 80267f8:	a904      	add	r1, sp, #16
 80267fa:	4630      	mov	r0, r6
 80267fc:	f3af 8000 	nop.w
 8026800:	4607      	mov	r7, r0
 8026802:	1c78      	adds	r0, r7, #1
 8026804:	d1d6      	bne.n	80267b4 <_vfiprintf_r+0x1bc>
 8026806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026808:	07d9      	lsls	r1, r3, #31
 802680a:	d405      	bmi.n	8026818 <_vfiprintf_r+0x220>
 802680c:	89ab      	ldrh	r3, [r5, #12]
 802680e:	059a      	lsls	r2, r3, #22
 8026810:	d402      	bmi.n	8026818 <_vfiprintf_r+0x220>
 8026812:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026814:	f7ff fa78 	bl	8025d08 <__retarget_lock_release_recursive>
 8026818:	89ab      	ldrh	r3, [r5, #12]
 802681a:	065b      	lsls	r3, r3, #25
 802681c:	f53f af12 	bmi.w	8026644 <_vfiprintf_r+0x4c>
 8026820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026822:	e711      	b.n	8026648 <_vfiprintf_r+0x50>
 8026824:	ab03      	add	r3, sp, #12
 8026826:	9300      	str	r3, [sp, #0]
 8026828:	462a      	mov	r2, r5
 802682a:	4b09      	ldr	r3, [pc, #36]	; (8026850 <_vfiprintf_r+0x258>)
 802682c:	a904      	add	r1, sp, #16
 802682e:	4630      	mov	r0, r6
 8026830:	f000 f880 	bl	8026934 <_printf_i>
 8026834:	e7e4      	b.n	8026800 <_vfiprintf_r+0x208>
 8026836:	bf00      	nop
 8026838:	0802a5e4 	.word	0x0802a5e4
 802683c:	0802a604 	.word	0x0802a604
 8026840:	0802a5c4 	.word	0x0802a5c4
 8026844:	0802a6d6 	.word	0x0802a6d6
 8026848:	0802a6e0 	.word	0x0802a6e0
 802684c:	00000000 	.word	0x00000000
 8026850:	080265d3 	.word	0x080265d3
 8026854:	0802a6dc 	.word	0x0802a6dc

08026858 <_printf_common>:
 8026858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802685c:	4616      	mov	r6, r2
 802685e:	4699      	mov	r9, r3
 8026860:	688a      	ldr	r2, [r1, #8]
 8026862:	690b      	ldr	r3, [r1, #16]
 8026864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026868:	4293      	cmp	r3, r2
 802686a:	bfb8      	it	lt
 802686c:	4613      	movlt	r3, r2
 802686e:	6033      	str	r3, [r6, #0]
 8026870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026874:	4607      	mov	r7, r0
 8026876:	460c      	mov	r4, r1
 8026878:	b10a      	cbz	r2, 802687e <_printf_common+0x26>
 802687a:	3301      	adds	r3, #1
 802687c:	6033      	str	r3, [r6, #0]
 802687e:	6823      	ldr	r3, [r4, #0]
 8026880:	0699      	lsls	r1, r3, #26
 8026882:	bf42      	ittt	mi
 8026884:	6833      	ldrmi	r3, [r6, #0]
 8026886:	3302      	addmi	r3, #2
 8026888:	6033      	strmi	r3, [r6, #0]
 802688a:	6825      	ldr	r5, [r4, #0]
 802688c:	f015 0506 	ands.w	r5, r5, #6
 8026890:	d106      	bne.n	80268a0 <_printf_common+0x48>
 8026892:	f104 0a19 	add.w	sl, r4, #25
 8026896:	68e3      	ldr	r3, [r4, #12]
 8026898:	6832      	ldr	r2, [r6, #0]
 802689a:	1a9b      	subs	r3, r3, r2
 802689c:	42ab      	cmp	r3, r5
 802689e:	dc26      	bgt.n	80268ee <_printf_common+0x96>
 80268a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80268a4:	1e13      	subs	r3, r2, #0
 80268a6:	6822      	ldr	r2, [r4, #0]
 80268a8:	bf18      	it	ne
 80268aa:	2301      	movne	r3, #1
 80268ac:	0692      	lsls	r2, r2, #26
 80268ae:	d42b      	bmi.n	8026908 <_printf_common+0xb0>
 80268b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80268b4:	4649      	mov	r1, r9
 80268b6:	4638      	mov	r0, r7
 80268b8:	47c0      	blx	r8
 80268ba:	3001      	adds	r0, #1
 80268bc:	d01e      	beq.n	80268fc <_printf_common+0xa4>
 80268be:	6823      	ldr	r3, [r4, #0]
 80268c0:	68e5      	ldr	r5, [r4, #12]
 80268c2:	6832      	ldr	r2, [r6, #0]
 80268c4:	f003 0306 	and.w	r3, r3, #6
 80268c8:	2b04      	cmp	r3, #4
 80268ca:	bf08      	it	eq
 80268cc:	1aad      	subeq	r5, r5, r2
 80268ce:	68a3      	ldr	r3, [r4, #8]
 80268d0:	6922      	ldr	r2, [r4, #16]
 80268d2:	bf0c      	ite	eq
 80268d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80268d8:	2500      	movne	r5, #0
 80268da:	4293      	cmp	r3, r2
 80268dc:	bfc4      	itt	gt
 80268de:	1a9b      	subgt	r3, r3, r2
 80268e0:	18ed      	addgt	r5, r5, r3
 80268e2:	2600      	movs	r6, #0
 80268e4:	341a      	adds	r4, #26
 80268e6:	42b5      	cmp	r5, r6
 80268e8:	d11a      	bne.n	8026920 <_printf_common+0xc8>
 80268ea:	2000      	movs	r0, #0
 80268ec:	e008      	b.n	8026900 <_printf_common+0xa8>
 80268ee:	2301      	movs	r3, #1
 80268f0:	4652      	mov	r2, sl
 80268f2:	4649      	mov	r1, r9
 80268f4:	4638      	mov	r0, r7
 80268f6:	47c0      	blx	r8
 80268f8:	3001      	adds	r0, #1
 80268fa:	d103      	bne.n	8026904 <_printf_common+0xac>
 80268fc:	f04f 30ff 	mov.w	r0, #4294967295
 8026900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026904:	3501      	adds	r5, #1
 8026906:	e7c6      	b.n	8026896 <_printf_common+0x3e>
 8026908:	18e1      	adds	r1, r4, r3
 802690a:	1c5a      	adds	r2, r3, #1
 802690c:	2030      	movs	r0, #48	; 0x30
 802690e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026912:	4422      	add	r2, r4
 8026914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802691c:	3302      	adds	r3, #2
 802691e:	e7c7      	b.n	80268b0 <_printf_common+0x58>
 8026920:	2301      	movs	r3, #1
 8026922:	4622      	mov	r2, r4
 8026924:	4649      	mov	r1, r9
 8026926:	4638      	mov	r0, r7
 8026928:	47c0      	blx	r8
 802692a:	3001      	adds	r0, #1
 802692c:	d0e6      	beq.n	80268fc <_printf_common+0xa4>
 802692e:	3601      	adds	r6, #1
 8026930:	e7d9      	b.n	80268e6 <_printf_common+0x8e>
	...

08026934 <_printf_i>:
 8026934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026938:	7e0f      	ldrb	r7, [r1, #24]
 802693a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802693c:	2f78      	cmp	r7, #120	; 0x78
 802693e:	4691      	mov	r9, r2
 8026940:	4680      	mov	r8, r0
 8026942:	460c      	mov	r4, r1
 8026944:	469a      	mov	sl, r3
 8026946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802694a:	d807      	bhi.n	802695c <_printf_i+0x28>
 802694c:	2f62      	cmp	r7, #98	; 0x62
 802694e:	d80a      	bhi.n	8026966 <_printf_i+0x32>
 8026950:	2f00      	cmp	r7, #0
 8026952:	f000 80d8 	beq.w	8026b06 <_printf_i+0x1d2>
 8026956:	2f58      	cmp	r7, #88	; 0x58
 8026958:	f000 80a3 	beq.w	8026aa2 <_printf_i+0x16e>
 802695c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026964:	e03a      	b.n	80269dc <_printf_i+0xa8>
 8026966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802696a:	2b15      	cmp	r3, #21
 802696c:	d8f6      	bhi.n	802695c <_printf_i+0x28>
 802696e:	a101      	add	r1, pc, #4	; (adr r1, 8026974 <_printf_i+0x40>)
 8026970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026974:	080269cd 	.word	0x080269cd
 8026978:	080269e1 	.word	0x080269e1
 802697c:	0802695d 	.word	0x0802695d
 8026980:	0802695d 	.word	0x0802695d
 8026984:	0802695d 	.word	0x0802695d
 8026988:	0802695d 	.word	0x0802695d
 802698c:	080269e1 	.word	0x080269e1
 8026990:	0802695d 	.word	0x0802695d
 8026994:	0802695d 	.word	0x0802695d
 8026998:	0802695d 	.word	0x0802695d
 802699c:	0802695d 	.word	0x0802695d
 80269a0:	08026aed 	.word	0x08026aed
 80269a4:	08026a11 	.word	0x08026a11
 80269a8:	08026acf 	.word	0x08026acf
 80269ac:	0802695d 	.word	0x0802695d
 80269b0:	0802695d 	.word	0x0802695d
 80269b4:	08026b0f 	.word	0x08026b0f
 80269b8:	0802695d 	.word	0x0802695d
 80269bc:	08026a11 	.word	0x08026a11
 80269c0:	0802695d 	.word	0x0802695d
 80269c4:	0802695d 	.word	0x0802695d
 80269c8:	08026ad7 	.word	0x08026ad7
 80269cc:	682b      	ldr	r3, [r5, #0]
 80269ce:	1d1a      	adds	r2, r3, #4
 80269d0:	681b      	ldr	r3, [r3, #0]
 80269d2:	602a      	str	r2, [r5, #0]
 80269d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80269d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80269dc:	2301      	movs	r3, #1
 80269de:	e0a3      	b.n	8026b28 <_printf_i+0x1f4>
 80269e0:	6820      	ldr	r0, [r4, #0]
 80269e2:	6829      	ldr	r1, [r5, #0]
 80269e4:	0606      	lsls	r6, r0, #24
 80269e6:	f101 0304 	add.w	r3, r1, #4
 80269ea:	d50a      	bpl.n	8026a02 <_printf_i+0xce>
 80269ec:	680e      	ldr	r6, [r1, #0]
 80269ee:	602b      	str	r3, [r5, #0]
 80269f0:	2e00      	cmp	r6, #0
 80269f2:	da03      	bge.n	80269fc <_printf_i+0xc8>
 80269f4:	232d      	movs	r3, #45	; 0x2d
 80269f6:	4276      	negs	r6, r6
 80269f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80269fc:	485e      	ldr	r0, [pc, #376]	; (8026b78 <_printf_i+0x244>)
 80269fe:	230a      	movs	r3, #10
 8026a00:	e019      	b.n	8026a36 <_printf_i+0x102>
 8026a02:	680e      	ldr	r6, [r1, #0]
 8026a04:	602b      	str	r3, [r5, #0]
 8026a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026a0a:	bf18      	it	ne
 8026a0c:	b236      	sxthne	r6, r6
 8026a0e:	e7ef      	b.n	80269f0 <_printf_i+0xbc>
 8026a10:	682b      	ldr	r3, [r5, #0]
 8026a12:	6820      	ldr	r0, [r4, #0]
 8026a14:	1d19      	adds	r1, r3, #4
 8026a16:	6029      	str	r1, [r5, #0]
 8026a18:	0601      	lsls	r1, r0, #24
 8026a1a:	d501      	bpl.n	8026a20 <_printf_i+0xec>
 8026a1c:	681e      	ldr	r6, [r3, #0]
 8026a1e:	e002      	b.n	8026a26 <_printf_i+0xf2>
 8026a20:	0646      	lsls	r6, r0, #25
 8026a22:	d5fb      	bpl.n	8026a1c <_printf_i+0xe8>
 8026a24:	881e      	ldrh	r6, [r3, #0]
 8026a26:	4854      	ldr	r0, [pc, #336]	; (8026b78 <_printf_i+0x244>)
 8026a28:	2f6f      	cmp	r7, #111	; 0x6f
 8026a2a:	bf0c      	ite	eq
 8026a2c:	2308      	moveq	r3, #8
 8026a2e:	230a      	movne	r3, #10
 8026a30:	2100      	movs	r1, #0
 8026a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026a36:	6865      	ldr	r5, [r4, #4]
 8026a38:	60a5      	str	r5, [r4, #8]
 8026a3a:	2d00      	cmp	r5, #0
 8026a3c:	bfa2      	ittt	ge
 8026a3e:	6821      	ldrge	r1, [r4, #0]
 8026a40:	f021 0104 	bicge.w	r1, r1, #4
 8026a44:	6021      	strge	r1, [r4, #0]
 8026a46:	b90e      	cbnz	r6, 8026a4c <_printf_i+0x118>
 8026a48:	2d00      	cmp	r5, #0
 8026a4a:	d04d      	beq.n	8026ae8 <_printf_i+0x1b4>
 8026a4c:	4615      	mov	r5, r2
 8026a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8026a52:	fb03 6711 	mls	r7, r3, r1, r6
 8026a56:	5dc7      	ldrb	r7, [r0, r7]
 8026a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026a5c:	4637      	mov	r7, r6
 8026a5e:	42bb      	cmp	r3, r7
 8026a60:	460e      	mov	r6, r1
 8026a62:	d9f4      	bls.n	8026a4e <_printf_i+0x11a>
 8026a64:	2b08      	cmp	r3, #8
 8026a66:	d10b      	bne.n	8026a80 <_printf_i+0x14c>
 8026a68:	6823      	ldr	r3, [r4, #0]
 8026a6a:	07de      	lsls	r6, r3, #31
 8026a6c:	d508      	bpl.n	8026a80 <_printf_i+0x14c>
 8026a6e:	6923      	ldr	r3, [r4, #16]
 8026a70:	6861      	ldr	r1, [r4, #4]
 8026a72:	4299      	cmp	r1, r3
 8026a74:	bfde      	ittt	le
 8026a76:	2330      	movle	r3, #48	; 0x30
 8026a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026a7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026a80:	1b52      	subs	r2, r2, r5
 8026a82:	6122      	str	r2, [r4, #16]
 8026a84:	f8cd a000 	str.w	sl, [sp]
 8026a88:	464b      	mov	r3, r9
 8026a8a:	aa03      	add	r2, sp, #12
 8026a8c:	4621      	mov	r1, r4
 8026a8e:	4640      	mov	r0, r8
 8026a90:	f7ff fee2 	bl	8026858 <_printf_common>
 8026a94:	3001      	adds	r0, #1
 8026a96:	d14c      	bne.n	8026b32 <_printf_i+0x1fe>
 8026a98:	f04f 30ff 	mov.w	r0, #4294967295
 8026a9c:	b004      	add	sp, #16
 8026a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026aa2:	4835      	ldr	r0, [pc, #212]	; (8026b78 <_printf_i+0x244>)
 8026aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026aa8:	6829      	ldr	r1, [r5, #0]
 8026aaa:	6823      	ldr	r3, [r4, #0]
 8026aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8026ab0:	6029      	str	r1, [r5, #0]
 8026ab2:	061d      	lsls	r5, r3, #24
 8026ab4:	d514      	bpl.n	8026ae0 <_printf_i+0x1ac>
 8026ab6:	07df      	lsls	r7, r3, #31
 8026ab8:	bf44      	itt	mi
 8026aba:	f043 0320 	orrmi.w	r3, r3, #32
 8026abe:	6023      	strmi	r3, [r4, #0]
 8026ac0:	b91e      	cbnz	r6, 8026aca <_printf_i+0x196>
 8026ac2:	6823      	ldr	r3, [r4, #0]
 8026ac4:	f023 0320 	bic.w	r3, r3, #32
 8026ac8:	6023      	str	r3, [r4, #0]
 8026aca:	2310      	movs	r3, #16
 8026acc:	e7b0      	b.n	8026a30 <_printf_i+0xfc>
 8026ace:	6823      	ldr	r3, [r4, #0]
 8026ad0:	f043 0320 	orr.w	r3, r3, #32
 8026ad4:	6023      	str	r3, [r4, #0]
 8026ad6:	2378      	movs	r3, #120	; 0x78
 8026ad8:	4828      	ldr	r0, [pc, #160]	; (8026b7c <_printf_i+0x248>)
 8026ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026ade:	e7e3      	b.n	8026aa8 <_printf_i+0x174>
 8026ae0:	0659      	lsls	r1, r3, #25
 8026ae2:	bf48      	it	mi
 8026ae4:	b2b6      	uxthmi	r6, r6
 8026ae6:	e7e6      	b.n	8026ab6 <_printf_i+0x182>
 8026ae8:	4615      	mov	r5, r2
 8026aea:	e7bb      	b.n	8026a64 <_printf_i+0x130>
 8026aec:	682b      	ldr	r3, [r5, #0]
 8026aee:	6826      	ldr	r6, [r4, #0]
 8026af0:	6961      	ldr	r1, [r4, #20]
 8026af2:	1d18      	adds	r0, r3, #4
 8026af4:	6028      	str	r0, [r5, #0]
 8026af6:	0635      	lsls	r5, r6, #24
 8026af8:	681b      	ldr	r3, [r3, #0]
 8026afa:	d501      	bpl.n	8026b00 <_printf_i+0x1cc>
 8026afc:	6019      	str	r1, [r3, #0]
 8026afe:	e002      	b.n	8026b06 <_printf_i+0x1d2>
 8026b00:	0670      	lsls	r0, r6, #25
 8026b02:	d5fb      	bpl.n	8026afc <_printf_i+0x1c8>
 8026b04:	8019      	strh	r1, [r3, #0]
 8026b06:	2300      	movs	r3, #0
 8026b08:	6123      	str	r3, [r4, #16]
 8026b0a:	4615      	mov	r5, r2
 8026b0c:	e7ba      	b.n	8026a84 <_printf_i+0x150>
 8026b0e:	682b      	ldr	r3, [r5, #0]
 8026b10:	1d1a      	adds	r2, r3, #4
 8026b12:	602a      	str	r2, [r5, #0]
 8026b14:	681d      	ldr	r5, [r3, #0]
 8026b16:	6862      	ldr	r2, [r4, #4]
 8026b18:	2100      	movs	r1, #0
 8026b1a:	4628      	mov	r0, r5
 8026b1c:	f7d9 fbf8 	bl	8000310 <memchr>
 8026b20:	b108      	cbz	r0, 8026b26 <_printf_i+0x1f2>
 8026b22:	1b40      	subs	r0, r0, r5
 8026b24:	6060      	str	r0, [r4, #4]
 8026b26:	6863      	ldr	r3, [r4, #4]
 8026b28:	6123      	str	r3, [r4, #16]
 8026b2a:	2300      	movs	r3, #0
 8026b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026b30:	e7a8      	b.n	8026a84 <_printf_i+0x150>
 8026b32:	6923      	ldr	r3, [r4, #16]
 8026b34:	462a      	mov	r2, r5
 8026b36:	4649      	mov	r1, r9
 8026b38:	4640      	mov	r0, r8
 8026b3a:	47d0      	blx	sl
 8026b3c:	3001      	adds	r0, #1
 8026b3e:	d0ab      	beq.n	8026a98 <_printf_i+0x164>
 8026b40:	6823      	ldr	r3, [r4, #0]
 8026b42:	079b      	lsls	r3, r3, #30
 8026b44:	d413      	bmi.n	8026b6e <_printf_i+0x23a>
 8026b46:	68e0      	ldr	r0, [r4, #12]
 8026b48:	9b03      	ldr	r3, [sp, #12]
 8026b4a:	4298      	cmp	r0, r3
 8026b4c:	bfb8      	it	lt
 8026b4e:	4618      	movlt	r0, r3
 8026b50:	e7a4      	b.n	8026a9c <_printf_i+0x168>
 8026b52:	2301      	movs	r3, #1
 8026b54:	4632      	mov	r2, r6
 8026b56:	4649      	mov	r1, r9
 8026b58:	4640      	mov	r0, r8
 8026b5a:	47d0      	blx	sl
 8026b5c:	3001      	adds	r0, #1
 8026b5e:	d09b      	beq.n	8026a98 <_printf_i+0x164>
 8026b60:	3501      	adds	r5, #1
 8026b62:	68e3      	ldr	r3, [r4, #12]
 8026b64:	9903      	ldr	r1, [sp, #12]
 8026b66:	1a5b      	subs	r3, r3, r1
 8026b68:	42ab      	cmp	r3, r5
 8026b6a:	dcf2      	bgt.n	8026b52 <_printf_i+0x21e>
 8026b6c:	e7eb      	b.n	8026b46 <_printf_i+0x212>
 8026b6e:	2500      	movs	r5, #0
 8026b70:	f104 0619 	add.w	r6, r4, #25
 8026b74:	e7f5      	b.n	8026b62 <_printf_i+0x22e>
 8026b76:	bf00      	nop
 8026b78:	0802a6e7 	.word	0x0802a6e7
 8026b7c:	0802a6f8 	.word	0x0802a6f8

08026b80 <_read_r>:
 8026b80:	b538      	push	{r3, r4, r5, lr}
 8026b82:	4d07      	ldr	r5, [pc, #28]	; (8026ba0 <_read_r+0x20>)
 8026b84:	4604      	mov	r4, r0
 8026b86:	4608      	mov	r0, r1
 8026b88:	4611      	mov	r1, r2
 8026b8a:	2200      	movs	r2, #0
 8026b8c:	602a      	str	r2, [r5, #0]
 8026b8e:	461a      	mov	r2, r3
 8026b90:	f7df f856 	bl	8005c40 <_read>
 8026b94:	1c43      	adds	r3, r0, #1
 8026b96:	d102      	bne.n	8026b9e <_read_r+0x1e>
 8026b98:	682b      	ldr	r3, [r5, #0]
 8026b9a:	b103      	cbz	r3, 8026b9e <_read_r+0x1e>
 8026b9c:	6023      	str	r3, [r4, #0]
 8026b9e:	bd38      	pop	{r3, r4, r5, pc}
 8026ba0:	2400eda4 	.word	0x2400eda4

08026ba4 <abort>:
 8026ba4:	b508      	push	{r3, lr}
 8026ba6:	2006      	movs	r0, #6
 8026ba8:	f000 f84e 	bl	8026c48 <raise>
 8026bac:	2001      	movs	r0, #1
 8026bae:	f7df f83d 	bl	8005c2c <_exit>
	...

08026bb4 <_fstat_r>:
 8026bb4:	b538      	push	{r3, r4, r5, lr}
 8026bb6:	4d07      	ldr	r5, [pc, #28]	; (8026bd4 <_fstat_r+0x20>)
 8026bb8:	2300      	movs	r3, #0
 8026bba:	4604      	mov	r4, r0
 8026bbc:	4608      	mov	r0, r1
 8026bbe:	4611      	mov	r1, r2
 8026bc0:	602b      	str	r3, [r5, #0]
 8026bc2:	f7df f882 	bl	8005cca <_fstat>
 8026bc6:	1c43      	adds	r3, r0, #1
 8026bc8:	d102      	bne.n	8026bd0 <_fstat_r+0x1c>
 8026bca:	682b      	ldr	r3, [r5, #0]
 8026bcc:	b103      	cbz	r3, 8026bd0 <_fstat_r+0x1c>
 8026bce:	6023      	str	r3, [r4, #0]
 8026bd0:	bd38      	pop	{r3, r4, r5, pc}
 8026bd2:	bf00      	nop
 8026bd4:	2400eda4 	.word	0x2400eda4

08026bd8 <_isatty_r>:
 8026bd8:	b538      	push	{r3, r4, r5, lr}
 8026bda:	4d06      	ldr	r5, [pc, #24]	; (8026bf4 <_isatty_r+0x1c>)
 8026bdc:	2300      	movs	r3, #0
 8026bde:	4604      	mov	r4, r0
 8026be0:	4608      	mov	r0, r1
 8026be2:	602b      	str	r3, [r5, #0]
 8026be4:	f7df f881 	bl	8005cea <_isatty>
 8026be8:	1c43      	adds	r3, r0, #1
 8026bea:	d102      	bne.n	8026bf2 <_isatty_r+0x1a>
 8026bec:	682b      	ldr	r3, [r5, #0]
 8026bee:	b103      	cbz	r3, 8026bf2 <_isatty_r+0x1a>
 8026bf0:	6023      	str	r3, [r4, #0]
 8026bf2:	bd38      	pop	{r3, r4, r5, pc}
 8026bf4:	2400eda4 	.word	0x2400eda4

08026bf8 <_raise_r>:
 8026bf8:	291f      	cmp	r1, #31
 8026bfa:	b538      	push	{r3, r4, r5, lr}
 8026bfc:	4604      	mov	r4, r0
 8026bfe:	460d      	mov	r5, r1
 8026c00:	d904      	bls.n	8026c0c <_raise_r+0x14>
 8026c02:	2316      	movs	r3, #22
 8026c04:	6003      	str	r3, [r0, #0]
 8026c06:	f04f 30ff 	mov.w	r0, #4294967295
 8026c0a:	bd38      	pop	{r3, r4, r5, pc}
 8026c0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026c0e:	b112      	cbz	r2, 8026c16 <_raise_r+0x1e>
 8026c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026c14:	b94b      	cbnz	r3, 8026c2a <_raise_r+0x32>
 8026c16:	4620      	mov	r0, r4
 8026c18:	f000 f830 	bl	8026c7c <_getpid_r>
 8026c1c:	462a      	mov	r2, r5
 8026c1e:	4601      	mov	r1, r0
 8026c20:	4620      	mov	r0, r4
 8026c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026c26:	f000 b817 	b.w	8026c58 <_kill_r>
 8026c2a:	2b01      	cmp	r3, #1
 8026c2c:	d00a      	beq.n	8026c44 <_raise_r+0x4c>
 8026c2e:	1c59      	adds	r1, r3, #1
 8026c30:	d103      	bne.n	8026c3a <_raise_r+0x42>
 8026c32:	2316      	movs	r3, #22
 8026c34:	6003      	str	r3, [r0, #0]
 8026c36:	2001      	movs	r0, #1
 8026c38:	e7e7      	b.n	8026c0a <_raise_r+0x12>
 8026c3a:	2400      	movs	r4, #0
 8026c3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026c40:	4628      	mov	r0, r5
 8026c42:	4798      	blx	r3
 8026c44:	2000      	movs	r0, #0
 8026c46:	e7e0      	b.n	8026c0a <_raise_r+0x12>

08026c48 <raise>:
 8026c48:	4b02      	ldr	r3, [pc, #8]	; (8026c54 <raise+0xc>)
 8026c4a:	4601      	mov	r1, r0
 8026c4c:	6818      	ldr	r0, [r3, #0]
 8026c4e:	f7ff bfd3 	b.w	8026bf8 <_raise_r>
 8026c52:	bf00      	nop
 8026c54:	240004cc 	.word	0x240004cc

08026c58 <_kill_r>:
 8026c58:	b538      	push	{r3, r4, r5, lr}
 8026c5a:	4d07      	ldr	r5, [pc, #28]	; (8026c78 <_kill_r+0x20>)
 8026c5c:	2300      	movs	r3, #0
 8026c5e:	4604      	mov	r4, r0
 8026c60:	4608      	mov	r0, r1
 8026c62:	4611      	mov	r1, r2
 8026c64:	602b      	str	r3, [r5, #0]
 8026c66:	f7de ffcf 	bl	8005c08 <_kill>
 8026c6a:	1c43      	adds	r3, r0, #1
 8026c6c:	d102      	bne.n	8026c74 <_kill_r+0x1c>
 8026c6e:	682b      	ldr	r3, [r5, #0]
 8026c70:	b103      	cbz	r3, 8026c74 <_kill_r+0x1c>
 8026c72:	6023      	str	r3, [r4, #0]
 8026c74:	bd38      	pop	{r3, r4, r5, pc}
 8026c76:	bf00      	nop
 8026c78:	2400eda4 	.word	0x2400eda4

08026c7c <_getpid_r>:
 8026c7c:	f7de bfbc 	b.w	8005bf8 <_getpid>

08026c80 <_init>:
 8026c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c82:	bf00      	nop
 8026c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c86:	bc08      	pop	{r3}
 8026c88:	469e      	mov	lr, r3
 8026c8a:	4770      	bx	lr

08026c8c <_fini>:
 8026c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c8e:	bf00      	nop
 8026c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c92:	bc08      	pop	{r3}
 8026c94:	469e      	mov	lr, r3
 8026c96:	4770      	bx	lr
