
Sensor_Hub_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d00c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800d2dc  0800d2dc  0001d2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d428  0800d428  0001d428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d42c  0800d42c  0001d42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  24000000  0800d430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00006964  24000168  0800d598  00020168  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24006acc  0800d598  00026acc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
  9 .debug_info   000303d5  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005998  00000000  00000000  0005056b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002518  00000000  00000000  00055f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000022d0  00000000  00000000  00058420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00008845  00000000  00000000  0005a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002c770  00000000  00000000  00062f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001639ba  00000000  00000000  0008f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f305f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000a27c  00000000  00000000  001f30b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d2c4 	.word	0x0800d2c4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	0800d2c4 	.word	0x0800d2c4

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000316:	4b42      	ldr	r3, [pc, #264]	; (8000420 <main+0x110>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800031e:	2b00      	cmp	r3, #0
 8000320:	d11b      	bne.n	800035a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000322:	f3bf 8f4f 	dsb	sy
}
 8000326:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000328:	f3bf 8f6f 	isb	sy
}
 800032c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800032e:	4b3c      	ldr	r3, [pc, #240]	; (8000420 <main+0x110>)
 8000330:	2200      	movs	r2, #0
 8000332:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000336:	f3bf 8f4f 	dsb	sy
}
 800033a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800033c:	f3bf 8f6f 	isb	sy
}
 8000340:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000342:	4b37      	ldr	r3, [pc, #220]	; (8000420 <main+0x110>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a36      	ldr	r2, [pc, #216]	; (8000420 <main+0x110>)
 8000348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800034e:	f3bf 8f4f 	dsb	sy
}
 8000352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000354:	f3bf 8f6f 	isb	sy
}
 8000358:	e000      	b.n	800035c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800035a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800035c:	4b30      	ldr	r3, [pc, #192]	; (8000420 <main+0x110>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d138      	bne.n	80003da <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <main+0x110>)
 800036a:	2200      	movs	r2, #0
 800036c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000370:	f3bf 8f4f 	dsb	sy
}
 8000374:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <main+0x110>)
 8000378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800037c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	0b5b      	lsrs	r3, r3, #13
 8000382:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000386:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	08db      	lsrs	r3, r3, #3
 800038c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000390:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	015a      	lsls	r2, r3, #5
 8000396:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800039a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003a0:	491f      	ldr	r1, [pc, #124]	; (8000420 <main+0x110>)
 80003a2:	4313      	orrs	r3, r2
 80003a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	607a      	str	r2, [r7, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1ef      	bne.n	8000392 <main+0x82>
    } while(sets-- != 0U);
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	60ba      	str	r2, [r7, #8]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1e5      	bne.n	8000388 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80003bc:	f3bf 8f4f 	dsb	sy
}
 80003c0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <main+0x110>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <main+0x110>)
 80003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003ce:	f3bf 8f4f 	dsb	sy
}
 80003d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d4:	f3bf 8f6f 	isb	sy
}
 80003d8:	e000      	b.n	80003dc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003da:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003dc:	f000 fef0 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e0:	f000 f826 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e4:	f000 fa8c 	bl	8000900 <MX_GPIO_Init>
  MX_DTS_Init();
 80003e8:	f000 f890 	bl	800050c <MX_DTS_Init>
  MX_FDCAN1_Init();
 80003ec:	f000 f8b8 	bl	8000560 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 80003f0:	f000 f91a 	bl	8000628 <MX_I2C1_Init>
  MX_I2C3_Init();
 80003f4:	f000 f958 	bl	80006a8 <MX_I2C3_Init>
  MX_I2C4_Init();
 80003f8:	f000 f996 	bl	8000728 <MX_I2C4_Init>
  MX_SPI4_Init();
 80003fc:	f000 f9d4 	bl	80007a8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000400:	f000 fa28 	bl	8000854 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000404:	f009 fbf6 	bl	8009bf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <main+0x114>)
 800040a:	2100      	movs	r1, #0
 800040c:	4806      	ldr	r0, [pc, #24]	; (8000428 <main+0x118>)
 800040e:	f009 fc3b 	bl	8009c88 <osThreadNew>
 8000412:	4603      	mov	r3, r0
 8000414:	4a05      	ldr	r2, [pc, #20]	; (800042c <main+0x11c>)
 8000416:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000418:	f009 fc10 	bl	8009c3c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800041c:	e7fe      	b.n	800041c <main+0x10c>
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00
 8000424:	0800d394 	.word	0x0800d394
 8000428:	080009e9 	.word	0x080009e9
 800042c:	24000454 	.word	0x24000454

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b09c      	sub	sp, #112	; 0x70
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043a:	224c      	movs	r2, #76	; 0x4c
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f00c fe76 	bl	800d130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2220      	movs	r2, #32
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f00c fe70 	bl	800d130 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000450:	2002      	movs	r0, #2
 8000452:	f003 f99b 	bl	800378c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000456:	2300      	movs	r3, #0
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <SystemClock_Config+0xd8>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a2a      	ldr	r2, [pc, #168]	; (8000508 <SystemClock_Config+0xd8>)
 8000460:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <SystemClock_Config+0xd8>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000472:	bf00      	nop
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <SystemClock_Config+0xd8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800047c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000480:	d1f8      	bne.n	8000474 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000482:	2301      	movs	r3, #1
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000486:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000490:	2302      	movs	r3, #2
 8000492:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000494:	2302      	movs	r3, #2
 8000496:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000498:	232c      	movs	r3, #44	; 0x2c
 800049a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800049c:	2301      	movs	r3, #1
 800049e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80004a0:	2305      	movs	r3, #5
 80004a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004a8:	230c      	movs	r3, #12
 80004aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 f9b1 	bl	8003820 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004c4:	f000 faac 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	233f      	movs	r3, #63	; 0x3f
 80004ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	2303      	movs	r3, #3
 80004ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004d4:	2308      	movs	r3, #8
 80004d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004d8:	2340      	movs	r3, #64	; 0x40
 80004da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004dc:	2340      	movs	r3, #64	; 0x40
 80004de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004e6:	2340      	movs	r3, #64	; 0x40
 80004e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2103      	movs	r1, #3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fd70 	bl	8003fd4 <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xce>
  {
    Error_Handler();
 80004fa:	f000 fa91 	bl	8000a20 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3770      	adds	r7, #112	; 0x70
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	58024800 	.word	0x58024800

0800050c <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_DTS_Init+0x4c>)
 8000512:	4a12      	ldr	r2, [pc, #72]	; (800055c <MX_DTS_Init+0x50>)
 8000514:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <MX_DTS_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_DTS_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <MX_DTS_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_1_CYCLE;
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_DTS_Init+0x4c>)
 800052a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800052e:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_DTS_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_DTS_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_DTS_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_DTS_Init+0x4c>)
 8000544:	f000 ff9c 	bl	8001480 <HAL_DTS_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 800054e:	f000 fa67 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	24000184 	.word	0x24000184
 800055c:	58006800 	.word	0x58006800

08000560 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000564:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000566:	4a2f      	ldr	r2, [pc, #188]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000568:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800056a:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000576:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000578:	2200      	movs	r2, #0
 800057a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 800057e:	2200      	movs	r2, #0
 8000580:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000584:	2200      	movs	r2, #0
 8000586:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 800058a:	2210      	movs	r2, #16
 800058c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000590:	2201      	movs	r2, #1
 8000592:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000596:	2202      	movs	r2, #2
 8000598:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 800059c:	2202      	movs	r2, #2
 800059e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005de:	2204      	movs	r2, #4
 80005e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000602:	2200      	movs	r2, #0
 8000604:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 8000608:	2204      	movs	r2, #4
 800060a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_FDCAN1_Init+0xc0>)
 800060e:	f000 ffd1 	bl	80015b4 <HAL_FDCAN_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000618:	f000 fa02 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	240001a8 	.word	0x240001a8
 8000624:	4000a000 	.word	0x4000a000

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <MX_I2C1_Init+0x74>)
 8000664:	f001 fcb2 	bl	8001fcc <HAL_I2C_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 f9d7 	bl	8000a20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <MX_I2C1_Init+0x74>)
 8000676:	f001 fd39 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 f9ce 	bl	8000a20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_I2C1_Init+0x74>)
 8000688:	f001 fd7b 	bl	8002182 <HAL_I2CEx_ConfigDigitalFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f9c5 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000248 	.word	0x24000248
 80006a0:	40005400 	.word	0x40005400
 80006a4:	60404e72 	.word	0x60404e72

080006a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_I2C3_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <MX_I2C3_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_I2C3_Init+0x74>)
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <MX_I2C3_Init+0x7c>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_I2C3_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_I2C3_Init+0x74>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_I2C3_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_I2C3_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C3_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C3_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C3_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006e2:	480e      	ldr	r0, [pc, #56]	; (800071c <MX_I2C3_Init+0x74>)
 80006e4:	f001 fc72 	bl	8001fcc <HAL_I2C_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006ee:	f000 f997 	bl	8000a20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <MX_I2C3_Init+0x74>)
 80006f6:	f001 fcf9 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000700:	f000 f98e 	bl	8000a20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_I2C3_Init+0x74>)
 8000708:	f001 fd3b 	bl	8002182 <HAL_I2CEx_ConfigDigitalFilter>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 f985 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2400029c 	.word	0x2400029c
 8000720:	40005c00 	.word	0x40005c00
 8000724:	60404e72 	.word	0x60404e72

08000728 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C4_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C4_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C4_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_I2C4_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C4_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_I2C4_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C4_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_I2C4_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C4_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C4_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C4_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <MX_I2C4_Init+0x74>)
 8000764:	f001 fc32 	bl	8001fcc <HAL_I2C_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800076e:	f000 f957 	bl	8000a20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C4_Init+0x74>)
 8000776:	f001 fcb9 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 f94e 	bl	8000a20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_I2C4_Init+0x74>)
 8000788:	f001 fcfb 	bl	8002182 <HAL_I2CEx_ConfigDigitalFilter>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f945 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	240002f0 	.word	0x240002f0
 80007a0:	58001c00 	.word	0x58001c00
 80007a4:	60404e72 	.word	0x60404e72

080007a8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_SPI4_Init+0xa4>)
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <MX_SPI4_Init+0xa8>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_SPI4_Init+0xa4>)
 80007b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_SPI4_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_SPI4_Init+0xa4>)
 80007c2:	2203      	movs	r2, #3
 80007c4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_SPI4_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_SPI4_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_SPI4_Init+0xa4>)
 80007d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007d8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_SPI4_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI4_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_SPI4_Init+0xa4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI4_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI4_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI4_Init+0xa4>)
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI4_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI4_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI4_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI4_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI4_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI4_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI4_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI4_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI4_Init+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI4_Init+0xa4>)
 8000838:	f005 fa88 	bl	8005d4c <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 f8ed 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	24000344 	.word	0x24000344
 8000850:	40013400 	.word	0x40013400

08000854 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_SPI5_Init+0xa4>)
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <MX_SPI5_Init+0xa8>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_SPI5_Init+0xa4>)
 8000860:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000864:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_SPI5_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_SPI5_Init+0xa4>)
 800086e:	2203      	movs	r2, #3
 8000870:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_SPI5_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_SPI5_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_SPI5_Init+0xa4>)
 8000880:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000884:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_SPI5_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_SPI5_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_SPI5_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI5_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_SPI5_Init+0xa4>)
 80008e4:	f005 fa32 	bl	8005d4c <HAL_SPI_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 80008ee:	f000 f897 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	240003cc 	.word	0x240003cc
 80008fc:	40015000 	.word	0x40015000

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	4a35      	ldr	r2, [pc, #212]	; (80009e4 <MX_GPIO_Init+0xe4>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000916:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <MX_GPIO_Init+0xe4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xe4>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0xe4>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_GPIO_Init+0xe4>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <MX_GPIO_Init+0xe4>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_GPIO_Init+0xe4>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_GPIO_Init+0xe4>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <MX_GPIO_Init+0xe4>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_GPIO_Init+0xe4>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	58024400 	.word	0x58024400

080009e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009f0:	f00b fe7c 	bl	800c6ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f009 f9d9 	bl	8009dac <osDelay>
 80009fa:	e7fb      	b.n	80009f4 <StartDefaultTask+0xc>

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 fc13 	bl	8001238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40001000 	.word	0x40001000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_MspInit+0x38>)
 8000a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_MspInit+0x38>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_MspInit+0x38>)
 8000a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	210f      	movs	r1, #15
 8000a54:	f06f 0001 	mvn.w	r0, #1
 8000a58:	f000 fcea 	bl	8001430 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58024400 	.word	0x58024400

08000a68 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_DTS_MspInit+0x3c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10e      	bne.n	8000a98 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_DTS_MspInit+0x40>)
 8000a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <HAL_DTS_MspInit+0x40>)
 8000a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_DTS_MspInit+0x40>)
 8000a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	58006800 	.word	0x58006800
 8000aa8:	58024400 	.word	0x58024400

08000aac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0b8      	sub	sp, #224	; 0xe0
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	22b8      	movs	r2, #184	; 0xb8
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f00c fb2f 	bl	800d130 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <HAL_FDCAN_MspInit+0xc4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d145      	bne.n	8000b68 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000adc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ae8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000aec:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fe26 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000afe:	f7ff ff8f 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_FDCAN_MspInit+0xc8>)
 8000b04:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <HAL_FDCAN_MspInit+0xc8>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_FDCAN_MspInit+0xc8>)
 8000b14:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_FDCAN_MspInit+0xc8>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_FDCAN_MspInit+0xc8>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_FDCAN_MspInit+0xc8>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b56:	2309      	movs	r3, #9
 8000b58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_FDCAN_MspInit+0xcc>)
 8000b64:	f001 f88a 	bl	8001c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	37e0      	adds	r7, #224	; 0xe0
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	4000a000 	.word	0x4000a000
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020c00 	.word	0x58020c00

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0be      	sub	sp, #248	; 0xf8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b98:	22b8      	movs	r2, #184	; 0xb8
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00c fac7 	bl	800d130 <memset>
  if(hi2c->Instance==I2C1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a86      	ldr	r2, [pc, #536]	; (8000dc0 <HAL_I2C_MspInit+0x244>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d146      	bne.n	8000c3a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bac:	f04f 0208 	mov.w	r2, #8
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fdbe 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bce:	f7ff ff27 	bl	8000a20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b7c      	ldr	r3, [pc, #496]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b78      	ldr	r3, [pc, #480]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf0:	23c0      	movs	r3, #192	; 0xc0
 8000bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c12:	4619      	mov	r1, r3
 8000c14:	486c      	ldr	r0, [pc, #432]	; (8000dc8 <HAL_I2C_MspInit+0x24c>)
 8000c16:	f001 f831 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1a:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c20:	4a68      	ldr	r2, [pc, #416]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c2a:	4b66      	ldr	r3, [pc, #408]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	623b      	str	r3, [r7, #32]
 8000c36:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000c38:	e0bd      	b.n	8000db6 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a63      	ldr	r2, [pc, #396]	; (8000dcc <HAL_I2C_MspInit+0x250>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d16c      	bne.n	8000d1e <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c44:	f04f 0208 	mov.w	r2, #8
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fd72 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000c66:	f7ff fedb 	bl	8000a20 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b52      	ldr	r3, [pc, #328]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a4d      	ldr	r2, [pc, #308]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4840      	ldr	r0, [pc, #256]	; (8000dd0 <HAL_I2C_MspInit+0x254>)
 8000cce:	f000 ffd5 	bl	8001c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cda:	2312      	movs	r3, #18
 8000cdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cec:	2304      	movs	r3, #4
 8000cee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4836      	ldr	r0, [pc, #216]	; (8000dd4 <HAL_I2C_MspInit+0x258>)
 8000cfa:	f000 ffbf 	bl	8001c7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d04:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000d06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]
}
 8000d1c:	e04b      	b.n	8000db6 <HAL_I2C_MspInit+0x23a>
  else if(hi2c->Instance==I2C4)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <HAL_I2C_MspInit+0x25c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d146      	bne.n	8000db6 <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d28:	f04f 0210 	mov.w	r2, #16
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fd00 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 8000d4a:	f7ff fe69 	bl	8000a20 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000d56:	f043 0320 	orr.w	r3, r3, #32
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d6c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d74:	2312      	movs	r3, #18
 8000d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d86:	2304      	movs	r3, #4
 8000d88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <HAL_I2C_MspInit+0x260>)
 8000d94:	f000 ff72 	bl	8001c7c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_I2C_MspInit+0x248>)
 8000daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	bf00      	nop
 8000db8:	37f8      	adds	r7, #248	; 0xf8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58020400 	.word	0x58020400
 8000dcc:	40005c00 	.word	0x40005c00
 8000dd0:	58020800 	.word	0x58020800
 8000dd4:	58020000 	.word	0x58020000
 8000dd8:	58001c00 	.word	0x58001c00
 8000ddc:	58021400 	.word	0x58021400

08000de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ba      	sub	sp, #232	; 0xe8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	22b8      	movs	r2, #184	; 0xb8
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00c f995 	bl	800d130 <memset>
  if(hspi->Instance==SPI4)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <HAL_SPI_MspInit+0x15c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d145      	bne.n	8000e9c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000e10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fc8d 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e30:	f7ff fdf6 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000e34:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e3a:	4a41      	ldr	r2, [pc, #260]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000e3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a39      	ldr	r2, [pc, #228]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e70:	2374      	movs	r3, #116	; 0x74
 8000e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e92:	4619      	mov	r1, r3
 8000e94:	482b      	ldr	r0, [pc, #172]	; (8000f44 <HAL_SPI_MspInit+0x164>)
 8000e96:	f000 fef1 	bl	8001c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000e9a:	e04a      	b.n	8000f32 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI5)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a29      	ldr	r2, [pc, #164]	; (8000f48 <HAL_SPI_MspInit+0x168>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d145      	bne.n	8000f32 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8000ea6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fc42 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8000ec6:	f7ff fdab 	bl	8000a20 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ed6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_SPI_MspInit+0x160>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f06:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f20:	2305      	movs	r3, #5
 8000f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <HAL_SPI_MspInit+0x16c>)
 8000f2e:	f000 fea5 	bl	8001c7c <HAL_GPIO_Init>
}
 8000f32:	bf00      	nop
 8000f34:	37e8      	adds	r7, #232	; 0xe8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013400 	.word	0x40013400
 8000f40:	58024400 	.word	0x58024400
 8000f44:	58021000 	.word	0x58021000
 8000f48:	40015000 	.word	0x40015000
 8000f4c:	58021400 	.word	0x58021400

08000f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b090      	sub	sp, #64	; 0x40
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	d827      	bhi.n	8000fae <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	2036      	movs	r0, #54	; 0x36
 8000f64:	f000 fa64 	bl	8001430 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f68:	2036      	movs	r0, #54	; 0x36
 8000f6a:	f000 fa7b 	bl	8001464 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f6e:	4a29      	ldr	r2, [pc, #164]	; (8001014 <HAL_InitTick+0xc4>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <HAL_InitTick+0xc8>)
 8000f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7a:	4a27      	ldr	r2, [pc, #156]	; (8001018 <HAL_InitTick+0xc8>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_InitTick+0xc8>)
 8000f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f92:	f107 0210 	add.w	r2, r7, #16
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fb8f 	bl	80046c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d106      	bne.n	8000fba <HAL_InitTick+0x6a>
 8000fac:	e001      	b.n	8000fb2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e02b      	b.n	800100a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb2:	f003 fb6f 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 8000fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000fb8:	e004      	b.n	8000fc4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fba:	f003 fb6b 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_InitTick+0xcc>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_InitTick+0xd0>)
 8000fd4:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_InitTick+0xd4>)
 8000fd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_InitTick+0xd0>)
 8000fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fde:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_InitTick+0xd0>)
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_InitTick+0xd0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_InitTick+0xd0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <HAL_InitTick+0xd0>)
 8000ff4:	f004 ffe9 	bl	8005fca <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <HAL_InitTick+0xd0>)
 8001000:	f005 f844 	bl	800608c <HAL_TIM_Base_Start_IT>
 8001004:	4603      	mov	r3, r0
 8001006:	e000      	b.n	800100a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
}
 800100a:	4618      	mov	r0, r3
 800100c:	3740      	adds	r7, #64	; 0x40
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	24000008 	.word	0x24000008
 8001018:	58024400 	.word	0x58024400
 800101c:	431bde83 	.word	0x431bde83
 8001020:	24000458 	.word	0x24000458
 8001024:	40001000 	.word	0x40001000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM6_DAC_IRQHandler+0x10>)
 800105a:	f005 f89d 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000458 	.word	0x24000458

08001068 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <OTG_HS_IRQHandler+0x10>)
 800106e:	f001 fa2d 	bl	80024cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24006398 	.word	0x24006398

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001080:	4b32      	ldr	r3, [pc, #200]	; (800114c <SystemInit+0xd0>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a31      	ldr	r2, [pc, #196]	; (800114c <SystemInit+0xd0>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <SystemInit+0xd4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	2b06      	cmp	r3, #6
 800109a:	d807      	bhi.n	80010ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <SystemInit+0xd4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 030f 	bic.w	r3, r3, #15
 80010a4:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <SystemInit+0xd4>)
 80010a6:	f043 0307 	orr.w	r3, r3, #7
 80010aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <SystemInit+0xd8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a28      	ldr	r2, [pc, #160]	; (8001154 <SystemInit+0xd8>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <SystemInit+0xd8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <SystemInit+0xd8>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4924      	ldr	r1, [pc, #144]	; (8001154 <SystemInit+0xd8>)
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <SystemInit+0xdc>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <SystemInit+0xd4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <SystemInit+0xd4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 030f 	bic.w	r3, r3, #15
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <SystemInit+0xd4>)
 80010e0:	f043 0307 	orr.w	r3, r3, #7
 80010e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <SystemInit+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <SystemInit+0xd8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <SystemInit+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <SystemInit+0xd8>)
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <SystemInit+0xe0>)
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <SystemInit+0xd8>)
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <SystemInit+0xe4>)
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <SystemInit+0xd8>)
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <SystemInit+0xe8>)
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <SystemInit+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <SystemInit+0xd8>)
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <SystemInit+0xe8>)
 8001114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <SystemInit+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <SystemInit+0xd8>)
 800111e:	4a11      	ldr	r2, [pc, #68]	; (8001164 <SystemInit+0xe8>)
 8001120:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <SystemInit+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <SystemInit+0xd8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a09      	ldr	r2, [pc, #36]	; (8001154 <SystemInit+0xd8>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <SystemInit+0xd8>)
 8001136:	2200      	movs	r2, #0
 8001138:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <SystemInit+0xec>)
 800113c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001140:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	52002000 	.word	0x52002000
 8001154:	58024400 	.word	0x58024400
 8001158:	eaf6ed7f 	.word	0xeaf6ed7f
 800115c:	02020200 	.word	0x02020200
 8001160:	01ff0000 	.word	0x01ff0000
 8001164:	01010280 	.word	0x01010280
 8001168:	52004000 	.word	0x52004000

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001170:	f7ff ff84 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	; (80011ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	; (80011b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f00b ff95 	bl	800d0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff f8b7 	bl	8000310 <main>
  bx  lr
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011ac:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 80011b0:	0800d430 	.word	0x0800d430
  ldr r2, =_sbss
 80011b4:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 80011b8:	24006acc 	.word	0x24006acc

080011bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC3_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f000 f927 	bl	800141a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011cc:	f003 f8b8 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_Init+0x68>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	4913      	ldr	r1, [pc, #76]	; (800122c <HAL_Init+0x6c>)
 80011de:	5ccb      	ldrb	r3, [r1, r3]
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_Init+0x68>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_Init+0x6c>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
 80011f6:	f003 031f 	and.w	r3, r3, #31
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <HAL_Init+0x70>)
 8001202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001204:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <HAL_Init+0x74>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120a:	200f      	movs	r0, #15
 800120c:	f7ff fea0 	bl	8000f50 <HAL_InitTick>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e002      	b.n	8001220 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800121a:	f7ff fc07 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400
 800122c:	0800d3b8 	.word	0x0800d3b8
 8001230:	24000004 	.word	0x24000004
 8001234:	24000000 	.word	0x24000000

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2400000c 	.word	0x2400000c
 800125c:	240004a4 	.word	0x240004a4

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	240004a4 	.word	0x240004a4

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2400000c 	.word	0x2400000c

080012c0 <__NVIC_SetPriorityGrouping>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <__NVIC_SetPriorityGrouping+0x40>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x40>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00
 8001304:	05fa0000 	.word	0x05fa0000

08001308 <__NVIC_GetPriorityGrouping>:
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff4c 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143e:	f7ff ff63 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001442:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	6978      	ldr	r0, [r7, #20]
 800144a:	f7ff ffb3 	bl	80013b4 <NVIC_EncodePriority>
 800144e:	4602      	mov	r2, r0
 8001450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff82 	bl	8001360 <__NVIC_SetPriority>
}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff56 	bl	8001324 <__NVIC_EnableIRQ>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e089      	b.n	80015a6 <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fae2 	bl	8000a68 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e075      	b.n	80015a6 <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e06e      	b.n	80015a6 <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e00e      	b.n	8001500 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ea:	d001      	beq.n	80014f0 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e05a      	b.n	80015a6 <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80014fe:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001508:	d108      	bne.n	800151c <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e007      	b.n	800152c <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800152a:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	061a      	lsls	r2, r3, #24
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	b299      	uxth	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_DTS_Init+0x130>)
 800158e:	4013      	ands	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	69d1      	ldr	r1, [r2, #28]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	430b      	orrs	r3, r1
 800159a:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	ffff0000 	.word	0xffff0000

080015b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b098      	sub	sp, #96	; 0x60
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80015bc:	4a84      	ldr	r2, [pc, #528]	; (80017d0 <HAL_FDCAN_Init+0x21c>)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4611      	mov	r1, r2
 80015c4:	224c      	movs	r2, #76	; 0x4c
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00b fda4 	bl	800d114 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1c6      	b.n	8001964 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a7e      	ldr	r2, [pc, #504]	; (80017d4 <HAL_FDCAN_Init+0x220>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d106      	bne.n	80015ee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fa52 	bl	8000aac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0210 	bic.w	r2, r2, #16
 8001616:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001618:	f7ff fe22 	bl	8001260 <HAL_GetTick>
 800161c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800161e:	e014      	b.n	800164a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001620:	f7ff fe1e 	bl	8001260 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b0a      	cmp	r3, #10
 800162c:	d90d      	bls.n	800164a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e18c      	b.n	8001964 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b08      	cmp	r3, #8
 8001656:	d0e3      	beq.n	8001620 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff fdfa 	bl	8001260 <HAL_GetTick>
 800166c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800166e:	e014      	b.n	800169a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001670:	f7ff fdf6 	bl	8001260 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d90d      	bls.n	800169a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e164      	b.n	8001964 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0e3      	beq.n	8001670 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0202 	orr.w	r2, r2, #2
 80016b6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7c1b      	ldrb	r3, [r3, #16]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	e007      	b.n	80016e2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7c5b      	ldrb	r3, [r3, #17]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699a      	ldr	r2, [r3, #24]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016f8:	619a      	str	r2, [r3, #24]
 80016fa:	e007      	b.n	800170c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699a      	ldr	r2, [r3, #24]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800170a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7c9b      	ldrb	r3, [r3, #18]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001722:	619a      	str	r2, [r3, #24]
 8001724:	e007      	b.n	8001736 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001734:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800175a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0210 	bic.w	r2, r2, #16
 800176a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0204 	orr.w	r2, r2, #4
 8001782:	619a      	str	r2, [r3, #24]
 8001784:	e030      	b.n	80017e8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d02c      	beq.n	80017e8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d020      	beq.n	80017d8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0210 	orr.w	r2, r2, #16
 80017b4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d114      	bne.n	80017e8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0220 	orr.w	r2, r2, #32
 80017cc:	619a      	str	r2, [r3, #24]
 80017ce:	e00b      	b.n	80017e8 <HAL_FDCAN_Init+0x234>
 80017d0:	0800d2e8 	.word	0x0800d2e8
 80017d4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017f8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001800:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	3b01      	subs	r3, #1
 800180a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001810:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001812:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800181c:	d115      	bne.n	800184a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	3b01      	subs	r3, #1
 800182a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800182c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	3b01      	subs	r3, #1
 8001834:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001836:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	3b01      	subs	r3, #1
 8001840:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001846:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001848:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00a      	beq.n	8001868 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001870:	4413      	add	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d011      	beq.n	800189a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800187e:	f023 0107 	bic.w	r1, r3, #7
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	3360      	adds	r3, #96	; 0x60
 800188a:	443b      	add	r3, r7
 800188c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d011      	beq.n	80018c6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80018aa:	f023 0107 	bic.w	r1, r3, #7
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	3360      	adds	r3, #96	; 0x60
 80018b6:	443b      	add	r3, r7
 80018b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d012      	beq.n	80018f4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80018d6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	3360      	adds	r3, #96	; 0x60
 80018e2:	443b      	add	r3, r7
 80018e4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80018e8:	011a      	lsls	r2, r3, #4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d012      	beq.n	8001922 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001904:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	3360      	adds	r3, #96	; 0x60
 8001910:	443b      	add	r3, r7
 8001912:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001916:	021a      	lsls	r2, r3, #8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_FDCAN_Init+0x3b8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d107      	bne.n	800193c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f022 0203 	bic.w	r2, r2, #3
 800193a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f80b 	bl	8001970 <FDCAN_CalcultateRamBlockAddresses>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001960:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001964:	4618      	mov	r0, r3
 8001966:	3760      	adds	r7, #96	; 0x60
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	4000a000 	.word	0x4000a000

08001970 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001986:	4ba7      	ldr	r3, [pc, #668]	; (8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001988:	4013      	ands	r3, r2
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	0091      	lsls	r1, r2, #2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	430b      	orrs	r3, r1
 8001994:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	4413      	add	r3, r2
 80019bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019c6:	4b97      	ldr	r3, [pc, #604]	; (8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	0091      	lsls	r1, r2, #2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	430b      	orrs	r3, r1
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	4413      	add	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001a08:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	0091      	lsls	r1, r2, #2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4413      	add	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a50:	4b74      	ldr	r3, [pc, #464]	; (8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	0091      	lsls	r1, r2, #2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a72:	041a      	lsls	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001a98:	4b62      	ldr	r3, [pc, #392]	; (8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	0091      	lsls	r1, r2, #2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ac4:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	0091      	lsls	r1, r2, #2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ade:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	041a      	lsls	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	4413      	add	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	0091      	lsls	r1, r2, #2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b20:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	041a      	lsls	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b3c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	061a      	lsls	r2, r3, #24
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001b56:	4413      	add	r3, r2
 8001b58:	009a      	lsls	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	441a      	add	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	441a      	add	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	441a      	add	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	441a      	add	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	441a      	add	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	441a      	add	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	441a      	add	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d915      	bls.n	8001c4c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001c20:	e006      	b.n	8001c30 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001c22:	bf00      	nop
 8001c24:	ffff0003 	.word	0xffff0003
 8001c28:	10002b00 	.word	0x10002b00
 8001c2c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e010      	b.n	8001c6e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e005      	b.n	8001c60 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3f3      	bcc.n	8001c54 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c8a:	4b86      	ldr	r3, [pc, #536]	; (8001ea4 <HAL_GPIO_Init+0x228>)
 8001c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c8e:	e18c      	b.n	8001faa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 817e 	beq.w	8001fa4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d005      	beq.n	8001cc0 <HAL_GPIO_Init+0x44>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d130      	bne.n	8001d22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f003 0201 	and.w	r2, r3, #1
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d017      	beq.n	8001d5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d123      	bne.n	8001db2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	69b9      	ldr	r1, [r7, #24]
 8001dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0203 	and.w	r2, r3, #3
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80d8 	beq.w	8001fa4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_GPIO_Init+0x22c>)
 8001df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_GPIO_Init+0x22c>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_GPIO_Init+0x22c>)
 8001e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_GPIO_Init+0x230>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_GPIO_Init+0x234>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d04a      	beq.n	8001ed4 <HAL_GPIO_Init+0x258>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_GPIO_Init+0x238>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d02b      	beq.n	8001e9e <HAL_GPIO_Init+0x222>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <HAL_GPIO_Init+0x23c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d025      	beq.n	8001e9a <HAL_GPIO_Init+0x21e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_GPIO_Init+0x240>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01f      	beq.n	8001e96 <HAL_GPIO_Init+0x21a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_GPIO_Init+0x244>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x216>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_GPIO_Init+0x248>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x212>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_GPIO_Init+0x24c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x20e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_GPIO_Init+0x250>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x20a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_GPIO_Init+0x254>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x206>
 8001e7e:	2309      	movs	r3, #9
 8001e80:	e029      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e82:	230a      	movs	r3, #10
 8001e84:	e027      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e025      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	e023      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e8e:	2305      	movs	r3, #5
 8001e90:	e021      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e01f      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e01d      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e01b      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e019      	b.n	8001ed6 <HAL_GPIO_Init+0x25a>
 8001ea2:	bf00      	nop
 8001ea4:	58000080 	.word	0x58000080
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58000400 	.word	0x58000400
 8001eb0:	58020000 	.word	0x58020000
 8001eb4:	58020400 	.word	0x58020400
 8001eb8:	58020800 	.word	0x58020800
 8001ebc:	58020c00 	.word	0x58020c00
 8001ec0:	58021000 	.word	0x58021000
 8001ec4:	58021400 	.word	0x58021400
 8001ec8:	58021800 	.word	0x58021800
 8001ecc:	58021c00 	.word	0x58021c00
 8001ed0:	58022400 	.word	0x58022400
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	f002 0203 	and.w	r2, r2, #3
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4093      	lsls	r3, r2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee6:	4938      	ldr	r1, [pc, #224]	; (8001fc8 <HAL_GPIO_Init+0x34c>)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f ae6b 	bne.w	8001c90 <HAL_GPIO_Init+0x14>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	3724      	adds	r7, #36	; 0x24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	58000400 	.word	0x58000400

08001fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fdc2 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2224      	movs	r2, #36	; 0x24
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800201c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800202c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	e006      	b.n	8002054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d104      	bne.n	8002066 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002064:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_I2C_Init+0x11c>)
 8002072:	430b      	orrs	r3, r1
 8002074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69d9      	ldr	r1, [r3, #28]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	02008000 	.word	0x02008000

080020ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d138      	bne.n	8002174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800210c:	2302      	movs	r3, #2
 800210e:	e032      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800213e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	d139      	bne.n	800220c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e033      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2224      	movs	r2, #36	; 0x24
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	b08f      	sub	sp, #60	; 0x3c
 800221e:	af0a      	add	r7, sp, #40	; 0x28
 8002220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e116      	b.n	800245a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f00a fc32 	bl	800cab0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fac1 	bl	80067f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	687e      	ldr	r6, [r7, #4]
 8002278:	466d      	mov	r5, sp
 800227a:	f106 0410 	add.w	r4, r6, #16
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228a:	e885 0003 	stmia.w	r5, {r0, r1}
 800228e:	1d33      	adds	r3, r6, #4
 8002290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f004 f98c 	bl	80065b0 <USB_CoreInit>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0d7      	b.n	800245a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 faaf 	bl	8006814 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e04a      	b.n	8002352 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	333d      	adds	r3, #61	; 0x3d
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	333c      	adds	r3, #60	; 0x3c
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	b298      	uxth	r0, r3
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3356      	adds	r3, #86	; 0x56
 80022f8:	4602      	mov	r2, r0
 80022fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3340      	adds	r3, #64	; 0x40
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3344      	adds	r3, #68	; 0x44
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3348      	adds	r3, #72	; 0x48
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334c      	adds	r3, #76	; 0x4c
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	3301      	adds	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3af      	bcc.n	80022bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e044      	b.n	80023ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3301      	adds	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3b5      	bcc.n	8002362 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	687e      	ldr	r6, [r7, #4]
 80023fe:	466d      	mov	r5, sp
 8002400:	f106 0410 	add.w	r4, r6, #16
 8002404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002410:	e885 0003 	stmia.w	r5, {r0, r1}
 8002414:	1d33      	adds	r3, r6, #4
 8002416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	f004 fa47 	bl	80068ac <USB_DevInit>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e014      	b.n	800245a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2b01      	cmp	r3, #1
 8002446:	d102      	bne.n	800244e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f001 f96f 	bl	800372c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f005 fa89 	bl	800796a <USB_DevDisconnect>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002462 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_Start+0x1c>
 800247a:	2302      	movs	r3, #2
 800247c:	e022      	b.n	80024c4 <HAL_PCD_Start+0x62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 f990 	bl	80067d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 fa37 	bl	8007928 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b08d      	sub	sp, #52	; 0x34
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 faf5 	bl	8007ad2 <USB_GetMode>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 84b7 	bne.w	8002e5e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f005 fa59 	bl	80079ac <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 84ad 	beq.w	8002e5c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f005 fa46 	bl	80079ac <USB_ReadInterrupts>
 8002520:	4603      	mov	r3, r0
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f002 0202 	and.w	r2, r2, #2
 8002538:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fa34 	bl	80079ac <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b10      	cmp	r3, #16
 800254c:	d161      	bne.n	8002612 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0210 	bic.w	r2, r2, #16
 800255c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 020f 	and.w	r2, r3, #15
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	3304      	adds	r3, #4
 800257c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	0c5b      	lsrs	r3, r3, #17
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	2b02      	cmp	r3, #2
 8002588:	d124      	bne.n	80025d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d035      	beq.n	8002602 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	6a38      	ldr	r0, [r7, #32]
 80025aa:	f005 f86b 	bl	8007684 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ba:	441a      	add	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025cc:	441a      	add	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	e016      	b.n	8002602 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	0c5b      	lsrs	r3, r3, #17
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d110      	bne.n	8002602 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025e6:	2208      	movs	r2, #8
 80025e8:	4619      	mov	r1, r3
 80025ea:	6a38      	ldr	r0, [r7, #32]
 80025ec:	f005 f84a 	bl	8007684 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fc:	441a      	add	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0210 	orr.w	r2, r2, #16
 8002610:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f005 f9c8 	bl	80079ac <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002622:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002626:	f040 80a7 	bne.w	8002778 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f005 f9cd 	bl	80079d2 <USB_ReadDevAllOutEpInterrupt>
 8002638:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800263a:	e099      	b.n	8002770 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 808e 	beq.w	8002764 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f005 f9f1 	bl	8007a3a <USB_ReadDevOutEPInterrupt>
 8002658:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	2301      	movs	r3, #1
 8002674:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fed1 	bl	8003420 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002694:	461a      	mov	r2, r3
 8002696:	2308      	movs	r3, #8
 8002698:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800269a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 ffa7 	bl	80035f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b8:	461a      	mov	r2, r3
 80026ba:	2310      	movs	r3, #16
 80026bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d030      	beq.n	800272a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d109      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	78db      	ldrb	r3, [r3, #3]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d108      	bne.n	8002718 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f00a fac4 	bl	800cca0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	461a      	mov	r2, r3
 8002726:	2302      	movs	r3, #2
 8002728:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002740:	461a      	mov	r2, r3
 8002742:	2320      	movs	r3, #32
 8002744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002762:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3301      	adds	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	f47f af62 	bne.w	800263c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f005 f915 	bl	80079ac <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002788:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800278c:	f040 80db 	bne.w	8002946 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f005 f936 	bl	8007a06 <USB_ReadDevAllInEpInterrupt>
 800279a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027a0:	e0cd      	b.n	800293e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80c2 	beq.w	8002932 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f005 f95c 	bl	8007a76 <USB_ReadDevInEPInterrupt>
 80027be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d057      	beq.n	800287a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	2201      	movs	r2, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69f9      	ldr	r1, [r7, #28]
 80027e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027ea:	4013      	ands	r3, r2
 80027ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fa:	461a      	mov	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d132      	bne.n	800286e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3348      	adds	r3, #72	; 0x48
 8002818:	6819      	ldr	r1, [r3, #0]
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	3344      	adds	r3, #68	; 0x44
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4419      	add	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4403      	add	r3, r0
 800283c:	3348      	adds	r3, #72	; 0x48
 800283e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d113      	bne.n	800286e <HAL_PCD_IRQHandler+0x3a2>
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	334c      	adds	r3, #76	; 0x4c
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002866:	461a      	mov	r2, r3
 8002868:	2101      	movs	r1, #1
 800286a:	f005 f965 	bl	8007b38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f00a f98e 	bl	800cb96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002890:	461a      	mov	r2, r3
 8002892:	2308      	movs	r3, #8
 8002894:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ac:	461a      	mov	r2, r3
 80028ae:	2310      	movs	r3, #16
 80028b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c8:	461a      	mov	r2, r3
 80028ca:	2340      	movs	r3, #64	; 0x40
 80028cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d023      	beq.n	8002920 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028da:	6a38      	ldr	r0, [r7, #32]
 80028dc:	f004 f944 	bl	8006b68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	3338      	adds	r3, #56	; 0x38
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2200      	movs	r2, #0
 8002900:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f00a f9db 	bl	800ccc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291a:	461a      	mov	r2, r3
 800291c:	2302      	movs	r3, #2
 800291e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800292a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fcea 	bl	8003306 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	3301      	adds	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	f47f af2e 	bne.w	80027a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f005 f82e 	bl	80079ac <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800295a:	d122      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002976:	2b01      	cmp	r3, #1
 8002978:	d108      	bne.n	800298c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002982:	2100      	movs	r1, #0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fef5 	bl	8003774 <HAL_PCDEx_LPM_Callback>
 800298a:	e002      	b.n	8002992 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f00a f979 	bl	800cc84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 f800 	bl	80079ac <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b6:	d112      	bne.n	80029de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f00a f935 	bl	800cc38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 ffe2 	bl	80079ac <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f2:	d121      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002a02:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d111      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fea2 	bl	8003774 <HAL_PCDEx_LPM_Callback>
 8002a30:	e002      	b.n	8002a38 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f00a f900 	bl	800cc38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f004 ffb5 	bl	80079ac <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4c:	f040 80b7 	bne.w	8002bbe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2110      	movs	r1, #16
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f004 f87c 	bl	8006b68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a74:	e046      	b.n	8002b04 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a82:	461a      	mov	r2, r3
 8002a84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9a:	0151      	lsls	r1, r2, #5
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002aa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002abc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ace:	0151      	lsls	r1, r2, #5
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002adc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aee:	0151      	lsls	r1, r2, #5
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	440a      	add	r2, r1
 8002af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002afc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	3301      	adds	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3b3      	bcc.n	8002a76 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3a:	f043 030b 	orr.w	r3, r3, #11
 8002b3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b50:	f043 030b 	orr.w	r3, r3, #11
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	e015      	b.n	8002b84 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b66:	4619      	mov	r1, r3
 8002b68:	f242 032b 	movw	r3, #8235	; 0x202b
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7e:	f043 030b 	orr.w	r3, r3, #11
 8002b82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f004 ffc5 	bl	8007b38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fef2 	bl	80079ac <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd2:	d124      	bne.n	8002c1e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 ff89 	bl	8007af0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 f83d 	bl	8006c62 <USB_GetDevSpeed>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681c      	ldr	r4, [r3, #0]
 8002bf4:	f001 fd1e 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4620      	mov	r0, r4
 8002c04:	f003 fd42 	bl	800668c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f009 ffec 	bl	800cbe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fec2 	bl	80079ac <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d10a      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f009 ffc9 	bl	800cbca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f002 0208 	and.w	r2, r2, #8
 8002c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 fead 	bl	80079ac <USB_ReadInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d122      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c68:	2301      	movs	r3, #1
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	e014      	b.n	8002c98 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fb09 	bl	80032a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	3301      	adds	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3e5      	bcc.n	8002c6e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 fe80 	bl	80079ac <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb6:	d13b      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbc:	e02b      	b.n	8002d16 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3340      	adds	r3, #64	; 0x40
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d115      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da12      	bge.n	8002d10 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	333f      	adds	r3, #63	; 0x3f
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 faca 	bl	80032a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	3301      	adds	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d3ce      	bcc.n	8002cbe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 fe39 	bl	80079ac <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d44:	d155      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d46:	2301      	movs	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	e045      	b.n	8002dd8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d12e      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da2b      	bge.n	8002dd2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d86:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d121      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dce:	6053      	str	r3, [r2, #4]
            break;
 8002dd0:	e007      	b.n	8002de2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d3b4      	bcc.n	8002d4c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 fdd8 	bl	80079ac <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e06:	d10a      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f009 ff6d 	bl	800cce8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 fdc2 	bl	80079ac <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d115      	bne.n	8002e5e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f009 ff5d 	bl	800cd04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	e000      	b.n	8002e5e <HAL_PCD_IRQHandler+0x992>
      return;
 8002e5c:	bf00      	nop
    }
  }
}
 8002e5e:	3734      	adds	r7, #52	; 0x34
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}

08002e64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_PCD_SetAddress+0x1a>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e013      	b.n	8002ea6 <HAL_PCD_SetAddress+0x42>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f004 fd20 	bl	80078dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	4608      	mov	r0, r1
 8002eb8:	4611      	mov	r1, r2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	70fb      	strb	r3, [r7, #3]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	803b      	strh	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	da0f      	bge.n	8002ef4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	3338      	adds	r3, #56	; 0x38
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3304      	adds	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	705a      	strb	r2, [r3, #1]
 8002ef2:	e00f      	b.n	8002f14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f20:	883a      	ldrh	r2, [r7, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	78ba      	ldrb	r2, [r7, #2]
 8002f2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f3e:	78bb      	ldrb	r3, [r7, #2]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d102      	bne.n	8002f4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_PCD_EP_Open+0xaa>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e00e      	b.n	8002f76 <HAL_PCD_EP_Open+0xc8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fea0 	bl	8006cac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f74:	7afb      	ldrb	r3, [r7, #11]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da0f      	bge.n	8002fb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	3338      	adds	r3, #56	; 0x38
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	705a      	strb	r2, [r3, #1]
 8002fb0:	e00f      	b.n	8002fd2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_PCD_EP_Close+0x6e>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e00e      	b.n	800300a <HAL_PCD_EP_Close+0x8c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fede 	bl	8006dbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	460b      	mov	r3, r1
 8003020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	3304      	adds	r3, #4
 800303a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2200      	movs	r2, #0
 800304c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003054:	7afb      	ldrb	r3, [r7, #11]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	b2da      	uxtb	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	6979      	ldr	r1, [r7, #20]
 800307c:	f003 ff7a 	bl	8006f74 <USB_EPStartXfer>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80030ac:	681b      	ldr	r3, [r3, #0]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	460b      	mov	r3, r1
 80030c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	3338      	adds	r3, #56	; 0x38
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	3304      	adds	r3, #4
 80030e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2201      	movs	r2, #1
 80030f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	b2da      	uxtb	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d102      	bne.n	8003114 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	6979      	ldr	r1, [r7, #20]
 8003122:	f003 ff27 	bl	8006f74 <USB_EPStartXfer>

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d901      	bls.n	800314e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e050      	b.n	80031f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800314e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003152:	2b00      	cmp	r3, #0
 8003154:	da0f      	bge.n	8003176 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	3338      	adds	r3, #56	; 0x38
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	705a      	strb	r2, [r3, #1]
 8003174:	e00d      	b.n	8003192 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	3304      	adds	r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_PCD_EP_SetStall+0x82>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e01e      	b.n	80031f0 <HAL_PCD_EP_SetStall+0xc0>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fab7 	bl	8007734 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	b2d9      	uxtb	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031e0:	461a      	mov	r2, r3
 80031e2:	f004 fca9 	bl	8007b38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d901      	bls.n	8003216 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e042      	b.n	800329c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321a:	2b00      	cmp	r3, #0
 800321c:	da0f      	bge.n	800323e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	3338      	adds	r3, #56	; 0x38
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	3304      	adds	r3, #4
 8003234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	705a      	strb	r2, [r3, #1]
 800323c:	e00f      	b.n	800325e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_PCD_EP_ClrStall+0x86>
 800327a:	2302      	movs	r3, #2
 800327c:	e00e      	b.n	800329c <HAL_PCD_EP_ClrStall+0xa4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68f9      	ldr	r1, [r7, #12]
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fabf 	bl	8007810 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da0c      	bge.n	80032d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	3338      	adds	r3, #56	; 0x38
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	3304      	adds	r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e00c      	b.n	80032ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	3304      	adds	r3, #4
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68f9      	ldr	r1, [r7, #12]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 f8de 	bl	80074b4 <USB_EPStopXfer>
 80032f8:	4603      	mov	r3, r0
 80032fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032fc:	7afb      	ldrb	r3, [r7, #11]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	; 0x28
 800330a:	af02      	add	r7, sp, #8
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3338      	adds	r3, #56	; 0x38
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d901      	bls.n	800333e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06c      	b.n	8003418 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	429a      	cmp	r2, r3
 8003352:	d902      	bls.n	800335a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3303      	adds	r3, #3
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003362:	e02b      	b.n	80033bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	429a      	cmp	r2, r3
 8003378:	d902      	bls.n	8003380 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	3303      	adds	r3, #3
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68d9      	ldr	r1, [r3, #12]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003398:	b2db      	uxtb	r3, r3
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4603      	mov	r3, r0
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f004 f932 	bl	8007608 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	441a      	add	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d809      	bhi.n	80033e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033da:	429a      	cmp	r2, r3
 80033dc:	d203      	bcs.n	80033e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1be      	bne.n	8003364 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d811      	bhi.n	8003416 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	2201      	movs	r2, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	43db      	mvns	r3, r3
 800340c:	6939      	ldr	r1, [r7, #16]
 800340e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003412:	4013      	ands	r3, r2
 8003414:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	333c      	adds	r3, #60	; 0x3c
 8003438:	3304      	adds	r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d17b      	bne.n	800354e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4a61      	ldr	r2, [pc, #388]	; (80035e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	f240 80b9 	bls.w	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80b3 	beq.w	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003482:	461a      	mov	r2, r3
 8003484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003488:	6093      	str	r3, [r2, #8]
 800348a:	e0a7      	b.n	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	2320      	movs	r3, #32
 80034a6:	6093      	str	r3, [r2, #8]
 80034a8:	e098      	b.n	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 8093 	bne.w	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4a4b      	ldr	r2, [pc, #300]	; (80035e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d90f      	bls.n	80034de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	461a      	mov	r2, r3
 80034d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034da:	6093      	str	r3, [r2, #8]
 80034dc:	e07e      	b.n	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	0159      	lsls	r1, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	440b      	add	r3, r1
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d114      	bne.n	8003540 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003528:	461a      	mov	r2, r3
 800352a:	2101      	movs	r1, #1
 800352c:	f004 fb04 	bl	8007b38 <USB_EP0_OutStart>
 8003530:	e006      	b.n	8003540 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f009 fb0a 	bl	800cb60 <HAL_PCD_DataOutStageCallback>
 800354c:	e046      	b.n	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d124      	bne.n	80035a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	461a      	mov	r2, r3
 800356e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003572:	6093      	str	r3, [r2, #8]
 8003574:	e032      	b.n	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	461a      	mov	r2, r3
 800358e:	2320      	movs	r3, #32
 8003590:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f009 fae1 	bl	800cb60 <HAL_PCD_DataOutStageCallback>
 800359e:	e01d      	b.n	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d114      	bne.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035c8:	461a      	mov	r2, r3
 80035ca:	2100      	movs	r1, #0
 80035cc:	f004 fab4 	bl	8007b38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f009 fac2 	bl	800cb60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	4f54300a 	.word	0x4f54300a
 80035ec:	4f54310a 	.word	0x4f54310a

080035f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	333c      	adds	r3, #60	; 0x3c
 8003608:	3304      	adds	r3, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <PCD_EP_OutSetupPacket_int+0x88>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d90e      	bls.n	8003644 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	461a      	mov	r2, r3
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f009 fa79 	bl	800cb3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <PCD_EP_OutSetupPacket_int+0x88>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d90c      	bls.n	800366c <PCD_EP_OutSetupPacket_int+0x7c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d108      	bne.n	800366c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003664:	461a      	mov	r2, r3
 8003666:	2101      	movs	r1, #1
 8003668:	f004 fa66 	bl	8007b38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	4f54300a 	.word	0x4f54300a

0800367c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
 8003688:	4613      	mov	r3, r2
 800368a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800369a:	883b      	ldrh	r3, [r7, #0]
 800369c:	0419      	lsls	r1, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
 80036a8:	e028      	b.n	80036fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e00d      	b.n	80036da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	3340      	adds	r3, #64	; 0x40
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4413      	add	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	3301      	adds	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	3b01      	subs	r3, #1
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3ec      	bcc.n	80036be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036e4:	883b      	ldrh	r3, [r7, #0]
 80036e6:	0418      	lsls	r0, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4302      	orrs	r2, r0
 80036f4:	3340      	adds	r3, #64	; 0x40
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_PCDEx_ActivateLPM+0x44>)
 800375c:	4313      	orrs	r3, r2
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	10000003 	.word	0x10000003

08003774 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_PWREx_ConfigSupply+0x70>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d00a      	beq.n	80037b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_PWREx_ConfigSupply+0x70>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e01f      	b.n	80037f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e01d      	b.n	80037f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_PWREx_ConfigSupply+0x70>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 0207 	bic.w	r2, r3, #7
 80037be:	490f      	ldr	r1, [pc, #60]	; (80037fc <HAL_PWREx_ConfigSupply+0x70>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037c6:	f7fd fd4b 	bl	8001260 <HAL_GetTick>
 80037ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037cc:	e009      	b.n	80037e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ce:	f7fd fd47 	bl	8001260 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037dc:	d901      	bls.n	80037e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e007      	b.n	80037f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_PWREx_ConfigSupply+0x70>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ee:	d1ee      	bne.n	80037ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	58024800 	.word	0x58024800

08003800 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800380a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	58024800 	.word	0x58024800

08003820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e3c8      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8087 	beq.w	800394e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003840:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800384a:	4b86      	ldr	r3, [pc, #536]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	2b10      	cmp	r3, #16
 8003854:	d007      	beq.n	8003866 <HAL_RCC_OscConfig+0x46>
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	2b18      	cmp	r3, #24
 800385a:	d110      	bne.n	800387e <HAL_RCC_OscConfig+0x5e>
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b7f      	ldr	r3, [pc, #508]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d06c      	beq.n	800394c <HAL_RCC_OscConfig+0x12c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d168      	bne.n	800394c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e3a2      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x76>
 8003888:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a75      	ldr	r2, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e02e      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x98>
 800389e:	4b71      	ldr	r3, [pc, #452]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a70      	ldr	r2, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b6e      	ldr	r3, [pc, #440]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6d      	ldr	r2, [pc, #436]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0xbc>
 80038c2:	4b68      	ldr	r3, [pc, #416]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a67      	ldr	r2, [pc, #412]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b65      	ldr	r3, [pc, #404]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a64      	ldr	r2, [pc, #400]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xd4>
 80038dc:	4b61      	ldr	r3, [pc, #388]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a60      	ldr	r2, [pc, #384]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b5e      	ldr	r3, [pc, #376]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a5d      	ldr	r2, [pc, #372]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fcb0 	bl	8001260 <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fd fcac 	bl	8001260 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e356      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003916:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xe4>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd fc9c 	bl	8001260 <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fd fc98 	bl	8001260 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e342      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800393e:	4b49      	ldr	r3, [pc, #292]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x10c>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 808c 	beq.w	8003a74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395c:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003964:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_RCC_OscConfig+0x162>
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	2b18      	cmp	r3, #24
 8003976:	d137      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1c8>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d132      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x17a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e314      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0219 	bic.w	r2, r3, #25
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	492f      	ldr	r1, [pc, #188]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd fc58 	bl	8001260 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b4:	f7fd fc54 	bl	8001260 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e2fe      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	4920      	ldr	r1, [pc, #128]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e6:	e045      	b.n	8003a74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d026      	beq.n	8003a3e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039f0:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 0219 	bic.w	r2, r3, #25
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4919      	ldr	r1, [pc, #100]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7fd fc2d 	bl	8001260 <HAL_GetTick>
 8003a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fd fc29 	bl	8001260 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e2d3      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	490b      	ldr	r1, [pc, #44]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	e01a      	b.n	8003a74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fc09 	bl	8001260 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fd fc05 	bl	8001260 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d903      	bls.n	8003a68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e2af      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
 8003a64:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a68:	4b96      	ldr	r3, [pc, #600]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d06a      	beq.n	8003b56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a80:	4b90      	ldr	r3, [pc, #576]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a8a:	4b8e      	ldr	r3, [pc, #568]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d007      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x286>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b18      	cmp	r3, #24
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x2b4>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aa6:	4b87      	ldr	r3, [pc, #540]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x29e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e282      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003abe:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	497d      	ldr	r1, [pc, #500]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad2:	e040      	b.n	8003b56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d023      	beq.n	8003b24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003adc:	4b79      	ldr	r3, [pc, #484]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a78      	ldr	r2, [pc, #480]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fbba 	bl	8001260 <HAL_GetTick>
 8003aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003af0:	f7fd fbb6 	bl	8001260 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e260      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b02:	4b70      	ldr	r3, [pc, #448]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	4969      	ldr	r1, [pc, #420]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60cb      	str	r3, [r1, #12]
 8003b22:	e018      	b.n	8003b56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b24:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a66      	ldr	r2, [pc, #408]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fb96 	bl	8001260 <HAL_GetTick>
 8003b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b38:	f7fd fb92 	bl	8001260 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e23c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b4a:	4b5e      	ldr	r3, [pc, #376]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d036      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d019      	beq.n	8003b9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6a:	4b56      	ldr	r3, [pc, #344]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6e:	4a55      	ldr	r2, [pc, #340]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fd fb73 	bl	8001260 <HAL_GetTick>
 8003b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7e:	f7fd fb6f 	bl	8001260 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e219      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x35e>
 8003b9c:	e018      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9e:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fd fb59 	bl	8001260 <HAL_GetTick>
 8003bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fd fb55 	bl	8001260 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1ff      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bc4:	4b3f      	ldr	r3, [pc, #252]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d036      	beq.n	8003c4a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d019      	beq.n	8003c18 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003be4:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a36      	ldr	r2, [pc, #216]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bf0:	f7fd fb36 	bl	8001260 <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf8:	f7fd fb32 	bl	8001260 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1dc      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x3d8>
 8003c16:	e018      	b.n	8003c4a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c24:	f7fd fb1c 	bl	8001260 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c2c:	f7fd fb18 	bl	8001260 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e1c2      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c3e:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8086 	beq.w	8003d64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x4a8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_RCC_OscConfig+0x4a8>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c64:	f7fd fafc 	bl	8001260 <HAL_GetTick>
 8003c68:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fd faf8 	bl	8001260 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1a2      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_OscConfig+0x4a8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x480>
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	e032      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4ac>
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a05      	ldr	r2, [pc, #20]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a02      	ldr	r2, [pc, #8]	; (8003cc4 <HAL_RCC_OscConfig+0x4a4>)
 8003cba:	f023 0304 	bic.w	r3, r3, #4
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc0:	e021      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e6>
 8003cc2:	bf00      	nop
 8003cc4:	58024400 	.word	0x58024400
 8003cc8:	58024800 	.word	0x58024800
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d10c      	bne.n	8003cee <HAL_RCC_OscConfig+0x4ce>
 8003cd4:	4b83      	ldr	r3, [pc, #524]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	4a82      	ldr	r2, [pc, #520]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce0:	4b80      	ldr	r3, [pc, #512]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a7f      	ldr	r2, [pc, #508]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	e00b      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e6>
 8003cee:	4b7d      	ldr	r3, [pc, #500]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	4a7c      	ldr	r2, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfa:	4b7a      	ldr	r3, [pc, #488]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a79      	ldr	r2, [pc, #484]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003d00:	f023 0304 	bic.w	r3, r3, #4
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d015      	beq.n	8003d3a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd faa7 	bl	8001260 <HAL_GetTick>
 8003d12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd faa3 	bl	8001260 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e14b      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d2c:	4b6d      	ldr	r3, [pc, #436]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ee      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4f6>
 8003d38:	e014      	b.n	8003d64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fa91 	bl	8001260 <HAL_GetTick>
 8003d3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd fa8d 	bl	8001260 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e135      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d58:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 812a 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	f000 80ba 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	f040 8095 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b57      	ldr	r3, [pc, #348]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a56      	ldr	r2, [pc, #344]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fd fa65 	bl	8001260 <HAL_GetTick>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fd fa61 	bl	8001260 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e10b      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dac:	4b4d      	ldr	r3, [pc, #308]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db8:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dbc:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_RCC_OscConfig+0x6c8>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	4945      	ldr	r1, [pc, #276]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	628b      	str	r3, [r1, #40]	; 0x28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	3b01      	subs	r3, #1
 8003de2:	025b      	lsls	r3, r3, #9
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	3b01      	subs	r3, #1
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e02:	4938      	ldr	r1, [pc, #224]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	4a35      	ldr	r2, [pc, #212]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e14:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e18:	4b34      	ldr	r3, [pc, #208]	; (8003eec <HAL_RCC_OscConfig+0x6cc>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e20:	00d2      	lsls	r2, r2, #3
 8003e22:	4930      	ldr	r1, [pc, #192]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e28:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	f023 020c 	bic.w	r2, r3, #12
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	492b      	ldr	r1, [pc, #172]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	f023 0202 	bic.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4927      	ldr	r1, [pc, #156]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e58:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e64:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd f9ea 	bl	8001260 <HAL_GetTick>
 8003e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd f9e6 	bl	8001260 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e090      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x670>
 8003eae:	e088      	b.n	8003fc2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd f9d0 	bl	8001260 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fd f9cc 	bl	8001260 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e076      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed6:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_OscConfig+0x6c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6a4>
 8003ee2:	e06e      	b.n	8003fc2 <HAL_RCC_OscConfig+0x7a2>
 8003ee4:	58024400 	.word	0x58024400
 8003ee8:	fffffc0c 	.word	0xfffffc0c
 8003eec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ef6:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d031      	beq.n	8003f68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f003 0203 	and.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d12a      	bne.n	8003f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d122      	bne.n	8003f68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d11a      	bne.n	8003f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	0a5b      	lsrs	r3, r3, #9
 8003f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d111      	bne.n	8003f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	0c1b      	lsrs	r3, r3, #16
 8003f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d108      	bne.n	8003f68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	0e1b      	lsrs	r3, r3, #24
 8003f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e02b      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f6c:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	08db      	lsrs	r3, r3, #3
 8003f72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d01f      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f8e:	f7fd f967 	bl	8001260 <HAL_GetTick>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f94:	bf00      	nop
 8003f96:	f7fd f963 	bl	8001260 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d0f9      	beq.n	8003f96 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <HAL_RCC_OscConfig+0x7b0>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fae:	00d2      	lsls	r2, r2, #3
 8003fb0:	4906      	ldr	r1, [pc, #24]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_RCC_OscConfig+0x7ac>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3730      	adds	r7, #48	; 0x30
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	ffff0007 	.word	0xffff0007

08003fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e19c      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b8a      	ldr	r3, [pc, #552]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d910      	bls.n	8004018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b87      	ldr	r3, [pc, #540]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 020f 	bic.w	r2, r3, #15
 8003ffe:	4985      	ldr	r1, [pc, #532]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b83      	ldr	r3, [pc, #524]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e184      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004030:	429a      	cmp	r2, r3
 8004032:	d908      	bls.n	8004046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004034:	4b78      	ldr	r3, [pc, #480]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4975      	ldr	r1, [pc, #468]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004042:	4313      	orrs	r3, r2
 8004044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	4b70      	ldr	r3, [pc, #448]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800405e:	429a      	cmp	r2, r3
 8004060:	d908      	bls.n	8004074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004062:	4b6d      	ldr	r3, [pc, #436]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	496a      	ldr	r1, [pc, #424]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004070:	4313      	orrs	r3, r2
 8004072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	4b64      	ldr	r3, [pc, #400]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800408c:	429a      	cmp	r2, r3
 800408e:	d908      	bls.n	80040a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004090:	4b61      	ldr	r3, [pc, #388]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	495e      	ldr	r1, [pc, #376]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d908      	bls.n	80040d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040be:	4b56      	ldr	r3, [pc, #344]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4953      	ldr	r1, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d010      	beq.n	80040fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	4b4d      	ldr	r3, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d908      	bls.n	80040fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f023 020f 	bic.w	r2, r3, #15
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4947      	ldr	r1, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d055      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800410a:	4b43      	ldr	r3, [pc, #268]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4940      	ldr	r1, [pc, #256]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004118:	4313      	orrs	r3, r2
 800411a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d107      	bne.n	8004134 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004124:	4b3c      	ldr	r3, [pc, #240]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d121      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0f6      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d107      	bne.n	800414c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800413c:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d115      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0ea      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004154:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0de      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0d6      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004174:	4b28      	ldr	r3, [pc, #160]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f023 0207 	bic.w	r2, r3, #7
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4925      	ldr	r1, [pc, #148]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 8004182:	4313      	orrs	r3, r2
 8004184:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004186:	f7fd f86b 	bl	8001260 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418e:	f7fd f867 	bl	8001260 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0be      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a4:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d1eb      	bne.n	800418e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d010      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d208      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x244>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d214      	bcs.n	800421c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	4906      	ldr	r1, [pc, #24]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_RCC_ClockConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e086      	b.n	8004322 <HAL_RCC_ClockConfig+0x34e>
 8004214:	52002000 	.word	0x52002000
 8004218:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	4b3f      	ldr	r3, [pc, #252]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004234:	429a      	cmp	r2, r3
 8004236:	d208      	bcs.n	800424a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004238:	4b3c      	ldr	r3, [pc, #240]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	4939      	ldr	r1, [pc, #228]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004246:	4313      	orrs	r3, r2
 8004248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d010      	beq.n	8004278 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004262:	429a      	cmp	r2, r3
 8004264:	d208      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004266:	4b31      	ldr	r3, [pc, #196]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	492e      	ldr	r1, [pc, #184]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004274:	4313      	orrs	r3, r2
 8004276:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004290:	429a      	cmp	r2, r3
 8004292:	d208      	bcs.n	80042a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004294:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	4922      	ldr	r1, [pc, #136]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d010      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042be:	429a      	cmp	r2, r3
 80042c0:	d208      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042c2:	4b1a      	ldr	r3, [pc, #104]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4917      	ldr	r1, [pc, #92]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042d4:	f000 f834 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b14      	ldr	r3, [pc, #80]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	4912      	ldr	r1, [pc, #72]	; (8004330 <HAL_RCC_ClockConfig+0x35c>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
 80042f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <HAL_RCC_ClockConfig+0x358>)
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <HAL_RCC_ClockConfig+0x35c>)
 80042fc:	5cd3      	ldrb	r3, [r2, r3]
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
 8004308:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x360>)
 800430a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x364>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <HAL_RCC_ClockConfig+0x368>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc fe1a 	bl	8000f50 <HAL_InitTick>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	58024400 	.word	0x58024400
 8004330:	0800d3b8 	.word	0x0800d3b8
 8004334:	24000004 	.word	0x24000004
 8004338:	24000000 	.word	0x24000000
 800433c:	24000008 	.word	0x24000008

08004340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	; 0x24
 8004344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004346:	4bb3      	ldr	r3, [pc, #716]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434e:	2b18      	cmp	r3, #24
 8004350:	f200 8155 	bhi.w	80045fe <HAL_RCC_GetSysClockFreq+0x2be>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	080043c1 	.word	0x080043c1
 8004360:	080045ff 	.word	0x080045ff
 8004364:	080045ff 	.word	0x080045ff
 8004368:	080045ff 	.word	0x080045ff
 800436c:	080045ff 	.word	0x080045ff
 8004370:	080045ff 	.word	0x080045ff
 8004374:	080045ff 	.word	0x080045ff
 8004378:	080045ff 	.word	0x080045ff
 800437c:	080043e7 	.word	0x080043e7
 8004380:	080045ff 	.word	0x080045ff
 8004384:	080045ff 	.word	0x080045ff
 8004388:	080045ff 	.word	0x080045ff
 800438c:	080045ff 	.word	0x080045ff
 8004390:	080045ff 	.word	0x080045ff
 8004394:	080045ff 	.word	0x080045ff
 8004398:	080045ff 	.word	0x080045ff
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080045ff 	.word	0x080045ff
 80043a4:	080045ff 	.word	0x080045ff
 80043a8:	080045ff 	.word	0x080045ff
 80043ac:	080045ff 	.word	0x080045ff
 80043b0:	080045ff 	.word	0x080045ff
 80043b4:	080045ff 	.word	0x080045ff
 80043b8:	080045ff 	.word	0x080045ff
 80043bc:	080043f3 	.word	0x080043f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c0:	4b94      	ldr	r3, [pc, #592]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043cc:	4b91      	ldr	r3, [pc, #580]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	4a90      	ldr	r2, [pc, #576]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
 80043dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043de:	e111      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043e0:	4b8d      	ldr	r3, [pc, #564]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043e2:	61bb      	str	r3, [r7, #24]
      break;
 80043e4:	e10e      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043e6:	4b8d      	ldr	r3, [pc, #564]	; (800461c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043e8:	61bb      	str	r3, [r7, #24]
      break;
 80043ea:	e10b      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043ec:	4b8c      	ldr	r3, [pc, #560]	; (8004620 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043ee:	61bb      	str	r3, [r7, #24]
      break;
 80043f0:	e108      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043f2:	4b88      	ldr	r3, [pc, #544]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043fc:	4b85      	ldr	r3, [pc, #532]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004406:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004408:	4b82      	ldr	r3, [pc, #520]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004412:	4b80      	ldr	r3, [pc, #512]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	08db      	lsrs	r3, r3, #3
 8004418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80e1 	beq.w	80045f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b02      	cmp	r3, #2
 800443a:	f000 8083 	beq.w	8004544 <HAL_RCC_GetSysClockFreq+0x204>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b02      	cmp	r3, #2
 8004442:	f200 80a1 	bhi.w	8004588 <HAL_RCC_GetSysClockFreq+0x248>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x114>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d056      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004452:	e099      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004454:	4b6f      	ldr	r3, [pc, #444]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004460:	4b6c      	ldr	r3, [pc, #432]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	4a6b      	ldr	r2, [pc, #428]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448a:	4b62      	ldr	r3, [pc, #392]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449a:	ed97 6a02 	vldr	s12, [r7, #8]
 800449e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80044ba:	e087      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004628 <HAL_RCC_GetSysClockFreq+0x2e8>
 80044ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ce:	4b51      	ldr	r3, [pc, #324]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044de:	ed97 6a02 	vldr	s12, [r7, #8]
 80044e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044fe:	e065      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800462c <HAL_RCC_GetSysClockFreq+0x2ec>
 800450e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004512:	4b40      	ldr	r3, [pc, #256]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004522:	ed97 6a02 	vldr	s12, [r7, #8]
 8004526:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800452a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004542:	e043      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004630 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004556:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a02 	vldr	s12, [r7, #8]
 800456a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004586:	e021      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	eddf 6a26 	vldr	s13, [pc, #152]	; 800462c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459a:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	0a5b      	lsrs	r3, r3, #9
 80045d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d6:	3301      	adds	r3, #1
 80045d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	ee07 3a90 	vmov	s15, r3
 80045e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f0:	ee17 3a90 	vmov	r3, s15
 80045f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045f6:	e005      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]
      break;
 80045fc:	e002      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004600:	61bb      	str	r3, [r7, #24]
      break;
 8004602:	bf00      	nop
  }

  return sysclockfreq;
 8004604:	69bb      	ldr	r3, [r7, #24]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	58024400 	.word	0x58024400
 8004618:	03d09000 	.word	0x03d09000
 800461c:	003d0900 	.word	0x003d0900
 8004620:	017d7840 	.word	0x017d7840
 8004624:	46000000 	.word	0x46000000
 8004628:	4c742400 	.word	0x4c742400
 800462c:	4a742400 	.word	0x4a742400
 8004630:	4bbebc20 	.word	0x4bbebc20

08004634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800463a:	f7ff fe81 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 800463e:	4602      	mov	r2, r0
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_GetHCLKFreq+0x50>)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	490f      	ldr	r1, [pc, #60]	; (8004688 <HAL_RCC_GetHCLKFreq+0x54>)
 800464c:	5ccb      	ldrb	r3, [r1, r3]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	fa22 f303 	lsr.w	r3, r2, r3
 8004656:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCC_GetHCLKFreq+0x50>)
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RCC_GetHCLKFreq+0x54>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	fa22 f303 	lsr.w	r3, r2, r3
 800466e:	4a07      	ldr	r2, [pc, #28]	; (800468c <HAL_RCC_GetHCLKFreq+0x58>)
 8004670:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004672:	4a07      	ldr	r2, [pc, #28]	; (8004690 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_RCC_GetHCLKFreq+0x58>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	58024400 	.word	0x58024400
 8004688:	0800d3b8 	.word	0x0800d3b8
 800468c:	24000004 	.word	0x24000004
 8004690:	24000000 	.word	0x24000000

08004694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004698:	f7ff ffcc 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4904      	ldr	r1, [pc, #16]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	58024400 	.word	0x58024400
 80046bc:	0800d3b8 	.word	0x0800d3b8

080046c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	223f      	movs	r2, #63	; 0x3f
 80046ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <HAL_RCC_GetClockConfig+0x7c>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0207 	and.w	r2, r3, #7
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <HAL_RCC_GetClockConfig+0x7c>)
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_RCC_GetClockConfig+0x7c>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_RCC_GetClockConfig+0x7c>)
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <HAL_RCC_GetClockConfig+0x7c>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_GetClockConfig+0x7c>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <HAL_RCC_GetClockConfig+0x7c>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_GetClockConfig+0x80>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 020f 	and.w	r2, r3, #15
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	601a      	str	r2, [r3, #0]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	58024400 	.word	0x58024400
 8004740:	52002000 	.word	0x52002000

08004744 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004748:	b0c6      	sub	sp, #280	; 0x118
 800474a:	af00      	add	r7, sp, #0
 800474c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004756:	2300      	movs	r3, #0
 8004758:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800475c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004768:	2500      	movs	r5, #0
 800476a:	ea54 0305 	orrs.w	r3, r4, r5
 800476e:	d049      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800477a:	d02f      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800477c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004780:	d828      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004786:	d01a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800478c:	d822      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004796:	d007      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004798:	e01c      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479a:	4bab      	ldr	r3, [pc, #684]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4aaa      	ldr	r2, [pc, #680]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047a6:	e01a      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ac:	3308      	adds	r3, #8
 80047ae:	2102      	movs	r1, #2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f967 	bl	8005a84 <RCCEx_PLL2_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047bc:	e00f      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c2:	3328      	adds	r3, #40	; 0x28
 80047c4:	2102      	movs	r1, #2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 fa0e 	bl	8005be8 <RCCEx_PLL3_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047d2:	e004      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80047dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047e6:	4b98      	ldr	r3, [pc, #608]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80047ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f4:	4a94      	ldr	r2, [pc, #592]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047f6:	430b      	orrs	r3, r1
 80047f8:	6513      	str	r3, [r2, #80]	; 0x50
 80047fa:	e003      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004810:	f04f 0900 	mov.w	r9, #0
 8004814:	ea58 0309 	orrs.w	r3, r8, r9
 8004818:	d047      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800481a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800481e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004820:	2b04      	cmp	r3, #4
 8004822:	d82a      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004841 	.word	0x08004841
 8004830:	0800484f 	.word	0x0800484f
 8004834:	08004865 	.word	0x08004865
 8004838:	08004883 	.word	0x08004883
 800483c:	08004883 	.word	0x08004883
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a80      	ldr	r2, [pc, #512]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800484c:	e01a      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004852:	3308      	adds	r3, #8
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f914 	bl	8005a84 <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004862:	e00f      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004868:	3328      	adds	r3, #40	; 0x28
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f001 f9bb 	bl	8005be8 <RCCEx_PLL3_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004878:	e004      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800488c:	4b6e      	ldr	r3, [pc, #440]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	f023 0107 	bic.w	r1, r3, #7
 8004894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	4a6b      	ldr	r2, [pc, #428]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6513      	str	r3, [r2, #80]	; 0x50
 80048a0:	e003      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80048b6:	f04f 0b00 	mov.w	fp, #0
 80048ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80048be:	d05b      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80048c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048c8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80048cc:	d03b      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80048ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80048d2:	d834      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80048d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d8:	d037      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80048da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048de:	d82e      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80048e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048e4:	d033      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80048e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048ea:	d828      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80048ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f0:	d01a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f6:	d822      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80048fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004900:	d007      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004902:	e01c      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	4a4f      	ldr	r2, [pc, #316]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800490a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004910:	e01e      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004916:	3308      	adds	r3, #8
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f001 f8b2 	bl	8005a84 <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004926:	e013      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800492c:	3328      	adds	r3, #40	; 0x28
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f001 f959 	bl	8005be8 <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004944:	e004      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800494e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004958:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004968:	4a37      	ldr	r2, [pc, #220]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800496a:	430b      	orrs	r3, r1
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004974:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800498e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d05d      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800499c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049a0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049a4:	d03b      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80049a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049aa:	d834      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b0:	d037      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80049b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b6:	d82e      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049bc:	d033      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80049be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049c2:	d828      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c8:	d01a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80049ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ce:	d822      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80049d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d8:	d007      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80049da:	e01c      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049dc:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e8:	e01e      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ee:	3308      	adds	r3, #8
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f846 	bl	8005a84 <RCCEx_PLL2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049fe:	e013      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	3328      	adds	r3, #40	; 0x28
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f8ed 	bl	8005be8 <RCCEx_PLL3_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a14:	e008      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a1c:	e004      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e002      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a22:	bf00      	nop
 8004a24:	e000      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10d      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a40:	4a01      	ldr	r2, [pc, #4]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6593      	str	r3, [r2, #88]	; 0x58
 8004a46:	e005      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004a48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d03a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	2b30      	cmp	r3, #48	; 0x30
 8004a7c:	d01f      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004a7e:	2b30      	cmp	r3, #48	; 0x30
 8004a80:	d819      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d00c      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d815      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d019      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d111      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a92:	4baa      	ldr	r3, [pc, #680]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4aa9      	ldr	r2, [pc, #676]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a9e:	e011      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ffeb 	bl	8005a84 <RCCEx_PLL2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004acc:	4b9b      	ldr	r3, [pc, #620]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	4a98      	ldr	r2, [pc, #608]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ae6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004afa:	2300      	movs	r3, #0
 8004afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b04:	460b      	mov	r3, r1
 8004b06:	4313      	orrs	r3, r2
 8004b08:	d051      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d035      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1a:	d82e      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b20:	d031      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b26:	d828      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2c:	d01a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	d822      	bhi.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d007      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004b3e:	e01c      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b40:	4b7e      	ldr	r3, [pc, #504]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4a7d      	ldr	r2, [pc, #500]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b52:	3308      	adds	r3, #8
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 ff94 	bl	8005a84 <RCCEx_PLL2_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b62:	e011      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b68:	3328      	adds	r3, #40	; 0x28
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 f83b 	bl	8005be8 <RCCEx_PLL3_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b80:	e002      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9e:	4a67      	ldr	r2, [pc, #412]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004baa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bc4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	d053      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd8:	d033      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bde:	d82c      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004be4:	d02f      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004be6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bea:	d826      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf0:	d02b      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf6:	d820      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bfc:	d012      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c02:	d81a      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d022      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d115      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c12:	3308      	adds	r3, #8
 8004c14:	2101      	movs	r1, #1
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 ff34 	bl	8005a84 <RCCEx_PLL2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c22:	e015      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c28:	3328      	adds	r3, #40	; 0x28
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ffdb 	bl	8005be8 <RCCEx_PLL3_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c38:	e00a      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c40:	e006      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c58:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6513      	str	r3, [r2, #80]	; 0x50
 8004c6c:	e003      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c86:	2300      	movs	r3, #0
 8004c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c90:	460b      	mov	r3, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	d058      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca2:	d033      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca8:	d82c      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d02f      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb4:	d826      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cba:	d02b      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004cbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cc0:	d820      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cc6:	d012      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ccc:	d81a      	bhi.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d022      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd6:	d115      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cdc:	3308      	adds	r3, #8
 8004cde:	2101      	movs	r1, #1
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fecf 	bl	8005a84 <RCCEx_PLL2_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004cec:	e015      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf2:	3328      	adds	r3, #40	; 0x28
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 ff76 	bl	8005be8 <RCCEx_PLL3_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d02:	e00a      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d0a:	e006      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d0c:	bf00      	nop
 8004d0e:	e004      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10e      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d32:	4a02      	ldr	r2, [pc, #8]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6593      	str	r3, [r2, #88]	; 0x58
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004d5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d037      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d72:	d00e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d78:	d816      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d018      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d82:	d111      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4bc4      	ldr	r3, [pc, #784]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	4ac3      	ldr	r2, [pc, #780]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d90:	e00f      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d96:	3308      	adds	r3, #8
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fe72 	bl	8005a84 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dba:	4bb7      	ldr	r3, [pc, #732]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc8:	4ab3      	ldr	r2, [pc, #716]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	6513      	str	r3, [r2, #80]	; 0x50
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d039      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d81c      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e45 	.word	0x08004e45
 8004e0c:	08004e19 	.word	0x08004e19
 8004e10:	08004e27 	.word	0x08004e27
 8004e14:	08004e45 	.word	0x08004e45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e18:	4b9f      	ldr	r3, [pc, #636]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	4a9e      	ldr	r2, [pc, #632]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e24:	e00f      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fe28 	bl	8005a84 <RCCEx_PLL2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e3a:	e004      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e42:	e000      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e4e:	4b92      	ldr	r3, [pc, #584]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	f023 0103 	bic.w	r1, r3, #3
 8004e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5c:	4a8e      	ldr	r2, [pc, #568]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e62:	e003      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f000 8099 	beq.w	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e8e:	4b83      	ldr	r3, [pc, #524]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a82      	ldr	r2, [pc, #520]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e9a:	f7fc f9e1 	bl	8001260 <HAL_GetTick>
 8004e9e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea4:	f7fc f9dc 	bl	8001260 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	; 0x64
 8004eb2:	d903      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004eba:	e005      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ebc:	4b77      	ldr	r3, [pc, #476]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ed      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d173      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ed0:	4b71      	ldr	r3, [pc, #452]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004edc:	4053      	eors	r3, r2
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d015      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef2:	4b69      	ldr	r3, [pc, #420]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a68      	ldr	r2, [pc, #416]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004efe:	4b66      	ldr	r3, [pc, #408]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	4a65      	ldr	r2, [pc, #404]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f0a:	4a63      	ldr	r2, [pc, #396]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1e:	d118      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fc f99e 	bl	8001260 <HAL_GetTick>
 8004f24:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f28:	e00d      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fc f999 	bl	8001260 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d903      	bls.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8004f44:	e005      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f46:	4b54      	ldr	r3, [pc, #336]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0eb      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d129      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6a:	d10e      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004f6c:	4b4a      	ldr	r3, [pc, #296]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f7c:	091a      	lsrs	r2, r3, #4
 8004f7e:	4b48      	ldr	r3, [pc, #288]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	4a45      	ldr	r2, [pc, #276]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6113      	str	r3, [r2, #16]
 8004f88:	e005      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004f8a:	4b43      	ldr	r3, [pc, #268]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4a42      	ldr	r2, [pc, #264]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f94:	6113      	str	r3, [r2, #16]
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa6:	4a3c      	ldr	r2, [pc, #240]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004fb6:	e003      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f002 0301 	and.w	r3, r2, #1
 8004fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004fd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f000 808f 	beq.w	8005100 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe8:	2b28      	cmp	r3, #40	; 0x28
 8004fea:	d871      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	080050d9 	.word	0x080050d9
 8004ff8:	080050d1 	.word	0x080050d1
 8004ffc:	080050d1 	.word	0x080050d1
 8005000:	080050d1 	.word	0x080050d1
 8005004:	080050d1 	.word	0x080050d1
 8005008:	080050d1 	.word	0x080050d1
 800500c:	080050d1 	.word	0x080050d1
 8005010:	080050d1 	.word	0x080050d1
 8005014:	080050a5 	.word	0x080050a5
 8005018:	080050d1 	.word	0x080050d1
 800501c:	080050d1 	.word	0x080050d1
 8005020:	080050d1 	.word	0x080050d1
 8005024:	080050d1 	.word	0x080050d1
 8005028:	080050d1 	.word	0x080050d1
 800502c:	080050d1 	.word	0x080050d1
 8005030:	080050d1 	.word	0x080050d1
 8005034:	080050bb 	.word	0x080050bb
 8005038:	080050d1 	.word	0x080050d1
 800503c:	080050d1 	.word	0x080050d1
 8005040:	080050d1 	.word	0x080050d1
 8005044:	080050d1 	.word	0x080050d1
 8005048:	080050d1 	.word	0x080050d1
 800504c:	080050d1 	.word	0x080050d1
 8005050:	080050d1 	.word	0x080050d1
 8005054:	080050d9 	.word	0x080050d9
 8005058:	080050d1 	.word	0x080050d1
 800505c:	080050d1 	.word	0x080050d1
 8005060:	080050d1 	.word	0x080050d1
 8005064:	080050d1 	.word	0x080050d1
 8005068:	080050d1 	.word	0x080050d1
 800506c:	080050d1 	.word	0x080050d1
 8005070:	080050d1 	.word	0x080050d1
 8005074:	080050d9 	.word	0x080050d9
 8005078:	080050d1 	.word	0x080050d1
 800507c:	080050d1 	.word	0x080050d1
 8005080:	080050d1 	.word	0x080050d1
 8005084:	080050d1 	.word	0x080050d1
 8005088:	080050d1 	.word	0x080050d1
 800508c:	080050d1 	.word	0x080050d1
 8005090:	080050d1 	.word	0x080050d1
 8005094:	080050d9 	.word	0x080050d9
 8005098:	58024400 	.word	0x58024400
 800509c:	58024800 	.word	0x58024800
 80050a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a8:	3308      	adds	r3, #8
 80050aa:	2101      	movs	r1, #1
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fce9 	bl	8005a84 <RCCEx_PLL2_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050b8:	e00f      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050be:	3328      	adds	r3, #40	; 0x28
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fd90 	bl	8005be8 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050ce:	e004      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050e2:	4bbf      	ldr	r3, [pc, #764]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f0:	4abb      	ldr	r2, [pc, #748]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80050f2:	430b      	orrs	r3, r1
 80050f4:	6553      	str	r3, [r2, #84]	; 0x54
 80050f6:	e003      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f002 0302 	and.w	r3, r2, #2
 800510c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005110:	2300      	movs	r3, #0
 8005112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005116:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d041      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005126:	2b05      	cmp	r3, #5
 8005128:	d824      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	0800517d 	.word	0x0800517d
 8005134:	08005149 	.word	0x08005149
 8005138:	0800515f 	.word	0x0800515f
 800513c:	0800517d 	.word	0x0800517d
 8005140:	0800517d 	.word	0x0800517d
 8005144:	0800517d 	.word	0x0800517d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514c:	3308      	adds	r3, #8
 800514e:	2101      	movs	r1, #1
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fc97 	bl	8005a84 <RCCEx_PLL2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800515c:	e00f      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800515e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005162:	3328      	adds	r3, #40	; 0x28
 8005164:	2101      	movs	r1, #1
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fd3e 	bl	8005be8 <RCCEx_PLL3_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005172:	e004      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800517a:	e000      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800517c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005186:	4b96      	ldr	r3, [pc, #600]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f023 0107 	bic.w	r1, r3, #7
 800518e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005194:	4a92      	ldr	r2, [pc, #584]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005196:	430b      	orrs	r3, r1
 8005198:	6553      	str	r3, [r2, #84]	; 0x54
 800519a:	e003      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f002 0304 	and.w	r3, r2, #4
 80051b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051b4:	2300      	movs	r3, #0
 80051b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051be:	460b      	mov	r3, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	d044      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d825      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	08005225 	.word	0x08005225
 80051dc:	080051f1 	.word	0x080051f1
 80051e0:	08005207 	.word	0x08005207
 80051e4:	08005225 	.word	0x08005225
 80051e8:	08005225 	.word	0x08005225
 80051ec:	08005225 	.word	0x08005225
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f4:	3308      	adds	r3, #8
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fc43 	bl	8005a84 <RCCEx_PLL2_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005204:	e00f      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520a:	3328      	adds	r3, #40	; 0x28
 800520c:	2101      	movs	r1, #1
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fcea 	bl	8005be8 <RCCEx_PLL3_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800521a:	e004      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005222:	e000      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005226:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800522e:	4b6c      	ldr	r3, [pc, #432]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f023 0107 	bic.w	r1, r3, #7
 8005236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	4a68      	ldr	r2, [pc, #416]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005240:	430b      	orrs	r3, r1
 8005242:	6593      	str	r3, [r2, #88]	; 0x58
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800524a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800524e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f002 0320 	and.w	r3, r2, #32
 800525a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005264:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d055      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800526e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800527a:	d033      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800527c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005280:	d82c      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d02f      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d826      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800528e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005292:	d02b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005298:	d820      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800529a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529e:	d012      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80052a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a4:	d81a      	bhi.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d022      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80052aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ae:	d115      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b4:	3308      	adds	r3, #8
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fbe3 	bl	8005a84 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052c4:	e015      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	3328      	adds	r3, #40	; 0x28
 80052cc:	2102      	movs	r1, #2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fc8a 	bl	8005be8 <RCCEx_PLL3_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052da:	e00a      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80052e2:	e006      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80052e4:	bf00      	nop
 80052e6:	e004      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80052f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530a:	4a35      	ldr	r2, [pc, #212]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800530c:	430b      	orrs	r3, r1
 800530e:	6553      	str	r3, [r2, #84]	; 0x54
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005316:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005330:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005334:	460b      	mov	r3, r1
 8005336:	4313      	orrs	r3, r2
 8005338:	d058      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005342:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005346:	d033      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005348:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800534c:	d82c      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d02f      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d826      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800535a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800535e:	d02b      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005360:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005364:	d820      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536a:	d012      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800536c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005370:	d81a      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d022      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537a:	d115      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005380:	3308      	adds	r3, #8
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fb7d 	bl	8005a84 <RCCEx_PLL2_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005390:	e015      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005396:	3328      	adds	r3, #40	; 0x28
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc24 	bl	8005be8 <RCCEx_PLL3_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053a6:	e00a      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053b0:	bf00      	nop
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80053bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10e      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053d6:	4a02      	ldr	r2, [pc, #8]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	6593      	str	r3, [r2, #88]	; 0x58
 80053dc:	e006      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80053f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053fc:	2300      	movs	r3, #0
 80053fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005402:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	d055      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005418:	d033      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800541a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800541e:	d82c      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005424:	d02f      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	d826      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800542c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005430:	d02b      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005432:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005436:	d820      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800543c:	d012      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800543e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005442:	d81a      	bhi.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d022      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544c:	d115      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005452:	3308      	adds	r3, #8
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb14 	bl	8005a84 <RCCEx_PLL2_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005462:	e015      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	3328      	adds	r3, #40	; 0x28
 800546a:	2102      	movs	r1, #2
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fbbb 	bl	8005be8 <RCCEx_PLL3_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005478:	e00a      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005482:	bf00      	nop
 8005484:	e004      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800548e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005490:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10b      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005498:	4ba0      	ldr	r3, [pc, #640]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054a8:	4a9c      	ldr	r2, [pc, #624]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054aa:	430b      	orrs	r3, r1
 80054ac:	6593      	str	r3, [r2, #88]	; 0x58
 80054ae:	e003      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f002 0308 	and.w	r3, r2, #8
 80054c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054c8:	2300      	movs	r3, #0
 80054ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80054ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80054d2:	460b      	mov	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	d01e      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80054d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e4:	d10c      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ea:	3328      	adds	r3, #40	; 0x28
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fb7a 	bl	8005be8 <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005500:	4b86      	ldr	r3, [pc, #536]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005510:	4a82      	ldr	r2, [pc, #520]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005512:	430b      	orrs	r3, r1
 8005514:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f002 0310 	and.w	r3, r2, #16
 8005522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005526:	2300      	movs	r3, #0
 8005528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800552c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d01e      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005542:	d10c      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005548:	3328      	adds	r3, #40	; 0x28
 800554a:	2102      	movs	r1, #2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fb4b 	bl	8005be8 <RCCEx_PLL3_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800555e:	4b6f      	ldr	r3, [pc, #444]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800556e:	4a6b      	ldr	r2, [pc, #428]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005580:	67bb      	str	r3, [r7, #120]	; 0x78
 8005582:	2300      	movs	r3, #0
 8005584:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005586:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800558a:	460b      	mov	r3, r1
 800558c:	4313      	orrs	r3, r2
 800558e:	d03e      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800559c:	d022      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800559e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a2:	d81b      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80055ae:	e015      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b4:	3308      	adds	r3, #8
 80055b6:	2100      	movs	r1, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fa63 	bl	8005a84 <RCCEx_PLL2_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055c4:	e00f      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ca:	3328      	adds	r3, #40	; 0x28
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fb0a 	bl	8005be8 <RCCEx_PLL3_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055da:	e004      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80055e2:	e000      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80055e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ee:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055fe:	4a47      	ldr	r2, [pc, #284]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005600:	430b      	orrs	r3, r1
 8005602:	6593      	str	r3, [r2, #88]	; 0x58
 8005604:	e003      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005606:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800560a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800561a:	673b      	str	r3, [r7, #112]	; 0x70
 800561c:	2300      	movs	r3, #0
 800561e:	677b      	str	r3, [r7, #116]	; 0x74
 8005620:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d03b      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005632:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005636:	d01f      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800563c:	d818      	bhi.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800563e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005642:	d003      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005648:	d007      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800564a:	e011      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564c:	4b33      	ldr	r3, [pc, #204]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a32      	ldr	r2, [pc, #200]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005658:	e00f      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800565a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565e:	3328      	adds	r3, #40	; 0x28
 8005660:	2101      	movs	r1, #1
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fac0 	bl	8005be8 <RCCEx_PLL3_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800566e:	e004      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005682:	4b26      	ldr	r3, [pc, #152]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005694:	430b      	orrs	r3, r1
 8005696:	6553      	str	r3, [r2, #84]	; 0x54
 8005698:	e003      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800569e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80056ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80056b0:	2300      	movs	r3, #0
 80056b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80056b8:	460b      	mov	r3, r1
 80056ba:	4313      	orrs	r3, r2
 80056bc:	d034      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d007      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80056ce:	e011      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a11      	ldr	r2, [pc, #68]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056dc:	e00e      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e2:	3308      	adds	r3, #8
 80056e4:	2102      	movs	r1, #2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 f9cc 	bl	8005a84 <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056f2:	e003      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10d      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	4a02      	ldr	r2, [pc, #8]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005714:	430b      	orrs	r3, r1
 8005716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005718:	e006      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005724:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005734:	663b      	str	r3, [r7, #96]	; 0x60
 8005736:	2300      	movs	r3, #0
 8005738:	667b      	str	r3, [r7, #100]	; 0x64
 800573a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800573e:	460b      	mov	r3, r1
 8005740:	4313      	orrs	r3, r2
 8005742:	d00c      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005748:	3328      	adds	r3, #40	; 0x28
 800574a:	2102      	movs	r1, #2
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fa4b 	bl	8005be8 <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800576a:	65bb      	str	r3, [r7, #88]	; 0x58
 800576c:	2300      	movs	r3, #0
 800576e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005770:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005774:	460b      	mov	r3, r1
 8005776:	4313      	orrs	r3, r2
 8005778:	d036      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800577a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800577e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005784:	d018      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578a:	d811      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800578c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005790:	d014      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d80b      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d011      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a0:	d106      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a2:	4bb7      	ldr	r3, [pc, #732]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	4ab6      	ldr	r2, [pc, #728]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80057ae:	e008      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057b6:	e004      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057b8:	bf00      	nop
 80057ba:	e002      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80057c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ca:	4bad      	ldr	r3, [pc, #692]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d8:	4aa9      	ldr	r2, [pc, #676]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	6553      	str	r3, [r2, #84]	; 0x54
 80057de:	e003      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80057f4:	653b      	str	r3, [r7, #80]	; 0x50
 80057f6:	2300      	movs	r3, #0
 80057f8:	657b      	str	r3, [r7, #84]	; 0x54
 80057fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80057fe:	460b      	mov	r3, r1
 8005800:	4313      	orrs	r3, r2
 8005802:	d009      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005804:	4b9e      	ldr	r3, [pc, #632]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800580c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a9b      	ldr	r2, [pc, #620]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005814:	430b      	orrs	r3, r1
 8005816:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005824:	64bb      	str	r3, [r7, #72]	; 0x48
 8005826:	2300      	movs	r3, #0
 8005828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005834:	4b92      	ldr	r3, [pc, #584]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800583c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005842:	4a8f      	ldr	r2, [pc, #572]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005844:	430b      	orrs	r3, r1
 8005846:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005854:	643b      	str	r3, [r7, #64]	; 0x40
 8005856:	2300      	movs	r3, #0
 8005858:	647b      	str	r3, [r7, #68]	; 0x44
 800585a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d00e      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005864:	4b86      	ldr	r3, [pc, #536]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	4a85      	ldr	r2, [pc, #532]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800586a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800586e:	6113      	str	r3, [r2, #16]
 8005870:	4b83      	ldr	r3, [pc, #524]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005872:	6919      	ldr	r1, [r3, #16]
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800587c:	4a80      	ldr	r2, [pc, #512]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800587e:	430b      	orrs	r3, r1
 8005880:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800588e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005890:	2300      	movs	r3, #0
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005894:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005898:	460b      	mov	r3, r1
 800589a:	4313      	orrs	r3, r2
 800589c:	d009      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800589e:	4b78      	ldr	r3, [pc, #480]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	4a74      	ldr	r2, [pc, #464]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058ae:	430b      	orrs	r3, r1
 80058b0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
 80058c0:	2300      	movs	r3, #0
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
 80058c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80058c8:	460b      	mov	r3, r1
 80058ca:	4313      	orrs	r3, r2
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058ce:	4b6c      	ldr	r3, [pc, #432]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	4a68      	ldr	r2, [pc, #416]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	2100      	movs	r1, #0
 80058ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d011      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005904:	3308      	adds	r3, #8
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f000 f8bb 	bl	8005a84 <RCCEx_PLL2_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	2100      	movs	r1, #0
 800592e:	6239      	str	r1, [r7, #32]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
 8005936:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d011      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005944:	3308      	adds	r3, #8
 8005946:	2101      	movs	r1, #1
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f89b 	bl	8005a84 <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	2100      	movs	r1, #0
 800596e:	61b9      	str	r1, [r7, #24]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	61fb      	str	r3, [r7, #28]
 8005976:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800597a:	460b      	mov	r3, r1
 800597c:	4313      	orrs	r3, r2
 800597e:	d011      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005984:	3308      	adds	r3, #8
 8005986:	2102      	movs	r1, #2
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f87b 	bl	8005a84 <RCCEx_PLL2_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	2100      	movs	r1, #0
 80059ae:	6139      	str	r1, [r7, #16]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d011      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	3328      	adds	r3, #40	; 0x28
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f90d 	bl	8005be8 <RCCEx_PLL3_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80059d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	2100      	movs	r1, #0
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d011      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a04:	3328      	adds	r3, #40	; 0x28
 8005a06:	2101      	movs	r1, #1
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 f8ed 	bl	8005be8 <RCCEx_PLL3_Config>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005a14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	6039      	str	r1, [r7, #0]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	d011      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	3328      	adds	r3, #40	; 0x28
 8005a46:	2102      	movs	r1, #2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 f8cd 	bl	8005be8 <RCCEx_PLL3_Config>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005a54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005a64:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a7e:	bf00      	nop
 8005a80:	58024400 	.word	0x58024400

08005a84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a92:	4b53      	ldr	r3, [pc, #332]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d101      	bne.n	8005aa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e099      	b.n	8005bd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005aa2:	4b4f      	ldr	r3, [pc, #316]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a4e      	ldr	r2, [pc, #312]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aae:	f7fb fbd7 	bl	8001260 <HAL_GetTick>
 8005ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ab4:	e008      	b.n	8005ac8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ab6:	f7fb fbd3 	bl	8001260 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e086      	b.n	8005bd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ac8:	4b45      	ldr	r3, [pc, #276]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ad4:	4b42      	ldr	r3, [pc, #264]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	493f      	ldr	r1, [pc, #252]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	025b      	lsls	r3, r3, #9
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	061b      	lsls	r3, r3, #24
 8005b14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b18:	4931      	ldr	r1, [pc, #196]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b1e:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	492d      	ldr	r1, [pc, #180]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b30:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	f023 0220 	bic.w	r2, r3, #32
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	4928      	ldr	r1, [pc, #160]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b42:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	f023 0310 	bic.w	r3, r3, #16
 8005b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b4e:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b52:	4b24      	ldr	r3, [pc, #144]	; (8005be4 <RCCEx_PLL2_Config+0x160>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	69d2      	ldr	r2, [r2, #28]
 8005b5a:	00d2      	lsls	r2, r2, #3
 8005b5c:	4920      	ldr	r1, [pc, #128]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b62:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b68:	f043 0310 	orr.w	r3, r3, #16
 8005b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b74:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b80:	e00f      	b.n	8005ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d106      	bne.n	8005b96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b94:	e005      	b.n	8005ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a0e      	ldr	r2, [pc, #56]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bae:	f7fb fb57 	bl	8001260 <HAL_GetTick>
 8005bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bb4:	e008      	b.n	8005bc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bb6:	f7fb fb53 	bl	8001260 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <RCCEx_PLL2_Config+0x15c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	58024400 	.word	0x58024400
 8005be4:	ffff0007 	.word	0xffff0007

08005be8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bf6:	4b53      	ldr	r3, [pc, #332]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d101      	bne.n	8005c06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e099      	b.n	8005d3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c06:	4b4f      	ldr	r3, [pc, #316]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a4e      	ldr	r2, [pc, #312]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c12:	f7fb fb25 	bl	8001260 <HAL_GetTick>
 8005c16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c18:	e008      	b.n	8005c2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c1a:	f7fb fb21 	bl	8001260 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e086      	b.n	8005d3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c2c:	4b45      	ldr	r3, [pc, #276]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f0      	bne.n	8005c1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c38:	4b42      	ldr	r3, [pc, #264]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	051b      	lsls	r3, r3, #20
 8005c46:	493f      	ldr	r1, [pc, #252]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	025b      	lsls	r3, r3, #9
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	061b      	lsls	r3, r3, #24
 8005c78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c7c:	4931      	ldr	r1, [pc, #196]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c82:	4b30      	ldr	r3, [pc, #192]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	492d      	ldr	r1, [pc, #180]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c94:	4b2b      	ldr	r3, [pc, #172]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	4928      	ldr	r1, [pc, #160]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ca6:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	4a26      	ldr	r2, [pc, #152]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005cb2:	4b24      	ldr	r3, [pc, #144]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cb6:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <RCCEx_PLL3_Config+0x160>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	69d2      	ldr	r2, [r2, #28]
 8005cbe:	00d2      	lsls	r2, r2, #3
 8005cc0:	4920      	ldr	r1, [pc, #128]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005cc6:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ce4:	e00f      	b.n	8005d06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d106      	bne.n	8005cfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005cec:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	4a14      	ldr	r2, [pc, #80]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cf8:	e005      	b.n	8005d06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a11      	ldr	r2, [pc, #68]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d12:	f7fb faa5 	bl	8001260 <HAL_GetTick>
 8005d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d18:	e008      	b.n	8005d2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d1a:	f7fb faa1 	bl	8001260 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e006      	b.n	8005d3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <RCCEx_PLL3_Config+0x15c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	58024400 	.word	0x58024400
 8005d48:	ffff0007 	.word	0xffff0007

08005d4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e10f      	b.n	8005f7e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a87      	ldr	r2, [pc, #540]	; (8005f88 <HAL_SPI_Init+0x23c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00f      	beq.n	8005d8e <HAL_SPI_Init+0x42>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a86      	ldr	r2, [pc, #536]	; (8005f8c <HAL_SPI_Init+0x240>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00a      	beq.n	8005d8e <HAL_SPI_Init+0x42>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a84      	ldr	r2, [pc, #528]	; (8005f90 <HAL_SPI_Init+0x244>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d005      	beq.n	8005d8e <HAL_SPI_Init+0x42>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2b0f      	cmp	r3, #15
 8005d88:	d901      	bls.n	8005d8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e0f7      	b.n	8005f7e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f900 	bl	8005f94 <SPI_GetPacketSize>
 8005d94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7b      	ldr	r2, [pc, #492]	; (8005f88 <HAL_SPI_Init+0x23c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00c      	beq.n	8005dba <HAL_SPI_Init+0x6e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a79      	ldr	r2, [pc, #484]	; (8005f8c <HAL_SPI_Init+0x240>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <HAL_SPI_Init+0x6e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a78      	ldr	r2, [pc, #480]	; (8005f90 <HAL_SPI_Init+0x244>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d002      	beq.n	8005dba <HAL_SPI_Init+0x6e>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d811      	bhi.n	8005dde <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005dbe:	4a72      	ldr	r2, [pc, #456]	; (8005f88 <HAL_SPI_Init+0x23c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d009      	beq.n	8005dd8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a70      	ldr	r2, [pc, #448]	; (8005f8c <HAL_SPI_Init+0x240>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_SPI_Init+0x8c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a6f      	ldr	r2, [pc, #444]	; (8005f90 <HAL_SPI_Init+0x244>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d104      	bne.n	8005de2 <HAL_SPI_Init+0x96>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d901      	bls.n	8005de2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0cd      	b.n	8005f7e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fa fff2 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005e1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e28:	d119      	bne.n	8005e5e <HAL_SPI_Init+0x112>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e32:	d103      	bne.n	8005e3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10c      	bne.n	8005e5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e4c:	d107      	bne.n	8005e5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00f      	beq.n	8005e8a <HAL_SPI_Init+0x13e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d90b      	bls.n	8005e8a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	e007      	b.n	8005e9a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	ea42 0103 	orr.w	r1, r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efa:	ea42 0103 	orr.w	r1, r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d113      	bne.n	8005f3a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40013000 	.word	0x40013000
 8005f8c:	40003800 	.word	0x40003800
 8005f90:	40003c00 	.word	0x40003c00

08005f94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	3307      	adds	r3, #7
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e049      	b.n	8006070 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f841 	bl	8006078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f000 fa0d 	bl	8006428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d001      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e05e      	b.n	8006162 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a2b      	ldr	r2, [pc, #172]	; (8006170 <HAL_TIM_Base_Start_IT+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d02c      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ce:	d027      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a27      	ldr	r2, [pc, #156]	; (8006174 <HAL_TIM_Base_Start_IT+0xe8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d022      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a26      	ldr	r2, [pc, #152]	; (8006178 <HAL_TIM_Base_Start_IT+0xec>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d01d      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a24      	ldr	r2, [pc, #144]	; (800617c <HAL_TIM_Base_Start_IT+0xf0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d018      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a23      	ldr	r2, [pc, #140]	; (8006180 <HAL_TIM_Base_Start_IT+0xf4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d013      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a21      	ldr	r2, [pc, #132]	; (8006184 <HAL_TIM_Base_Start_IT+0xf8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00e      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a20      	ldr	r2, [pc, #128]	; (8006188 <HAL_TIM_Base_Start_IT+0xfc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d009      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1e      	ldr	r2, [pc, #120]	; (800618c <HAL_TIM_Base_Start_IT+0x100>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x94>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <HAL_TIM_Base_Start_IT+0x104>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d115      	bne.n	800614c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <HAL_TIM_Base_Start_IT+0x108>)
 8006128:	4013      	ands	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b06      	cmp	r3, #6
 8006130:	d015      	beq.n	800615e <HAL_TIM_Base_Start_IT+0xd2>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006138:	d011      	beq.n	800615e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614a:	e008      	b.n	800615e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e000      	b.n	8006160 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40010400 	.word	0x40010400
 8006184:	40001800 	.word	0x40001800
 8006188:	40014000 	.word	0x40014000
 800618c:	4000e000 	.word	0x4000e000
 8006190:	4000e400 	.word	0x4000e400
 8006194:	00010007 	.word	0x00010007

08006198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d122      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d11b      	bne.n	80061f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0202 	mvn.w	r2, #2
 80061c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f905 	bl	80063ea <HAL_TIM_IC_CaptureCallback>
 80061e0:	e005      	b.n	80061ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8f7 	bl	80063d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f908 	bl	80063fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d122      	bne.n	8006248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b04      	cmp	r3, #4
 800620e:	d11b      	bne.n	8006248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0204 	mvn.w	r2, #4
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f8db 	bl	80063ea <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8cd 	bl	80063d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f8de 	bl	80063fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b08      	cmp	r3, #8
 8006254:	d122      	bne.n	800629c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b08      	cmp	r3, #8
 8006262:	d11b      	bne.n	800629c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0208 	mvn.w	r2, #8
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f8b1 	bl	80063ea <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8a3 	bl	80063d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8b4 	bl	80063fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	2b10      	cmp	r3, #16
 80062a8:	d122      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b10      	cmp	r3, #16
 80062b6:	d11b      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0210 	mvn.w	r2, #16
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2208      	movs	r2, #8
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f887 	bl	80063ea <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f879 	bl	80063d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f88a 	bl	80063fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10e      	bne.n	800631c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d107      	bne.n	800631c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0201 	mvn.w	r2, #1
 8006314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fa fb70 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b80      	cmp	r3, #128	; 0x80
 8006328:	d10e      	bne.n	8006348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d107      	bne.n	8006348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f920 	bl	8006588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006356:	d10e      	bne.n	8006376 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d107      	bne.n	8006376 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800636e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f913 	bl	800659c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d10e      	bne.n	80063a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b40      	cmp	r3, #64	; 0x40
 8006390:	d107      	bne.n	80063a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800639a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f838 	bl	8006412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d10e      	bne.n	80063ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d107      	bne.n	80063ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f06f 0220 	mvn.w	r2, #32
 80063c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f8d3 	bl	8006574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a44      	ldr	r2, [pc, #272]	; (800654c <TIM_Base_SetConfig+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <TIM_Base_SetConfig+0x40>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006446:	d00f      	beq.n	8006468 <TIM_Base_SetConfig+0x40>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a41      	ldr	r2, [pc, #260]	; (8006550 <TIM_Base_SetConfig+0x128>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00b      	beq.n	8006468 <TIM_Base_SetConfig+0x40>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a40      	ldr	r2, [pc, #256]	; (8006554 <TIM_Base_SetConfig+0x12c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d007      	beq.n	8006468 <TIM_Base_SetConfig+0x40>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <TIM_Base_SetConfig+0x130>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a3e      	ldr	r2, [pc, #248]	; (800655c <TIM_Base_SetConfig+0x134>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d108      	bne.n	800647a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a33      	ldr	r2, [pc, #204]	; (800654c <TIM_Base_SetConfig+0x124>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d027      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006488:	d023      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a30      	ldr	r2, [pc, #192]	; (8006550 <TIM_Base_SetConfig+0x128>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d01f      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2f      	ldr	r2, [pc, #188]	; (8006554 <TIM_Base_SetConfig+0x12c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01b      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <TIM_Base_SetConfig+0x130>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d017      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a2d      	ldr	r2, [pc, #180]	; (800655c <TIM_Base_SetConfig+0x134>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <TIM_Base_SetConfig+0x138>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00f      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <TIM_Base_SetConfig+0x13c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <TIM_Base_SetConfig+0x140>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d007      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a29      	ldr	r2, [pc, #164]	; (800656c <TIM_Base_SetConfig+0x144>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_Base_SetConfig+0xaa>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a28      	ldr	r2, [pc, #160]	; (8006570 <TIM_Base_SetConfig+0x148>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d108      	bne.n	80064e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a10      	ldr	r2, [pc, #64]	; (800654c <TIM_Base_SetConfig+0x124>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00f      	beq.n	8006530 <TIM_Base_SetConfig+0x108>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a12      	ldr	r2, [pc, #72]	; (800655c <TIM_Base_SetConfig+0x134>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <TIM_Base_SetConfig+0x108>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a11      	ldr	r2, [pc, #68]	; (8006560 <TIM_Base_SetConfig+0x138>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <TIM_Base_SetConfig+0x108>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a10      	ldr	r2, [pc, #64]	; (8006564 <TIM_Base_SetConfig+0x13c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_Base_SetConfig+0x108>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a0f      	ldr	r2, [pc, #60]	; (8006568 <TIM_Base_SetConfig+0x140>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d103      	bne.n	8006538 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	615a      	str	r2, [r3, #20]
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40010000 	.word	0x40010000
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40010400 	.word	0x40010400
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800
 800656c:	4000e000 	.word	0x4000e000
 8006570:	4000e400 	.word	0x4000e400

08006574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b0:	b084      	sub	sp, #16
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	f107 001c 	add.w	r0, r7, #28
 80065be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d120      	bne.n	800660a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <USB_CoreInit+0xd4>)
 80065da:	4013      	ands	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d105      	bne.n	80065fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 faf8 	bl	8007bf4 <USB_CoreReset>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	e01a      	b.n	8006640 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f001 faec 	bl	8007bf4 <USB_CoreReset>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	639a      	str	r2, [r3, #56]	; 0x38
 8006632:	e005      	b.n	8006640 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	2b01      	cmp	r3, #1
 8006644:	d116      	bne.n	8006674 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	b29a      	uxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <USB_CoreInit+0xd8>)
 8006656:	4313      	orrs	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f043 0206 	orr.w	r2, r3, #6
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f043 0220 	orr.w	r2, r3, #32
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006680:	b004      	add	sp, #16
 8006682:	4770      	bx	lr
 8006684:	ffbdffbf 	.word	0xffbdffbf
 8006688:	03ee0000 	.word	0x03ee0000

0800668c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d165      	bne.n	800676c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4a41      	ldr	r2, [pc, #260]	; (80067a8 <USB_SetTurnaroundTime+0x11c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d906      	bls.n	80066b6 <USB_SetTurnaroundTime+0x2a>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4a40      	ldr	r2, [pc, #256]	; (80067ac <USB_SetTurnaroundTime+0x120>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d202      	bcs.n	80066b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066b0:	230f      	movs	r3, #15
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e062      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4a3c      	ldr	r2, [pc, #240]	; (80067ac <USB_SetTurnaroundTime+0x120>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d306      	bcc.n	80066cc <USB_SetTurnaroundTime+0x40>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a3b      	ldr	r2, [pc, #236]	; (80067b0 <USB_SetTurnaroundTime+0x124>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d202      	bcs.n	80066cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066c6:	230e      	movs	r3, #14
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e057      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4a38      	ldr	r2, [pc, #224]	; (80067b0 <USB_SetTurnaroundTime+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d306      	bcc.n	80066e2 <USB_SetTurnaroundTime+0x56>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4a37      	ldr	r2, [pc, #220]	; (80067b4 <USB_SetTurnaroundTime+0x128>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d202      	bcs.n	80066e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066dc:	230d      	movs	r3, #13
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e04c      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4a33      	ldr	r2, [pc, #204]	; (80067b4 <USB_SetTurnaroundTime+0x128>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d306      	bcc.n	80066f8 <USB_SetTurnaroundTime+0x6c>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4a32      	ldr	r2, [pc, #200]	; (80067b8 <USB_SetTurnaroundTime+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d802      	bhi.n	80066f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066f2:	230c      	movs	r3, #12
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e041      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4a2f      	ldr	r2, [pc, #188]	; (80067b8 <USB_SetTurnaroundTime+0x12c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d906      	bls.n	800670e <USB_SetTurnaroundTime+0x82>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4a2e      	ldr	r2, [pc, #184]	; (80067bc <USB_SetTurnaroundTime+0x130>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d802      	bhi.n	800670e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006708:	230b      	movs	r3, #11
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e036      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4a2a      	ldr	r2, [pc, #168]	; (80067bc <USB_SetTurnaroundTime+0x130>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d906      	bls.n	8006724 <USB_SetTurnaroundTime+0x98>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a29      	ldr	r2, [pc, #164]	; (80067c0 <USB_SetTurnaroundTime+0x134>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d802      	bhi.n	8006724 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800671e:	230a      	movs	r3, #10
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e02b      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <USB_SetTurnaroundTime+0x134>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d906      	bls.n	800673a <USB_SetTurnaroundTime+0xae>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <USB_SetTurnaroundTime+0x138>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d202      	bcs.n	800673a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006734:	2309      	movs	r3, #9
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e020      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4a21      	ldr	r2, [pc, #132]	; (80067c4 <USB_SetTurnaroundTime+0x138>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d306      	bcc.n	8006750 <USB_SetTurnaroundTime+0xc4>
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4a20      	ldr	r2, [pc, #128]	; (80067c8 <USB_SetTurnaroundTime+0x13c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d802      	bhi.n	8006750 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800674a:	2308      	movs	r3, #8
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e015      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <USB_SetTurnaroundTime+0x13c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d906      	bls.n	8006766 <USB_SetTurnaroundTime+0xda>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <USB_SetTurnaroundTime+0x140>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d202      	bcs.n	8006766 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006760:	2307      	movs	r3, #7
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e00a      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006766:	2306      	movs	r3, #6
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e007      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d102      	bne.n	8006778 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006772:	2309      	movs	r3, #9
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e001      	b.n	800677c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006778:	2309      	movs	r3, #9
 800677a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	00d8acbf 	.word	0x00d8acbf
 80067ac:	00e4e1c0 	.word	0x00e4e1c0
 80067b0:	00f42400 	.word	0x00f42400
 80067b4:	01067380 	.word	0x01067380
 80067b8:	011a499f 	.word	0x011a499f
 80067bc:	01312cff 	.word	0x01312cff
 80067c0:	014ca43f 	.word	0x014ca43f
 80067c4:	016e3600 	.word	0x016e3600
 80067c8:	01a6ab1f 	.word	0x01a6ab1f
 80067cc:	01e84800 	.word	0x01e84800

080067d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f043 0201 	orr.w	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d115      	bne.n	8006862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006842:	2001      	movs	r0, #1
 8006844:	f7fa fd18 	bl	8001278 <HAL_Delay>
      ms++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 f93f 	bl	8007ad2 <USB_GetMode>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d01e      	beq.n	8006898 <USB_SetCurrentMode+0x84>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b31      	cmp	r3, #49	; 0x31
 800685e:	d9f0      	bls.n	8006842 <USB_SetCurrentMode+0x2e>
 8006860:	e01a      	b.n	8006898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d115      	bne.n	8006894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006874:	2001      	movs	r0, #1
 8006876:	f7fa fcff 	bl	8001278 <HAL_Delay>
      ms++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f926 	bl	8007ad2 <USB_GetMode>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <USB_SetCurrentMode+0x84>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b31      	cmp	r3, #49	; 0x31
 8006890:	d9f0      	bls.n	8006874 <USB_SetCurrentMode+0x60>
 8006892:	e001      	b.n	8006898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e005      	b.n	80068a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b32      	cmp	r3, #50	; 0x32
 800689c:	d101      	bne.n	80068a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068ac:	b084      	sub	sp, #16
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	e009      	b.n	80068e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3340      	adds	r3, #64	; 0x40
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	2200      	movs	r2, #0
 80068d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3301      	adds	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b0e      	cmp	r3, #14
 80068e4:	d9f2      	bls.n	80068cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11c      	bne.n	8006926 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068fa:	f043 0302 	orr.w	r3, r3, #2
 80068fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e005      	b.n	8006932 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006944:	4619      	mov	r1, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694c:	461a      	mov	r2, r3
 800694e:	680b      	ldr	r3, [r1, #0]
 8006950:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10c      	bne.n	8006972 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800695e:	2100      	movs	r1, #0
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f965 	bl	8006c30 <USB_SetDevSpeed>
 8006966:	e008      	b.n	800697a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006968:	2101      	movs	r1, #1
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f960 	bl	8006c30 <USB_SetDevSpeed>
 8006970:	e003      	b.n	800697a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006972:	2103      	movs	r1, #3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f95b 	bl	8006c30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800697a:	2110      	movs	r1, #16
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f8f3 	bl	8006b68 <USB_FlushTxFifo>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f91f 	bl	8006bd0 <USB_FlushRxFifo>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	461a      	mov	r2, r3
 80069a4:	2300      	movs	r3, #0
 80069a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	461a      	mov	r2, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	461a      	mov	r2, r3
 80069bc:	2300      	movs	r3, #0
 80069be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
 80069c4:	e043      	b.n	8006a4e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069dc:	d118      	bne.n	8006a10 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	461a      	mov	r2, r3
 80069f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e013      	b.n	8006a22 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	461a      	mov	r2, r3
 8006a08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e008      	b.n	8006a22 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	461a      	mov	r2, r3
 8006a30:	2300      	movs	r3, #0
 8006a32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a40:	461a      	mov	r2, r3
 8006a42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d3b7      	bcc.n	80069c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	e043      	b.n	8006ae4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a72:	d118      	bne.n	8006aa6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	461a      	mov	r2, r3
 8006a88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	e013      	b.n	8006ab8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	e008      	b.n	8006ab8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006adc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d3b7      	bcc.n	8006a5c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006afe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f043 0210 	orr.w	r2, r3, #16
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <USB_DevInit+0x2b4>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	f043 0208 	orr.w	r2, r3, #8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d105      	bne.n	8006b50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <USB_DevInit+0x2b8>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b5c:	b004      	add	sp, #16
 8006b5e:	4770      	bx	lr
 8006b60:	803c3800 	.word	0x803c3800
 8006b64:	40000004 	.word	0x40000004

08006b68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <USB_FlushTxFifo+0x64>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d901      	bls.n	8006b88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e01b      	b.n	8006bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	daf2      	bge.n	8006b76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	019b      	lsls	r3, r3, #6
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <USB_FlushTxFifo+0x64>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e006      	b.n	8006bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d0f0      	beq.n	8006ba0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	00030d40 	.word	0x00030d40

08006bd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <USB_FlushRxFifo+0x5c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e018      	b.n	8006c20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	daf2      	bge.n	8006bdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2210      	movs	r2, #16
 8006bfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a08      	ldr	r2, [pc, #32]	; (8006c2c <USB_FlushRxFifo+0x5c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d901      	bls.n	8006c12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e006      	b.n	8006c20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b10      	cmp	r3, #16
 8006c1c:	d0f0      	beq.n	8006c00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	00030d40 	.word	0x00030d40

08006c30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c50:	4313      	orrs	r3, r2
 8006c52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b087      	sub	sp, #28
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0306 	and.w	r3, r3, #6
 8006c7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]
 8006c86:	e00a      	b.n	8006c9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d002      	beq.n	8006c94 <USB_GetDevSpeed+0x32>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d102      	bne.n	8006c9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c94:	2302      	movs	r3, #2
 8006c96:	75fb      	strb	r3, [r7, #23]
 8006c98:	e001      	b.n	8006c9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c9a:	230f      	movs	r3, #15
 8006c9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d139      	bne.n	8006d3c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	2101      	movs	r1, #1
 8006cda:	fa01 f303 	lsl.w	r3, r1, r3
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	68f9      	ldr	r1, [r7, #12]
 8006ce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d153      	bne.n	8006da8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	791b      	ldrb	r3, [r3, #4]
 8006d1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	059b      	lsls	r3, r3, #22
 8006d22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d24:	431a      	orrs	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	0159      	lsls	r1, r3, #5
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	440b      	add	r3, r1
 8006d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d32:	4619      	mov	r1, r3
 8006d34:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <USB_ActivateEndpoint+0x10c>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	600b      	str	r3, [r1, #0]
 8006d3a:	e035      	b.n	8006da8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d119      	bne.n	8006da8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	791b      	ldrb	r3, [r3, #4]
 8006d8e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d90:	430b      	orrs	r3, r1
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	0159      	lsls	r1, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	440b      	add	r3, r1
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	4619      	mov	r1, r3
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <USB_ActivateEndpoint+0x10c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	10008000 	.word	0x10008000

08006dbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d161      	bne.n	8006e9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dee:	d11f      	bne.n	8006e30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e50:	4013      	ands	r3, r2
 8006e52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e74:	4013      	ands	r3, r2
 8006e76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	0159      	lsls	r1, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	4619      	mov	r1, r3
 8006e94:	4b35      	ldr	r3, [pc, #212]	; (8006f6c <USB_DeactivateEndpoint+0x1b0>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]
 8006e9a:	e060      	b.n	8006f5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb2:	d11f      	bne.n	8006ef4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ed2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	2101      	movs	r1, #1
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	041b      	lsls	r3, r3, #16
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f14:	4013      	ands	r3, r2
 8006f16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	2101      	movs	r1, #1
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	43db      	mvns	r3, r3
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f38:	4013      	ands	r3, r2
 8006f3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	0159      	lsls	r1, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	440b      	add	r3, r1
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	4619      	mov	r1, r3
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <USB_DeactivateEndpoint+0x1b4>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	ec337800 	.word	0xec337800
 8006f70:	eff37800 	.word	0xeff37800

08006f74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	f040 8181 	bne.w	8007298 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d132      	bne.n	8007004 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	0159      	lsls	r1, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	440b      	add	r3, r1
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4ba5      	ldr	r3, [pc, #660]	; (8007250 <USB_EPStartXfer+0x2dc>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	0159      	lsls	r1, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	440b      	add	r3, r1
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4b95      	ldr	r3, [pc, #596]	; (8007254 <USB_EPStartXfer+0x2e0>)
 8006ffe:	4013      	ands	r3, r2
 8007000:	610b      	str	r3, [r1, #16]
 8007002:	e092      	b.n	800712a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	0159      	lsls	r1, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	440b      	add	r3, r1
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	4619      	mov	r1, r3
 8007020:	4b8c      	ldr	r3, [pc, #560]	; (8007254 <USB_EPStartXfer+0x2e0>)
 8007022:	4013      	ands	r3, r2
 8007024:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	0159      	lsls	r1, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	440b      	add	r3, r1
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	4619      	mov	r1, r3
 8007042:	4b83      	ldr	r3, [pc, #524]	; (8007250 <USB_EPStartXfer+0x2dc>)
 8007044:	4013      	ands	r3, r2
 8007046:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d11a      	bne.n	8007084 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	691a      	ldr	r2, [r3, #16]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	429a      	cmp	r2, r3
 8007058:	d903      	bls.n	8007062 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007080:	6113      	str	r3, [r2, #16]
 8007082:	e01b      	b.n	80070bc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6919      	ldr	r1, [r3, #16]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	440b      	add	r3, r1
 800709c:	1e59      	subs	r1, r3, #1
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070a8:	4b6b      	ldr	r3, [pc, #428]	; (8007258 <USB_EPStartXfer+0x2e4>)
 80070aa:	400b      	ands	r3, r1
 80070ac:	69b9      	ldr	r1, [r7, #24]
 80070ae:	0148      	lsls	r0, r1, #5
 80070b0:	69f9      	ldr	r1, [r7, #28]
 80070b2:	4401      	add	r1, r0
 80070b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070b8:	4313      	orrs	r3, r2
 80070ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d2:	69b9      	ldr	r1, [r7, #24]
 80070d4:	0148      	lsls	r0, r1, #5
 80070d6:	69f9      	ldr	r1, [r7, #28]
 80070d8:	4401      	add	r1, r0
 80070da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070de:	4313      	orrs	r3, r2
 80070e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d11f      	bne.n	800712a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	69fa      	ldr	r2, [r7, #28]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007104:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007108:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007128:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d14b      	bne.n	80071c8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d009      	beq.n	800714c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007144:	461a      	mov	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	791b      	ldrb	r3, [r3, #4]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d128      	bne.n	80071a6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007160:	2b00      	cmp	r3, #0
 8007162:	d110      	bne.n	8007186 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e00f      	b.n	80071a6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	440a      	add	r2, r1
 800719c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	e16a      	b.n	800749e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	791b      	ldrb	r3, [r3, #4]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d015      	beq.n	800721c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8152 	beq.w	800749e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	2101      	movs	r1, #1
 800720c:	fa01 f303 	lsl.w	r3, r1, r3
 8007210:	69f9      	ldr	r1, [r7, #28]
 8007212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007216:	4313      	orrs	r3, r2
 8007218:	634b      	str	r3, [r1, #52]	; 0x34
 800721a:	e140      	b.n	800749e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d117      	bne.n	800725c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	440a      	add	r2, r1
 8007242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	e016      	b.n	800727c <USB_EPStartXfer+0x308>
 800724e:	bf00      	nop
 8007250:	e007ffff 	.word	0xe007ffff
 8007254:	fff80000 	.word	0xfff80000
 8007258:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	68d9      	ldr	r1, [r3, #12]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	b298      	uxth	r0, r3
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4603      	mov	r3, r0
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f9b9 	bl	8007608 <USB_WritePacket>
 8007296:	e102      	b.n	800749e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	0159      	lsls	r1, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	440b      	add	r3, r1
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	4619      	mov	r1, r3
 80072b4:	4b7c      	ldr	r3, [pc, #496]	; (80074a8 <USB_EPStartXfer+0x534>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	0159      	lsls	r1, r3, #5
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	440b      	add	r3, r1
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	4619      	mov	r1, r3
 80072d6:	4b75      	ldr	r3, [pc, #468]	; (80074ac <USB_EPStartXfer+0x538>)
 80072d8:	4013      	ands	r3, r2
 80072da:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d12f      	bne.n	8007342 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	0148      	lsls	r0, r1, #5
 8007314:	69f9      	ldr	r1, [r7, #28]
 8007316:	4401      	add	r1, r0
 8007318:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800731c:	4313      	orrs	r3, r2
 800731e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	440a      	add	r2, r1
 8007336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800733e:	6113      	str	r3, [r2, #16]
 8007340:	e05f      	b.n	8007402 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d123      	bne.n	8007392 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007360:	69b9      	ldr	r1, [r7, #24]
 8007362:	0148      	lsls	r0, r1, #5
 8007364:	69f9      	ldr	r1, [r7, #28]
 8007366:	4401      	add	r1, r0
 8007368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800736c:	4313      	orrs	r3, r2
 800736e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738e:	6113      	str	r3, [r2, #16]
 8007390:	e037      	b.n	8007402 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4413      	add	r3, r2
 800739c:	1e5a      	subs	r2, r3, #1
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	8afa      	ldrh	r2, [r7, #22]
 80073ae:	fb03 f202 	mul.w	r2, r3, r2
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	8afb      	ldrh	r3, [r7, #22]
 80073c6:	04d9      	lsls	r1, r3, #19
 80073c8:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <USB_EPStartXfer+0x53c>)
 80073ca:	400b      	ands	r3, r1
 80073cc:	69b9      	ldr	r1, [r7, #24]
 80073ce:	0148      	lsls	r0, r1, #5
 80073d0:	69f9      	ldr	r1, [r7, #28]
 80073d2:	4401      	add	r1, r0
 80073d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073d8:	4313      	orrs	r3, r2
 80073da:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	0148      	lsls	r0, r1, #5
 80073f6:	69f9      	ldr	r1, [r7, #28]
 80073f8:	4401      	add	r1, r0
 80073fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073fe:	4313      	orrs	r3, r2
 8007400:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d10d      	bne.n	8007424 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68d9      	ldr	r1, [r3, #12]
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	460a      	mov	r2, r1
 8007422:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	791b      	ldrb	r3, [r3, #4]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d128      	bne.n	800747e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d110      	bne.n	800745e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	0151      	lsls	r1, r2, #5
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	440a      	add	r2, r1
 8007452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	e00f      	b.n	800747e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007498:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800749c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	fff80000 	.word	0xfff80000
 80074ac:	e007ffff 	.word	0xe007ffff
 80074b0:	1ff80000 	.word	0x1ff80000

080074b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d14a      	bne.n	8007568 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ea:	f040 8086 	bne.w	80075fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007510:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	440a      	add	r2, r1
 800752c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007534:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007542:	4293      	cmp	r3, r2
 8007544:	d902      	bls.n	800754c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	75fb      	strb	r3, [r7, #23]
          break;
 800754a:	e056      	b.n	80075fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007564:	d0e7      	beq.n	8007536 <USB_EPStopXfer+0x82>
 8007566:	e048      	b.n	80075fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800757c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007580:	d13b      	bne.n	80075fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	7812      	ldrb	r2, [r2, #0]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3301      	adds	r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d902      	bls.n	80075e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
          break;
 80075de:	e00c      	b.n	80075fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075f8:	d0e7      	beq.n	80075ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007608:	b480      	push	{r7}
 800760a:	b089      	sub	sp, #36	; 0x24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	460b      	mov	r3, r1
 8007618:	71fb      	strb	r3, [r7, #7]
 800761a:	4613      	mov	r3, r2
 800761c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007626:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d123      	bne.n	8007676 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800762e:	88bb      	ldrh	r3, [r7, #4]
 8007630:	3303      	adds	r3, #3
 8007632:	089b      	lsrs	r3, r3, #2
 8007634:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007636:	2300      	movs	r3, #0
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e018      	b.n	800766e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	031a      	lsls	r2, r3, #12
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	4413      	add	r3, r2
 8007644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007648:	461a      	mov	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	3301      	adds	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3301      	adds	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	3301      	adds	r3, #1
 8007660:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3301      	adds	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	3301      	adds	r3, #1
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	429a      	cmp	r2, r3
 8007674:	d3e2      	bcc.n	800763c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3724      	adds	r7, #36	; 0x24
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007684:	b480      	push	{r7}
 8007686:	b08b      	sub	sp, #44	; 0x2c
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	089b      	lsrs	r3, r3, #2
 800769e:	b29b      	uxth	r3, r3
 80076a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076aa:	2300      	movs	r3, #0
 80076ac:	623b      	str	r3, [r7, #32]
 80076ae:	e014      	b.n	80076da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	3301      	adds	r3, #1
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	3301      	adds	r3, #1
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	3301      	adds	r3, #1
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	3301      	adds	r3, #1
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	3301      	adds	r3, #1
 80076d8:	623b      	str	r3, [r7, #32]
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d3e6      	bcc.n	80076b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076e2:	8bfb      	ldrh	r3, [r7, #30]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01e      	beq.n	8007726 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f2:	461a      	mov	r2, r3
 80076f4:	f107 0310 	add.w	r3, r7, #16
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	fa22 f303 	lsr.w	r3, r2, r3
 8007708:	b2da      	uxtb	r2, r3
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	701a      	strb	r2, [r3, #0]
      i++;
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	3301      	adds	r3, #1
 8007712:	623b      	str	r3, [r7, #32]
      pDest++;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	3301      	adds	r3, #1
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800771a:	8bfb      	ldrh	r3, [r7, #30]
 800771c:	3b01      	subs	r3, #1
 800771e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007720:	8bfb      	ldrh	r3, [r7, #30]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1ea      	bne.n	80076fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007728:	4618      	mov	r0, r3
 800772a:	372c      	adds	r7, #44	; 0x2c
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d12c      	bne.n	80077aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	db12      	blt.n	8007788 <USB_EPSetStall+0x54>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00f      	beq.n	8007788 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007786:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	0151      	lsls	r1, r2, #5
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	440a      	add	r2, r1
 800779e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	e02b      	b.n	8007802 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	db12      	blt.n	80077e2 <USB_EPSetStall+0xae>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00f      	beq.n	80077e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007800:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d128      	bne.n	800787e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	440a      	add	r2, r1
 8007842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800784a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	791b      	ldrb	r3, [r3, #4]
 8007850:	2b03      	cmp	r3, #3
 8007852:	d003      	beq.n	800785c <USB_EPClearStall+0x4c>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	791b      	ldrb	r3, [r3, #4]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d138      	bne.n	80078ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	0151      	lsls	r1, r2, #5
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	440a      	add	r2, r1
 8007872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	e027      	b.n	80078ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800789c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	791b      	ldrb	r3, [r3, #4]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d003      	beq.n	80078ae <USB_EPClearStall+0x9e>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	791b      	ldrb	r3, [r3, #4]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d10f      	bne.n	80078ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80078fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007910:	68f9      	ldr	r1, [r7, #12]
 8007912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007916:	4313      	orrs	r3, r2
 8007918:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007956:	f023 0302 	bic.w	r3, r3, #2
 800795a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007984:	f023 0303 	bic.w	r3, r3, #3
 8007988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007998:	f043 0302 	orr.w	r3, r3, #2
 800799c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4013      	ands	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	4013      	ands	r3, r2
 80079f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	0c1b      	lsrs	r3, r3, #16
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	4013      	ands	r3, r2
 8007a28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	b29b      	uxth	r3, r3
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	4013      	ands	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a68:	68bb      	ldr	r3, [r7, #8]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b087      	sub	sp, #28
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa6:	01db      	lsls	r3, r3, #7
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f003 0301 	and.w	r3, r3, #1
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <USB_ActivateSetup+0x44>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	fffff800 	.word	0xfffff800

08007b38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	460b      	mov	r3, r1
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	333c      	adds	r3, #60	; 0x3c
 8007b4e:	3304      	adds	r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4a26      	ldr	r2, [pc, #152]	; (8007bf0 <USB_EP0_OutStart+0xb8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d90a      	bls.n	8007b72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b6c:	d101      	bne.n	8007b72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e037      	b.n	8007be2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba0:	f043 0318 	orr.w	r3, r3, #24
 8007ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007bb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007bba:	7afb      	ldrb	r3, [r7, #11]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10f      	bne.n	8007be0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	4f54300a 	.word	0x4f54300a

08007bf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a13      	ldr	r2, [pc, #76]	; (8007c58 <USB_CoreReset+0x64>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d901      	bls.n	8007c12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e01b      	b.n	8007c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	daf2      	bge.n	8007c00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f043 0201 	orr.w	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a09      	ldr	r2, [pc, #36]	; (8007c58 <USB_CoreReset+0x64>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d901      	bls.n	8007c3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e006      	b.n	8007c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d0f0      	beq.n	8007c2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	00030d40 	.word	0x00030d40

08007c5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c6c:	f005 f9e8 	bl	800d040 <USBD_static_malloc>
 8007c70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d109      	bne.n	8007c8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	32b0      	adds	r2, #176	; 0xb0
 8007c82:	2100      	movs	r1, #0
 8007c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e0d4      	b.n	8007e36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007c90:	2100      	movs	r1, #0
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f005 fa4c 	bl	800d130 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	32b0      	adds	r2, #176	; 0xb0
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	32b0      	adds	r2, #176	; 0xb0
 8007cb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	7c1b      	ldrb	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d138      	bne.n	8007d36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007cc4:	4b5e      	ldr	r3, [pc, #376]	; (8007e40 <USBD_CDC_Init+0x1e4>)
 8007cc6:	7819      	ldrb	r1, [r3, #0]
 8007cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ccc:	2202      	movs	r2, #2
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f005 f893 	bl	800cdfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cd4:	4b5a      	ldr	r3, [pc, #360]	; (8007e40 <USBD_CDC_Init+0x1e4>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f003 020f 	and.w	r2, r3, #15
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	3324      	adds	r3, #36	; 0x24
 8007cea:	2201      	movs	r2, #1
 8007cec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cee:	4b55      	ldr	r3, [pc, #340]	; (8007e44 <USBD_CDC_Init+0x1e8>)
 8007cf0:	7819      	ldrb	r1, [r3, #0]
 8007cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f005 f87e 	bl	800cdfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cfe:	4b51      	ldr	r3, [pc, #324]	; (8007e44 <USBD_CDC_Init+0x1e8>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	f003 020f 	and.w	r2, r3, #15
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d16:	2201      	movs	r2, #1
 8007d18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d1a:	4b4b      	ldr	r3, [pc, #300]	; (8007e48 <USBD_CDC_Init+0x1ec>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 020f 	and.w	r2, r3, #15
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	3326      	adds	r3, #38	; 0x26
 8007d30:	2210      	movs	r2, #16
 8007d32:	801a      	strh	r2, [r3, #0]
 8007d34:	e035      	b.n	8007da2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d36:	4b42      	ldr	r3, [pc, #264]	; (8007e40 <USBD_CDC_Init+0x1e4>)
 8007d38:	7819      	ldrb	r1, [r3, #0]
 8007d3a:	2340      	movs	r3, #64	; 0x40
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f005 f85b 	bl	800cdfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d44:	4b3e      	ldr	r3, [pc, #248]	; (8007e40 <USBD_CDC_Init+0x1e4>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 020f 	and.w	r2, r3, #15
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	3324      	adds	r3, #36	; 0x24
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d5e:	4b39      	ldr	r3, [pc, #228]	; (8007e44 <USBD_CDC_Init+0x1e8>)
 8007d60:	7819      	ldrb	r1, [r3, #0]
 8007d62:	2340      	movs	r3, #64	; 0x40
 8007d64:	2202      	movs	r2, #2
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f005 f847 	bl	800cdfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d6c:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <USBD_CDC_Init+0x1e8>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 020f 	and.w	r2, r3, #15
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d84:	2201      	movs	r2, #1
 8007d86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d88:	4b2f      	ldr	r3, [pc, #188]	; (8007e48 <USBD_CDC_Init+0x1ec>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	f003 020f 	and.w	r2, r3, #15
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	3326      	adds	r3, #38	; 0x26
 8007d9e:	2210      	movs	r2, #16
 8007da0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007da2:	4b29      	ldr	r3, [pc, #164]	; (8007e48 <USBD_CDC_Init+0x1ec>)
 8007da4:	7819      	ldrb	r1, [r3, #0]
 8007da6:	2308      	movs	r3, #8
 8007da8:	2203      	movs	r2, #3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f005 f825 	bl	800cdfa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <USBD_CDC_Init+0x1ec>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 020f 	and.w	r2, r3, #15
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3324      	adds	r3, #36	; 0x24
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	33b0      	adds	r3, #176	; 0xb0
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007e00:	2302      	movs	r3, #2
 8007e02:	e018      	b.n	8007e36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7c1b      	ldrb	r3, [r3, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <USBD_CDC_Init+0x1e8>)
 8007e0e:	7819      	ldrb	r1, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f005 f8dc 	bl	800cfd8 <USBD_LL_PrepareReceive>
 8007e20:	e008      	b.n	8007e34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e22:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <USBD_CDC_Init+0x1e8>)
 8007e24:	7819      	ldrb	r1, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e2c:	2340      	movs	r3, #64	; 0x40
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f005 f8d2 	bl	800cfd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	24000097 	.word	0x24000097
 8007e44:	24000098 	.word	0x24000098
 8007e48:	24000099 	.word	0x24000099

08007e4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e58:	4b3a      	ldr	r3, [pc, #232]	; (8007f44 <USBD_CDC_DeInit+0xf8>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f004 fff1 	bl	800ce46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007e64:	4b37      	ldr	r3, [pc, #220]	; (8007f44 <USBD_CDC_DeInit+0xf8>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 020f 	and.w	r2, r3, #15
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	440b      	add	r3, r1
 8007e78:	3324      	adds	r3, #36	; 0x24
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e7e:	4b32      	ldr	r3, [pc, #200]	; (8007f48 <USBD_CDC_DeInit+0xfc>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f004 ffde 	bl	800ce46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e8a:	4b2f      	ldr	r3, [pc, #188]	; (8007f48 <USBD_CDC_DeInit+0xfc>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 020f 	and.w	r2, r3, #15
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ea6:	4b29      	ldr	r3, [pc, #164]	; (8007f4c <USBD_CDC_DeInit+0x100>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f004 ffca 	bl	800ce46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007eb2:	4b26      	ldr	r3, [pc, #152]	; (8007f4c <USBD_CDC_DeInit+0x100>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	f003 020f 	and.w	r2, r3, #15
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3324      	adds	r3, #36	; 0x24
 8007ec8:	2200      	movs	r2, #0
 8007eca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ecc:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <USBD_CDC_DeInit+0x100>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	3326      	adds	r3, #38	; 0x26
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32b0      	adds	r2, #176	; 0xb0
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01f      	beq.n	8007f38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	33b0      	adds	r3, #176	; 0xb0
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	32b0      	adds	r2, #176	; 0xb0
 8007f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f005 f89e 	bl	800d05c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32b0      	adds	r2, #176	; 0xb0
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	24000097 	.word	0x24000097
 8007f48:	24000098 	.word	0x24000098
 8007f4c:	24000099 	.word	0x24000099

08007f50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	32b0      	adds	r2, #176	; 0xb0
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e0bf      	b.n	8008100 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d050      	beq.n	800802e <USBD_CDC_Setup+0xde>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	f040 80af 	bne.w	80080f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	88db      	ldrh	r3, [r3, #6]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d03a      	beq.n	8008010 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b25b      	sxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	da1b      	bge.n	8007fdc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	33b0      	adds	r3, #176	; 0xb0
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007fba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	88d2      	ldrh	r2, [r2, #6]
 8007fc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	88db      	ldrh	r3, [r3, #6]
 8007fc6:	2b07      	cmp	r3, #7
 8007fc8:	bf28      	it	cs
 8007fca:	2307      	movcs	r3, #7
 8007fcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	89fa      	ldrh	r2, [r7, #14]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 fd49 	bl	8009a6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007fda:	e090      	b.n	80080fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	785a      	ldrb	r2, [r3, #1]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b3f      	cmp	r3, #63	; 0x3f
 8007fec:	d803      	bhi.n	8007ff6 <USBD_CDC_Setup+0xa6>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	88db      	ldrh	r3, [r3, #6]
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	e000      	b.n	8007ff8 <USBD_CDC_Setup+0xa8>
 8007ff6:	2240      	movs	r2, #64	; 0x40
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ffe:	6939      	ldr	r1, [r7, #16]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008006:	461a      	mov	r2, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 fd5b 	bl	8009ac4 <USBD_CtlPrepareRx>
      break;
 800800e:	e076      	b.n	80080fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	33b0      	adds	r3, #176	; 0xb0
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	7850      	ldrb	r0, [r2, #1]
 8008026:	2200      	movs	r2, #0
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	4798      	blx	r3
      break;
 800802c:	e067      	b.n	80080fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b0b      	cmp	r3, #11
 8008034:	d851      	bhi.n	80080da <USBD_CDC_Setup+0x18a>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <USBD_CDC_Setup+0xec>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	0800806d 	.word	0x0800806d
 8008040:	080080e9 	.word	0x080080e9
 8008044:	080080db 	.word	0x080080db
 8008048:	080080db 	.word	0x080080db
 800804c:	080080db 	.word	0x080080db
 8008050:	080080db 	.word	0x080080db
 8008054:	080080db 	.word	0x080080db
 8008058:	080080db 	.word	0x080080db
 800805c:	080080db 	.word	0x080080db
 8008060:	080080db 	.word	0x080080db
 8008064:	08008097 	.word	0x08008097
 8008068:	080080c1 	.word	0x080080c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b03      	cmp	r3, #3
 8008076:	d107      	bne.n	8008088 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008078:	f107 030a 	add.w	r3, r7, #10
 800807c:	2202      	movs	r2, #2
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fcf3 	bl	8009a6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008086:	e032      	b.n	80080ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fc7d 	bl	800998a <USBD_CtlError>
            ret = USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	75fb      	strb	r3, [r7, #23]
          break;
 8008094:	e02b      	b.n	80080ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d107      	bne.n	80080b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080a2:	f107 030d 	add.w	r3, r7, #13
 80080a6:	2201      	movs	r2, #1
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fcde 	bl	8009a6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080b0:	e01d      	b.n	80080ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 fc68 	bl	800998a <USBD_CtlError>
            ret = USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	75fb      	strb	r3, [r7, #23]
          break;
 80080be:	e016      	b.n	80080ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d00f      	beq.n	80080ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fc5b 	bl	800998a <USBD_CtlError>
            ret = USBD_FAIL;
 80080d4:	2303      	movs	r3, #3
 80080d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080d8:	e008      	b.n	80080ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fc54 	bl	800998a <USBD_CtlError>
          ret = USBD_FAIL;
 80080e2:	2303      	movs	r3, #3
 80080e4:	75fb      	strb	r3, [r7, #23]
          break;
 80080e6:	e002      	b.n	80080ee <USBD_CDC_Setup+0x19e>
          break;
 80080e8:	bf00      	nop
 80080ea:	e008      	b.n	80080fe <USBD_CDC_Setup+0x1ae>
          break;
 80080ec:	bf00      	nop
      }
      break;
 80080ee:	e006      	b.n	80080fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 fc49 	bl	800998a <USBD_CtlError>
      ret = USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	75fb      	strb	r3, [r7, #23]
      break;
 80080fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800811a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	32b0      	adds	r2, #176	; 0xb0
 8008126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800812e:	2303      	movs	r3, #3
 8008130:	e065      	b.n	80081fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32b0      	adds	r2, #176	; 0xb0
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	f003 020f 	and.w	r2, r3, #15
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	3318      	adds	r3, #24
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d02f      	beq.n	80081bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	f003 020f 	and.w	r2, r3, #15
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	3318      	adds	r3, #24
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	f003 010f 	and.w	r1, r3, #15
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	460b      	mov	r3, r1
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	440b      	add	r3, r1
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4403      	add	r3, r0
 8008184:	3344      	adds	r3, #68	; 0x44
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	fbb2 f1f3 	udiv	r1, r2, r3
 800818c:	fb01 f303 	mul.w	r3, r1, r3
 8008190:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008192:	2b00      	cmp	r3, #0
 8008194:	d112      	bne.n	80081bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008196:	78fb      	ldrb	r3, [r7, #3]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	3318      	adds	r3, #24
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081ae:	78f9      	ldrb	r1, [r7, #3]
 80081b0:	2300      	movs	r3, #0
 80081b2:	2200      	movs	r2, #0
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f004 feee 	bl	800cf96 <USBD_LL_Transmit>
 80081ba:	e01f      	b.n	80081fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	33b0      	adds	r3, #176	; 0xb0
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d010      	beq.n	80081fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	33b0      	adds	r3, #176	; 0xb0
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	32b0      	adds	r2, #176	; 0xb0
 800821c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008220:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	32b0      	adds	r2, #176	; 0xb0
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	e01a      	b.n	800826e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f004 feec 	bl	800d01a <USBD_LL_GetRxDataSize>
 8008242:	4602      	mov	r2, r0
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	33b0      	adds	r3, #176	; 0xb0
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008268:	4611      	mov	r1, r2
 800826a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	32b0      	adds	r2, #176	; 0xb0
 8008288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	e025      	b.n	80082e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	33b0      	adds	r3, #176	; 0xb0
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01a      	beq.n	80082e2 <USBD_CDC_EP0_RxReady+0x6c>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082b2:	2bff      	cmp	r3, #255	; 0xff
 80082b4:	d015      	beq.n	80082e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	33b0      	adds	r3, #176	; 0xb0
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80082ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082d6:	b292      	uxth	r2, r2
 80082d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	22ff      	movs	r2, #255	; 0xff
 80082de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082f4:	2182      	movs	r1, #130	; 0x82
 80082f6:	4818      	ldr	r0, [pc, #96]	; (8008358 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082f8:	f000 fd0f 	bl	8008d1a <USBD_GetEpDesc>
 80082fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082fe:	2101      	movs	r1, #1
 8008300:	4815      	ldr	r0, [pc, #84]	; (8008358 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008302:	f000 fd0a 	bl	8008d1a <USBD_GetEpDesc>
 8008306:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008308:	2181      	movs	r1, #129	; 0x81
 800830a:	4813      	ldr	r0, [pc, #76]	; (8008358 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800830c:	f000 fd05 	bl	8008d1a <USBD_GetEpDesc>
 8008310:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2210      	movs	r2, #16
 800831c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d006      	beq.n	8008332 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2200      	movs	r2, #0
 8008328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800832c:	711a      	strb	r2, [r3, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d006      	beq.n	8008346 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008340:	711a      	strb	r2, [r3, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2243      	movs	r2, #67	; 0x43
 800834a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800834c:	4b02      	ldr	r3, [pc, #8]	; (8008358 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	24000054 	.word	0x24000054

0800835c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008364:	2182      	movs	r1, #130	; 0x82
 8008366:	4818      	ldr	r0, [pc, #96]	; (80083c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008368:	f000 fcd7 	bl	8008d1a <USBD_GetEpDesc>
 800836c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800836e:	2101      	movs	r1, #1
 8008370:	4815      	ldr	r0, [pc, #84]	; (80083c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008372:	f000 fcd2 	bl	8008d1a <USBD_GetEpDesc>
 8008376:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008378:	2181      	movs	r1, #129	; 0x81
 800837a:	4813      	ldr	r0, [pc, #76]	; (80083c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800837c:	f000 fccd 	bl	8008d1a <USBD_GetEpDesc>
 8008380:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2210      	movs	r2, #16
 800838c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d006      	beq.n	80083a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2200      	movs	r2, #0
 8008398:	711a      	strb	r2, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f042 0202 	orr.w	r2, r2, #2
 80083a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d006      	beq.n	80083b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	711a      	strb	r2, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f042 0202 	orr.w	r2, r2, #2
 80083b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2243      	movs	r2, #67	; 0x43
 80083ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083bc:	4b02      	ldr	r3, [pc, #8]	; (80083c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	24000054 	.word	0x24000054

080083cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083d4:	2182      	movs	r1, #130	; 0x82
 80083d6:	4818      	ldr	r0, [pc, #96]	; (8008438 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083d8:	f000 fc9f 	bl	8008d1a <USBD_GetEpDesc>
 80083dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083de:	2101      	movs	r1, #1
 80083e0:	4815      	ldr	r0, [pc, #84]	; (8008438 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083e2:	f000 fc9a 	bl	8008d1a <USBD_GetEpDesc>
 80083e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083e8:	2181      	movs	r1, #129	; 0x81
 80083ea:	4813      	ldr	r0, [pc, #76]	; (8008438 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083ec:	f000 fc95 	bl	8008d1a <USBD_GetEpDesc>
 80083f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2210      	movs	r2, #16
 80083fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d006      	beq.n	8008412 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2200      	movs	r2, #0
 8008408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800840c:	711a      	strb	r2, [r3, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d006      	beq.n	8008426 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008420:	711a      	strb	r2, [r3, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2243      	movs	r2, #67	; 0x43
 800842a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	24000054 	.word	0x24000054

0800843c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	220a      	movs	r2, #10
 8008448:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800844a:	4b03      	ldr	r3, [pc, #12]	; (8008458 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	24000010 	.word	0x24000010

0800845c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800846c:	2303      	movs	r3, #3
 800846e:	e009      	b.n	8008484 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	33b0      	adds	r3, #176	; 0xb0
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	32b0      	adds	r2, #176	; 0xb0
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e008      	b.n	80084c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	32b0      	adds	r2, #176	; 0xb0
 80084e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e004      	b.n	8008502 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
	...

08008510 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	32b0      	adds	r2, #176	; 0xb0
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	32b0      	adds	r2, #176	; 0xb0
 8008532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800853a:	2303      	movs	r3, #3
 800853c:	e018      	b.n	8008570 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7c1b      	ldrb	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10a      	bne.n	800855c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <USBD_CDC_ReceivePacket+0x68>)
 8008548:	7819      	ldrb	r1, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f004 fd3f 	bl	800cfd8 <USBD_LL_PrepareReceive>
 800855a:	e008      	b.n	800856e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <USBD_CDC_ReceivePacket+0x68>)
 800855e:	7819      	ldrb	r1, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f004 fd35 	bl	800cfd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	24000098 	.word	0x24000098

0800857c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	e01f      	b.n	80085d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	79fa      	ldrb	r2, [r7, #7]
 80085c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f004 fba9 	bl	800cd20 <USBD_LL_Init>
 80085ce:	4603      	mov	r3, r0
 80085d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e025      	b.n	8008640 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	32ae      	adds	r2, #174	; 0xae
 8008606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00f      	beq.n	8008630 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	32ae      	adds	r2, #174	; 0xae
 800861a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	f107 020e 	add.w	r2, r7, #14
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	4602      	mov	r2, r0
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f004 fbb7 	bl	800cdc4 <USBD_LL_Start>
 8008656:	4603      	mov	r3, r0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	4611      	mov	r1, r2
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
 80086a0:	4603      	mov	r3, r0
 80086a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	4611      	mov	r1, r2
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80086d4:	2303      	movs	r3, #3
 80086d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 f90e 	bl	8009916 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008708:	461a      	mov	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	2b02      	cmp	r3, #2
 800871c:	d01a      	beq.n	8008754 <USBD_LL_SetupStage+0x72>
 800871e:	2b02      	cmp	r3, #2
 8008720:	d822      	bhi.n	8008768 <USBD_LL_SetupStage+0x86>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <USBD_LL_SetupStage+0x4a>
 8008726:	2b01      	cmp	r3, #1
 8008728:	d00a      	beq.n	8008740 <USBD_LL_SetupStage+0x5e>
 800872a:	e01d      	b.n	8008768 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fb65 	bl	8008e04 <USBD_StdDevReq>
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]
      break;
 800873e:	e020      	b.n	8008782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fbcd 	bl	8008ee8 <USBD_StdItfReq>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]
      break;
 8008752:	e016      	b.n	8008782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fc2f 	bl	8008fc0 <USBD_StdEPReq>
 8008762:	4603      	mov	r3, r0
 8008764:	73fb      	strb	r3, [r7, #15]
      break;
 8008766:	e00c      	b.n	8008782 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800876e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008772:	b2db      	uxtb	r3, r3
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f004 fb84 	bl	800ce84 <USBD_LL_StallEP>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
      break;
 8008780:	bf00      	nop
  }

  return ret;
 8008782:	7bfb      	ldrb	r3, [r7, #15]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	460b      	mov	r3, r1
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800879e:	7afb      	ldrb	r3, [r7, #11]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d16e      	bne.n	8008882 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	f040 8098 	bne.w	80088e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d913      	bls.n	80087ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	4293      	cmp	r3, r2
 80087dc:	bf28      	it	cs
 80087de:	4613      	movcs	r3, r2
 80087e0:	461a      	mov	r2, r3
 80087e2:	6879      	ldr	r1, [r7, #4]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f001 f98a 	bl	8009afe <USBD_CtlContinueRx>
 80087ea:	e07d      	b.n	80088e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087f2:	f003 031f 	and.w	r3, r3, #31
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d014      	beq.n	8008824 <USBD_LL_DataOutStage+0x98>
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d81d      	bhi.n	800883a <USBD_LL_DataOutStage+0xae>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <USBD_LL_DataOutStage+0x7c>
 8008802:	2b01      	cmp	r3, #1
 8008804:	d003      	beq.n	800880e <USBD_LL_DataOutStage+0x82>
 8008806:	e018      	b.n	800883a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	75bb      	strb	r3, [r7, #22]
            break;
 800880c:	e018      	b.n	8008840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008814:	b2db      	uxtb	r3, r3
 8008816:	4619      	mov	r1, r3
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fa64 	bl	8008ce6 <USBD_CoreFindIF>
 800881e:	4603      	mov	r3, r0
 8008820:	75bb      	strb	r3, [r7, #22]
            break;
 8008822:	e00d      	b.n	8008840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800882a:	b2db      	uxtb	r3, r3
 800882c:	4619      	mov	r1, r3
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fa66 	bl	8008d00 <USBD_CoreFindEP>
 8008834:	4603      	mov	r3, r0
 8008836:	75bb      	strb	r3, [r7, #22]
            break;
 8008838:	e002      	b.n	8008840 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	75bb      	strb	r3, [r7, #22]
            break;
 800883e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008840:	7dbb      	ldrb	r3, [r7, #22]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d119      	bne.n	800887a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b03      	cmp	r3, #3
 8008850:	d113      	bne.n	800887a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008852:	7dba      	ldrb	r2, [r7, #22]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	32ae      	adds	r2, #174	; 0xae
 8008858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008862:	7dba      	ldrb	r2, [r7, #22]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800886a:	7dba      	ldrb	r2, [r7, #22]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	32ae      	adds	r2, #174	; 0xae
 8008870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f001 f950 	bl	8009b20 <USBD_CtlSendStatus>
 8008880:	e032      	b.n	80088e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008882:	7afb      	ldrb	r3, [r7, #11]
 8008884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008888:	b2db      	uxtb	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fa37 	bl	8008d00 <USBD_CoreFindEP>
 8008892:	4603      	mov	r3, r0
 8008894:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008896:	7dbb      	ldrb	r3, [r7, #22]
 8008898:	2bff      	cmp	r3, #255	; 0xff
 800889a:	d025      	beq.n	80088e8 <USBD_LL_DataOutStage+0x15c>
 800889c:	7dbb      	ldrb	r3, [r7, #22]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d122      	bne.n	80088e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d117      	bne.n	80088de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80088ae:	7dba      	ldrb	r2, [r7, #22]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	32ae      	adds	r2, #174	; 0xae
 80088b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80088be:	7dba      	ldrb	r2, [r7, #22]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80088c6:	7dba      	ldrb	r2, [r7, #22]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	32ae      	adds	r2, #174	; 0xae
 80088cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	7afa      	ldrb	r2, [r7, #11]
 80088d4:	4611      	mov	r1, r2
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	4798      	blx	r3
 80088da:	4603      	mov	r3, r0
 80088dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	e000      	b.n	80088ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	460b      	mov	r3, r1
 80088fc:	607a      	str	r2, [r7, #4]
 80088fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d16f      	bne.n	80089e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3314      	adds	r3, #20
 800890a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008912:	2b02      	cmp	r3, #2
 8008914:	d15a      	bne.n	80089cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	429a      	cmp	r2, r3
 8008920:	d914      	bls.n	800894c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	461a      	mov	r2, r3
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f001 f8b2 	bl	8009aa2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800893e:	2300      	movs	r3, #0
 8008940:	2200      	movs	r2, #0
 8008942:	2100      	movs	r1, #0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f004 fb47 	bl	800cfd8 <USBD_LL_PrepareReceive>
 800894a:	e03f      	b.n	80089cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	429a      	cmp	r2, r3
 8008956:	d11c      	bne.n	8008992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008960:	429a      	cmp	r2, r3
 8008962:	d316      	bcc.n	8008992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800896e:	429a      	cmp	r2, r3
 8008970:	d20f      	bcs.n	8008992 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008972:	2200      	movs	r2, #0
 8008974:	2100      	movs	r1, #0
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f001 f893 	bl	8009aa2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008984:	2300      	movs	r3, #0
 8008986:	2200      	movs	r2, #0
 8008988:	2100      	movs	r1, #0
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f004 fb24 	bl	800cfd8 <USBD_LL_PrepareReceive>
 8008990:	e01c      	b.n	80089cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b03      	cmp	r3, #3
 800899c:	d10f      	bne.n	80089be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d009      	beq.n	80089be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f004 fa5f 	bl	800ce84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f001 f8bd 	bl	8009b46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d03a      	beq.n	8008a4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f7ff fe42 	bl	8008660 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089e4:	e032      	b.n	8008a4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	4619      	mov	r1, r3
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f985 	bl	8008d00 <USBD_CoreFindEP>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
 80089fc:	2bff      	cmp	r3, #255	; 0xff
 80089fe:	d025      	beq.n	8008a4c <USBD_LL_DataInStage+0x15a>
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d122      	bne.n	8008a4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d11c      	bne.n	8008a4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008a12:	7dfa      	ldrb	r2, [r7, #23]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	32ae      	adds	r2, #174	; 0xae
 8008a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d014      	beq.n	8008a4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a22:	7dfa      	ldrb	r2, [r7, #23]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a2a:	7dfa      	ldrb	r2, [r7, #23]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	32ae      	adds	r2, #174	; 0xae
 8008a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	7afa      	ldrb	r2, [r7, #11]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	4798      	blx	r3
 8008a3e:	4603      	mov	r3, r0
 8008a40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a42:	7dbb      	ldrb	r3, [r7, #22]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a48:	7dbb      	ldrb	r3, [r7, #22]
 8008a4a:	e000      	b.n	8008a4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d014      	beq.n	8008abc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00e      	beq.n	8008abc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6852      	ldr	r2, [r2, #4]
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	4611      	mov	r1, r2
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008abc:	2340      	movs	r3, #64	; 0x40
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f004 f999 	bl	800cdfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2240      	movs	r2, #64	; 0x40
 8008ad4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	2200      	movs	r2, #0
 8008adc:	2180      	movs	r1, #128	; 0x80
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f004 f98b 	bl	800cdfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2240      	movs	r2, #64	; 0x40
 8008aee:	621a      	str	r2, [r3, #32]

  return ret;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d006      	beq.n	8008b3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2204      	movs	r2, #4
 8008b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d106      	bne.n	8008b74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d110      	bne.n	8008bb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00b      	beq.n	8008bb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	32ae      	adds	r2, #174	; 0xae
 8008bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e01c      	b.n	8008c1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d115      	bne.n	8008c1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	32ae      	adds	r2, #174	; 0xae
 8008bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	32ae      	adds	r2, #174	; 0xae
 8008c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	4611      	mov	r1, r2
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	32ae      	adds	r2, #174	; 0xae
 8008c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e01c      	b.n	8008c82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d115      	bne.n	8008c80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	32ae      	adds	r2, #174	; 0xae
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	32ae      	adds	r2, #174	; 0xae
 8008c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	78fa      	ldrb	r2, [r7, #3]
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00e      	beq.n	8008cdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6852      	ldr	r2, [r2, #4]
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	4611      	mov	r1, r2
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b086      	sub	sp, #24
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	885b      	ldrh	r3, [r3, #2]
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d920      	bls.n	8008d84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d4a:	e013      	b.n	8008d74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d4c:	f107 030a 	add.w	r3, r7, #10
 8008d50:	4619      	mov	r1, r3
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f000 f81b 	bl	8008d8e <USBD_GetNextDesc>
 8008d58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d108      	bne.n	8008d74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	789b      	ldrb	r3, [r3, #2]
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d008      	beq.n	8008d82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	885b      	ldrh	r3, [r3, #2]
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	897b      	ldrh	r3, [r7, #10]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d8e5      	bhi.n	8008d4c <USBD_GetEpDesc+0x32>
 8008d80:	e000      	b.n	8008d84 <USBD_GetEpDesc+0x6a>
          break;
 8008d82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d84:	693b      	ldr	r3, [r7, #16]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	881a      	ldrh	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4413      	add	r3, r2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4413      	add	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dba:	68fb      	ldr	r3, [r7, #12]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008de6:	8a3b      	ldrh	r3, [r7, #16]
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	b21a      	sxth	r2, r3
 8008dec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	b21b      	sxth	r3, r3
 8008df4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008df6:	89fb      	ldrh	r3, [r7, #14]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d005      	beq.n	8008e2a <USBD_StdDevReq+0x26>
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d857      	bhi.n	8008ed2 <USBD_StdDevReq+0xce>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00f      	beq.n	8008e46 <USBD_StdDevReq+0x42>
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d153      	bne.n	8008ed2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32ae      	adds	r2, #174	; 0xae
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
      break;
 8008e44:	e04a      	b.n	8008edc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d83b      	bhi.n	8008ec6 <USBD_StdDevReq+0xc2>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <USBD_StdDevReq+0x50>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008ebd 	.word	0x08008ebd
 8008e5c:	08008ec7 	.word	0x08008ec7
 8008e60:	08008eb3 	.word	0x08008eb3
 8008e64:	08008ec7 	.word	0x08008ec7
 8008e68:	08008e87 	.word	0x08008e87
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008ec7 	.word	0x08008ec7
 8008e74:	08008e9f 	.word	0x08008e9f
 8008e78:	08008e91 	.word	0x08008e91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa3c 	bl	80092fc <USBD_GetDescriptor>
          break;
 8008e84:	e024      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fba1 	bl	80095d0 <USBD_SetAddress>
          break;
 8008e8e:	e01f      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fbe0 	bl	8009658 <USBD_SetConfig>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e9c:	e018      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fc83 	bl	80097ac <USBD_GetConfig>
          break;
 8008ea6:	e013      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fcb4 	bl	8009818 <USBD_GetStatus>
          break;
 8008eb0:	e00e      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fce3 	bl	8009880 <USBD_SetFeature>
          break;
 8008eba:	e009      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fd07 	bl	80098d2 <USBD_ClrFeature>
          break;
 8008ec4:	e004      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd5e 	bl	800998a <USBD_CtlError>
          break;
 8008ece:	bf00      	nop
      }
      break;
 8008ed0:	e004      	b.n	8008edc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fd58 	bl	800998a <USBD_CtlError>
      break;
 8008eda:	bf00      	nop
  }

  return ret;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop

08008ee8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d005      	beq.n	8008f0e <USBD_StdItfReq+0x26>
 8008f02:	2b40      	cmp	r3, #64	; 0x40
 8008f04:	d852      	bhi.n	8008fac <USBD_StdItfReq+0xc4>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <USBD_StdItfReq+0x26>
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d14e      	bne.n	8008fac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d840      	bhi.n	8008f9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	889b      	ldrh	r3, [r3, #4]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d836      	bhi.n	8008f94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	889b      	ldrh	r3, [r3, #4]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fed9 	bl	8008ce6 <USBD_CoreFindIF>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2bff      	cmp	r3, #255	; 0xff
 8008f3c:	d01d      	beq.n	8008f7a <USBD_StdItfReq+0x92>
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d11a      	bne.n	8008f7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f44:	7bba      	ldrb	r2, [r7, #14]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	; 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00f      	beq.n	8008f74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f54:	7bba      	ldrb	r2, [r7, #14]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f5c:	7bba      	ldrb	r2, [r7, #14]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	32ae      	adds	r2, #174	; 0xae
 8008f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f72:	e004      	b.n	8008f7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f78:	e001      	b.n	8008f7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88db      	ldrh	r3, [r3, #6]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d110      	bne.n	8008fa8 <USBD_StdItfReq+0xc0>
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10d      	bne.n	8008fa8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fdc7 	bl	8009b20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f92:	e009      	b.n	8008fa8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fcf7 	bl	800998a <USBD_CtlError>
          break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fcf2 	bl	800998a <USBD_CtlError>
          break;
 8008fa6:	e000      	b.n	8008faa <USBD_StdItfReq+0xc2>
          break;
 8008fa8:	bf00      	nop
      }
      break;
 8008faa:	e004      	b.n	8008fb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fceb 	bl	800998a <USBD_CtlError>
      break;
 8008fb4:	bf00      	nop
  }

  return ret;
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	889b      	ldrh	r3, [r3, #4]
 8008fd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d007      	beq.n	8008ff0 <USBD_StdEPReq+0x30>
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	f200 817f 	bhi.w	80092e4 <USBD_StdEPReq+0x324>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d02a      	beq.n	8009040 <USBD_StdEPReq+0x80>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	f040 817a 	bne.w	80092e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fe83 	bl	8008d00 <USBD_CoreFindEP>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ffe:	7b7b      	ldrb	r3, [r7, #13]
 8009000:	2bff      	cmp	r3, #255	; 0xff
 8009002:	f000 8174 	beq.w	80092ee <USBD_StdEPReq+0x32e>
 8009006:	7b7b      	ldrb	r3, [r7, #13]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 8170 	bne.w	80092ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800900e:	7b7a      	ldrb	r2, [r7, #13]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009016:	7b7a      	ldrb	r2, [r7, #13]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	32ae      	adds	r2, #174	; 0xae
 800901c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8163 	beq.w	80092ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009028:	7b7a      	ldrb	r2, [r7, #13]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	; 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800903e:	e156      	b.n	80092ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	2b03      	cmp	r3, #3
 8009046:	d008      	beq.n	800905a <USBD_StdEPReq+0x9a>
 8009048:	2b03      	cmp	r3, #3
 800904a:	f300 8145 	bgt.w	80092d8 <USBD_StdEPReq+0x318>
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 809b 	beq.w	800918a <USBD_StdEPReq+0x1ca>
 8009054:	2b01      	cmp	r3, #1
 8009056:	d03c      	beq.n	80090d2 <USBD_StdEPReq+0x112>
 8009058:	e13e      	b.n	80092d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d002      	beq.n	800906c <USBD_StdEPReq+0xac>
 8009066:	2b03      	cmp	r3, #3
 8009068:	d016      	beq.n	8009098 <USBD_StdEPReq+0xd8>
 800906a:	e02c      	b.n	80090c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <USBD_StdEPReq+0xce>
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b80      	cmp	r3, #128	; 0x80
 8009076:	d00a      	beq.n	800908e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f003 ff01 	bl	800ce84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f003 fefd 	bl	800ce84 <USBD_LL_StallEP>
 800908a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800908c:	e020      	b.n	80090d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fc7a 	bl	800998a <USBD_CtlError>
              break;
 8009096:	e01b      	b.n	80090d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10e      	bne.n	80090be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <USBD_StdEPReq+0xfe>
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b80      	cmp	r3, #128	; 0x80
 80090aa:	d008      	beq.n	80090be <USBD_StdEPReq+0xfe>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	88db      	ldrh	r3, [r3, #6]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d104      	bne.n	80090be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f003 fee3 	bl	800ce84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fd2e 	bl	8009b20 <USBD_CtlSendStatus>

              break;
 80090c4:	e004      	b.n	80090d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc5e 	bl	800998a <USBD_CtlError>
              break;
 80090ce:	bf00      	nop
          }
          break;
 80090d0:	e107      	b.n	80092e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d002      	beq.n	80090e4 <USBD_StdEPReq+0x124>
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d016      	beq.n	8009110 <USBD_StdEPReq+0x150>
 80090e2:	e04b      	b.n	800917c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <USBD_StdEPReq+0x146>
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b80      	cmp	r3, #128	; 0x80
 80090ee:	d00a      	beq.n	8009106 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f003 fec5 	bl	800ce84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f003 fec1 	bl	800ce84 <USBD_LL_StallEP>
 8009102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009104:	e040      	b.n	8009188 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fc3e 	bl	800998a <USBD_CtlError>
              break;
 800910e:	e03b      	b.n	8009188 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d136      	bne.n	8009186 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800911e:	2b00      	cmp	r3, #0
 8009120:	d004      	beq.n	800912c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f003 fecb 	bl	800cec2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fcf7 	bl	8009b20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff fde2 	bl	8008d00 <USBD_CoreFindEP>
 800913c:	4603      	mov	r3, r0
 800913e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009140:	7b7b      	ldrb	r3, [r7, #13]
 8009142:	2bff      	cmp	r3, #255	; 0xff
 8009144:	d01f      	beq.n	8009186 <USBD_StdEPReq+0x1c6>
 8009146:	7b7b      	ldrb	r3, [r7, #13]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11c      	bne.n	8009186 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800914c:	7b7a      	ldrb	r2, [r7, #13]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009154:	7b7a      	ldrb	r2, [r7, #13]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32ae      	adds	r2, #174	; 0xae
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d010      	beq.n	8009186 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009164:	7b7a      	ldrb	r2, [r7, #13]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	32ae      	adds	r2, #174	; 0xae
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800917a:	e004      	b.n	8009186 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fc03 	bl	800998a <USBD_CtlError>
              break;
 8009184:	e000      	b.n	8009188 <USBD_StdEPReq+0x1c8>
              break;
 8009186:	bf00      	nop
          }
          break;
 8009188:	e0ab      	b.n	80092e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d002      	beq.n	800919c <USBD_StdEPReq+0x1dc>
 8009196:	2b03      	cmp	r3, #3
 8009198:	d032      	beq.n	8009200 <USBD_StdEPReq+0x240>
 800919a:	e097      	b.n	80092cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <USBD_StdEPReq+0x1f2>
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	2b80      	cmp	r3, #128	; 0x80
 80091a6:	d004      	beq.n	80091b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fbed 	bl	800998a <USBD_CtlError>
                break;
 80091b0:	e091      	b.n	80092d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da0b      	bge.n	80091d2 <USBD_StdEPReq+0x212>
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	3310      	adds	r3, #16
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	3304      	adds	r3, #4
 80091d0:	e00b      	b.n	80091ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	4413      	add	r3, r2
 80091e8:	3304      	adds	r3, #4
 80091ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2202      	movs	r2, #2
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fc37 	bl	8009a6c <USBD_CtlSendData>
              break;
 80091fe:	e06a      	b.n	80092d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	da11      	bge.n	800922c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	f003 020f 	and.w	r2, r3, #15
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d117      	bne.n	8009252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fbb0 	bl	800998a <USBD_CtlError>
                  break;
 800922a:	e054      	b.n	80092d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	f003 020f 	and.w	r2, r3, #15
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fb9d 	bl	800998a <USBD_CtlError>
                  break;
 8009250:	e041      	b.n	80092d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009252:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	da0b      	bge.n	8009272 <USBD_StdEPReq+0x2b2>
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	3310      	adds	r3, #16
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	3304      	adds	r3, #4
 8009270:	e00b      	b.n	800928a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	3304      	adds	r3, #4
 800928a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <USBD_StdEPReq+0x2d8>
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b80      	cmp	r3, #128	; 0x80
 8009296:	d103      	bne.n	80092a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e00e      	b.n	80092be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f003 fe2b 	bl	800cf00 <USBD_LL_IsStallEP>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	e002      	b.n	80092be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2202      	movs	r2, #2
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fbd1 	bl	8009a6c <USBD_CtlSendData>
              break;
 80092ca:	e004      	b.n	80092d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fb5b 	bl	800998a <USBD_CtlError>
              break;
 80092d4:	bf00      	nop
          }
          break;
 80092d6:	e004      	b.n	80092e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fb55 	bl	800998a <USBD_CtlError>
          break;
 80092e0:	bf00      	nop
      }
      break;
 80092e2:	e005      	b.n	80092f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fb4f 	bl	800998a <USBD_CtlError>
      break;
 80092ec:	e000      	b.n	80092f0 <USBD_StdEPReq+0x330>
      break;
 80092ee:	bf00      	nop
  }

  return ret;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	885b      	ldrh	r3, [r3, #2]
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	2b06      	cmp	r3, #6
 800931e:	f200 8128 	bhi.w	8009572 <USBD_GetDescriptor+0x276>
 8009322:	a201      	add	r2, pc, #4	; (adr r2, 8009328 <USBD_GetDescriptor+0x2c>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	08009345 	.word	0x08009345
 800932c:	0800935d 	.word	0x0800935d
 8009330:	0800939d 	.word	0x0800939d
 8009334:	08009573 	.word	0x08009573
 8009338:	08009573 	.word	0x08009573
 800933c:	08009513 	.word	0x08009513
 8009340:	0800953f 	.word	0x0800953f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
      break;
 800935a:	e112      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7c1b      	ldrb	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10d      	bne.n	8009380 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	f107 0208 	add.w	r2, r7, #8
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	2202      	movs	r2, #2
 800937c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800937e:	e100      	b.n	8009582 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	f107 0208 	add.w	r2, r7, #8
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	2202      	movs	r2, #2
 8009398:	701a      	strb	r2, [r3, #0]
      break;
 800939a:	e0f2      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b05      	cmp	r3, #5
 80093a4:	f200 80ac 	bhi.w	8009500 <USBD_GetDescriptor+0x204>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <USBD_GetDescriptor+0xb4>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c9 	.word	0x080093c9
 80093b4:	080093fd 	.word	0x080093fd
 80093b8:	08009431 	.word	0x08009431
 80093bc:	08009465 	.word	0x08009465
 80093c0:	08009499 	.word	0x08009499
 80093c4:	080094cd 	.word	0x080094cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e091      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 facb 	bl	800998a <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e089      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941e:	e077      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fab1 	bl	800998a <USBD_CtlError>
            err++;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	3301      	adds	r3, #1
 800942c:	72fb      	strb	r3, [r7, #11]
          break;
 800942e:	e06f      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	7c12      	ldrb	r2, [r2, #16]
 8009448:	f107 0108 	add.w	r1, r7, #8
 800944c:	4610      	mov	r0, r2
 800944e:	4798      	blx	r3
 8009450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009452:	e05d      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa97 	bl	800998a <USBD_CtlError>
            err++;
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	3301      	adds	r3, #1
 8009460:	72fb      	strb	r3, [r7, #11]
          break;
 8009462:	e055      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	7c12      	ldrb	r2, [r2, #16]
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	4610      	mov	r0, r2
 8009482:	4798      	blx	r3
 8009484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009486:	e043      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa7d 	bl	800998a <USBD_CtlError>
            err++;
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	3301      	adds	r3, #1
 8009494:	72fb      	strb	r3, [r7, #11]
          break;
 8009496:	e03b      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7c12      	ldrb	r2, [r2, #16]
 80094b0:	f107 0108 	add.w	r1, r7, #8
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ba:	e029      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa63 	bl	800998a <USBD_CtlError>
            err++;
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	3301      	adds	r3, #1
 80094c8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ca:	e021      	b.n	8009510 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	7c12      	ldrb	r2, [r2, #16]
 80094e4:	f107 0108 	add.w	r1, r7, #8
 80094e8:	4610      	mov	r0, r2
 80094ea:	4798      	blx	r3
 80094ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ee:	e00f      	b.n	8009510 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa49 	bl	800998a <USBD_CtlError>
            err++;
 80094f8:	7afb      	ldrb	r3, [r7, #11]
 80094fa:	3301      	adds	r3, #1
 80094fc:	72fb      	strb	r3, [r7, #11]
          break;
 80094fe:	e007      	b.n	8009510 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa41 	bl	800998a <USBD_CtlError>
          err++;
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	3301      	adds	r3, #1
 800950c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800950e:	bf00      	nop
      }
      break;
 8009510:	e037      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7c1b      	ldrb	r3, [r3, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	f107 0208 	add.w	r2, r7, #8
 8009526:	4610      	mov	r0, r2
 8009528:	4798      	blx	r3
 800952a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800952c:	e029      	b.n	8009582 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fa2a 	bl	800998a <USBD_CtlError>
        err++;
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	3301      	adds	r3, #1
 800953a:	72fb      	strb	r3, [r7, #11]
      break;
 800953c:	e021      	b.n	8009582 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7c1b      	ldrb	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10d      	bne.n	8009562 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f107 0208 	add.w	r2, r7, #8
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
 8009556:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	2207      	movs	r2, #7
 800955e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009560:	e00f      	b.n	8009582 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa10 	bl	800998a <USBD_CtlError>
        err++;
 800956a:	7afb      	ldrb	r3, [r7, #11]
 800956c:	3301      	adds	r3, #1
 800956e:	72fb      	strb	r3, [r7, #11]
      break;
 8009570:	e007      	b.n	8009582 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fa08 	bl	800998a <USBD_CtlError>
      err++;
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	3301      	adds	r3, #1
 800957e:	72fb      	strb	r3, [r7, #11]
      break;
 8009580:	bf00      	nop
  }

  if (err != 0U)
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11e      	bne.n	80095c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	88db      	ldrh	r3, [r3, #6]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d016      	beq.n	80095be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009590:	893b      	ldrh	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00e      	beq.n	80095b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	88da      	ldrh	r2, [r3, #6]
 800959a:	893b      	ldrh	r3, [r7, #8]
 800959c:	4293      	cmp	r3, r2
 800959e:	bf28      	it	cs
 80095a0:	4613      	movcs	r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095a6:	893b      	ldrh	r3, [r7, #8]
 80095a8:	461a      	mov	r2, r3
 80095aa:	68f9      	ldr	r1, [r7, #12]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa5d 	bl	8009a6c <USBD_CtlSendData>
 80095b2:	e009      	b.n	80095c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f9e7 	bl	800998a <USBD_CtlError>
 80095bc:	e004      	b.n	80095c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 faae 	bl	8009b20 <USBD_CtlSendStatus>
 80095c4:	e000      	b.n	80095c8 <USBD_GetDescriptor+0x2cc>
    return;
 80095c6:	bf00      	nop
  }
}
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop

080095d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d131      	bne.n	8009646 <USBD_SetAddress+0x76>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	88db      	ldrh	r3, [r3, #6]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d12d      	bne.n	8009646 <USBD_SetAddress+0x76>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	885b      	ldrh	r3, [r3, #2]
 80095ee:	2b7f      	cmp	r3, #127	; 0x7f
 80095f0:	d829      	bhi.n	8009646 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	885b      	ldrh	r3, [r3, #2]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b03      	cmp	r3, #3
 8009608:	d104      	bne.n	8009614 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f9bc 	bl	800998a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009612:	e01d      	b.n	8009650 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7bfa      	ldrb	r2, [r7, #15]
 8009618:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f003 fc99 	bl	800cf58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa7a 	bl	8009b20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2202      	movs	r2, #2
 8009636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963a:	e009      	b.n	8009650 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009644:	e004      	b.n	8009650 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f99e 	bl	800998a <USBD_CtlError>
  }
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	885b      	ldrh	r3, [r3, #2]
 800966a:	b2da      	uxtb	r2, r3
 800966c:	4b4e      	ldr	r3, [pc, #312]	; (80097a8 <USBD_SetConfig+0x150>)
 800966e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009670:	4b4d      	ldr	r3, [pc, #308]	; (80097a8 <USBD_SetConfig+0x150>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d905      	bls.n	8009684 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f985 	bl	800998a <USBD_CtlError>
    return USBD_FAIL;
 8009680:	2303      	movs	r3, #3
 8009682:	e08c      	b.n	800979e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d002      	beq.n	8009696 <USBD_SetConfig+0x3e>
 8009690:	2b03      	cmp	r3, #3
 8009692:	d029      	beq.n	80096e8 <USBD_SetConfig+0x90>
 8009694:	e075      	b.n	8009782 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009696:	4b44      	ldr	r3, [pc, #272]	; (80097a8 <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d020      	beq.n	80096e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800969e:	4b42      	ldr	r3, [pc, #264]	; (80097a8 <USBD_SetConfig+0x150>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096a8:	4b3f      	ldr	r3, [pc, #252]	; (80097a8 <USBD_SetConfig+0x150>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7fe ffe1 	bl	8008676 <USBD_SetClassConfig>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d008      	beq.n	80096d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f962 	bl	800998a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2202      	movs	r2, #2
 80096ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096ce:	e065      	b.n	800979c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fa25 	bl	8009b20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2203      	movs	r2, #3
 80096da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096de:	e05d      	b.n	800979c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fa1d 	bl	8009b20 <USBD_CtlSendStatus>
      break;
 80096e6:	e059      	b.n	800979c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096e8:	4b2f      	ldr	r3, [pc, #188]	; (80097a8 <USBD_SetConfig+0x150>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d112      	bne.n	8009716 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80096f8:	4b2b      	ldr	r3, [pc, #172]	; (80097a8 <USBD_SetConfig+0x150>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009702:	4b29      	ldr	r3, [pc, #164]	; (80097a8 <USBD_SetConfig+0x150>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7fe ffd0 	bl	80086ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa06 	bl	8009b20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009714:	e042      	b.n	800979c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009716:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <USBD_SetConfig+0x150>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d02a      	beq.n	800977a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7fe ffbe 	bl	80086ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009732:	4b1d      	ldr	r3, [pc, #116]	; (80097a8 <USBD_SetConfig+0x150>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800973c:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <USBD_SetConfig+0x150>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fe ff97 	bl	8008676 <USBD_SetClassConfig>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00f      	beq.n	8009772 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f918 	bl	800998a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fe ffa3 	bl	80086ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009770:	e014      	b.n	800979c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f9d4 	bl	8009b20 <USBD_CtlSendStatus>
      break;
 8009778:	e010      	b.n	800979c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f9d0 	bl	8009b20 <USBD_CtlSendStatus>
      break;
 8009780:	e00c      	b.n	800979c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f900 	bl	800998a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <USBD_SetConfig+0x150>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7fe ff8c 	bl	80086ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009796:	2303      	movs	r3, #3
 8009798:	73fb      	strb	r3, [r7, #15]
      break;
 800979a:	bf00      	nop
  }

  return ret;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	240004a8 	.word	0x240004a8

080097ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d004      	beq.n	80097c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f8e2 	bl	800998a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097c6:	e023      	b.n	8009810 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	dc02      	bgt.n	80097da <USBD_GetConfig+0x2e>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dc03      	bgt.n	80097e0 <USBD_GetConfig+0x34>
 80097d8:	e015      	b.n	8009806 <USBD_GetConfig+0x5a>
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d00b      	beq.n	80097f6 <USBD_GetConfig+0x4a>
 80097de:	e012      	b.n	8009806 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3308      	adds	r3, #8
 80097ea:	2201      	movs	r2, #1
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f93c 	bl	8009a6c <USBD_CtlSendData>
        break;
 80097f4:	e00c      	b.n	8009810 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3304      	adds	r3, #4
 80097fa:	2201      	movs	r2, #1
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f934 	bl	8009a6c <USBD_CtlSendData>
        break;
 8009804:	e004      	b.n	8009810 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8be 	bl	800998a <USBD_CtlError>
        break;
 800980e:	bf00      	nop
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009828:	b2db      	uxtb	r3, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	2b02      	cmp	r3, #2
 800982e:	d81e      	bhi.n	800986e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	88db      	ldrh	r3, [r3, #6]
 8009834:	2b02      	cmp	r3, #2
 8009836:	d004      	beq.n	8009842 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f8a5 	bl	800998a <USBD_CtlError>
        break;
 8009840:	e01a      	b.n	8009878 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d005      	beq.n	800985e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f043 0202 	orr.w	r2, r3, #2
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	330c      	adds	r3, #12
 8009862:	2202      	movs	r2, #2
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f900 	bl	8009a6c <USBD_CtlSendData>
      break;
 800986c:	e004      	b.n	8009878 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f88a 	bl	800998a <USBD_CtlError>
      break;
 8009876:	bf00      	nop
  }
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	885b      	ldrh	r3, [r3, #2]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d107      	bne.n	80098a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f940 	bl	8009b20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098a0:	e013      	b.n	80098ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	885b      	ldrh	r3, [r3, #2]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d10b      	bne.n	80098c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	889b      	ldrh	r3, [r3, #4]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f930 	bl	8009b20 <USBD_CtlSendStatus>
}
 80098c0:	e003      	b.n	80098ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f860 	bl	800998a <USBD_CtlError>
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d80b      	bhi.n	8009902 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	885b      	ldrh	r3, [r3, #2]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d10c      	bne.n	800990c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f910 	bl	8009b20 <USBD_CtlSendStatus>
      }
      break;
 8009900:	e004      	b.n	800990c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f840 	bl	800998a <USBD_CtlError>
      break;
 800990a:	e000      	b.n	800990e <USBD_ClrFeature+0x3c>
      break;
 800990c:	bf00      	nop
  }
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	781a      	ldrb	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff fa41 	bl	8008dc8 <SWAPBYTE>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff fa34 	bl	8008dc8 <SWAPBYTE>
 8009960:	4603      	mov	r3, r0
 8009962:	461a      	mov	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3301      	adds	r3, #1
 800996c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff fa27 	bl	8008dc8 <SWAPBYTE>
 800997a:	4603      	mov	r3, r0
 800997c:	461a      	mov	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	80da      	strh	r2, [r3, #6]
}
 8009982:	bf00      	nop
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009994:	2180      	movs	r1, #128	; 0x80
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f003 fa74 	bl	800ce84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800999c:	2100      	movs	r1, #0
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f003 fa70 	bl	800ce84 <USBD_LL_StallEP>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d036      	beq.n	8009a30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099c6:	6938      	ldr	r0, [r7, #16]
 80099c8:	f000 f836 	bl	8009a38 <USBD_GetLen>
 80099cc:	4603      	mov	r3, r0
 80099ce:	3301      	adds	r3, #1
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4413      	add	r3, r2
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	7812      	ldrb	r2, [r2, #0]
 80099e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	3301      	adds	r3, #1
 80099ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4413      	add	r3, r2
 80099f2:	2203      	movs	r2, #3
 80099f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	3301      	adds	r3, #1
 80099fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099fc:	e013      	b.n	8009a26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	4413      	add	r3, r2
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	7812      	ldrb	r2, [r2, #0]
 8009a08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	3301      	adds	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	3301      	adds	r3, #1
 8009a24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e7      	bne.n	80099fe <USBD_GetString+0x52>
 8009a2e:	e000      	b.n	8009a32 <USBD_GetString+0x86>
    return;
 8009a30:	bf00      	nop
  }
}
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a48:	e005      	b.n	8009a56 <USBD_GetLen+0x1e>
  {
    len++;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1f5      	bne.n	8009a4a <USBD_GetLen+0x12>
  }

  return len;
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	2100      	movs	r1, #0
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f003 fa7f 	bl	800cf96 <USBD_LL_Transmit>

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f003 fa6e 	bl	800cf96 <USBD_LL_Transmit>

  return USBD_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	2100      	movs	r1, #0
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f003 fa72 	bl	800cfd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	2100      	movs	r1, #0
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f003 fa61 	bl	800cfd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b30:	2300      	movs	r3, #0
 8009b32:	2200      	movs	r2, #0
 8009b34:	2100      	movs	r1, #0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f003 fa2d 	bl	800cf96 <USBD_LL_Transmit>

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2205      	movs	r2, #5
 8009b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b56:	2300      	movs	r3, #0
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f003 fa3b 	bl	800cfd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <__NVIC_SetPriority>:
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	db0a      	blt.n	8009b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <__NVIC_SetPriority+0x4c>)
 8009b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b8a:	0112      	lsls	r2, r2, #4
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	440b      	add	r3, r1
 8009b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b94:	e00a      	b.n	8009bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	4908      	ldr	r1, [pc, #32]	; (8009bbc <__NVIC_SetPriority+0x50>)
 8009b9c:	88fb      	ldrh	r3, [r7, #6]
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	0112      	lsls	r2, r2, #4
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	440b      	add	r3, r1
 8009baa:	761a      	strb	r2, [r3, #24]
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	e000e100 	.word	0xe000e100
 8009bbc:	e000ed00 	.word	0xe000ed00

08009bc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <SysTick_Handler+0x1c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bc8:	f001 fd28 	bl	800b61c <xTaskGetSchedulerState>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009bd2:	f002 fb11 	bl	800c1f8 <xPortSysTickHandler>
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	e000e010 	.word	0xe000e010

08009be0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009be4:	2100      	movs	r1, #0
 8009be6:	f06f 0004 	mvn.w	r0, #4
 8009bea:	f7ff ffbf 	bl	8009b6c <__NVIC_SetPriority>
#endif
}
 8009bee:	bf00      	nop
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bfa:	f3ef 8305 	mrs	r3, IPSR
 8009bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8009c00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c06:	f06f 0305 	mvn.w	r3, #5
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	e00c      	b.n	8009c28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <osKernelInitialize+0x44>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c16:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <osKernelInitialize+0x44>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	e002      	b.n	8009c28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295
 8009c26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c28:	687b      	ldr	r3, [r7, #4]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	240004ac 	.word	0x240004ac

08009c3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c42:	f3ef 8305 	mrs	r3, IPSR
 8009c46:	603b      	str	r3, [r7, #0]
  return(result);
 8009c48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c4e:	f06f 0305 	mvn.w	r3, #5
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e010      	b.n	8009c78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <osKernelStart+0x48>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d109      	bne.n	8009c72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c5e:	f7ff ffbf 	bl	8009be0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c62:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <osKernelStart+0x48>)
 8009c64:	2202      	movs	r2, #2
 8009c66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c68:	f001 f87c 	bl	800ad64 <vTaskStartScheduler>
      stat = osOK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	607b      	str	r3, [r7, #4]
 8009c70:	e002      	b.n	8009c78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c78:	687b      	ldr	r3, [r7, #4]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	240004ac 	.word	0x240004ac

08009c88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08e      	sub	sp, #56	; 0x38
 8009c8c:	af04      	add	r7, sp, #16
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c98:	f3ef 8305 	mrs	r3, IPSR
 8009c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d17e      	bne.n	8009da2 <osThreadNew+0x11a>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d07b      	beq.n	8009da2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009caa:	2380      	movs	r3, #128	; 0x80
 8009cac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cae:	2318      	movs	r3, #24
 8009cb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d045      	beq.n	8009d4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <osThreadNew+0x48>
        name = attr->name;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d008      	beq.n	8009cf6 <osThreadNew+0x6e>
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b38      	cmp	r3, #56	; 0x38
 8009ce8:	d805      	bhi.n	8009cf6 <osThreadNew+0x6e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <osThreadNew+0x72>
        return (NULL);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e054      	b.n	8009da4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	089b      	lsrs	r3, r3, #2
 8009d08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00e      	beq.n	8009d30 <osThreadNew+0xa8>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	2bbb      	cmp	r3, #187	; 0xbb
 8009d18:	d90a      	bls.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d006      	beq.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <osThreadNew+0xa8>
        mem = 1;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e010      	b.n	8009d52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10c      	bne.n	8009d52 <osThreadNew+0xca>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <osThreadNew+0xca>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <osThreadNew+0xca>
          mem = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61bb      	str	r3, [r7, #24]
 8009d4c:	e001      	b.n	8009d52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d110      	bne.n	8009d7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	6a3a      	ldr	r2, [r7, #32]
 8009d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 fe0c 	bl	800a98c <xTaskCreateStatic>
 8009d74:	4603      	mov	r3, r0
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	e013      	b.n	8009da2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d110      	bne.n	8009da2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	f107 0310 	add.w	r3, r7, #16
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 fe57 	bl	800aa46 <xTaskCreate>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <osThreadNew+0x11a>
            hTask = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009da2:	693b      	ldr	r3, [r7, #16]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3728      	adds	r7, #40	; 0x28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db4:	f3ef 8305 	mrs	r3, IPSR
 8009db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <osDelay+0x1c>
    stat = osErrorISR;
 8009dc0:	f06f 0305 	mvn.w	r3, #5
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e007      	b.n	8009dd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 ff92 	bl	800acfc <vTaskDelay>
    }
  }

  return (stat);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4a07      	ldr	r2, [pc, #28]	; (8009e10 <vApplicationGetIdleTaskMemory+0x2c>)
 8009df4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	4a06      	ldr	r2, [pc, #24]	; (8009e14 <vApplicationGetIdleTaskMemory+0x30>)
 8009dfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2280      	movs	r2, #128	; 0x80
 8009e00:	601a      	str	r2, [r3, #0]
}
 8009e02:	bf00      	nop
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	240004b0 	.word	0x240004b0
 8009e14:	2400056c 	.word	0x2400056c

08009e18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4a07      	ldr	r2, [pc, #28]	; (8009e44 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	4a06      	ldr	r2, [pc, #24]	; (8009e48 <vApplicationGetTimerTaskMemory+0x30>)
 8009e2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e36:	601a      	str	r2, [r3, #0]
}
 8009e38:	bf00      	nop
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	2400076c 	.word	0x2400076c
 8009e48:	24000828 	.word	0x24000828

08009e4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f103 0208 	add.w	r2, r3, #8
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f103 0208 	add.w	r2, r3, #8
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f103 0208 	add.w	r2, r3, #8
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	601a      	str	r2, [r3, #0]
}
 8009ee2:	bf00      	nop
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d103      	bne.n	8009f0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e00c      	b.n	8009f28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	3308      	adds	r3, #8
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e002      	b.n	8009f1c <vListInsert+0x2e>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d2f6      	bcs.n	8009f16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6892      	ldr	r2, [r2, #8]
 8009f76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	6852      	ldr	r2, [r2, #4]
 8009f80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d103      	bne.n	8009f94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	1e5a      	subs	r2, r3, #1
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fde:	f002 f879 	bl	800c0d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fee:	fb01 f303 	mul.w	r3, r1, r3
 8009ff2:	441a      	add	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00e:	3b01      	subs	r3, #1
 800a010:	68f9      	ldr	r1, [r7, #12]
 800a012:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a014:	fb01 f303 	mul.w	r3, r1, r3
 800a018:	441a      	add	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	22ff      	movs	r2, #255	; 0xff
 800a022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	22ff      	movs	r2, #255	; 0xff
 800a02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d114      	bne.n	800a05e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01a      	beq.n	800a072 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3310      	adds	r3, #16
 800a040:	4618      	mov	r0, r3
 800a042:	f001 f929 	bl	800b298 <xTaskRemoveFromEventList>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d012      	beq.n	800a072 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a04c:	4b0c      	ldr	r3, [pc, #48]	; (800a080 <xQueueGenericReset+0xcc>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	e009      	b.n	800a072 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3310      	adds	r3, #16
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff fef2 	bl	8009e4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3324      	adds	r3, #36	; 0x24
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff feed 	bl	8009e4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a072:	f002 f85f 	bl	800c134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a076:	2301      	movs	r3, #1
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	e000ed04 	.word	0xe000ed04

0800a084 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08e      	sub	sp, #56	; 0x38
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <xQueueGenericCreateStatic+0x52>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <xQueueGenericCreateStatic+0x56>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <xQueueGenericCreateStatic+0x58>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	623b      	str	r3, [r7, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d102      	bne.n	800a102 <xQueueGenericCreateStatic+0x7e>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <xQueueGenericCreateStatic+0x82>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <xQueueGenericCreateStatic+0x84>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	61fb      	str	r3, [r7, #28]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a122:	2350      	movs	r3, #80	; 0x50
 800a124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b50      	cmp	r3, #80	; 0x50
 800a12a:	d00a      	beq.n	800a142 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	61bb      	str	r3, [r7, #24]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a142:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00d      	beq.n	800a16a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	2201      	movs	r2, #1
 800a152:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a156:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	4613      	mov	r3, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 f805 	bl	800a174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3730      	adds	r7, #48	; 0x30
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d103      	bne.n	800a190 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e002      	b.n	800a196 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	69b8      	ldr	r0, [r7, #24]
 800a1a6:	f7ff ff05 	bl	8009fb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	78fa      	ldrb	r2, [r7, #3]
 800a1ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1b2:	bf00      	nop
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08e      	sub	sp, #56	; 0x38
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <xQueueGenericSend+0x32>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d103      	bne.n	800a1fc <xQueueGenericSend+0x40>
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <xQueueGenericSend+0x44>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e000      	b.n	800a202 <xQueueGenericSend+0x46>
 800a200:	2300      	movs	r3, #0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <xQueueGenericSend+0x60>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d103      	bne.n	800a22a <xQueueGenericSend+0x6e>
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <xQueueGenericSend+0x72>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e000      	b.n	800a230 <xQueueGenericSend+0x74>
 800a22e:	2300      	movs	r3, #0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10a      	bne.n	800a24a <xQueueGenericSend+0x8e>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	623b      	str	r3, [r7, #32]
}
 800a246:	bf00      	nop
 800a248:	e7fe      	b.n	800a248 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a24a:	f001 f9e7 	bl	800b61c <xTaskGetSchedulerState>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <xQueueGenericSend+0x9e>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <xQueueGenericSend+0xa2>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <xQueueGenericSend+0xa4>
 800a25e:	2300      	movs	r3, #0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xQueueGenericSend+0xbe>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	61fb      	str	r3, [r7, #28]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a27a:	f001 ff2b 	bl	800c0d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	429a      	cmp	r2, r3
 800a288:	d302      	bcc.n	800a290 <xQueueGenericSend+0xd4>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d129      	bne.n	800a2e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	68b9      	ldr	r1, [r7, #8]
 800a294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a296:	f000 fa0b 	bl	800a6b0 <prvCopyDataToQueue>
 800a29a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d010      	beq.n	800a2c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	3324      	adds	r3, #36	; 0x24
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 fff5 	bl	800b298 <xTaskRemoveFromEventList>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d013      	beq.n	800a2dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2b4:	4b3f      	ldr	r3, [pc, #252]	; (800a3b4 <xQueueGenericSend+0x1f8>)
 800a2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	e00a      	b.n	800a2dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d007      	beq.n	800a2dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2cc:	4b39      	ldr	r3, [pc, #228]	; (800a3b4 <xQueueGenericSend+0x1f8>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2dc:	f001 ff2a 	bl	800c134 <vPortExitCritical>
				return pdPASS;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e063      	b.n	800a3ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d103      	bne.n	800a2f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2ea:	f001 ff23 	bl	800c134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e05c      	b.n	800a3ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2f8:	f107 0314 	add.w	r3, r7, #20
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 f82f 	bl	800b360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a302:	2301      	movs	r3, #1
 800a304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a306:	f001 ff15 	bl	800c134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a30a:	f000 fd9b 	bl	800ae44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a30e:	f001 fee1 	bl	800c0d4 <vPortEnterCritical>
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a318:	b25b      	sxtb	r3, r3
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d103      	bne.n	800a328 <xQueueGenericSend+0x16c>
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a32e:	b25b      	sxtb	r3, r3
 800a330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a334:	d103      	bne.n	800a33e <xQueueGenericSend+0x182>
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a33e:	f001 fef9 	bl	800c134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a342:	1d3a      	adds	r2, r7, #4
 800a344:	f107 0314 	add.w	r3, r7, #20
 800a348:	4611      	mov	r1, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f81e 	bl	800b38c <xTaskCheckForTimeOut>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d124      	bne.n	800a3a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a358:	f000 faa2 	bl	800a8a0 <prvIsQueueFull>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d018      	beq.n	800a394 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	3310      	adds	r3, #16
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 ff44 	bl	800b1f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a372:	f000 fa2d 	bl	800a7d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a376:	f000 fd73 	bl	800ae60 <xTaskResumeAll>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f47f af7c 	bne.w	800a27a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a382:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <xQueueGenericSend+0x1f8>)
 800a384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	e772      	b.n	800a27a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a396:	f000 fa1b 	bl	800a7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a39a:	f000 fd61 	bl	800ae60 <xTaskResumeAll>
 800a39e:	e76c      	b.n	800a27a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3a2:	f000 fa15 	bl	800a7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3a6:	f000 fd5b 	bl	800ae60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3738      	adds	r7, #56	; 0x38
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	e000ed04 	.word	0xe000ed04

0800a3b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b090      	sub	sp, #64	; 0x40
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10a      	bne.n	800a3e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3e2:	bf00      	nop
 800a3e4:	e7fe      	b.n	800a3e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d103      	bne.n	800a3f4 <xQueueGenericSendFromISR+0x3c>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <xQueueGenericSendFromISR+0x40>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e000      	b.n	800a3fa <xQueueGenericSendFromISR+0x42>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10a      	bne.n	800a414 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2b02      	cmp	r3, #2
 800a418:	d103      	bne.n	800a422 <xQueueGenericSendFromISR+0x6a>
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <xQueueGenericSendFromISR+0x6e>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <xQueueGenericSendFromISR+0x70>
 800a426:	2300      	movs	r3, #0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	623b      	str	r3, [r7, #32]
}
 800a43e:	bf00      	nop
 800a440:	e7fe      	b.n	800a440 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a442:	f001 ff29 	bl	800c298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a446:	f3ef 8211 	mrs	r2, BASEPRI
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	61fa      	str	r2, [r7, #28]
 800a45c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a45e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a460:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d302      	bcc.n	800a474 <xQueueGenericSendFromISR+0xbc>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d12f      	bne.n	800a4d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a482:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	68b9      	ldr	r1, [r7, #8]
 800a488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a48a:	f000 f911 	bl	800a6b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a48e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a496:	d112      	bne.n	800a4be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d016      	beq.n	800a4ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	3324      	adds	r3, #36	; 0x24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fef7 	bl	800b298 <xTaskRemoveFromEventList>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00e      	beq.n	800a4ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00b      	beq.n	800a4ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	e007      	b.n	800a4ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	b25a      	sxtb	r2, r3
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a4d2:	e001      	b.n	800a4d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3740      	adds	r7, #64	; 0x40
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08c      	sub	sp, #48	; 0x30
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <xQueueReceive+0x30>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	623b      	str	r3, [r7, #32]
}
 800a51c:	bf00      	nop
 800a51e:	e7fe      	b.n	800a51e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d103      	bne.n	800a52e <xQueueReceive+0x3e>
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <xQueueReceive+0x42>
 800a52e:	2301      	movs	r3, #1
 800a530:	e000      	b.n	800a534 <xQueueReceive+0x44>
 800a532:	2300      	movs	r3, #0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xQueueReceive+0x5e>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	61fb      	str	r3, [r7, #28]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a54e:	f001 f865 	bl	800b61c <xTaskGetSchedulerState>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <xQueueReceive+0x6e>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <xQueueReceive+0x72>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <xQueueReceive+0x74>
 800a562:	2300      	movs	r3, #0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10a      	bne.n	800a57e <xQueueReceive+0x8e>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	61bb      	str	r3, [r7, #24]
}
 800a57a:	bf00      	nop
 800a57c:	e7fe      	b.n	800a57c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a57e:	f001 fda9 	bl	800c0d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d01f      	beq.n	800a5ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a592:	f000 f8f7 	bl	800a784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	1e5a      	subs	r2, r3, #1
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00f      	beq.n	800a5c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	3310      	adds	r3, #16
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fe74 	bl	800b298 <xTaskRemoveFromEventList>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5b6:	4b3d      	ldr	r3, [pc, #244]	; (800a6ac <xQueueReceive+0x1bc>)
 800a5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5c6:	f001 fdb5 	bl	800c134 <vPortExitCritical>
				return pdPASS;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e069      	b.n	800a6a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d103      	bne.n	800a5dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5d4:	f001 fdae 	bl	800c134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e062      	b.n	800a6a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5e2:	f107 0310 	add.w	r3, r7, #16
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 feba 	bl	800b360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5f0:	f001 fda0 	bl	800c134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5f4:	f000 fc26 	bl	800ae44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5f8:	f001 fd6c 	bl	800c0d4 <vPortEnterCritical>
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a602:	b25b      	sxtb	r3, r3
 800a604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a608:	d103      	bne.n	800a612 <xQueueReceive+0x122>
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a618:	b25b      	sxtb	r3, r3
 800a61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61e:	d103      	bne.n	800a628 <xQueueReceive+0x138>
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a628:	f001 fd84 	bl	800c134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a62c:	1d3a      	adds	r2, r7, #4
 800a62e:	f107 0310 	add.w	r3, r7, #16
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fea9 	bl	800b38c <xTaskCheckForTimeOut>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d123      	bne.n	800a688 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a642:	f000 f917 	bl	800a874 <prvIsQueueEmpty>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d017      	beq.n	800a67c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	3324      	adds	r3, #36	; 0x24
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fdcf 	bl	800b1f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a65a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65c:	f000 f8b8 	bl	800a7d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a660:	f000 fbfe 	bl	800ae60 <xTaskResumeAll>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d189      	bne.n	800a57e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a66a:	4b10      	ldr	r3, [pc, #64]	; (800a6ac <xQueueReceive+0x1bc>)
 800a66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	e780      	b.n	800a57e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a67e:	f000 f8a7 	bl	800a7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a682:	f000 fbed 	bl	800ae60 <xTaskResumeAll>
 800a686:	e77a      	b.n	800a57e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68a:	f000 f8a1 	bl	800a7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a68e:	f000 fbe7 	bl	800ae60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a694:	f000 f8ee 	bl	800a874 <prvIsQueueEmpty>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f43f af6f 	beq.w	800a57e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3730      	adds	r7, #48	; 0x30
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d14d      	bne.n	800a772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 ffbc 	bl	800b658 <xTaskPriorityDisinherit>
 800a6e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	609a      	str	r2, [r3, #8]
 800a6e8:	e043      	b.n	800a772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d119      	bne.n	800a724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6858      	ldr	r0, [r3, #4]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	f002 fd0a 	bl	800d114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	441a      	add	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	429a      	cmp	r2, r3
 800a718:	d32b      	bcc.n	800a772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	e026      	b.n	800a772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68d8      	ldr	r0, [r3, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	461a      	mov	r2, r3
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	f002 fcf0 	bl	800d114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	425b      	negs	r3, r3
 800a73e:	441a      	add	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d207      	bcs.n	800a760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	425b      	negs	r3, r3
 800a75a:	441a      	add	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d105      	bne.n	800a772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	3b01      	subs	r3, #1
 800a770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a77a:	697b      	ldr	r3, [r7, #20]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d018      	beq.n	800a7c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68da      	ldr	r2, [r3, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79e:	441a      	add	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d303      	bcc.n	800a7b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68d9      	ldr	r1, [r3, #12]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6838      	ldr	r0, [r7, #0]
 800a7c4:	f002 fca6 	bl	800d114 <memcpy>
	}
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7d8:	f001 fc7c 	bl	800c0d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7e4:	e011      	b.n	800a80a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d012      	beq.n	800a814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3324      	adds	r3, #36	; 0x24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fd50 	bl	800b298 <xTaskRemoveFromEventList>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7fe:	f000 fe27 	bl	800b450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	3b01      	subs	r3, #1
 800a806:	b2db      	uxtb	r3, r3
 800a808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dce9      	bgt.n	800a7e6 <prvUnlockQueue+0x16>
 800a812:	e000      	b.n	800a816 <prvUnlockQueue+0x46>
					break;
 800a814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	22ff      	movs	r2, #255	; 0xff
 800a81a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a81e:	f001 fc89 	bl	800c134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a822:	f001 fc57 	bl	800c0d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a82e:	e011      	b.n	800a854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d012      	beq.n	800a85e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3310      	adds	r3, #16
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fd2b 	bl	800b298 <xTaskRemoveFromEventList>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a848:	f000 fe02 	bl	800b450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	3b01      	subs	r3, #1
 800a850:	b2db      	uxtb	r3, r3
 800a852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dce9      	bgt.n	800a830 <prvUnlockQueue+0x60>
 800a85c:	e000      	b.n	800a860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a85e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	22ff      	movs	r2, #255	; 0xff
 800a864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a868:	f001 fc64 	bl	800c134 <vPortExitCritical>
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a87c:	f001 fc2a 	bl	800c0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a888:	2301      	movs	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	e001      	b.n	800a892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a892:	f001 fc4f 	bl	800c134 <vPortExitCritical>

	return xReturn;
 800a896:	68fb      	ldr	r3, [r7, #12]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8a8:	f001 fc14 	bl	800c0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d102      	bne.n	800a8be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e001      	b.n	800a8c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8c2:	f001 fc37 	bl	800c134 <vPortExitCritical>

	return xReturn;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e014      	b.n	800a90a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8e0:	4a0f      	ldr	r2, [pc, #60]	; (800a920 <vQueueAddToRegistry+0x50>)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8ec:	490c      	ldr	r1, [pc, #48]	; (800a920 <vQueueAddToRegistry+0x50>)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8f6:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <vQueueAddToRegistry+0x50>)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	4413      	add	r3, r2
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a902:	e006      	b.n	800a912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	3301      	adds	r3, #1
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b07      	cmp	r3, #7
 800a90e:	d9e7      	bls.n	800a8e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	24000c28 	.word	0x24000c28

0800a924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a934:	f001 fbce 	bl	800c0d4 <vPortEnterCritical>
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d103      	bne.n	800a94e <vQueueWaitForMessageRestricted+0x2a>
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a954:	b25b      	sxtb	r3, r3
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95a:	d103      	bne.n	800a964 <vQueueWaitForMessageRestricted+0x40>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a964:	f001 fbe6 	bl	800c134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3324      	adds	r3, #36	; 0x24
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fc61 	bl	800b240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff ff26 	bl	800a7d0 <prvUnlockQueue>
	}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	; 0x38
 800a990:	af04      	add	r7, sp, #16
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	623b      	str	r3, [r7, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61fb      	str	r3, [r7, #28]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9d2:	23bc      	movs	r3, #188	; 0xbc
 800a9d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2bbc      	cmp	r3, #188	; 0xbc
 800a9da:	d00a      	beq.n	800a9f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	61bb      	str	r3, [r7, #24]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01e      	beq.n	800aa38 <xTaskCreateStatic+0xac>
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01b      	beq.n	800aa38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa12:	2300      	movs	r3, #0
 800aa14:	9303      	str	r3, [sp, #12]
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	f107 0314 	add.w	r3, r7, #20
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 f850 	bl	800aad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa32:	f000 f8f3 	bl	800ac1c <prvAddNewTaskToReadyList>
 800aa36:	e001      	b.n	800aa3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa3c:	697b      	ldr	r3, [r7, #20]
	}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3728      	adds	r7, #40	; 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b08c      	sub	sp, #48	; 0x30
 800aa4a:	af04      	add	r7, sp, #16
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	603b      	str	r3, [r7, #0]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fc5c 	bl	800c318 <pvPortMalloc>
 800aa60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00e      	beq.n	800aa86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa68:	20bc      	movs	r0, #188	; 0xbc
 800aa6a:	f001 fc55 	bl	800c318 <pvPortMalloc>
 800aa6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	631a      	str	r2, [r3, #48]	; 0x30
 800aa7c:	e005      	b.n	800aa8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	f001 fd16 	bl	800c4b0 <vPortFree>
 800aa84:	e001      	b.n	800aa8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d017      	beq.n	800aac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa98:	88fa      	ldrh	r2, [r7, #6]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9303      	str	r3, [sp, #12]
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 f80e 	bl	800aad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aab4:	69f8      	ldr	r0, [r7, #28]
 800aab6:	f000 f8b1 	bl	800ac1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aaba:	2301      	movs	r3, #1
 800aabc:	61bb      	str	r3, [r7, #24]
 800aabe:	e002      	b.n	800aac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295
 800aac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aac6:	69bb      	ldr	r3, [r7, #24]
	}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	461a      	mov	r2, r3
 800aae8:	21a5      	movs	r1, #165	; 0xa5
 800aaea:	f002 fb21 	bl	800d130 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaf2:	6879      	ldr	r1, [r7, #4]
 800aaf4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aaf8:	440b      	add	r3, r1
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	f023 0307 	bic.w	r3, r3, #7
 800ab06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	617b      	str	r3, [r7, #20]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01f      	beq.n	800ab6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	e012      	b.n	800ab5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4413      	add	r3, r2
 800ab3a:	7819      	ldrb	r1, [r3, #0]
 800ab3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	3334      	adds	r3, #52	; 0x34
 800ab44:	460a      	mov	r2, r1
 800ab46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d006      	beq.n	800ab62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	3301      	adds	r3, #1
 800ab58:	61fb      	str	r3, [r7, #28]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	2b0f      	cmp	r3, #15
 800ab5e:	d9e9      	bls.n	800ab34 <prvInitialiseNewTask+0x64>
 800ab60:	e000      	b.n	800ab64 <prvInitialiseNewTask+0x94>
			{
				break;
 800ab62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab6c:	e003      	b.n	800ab76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	2b37      	cmp	r3, #55	; 0x37
 800ab7a:	d901      	bls.n	800ab80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab7c:	2337      	movs	r3, #55	; 0x37
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	2200      	movs	r2, #0
 800ab90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	3304      	adds	r3, #4
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff f978 	bl	8009e8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3318      	adds	r3, #24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff f973 	bl	8009e8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	3354      	adds	r3, #84	; 0x54
 800abd0:	2260      	movs	r2, #96	; 0x60
 800abd2:	2100      	movs	r1, #0
 800abd4:	4618      	mov	r0, r3
 800abd6:	f002 faab 	bl	800d130 <memset>
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	4a0c      	ldr	r2, [pc, #48]	; (800ac10 <prvInitialiseNewTask+0x140>)
 800abde:	659a      	str	r2, [r3, #88]	; 0x58
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	4a0c      	ldr	r2, [pc, #48]	; (800ac14 <prvInitialiseNewTask+0x144>)
 800abe4:	65da      	str	r2, [r3, #92]	; 0x5c
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	4a0b      	ldr	r2, [pc, #44]	; (800ac18 <prvInitialiseNewTask+0x148>)
 800abea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	68f9      	ldr	r1, [r7, #12]
 800abf0:	69b8      	ldr	r0, [r7, #24]
 800abf2:	f001 f941 	bl	800be78 <pxPortInitialiseStack>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac08:	bf00      	nop
 800ac0a:	3720      	adds	r7, #32
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	0800d3e8 	.word	0x0800d3e8
 800ac14:	0800d408 	.word	0x0800d408
 800ac18:	0800d3c8 	.word	0x0800d3c8

0800ac1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac24:	f001 fa56 	bl	800c0d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac28:	4b2d      	ldr	r3, [pc, #180]	; (800ace0 <prvAddNewTaskToReadyList+0xc4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	4a2c      	ldr	r2, [pc, #176]	; (800ace0 <prvAddNewTaskToReadyList+0xc4>)
 800ac30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac32:	4b2c      	ldr	r3, [pc, #176]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d109      	bne.n	800ac4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac3a:	4a2a      	ldr	r2, [pc, #168]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac40:	4b27      	ldr	r3, [pc, #156]	; (800ace0 <prvAddNewTaskToReadyList+0xc4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d110      	bne.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac48:	f000 fc26 	bl	800b498 <prvInitialiseTaskLists>
 800ac4c:	e00d      	b.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac4e:	4b26      	ldr	r3, [pc, #152]	; (800ace8 <prvAddNewTaskToReadyList+0xcc>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d109      	bne.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac56:	4b23      	ldr	r3, [pc, #140]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d802      	bhi.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac64:	4a1f      	ldr	r2, [pc, #124]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac6a:	4b20      	ldr	r3, [pc, #128]	; (800acec <prvAddNewTaskToReadyList+0xd0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	4a1e      	ldr	r2, [pc, #120]	; (800acec <prvAddNewTaskToReadyList+0xd0>)
 800ac72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac74:	4b1d      	ldr	r3, [pc, #116]	; (800acec <prvAddNewTaskToReadyList+0xd0>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4b1b      	ldr	r3, [pc, #108]	; (800acf0 <prvAddNewTaskToReadyList+0xd4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d903      	bls.n	800ac90 <prvAddNewTaskToReadyList+0x74>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8c:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <prvAddNewTaskToReadyList+0xd4>)
 800ac8e:	6013      	str	r3, [r2, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4a15      	ldr	r2, [pc, #84]	; (800acf4 <prvAddNewTaskToReadyList+0xd8>)
 800ac9e:	441a      	add	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4619      	mov	r1, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	f7ff f8fd 	bl	8009ea6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acac:	f001 fa42 	bl	800c134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acb0:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <prvAddNewTaskToReadyList+0xcc>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00e      	beq.n	800acd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acb8:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d207      	bcs.n	800acd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acc6:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <prvAddNewTaskToReadyList+0xdc>)
 800acc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	2400113c 	.word	0x2400113c
 800ace4:	24000c68 	.word	0x24000c68
 800ace8:	24001148 	.word	0x24001148
 800acec:	24001158 	.word	0x24001158
 800acf0:	24001144 	.word	0x24001144
 800acf4:	24000c6c 	.word	0x24000c6c
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d017      	beq.n	800ad3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <vTaskDelay+0x60>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <vTaskDelay+0x30>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60bb      	str	r3, [r7, #8]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad2c:	f000 f88a 	bl	800ae44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad30:	2100      	movs	r1, #0
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fcfe 	bl	800b734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad38:	f000 f892 	bl	800ae60 <xTaskResumeAll>
 800ad3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d107      	bne.n	800ad54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad44:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <vTaskDelay+0x64>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad54:	bf00      	nop
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	24001164 	.word	0x24001164
 800ad60:	e000ed04 	.word	0xe000ed04

0800ad64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08a      	sub	sp, #40	; 0x28
 800ad68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad72:	463a      	mov	r2, r7
 800ad74:	1d39      	adds	r1, r7, #4
 800ad76:	f107 0308 	add.w	r3, r7, #8
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff f832 	bl	8009de4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	9202      	str	r2, [sp, #8]
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	460a      	mov	r2, r1
 800ad92:	4924      	ldr	r1, [pc, #144]	; (800ae24 <vTaskStartScheduler+0xc0>)
 800ad94:	4824      	ldr	r0, [pc, #144]	; (800ae28 <vTaskStartScheduler+0xc4>)
 800ad96:	f7ff fdf9 	bl	800a98c <xTaskCreateStatic>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	4a23      	ldr	r2, [pc, #140]	; (800ae2c <vTaskStartScheduler+0xc8>)
 800ad9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ada0:	4b22      	ldr	r3, [pc, #136]	; (800ae2c <vTaskStartScheduler+0xc8>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ada8:	2301      	movs	r3, #1
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e001      	b.n	800adb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d102      	bne.n	800adbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adb8:	f000 fd10 	bl	800b7dc <xTimerCreateTimerTask>
 800adbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d11b      	bne.n	800adfc <vTaskStartScheduler+0x98>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	613b      	str	r3, [r7, #16]
}
 800add6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800add8:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <vTaskStartScheduler+0xcc>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3354      	adds	r3, #84	; 0x54
 800adde:	4a15      	ldr	r2, [pc, #84]	; (800ae34 <vTaskStartScheduler+0xd0>)
 800ade0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <vTaskStartScheduler+0xd4>)
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295
 800ade8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adea:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <vTaskStartScheduler+0xd8>)
 800adec:	2201      	movs	r2, #1
 800adee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adf0:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <vTaskStartScheduler+0xdc>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adf6:	f001 f8cb 	bl	800bf90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800adfa:	e00e      	b.n	800ae1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae02:	d10a      	bne.n	800ae1a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	60fb      	str	r3, [r7, #12]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <vTaskStartScheduler+0xb4>
}
 800ae1a:	bf00      	nop
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	0800d334 	.word	0x0800d334
 800ae28:	0800b469 	.word	0x0800b469
 800ae2c:	24001160 	.word	0x24001160
 800ae30:	24000c68 	.word	0x24000c68
 800ae34:	24000104 	.word	0x24000104
 800ae38:	2400115c 	.word	0x2400115c
 800ae3c:	24001148 	.word	0x24001148
 800ae40:	24001140 	.word	0x24001140

0800ae44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae44:	b480      	push	{r7}
 800ae46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae48:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <vTaskSuspendAll+0x18>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	4a03      	ldr	r2, [pc, #12]	; (800ae5c <vTaskSuspendAll+0x18>)
 800ae50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae52:	bf00      	nop
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	24001164 	.word	0x24001164

0800ae60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae6e:	4b42      	ldr	r3, [pc, #264]	; (800af78 <xTaskResumeAll+0x118>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10a      	bne.n	800ae8c <xTaskResumeAll+0x2c>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	603b      	str	r3, [r7, #0]
}
 800ae88:	bf00      	nop
 800ae8a:	e7fe      	b.n	800ae8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae8c:	f001 f922 	bl	800c0d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae90:	4b39      	ldr	r3, [pc, #228]	; (800af78 <xTaskResumeAll+0x118>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	4a38      	ldr	r2, [pc, #224]	; (800af78 <xTaskResumeAll+0x118>)
 800ae98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae9a:	4b37      	ldr	r3, [pc, #220]	; (800af78 <xTaskResumeAll+0x118>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d162      	bne.n	800af68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aea2:	4b36      	ldr	r3, [pc, #216]	; (800af7c <xTaskResumeAll+0x11c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d05e      	beq.n	800af68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aeaa:	e02f      	b.n	800af0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeac:	4b34      	ldr	r3, [pc, #208]	; (800af80 <xTaskResumeAll+0x120>)
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3318      	adds	r3, #24
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff f851 	bl	8009f60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff f84c 	bl	8009f60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aecc:	4b2d      	ldr	r3, [pc, #180]	; (800af84 <xTaskResumeAll+0x124>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d903      	bls.n	800aedc <xTaskResumeAll+0x7c>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	4a2a      	ldr	r2, [pc, #168]	; (800af84 <xTaskResumeAll+0x124>)
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4a27      	ldr	r2, [pc, #156]	; (800af88 <xTaskResumeAll+0x128>)
 800aeea:	441a      	add	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3304      	adds	r3, #4
 800aef0:	4619      	mov	r1, r3
 800aef2:	4610      	mov	r0, r2
 800aef4:	f7fe ffd7 	bl	8009ea6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefc:	4b23      	ldr	r3, [pc, #140]	; (800af8c <xTaskResumeAll+0x12c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	429a      	cmp	r2, r3
 800af04:	d302      	bcc.n	800af0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af06:	4b22      	ldr	r3, [pc, #136]	; (800af90 <xTaskResumeAll+0x130>)
 800af08:	2201      	movs	r2, #1
 800af0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af0c:	4b1c      	ldr	r3, [pc, #112]	; (800af80 <xTaskResumeAll+0x120>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1cb      	bne.n	800aeac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af1a:	f000 fb5f 	bl	800b5dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af1e:	4b1d      	ldr	r3, [pc, #116]	; (800af94 <xTaskResumeAll+0x134>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d010      	beq.n	800af4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af2a:	f000 f847 	bl	800afbc <xTaskIncrementTick>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af34:	4b16      	ldr	r3, [pc, #88]	; (800af90 <xTaskResumeAll+0x130>)
 800af36:	2201      	movs	r2, #1
 800af38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1f1      	bne.n	800af2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af46:	4b13      	ldr	r3, [pc, #76]	; (800af94 <xTaskResumeAll+0x134>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af4c:	4b10      	ldr	r3, [pc, #64]	; (800af90 <xTaskResumeAll+0x130>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d009      	beq.n	800af68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af54:	2301      	movs	r3, #1
 800af56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af58:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <xTaskResumeAll+0x138>)
 800af5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af68:	f001 f8e4 	bl	800c134 <vPortExitCritical>

	return xAlreadyYielded;
 800af6c:	68bb      	ldr	r3, [r7, #8]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	24001164 	.word	0x24001164
 800af7c:	2400113c 	.word	0x2400113c
 800af80:	240010fc 	.word	0x240010fc
 800af84:	24001144 	.word	0x24001144
 800af88:	24000c6c 	.word	0x24000c6c
 800af8c:	24000c68 	.word	0x24000c68
 800af90:	24001150 	.word	0x24001150
 800af94:	2400114c 	.word	0x2400114c
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afa2:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <xTaskGetTickCount+0x1c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afa8:	687b      	ldr	r3, [r7, #4]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	24001140 	.word	0x24001140

0800afbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afc6:	4b4f      	ldr	r3, [pc, #316]	; (800b104 <xTaskIncrementTick+0x148>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f040 808f 	bne.w	800b0ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afd0:	4b4d      	ldr	r3, [pc, #308]	; (800b108 <xTaskIncrementTick+0x14c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afd8:	4a4b      	ldr	r2, [pc, #300]	; (800b108 <xTaskIncrementTick+0x14c>)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d120      	bne.n	800b026 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afe4:	4b49      	ldr	r3, [pc, #292]	; (800b10c <xTaskIncrementTick+0x150>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00a      	beq.n	800b004 <xTaskIncrementTick+0x48>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	603b      	str	r3, [r7, #0]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <xTaskIncrementTick+0x46>
 800b004:	4b41      	ldr	r3, [pc, #260]	; (800b10c <xTaskIncrementTick+0x150>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	4b41      	ldr	r3, [pc, #260]	; (800b110 <xTaskIncrementTick+0x154>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a3f      	ldr	r2, [pc, #252]	; (800b10c <xTaskIncrementTick+0x150>)
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	4a3f      	ldr	r2, [pc, #252]	; (800b110 <xTaskIncrementTick+0x154>)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	4b3e      	ldr	r3, [pc, #248]	; (800b114 <xTaskIncrementTick+0x158>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3301      	adds	r3, #1
 800b01e:	4a3d      	ldr	r2, [pc, #244]	; (800b114 <xTaskIncrementTick+0x158>)
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	f000 fadb 	bl	800b5dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b026:	4b3c      	ldr	r3, [pc, #240]	; (800b118 <xTaskIncrementTick+0x15c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d349      	bcc.n	800b0c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b030:	4b36      	ldr	r3, [pc, #216]	; (800b10c <xTaskIncrementTick+0x150>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d104      	bne.n	800b044 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b03a:	4b37      	ldr	r3, [pc, #220]	; (800b118 <xTaskIncrementTick+0x15c>)
 800b03c:	f04f 32ff 	mov.w	r2, #4294967295
 800b040:	601a      	str	r2, [r3, #0]
					break;
 800b042:	e03f      	b.n	800b0c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b044:	4b31      	ldr	r3, [pc, #196]	; (800b10c <xTaskIncrementTick+0x150>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d203      	bcs.n	800b064 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b05c:	4a2e      	ldr	r2, [pc, #184]	; (800b118 <xTaskIncrementTick+0x15c>)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b062:	e02f      	b.n	800b0c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe ff79 	bl	8009f60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	3318      	adds	r3, #24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe ff70 	bl	8009f60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b084:	4b25      	ldr	r3, [pc, #148]	; (800b11c <xTaskIncrementTick+0x160>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d903      	bls.n	800b094 <xTaskIncrementTick+0xd8>
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	4a22      	ldr	r2, [pc, #136]	; (800b11c <xTaskIncrementTick+0x160>)
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b098:	4613      	mov	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4a1f      	ldr	r2, [pc, #124]	; (800b120 <xTaskIncrementTick+0x164>)
 800b0a2:	441a      	add	r2, r3
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	f7fe fefb 	bl	8009ea6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b4:	4b1b      	ldr	r3, [pc, #108]	; (800b124 <xTaskIncrementTick+0x168>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d3b8      	bcc.n	800b030 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0c2:	e7b5      	b.n	800b030 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0c4:	4b17      	ldr	r3, [pc, #92]	; (800b124 <xTaskIncrementTick+0x168>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ca:	4915      	ldr	r1, [pc, #84]	; (800b120 <xTaskIncrementTick+0x164>)
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	440b      	add	r3, r1
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d901      	bls.n	800b0e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0e0:	4b11      	ldr	r3, [pc, #68]	; (800b128 <xTaskIncrementTick+0x16c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d007      	beq.n	800b0f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	e004      	b.n	800b0f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <xTaskIncrementTick+0x170>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	4a0d      	ldr	r2, [pc, #52]	; (800b12c <xTaskIncrementTick+0x170>)
 800b0f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0f8:	697b      	ldr	r3, [r7, #20]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	24001164 	.word	0x24001164
 800b108:	24001140 	.word	0x24001140
 800b10c:	240010f4 	.word	0x240010f4
 800b110:	240010f8 	.word	0x240010f8
 800b114:	24001154 	.word	0x24001154
 800b118:	2400115c 	.word	0x2400115c
 800b11c:	24001144 	.word	0x24001144
 800b120:	24000c6c 	.word	0x24000c6c
 800b124:	24000c68 	.word	0x24000c68
 800b128:	24001150 	.word	0x24001150
 800b12c:	2400114c 	.word	0x2400114c

0800b130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b136:	4b2a      	ldr	r3, [pc, #168]	; (800b1e0 <vTaskSwitchContext+0xb0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b13e:	4b29      	ldr	r3, [pc, #164]	; (800b1e4 <vTaskSwitchContext+0xb4>)
 800b140:	2201      	movs	r2, #1
 800b142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b144:	e046      	b.n	800b1d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b146:	4b27      	ldr	r3, [pc, #156]	; (800b1e4 <vTaskSwitchContext+0xb4>)
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14c:	4b26      	ldr	r3, [pc, #152]	; (800b1e8 <vTaskSwitchContext+0xb8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	e010      	b.n	800b176 <vTaskSwitchContext+0x46>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <vTaskSwitchContext+0x40>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	607b      	str	r3, [r7, #4]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <vTaskSwitchContext+0x3e>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3b01      	subs	r3, #1
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	491d      	ldr	r1, [pc, #116]	; (800b1ec <vTaskSwitchContext+0xbc>)
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	440b      	add	r3, r1
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0e4      	beq.n	800b154 <vTaskSwitchContext+0x24>
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <vTaskSwitchContext+0xbc>)
 800b196:	4413      	add	r3, r2
 800b198:	60bb      	str	r3, [r7, #8]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	605a      	str	r2, [r3, #4]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d104      	bne.n	800b1ba <vTaskSwitchContext+0x8a>
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	605a      	str	r2, [r3, #4]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	4a0b      	ldr	r2, [pc, #44]	; (800b1f0 <vTaskSwitchContext+0xc0>)
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <vTaskSwitchContext+0xb8>)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1ca:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <vTaskSwitchContext+0xc0>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3354      	adds	r3, #84	; 0x54
 800b1d0:	4a08      	ldr	r2, [pc, #32]	; (800b1f4 <vTaskSwitchContext+0xc4>)
 800b1d2:	6013      	str	r3, [r2, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	24001164 	.word	0x24001164
 800b1e4:	24001150 	.word	0x24001150
 800b1e8:	24001144 	.word	0x24001144
 800b1ec:	24000c6c 	.word	0x24000c6c
 800b1f0:	24000c68 	.word	0x24000c68
 800b1f4:	24000104 	.word	0x24000104

0800b1f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	60fb      	str	r3, [r7, #12]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b21e:	4b07      	ldr	r3, [pc, #28]	; (800b23c <vTaskPlaceOnEventList+0x44>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3318      	adds	r3, #24
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7fe fe61 	bl	8009eee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b22c:	2101      	movs	r1, #1
 800b22e:	6838      	ldr	r0, [r7, #0]
 800b230:	f000 fa80 	bl	800b734 <prvAddCurrentTaskToDelayedList>
}
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	24000c68 	.word	0x24000c68

0800b240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	617b      	str	r3, [r7, #20]
}
 800b264:	bf00      	nop
 800b266:	e7fe      	b.n	800b266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b268:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <vTaskPlaceOnEventListRestricted+0x54>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3318      	adds	r3, #24
 800b26e:	4619      	mov	r1, r3
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7fe fe18 	bl	8009ea6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295
 800b280:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	68b8      	ldr	r0, [r7, #8]
 800b286:	f000 fa55 	bl	800b734 <prvAddCurrentTaskToDelayedList>
	}
 800b28a:	bf00      	nop
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	24000c68 	.word	0x24000c68

0800b298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10a      	bne.n	800b2c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	60fb      	str	r3, [r7, #12]
}
 800b2c0:	bf00      	nop
 800b2c2:	e7fe      	b.n	800b2c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	3318      	adds	r3, #24
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe fe49 	bl	8009f60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ce:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <xTaskRemoveFromEventList+0xb0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d11d      	bne.n	800b312 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fe fe40 	bl	8009f60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	4b19      	ldr	r3, [pc, #100]	; (800b34c <xTaskRemoveFromEventList+0xb4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d903      	bls.n	800b2f4 <xTaskRemoveFromEventList+0x5c>
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	4a16      	ldr	r2, [pc, #88]	; (800b34c <xTaskRemoveFromEventList+0xb4>)
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4a13      	ldr	r2, [pc, #76]	; (800b350 <xTaskRemoveFromEventList+0xb8>)
 800b302:	441a      	add	r2, r3
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	3304      	adds	r3, #4
 800b308:	4619      	mov	r1, r3
 800b30a:	4610      	mov	r0, r2
 800b30c:	f7fe fdcb 	bl	8009ea6 <vListInsertEnd>
 800b310:	e005      	b.n	800b31e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	3318      	adds	r3, #24
 800b316:	4619      	mov	r1, r3
 800b318:	480e      	ldr	r0, [pc, #56]	; (800b354 <xTaskRemoveFromEventList+0xbc>)
 800b31a:	f7fe fdc4 	bl	8009ea6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b322:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <xTaskRemoveFromEventList+0xc0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	429a      	cmp	r2, r3
 800b32a:	d905      	bls.n	800b338 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b330:	4b0a      	ldr	r3, [pc, #40]	; (800b35c <xTaskRemoveFromEventList+0xc4>)
 800b332:	2201      	movs	r2, #1
 800b334:	601a      	str	r2, [r3, #0]
 800b336:	e001      	b.n	800b33c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b33c:	697b      	ldr	r3, [r7, #20]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	24001164 	.word	0x24001164
 800b34c:	24001144 	.word	0x24001144
 800b350:	24000c6c 	.word	0x24000c6c
 800b354:	240010fc 	.word	0x240010fc
 800b358:	24000c68 	.word	0x24000c68
 800b35c:	24001150 	.word	0x24001150

0800b360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b368:	4b06      	ldr	r3, [pc, #24]	; (800b384 <vTaskInternalSetTimeOutState+0x24>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b370:	4b05      	ldr	r3, [pc, #20]	; (800b388 <vTaskInternalSetTimeOutState+0x28>)
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	605a      	str	r2, [r3, #4]
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	24001154 	.word	0x24001154
 800b388:	24001140 	.word	0x24001140

0800b38c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	613b      	str	r3, [r7, #16]
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10a      	bne.n	800b3ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	60fb      	str	r3, [r7, #12]
}
 800b3ca:	bf00      	nop
 800b3cc:	e7fe      	b.n	800b3cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3ce:	f000 fe81 	bl	800c0d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3d2:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <xTaskCheckForTimeOut+0xbc>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ea:	d102      	bne.n	800b3f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	61fb      	str	r3, [r7, #28]
 800b3f0:	e023      	b.n	800b43a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	4b15      	ldr	r3, [pc, #84]	; (800b44c <xTaskCheckForTimeOut+0xc0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d007      	beq.n	800b40e <xTaskCheckForTimeOut+0x82>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	d302      	bcc.n	800b40e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b408:	2301      	movs	r3, #1
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	e015      	b.n	800b43a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	429a      	cmp	r2, r3
 800b416:	d20b      	bcs.n	800b430 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	1ad2      	subs	r2, r2, r3
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff ff9b 	bl	800b360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b42a:	2300      	movs	r3, #0
 800b42c:	61fb      	str	r3, [r7, #28]
 800b42e:	e004      	b.n	800b43a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b436:	2301      	movs	r3, #1
 800b438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b43a:	f000 fe7b 	bl	800c134 <vPortExitCritical>

	return xReturn;
 800b43e:	69fb      	ldr	r3, [r7, #28]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3720      	adds	r7, #32
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	24001140 	.word	0x24001140
 800b44c:	24001154 	.word	0x24001154

0800b450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b454:	4b03      	ldr	r3, [pc, #12]	; (800b464 <vTaskMissedYield+0x14>)
 800b456:	2201      	movs	r2, #1
 800b458:	601a      	str	r2, [r3, #0]
}
 800b45a:	bf00      	nop
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	24001150 	.word	0x24001150

0800b468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b470:	f000 f852 	bl	800b518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b474:	4b06      	ldr	r3, [pc, #24]	; (800b490 <prvIdleTask+0x28>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d9f9      	bls.n	800b470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <prvIdleTask+0x2c>)
 800b47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b482:	601a      	str	r2, [r3, #0]
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b48c:	e7f0      	b.n	800b470 <prvIdleTask+0x8>
 800b48e:	bf00      	nop
 800b490:	24000c6c 	.word	0x24000c6c
 800b494:	e000ed04 	.word	0xe000ed04

0800b498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b49e:	2300      	movs	r3, #0
 800b4a0:	607b      	str	r3, [r7, #4]
 800b4a2:	e00c      	b.n	800b4be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4a12      	ldr	r2, [pc, #72]	; (800b4f8 <prvInitialiseTaskLists+0x60>)
 800b4b0:	4413      	add	r3, r2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fcca 	bl	8009e4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	607b      	str	r3, [r7, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b37      	cmp	r3, #55	; 0x37
 800b4c2:	d9ef      	bls.n	800b4a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4c4:	480d      	ldr	r0, [pc, #52]	; (800b4fc <prvInitialiseTaskLists+0x64>)
 800b4c6:	f7fe fcc1 	bl	8009e4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4ca:	480d      	ldr	r0, [pc, #52]	; (800b500 <prvInitialiseTaskLists+0x68>)
 800b4cc:	f7fe fcbe 	bl	8009e4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4d0:	480c      	ldr	r0, [pc, #48]	; (800b504 <prvInitialiseTaskLists+0x6c>)
 800b4d2:	f7fe fcbb 	bl	8009e4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4d6:	480c      	ldr	r0, [pc, #48]	; (800b508 <prvInitialiseTaskLists+0x70>)
 800b4d8:	f7fe fcb8 	bl	8009e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4dc:	480b      	ldr	r0, [pc, #44]	; (800b50c <prvInitialiseTaskLists+0x74>)
 800b4de:	f7fe fcb5 	bl	8009e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4e2:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <prvInitialiseTaskLists+0x78>)
 800b4e4:	4a05      	ldr	r2, [pc, #20]	; (800b4fc <prvInitialiseTaskLists+0x64>)
 800b4e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <prvInitialiseTaskLists+0x7c>)
 800b4ea:	4a05      	ldr	r2, [pc, #20]	; (800b500 <prvInitialiseTaskLists+0x68>)
 800b4ec:	601a      	str	r2, [r3, #0]
}
 800b4ee:	bf00      	nop
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	24000c6c 	.word	0x24000c6c
 800b4fc:	240010cc 	.word	0x240010cc
 800b500:	240010e0 	.word	0x240010e0
 800b504:	240010fc 	.word	0x240010fc
 800b508:	24001110 	.word	0x24001110
 800b50c:	24001128 	.word	0x24001128
 800b510:	240010f4 	.word	0x240010f4
 800b514:	240010f8 	.word	0x240010f8

0800b518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b51e:	e019      	b.n	800b554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b520:	f000 fdd8 	bl	800c0d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b524:	4b10      	ldr	r3, [pc, #64]	; (800b568 <prvCheckTasksWaitingTermination+0x50>)
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4618      	mov	r0, r3
 800b532:	f7fe fd15 	bl	8009f60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b536:	4b0d      	ldr	r3, [pc, #52]	; (800b56c <prvCheckTasksWaitingTermination+0x54>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	4a0b      	ldr	r2, [pc, #44]	; (800b56c <prvCheckTasksWaitingTermination+0x54>)
 800b53e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b540:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <prvCheckTasksWaitingTermination+0x58>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3b01      	subs	r3, #1
 800b546:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <prvCheckTasksWaitingTermination+0x58>)
 800b548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b54a:	f000 fdf3 	bl	800c134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f810 	bl	800b574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b554:	4b06      	ldr	r3, [pc, #24]	; (800b570 <prvCheckTasksWaitingTermination+0x58>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e1      	bne.n	800b520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	24001110 	.word	0x24001110
 800b56c:	2400113c 	.word	0x2400113c
 800b570:	24001124 	.word	0x24001124

0800b574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3354      	adds	r3, #84	; 0x54
 800b580:	4618      	mov	r0, r3
 800b582:	f001 fdeb 	bl	800d15c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d108      	bne.n	800b5a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b594:	4618      	mov	r0, r3
 800b596:	f000 ff8b 	bl	800c4b0 <vPortFree>
				vPortFree( pxTCB );
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 ff88 	bl	800c4b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5a0:	e018      	b.n	800b5d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d103      	bne.n	800b5b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 ff7f 	bl	800c4b0 <vPortFree>
	}
 800b5b2:	e00f      	b.n	800b5d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d00a      	beq.n	800b5d4 <prvDeleteTCB+0x60>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60fb      	str	r3, [r7, #12]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <prvDeleteTCB+0x5e>
	}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e2:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <prvResetNextTaskUnblockTime+0x38>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d104      	bne.n	800b5f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <prvResetNextTaskUnblockTime+0x3c>)
 800b5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5f4:	e008      	b.n	800b608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f6:	4b07      	ldr	r3, [pc, #28]	; (800b614 <prvResetNextTaskUnblockTime+0x38>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4a04      	ldr	r2, [pc, #16]	; (800b618 <prvResetNextTaskUnblockTime+0x3c>)
 800b606:	6013      	str	r3, [r2, #0]
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	240010f4 	.word	0x240010f4
 800b618:	2400115c 	.word	0x2400115c

0800b61c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b622:	4b0b      	ldr	r3, [pc, #44]	; (800b650 <xTaskGetSchedulerState+0x34>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b62a:	2301      	movs	r3, #1
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	e008      	b.n	800b642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b630:	4b08      	ldr	r3, [pc, #32]	; (800b654 <xTaskGetSchedulerState+0x38>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b638:	2302      	movs	r3, #2
 800b63a:	607b      	str	r3, [r7, #4]
 800b63c:	e001      	b.n	800b642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b63e:	2300      	movs	r3, #0
 800b640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b642:	687b      	ldr	r3, [r7, #4]
	}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	24001148 	.word	0x24001148
 800b654:	24001164 	.word	0x24001164

0800b658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b664:	2300      	movs	r3, #0
 800b666:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d056      	beq.n	800b71c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b66e:	4b2e      	ldr	r3, [pc, #184]	; (800b728 <xTaskPriorityDisinherit+0xd0>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	429a      	cmp	r2, r3
 800b676:	d00a      	beq.n	800b68e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	60fb      	str	r3, [r7, #12]
}
 800b68a:	bf00      	nop
 800b68c:	e7fe      	b.n	800b68c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10a      	bne.n	800b6ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	60bb      	str	r3, [r7, #8]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b0:	1e5a      	subs	r2, r3, #1
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d02c      	beq.n	800b71c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d128      	bne.n	800b71c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe fc46 	bl	8009f60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ec:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <xTaskPriorityDisinherit+0xd4>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d903      	bls.n	800b6fc <xTaskPriorityDisinherit+0xa4>
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	4a0c      	ldr	r2, [pc, #48]	; (800b72c <xTaskPriorityDisinherit+0xd4>)
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4a09      	ldr	r2, [pc, #36]	; (800b730 <xTaskPriorityDisinherit+0xd8>)
 800b70a:	441a      	add	r2, r3
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	3304      	adds	r3, #4
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fe fbc7 	bl	8009ea6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b718:	2301      	movs	r3, #1
 800b71a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b71c:	697b      	ldr	r3, [r7, #20]
	}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	24000c68 	.word	0x24000c68
 800b72c:	24001144 	.word	0x24001144
 800b730:	24000c6c 	.word	0x24000c6c

0800b734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b73e:	4b21      	ldr	r3, [pc, #132]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b744:	4b20      	ldr	r3, [pc, #128]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3304      	adds	r3, #4
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fc08 	bl	8009f60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b756:	d10a      	bne.n	800b76e <prvAddCurrentTaskToDelayedList+0x3a>
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d007      	beq.n	800b76e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b75e:	4b1a      	ldr	r3, [pc, #104]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3304      	adds	r3, #4
 800b764:	4619      	mov	r1, r3
 800b766:	4819      	ldr	r0, [pc, #100]	; (800b7cc <prvAddCurrentTaskToDelayedList+0x98>)
 800b768:	f7fe fb9d 	bl	8009ea6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b76c:	e026      	b.n	800b7bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4413      	add	r3, r2
 800b774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b776:	4b14      	ldr	r3, [pc, #80]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	429a      	cmp	r2, r3
 800b784:	d209      	bcs.n	800b79a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b786:	4b12      	ldr	r3, [pc, #72]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3304      	adds	r3, #4
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	f7fe fbab 	bl	8009eee <vListInsert>
}
 800b798:	e010      	b.n	800b7bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b79a:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7fe fba1 	bl	8009eee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d202      	bcs.n	800b7bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7b6:	4a08      	ldr	r2, [pc, #32]	; (800b7d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	6013      	str	r3, [r2, #0]
}
 800b7bc:	bf00      	nop
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	24001140 	.word	0x24001140
 800b7c8:	24000c68 	.word	0x24000c68
 800b7cc:	24001128 	.word	0x24001128
 800b7d0:	240010f8 	.word	0x240010f8
 800b7d4:	240010f4 	.word	0x240010f4
 800b7d8:	2400115c 	.word	0x2400115c

0800b7dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08a      	sub	sp, #40	; 0x28
 800b7e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7e6:	f000 fb07 	bl	800bdf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7ea:	4b1c      	ldr	r3, [pc, #112]	; (800b85c <xTimerCreateTimerTask+0x80>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d021      	beq.n	800b836 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7fa:	1d3a      	adds	r2, r7, #4
 800b7fc:	f107 0108 	add.w	r1, r7, #8
 800b800:	f107 030c 	add.w	r3, r7, #12
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe fb07 	bl	8009e18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	9202      	str	r2, [sp, #8]
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	2302      	movs	r3, #2
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	2300      	movs	r3, #0
 800b81a:	460a      	mov	r2, r1
 800b81c:	4910      	ldr	r1, [pc, #64]	; (800b860 <xTimerCreateTimerTask+0x84>)
 800b81e:	4811      	ldr	r0, [pc, #68]	; (800b864 <xTimerCreateTimerTask+0x88>)
 800b820:	f7ff f8b4 	bl	800a98c <xTaskCreateStatic>
 800b824:	4603      	mov	r3, r0
 800b826:	4a10      	ldr	r2, [pc, #64]	; (800b868 <xTimerCreateTimerTask+0x8c>)
 800b828:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b82a:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <xTimerCreateTimerTask+0x8c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b832:	2301      	movs	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	613b      	str	r3, [r7, #16]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b852:	697b      	ldr	r3, [r7, #20]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	24001198 	.word	0x24001198
 800b860:	0800d33c 	.word	0x0800d33c
 800b864:	0800b9a1 	.word	0x0800b9a1
 800b868:	2400119c 	.word	0x2400119c

0800b86c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08a      	sub	sp, #40	; 0x28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	623b      	str	r3, [r7, #32]
}
 800b896:	bf00      	nop
 800b898:	e7fe      	b.n	800b898 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b89a:	4b1a      	ldr	r3, [pc, #104]	; (800b904 <xTimerGenericCommand+0x98>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d02a      	beq.n	800b8f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	dc18      	bgt.n	800b8e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b8b4:	f7ff feb2 	bl	800b61c <xTaskGetSchedulerState>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d109      	bne.n	800b8d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8be:	4b11      	ldr	r3, [pc, #68]	; (800b904 <xTimerGenericCommand+0x98>)
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	f107 0110 	add.w	r1, r7, #16
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ca:	f7fe fc77 	bl	800a1bc <xQueueGenericSend>
 800b8ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b8d0:	e012      	b.n	800b8f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <xTimerGenericCommand+0x98>)
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	f107 0110 	add.w	r1, r7, #16
 800b8da:	2300      	movs	r3, #0
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f7fe fc6d 	bl	800a1bc <xQueueGenericSend>
 800b8e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b8e4:	e008      	b.n	800b8f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <xTimerGenericCommand+0x98>)
 800b8e8:	6818      	ldr	r0, [r3, #0]
 800b8ea:	f107 0110 	add.w	r1, r7, #16
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	f7fe fd61 	bl	800a3b8 <xQueueGenericSendFromISR>
 800b8f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3728      	adds	r7, #40	; 0x28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	24001198 	.word	0x24001198

0800b908 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b912:	4b22      	ldr	r3, [pc, #136]	; (800b99c <prvProcessExpiredTimer+0x94>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	3304      	adds	r3, #4
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe fb1d 	bl	8009f60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b92c:	f003 0304 	and.w	r3, r3, #4
 800b930:	2b00      	cmp	r3, #0
 800b932:	d022      	beq.n	800b97a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	699a      	ldr	r2, [r3, #24]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	18d1      	adds	r1, r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	6978      	ldr	r0, [r7, #20]
 800b942:	f000 f8d1 	bl	800bae8 <prvInsertTimerInActiveList>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01f      	beq.n	800b98c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b94c:	2300      	movs	r3, #0
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	2300      	movs	r3, #0
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	2100      	movs	r1, #0
 800b956:	6978      	ldr	r0, [r7, #20]
 800b958:	f7ff ff88 	bl	800b86c <xTimerGenericCommand>
 800b95c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d113      	bne.n	800b98c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	60fb      	str	r3, [r7, #12]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b980:	f023 0301 	bic.w	r3, r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	6978      	ldr	r0, [r7, #20]
 800b992:	4798      	blx	r3
}
 800b994:	bf00      	nop
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	24001190 	.word	0x24001190

0800b9a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9a8:	f107 0308 	add.w	r3, r7, #8
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 f857 	bl	800ba60 <prvGetNextExpireTime>
 800b9b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 f803 	bl	800b9c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9be:	f000 f8d5 	bl	800bb6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9c2:	e7f1      	b.n	800b9a8 <prvTimerTask+0x8>

0800b9c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9ce:	f7ff fa39 	bl	800ae44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9d2:	f107 0308 	add.w	r3, r7, #8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 f866 	bl	800baa8 <prvSampleTimeNow>
 800b9dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d130      	bne.n	800ba46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10a      	bne.n	800ba00 <prvProcessTimerOrBlockTask+0x3c>
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d806      	bhi.n	800ba00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9f2:	f7ff fa35 	bl	800ae60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9f6:	68f9      	ldr	r1, [r7, #12]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7ff ff85 	bl	800b908 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9fe:	e024      	b.n	800ba4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d008      	beq.n	800ba18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba06:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <prvProcessTimerOrBlockTask+0x90>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <prvProcessTimerOrBlockTask+0x50>
 800ba10:	2301      	movs	r3, #1
 800ba12:	e000      	b.n	800ba16 <prvProcessTimerOrBlockTask+0x52>
 800ba14:	2300      	movs	r3, #0
 800ba16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba18:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <prvProcessTimerOrBlockTask+0x94>)
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4619      	mov	r1, r3
 800ba26:	f7fe ff7d 	bl	800a924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba2a:	f7ff fa19 	bl	800ae60 <xTaskResumeAll>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba34:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <prvProcessTimerOrBlockTask+0x98>)
 800ba36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	f3bf 8f6f 	isb	sy
}
 800ba44:	e001      	b.n	800ba4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba46:	f7ff fa0b 	bl	800ae60 <xTaskResumeAll>
}
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	24001194 	.word	0x24001194
 800ba58:	24001198 	.word	0x24001198
 800ba5c:	e000ed04 	.word	0xe000ed04

0800ba60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba68:	4b0e      	ldr	r3, [pc, #56]	; (800baa4 <prvGetNextExpireTime+0x44>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <prvGetNextExpireTime+0x16>
 800ba72:	2201      	movs	r2, #1
 800ba74:	e000      	b.n	800ba78 <prvGetNextExpireTime+0x18>
 800ba76:	2200      	movs	r2, #0
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d105      	bne.n	800ba90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba84:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <prvGetNextExpireTime+0x44>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	e001      	b.n	800ba94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba94:	68fb      	ldr	r3, [r7, #12]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	24001190 	.word	0x24001190

0800baa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bab0:	f7ff fa74 	bl	800af9c <xTaskGetTickCount>
 800bab4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bab6:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <prvSampleTimeNow+0x3c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	429a      	cmp	r2, r3
 800babe:	d205      	bcs.n	800bacc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bac0:	f000 f936 	bl	800bd30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	e002      	b.n	800bad2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bad2:	4a04      	ldr	r2, [pc, #16]	; (800bae4 <prvSampleTimeNow+0x3c>)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bad8:	68fb      	ldr	r3, [r7, #12]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	240011a0 	.word	0x240011a0

0800bae8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d812      	bhi.n	800bb34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	1ad2      	subs	r2, r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d302      	bcc.n	800bb22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]
 800bb20:	e01b      	b.n	800bb5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb22:	4b10      	ldr	r3, [pc, #64]	; (800bb64 <prvInsertTimerInActiveList+0x7c>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f7fe f9de 	bl	8009eee <vListInsert>
 800bb32:	e012      	b.n	800bb5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d206      	bcs.n	800bb4a <prvInsertTimerInActiveList+0x62>
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d302      	bcc.n	800bb4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb44:	2301      	movs	r3, #1
 800bb46:	617b      	str	r3, [r7, #20]
 800bb48:	e007      	b.n	800bb5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb4a:	4b07      	ldr	r3, [pc, #28]	; (800bb68 <prvInsertTimerInActiveList+0x80>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3304      	adds	r3, #4
 800bb52:	4619      	mov	r1, r3
 800bb54:	4610      	mov	r0, r2
 800bb56:	f7fe f9ca 	bl	8009eee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb5a:	697b      	ldr	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	24001194 	.word	0x24001194
 800bb68:	24001190 	.word	0x24001190

0800bb6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08e      	sub	sp, #56	; 0x38
 800bb70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb72:	e0ca      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	da18      	bge.n	800bbac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb7a:	1d3b      	adds	r3, r7, #4
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10a      	bne.n	800bb9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	61fb      	str	r3, [r7, #28]
}
 800bb98:	bf00      	nop
 800bb9a:	e7fe      	b.n	800bb9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba2:	6850      	ldr	r0, [r2, #4]
 800bba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba6:	6892      	ldr	r2, [r2, #8]
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f2c0 80aa 	blt.w	800bd08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d004      	beq.n	800bbca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fe f9cb 	bl	8009f60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbca:	463b      	mov	r3, r7
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff ff6b 	bl	800baa8 <prvSampleTimeNow>
 800bbd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b09      	cmp	r3, #9
 800bbd8:	f200 8097 	bhi.w	800bd0a <prvProcessReceivedCommands+0x19e>
 800bbdc:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <prvProcessReceivedCommands+0x78>)
 800bbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe2:	bf00      	nop
 800bbe4:	0800bc0d 	.word	0x0800bc0d
 800bbe8:	0800bc0d 	.word	0x0800bc0d
 800bbec:	0800bc0d 	.word	0x0800bc0d
 800bbf0:	0800bc81 	.word	0x0800bc81
 800bbf4:	0800bc95 	.word	0x0800bc95
 800bbf8:	0800bcdf 	.word	0x0800bcdf
 800bbfc:	0800bc0d 	.word	0x0800bc0d
 800bc00:	0800bc0d 	.word	0x0800bc0d
 800bc04:	0800bc81 	.word	0x0800bc81
 800bc08:	0800bc95 	.word	0x0800bc95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc12:	f043 0301 	orr.w	r3, r3, #1
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	18d1      	adds	r1, r2, r3
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc2c:	f7ff ff5c 	bl	800bae8 <prvInsertTimerInActiveList>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d069      	beq.n	800bd0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d05e      	beq.n	800bd0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	441a      	add	r2, r3
 800bc54:	2300      	movs	r3, #0
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc5e:	f7ff fe05 	bl	800b86c <xTimerGenericCommand>
 800bc62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d14f      	bne.n	800bd0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	61bb      	str	r3, [r7, #24]
}
 800bc7c:	bf00      	nop
 800bc7e:	e7fe      	b.n	800bc7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc86:	f023 0301 	bic.w	r3, r3, #1
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc92:	e03a      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc9a:	f043 0301 	orr.w	r3, r3, #1
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	617b      	str	r3, [r7, #20]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	18d1      	adds	r1, r2, r3
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd8:	f7ff ff06 	bl	800bae8 <prvInsertTimerInActiveList>
					break;
 800bcdc:	e015      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d103      	bne.n	800bcf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bcec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcee:	f000 fbdf 	bl	800c4b0 <vPortFree>
 800bcf2:	e00a      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcfa:	f023 0301 	bic.w	r3, r3, #1
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd06:	e000      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd0a:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <prvProcessReceivedCommands+0x1c0>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	1d39      	adds	r1, r7, #4
 800bd10:	2200      	movs	r2, #0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe fbec 	bl	800a4f0 <xQueueReceive>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f47f af2a 	bne.w	800bb74 <prvProcessReceivedCommands+0x8>
	}
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	3730      	adds	r7, #48	; 0x30
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	24001198 	.word	0x24001198

0800bd30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd36:	e048      	b.n	800bdca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd38:	4b2d      	ldr	r3, [pc, #180]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd42:	4b2b      	ldr	r3, [pc, #172]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fe f905 	bl	8009f60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d02e      	beq.n	800bdca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	4413      	add	r3, r2
 800bd74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d90e      	bls.n	800bd9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd8a:	4b19      	ldr	r3, [pc, #100]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4619      	mov	r1, r3
 800bd94:	4610      	mov	r0, r2
 800bd96:	f7fe f8aa 	bl	8009eee <vListInsert>
 800bd9a:	e016      	b.n	800bdca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	2300      	movs	r3, #0
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	2100      	movs	r1, #0
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7ff fd60 	bl	800b86c <xTimerGenericCommand>
 800bdac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	603b      	str	r3, [r7, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1b1      	bne.n	800bd38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdd4:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdda:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <prvSwitchTimerLists+0xc4>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a04      	ldr	r2, [pc, #16]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bde0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bde2:	4a04      	ldr	r2, [pc, #16]	; (800bdf4 <prvSwitchTimerLists+0xc4>)
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	6013      	str	r3, [r2, #0]
}
 800bde8:	bf00      	nop
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	24001190 	.word	0x24001190
 800bdf4:	24001194 	.word	0x24001194

0800bdf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdfe:	f000 f969 	bl	800c0d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be02:	4b15      	ldr	r3, [pc, #84]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d120      	bne.n	800be4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be0a:	4814      	ldr	r0, [pc, #80]	; (800be5c <prvCheckForValidListAndQueue+0x64>)
 800be0c:	f7fe f81e 	bl	8009e4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be10:	4813      	ldr	r0, [pc, #76]	; (800be60 <prvCheckForValidListAndQueue+0x68>)
 800be12:	f7fe f81b 	bl	8009e4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be16:	4b13      	ldr	r3, [pc, #76]	; (800be64 <prvCheckForValidListAndQueue+0x6c>)
 800be18:	4a10      	ldr	r2, [pc, #64]	; (800be5c <prvCheckForValidListAndQueue+0x64>)
 800be1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be1c:	4b12      	ldr	r3, [pc, #72]	; (800be68 <prvCheckForValidListAndQueue+0x70>)
 800be1e:	4a10      	ldr	r2, [pc, #64]	; (800be60 <prvCheckForValidListAndQueue+0x68>)
 800be20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be22:	2300      	movs	r3, #0
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4b11      	ldr	r3, [pc, #68]	; (800be6c <prvCheckForValidListAndQueue+0x74>)
 800be28:	4a11      	ldr	r2, [pc, #68]	; (800be70 <prvCheckForValidListAndQueue+0x78>)
 800be2a:	2110      	movs	r1, #16
 800be2c:	200a      	movs	r0, #10
 800be2e:	f7fe f929 	bl	800a084 <xQueueGenericCreateStatic>
 800be32:	4603      	mov	r3, r0
 800be34:	4a08      	ldr	r2, [pc, #32]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be38:	4b07      	ldr	r3, [pc, #28]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d005      	beq.n	800be4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be40:	4b05      	ldr	r3, [pc, #20]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	490b      	ldr	r1, [pc, #44]	; (800be74 <prvCheckForValidListAndQueue+0x7c>)
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fd42 	bl	800a8d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be4c:	f000 f972 	bl	800c134 <vPortExitCritical>
}
 800be50:	bf00      	nop
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	24001198 	.word	0x24001198
 800be5c:	24001168 	.word	0x24001168
 800be60:	2400117c 	.word	0x2400117c
 800be64:	24001190 	.word	0x24001190
 800be68:	24001194 	.word	0x24001194
 800be6c:	24001244 	.word	0x24001244
 800be70:	240011a4 	.word	0x240011a4
 800be74:	0800d344 	.word	0x0800d344

0800be78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3b04      	subs	r3, #4
 800be88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3b04      	subs	r3, #4
 800be96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f023 0201 	bic.w	r2, r3, #1
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3b04      	subs	r3, #4
 800bea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bea8:	4a0c      	ldr	r2, [pc, #48]	; (800bedc <pxPortInitialiseStack+0x64>)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3b14      	subs	r3, #20
 800beb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3b04      	subs	r3, #4
 800bebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f06f 0202 	mvn.w	r2, #2
 800bec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3b20      	subs	r3, #32
 800becc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bece:	68fb      	ldr	r3, [r7, #12]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	0800bee1 	.word	0x0800bee1

0800bee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beea:	4b12      	ldr	r3, [pc, #72]	; (800bf34 <prvTaskExitError+0x54>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef2:	d00a      	beq.n	800bf0a <prvTaskExitError+0x2a>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	60fb      	str	r3, [r7, #12]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <prvTaskExitError+0x28>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	60bb      	str	r3, [r7, #8]
}
 800bf1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf1e:	bf00      	nop
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0fc      	beq.n	800bf20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	2400009c 	.word	0x2400009c
	...

0800bf40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf40:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <pxCurrentTCBConst2>)
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	6808      	ldr	r0, [r1, #0]
 800bf46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	f380 8809 	msr	PSP, r0
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8811 	msr	BASEPRI, r0
 800bf5a:	4770      	bx	lr
 800bf5c:	f3af 8000 	nop.w

0800bf60 <pxCurrentTCBConst2>:
 800bf60:	24000c68 	.word	0x24000c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop

0800bf68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf68:	4808      	ldr	r0, [pc, #32]	; (800bf8c <prvPortStartFirstTask+0x24>)
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	f380 8808 	msr	MSP, r0
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f380 8814 	msr	CONTROL, r0
 800bf7a:	b662      	cpsie	i
 800bf7c:	b661      	cpsie	f
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	df00      	svc	0
 800bf88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf8a:	bf00      	nop
 800bf8c:	e000ed08 	.word	0xe000ed08

0800bf90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf96:	4b46      	ldr	r3, [pc, #280]	; (800c0b0 <xPortStartScheduler+0x120>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a46      	ldr	r2, [pc, #280]	; (800c0b4 <xPortStartScheduler+0x124>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d10a      	bne.n	800bfb6 <xPortStartScheduler+0x26>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	613b      	str	r3, [r7, #16]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfb6:	4b3e      	ldr	r3, [pc, #248]	; (800c0b0 <xPortStartScheduler+0x120>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a3f      	ldr	r2, [pc, #252]	; (800c0b8 <xPortStartScheduler+0x128>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d10a      	bne.n	800bfd6 <xPortStartScheduler+0x46>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	60fb      	str	r3, [r7, #12]
}
 800bfd2:	bf00      	nop
 800bfd4:	e7fe      	b.n	800bfd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfd6:	4b39      	ldr	r3, [pc, #228]	; (800c0bc <xPortStartScheduler+0x12c>)
 800bfd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	22ff      	movs	r2, #255	; 0xff
 800bfe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	4b31      	ldr	r3, [pc, #196]	; (800c0c0 <xPortStartScheduler+0x130>)
 800bffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bffe:	4b31      	ldr	r3, [pc, #196]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c000:	2207      	movs	r2, #7
 800c002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c004:	e009      	b.n	800c01a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c006:	4b2f      	ldr	r3, [pc, #188]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	4a2d      	ldr	r2, [pc, #180]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c00e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c010:	78fb      	ldrb	r3, [r7, #3]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	b2db      	uxtb	r3, r3
 800c018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c01a:	78fb      	ldrb	r3, [r7, #3]
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c022:	2b80      	cmp	r3, #128	; 0x80
 800c024:	d0ef      	beq.n	800c006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c026:	4b27      	ldr	r3, [pc, #156]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f1c3 0307 	rsb	r3, r3, #7
 800c02e:	2b04      	cmp	r3, #4
 800c030:	d00a      	beq.n	800c048 <xPortStartScheduler+0xb8>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	60bb      	str	r3, [r7, #8]
}
 800c044:	bf00      	nop
 800c046:	e7fe      	b.n	800c046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c048:	4b1e      	ldr	r3, [pc, #120]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	021b      	lsls	r3, r3, #8
 800c04e:	4a1d      	ldr	r2, [pc, #116]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c052:	4b1c      	ldr	r3, [pc, #112]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c05a:	4a1a      	ldr	r2, [pc, #104]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c05c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	b2da      	uxtb	r2, r3
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c066:	4b18      	ldr	r3, [pc, #96]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a17      	ldr	r2, [pc, #92]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c06c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c072:	4b15      	ldr	r3, [pc, #84]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a14      	ldr	r2, [pc, #80]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c07c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c07e:	f000 f8dd 	bl	800c23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c082:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <xPortStartScheduler+0x13c>)
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c088:	f000 f8fc 	bl	800c284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c08c:	4b10      	ldr	r3, [pc, #64]	; (800c0d0 <xPortStartScheduler+0x140>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a0f      	ldr	r2, [pc, #60]	; (800c0d0 <xPortStartScheduler+0x140>)
 800c092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c098:	f7ff ff66 	bl	800bf68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c09c:	f7ff f848 	bl	800b130 <vTaskSwitchContext>
	prvTaskExitError();
 800c0a0:	f7ff ff1e 	bl	800bee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	e000ed00 	.word	0xe000ed00
 800c0b4:	410fc271 	.word	0x410fc271
 800c0b8:	410fc270 	.word	0x410fc270
 800c0bc:	e000e400 	.word	0xe000e400
 800c0c0:	24001294 	.word	0x24001294
 800c0c4:	24001298 	.word	0x24001298
 800c0c8:	e000ed20 	.word	0xe000ed20
 800c0cc:	2400009c 	.word	0x2400009c
 800c0d0:	e000ef34 	.word	0xe000ef34

0800c0d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	607b      	str	r3, [r7, #4]
}
 800c0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <vPortEnterCritical+0x58>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4a0d      	ldr	r2, [pc, #52]	; (800c12c <vPortEnterCritical+0x58>)
 800c0f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0f8:	4b0c      	ldr	r3, [pc, #48]	; (800c12c <vPortEnterCritical+0x58>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d10f      	bne.n	800c120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <vPortEnterCritical+0x5c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <vPortEnterCritical+0x4c>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	603b      	str	r3, [r7, #0]
}
 800c11c:	bf00      	nop
 800c11e:	e7fe      	b.n	800c11e <vPortEnterCritical+0x4a>
	}
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	2400009c 	.word	0x2400009c
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c13a:	4b12      	ldr	r3, [pc, #72]	; (800c184 <vPortExitCritical+0x50>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10a      	bne.n	800c158 <vPortExitCritical+0x24>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	607b      	str	r3, [r7, #4]
}
 800c154:	bf00      	nop
 800c156:	e7fe      	b.n	800c156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c158:	4b0a      	ldr	r3, [pc, #40]	; (800c184 <vPortExitCritical+0x50>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	4a09      	ldr	r2, [pc, #36]	; (800c184 <vPortExitCritical+0x50>)
 800c160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c162:	4b08      	ldr	r3, [pc, #32]	; (800c184 <vPortExitCritical+0x50>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d105      	bne.n	800c176 <vPortExitCritical+0x42>
 800c16a:	2300      	movs	r3, #0
 800c16c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	f383 8811 	msr	BASEPRI, r3
}
 800c174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	2400009c 	.word	0x2400009c
	...

0800c190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c190:	f3ef 8009 	mrs	r0, PSP
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	4b15      	ldr	r3, [pc, #84]	; (800c1f0 <pxCurrentTCBConst>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	f01e 0f10 	tst.w	lr, #16
 800c1a0:	bf08      	it	eq
 800c1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1aa:	6010      	str	r0, [r2, #0]
 800c1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1b4:	f380 8811 	msr	BASEPRI, r0
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f7fe ffb6 	bl	800b130 <vTaskSwitchContext>
 800c1c4:	f04f 0000 	mov.w	r0, #0
 800c1c8:	f380 8811 	msr	BASEPRI, r0
 800c1cc:	bc09      	pop	{r0, r3}
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	6808      	ldr	r0, [r1, #0]
 800c1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d6:	f01e 0f10 	tst.w	lr, #16
 800c1da:	bf08      	it	eq
 800c1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1e0:	f380 8809 	msr	PSP, r0
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	f3af 8000 	nop.w

0800c1f0 <pxCurrentTCBConst>:
 800c1f0:	24000c68 	.word	0x24000c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop

0800c1f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	607b      	str	r3, [r7, #4]
}
 800c210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c212:	f7fe fed3 	bl	800afbc <xTaskIncrementTick>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c21c:	4b06      	ldr	r3, [pc, #24]	; (800c238 <xPortSysTickHandler+0x40>)
 800c21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	2300      	movs	r3, #0
 800c226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f383 8811 	msr	BASEPRI, r3
}
 800c22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	e000ed04 	.word	0xe000ed04

0800c23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c240:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c246:	4b0b      	ldr	r3, [pc, #44]	; (800c274 <vPortSetupTimerInterrupt+0x38>)
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <vPortSetupTimerInterrupt+0x3c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0a      	ldr	r2, [pc, #40]	; (800c27c <vPortSetupTimerInterrupt+0x40>)
 800c252:	fba2 2303 	umull	r2, r3, r2, r3
 800c256:	099b      	lsrs	r3, r3, #6
 800c258:	4a09      	ldr	r2, [pc, #36]	; (800c280 <vPortSetupTimerInterrupt+0x44>)
 800c25a:	3b01      	subs	r3, #1
 800c25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c25e:	4b04      	ldr	r3, [pc, #16]	; (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c260:	2207      	movs	r2, #7
 800c262:	601a      	str	r2, [r3, #0]
}
 800c264:	bf00      	nop
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	e000e010 	.word	0xe000e010
 800c274:	e000e018 	.word	0xe000e018
 800c278:	24000000 	.word	0x24000000
 800c27c:	10624dd3 	.word	0x10624dd3
 800c280:	e000e014 	.word	0xe000e014

0800c284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c294 <vPortEnableVFP+0x10>
 800c288:	6801      	ldr	r1, [r0, #0]
 800c28a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c28e:	6001      	str	r1, [r0, #0]
 800c290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c292:	bf00      	nop
 800c294:	e000ed88 	.word	0xe000ed88

0800c298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c29e:	f3ef 8305 	mrs	r3, IPSR
 800c2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b0f      	cmp	r3, #15
 800c2a8:	d914      	bls.n	800c2d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2aa:	4a17      	ldr	r2, [pc, #92]	; (800c308 <vPortValidateInterruptPriority+0x70>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2b4:	4b15      	ldr	r3, [pc, #84]	; (800c30c <vPortValidateInterruptPriority+0x74>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	7afa      	ldrb	r2, [r7, #11]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d20a      	bcs.n	800c2d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	607b      	str	r3, [r7, #4]
}
 800c2d0:	bf00      	nop
 800c2d2:	e7fe      	b.n	800c2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2d4:	4b0e      	ldr	r3, [pc, #56]	; (800c310 <vPortValidateInterruptPriority+0x78>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <vPortValidateInterruptPriority+0x7c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d90a      	bls.n	800c2fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	603b      	str	r3, [r7, #0]
}
 800c2f6:	bf00      	nop
 800c2f8:	e7fe      	b.n	800c2f8 <vPortValidateInterruptPriority+0x60>
	}
 800c2fa:	bf00      	nop
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	e000e3f0 	.word	0xe000e3f0
 800c30c:	24001294 	.word	0x24001294
 800c310:	e000ed0c 	.word	0xe000ed0c
 800c314:	24001298 	.word	0x24001298

0800c318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c320:	2300      	movs	r3, #0
 800c322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c324:	f7fe fd8e 	bl	800ae44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c328:	4b5b      	ldr	r3, [pc, #364]	; (800c498 <pvPortMalloc+0x180>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c330:	f000 f920 	bl	800c574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c334:	4b59      	ldr	r3, [pc, #356]	; (800c49c <pvPortMalloc+0x184>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4013      	ands	r3, r2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f040 8093 	bne.w	800c468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d01d      	beq.n	800c384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c348:	2208      	movs	r2, #8
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4413      	add	r3, r2
 800c34e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f003 0307 	and.w	r3, r3, #7
 800c356:	2b00      	cmp	r3, #0
 800c358:	d014      	beq.n	800c384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f023 0307 	bic.w	r3, r3, #7
 800c360:	3308      	adds	r3, #8
 800c362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <pvPortMalloc+0x6c>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	617b      	str	r3, [r7, #20]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d06e      	beq.n	800c468 <pvPortMalloc+0x150>
 800c38a:	4b45      	ldr	r3, [pc, #276]	; (800c4a0 <pvPortMalloc+0x188>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	429a      	cmp	r2, r3
 800c392:	d869      	bhi.n	800c468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c394:	4b43      	ldr	r3, [pc, #268]	; (800c4a4 <pvPortMalloc+0x18c>)
 800c396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c398:	4b42      	ldr	r3, [pc, #264]	; (800c4a4 <pvPortMalloc+0x18c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c39e:	e004      	b.n	800c3aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d903      	bls.n	800c3bc <pvPortMalloc+0xa4>
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1f1      	bne.n	800c3a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3bc:	4b36      	ldr	r3, [pc, #216]	; (800c498 <pvPortMalloc+0x180>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d050      	beq.n	800c468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3c6:	6a3b      	ldr	r3, [r7, #32]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2208      	movs	r2, #8
 800c3cc:	4413      	add	r3, r2
 800c3ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	2308      	movs	r3, #8
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d91f      	bls.n	800c428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <pvPortMalloc+0xf8>
	__asm volatile
 800c3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fe:	f383 8811 	msr	BASEPRI, r3
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	613b      	str	r3, [r7, #16]
}
 800c40c:	bf00      	nop
 800c40e:	e7fe      	b.n	800c40e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	685a      	ldr	r2, [r3, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	1ad2      	subs	r2, r2, r3
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c422:	69b8      	ldr	r0, [r7, #24]
 800c424:	f000 f908 	bl	800c638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c428:	4b1d      	ldr	r3, [pc, #116]	; (800c4a0 <pvPortMalloc+0x188>)
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	4a1b      	ldr	r2, [pc, #108]	; (800c4a0 <pvPortMalloc+0x188>)
 800c434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c436:	4b1a      	ldr	r3, [pc, #104]	; (800c4a0 <pvPortMalloc+0x188>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	4b1b      	ldr	r3, [pc, #108]	; (800c4a8 <pvPortMalloc+0x190>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d203      	bcs.n	800c44a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c442:	4b17      	ldr	r3, [pc, #92]	; (800c4a0 <pvPortMalloc+0x188>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a18      	ldr	r2, [pc, #96]	; (800c4a8 <pvPortMalloc+0x190>)
 800c448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	4b13      	ldr	r3, [pc, #76]	; (800c49c <pvPortMalloc+0x184>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	431a      	orrs	r2, r3
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c45e:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <pvPortMalloc+0x194>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	4a11      	ldr	r2, [pc, #68]	; (800c4ac <pvPortMalloc+0x194>)
 800c466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c468:	f7fe fcfa 	bl	800ae60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	f003 0307 	and.w	r3, r3, #7
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00a      	beq.n	800c48c <pvPortMalloc+0x174>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	60fb      	str	r3, [r7, #12]
}
 800c488:	bf00      	nop
 800c48a:	e7fe      	b.n	800c48a <pvPortMalloc+0x172>
	return pvReturn;
 800c48c:	69fb      	ldr	r3, [r7, #28]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3728      	adds	r7, #40	; 0x28
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	24004ea4 	.word	0x24004ea4
 800c49c:	24004eb8 	.word	0x24004eb8
 800c4a0:	24004ea8 	.word	0x24004ea8
 800c4a4:	24004e9c 	.word	0x24004e9c
 800c4a8:	24004eac 	.word	0x24004eac
 800c4ac:	24004eb0 	.word	0x24004eb0

0800c4b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d04d      	beq.n	800c55e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4c2:	2308      	movs	r3, #8
 800c4c4:	425b      	negs	r3, r3
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	4b24      	ldr	r3, [pc, #144]	; (800c568 <vPortFree+0xb8>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4013      	ands	r3, r2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10a      	bne.n	800c4f4 <vPortFree+0x44>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	60fb      	str	r3, [r7, #12]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00a      	beq.n	800c512 <vPortFree+0x62>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	60bb      	str	r3, [r7, #8]
}
 800c50e:	bf00      	nop
 800c510:	e7fe      	b.n	800c510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	4b14      	ldr	r3, [pc, #80]	; (800c568 <vPortFree+0xb8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d01e      	beq.n	800c55e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d11a      	bne.n	800c55e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	4b0e      	ldr	r3, [pc, #56]	; (800c568 <vPortFree+0xb8>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	43db      	mvns	r3, r3
 800c532:	401a      	ands	r2, r3
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c538:	f7fe fc84 	bl	800ae44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	4b0a      	ldr	r3, [pc, #40]	; (800c56c <vPortFree+0xbc>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4413      	add	r3, r2
 800c546:	4a09      	ldr	r2, [pc, #36]	; (800c56c <vPortFree+0xbc>)
 800c548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f000 f874 	bl	800c638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c550:	4b07      	ldr	r3, [pc, #28]	; (800c570 <vPortFree+0xc0>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	4a06      	ldr	r2, [pc, #24]	; (800c570 <vPortFree+0xc0>)
 800c558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c55a:	f7fe fc81 	bl	800ae60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c55e:	bf00      	nop
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	24004eb8 	.word	0x24004eb8
 800c56c:	24004ea8 	.word	0x24004ea8
 800c570:	24004eb4 	.word	0x24004eb4

0800c574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c57a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c57e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c580:	4b27      	ldr	r3, [pc, #156]	; (800c620 <prvHeapInit+0xac>)
 800c582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00c      	beq.n	800c5a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3307      	adds	r3, #7
 800c592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f023 0307 	bic.w	r3, r3, #7
 800c59a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	4a1f      	ldr	r2, [pc, #124]	; (800c620 <prvHeapInit+0xac>)
 800c5a4:	4413      	add	r3, r2
 800c5a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5ac:	4a1d      	ldr	r2, [pc, #116]	; (800c624 <prvHeapInit+0xb0>)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5b2:	4b1c      	ldr	r3, [pc, #112]	; (800c624 <prvHeapInit+0xb0>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	4413      	add	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	1a9b      	subs	r3, r3, r2
 800c5c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f023 0307 	bic.w	r3, r3, #7
 800c5ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4a15      	ldr	r2, [pc, #84]	; (800c628 <prvHeapInit+0xb4>)
 800c5d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5d6:	4b14      	ldr	r3, [pc, #80]	; (800c628 <prvHeapInit+0xb4>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5de:	4b12      	ldr	r3, [pc, #72]	; (800c628 <prvHeapInit+0xb4>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	1ad2      	subs	r2, r2, r3
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5f4:	4b0c      	ldr	r3, [pc, #48]	; (800c628 <prvHeapInit+0xb4>)
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	4a0a      	ldr	r2, [pc, #40]	; (800c62c <prvHeapInit+0xb8>)
 800c602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	4a09      	ldr	r2, [pc, #36]	; (800c630 <prvHeapInit+0xbc>)
 800c60a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c60c:	4b09      	ldr	r3, [pc, #36]	; (800c634 <prvHeapInit+0xc0>)
 800c60e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c612:	601a      	str	r2, [r3, #0]
}
 800c614:	bf00      	nop
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	2400129c 	.word	0x2400129c
 800c624:	24004e9c 	.word	0x24004e9c
 800c628:	24004ea4 	.word	0x24004ea4
 800c62c:	24004eac 	.word	0x24004eac
 800c630:	24004ea8 	.word	0x24004ea8
 800c634:	24004eb8 	.word	0x24004eb8

0800c638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c640:	4b28      	ldr	r3, [pc, #160]	; (800c6e4 <prvInsertBlockIntoFreeList+0xac>)
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	e002      	b.n	800c64c <prvInsertBlockIntoFreeList+0x14>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	429a      	cmp	r2, r3
 800c654:	d8f7      	bhi.n	800c646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	4413      	add	r3, r2
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	429a      	cmp	r2, r3
 800c666:	d108      	bne.n	800c67a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	441a      	add	r2, r3
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	441a      	add	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d118      	bne.n	800c6c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	4b15      	ldr	r3, [pc, #84]	; (800c6e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	429a      	cmp	r2, r3
 800c698:	d00d      	beq.n	800c6b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	441a      	add	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	e008      	b.n	800c6c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6b6:	4b0c      	ldr	r3, [pc, #48]	; (800c6e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	e003      	b.n	800c6c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d002      	beq.n	800c6d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6d6:	bf00      	nop
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	24004e9c 	.word	0x24004e9c
 800c6e8:	24004ea4 	.word	0x24004ea4

0800c6ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	4913      	ldr	r1, [pc, #76]	; (800c740 <MX_USB_DEVICE_Init+0x54>)
 800c6f4:	4813      	ldr	r0, [pc, #76]	; (800c744 <MX_USB_DEVICE_Init+0x58>)
 800c6f6:	f7fb ff41 	bl	800857c <USBD_Init>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c700:	f7f4 f98e 	bl	8000a20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800c704:	4910      	ldr	r1, [pc, #64]	; (800c748 <MX_USB_DEVICE_Init+0x5c>)
 800c706:	480f      	ldr	r0, [pc, #60]	; (800c744 <MX_USB_DEVICE_Init+0x58>)
 800c708:	f7fb ff68 	bl	80085dc <USBD_RegisterClass>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c712:	f7f4 f985 	bl	8000a20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800c716:	490d      	ldr	r1, [pc, #52]	; (800c74c <MX_USB_DEVICE_Init+0x60>)
 800c718:	480a      	ldr	r0, [pc, #40]	; (800c744 <MX_USB_DEVICE_Init+0x58>)
 800c71a:	f7fb fe9f 	bl	800845c <USBD_CDC_RegisterInterface>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c724:	f7f4 f97c 	bl	8000a20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800c728:	4806      	ldr	r0, [pc, #24]	; (800c744 <MX_USB_DEVICE_Init+0x58>)
 800c72a:	f7fb ff8d 	bl	8008648 <USBD_Start>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d001      	beq.n	800c738 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c734:	f7f4 f974 	bl	8000a20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c738:	f7f7 f862 	bl	8003800 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c73c:	bf00      	nop
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	240000b4 	.word	0x240000b4
 800c744:	24004ebc 	.word	0x24004ebc
 800c748:	2400001c 	.word	0x2400001c
 800c74c:	240000a0 	.word	0x240000a0

0800c750 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800c754:	2200      	movs	r2, #0
 800c756:	4905      	ldr	r1, [pc, #20]	; (800c76c <CDC_Init_HS+0x1c>)
 800c758:	4805      	ldr	r0, [pc, #20]	; (800c770 <CDC_Init_HS+0x20>)
 800c75a:	f7fb fe99 	bl	8008490 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800c75e:	4905      	ldr	r1, [pc, #20]	; (800c774 <CDC_Init_HS+0x24>)
 800c760:	4803      	ldr	r0, [pc, #12]	; (800c770 <CDC_Init_HS+0x20>)
 800c762:	f7fb feb7 	bl	80084d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c766:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c768:	4618      	mov	r0, r3
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	24005998 	.word	0x24005998
 800c770:	24004ebc 	.word	0x24004ebc
 800c774:	24005198 	.word	0x24005198

0800c778 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800c778:	b480      	push	{r7}
 800c77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800c77c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800c77e:	4618      	mov	r0, r3
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	4603      	mov	r3, r0
 800c790:	6039      	str	r1, [r7, #0]
 800c792:	71fb      	strb	r3, [r7, #7]
 800c794:	4613      	mov	r3, r2
 800c796:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	2b23      	cmp	r3, #35	; 0x23
 800c79c:	d84a      	bhi.n	800c834 <CDC_Control_HS+0xac>
 800c79e:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <CDC_Control_HS+0x1c>)
 800c7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a4:	0800c835 	.word	0x0800c835
 800c7a8:	0800c835 	.word	0x0800c835
 800c7ac:	0800c835 	.word	0x0800c835
 800c7b0:	0800c835 	.word	0x0800c835
 800c7b4:	0800c835 	.word	0x0800c835
 800c7b8:	0800c835 	.word	0x0800c835
 800c7bc:	0800c835 	.word	0x0800c835
 800c7c0:	0800c835 	.word	0x0800c835
 800c7c4:	0800c835 	.word	0x0800c835
 800c7c8:	0800c835 	.word	0x0800c835
 800c7cc:	0800c835 	.word	0x0800c835
 800c7d0:	0800c835 	.word	0x0800c835
 800c7d4:	0800c835 	.word	0x0800c835
 800c7d8:	0800c835 	.word	0x0800c835
 800c7dc:	0800c835 	.word	0x0800c835
 800c7e0:	0800c835 	.word	0x0800c835
 800c7e4:	0800c835 	.word	0x0800c835
 800c7e8:	0800c835 	.word	0x0800c835
 800c7ec:	0800c835 	.word	0x0800c835
 800c7f0:	0800c835 	.word	0x0800c835
 800c7f4:	0800c835 	.word	0x0800c835
 800c7f8:	0800c835 	.word	0x0800c835
 800c7fc:	0800c835 	.word	0x0800c835
 800c800:	0800c835 	.word	0x0800c835
 800c804:	0800c835 	.word	0x0800c835
 800c808:	0800c835 	.word	0x0800c835
 800c80c:	0800c835 	.word	0x0800c835
 800c810:	0800c835 	.word	0x0800c835
 800c814:	0800c835 	.word	0x0800c835
 800c818:	0800c835 	.word	0x0800c835
 800c81c:	0800c835 	.word	0x0800c835
 800c820:	0800c835 	.word	0x0800c835
 800c824:	0800c835 	.word	0x0800c835
 800c828:	0800c835 	.word	0x0800c835
 800c82c:	0800c835 	.word	0x0800c835
 800c830:	0800c835 	.word	0x0800c835
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c834:	bf00      	nop
  }

  return (USBD_OK);
 800c836:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	4805      	ldr	r0, [pc, #20]	; (800c868 <CDC_Receive_HS+0x24>)
 800c852:	f7fb fe3f 	bl	80084d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800c856:	4804      	ldr	r0, [pc, #16]	; (800c868 <CDC_Receive_HS+0x24>)
 800c858:	f7fb fe5a 	bl	8008510 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c85c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	24004ebc 	.word	0x24004ebc

0800c86c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	4613      	mov	r3, r2
 800c878:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800c87e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c882:	4618      	mov	r0, r3
 800c884:	371c      	adds	r7, #28
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
	...

0800c890 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	6039      	str	r1, [r7, #0]
 800c89a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2212      	movs	r2, #18
 800c8a0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800c8a2:	4b03      	ldr	r3, [pc, #12]	; (800c8b0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	240000d0 	.word	0x240000d0

0800c8b4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	2204      	movs	r2, #4
 800c8c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8c6:	4b03      	ldr	r3, [pc, #12]	; (800c8d4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	240000e4 	.word	0x240000e4

0800c8d8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	6039      	str	r1, [r7, #0]
 800c8e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8e4:	79fb      	ldrb	r3, [r7, #7]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d105      	bne.n	800c8f6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	4907      	ldr	r1, [pc, #28]	; (800c90c <USBD_HS_ProductStrDescriptor+0x34>)
 800c8ee:	4808      	ldr	r0, [pc, #32]	; (800c910 <USBD_HS_ProductStrDescriptor+0x38>)
 800c8f0:	f7fd f85c 	bl	80099ac <USBD_GetString>
 800c8f4:	e004      	b.n	800c900 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	4904      	ldr	r1, [pc, #16]	; (800c90c <USBD_HS_ProductStrDescriptor+0x34>)
 800c8fa:	4805      	ldr	r0, [pc, #20]	; (800c910 <USBD_HS_ProductStrDescriptor+0x38>)
 800c8fc:	f7fd f856 	bl	80099ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800c900:	4b02      	ldr	r3, [pc, #8]	; (800c90c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	24006198 	.word	0x24006198
 800c910:	0800d34c 	.word	0x0800d34c

0800c914 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	4603      	mov	r3, r0
 800c91c:	6039      	str	r1, [r7, #0]
 800c91e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	4904      	ldr	r1, [pc, #16]	; (800c934 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800c924:	4804      	ldr	r0, [pc, #16]	; (800c938 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800c926:	f7fd f841 	bl	80099ac <USBD_GetString>
  return USBD_StrDesc;
 800c92a:	4b02      	ldr	r3, [pc, #8]	; (800c934 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	24006198 	.word	0x24006198
 800c938:	0800d364 	.word	0x0800d364

0800c93c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	221a      	movs	r2, #26
 800c94c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c94e:	f000 f843 	bl	800c9d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c952:	4b02      	ldr	r3, [pc, #8]	; (800c95c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	240000e8 	.word	0x240000e8

0800c960 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	6039      	str	r1, [r7, #0]
 800c96a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c96c:	79fb      	ldrb	r3, [r7, #7]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d105      	bne.n	800c97e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c972:	683a      	ldr	r2, [r7, #0]
 800c974:	4907      	ldr	r1, [pc, #28]	; (800c994 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c976:	4808      	ldr	r0, [pc, #32]	; (800c998 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c978:	f7fd f818 	bl	80099ac <USBD_GetString>
 800c97c:	e004      	b.n	800c988 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c97e:	683a      	ldr	r2, [r7, #0]
 800c980:	4904      	ldr	r1, [pc, #16]	; (800c994 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c982:	4805      	ldr	r0, [pc, #20]	; (800c998 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c984:	f7fd f812 	bl	80099ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800c988:	4b02      	ldr	r3, [pc, #8]	; (800c994 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	24006198 	.word	0x24006198
 800c998:	0800d378 	.word	0x0800d378

0800c99c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	6039      	str	r1, [r7, #0]
 800c9a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d105      	bne.n	800c9ba <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	4907      	ldr	r1, [pc, #28]	; (800c9d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c9b2:	4808      	ldr	r0, [pc, #32]	; (800c9d4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c9b4:	f7fc fffa 	bl	80099ac <USBD_GetString>
 800c9b8:	e004      	b.n	800c9c4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	4904      	ldr	r1, [pc, #16]	; (800c9d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c9be:	4805      	ldr	r0, [pc, #20]	; (800c9d4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c9c0:	f7fc fff4 	bl	80099ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9c4:	4b02      	ldr	r3, [pc, #8]	; (800c9d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	24006198 	.word	0x24006198
 800c9d4:	0800d384 	.word	0x0800d384

0800c9d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9de:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <Get_SerialNum+0x44>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ca20 <Get_SerialNum+0x48>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c9ea:	4b0e      	ldr	r3, [pc, #56]	; (800ca24 <Get_SerialNum+0x4c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d009      	beq.n	800ca12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9fe:	2208      	movs	r2, #8
 800ca00:	4909      	ldr	r1, [pc, #36]	; (800ca28 <Get_SerialNum+0x50>)
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 f814 	bl	800ca30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca08:	2204      	movs	r2, #4
 800ca0a:	4908      	ldr	r1, [pc, #32]	; (800ca2c <Get_SerialNum+0x54>)
 800ca0c:	68b8      	ldr	r0, [r7, #8]
 800ca0e:	f000 f80f 	bl	800ca30 <IntToUnicode>
  }
}
 800ca12:	bf00      	nop
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	1ff1e800 	.word	0x1ff1e800
 800ca20:	1ff1e804 	.word	0x1ff1e804
 800ca24:	1ff1e808 	.word	0x1ff1e808
 800ca28:	240000ea 	.word	0x240000ea
 800ca2c:	240000fa 	.word	0x240000fa

0800ca30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca42:	2300      	movs	r3, #0
 800ca44:	75fb      	strb	r3, [r7, #23]
 800ca46:	e027      	b.n	800ca98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	0f1b      	lsrs	r3, r3, #28
 800ca4c:	2b09      	cmp	r3, #9
 800ca4e:	d80b      	bhi.n	800ca68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	0f1b      	lsrs	r3, r3, #28
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	7dfb      	ldrb	r3, [r7, #23]
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	440b      	add	r3, r1
 800ca60:	3230      	adds	r2, #48	; 0x30
 800ca62:	b2d2      	uxtb	r2, r2
 800ca64:	701a      	strb	r2, [r3, #0]
 800ca66:	e00a      	b.n	800ca7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	0f1b      	lsrs	r3, r3, #28
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4619      	mov	r1, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	440b      	add	r3, r1
 800ca78:	3237      	adds	r2, #55	; 0x37
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	011b      	lsls	r3, r3, #4
 800ca82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	3301      	adds	r3, #1
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	3301      	adds	r3, #1
 800ca96:	75fb      	strb	r3, [r7, #23]
 800ca98:	7dfa      	ldrb	r2, [r7, #23]
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d3d3      	bcc.n	800ca48 <IntToUnicode+0x18>
  }
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	371c      	adds	r7, #28
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
	...

0800cab0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b0b2      	sub	sp, #200	; 0xc8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cab8:	f107 0310 	add.w	r3, r7, #16
 800cabc:	22b8      	movs	r2, #184	; 0xb8
 800cabe:	2100      	movs	r1, #0
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 fb35 	bl	800d130 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a1a      	ldr	r2, [pc, #104]	; (800cb34 <HAL_PCD_MspInit+0x84>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d12c      	bne.n	800cb2a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cad0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cad4:	f04f 0300 	mov.w	r3, #0
 800cad8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cadc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cae4:	f107 0310 	add.w	r3, r7, #16
 800cae8:	4618      	mov	r0, r3
 800caea:	f7f7 fe2b 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800caf4:	f7f3 ff94 	bl	8000a20 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800caf8:	f7f6 fe82 	bl	8003800 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cafc:	4b0e      	ldr	r3, [pc, #56]	; (800cb38 <HAL_PCD_MspInit+0x88>)
 800cafe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cb02:	4a0d      	ldr	r2, [pc, #52]	; (800cb38 <HAL_PCD_MspInit+0x88>)
 800cb04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cb08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <HAL_PCD_MspInit+0x88>)
 800cb0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cb12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	2105      	movs	r1, #5
 800cb1e:	204d      	movs	r0, #77	; 0x4d
 800cb20:	f7f4 fc86 	bl	8001430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cb24:	204d      	movs	r0, #77	; 0x4d
 800cb26:	f7f4 fc9d 	bl	8001464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cb2a:	bf00      	nop
 800cb2c:	37c8      	adds	r7, #200	; 0xc8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	40040000 	.word	0x40040000
 800cb38:	58024400 	.word	0x58024400

0800cb3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fb fdc5 	bl	80086e2 <USBD_LL_SetupStage>
}
 800cb58:	bf00      	nop
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cb72:	78fa      	ldrb	r2, [r7, #3]
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	4613      	mov	r3, r2
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	4413      	add	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	440b      	add	r3, r1
 800cb80:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	78fb      	ldrb	r3, [r7, #3]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f7fb fdff 	bl	800878c <USBD_LL_DataOutStage>
}
 800cb8e:	bf00      	nop
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cba8:	78fa      	ldrb	r2, [r7, #3]
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	4613      	mov	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	4413      	add	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	440b      	add	r3, r1
 800cbb6:	3348      	adds	r3, #72	; 0x48
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	78fb      	ldrb	r3, [r7, #3]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	f7fb fe98 	bl	80088f2 <USBD_LL_DataInStage>
}
 800cbc2:	bf00      	nop
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fb ffd2 	bl	8008b82 <USBD_LL_SOF>
}
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]
 800cbfe:	e008      	b.n	800cc12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d102      	bne.n	800cc0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	73fb      	strb	r3, [r7, #15]
 800cc0c:	e001      	b.n	800cc12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cc0e:	f7f3 ff07 	bl	8000a20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc18:	7bfa      	ldrb	r2, [r7, #15]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fb ff6c 	bl	8008afa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fb ff14 	bl	8008a56 <USBD_LL_Reset>
}
 800cc2e:	bf00      	nop
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
	...

0800cc38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fb ff67 	bl	8008b1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	6812      	ldr	r2, [r2, #0]
 800cc5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc5e:	f043 0301 	orr.w	r3, r3, #1
 800cc62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a1b      	ldr	r3, [r3, #32]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d005      	beq.n	800cc78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc6c:	4b04      	ldr	r3, [pc, #16]	; (800cc80 <HAL_PCD_SuspendCallback+0x48>)
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	4a03      	ldr	r2, [pc, #12]	; (800cc80 <HAL_PCD_SuspendCallback+0x48>)
 800cc72:	f043 0306 	orr.w	r3, r3, #6
 800cc76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	e000ed00 	.word	0xe000ed00

0800cc84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fb ff5d 	bl	8008b52 <USBD_LL_Resume>
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fb ffb5 	bl	8008c26 <USBD_LL_IsoOUTIncomplete>
}
 800ccbc:	bf00      	nop
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	460b      	mov	r3, r1
 800ccce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccd6:	78fa      	ldrb	r2, [r7, #3]
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fb ff71 	bl	8008bc2 <USBD_LL_IsoINIncomplete>
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fb ffc7 	bl	8008c8a <USBD_LL_DevConnected>
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fb ffc4 	bl	8008ca0 <USBD_LL_DevDisconnected>
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d140      	bne.n	800cdb2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800cd30:	4a22      	ldr	r2, [pc, #136]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a20      	ldr	r2, [pc, #128]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cd40:	4b1e      	ldr	r3, [pc, #120]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd42:	4a1f      	ldr	r2, [pc, #124]	; (800cdc0 <USBD_LL_Init+0xa0>)
 800cd44:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800cd46:	4b1d      	ldr	r3, [pc, #116]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd48:	2209      	movs	r2, #9
 800cd4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800cd4c:	4b1b      	ldr	r3, [pc, #108]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd4e:	2202      	movs	r2, #2
 800cd50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cd52:	4b1a      	ldr	r3, [pc, #104]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cd58:	4b18      	ldr	r3, [pc, #96]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cd5e:	4b17      	ldr	r3, [pc, #92]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cd64:	4b15      	ldr	r3, [pc, #84]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800cd6a:	4b14      	ldr	r3, [pc, #80]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cd70:	4b12      	ldr	r3, [pc, #72]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd72:	2200      	movs	r2, #0
 800cd74:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800cd76:	4b11      	ldr	r3, [pc, #68]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cd7c:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800cd82:	480e      	ldr	r0, [pc, #56]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd84:	f7f5 fa49 	bl	800221a <HAL_PCD_Init>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800cd8e:	f7f3 fe47 	bl	8000a20 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800cd92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd96:	4809      	ldr	r0, [pc, #36]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cd98:	f7f6 fcb7 	bl	800370a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800cd9c:	2280      	movs	r2, #128	; 0x80
 800cd9e:	2100      	movs	r1, #0
 800cda0:	4806      	ldr	r0, [pc, #24]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cda2:	f7f6 fc6b 	bl	800367c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800cda6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800cdaa:	2101      	movs	r1, #1
 800cdac:	4803      	ldr	r0, [pc, #12]	; (800cdbc <USBD_LL_Init+0x9c>)
 800cdae:	f7f6 fc65 	bl	800367c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	24006398 	.word	0x24006398
 800cdc0:	40040000 	.word	0x40040000

0800cdc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7f5 fb41 	bl	8002462 <HAL_PCD_Start>
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f942 	bl	800d070 <USBD_Get_USB_Status>
 800cdec:	4603      	mov	r3, r0
 800cdee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	4608      	mov	r0, r1
 800ce04:	4611      	mov	r1, r2
 800ce06:	461a      	mov	r2, r3
 800ce08:	4603      	mov	r3, r0
 800ce0a:	70fb      	strb	r3, [r7, #3]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70bb      	strb	r3, [r7, #2]
 800ce10:	4613      	mov	r3, r2
 800ce12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce22:	78bb      	ldrb	r3, [r7, #2]
 800ce24:	883a      	ldrh	r2, [r7, #0]
 800ce26:	78f9      	ldrb	r1, [r7, #3]
 800ce28:	f7f6 f841 	bl	8002eae <HAL_PCD_EP_Open>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 f91c 	bl	800d070 <USBD_Get_USB_Status>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b084      	sub	sp, #16
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	460b      	mov	r3, r1
 800ce50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce52:	2300      	movs	r3, #0
 800ce54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce60:	78fa      	ldrb	r2, [r7, #3]
 800ce62:	4611      	mov	r1, r2
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7f6 f88a 	bl	8002f7e <HAL_PCD_EP_Close>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 f8fd 	bl	800d070 <USBD_Get_USB_Status>
 800ce76:	4603      	mov	r3, r0
 800ce78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce9e:	78fa      	ldrb	r2, [r7, #3]
 800cea0:	4611      	mov	r1, r2
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7f6 f944 	bl	8003130 <HAL_PCD_EP_SetStall>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 f8de 	bl	800d070 <USBD_Get_USB_Status>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b084      	sub	sp, #16
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	460b      	mov	r3, r1
 800cecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ced2:	2300      	movs	r3, #0
 800ced4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cedc:	78fa      	ldrb	r2, [r7, #3]
 800cede:	4611      	mov	r1, r2
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7f6 f989 	bl	80031f8 <HAL_PCD_EP_ClrStall>
 800cee6:	4603      	mov	r3, r0
 800cee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 f8bf 	bl	800d070 <USBD_Get_USB_Status>
 800cef2:	4603      	mov	r3, r0
 800cef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cef6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	da0b      	bge.n	800cf34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf1c:	78fb      	ldrb	r3, [r7, #3]
 800cf1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf22:	68f9      	ldr	r1, [r7, #12]
 800cf24:	4613      	mov	r3, r2
 800cf26:	00db      	lsls	r3, r3, #3
 800cf28:	4413      	add	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	440b      	add	r3, r1
 800cf2e:	333e      	adds	r3, #62	; 0x3e
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	e00b      	b.n	800cf4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf34:	78fb      	ldrb	r3, [r7, #3]
 800cf36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf3a:	68f9      	ldr	r1, [r7, #12]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	440b      	add	r3, r1
 800cf46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cf4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf72:	78fa      	ldrb	r2, [r7, #3]
 800cf74:	4611      	mov	r1, r2
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7f5 ff74 	bl	8002e64 <HAL_PCD_SetAddress>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 f874 	bl	800d070 <USBD_Get_USB_Status>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b086      	sub	sp, #24
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	60f8      	str	r0, [r7, #12]
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	603b      	str	r3, [r7, #0]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfb4:	7af9      	ldrb	r1, [r7, #11]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	f7f6 f87e 	bl	80030ba <HAL_PCD_EP_Transmit>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f000 f853 	bl	800d070 <USBD_Get_USB_Status>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfce:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	607a      	str	r2, [r7, #4]
 800cfe2:	603b      	str	r3, [r7, #0]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cff6:	7af9      	ldrb	r1, [r7, #11]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	f7f6 f809 	bl	8003012 <HAL_PCD_EP_Receive>
 800d000:	4603      	mov	r3, r0
 800d002:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d004:	7dfb      	ldrb	r3, [r7, #23]
 800d006:	4618      	mov	r0, r3
 800d008:	f000 f832 	bl	800d070 <USBD_Get_USB_Status>
 800d00c:	4603      	mov	r3, r0
 800d00e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d010:	7dbb      	ldrb	r3, [r7, #22]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b082      	sub	sp, #8
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	460b      	mov	r3, r1
 800d024:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d02c:	78fa      	ldrb	r2, [r7, #3]
 800d02e:	4611      	mov	r1, r2
 800d030:	4618      	mov	r0, r3
 800d032:	f7f6 f82a 	bl	800308a <HAL_PCD_EP_GetRxCount>
 800d036:	4603      	mov	r3, r0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d048:	4b03      	ldr	r3, [pc, #12]	; (800d058 <USBD_static_malloc+0x18>)
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	240068a4 	.word	0x240068a4

0800d05c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	4603      	mov	r3, r0
 800d078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	2b03      	cmp	r3, #3
 800d082:	d817      	bhi.n	800d0b4 <USBD_Get_USB_Status+0x44>
 800d084:	a201      	add	r2, pc, #4	; (adr r2, 800d08c <USBD_Get_USB_Status+0x1c>)
 800d086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08a:	bf00      	nop
 800d08c:	0800d09d 	.word	0x0800d09d
 800d090:	0800d0a3 	.word	0x0800d0a3
 800d094:	0800d0a9 	.word	0x0800d0a9
 800d098:	0800d0af 	.word	0x0800d0af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a0:	e00b      	b.n	800d0ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a6:	e008      	b.n	800d0ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ac:	e005      	b.n	800d0ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0b2:	e002      	b.n	800d0ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0b8:	bf00      	nop
  }
  return usb_status;
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3714      	adds	r7, #20
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <__libc_init_array>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	4d0d      	ldr	r5, [pc, #52]	; (800d100 <__libc_init_array+0x38>)
 800d0cc:	4c0d      	ldr	r4, [pc, #52]	; (800d104 <__libc_init_array+0x3c>)
 800d0ce:	1b64      	subs	r4, r4, r5
 800d0d0:	10a4      	asrs	r4, r4, #2
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	42a6      	cmp	r6, r4
 800d0d6:	d109      	bne.n	800d0ec <__libc_init_array+0x24>
 800d0d8:	4d0b      	ldr	r5, [pc, #44]	; (800d108 <__libc_init_array+0x40>)
 800d0da:	4c0c      	ldr	r4, [pc, #48]	; (800d10c <__libc_init_array+0x44>)
 800d0dc:	f000 f8f2 	bl	800d2c4 <_init>
 800d0e0:	1b64      	subs	r4, r4, r5
 800d0e2:	10a4      	asrs	r4, r4, #2
 800d0e4:	2600      	movs	r6, #0
 800d0e6:	42a6      	cmp	r6, r4
 800d0e8:	d105      	bne.n	800d0f6 <__libc_init_array+0x2e>
 800d0ea:	bd70      	pop	{r4, r5, r6, pc}
 800d0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f0:	4798      	blx	r3
 800d0f2:	3601      	adds	r6, #1
 800d0f4:	e7ee      	b.n	800d0d4 <__libc_init_array+0xc>
 800d0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0fa:	4798      	blx	r3
 800d0fc:	3601      	adds	r6, #1
 800d0fe:	e7f2      	b.n	800d0e6 <__libc_init_array+0x1e>
 800d100:	0800d428 	.word	0x0800d428
 800d104:	0800d428 	.word	0x0800d428
 800d108:	0800d428 	.word	0x0800d428
 800d10c:	0800d42c 	.word	0x0800d42c

0800d110 <__retarget_lock_acquire_recursive>:
 800d110:	4770      	bx	lr

0800d112 <__retarget_lock_release_recursive>:
 800d112:	4770      	bx	lr

0800d114 <memcpy>:
 800d114:	440a      	add	r2, r1
 800d116:	4291      	cmp	r1, r2
 800d118:	f100 33ff 	add.w	r3, r0, #4294967295
 800d11c:	d100      	bne.n	800d120 <memcpy+0xc>
 800d11e:	4770      	bx	lr
 800d120:	b510      	push	{r4, lr}
 800d122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d12a:	4291      	cmp	r1, r2
 800d12c:	d1f9      	bne.n	800d122 <memcpy+0xe>
 800d12e:	bd10      	pop	{r4, pc}

0800d130 <memset>:
 800d130:	4402      	add	r2, r0
 800d132:	4603      	mov	r3, r0
 800d134:	4293      	cmp	r3, r2
 800d136:	d100      	bne.n	800d13a <memset+0xa>
 800d138:	4770      	bx	lr
 800d13a:	f803 1b01 	strb.w	r1, [r3], #1
 800d13e:	e7f9      	b.n	800d134 <memset+0x4>

0800d140 <cleanup_glue>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	460c      	mov	r4, r1
 800d144:	6809      	ldr	r1, [r1, #0]
 800d146:	4605      	mov	r5, r0
 800d148:	b109      	cbz	r1, 800d14e <cleanup_glue+0xe>
 800d14a:	f7ff fff9 	bl	800d140 <cleanup_glue>
 800d14e:	4621      	mov	r1, r4
 800d150:	4628      	mov	r0, r5
 800d152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d156:	f000 b869 	b.w	800d22c <_free_r>
	...

0800d15c <_reclaim_reent>:
 800d15c:	4b2c      	ldr	r3, [pc, #176]	; (800d210 <_reclaim_reent+0xb4>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4283      	cmp	r3, r0
 800d162:	b570      	push	{r4, r5, r6, lr}
 800d164:	4604      	mov	r4, r0
 800d166:	d051      	beq.n	800d20c <_reclaim_reent+0xb0>
 800d168:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d16a:	b143      	cbz	r3, 800d17e <_reclaim_reent+0x22>
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d14a      	bne.n	800d208 <_reclaim_reent+0xac>
 800d172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d174:	6819      	ldr	r1, [r3, #0]
 800d176:	b111      	cbz	r1, 800d17e <_reclaim_reent+0x22>
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 f857 	bl	800d22c <_free_r>
 800d17e:	6961      	ldr	r1, [r4, #20]
 800d180:	b111      	cbz	r1, 800d188 <_reclaim_reent+0x2c>
 800d182:	4620      	mov	r0, r4
 800d184:	f000 f852 	bl	800d22c <_free_r>
 800d188:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d18a:	b111      	cbz	r1, 800d192 <_reclaim_reent+0x36>
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 f84d 	bl	800d22c <_free_r>
 800d192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d194:	b111      	cbz	r1, 800d19c <_reclaim_reent+0x40>
 800d196:	4620      	mov	r0, r4
 800d198:	f000 f848 	bl	800d22c <_free_r>
 800d19c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d19e:	b111      	cbz	r1, 800d1a6 <_reclaim_reent+0x4a>
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f000 f843 	bl	800d22c <_free_r>
 800d1a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d1a8:	b111      	cbz	r1, 800d1b0 <_reclaim_reent+0x54>
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f000 f83e 	bl	800d22c <_free_r>
 800d1b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d1b2:	b111      	cbz	r1, 800d1ba <_reclaim_reent+0x5e>
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 f839 	bl	800d22c <_free_r>
 800d1ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d1bc:	b111      	cbz	r1, 800d1c4 <_reclaim_reent+0x68>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 f834 	bl	800d22c <_free_r>
 800d1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1c6:	b111      	cbz	r1, 800d1ce <_reclaim_reent+0x72>
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f000 f82f 	bl	800d22c <_free_r>
 800d1ce:	69a3      	ldr	r3, [r4, #24]
 800d1d0:	b1e3      	cbz	r3, 800d20c <_reclaim_reent+0xb0>
 800d1d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4798      	blx	r3
 800d1d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d1da:	b1b9      	cbz	r1, 800d20c <_reclaim_reent+0xb0>
 800d1dc:	4620      	mov	r0, r4
 800d1de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1e2:	f7ff bfad 	b.w	800d140 <cleanup_glue>
 800d1e6:	5949      	ldr	r1, [r1, r5]
 800d1e8:	b941      	cbnz	r1, 800d1fc <_reclaim_reent+0xa0>
 800d1ea:	3504      	adds	r5, #4
 800d1ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1ee:	2d80      	cmp	r5, #128	; 0x80
 800d1f0:	68d9      	ldr	r1, [r3, #12]
 800d1f2:	d1f8      	bne.n	800d1e6 <_reclaim_reent+0x8a>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 f819 	bl	800d22c <_free_r>
 800d1fa:	e7ba      	b.n	800d172 <_reclaim_reent+0x16>
 800d1fc:	680e      	ldr	r6, [r1, #0]
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 f814 	bl	800d22c <_free_r>
 800d204:	4631      	mov	r1, r6
 800d206:	e7ef      	b.n	800d1e8 <_reclaim_reent+0x8c>
 800d208:	2500      	movs	r5, #0
 800d20a:	e7ef      	b.n	800d1ec <_reclaim_reent+0x90>
 800d20c:	bd70      	pop	{r4, r5, r6, pc}
 800d20e:	bf00      	nop
 800d210:	24000104 	.word	0x24000104

0800d214 <__malloc_lock>:
 800d214:	4801      	ldr	r0, [pc, #4]	; (800d21c <__malloc_lock+0x8>)
 800d216:	f7ff bf7b 	b.w	800d110 <__retarget_lock_acquire_recursive>
 800d21a:	bf00      	nop
 800d21c:	24006ac4 	.word	0x24006ac4

0800d220 <__malloc_unlock>:
 800d220:	4801      	ldr	r0, [pc, #4]	; (800d228 <__malloc_unlock+0x8>)
 800d222:	f7ff bf76 	b.w	800d112 <__retarget_lock_release_recursive>
 800d226:	bf00      	nop
 800d228:	24006ac4 	.word	0x24006ac4

0800d22c <_free_r>:
 800d22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d22e:	2900      	cmp	r1, #0
 800d230:	d044      	beq.n	800d2bc <_free_r+0x90>
 800d232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d236:	9001      	str	r0, [sp, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f1a1 0404 	sub.w	r4, r1, #4
 800d23e:	bfb8      	it	lt
 800d240:	18e4      	addlt	r4, r4, r3
 800d242:	f7ff ffe7 	bl	800d214 <__malloc_lock>
 800d246:	4a1e      	ldr	r2, [pc, #120]	; (800d2c0 <_free_r+0x94>)
 800d248:	9801      	ldr	r0, [sp, #4]
 800d24a:	6813      	ldr	r3, [r2, #0]
 800d24c:	b933      	cbnz	r3, 800d25c <_free_r+0x30>
 800d24e:	6063      	str	r3, [r4, #4]
 800d250:	6014      	str	r4, [r2, #0]
 800d252:	b003      	add	sp, #12
 800d254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d258:	f7ff bfe2 	b.w	800d220 <__malloc_unlock>
 800d25c:	42a3      	cmp	r3, r4
 800d25e:	d908      	bls.n	800d272 <_free_r+0x46>
 800d260:	6825      	ldr	r5, [r4, #0]
 800d262:	1961      	adds	r1, r4, r5
 800d264:	428b      	cmp	r3, r1
 800d266:	bf01      	itttt	eq
 800d268:	6819      	ldreq	r1, [r3, #0]
 800d26a:	685b      	ldreq	r3, [r3, #4]
 800d26c:	1949      	addeq	r1, r1, r5
 800d26e:	6021      	streq	r1, [r4, #0]
 800d270:	e7ed      	b.n	800d24e <_free_r+0x22>
 800d272:	461a      	mov	r2, r3
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	b10b      	cbz	r3, 800d27c <_free_r+0x50>
 800d278:	42a3      	cmp	r3, r4
 800d27a:	d9fa      	bls.n	800d272 <_free_r+0x46>
 800d27c:	6811      	ldr	r1, [r2, #0]
 800d27e:	1855      	adds	r5, r2, r1
 800d280:	42a5      	cmp	r5, r4
 800d282:	d10b      	bne.n	800d29c <_free_r+0x70>
 800d284:	6824      	ldr	r4, [r4, #0]
 800d286:	4421      	add	r1, r4
 800d288:	1854      	adds	r4, r2, r1
 800d28a:	42a3      	cmp	r3, r4
 800d28c:	6011      	str	r1, [r2, #0]
 800d28e:	d1e0      	bne.n	800d252 <_free_r+0x26>
 800d290:	681c      	ldr	r4, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	6053      	str	r3, [r2, #4]
 800d296:	4421      	add	r1, r4
 800d298:	6011      	str	r1, [r2, #0]
 800d29a:	e7da      	b.n	800d252 <_free_r+0x26>
 800d29c:	d902      	bls.n	800d2a4 <_free_r+0x78>
 800d29e:	230c      	movs	r3, #12
 800d2a0:	6003      	str	r3, [r0, #0]
 800d2a2:	e7d6      	b.n	800d252 <_free_r+0x26>
 800d2a4:	6825      	ldr	r5, [r4, #0]
 800d2a6:	1961      	adds	r1, r4, r5
 800d2a8:	428b      	cmp	r3, r1
 800d2aa:	bf04      	itt	eq
 800d2ac:	6819      	ldreq	r1, [r3, #0]
 800d2ae:	685b      	ldreq	r3, [r3, #4]
 800d2b0:	6063      	str	r3, [r4, #4]
 800d2b2:	bf04      	itt	eq
 800d2b4:	1949      	addeq	r1, r1, r5
 800d2b6:	6021      	streq	r1, [r4, #0]
 800d2b8:	6054      	str	r4, [r2, #4]
 800d2ba:	e7ca      	b.n	800d252 <_free_r+0x26>
 800d2bc:	b003      	add	sp, #12
 800d2be:	bd30      	pop	{r4, r5, pc}
 800d2c0:	24006ac8 	.word	0x24006ac8

0800d2c4 <_init>:
 800d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c6:	bf00      	nop
 800d2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ca:	bc08      	pop	{r3}
 800d2cc:	469e      	mov	lr, r3
 800d2ce:	4770      	bx	lr

0800d2d0 <_fini>:
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d2:	bf00      	nop
 800d2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d6:	bc08      	pop	{r3}
 800d2d8:	469e      	mov	lr, r3
 800d2da:	4770      	bx	lr
